;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort instruction 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (instruction instruction) Bool)

(declare-const dummy4 instruction)

(declare-datatypes ()
((instruction__ref (mk_instruction__ref (instruction__content instruction)))))
(define-fun instruction__ref___projection ((a instruction__ref)) instruction
  (instruction__content a))

(declare-fun to_rep2 (instruction) Int)

(declare-fun of_rep2 (Int) instruction)

;; inversion_axiom
  (assert
  (forall ((x instruction))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x instruction)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant2 ((temp___expr_153 Int)
  (temp___is_init_150 Bool) (temp___skip_constant_151 Bool)
  (temp___do_toplevel_152 Bool)) Bool (=>
                                      (or (= temp___is_init_150 true)
                                      (<= 0 2)) (in_range4 temp___expr_153)))

(declare-fun read (us_t) Int)

(declare-fun read__function_guard (Int us_t) Bool)

;; read__post_axiom
  (assert
  (forall ((word us_t))
  (! (=> (dynamic_invariant1 word true true true) (dynamic_invariant2
     (read word) true false true)) :pattern ((read word)) )))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__types__value__e integer)))))
(define-fun us_split_fields_E__projection ((a us_split_fields)) integer
  (rec__types__value__e a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep1
                           (rec__types__value__e (us_split_fields1 a)))
                   (to_rep1 (rec__types__value__e (us_split_fields1 b))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const types__value__e__first__bit Int)

(declare-const types__value__e__last__bit Int)

(declare-const types__value__e__position Int)

;; types__value__e__first__bit_axiom
  (assert (<= 0 types__value__e__first__bit))

;; types__value__e__last__bit_axiom
  (assert (< types__value__e__first__bit types__value__e__last__bit))

;; types__value__e__position_axiom
  (assert (<= 0 types__value__e__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes () ((value__ref (mk_value__ref (value__content us_rep)))))
(define-fun value__ref___projection ((a value__ref)) us_rep (value__content
                                                            a))

(declare-fun read1 (us_t) us_rep)

(declare-fun read__function_guard1 (us_rep us_t) Bool)

(declare-sort operation 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (operation operation) Bool)

(declare-const dummy6 operation)

(declare-datatypes ()
((operation__ref (mk_operation__ref (operation__content operation)))))
(define-fun operation__ref___projection ((a operation__ref)) operation
  (operation__content a))

(declare-fun to_rep3 (operation) Int)

(declare-fun of_rep3 (Int) operation)

;; inversion_axiom
  (assert
  (forall ((x operation))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x operation)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun dynamic_invariant3 ((temp___expr_177 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool (=>
                                      (or (= temp___is_init_174 true)
                                      (<= 0 3)) (in_range5 temp___expr_177)))

(declare-fun read2 (us_t) Int)

(declare-fun read__function_guard2 (Int us_t) Bool)

;; read__post_axiom
  (assert
  (forall ((op us_t))
  (! (=> (dynamic_invariant1 op true true true) (dynamic_invariant3
     (read2 op) true false true)) :pattern ((read2 op)) )))

(declare-sort token_kind 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (token_kind token_kind) Bool)

(declare-const dummy7 token_kind)

(declare-datatypes ()
((token_kind__ref (mk_token_kind__ref (token_kind__content token_kind)))))
(define-fun token_kind__ref___projection ((a token_kind__ref)) token_kind
  (token_kind__content a))

(define-fun dynamic_invariant4 ((temp___expr_185 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)) Bool (=>
                                      (or (= temp___is_init_182 true)
                                      (<= 0 2)) (in_range6 temp___expr_185)))

(declare-fun to_rep4 (token_kind) Int)

(declare-fun of_rep4 (Int) token_kind)

;; inversion_axiom
  (assert
  (forall ((x token_kind))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x token_kind)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__tokens__token__kind token_kind)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) token_kind
  (rec__tokens__token__kind a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__tokens__token__val us_rep)(rec__tokens__token__op operation)(rec__tokens__token__instr instruction)))))
(define-fun us_split_fields_Val__projection ((a us_split_fields2)) us_rep
  (rec__tokens__token__val a))

(define-fun us_split_fields_Op__projection ((a us_split_fields2)) operation
  (rec__tokens__token__op a))

(define-fun us_split_fields_Instr__projection ((a us_split_fields2)) instruction
  (rec__tokens__token__instr a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__constrained Bool)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                                 a))

(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun us_rep___4__projection ((a us_rep1)) Bool (attr__constrained a))

(define-fun tokens__token__val__pred ((a us_rep1)) Bool (= (to_rep4
                                                           (rec__tokens__token__kind
                                                           (us_split_discrs1
                                                           a))) 0))

(define-fun tokens__token__op__pred ((a us_rep1)) Bool (= (to_rep4
                                                          (rec__tokens__token__kind
                                                          (us_split_discrs1
                                                          a))) 1))

(define-fun tokens__token__instr__pred ((a us_rep1)) Bool (= (to_rep4
                                                             (rec__tokens__token__kind
                                                             (us_split_discrs1
                                                             a))) 2))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep4
                            (rec__tokens__token__kind (us_split_discrs1 a)))
                         (to_rep4
                         (rec__tokens__token__kind (us_split_discrs1 b))))
                         (=> (tokens__token__val__pred a)
                         (= (bool_eq2
                            (rec__tokens__token__val (us_split_fields3 a))
                            (rec__tokens__token__val (us_split_fields3 b))) true)))
                         (=> (tokens__token__op__pred a)
                         (= (to_rep3
                            (rec__tokens__token__op (us_split_fields3 a)))
                         (to_rep3
                         (rec__tokens__token__op (us_split_fields3 b))))))
                         (=> (tokens__token__instr__pred a)
                         (= (to_rep2
                            (rec__tokens__token__instr (us_split_fields3 a)))
                         (to_rep2
                         (rec__tokens__token__instr (us_split_fields3 b))))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const tokens__token__kind__first__bit Int)

(declare-const tokens__token__kind__last__bit Int)

(declare-const tokens__token__kind__position Int)

;; tokens__token__kind__first__bit_axiom
  (assert (<= 0 tokens__token__kind__first__bit))

;; tokens__token__kind__last__bit_axiom
  (assert (< tokens__token__kind__first__bit tokens__token__kind__last__bit))

;; tokens__token__kind__position_axiom
  (assert (<= 0 tokens__token__kind__position))

(declare-const tokens__token__val__first__bit Int)

(declare-const tokens__token__val__last__bit Int)

(declare-const tokens__token__val__position Int)

;; tokens__token__val__first__bit_axiom
  (assert (<= 0 tokens__token__val__first__bit))

;; tokens__token__val__last__bit_axiom
  (assert (< tokens__token__val__first__bit tokens__token__val__last__bit))

;; tokens__token__val__position_axiom
  (assert (<= 0 tokens__token__val__position))

(declare-const tokens__token__op__first__bit Int)

(declare-const tokens__token__op__last__bit Int)

(declare-const tokens__token__op__position Int)

;; tokens__token__op__first__bit_axiom
  (assert (<= 0 tokens__token__op__first__bit))

;; tokens__token__op__last__bit_axiom
  (assert (< tokens__token__op__first__bit tokens__token__op__last__bit))

;; tokens__token__op__position_axiom
  (assert (<= 0 tokens__token__op__position))

(declare-const tokens__token__instr__first__bit Int)

(declare-const tokens__token__instr__last__bit Int)

(declare-const tokens__token__instr__position Int)

;; tokens__token__instr__first__bit_axiom
  (assert (<= 0 tokens__token__instr__first__bit))

;; tokens__token__instr__last__bit_axiom
  (assert
  (< tokens__token__instr__first__bit tokens__token__instr__last__bit))

;; tokens__token__instr__position_axiom
  (assert (<= 0 tokens__token__instr__position))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes ()
((token__ref (mk_token__ref (token__content us_rep1)))))
(define-fun token__ref___projection ((a token__ref)) us_rep1 (token__content
                                                             a))

(define-fun default_initial_assumption ((temp___expr_193 us_rep1)
  (temp___skip_top_level_194 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_193) false)
                                         (= (to_rep4
                                            (rec__tokens__token__kind
                                            (us_split_discrs1
                                            temp___expr_193))) 0)))

(declare-const v__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort tTword_bufferSP1 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 1024)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (tTword_bufferSP1 tTword_bufferSP1) Bool)

(declare-const dummy9 tTword_bufferSP1)

(declare-datatypes ()
((tTword_bufferSP1__ref
 (mk_tTword_bufferSP1__ref (tTword_bufferSP1__content tTword_bufferSP1)))))
(define-fun tTword_bufferSP1__ref___projection ((a tTword_bufferSP1__ref)) tTword_bufferSP1
  (tTword_bufferSP1__content a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r1b Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (integer integer) Bool)

(declare-const dummy10 integer)

(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content integer)))))
(define-fun t2b__ref___projection ((a t2b__ref)) integer (t2b__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int character))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))

(define-fun of_array1 ((a (Array Int character)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq4 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq11 (us_t1 us_t1) Bool)

(declare-const dummy11 us_t1)

(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content us_t1)))))
(define-fun t3b__ref___projection ((a t3b__ref)) us_t1 (t3b__content a))

(declare-const word__first integer)

(declare-const word__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const r5b Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun in_range8 ((rec__tokens__token__kind1 Int)
  (a us_rep1)) Bool (= rec__tokens__token__kind1 (to_rep4
                                                 (rec__tokens__token__kind
                                                 (us_split_discrs1 a)))))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep1) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))

(declare-const tokens__token__kind__first__bit1 Int)

(declare-const tokens__token__kind__last__bit1 Int)

(declare-const tokens__token__kind__position1 Int)

;; tokens__token__kind__first__bit_axiom
  (assert (<= 0 tokens__token__kind__first__bit1))

;; tokens__token__kind__last__bit_axiom
  (assert
  (< tokens__token__kind__first__bit1 tokens__token__kind__last__bit1))

;; tokens__token__kind__position_axiom
  (assert (<= 0 tokens__token__kind__position1))

(declare-const tokens__token__op__first__bit1 Int)

(declare-const tokens__token__op__last__bit1 Int)

(declare-const tokens__token__op__position1 Int)

;; tokens__token__op__first__bit_axiom
  (assert (<= 0 tokens__token__op__first__bit1))

;; tokens__token__op__last__bit_axiom
  (assert (< tokens__token__op__first__bit1 tokens__token__op__last__bit1))

;; tokens__token__op__position_axiom
  (assert (<= 0 tokens__token__op__position1))

(declare-const tokens__token__instr__first__bit1 Int)

(declare-const tokens__token__instr__last__bit1 Int)

(declare-const tokens__token__instr__position1 Int)

;; tokens__token__instr__first__bit_axiom
  (assert (<= 0 tokens__token__instr__first__bit1))

;; tokens__token__instr__last__bit_axiom
  (assert
  (< tokens__token__instr__first__bit1 tokens__token__instr__last__bit1))

;; tokens__token__instr__position_axiom
  (assert (<= 0 tokens__token__instr__position1))

(declare-const tokens__token__val__first__bit1 Int)

(declare-const tokens__token__val__last__bit1 Int)

(declare-const tokens__token__val__position1 Int)

;; tokens__token__val__first__bit_axiom
  (assert (<= 0 tokens__token__val__first__bit1))

;; tokens__token__val__last__bit_axiom
  (assert (< tokens__token__val__first__bit1 tokens__token__val__last__bit1))

;; tokens__token__val__position_axiom
  (assert (<= 0 tokens__token__val__position1))

(declare-fun user_eq12 (us_rep1 us_rep1) Bool)

(declare-const dummy12 us_rep1)

(declare-datatypes () ((t6b__ref (mk_t6b__ref (t6b__content us_rep1)))))
(define-fun t6b__ref___projection ((a t6b__ref)) us_rep1 (t6b__content a))

(declare-const r9b Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun in_range9 ((rec__tokens__token__kind1 Int)
  (a us_rep1)) Bool (= rec__tokens__token__kind1 (to_rep4
                                                 (rec__tokens__token__kind
                                                 (us_split_discrs1 a)))))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep1) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment5 a))))

(declare-const tokens__token__kind__first__bit2 Int)

(declare-const tokens__token__kind__last__bit2 Int)

(declare-const tokens__token__kind__position2 Int)

;; tokens__token__kind__first__bit_axiom
  (assert (<= 0 tokens__token__kind__first__bit2))

;; tokens__token__kind__last__bit_axiom
  (assert
  (< tokens__token__kind__first__bit2 tokens__token__kind__last__bit2))

;; tokens__token__kind__position_axiom
  (assert (<= 0 tokens__token__kind__position2))

(declare-const tokens__token__val__first__bit2 Int)

(declare-const tokens__token__val__last__bit2 Int)

(declare-const tokens__token__val__position2 Int)

;; tokens__token__val__first__bit_axiom
  (assert (<= 0 tokens__token__val__first__bit2))

;; tokens__token__val__last__bit_axiom
  (assert (< tokens__token__val__first__bit2 tokens__token__val__last__bit2))

;; tokens__token__val__position_axiom
  (assert (<= 0 tokens__token__val__position2))

(declare-const tokens__token__instr__first__bit2 Int)

(declare-const tokens__token__instr__last__bit2 Int)

(declare-const tokens__token__instr__position2 Int)

;; tokens__token__instr__first__bit_axiom
  (assert (<= 0 tokens__token__instr__first__bit2))

;; tokens__token__instr__last__bit_axiom
  (assert
  (< tokens__token__instr__first__bit2 tokens__token__instr__last__bit2))

;; tokens__token__instr__position_axiom
  (assert (<= 0 tokens__token__instr__position2))

(declare-const tokens__token__op__first__bit2 Int)

(declare-const tokens__token__op__last__bit2 Int)

(declare-const tokens__token__op__position2 Int)

;; tokens__token__op__first__bit_axiom
  (assert (<= 0 tokens__token__op__first__bit2))

;; tokens__token__op__last__bit_axiom
  (assert (< tokens__token__op__first__bit2 tokens__token__op__last__bit2))

;; tokens__token__op__position_axiom
  (assert (<= 0 tokens__token__op__position2))

(declare-fun user_eq13 (us_rep1 us_rep1) Bool)

(declare-const dummy13 us_rep1)

(declare-datatypes () ((t10b__ref (mk_t10b__ref (t10b__content us_rep1)))))
(define-fun t10b__ref___projection ((a t10b__ref)) us_rep1 (t10b__content a))

(declare-const r13b Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun in_range10 ((rec__tokens__token__kind1 Int)
  (a us_rep1)) Bool (= rec__tokens__token__kind1 (to_rep4
                                                 (rec__tokens__token__kind
                                                 (us_split_discrs1 a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep1) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment6 a))))

(declare-const tokens__token__kind__first__bit3 Int)

(declare-const tokens__token__kind__last__bit3 Int)

(declare-const tokens__token__kind__position3 Int)

;; tokens__token__kind__first__bit_axiom
  (assert (<= 0 tokens__token__kind__first__bit3))

;; tokens__token__kind__last__bit_axiom
  (assert
  (< tokens__token__kind__first__bit3 tokens__token__kind__last__bit3))

;; tokens__token__kind__position_axiom
  (assert (<= 0 tokens__token__kind__position3))

(declare-const tokens__token__op__first__bit3 Int)

(declare-const tokens__token__op__last__bit3 Int)

(declare-const tokens__token__op__position3 Int)

;; tokens__token__op__first__bit_axiom
  (assert (<= 0 tokens__token__op__first__bit3))

;; tokens__token__op__last__bit_axiom
  (assert (< tokens__token__op__first__bit3 tokens__token__op__last__bit3))

;; tokens__token__op__position_axiom
  (assert (<= 0 tokens__token__op__position3))

(declare-const tokens__token__instr__first__bit3 Int)

(declare-const tokens__token__instr__last__bit3 Int)

(declare-const tokens__token__instr__position3 Int)

;; tokens__token__instr__first__bit_axiom
  (assert (<= 0 tokens__token__instr__first__bit3))

;; tokens__token__instr__last__bit_axiom
  (assert
  (< tokens__token__instr__first__bit3 tokens__token__instr__last__bit3))

;; tokens__token__instr__position_axiom
  (assert (<= 0 tokens__token__instr__position3))

(declare-const tokens__token__val__first__bit3 Int)

(declare-const tokens__token__val__last__bit3 Int)

(declare-const tokens__token__val__position3 Int)

;; tokens__token__val__first__bit_axiom
  (assert (<= 0 tokens__token__val__first__bit3))

;; tokens__token__val__last__bit_axiom
  (assert (< tokens__token__val__first__bit3 tokens__token__val__last__bit3))

;; tokens__token__val__position_axiom
  (assert (<= 0 tokens__token__val__position3))

(declare-fun user_eq14 (us_rep1 us_rep1) Bool)

(declare-const dummy14 us_rep1)

(declare-datatypes () ((t14b__ref (mk_t14b__ref (t14b__content us_rep1)))))
(define-fun t14b__ref___projection ((a t14b__ref)) us_rep1 (t14b__content a))

(declare-const r17b Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(define-fun in_range11 ((rec__tokens__token__kind1 Int)
  (a us_rep1)) Bool (= rec__tokens__token__kind1 (to_rep4
                                                 (rec__tokens__token__kind
                                                 (us_split_discrs1 a)))))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep1) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment7 a))))

(declare-const tokens__token__kind__first__bit4 Int)

(declare-const tokens__token__kind__last__bit4 Int)

(declare-const tokens__token__kind__position4 Int)

;; tokens__token__kind__first__bit_axiom
  (assert (<= 0 tokens__token__kind__first__bit4))

;; tokens__token__kind__last__bit_axiom
  (assert
  (< tokens__token__kind__first__bit4 tokens__token__kind__last__bit4))

;; tokens__token__kind__position_axiom
  (assert (<= 0 tokens__token__kind__position4))

(declare-const tokens__token__val__first__bit4 Int)

(declare-const tokens__token__val__last__bit4 Int)

(declare-const tokens__token__val__position4 Int)

;; tokens__token__val__first__bit_axiom
  (assert (<= 0 tokens__token__val__first__bit4))

;; tokens__token__val__last__bit_axiom
  (assert (< tokens__token__val__first__bit4 tokens__token__val__last__bit4))

;; tokens__token__val__position_axiom
  (assert (<= 0 tokens__token__val__position4))

(declare-const tokens__token__instr__first__bit4 Int)

(declare-const tokens__token__instr__last__bit4 Int)

(declare-const tokens__token__instr__position4 Int)

;; tokens__token__instr__first__bit_axiom
  (assert (<= 0 tokens__token__instr__first__bit4))

;; tokens__token__instr__last__bit_axiom
  (assert
  (< tokens__token__instr__first__bit4 tokens__token__instr__last__bit4))

;; tokens__token__instr__position_axiom
  (assert (<= 0 tokens__token__instr__position4))

(declare-const tokens__token__op__first__bit4 Int)

(declare-const tokens__token__op__last__bit4 Int)

(declare-const tokens__token__op__position4 Int)

;; tokens__token__op__first__bit_axiom
  (assert (<= 0 tokens__token__op__first__bit4))

;; tokens__token__op__last__bit_axiom
  (assert (< tokens__token__op__first__bit4 tokens__token__op__last__bit4))

;; tokens__token__op__position_axiom
  (assert (<= 0 tokens__token__op__position4))

(declare-fun user_eq15 (us_rep1 us_rep1) Bool)

(declare-const dummy15 us_rep1)

(declare-datatypes () ((t18b__ref (mk_t18b__ref (t18b__content us_rep1)))))
(define-fun t18b__ref___projection ((a t18b__ref)) us_rep1 (t18b__content a))

(declare-const r21b Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(define-fun in_range12 ((rec__tokens__token__kind1 Int)
  (a us_rep1)) Bool (= rec__tokens__token__kind1 (to_rep4
                                                 (rec__tokens__token__kind
                                                 (us_split_discrs1 a)))))

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep1) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment8 a))))

(declare-const tokens__token__kind__first__bit5 Int)

(declare-const tokens__token__kind__last__bit5 Int)

(declare-const tokens__token__kind__position5 Int)

;; tokens__token__kind__first__bit_axiom
  (assert (<= 0 tokens__token__kind__first__bit5))

;; tokens__token__kind__last__bit_axiom
  (assert
  (< tokens__token__kind__first__bit5 tokens__token__kind__last__bit5))

;; tokens__token__kind__position_axiom
  (assert (<= 0 tokens__token__kind__position5))

(declare-const tokens__token__val__first__bit5 Int)

(declare-const tokens__token__val__last__bit5 Int)

(declare-const tokens__token__val__position5 Int)

;; tokens__token__val__first__bit_axiom
  (assert (<= 0 tokens__token__val__first__bit5))

;; tokens__token__val__last__bit_axiom
  (assert (< tokens__token__val__first__bit5 tokens__token__val__last__bit5))

;; tokens__token__val__position_axiom
  (assert (<= 0 tokens__token__val__position5))

(declare-const tokens__token__op__first__bit5 Int)

(declare-const tokens__token__op__last__bit5 Int)

(declare-const tokens__token__op__position5 Int)

;; tokens__token__op__first__bit_axiom
  (assert (<= 0 tokens__token__op__first__bit5))

;; tokens__token__op__last__bit_axiom
  (assert (< tokens__token__op__first__bit5 tokens__token__op__last__bit5))

;; tokens__token__op__position_axiom
  (assert (<= 0 tokens__token__op__position5))

(declare-const tokens__token__instr__first__bit5 Int)

(declare-const tokens__token__instr__last__bit5 Int)

(declare-const tokens__token__instr__position5 Int)

;; tokens__token__instr__first__bit_axiom
  (assert (<= 0 tokens__token__instr__first__bit5))

;; tokens__token__instr__last__bit_axiom
  (assert
  (< tokens__token__instr__first__bit5 tokens__token__instr__last__bit5))

;; tokens__token__instr__position_axiom
  (assert (<= 0 tokens__token__instr__position5))

(declare-fun user_eq16 (us_rep1 us_rep1) Bool)

(declare-const dummy16 us_rep1)

(declare-datatypes () ((t22b__ref (mk_t22b__ref (t22b__content us_rep1)))))
(define-fun t22b__ref___projection ((a t22b__ref)) us_rep1 (t22b__content a))

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant6 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(declare-const word_size Int)

(declare-const o integer)

(declare-const o1 integer)

(declare-const o2 (Array Int character))

(declare-const temp___229 (Array Int character))

(declare-const temp___2291 t1)

(declare-const tokens__next__read_a_valid_token__word__assume (Array Int character))

(declare-const tokens__next__read_a_valid_token__word__assume1 t)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 character)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 character)

(declare-const o9 Int)

(declare-const o10 Bool)

(declare-const o11 Bool)

(declare-const o12 Int)

(declare-const o13 character)

(declare-const o14 Int)

(declare-const o15 Bool)

(declare-const o16 Bool)

(declare-const o17 Int)

(declare-const o18 character)

(declare-const o19 Int)

(declare-const o20 Int)

(declare-const o21 character)

(declare-const o22 Int)

(declare-const o23 Bool)

(declare-const o24 Bool)

(declare-const o25 Int)

(declare-const o26 character)

(declare-const o27 Int)

(declare-const o28 Bool)

(declare-const o29 Bool)

(declare-const o30 Int)

(declare-const o31 character)

(declare-const o32 Int)

(declare-const o33 Int)

(declare-const o34 token_kind)

(declare-const o35 Int)

(declare-const o36 operation)

(declare-const o37 us_split_fields2)

(declare-const o38 us_split_discrs)

(declare-const temp___238 us_rep1)

(declare-const v__split_discrs us_split_discrs)

(declare-const word_buffer (Array Int character))

(declare-const word_size1 Int)

(declare-const word (Array Int character))

(declare-const word_size2 Int)

(declare-const input__next_word__v (Array Int character))

(declare-const result map__ref)

(declare-const word_buffer1 (Array Int character))

(declare-const result1 map__ref)

(declare-const word1 (Array Int character))

(declare-const result2 Bool)

(declare-const result3 Bool)

(declare-const result4 Bool)

(declare-const result5 Bool)

(declare-const result6 Bool)

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 word_size)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 word_size1)))

;; H
  (assert (= (to_rep1 o1) 1024))

;; H
  (assert (= (to_rep1 o) 1))

;; H
  (assert (and (<= word_size2 1024) (in_range1 word_size2)))

;; H
  (assert (= result (mk_map__ref word_buffer)))

;; H
  (assert
  (= word_buffer1 (slide input__next_word__v (to_rep1 (first (mk 1 1024))) 1)))

;; H
  (assert (= word_size2 r1b))

;; H
  (assert (in_range1 r1b))

;; H
  (assert
  (=> (<= 1 r1b)
  (and (and (<= 1 1) (<= 1 1024)) (and (<= 1 r1b) (<= r1b 1024)))))

;; H
  (assert (= o2 word_buffer1))

;; H
  (assert (= o2 temp___229))

;; H
  (assert (= (mk1 1 r1b) temp___2291))

;; H
  (assert (= temp___229 tokens__next__read_a_valid_token__word__assume))

;; H
  (assert
  (= (mk (to_rep1 (first2 temp___2291)) (to_rep1 (last2 temp___2291)))
  tokens__next__read_a_valid_token__word__assume1))

;; H
  (assert (= result1 (mk_map__ref word)))

;; H
  (assert (= word1 tokens__next__read_a_valid_token__word__assume))

;; H
  (assert
  (= (to_rep1 word__first) (to_rep1
                           (first
                           tokens__next__read_a_valid_token__word__assume1))))

;; H
  (assert
  (= (to_rep1 word__last) (to_rep1
                          (last
                          tokens__next__read_a_valid_token__word__assume1))))

;; H
  (assert (dynamic_property 1 2147483647 (to_rep1 word__first)
  (to_rep1 word__last)))

;; H
  (assert
  (=> (<= (to_rep1 word__first) (to_rep1 word__last))
  (= o3 (+ (- (to_rep1 word__last) (to_rep1 word__first)) 1))))

;; H
  (assert
  (=> (not (<= (to_rep1 word__first) (to_rep1 word__last))) (= o3 0)))

;; H
  (assert (= result2 (ite (<= 1 o3) true false)))

;; H
  (assert (= result2 true))

;; H
  (assert
  (and (<= (to_rep1 word__first) (to_rep1 word__first))
  (<= (to_rep1 word__first) (to_rep1 word__last))))

;; H
  (assert (= o12 (to_rep1 word__first)))

;; H
  (assert (= o13 (select word1 o12)))

;; H
  (assert (= o14 (to_rep o13)))

;; H
  (assert (= o15 (ite (= o14 46) true false)))

;; H
  (assert
  (and (<= (to_rep1 word__first) (to_rep1 word__first))
  (<= (to_rep1 word__first) (to_rep1 word__last))))

;; H
  (assert (= o7 (to_rep1 word__first)))

;; H
  (assert (= o8 (select word1 o7)))

;; H
  (assert (= o9 (to_rep o8)))

;; H
  (assert (= o10 (ite (<= o9 57) true false)))

;; H
  (assert
  (and (<= (to_rep1 word__first) (to_rep1 word__first))
  (<= (to_rep1 word__first) (to_rep1 word__last))))

;; H
  (assert (= o4 (to_rep1 word__first)))

;; H
  (assert (= o5 (select word1 o4)))

;; H
  (assert (= o6 (to_rep o5)))

;; H
  (assert (= o11 (ite (<= 48 o6) true false)))

;; H
  (assert (= o16 (ite (= o11 true) o10 false)))

;; H
  (assert (= result3 (ite (= o16 false) o15 true)))

;; H
  (assert (not (= result3 true)))

;; H
  (assert
  (and (<= (to_rep1 word__first) (to_rep1 word__first))
  (<= (to_rep1 word__first) (to_rep1 word__last))))

;; H
  (assert (= o25 (to_rep1 word__first)))

;; H
  (assert (= o26 (select word1 o25)))

;; H
  (assert (= o27 (to_rep o26)))

;; H
  (assert (= o28 (ite (= o27 47) true false)))

;; H
  (assert
  (and (<= (to_rep1 word__first) (to_rep1 word__first))
  (<= (to_rep1 word__first) (to_rep1 word__last))))

;; H
  (assert (= o20 (to_rep1 word__first)))

;; H
  (assert (= o21 (select word1 o20)))

;; H
  (assert (= o22 (to_rep o21)))

;; H
  (assert (= o23 (ite (= o22 42) true false)))

;; H
  (assert
  (and (<= (to_rep1 word__first) (to_rep1 word__first))
  (<= (to_rep1 word__first) (to_rep1 word__last))))

;; H
  (assert (= o17 (to_rep1 word__first)))

;; H
  (assert (= o18 (select word1 o17)))

;; H
  (assert (= o19 (to_rep o18)))

;; H
  (assert (= o24 (ite (= o19 43) true false)))

;; H
  (assert (= o29 (ite (= o24 false) o23 true)))

;; H
  (assert (= result4 (ite (= o29 false) o28 true)))

;; H
  (assert (not (= result4 true)))

;; H
  (assert
  (and (<= (to_rep1 word__first) (to_rep1 word__first))
  (<= (to_rep1 word__first) (to_rep1 word__last))))

;; H
  (assert (= o30 (to_rep1 word__first)))

;; H
  (assert (= o31 (select word1 o30)))

;; H
  (assert (= o32 (to_rep o31)))

;; H
  (assert (= result5 (ite (= o32 45) true false)))

;; H
  (assert (= result5 true))

;; H
  (assert
  (=> (<= (to_rep1 word__first) (to_rep1 word__last))
  (= o33 (+ (- (to_rep1 word__last) (to_rep1 word__first)) 1))))

;; H
  (assert
  (=> (not (<= (to_rep1 word__first) (to_rep1 word__last))) (= o33 0)))

;; H
  (assert (= result6 (ite (< 1 o33) true false)))

;; H
  (assert (not (= result6 true)))

;; H
  (assert (= (to_rep4 (rec__tokens__token__kind v__split_discrs)) r17b))

;; H
  (assert (in_range6 r17b))

;; H
  (assert
  (and
  (= o35 (read2
         (mk___t word1 (mk (to_rep1 word__first) (to_rep1 word__last)))))
  (in_range5 o35)))

;; H
  (assert (= (to_rep3 o36) o35))

;; H
  (assert (= o37 (mk___split_fields1 dummy5 o36 dummy4)))

;; H
  (assert (= (to_rep4 o34) 1))

;; H
  (assert (= o38 (mk___split_discrs o34)))

;; H
  (assert (= temp___238 (mk___rep1 o38 o37 true)))

;; H
  (assert (= v__attr__constrained true))

(assert
;; WP_parameter_def
 ;; File "tokens.ads", line 14, characters 0-0
  (not
  (= (rec__tokens__token__kind (us_split_discrs1 temp___238)) (rec__tokens__token__kind
                                                              v__split_discrs))))
(check-sat)
(exit)
