(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type my_integer

predicate in_range1(x: int) = ((1 <= x) and (x <= 200))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : my_integer, my_integer -> bool

logic dummy : my_integer

type my_integer__ref = { my_integer__content : my_integer
}

function my_integer__ref___projection(a: my_integer__ref) : my_integer =
  (a).my_integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep : positive -> int

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,positive) farray
}

logic slide : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq :
  (forall a:(int,positive) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> (int,positive) farray

axiom concat_def :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : positive, int -> (int,positive) farray

axiom singleton_def :
  (forall v:positive.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,positive) farray. forall a__first:int. forall a__last:int.
  forall b:(int,positive) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_151:int. ((((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) and
  (to_rep((a[temp___idx_151])) = to_rep((b[((b__first - a__first) + temp___idx_151)])))) or
  (not ((a__first <= temp___idx_151) and (temp___idx_151 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep((a[temp___idx_151])) = to_rep((b[((b__first - a__first) + temp___idx_151)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep((a[temp___idx_151])) = to_rep((b[((b__first - a__first) + temp___idx_151)])))))))))

logic compare : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy2 : (int,positive) farray

logic value__size : int

logic object__size : (int,positive) farray -> int

logic value__component__size : int

logic object__component__size : (int,positive) farray -> int

logic value__alignment : int

logic object__alignment : (int,positive) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,positive) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,positive) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,positive) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,positive) farray, (int,positive) farray -> bool

type us_split_fields = { rec__container__container__a : (int,positive) farray
}

function us_split_fields_A__projection(a: us_split_fields) : (int,positive) farray =
  (a).rec__container__container__a

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep_3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((bool_eq4(((a).us_split_fields1).rec__container__container__a, 1, 200,
  ((b).us_split_fields1).rec__container__container__a, 1, 200) = true) ->
  (bool_eq5(a, b) = true)) and
  ((not (bool_eq4(((a).us_split_fields1).rec__container__container__a, 1,
  200, ((b).us_split_fields1).rec__container__container__a, 1,
  200) = true)) -> (bool_eq5(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,positive) farray. (0 <= object__size1({ us_split_fields1 = {
  rec__container__container__a = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,positive) farray. (0 <= object__alignment1({
  us_split_fields1 = { rec__container__container__a = a } })))

logic container__container__a__first__bit : int

logic container__container__a__last__bit : int

logic container__container__a__position : int

axiom container__container__a__first__bit_axiom :
  (0 <= container__container__a__first__bit)

axiom container__container__a__last__bit_axiom :
  (container__container__a__first__bit <  container__container__a__last__bit)

axiom container__container__a__position_axiom :
  (0 <= container__container__a__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : (int,positive) farray

type container__ref = { container__content : us_rep
}

function container__ref___projection(a: container__ref) : us_rep =
  (a).container__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy4 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__container__cursor__index : natural
}

function us_split_fields_Index__projection(a: us_split_fields2) : natural =
  (a).rec__container__cursor__index

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  (((to_rep1(((a).us_split_fields3).rec__container__cursor__index) = to_rep1(((b).us_split_fields3).rec__container__cursor__index)) ->
  (bool_eq7(a, b) = true)) and
  ((not (to_rep1(((a).us_split_fields3).rec__container__cursor__index) = to_rep1(((b).us_split_fields3).rec__container__cursor__index))) ->
  (bool_eq7(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. (0 <= object__size2({ us_split_fields3 = {
  rec__container__cursor__index = a } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. (0 <= object__alignment2({ us_split_fields3 = {
  rec__container__cursor__index = a } })))

logic container__cursor__index__first__bit : int

logic container__cursor__index__last__bit : int

logic container__cursor__index__position : int

axiom container__cursor__index__first__bit_axiom :
  (0 <= container__cursor__index__first__bit)

axiom container__cursor__index__last__bit_axiom :
  (container__cursor__index__first__bit <  container__cursor__index__last__bit)

axiom container__cursor__index__position_axiom :
  (0 <= container__cursor__index__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : natural

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

logic first : us_rep -> us_rep1

logic first__function_guard : us_rep1, us_rep -> prop

axiom first__post_axiom : true

axiom first__def_axiom :
  (forall c:(int,positive) farray [first({ us_split_fields1 = {
  rec__container__container__a = c } })]. (first({ us_split_fields1 = {
  rec__container__container__a = c } }) = { us_split_fields3 = {
  rec__container__cursor__index = of_rep1(1) } }))

logic has_element : us_rep, us_rep1 -> bool

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

axiom has_element__post_axiom : true

axiom has_element__def_axiom :
  (forall c:(int,positive) farray.
  (forall p:natural [has_element({ us_split_fields1 = {
  rec__container__container__a = c } }, { us_split_fields3 = {
  rec__container__cursor__index = p } })]. ((has_element({ us_split_fields1 =
  { rec__container__container__a = c } }, { us_split_fields3 = {
  rec__container__cursor__index = p } }) = true) <-> ((1 <= to_rep1(p)) and
  (to_rep1(p) <= 200)))))

logic next : us_rep, us_rep1 -> us_rep1

logic next__function_guard : us_rep1, us_rep, us_rep1 -> prop

axiom next__post_axiom : true

axiom next__def_axiom :
  (forall c:(int,positive) farray.
  (forall p:natural [next({ us_split_fields1 = {
  rec__container__container__a = c } }, { us_split_fields3 = {
  rec__container__cursor__index = p } })]. (((to_rep1(p) <  200) -> (next({
  us_split_fields1 = { rec__container__container__a = c } }, {
  us_split_fields3 = { rec__container__cursor__index = p } }) = {
  us_split_fields3 = { rec__container__cursor__index =
  of_rep1((to_rep1(p) + 1)) } })) and ((not (to_rep1(p) <  200)) -> (next({
  us_split_fields1 = { rec__container__container__a = c } }, {
  us_split_fields3 = { rec__container__cursor__index = p } }) = {
  us_split_fields3 = { rec__container__cursor__index = of_rep1(0) } })))))

logic element : us_rep, us_rep1 -> int

logic element__function_guard : int, us_rep, us_rep1 -> prop

type integer

predicate in_range4(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

axiom element__post_axiom :
  (forall c:(int,positive) farray.
  (forall p:natural [element({ us_split_fields1 = {
  rec__container__container__a = c } }, { us_split_fields3 = {
  rec__container__cursor__index = p } })]. ((has_element({ us_split_fields1 =
  { rec__container__container__a = c } }, { us_split_fields3 = {
  rec__container__cursor__index = p } }) = true) -> in_range4(element({
  us_split_fields1 = { rec__container__container__a = c } }, {
  us_split_fields3 = { rec__container__cursor__index = p } })))))

axiom element__def_axiom :
  (forall c:(int,positive) farray.
  (forall p:natural [element({ us_split_fields1 = {
  rec__container__container__a = c } }, { us_split_fields3 = {
  rec__container__cursor__index = p } })]. (element({ us_split_fields1 = {
  rec__container__container__a = c } }, { us_split_fields3 = {
  rec__container__cursor__index = p } }) = to_rep((c[to_rep1(p)])))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c12b : (int,positive) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___607 : int -> (int,positive) farray

axiom def_axiom :
  (forall temp___609:int.
  (forall temp___610:int.
  ((temp___607(temp___609)[temp___610]) = of_rep(temp___609))))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall int__:int. forall cont__split_fields:(int,positive) farray.
  forall e:int. forall o:natural. forall temp___617:natural. forall o1:int.
  forall temp___611:int. forall temp___612:int. forall o2:int.
  forall o3:natural. forall o4:bool. forall e1:int. forall result:int.
  forall int__1:int. forall result1:(int,positive) farray.
  forall cont__split_fields1:(int,positive) farray. forall result2:bool.
  forall result3:int. forall e2:int. forall result4:bool. forall b:bool.
  forall int__2:int. forall e3:int. forall temp___6171:natural.
  forall result5:int. forall int__3:int. forall int__4:int.
  forall temp___6121:int. forall result6:int. forall temp___6122:int.
  forall int__5:int. forall int__6:int. forall rho:int. forall int__7:int.
  forall int__8:int. forall rho1:int. forall result7:bool. forall b1:bool.
  forall result8:bool. (((result = int__) and (int__1 = 2)) ->
  (in_range1(int__1) -> (((result1 = cont__split_fields) and
  (temp___607(4) = cont__split_fields1)) -> ((cont__split_fields1 = c12b) ->
  (((({ us_split_fields3 = { rec__container__cursor__index = o } } = first({
  us_split_fields1 = { rec__container__container__a = c12b } })) and
  (of_rep1(1) = o)) and (temp___617 = o)) -> ((((result2 = has_element({
  us_split_fields1 = { rec__container__container__a = c12b } }, {
  us_split_fields3 = { rec__container__cursor__index = temp___617 } })) and
  ((result2 = true) <-> ((1 <= to_rep1(temp___617)) and
  (to_rep1(temp___617) <= 200)))) and (((result2 = true) and
  (((o1 = element({ us_split_fields1 = { rec__container__container__a = c12b
  } }, { us_split_fields3 = { rec__container__cursor__index = temp___617 }
  })) and (in_range4(o1) and (o1 = to_rep((c12b[to_rep1(temp___617)]))))) and
  ((result3 = e) and (e2 = o1)))) or ((not (result2 = true)) and
  ((e2 = e) and (e2 = e1))))) -> (((result4 = has_element({
  us_split_fields1 = { rec__container__container__a = c12b } }, {
  us_split_fields3 = { rec__container__cursor__index = temp___617 } })) and
  ((result4 = true) <-> ((1 <= to_rep1(temp___617)) and
  (to_rep1(temp___617) <= 200)))) -> ((result4 = true) -> ((((1 <= 200) ->
  in_range1(int__2)) and ((has_element({ us_split_fields1 = {
  rec__container__container__a = c12b } }, { us_split_fields3 = {
  rec__container__cursor__index = temp___6171 } }) = true) and
  (e3 = element({ us_split_fields1 = { rec__container__container__a = c12b }
  }, { us_split_fields3 = { rec__container__cursor__index = temp___6171 }
  })))) -> (((((temp___611 = int__2) and ((0 = temp___612) and
  ((((o2 = (int__2 + 1)) and in_range1((int__2 + 1))) and
  ((result5 = int__2) and (int__3 = o2))) and (((1 <= 200) ->
  in_range1(int__4)) and (((result6 = temp___6121) and
  (temp___6122 = int__4)) and (int__4 = 5)))))) and ((int__4 = int__5) and
  ((rho = temp___6122) and (int__6 = int__4)))) and ((int__7 = int__5) and
  ((rho1 = rho) and (int__8 = int__6)))) -> (((result7 = b) and
  (b1 = of_int(0))) -> (((((({ us_split_fields3 = {
  rec__container__cursor__index = o3 } } = next({ us_split_fields1 = {
  rec__container__container__a = c12b } }, { us_split_fields3 = {
  rec__container__cursor__index = temp___6171 } })) and
  (((to_rep1(temp___6171) <  200) and ({ us_split_fields3 = {
  rec__container__cursor__index = o3 } } = { us_split_fields3 = {
  rec__container__cursor__index = of_rep1((to_rep1(temp___6171) + 1)) }
  })) or ((not (to_rep1(temp___6171) <  200)) and ({ us_split_fields3 = {
  rec__container__cursor__index = o3 } } = { us_split_fields3 = {
  rec__container__cursor__index = of_rep1(0) } })))) and ((o4 = has_element({
  us_split_fields1 = { rec__container__container__a = c12b } }, {
  us_split_fields3 = { rec__container__cursor__index = o3 } })) and
  ((o4 = true) <-> ((1 <= to_rep1(o3)) and (to_rep1(o3) <= 200))))) and
  (((not (o4 = true)) and (result8 = true)) or ((o4 = true) and
  (result8 = false)))) and (not (result8 = true))) -> (has_element({
  us_split_fields1 = { rec__container__container__a = c12b } }, {
  us_split_fields3 = { rec__container__cursor__index = temp___6171 }
  }) = true))))))))))))))
