(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__record_equality__root__c : natural
}

function us_split_discrs___projection(a: us_split_discrs) : natural =
  (a).rec__record_equality__root__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__record_equality__root__f1 : natural; rec__ext__
: us_private
}

function us_split_fields_F1__projection(a: us_split_fields) : natural =
  (a).rec__record_equality__root__f1

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_3__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__record_equality__root__c) = to_rep(((b).us_split_discrs1).rec__record_equality__root__c)) and
  (to_rep(((a).us_split_fields1).rec__record_equality__root__f1) = to_rep(((b).us_split_fields1).rec__record_equality__root__f1))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__record_equality__root__c) = to_rep(((b).us_split_discrs1).rec__record_equality__root__c)) and
  (to_rep(((a).us_split_fields1).rec__record_equality__root__f1) = to_rep(((b).us_split_fields1).rec__record_equality__root__f1)))) ->
  (bool_eq3(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:natural. forall a2:us_private. forall a3:int.
  (0 <= object__size({ us_split_discrs1 = { rec__record_equality__root__c = a
  }; us_split_fields1 = { rec__record_equality__root__f1 = a1; rec__ext__ =
  a2 }; attr__tag = a3 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:natural. forall a2:us_private. forall a3:int.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__record_equality__root__c = a }; us_split_fields1 = {
  rec__record_equality__root__f1 = a1; rec__ext__ = a2 }; attr__tag = a3 })))

logic record_equality__root__c__first__bit : int

logic record_equality__root__c__last__bit : int

logic record_equality__root__c__position : int

axiom record_equality__root__c__first__bit_axiom :
  (0 <= record_equality__root__c__first__bit)

axiom record_equality__root__c__last__bit_axiom :
  (record_equality__root__c__first__bit <  record_equality__root__c__last__bit)

axiom record_equality__root__c__position_axiom :
  (0 <= record_equality__root__c__position)

logic record_equality__root__f1__first__bit : int

logic record_equality__root__f1__last__bit : int

logic record_equality__root__f1__position : int

axiom record_equality__root__f1__first__bit_axiom :
  (0 <= record_equality__root__f1__first__bit)

axiom record_equality__root__f1__last__bit_axiom :
  (record_equality__root__f1__first__bit <  record_equality__root__f1__last__bit)

axiom record_equality__root__f1__position_axiom :
  (0 <= record_equality__root__f1__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : natural

logic dummy2 : natural

logic dummy3 : us_private

logic dummy4 : int

type root__ref = { root__content : us_rep
}

function root__ref___projection(a: root__ref) : us_rep = (a).root__content

type us_split_fields2 = { rec__record_equality__child__f2 : natural;
rec__record_equality__root__f11 : natural; rec__ext__1 : us_private
}

function us_split_fields_F2__projection(a: us_split_fields2) : natural =
  (a).rec__record_equality__child__f2

function us_split_fields_F12__projection(a: us_split_fields2) : natural =
  (a).rec__record_equality__root__f11

function us_split_fields_2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__tag1 : int
}

function us_rep_4__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep_5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_6__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : natural, us_private -> us_private

logic extract__f2 : us_private -> natural

axiom extract__f2__conv :
  (forall f2:natural.
  (forall rec__ext__2:us_private. (extract__f2(hide_ext__(f2,
  rec__ext__2)) = f2)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__record_equality__root__f1 =
  ((a).us_split_fields3).rec__record_equality__root__f11; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__record_equality__child__f2,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__record_equality__child__f2 =
  extract__f2(((r).us_split_fields1).rec__ext__);
  rec__record_equality__root__f11 =
  ((r).us_split_fields1).rec__record_equality__root__f1; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  (((((to_rep(((a).us_split_discrs2).rec__record_equality__root__c) = to_rep(((b).us_split_discrs2).rec__record_equality__root__c)) and
  (to_rep(((a).us_split_fields3).rec__record_equality__child__f2) = to_rep(((b).us_split_fields3).rec__record_equality__child__f2))) and
  (to_rep(((a).us_split_fields3).rec__record_equality__root__f11) = to_rep(((b).us_split_fields3).rec__record_equality__root__f11))) ->
  (bool_eq4(a, b) = true)) and
  ((not (((to_rep(((a).us_split_discrs2).rec__record_equality__root__c) = to_rep(((b).us_split_discrs2).rec__record_equality__root__c)) and
  (to_rep(((a).us_split_fields3).rec__record_equality__child__f2) = to_rep(((b).us_split_fields3).rec__record_equality__child__f2))) and
  (to_rep(((a).us_split_fields3).rec__record_equality__root__f11) = to_rep(((b).us_split_fields3).rec__record_equality__root__f11)))) ->
  (bool_eq4(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:natural. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__size1({
  us_split_discrs2 = { rec__record_equality__root__c = a };
  us_split_fields3 = { rec__record_equality__child__f2 = a1;
  rec__record_equality__root__f11 = a2; rec__ext__1 = a3 }; attr__tag1 = a4
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:natural. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__alignment1({
  us_split_discrs2 = { rec__record_equality__root__c = a };
  us_split_fields3 = { rec__record_equality__child__f2 = a1;
  rec__record_equality__root__f11 = a2; rec__ext__1 = a3 }; attr__tag1 = a4
  })))

logic record_equality__root__c__first__bit1 : int

logic record_equality__root__c__last__bit1 : int

logic record_equality__root__c__position1 : int

axiom record_equality__root__c__first__bit_axiom1 :
  (0 <= record_equality__root__c__first__bit1)

axiom record_equality__root__c__last__bit_axiom1 :
  (record_equality__root__c__first__bit1 <  record_equality__root__c__last__bit1)

axiom record_equality__root__c__position_axiom1 :
  (0 <= record_equality__root__c__position1)

logic record_equality__child__f2__first__bit : int

logic record_equality__child__f2__last__bit : int

logic record_equality__child__f2__position : int

axiom record_equality__child__f2__first__bit_axiom :
  (0 <= record_equality__child__f2__first__bit)

axiom record_equality__child__f2__last__bit_axiom :
  (record_equality__child__f2__first__bit <  record_equality__child__f2__last__bit)

axiom record_equality__child__f2__position_axiom :
  (0 <= record_equality__child__f2__position)

logic record_equality__root__f1__first__bit1 : int

logic record_equality__root__f1__last__bit1 : int

logic record_equality__root__f1__position1 : int

axiom record_equality__root__f1__first__bit_axiom1 :
  (0 <= record_equality__root__f1__first__bit1)

axiom record_equality__root__f1__last__bit_axiom1 :
  (record_equality__root__f1__first__bit1 <  record_equality__root__f1__last__bit1)

axiom record_equality__root__f1__position_axiom1 :
  (0 <= record_equality__root__f1__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy5 : natural

logic dummy6 : natural

logic dummy7 : natural

logic dummy8 : us_private

logic dummy9 : int

type child__ref = { child__content : us_rep1
}

function child__ref___projection(a: child__ref) : us_rep1 =
  (a).child__content

type us_split_fields4 = { rec__record_equality__grandchild__f3 : natural;
rec__record_equality__root__f12 : natural; rec__record_equality__child__f21 :
natural; rec__ext__2 : us_private
}

function us_split_fields_F3__projection(a: us_split_fields4) : natural =
  (a).rec__record_equality__grandchild__f3

function us_split_fields_F13__projection(a: us_split_fields4) : natural =
  (a).rec__record_equality__root__f12

function us_split_fields_F22__projection(a: us_split_fields4) : natural =
  (a).rec__record_equality__child__f21

function us_split_fields_3__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs3 : us_split_discrs; us_split_fields5 :
us_split_fields4; attr__tag2 : int
}

function us_rep_7__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs3

function us_rep_8__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep_9__projection(a: us_rep2) : int = (a).attr__tag2

logic hide_ext__1 : natural, natural, us_private -> us_private

logic extract__f3 : us_private -> natural

axiom extract__f3__conv :
  (forall f3:natural. forall f2:natural.
  (forall rec__ext__3:us_private. (extract__f3(hide_ext__1(f3, f2,
  rec__ext__3)) = f3)))

axiom extract__f2__conv1 :
  (forall f3:natural. forall f2:natural.
  (forall rec__ext__3:us_private. (extract__f2(hide_ext__1(f3, f2,
  rec__ext__3)) = f2)))

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs3; us_split_fields1 = { rec__record_equality__root__f1 =
  ((a).us_split_fields5).rec__record_equality__root__f12; rec__ext__ =
  hide_ext__1(((a).us_split_fields5).rec__record_equality__grandchild__f3,
  ((a).us_split_fields5).rec__record_equality__child__f21,
  ((a).us_split_fields5).rec__ext__2) }; attr__tag = (a).attr__tag2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_discrs3 =
  (r).us_split_discrs1; us_split_fields5 = {
  rec__record_equality__grandchild__f3 =
  extract__f3(((r).us_split_fields1).rec__ext__);
  rec__record_equality__root__f12 =
  ((r).us_split_fields1).rec__record_equality__root__f1;
  rec__record_equality__child__f21 =
  extract__f2(((r).us_split_fields1).rec__ext__); rec__ext__2 =
  extract__ext__1(((r).us_split_fields1).rec__ext__) }; attr__tag2 =
  (r).attr__tag }

logic bool_eq5 : us_rep2, us_rep2 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq5(a, b)].
  ((((((to_rep(((a).us_split_discrs3).rec__record_equality__root__c) = to_rep(((b).us_split_discrs3).rec__record_equality__root__c)) and
  (to_rep(((a).us_split_fields5).rec__record_equality__grandchild__f3) = to_rep(((b).us_split_fields5).rec__record_equality__grandchild__f3))) and
  (to_rep(((a).us_split_fields5).rec__record_equality__root__f12) = to_rep(((b).us_split_fields5).rec__record_equality__root__f12))) and
  (to_rep(((a).us_split_fields5).rec__record_equality__child__f21) = to_rep(((b).us_split_fields5).rec__record_equality__child__f21))) ->
  (bool_eq5(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_discrs3).rec__record_equality__root__c) = to_rep(((b).us_split_discrs3).rec__record_equality__root__c)) and
  (to_rep(((a).us_split_fields5).rec__record_equality__grandchild__f3) = to_rep(((b).us_split_fields5).rec__record_equality__grandchild__f3))) and
  (to_rep(((a).us_split_fields5).rec__record_equality__root__f12) = to_rep(((b).us_split_fields5).rec__record_equality__root__f12))) and
  (to_rep(((a).us_split_fields5).rec__record_equality__child__f21) = to_rep(((b).us_split_fields5).rec__record_equality__child__f21)))) ->
  (bool_eq5(a, b) = false))))

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:natural. forall a2:natural. forall a3:natural.
  forall a4:us_private. forall a5:int. (0 <= object__size2({
  us_split_discrs3 = { rec__record_equality__root__c = a };
  us_split_fields5 = { rec__record_equality__grandchild__f3 = a1;
  rec__record_equality__root__f12 = a2; rec__record_equality__child__f21 =
  a3; rec__ext__2 = a4 }; attr__tag2 = a5 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:natural. forall a2:natural. forall a3:natural.
  forall a4:us_private. forall a5:int. (0 <= object__alignment2({
  us_split_discrs3 = { rec__record_equality__root__c = a };
  us_split_fields5 = { rec__record_equality__grandchild__f3 = a1;
  rec__record_equality__root__f12 = a2; rec__record_equality__child__f21 =
  a3; rec__ext__2 = a4 }; attr__tag2 = a5 })))

logic record_equality__root__c__first__bit2 : int

logic record_equality__root__c__last__bit2 : int

logic record_equality__root__c__position2 : int

axiom record_equality__root__c__first__bit_axiom2 :
  (0 <= record_equality__root__c__first__bit2)

axiom record_equality__root__c__last__bit_axiom2 :
  (record_equality__root__c__first__bit2 <  record_equality__root__c__last__bit2)

axiom record_equality__root__c__position_axiom2 :
  (0 <= record_equality__root__c__position2)

logic record_equality__grandchild__f3__first__bit : int

logic record_equality__grandchild__f3__last__bit : int

logic record_equality__grandchild__f3__position : int

axiom record_equality__grandchild__f3__first__bit_axiom :
  (0 <= record_equality__grandchild__f3__first__bit)

axiom record_equality__grandchild__f3__last__bit_axiom :
  (record_equality__grandchild__f3__first__bit <  record_equality__grandchild__f3__last__bit)

axiom record_equality__grandchild__f3__position_axiom :
  (0 <= record_equality__grandchild__f3__position)

logic record_equality__root__f1__first__bit2 : int

logic record_equality__root__f1__last__bit2 : int

logic record_equality__root__f1__position2 : int

axiom record_equality__root__f1__first__bit_axiom2 :
  (0 <= record_equality__root__f1__first__bit2)

axiom record_equality__root__f1__last__bit_axiom2 :
  (record_equality__root__f1__first__bit2 <  record_equality__root__f1__last__bit2)

axiom record_equality__root__f1__position_axiom2 :
  (0 <= record_equality__root__f1__position2)

logic record_equality__child__f2__first__bit1 : int

logic record_equality__child__f2__last__bit1 : int

logic record_equality__child__f2__position1 : int

axiom record_equality__child__f2__first__bit_axiom1 :
  (0 <= record_equality__child__f2__first__bit1)

axiom record_equality__child__f2__last__bit_axiom1 :
  (record_equality__child__f2__first__bit1 <  record_equality__child__f2__last__bit1)

axiom record_equality__child__f2__position_axiom1 :
  (0 <= record_equality__child__f2__position1)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy10 : natural

logic dummy11 : natural

logic dummy12 : natural

logic dummy13 : natural

logic dummy14 : us_private

logic dummy15 : int

type grandchild__ref = { grandchild__content : us_rep2
}

function grandchild__ref___projection(a: grandchild__ref) : us_rep2 =
  (a).grandchild__content

logic us_tag3 : int

predicate in_range2(rec__record_equality__root__c1: int, a: us_rep) =
  (rec__record_equality__root__c1 = to_rep(((a).us_split_discrs1).rec__record_equality__root__c))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural. forall a1:natural. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__size3({
  us_split_discrs2 = { rec__record_equality__root__c = a };
  us_split_fields3 = { rec__record_equality__child__f2 = a1;
  rec__record_equality__root__f11 = a2; rec__ext__1 = a3 }; attr__tag1 = a4
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural. forall a1:natural. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__alignment3({
  us_split_discrs2 = { rec__record_equality__root__c = a };
  us_split_fields3 = { rec__record_equality__child__f2 = a1;
  rec__record_equality__root__f11 = a2; rec__ext__1 = a3 }; attr__tag1 = a4
  })))

logic record_equality__root__c__first__bit3 : int

logic record_equality__root__c__last__bit3 : int

logic record_equality__root__c__position3 : int

axiom record_equality__root__c__first__bit_axiom3 :
  (0 <= record_equality__root__c__first__bit3)

axiom record_equality__root__c__last__bit_axiom3 :
  (record_equality__root__c__first__bit3 <  record_equality__root__c__last__bit3)

axiom record_equality__root__c__position_axiom3 :
  (0 <= record_equality__root__c__position3)

logic record_equality__root__f1__first__bit3 : int

logic record_equality__root__f1__last__bit3 : int

logic record_equality__root__f1__position3 : int

axiom record_equality__root__f1__first__bit_axiom3 :
  (0 <= record_equality__root__f1__first__bit3)

axiom record_equality__root__f1__last__bit_axiom3 :
  (record_equality__root__f1__first__bit3 <  record_equality__root__f1__last__bit3)

axiom record_equality__root__f1__position_axiom3 :
  (0 <= record_equality__root__f1__position3)

logic record_equality__child__f2__first__bit2 : int

logic record_equality__child__f2__last__bit2 : int

logic record_equality__child__f2__position2 : int

axiom record_equality__child__f2__first__bit_axiom2 :
  (0 <= record_equality__child__f2__first__bit2)

axiom record_equality__child__f2__last__bit_axiom2 :
  (record_equality__child__f2__first__bit2 <  record_equality__child__f2__last__bit2)

axiom record_equality__child__f2__position_axiom2 :
  (0 <= record_equality__child__f2__position2)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy16 : natural

logic dummy17 : natural

logic dummy18 : natural

logic dummy19 : us_private

logic dummy20 : int

type tc_pu1S__ref = { tc_pu1S__content : us_rep1
}

function tc_pu1S__ref_5__projection(a: tc_pu1S__ref) : us_rep1 =
  (a).tc_pu1S__content

logic c_pu1__split_discrs : natural

logic c_pu1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic r14b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic us_tag4 : int

predicate in_range3(rec__record_equality__root__c1: int, a: us_rep) =
  (rec__record_equality__root__c1 = to_rep(((a).us_split_discrs1).rec__record_equality__root__c))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:natural. forall a1:natural. forall a2:natural. forall a3:natural.
  forall a4:us_private. forall a5:int. (0 <= object__size4({
  us_split_discrs3 = { rec__record_equality__root__c = a };
  us_split_fields5 = { rec__record_equality__grandchild__f3 = a1;
  rec__record_equality__root__f12 = a2; rec__record_equality__child__f21 =
  a3; rec__ext__2 = a4 }; attr__tag2 = a5 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:natural. forall a1:natural. forall a2:natural. forall a3:natural.
  forall a4:us_private. forall a5:int. (0 <= object__alignment4({
  us_split_discrs3 = { rec__record_equality__root__c = a };
  us_split_fields5 = { rec__record_equality__grandchild__f3 = a1;
  rec__record_equality__root__f12 = a2; rec__record_equality__child__f21 =
  a3; rec__ext__2 = a4 }; attr__tag2 = a5 })))

logic record_equality__root__c__first__bit4 : int

logic record_equality__root__c__last__bit4 : int

logic record_equality__root__c__position4 : int

axiom record_equality__root__c__first__bit_axiom4 :
  (0 <= record_equality__root__c__first__bit4)

axiom record_equality__root__c__last__bit_axiom4 :
  (record_equality__root__c__first__bit4 <  record_equality__root__c__last__bit4)

axiom record_equality__root__c__position_axiom4 :
  (0 <= record_equality__root__c__position4)

logic record_equality__root__f1__first__bit4 : int

logic record_equality__root__f1__last__bit4 : int

logic record_equality__root__f1__position4 : int

axiom record_equality__root__f1__first__bit_axiom4 :
  (0 <= record_equality__root__f1__first__bit4)

axiom record_equality__root__f1__last__bit_axiom4 :
  (record_equality__root__f1__first__bit4 <  record_equality__root__f1__last__bit4)

axiom record_equality__root__f1__position_axiom4 :
  (0 <= record_equality__root__f1__position4)

logic record_equality__child__f2__first__bit3 : int

logic record_equality__child__f2__last__bit3 : int

logic record_equality__child__f2__position3 : int

axiom record_equality__child__f2__first__bit_axiom3 :
  (0 <= record_equality__child__f2__first__bit3)

axiom record_equality__child__f2__last__bit_axiom3 :
  (record_equality__child__f2__first__bit3 <  record_equality__child__f2__last__bit3)

axiom record_equality__child__f2__position_axiom3 :
  (0 <= record_equality__child__f2__position3)

logic record_equality__grandchild__f3__first__bit1 : int

logic record_equality__grandchild__f3__last__bit1 : int

logic record_equality__grandchild__f3__position1 : int

axiom record_equality__grandchild__f3__first__bit_axiom1 :
  (0 <= record_equality__grandchild__f3__first__bit1)

axiom record_equality__grandchild__f3__last__bit_axiom1 :
  (record_equality__grandchild__f3__first__bit1 <  record_equality__grandchild__f3__last__bit1)

axiom record_equality__grandchild__f3__position_axiom1 :
  (0 <= record_equality__grandchild__f3__position1)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy21 : natural

logic dummy22 : natural

logic dummy23 : natural

logic dummy24 : natural

logic dummy25 : us_private

logic dummy26 : int

type t13b__ref = { t13b__content : us_rep2
}

function t13b__ref___projection(a: t13b__ref) : us_rep2 = (a).t13b__content

logic g_pu1__split_discrs : natural

logic g_pu1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r16b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic us_tag5 : int

predicate in_range4(rec__record_equality__root__c1: int, a: us_rep) =
  (rec__record_equality__root__c1 = to_rep(((a).us_split_discrs1).rec__record_equality__root__c))

logic value__size5 : int

logic object__size5 : us_rep2 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep2 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:natural. forall a1:natural. forall a2:natural. forall a3:natural.
  forall a4:us_private. forall a5:int. (0 <= object__size5({
  us_split_discrs3 = { rec__record_equality__root__c = a };
  us_split_fields5 = { rec__record_equality__grandchild__f3 = a1;
  rec__record_equality__root__f12 = a2; rec__record_equality__child__f21 =
  a3; rec__ext__2 = a4 }; attr__tag2 = a5 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:natural. forall a1:natural. forall a2:natural. forall a3:natural.
  forall a4:us_private. forall a5:int. (0 <= object__alignment5({
  us_split_discrs3 = { rec__record_equality__root__c = a };
  us_split_fields5 = { rec__record_equality__grandchild__f3 = a1;
  rec__record_equality__root__f12 = a2; rec__record_equality__child__f21 =
  a3; rec__ext__2 = a4 }; attr__tag2 = a5 })))

logic record_equality__root__c__first__bit5 : int

logic record_equality__root__c__last__bit5 : int

logic record_equality__root__c__position5 : int

axiom record_equality__root__c__first__bit_axiom5 :
  (0 <= record_equality__root__c__first__bit5)

axiom record_equality__root__c__last__bit_axiom5 :
  (record_equality__root__c__first__bit5 <  record_equality__root__c__last__bit5)

axiom record_equality__root__c__position_axiom5 :
  (0 <= record_equality__root__c__position5)

logic record_equality__root__f1__first__bit5 : int

logic record_equality__root__f1__last__bit5 : int

logic record_equality__root__f1__position5 : int

axiom record_equality__root__f1__first__bit_axiom5 :
  (0 <= record_equality__root__f1__first__bit5)

axiom record_equality__root__f1__last__bit_axiom5 :
  (record_equality__root__f1__first__bit5 <  record_equality__root__f1__last__bit5)

axiom record_equality__root__f1__position_axiom5 :
  (0 <= record_equality__root__f1__position5)

logic record_equality__child__f2__first__bit4 : int

logic record_equality__child__f2__last__bit4 : int

logic record_equality__child__f2__position4 : int

axiom record_equality__child__f2__first__bit_axiom4 :
  (0 <= record_equality__child__f2__first__bit4)

axiom record_equality__child__f2__last__bit_axiom4 :
  (record_equality__child__f2__first__bit4 <  record_equality__child__f2__last__bit4)

axiom record_equality__child__f2__position_axiom4 :
  (0 <= record_equality__child__f2__position4)

logic record_equality__grandchild__f3__first__bit2 : int

logic record_equality__grandchild__f3__last__bit2 : int

logic record_equality__grandchild__f3__position2 : int

axiom record_equality__grandchild__f3__first__bit_axiom2 :
  (0 <= record_equality__grandchild__f3__first__bit2)

axiom record_equality__grandchild__f3__last__bit_axiom2 :
  (record_equality__grandchild__f3__first__bit2 <  record_equality__grandchild__f3__last__bit2)

axiom record_equality__grandchild__f3__position_axiom2 :
  (0 <= record_equality__grandchild__f3__position2)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy27 : natural

logic dummy28 : natural

logic dummy29 : natural

logic dummy30 : natural

logic dummy31 : us_private

logic dummy32 : int

type t15b__ref = { t15b__content : us_rep2
}

function t15b__ref___projection(a: t15b__ref) : us_rep2 = (a).t15b__content

logic g_pu2__split_discrs : natural

logic g_pu2__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r_g1__split_discrs : natural

logic r_g1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic r_g2__split_discrs : natural

logic r_g2__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS6 : int

 (* File "record_equality.adb", line 33, characters 0-0 *)
goal WP_parameter_def :
  (forall c_pu1__split_fields:natural. forall c_pu1__split_fields1:natural.
  forall g_pu1__split_fields:natural. forall g_pu1__split_fields1:natural.
  forall g_pu1__split_fields2:natural.
  forall g_pu1__split_fields3:us_private. forall g_pu2__split_fields:natural.
  forall g_pu2__split_fields1:natural. forall g_pu2__split_fields2:natural.
  forall g_pu2__split_fields3:us_private. forall r_g1__split_fields:natural.
  forall r_g1__split_fields1:us_private. forall r_g2__split_fields:natural.
  forall r_g2__split_fields1:us_private. forall us:int. forall o:natural.
  forall o1:natural. forall o2:natural. forall o3:natural.
  forall o4:us_private.
  forall record_equality__test_eq_ko_d3__g_pu1__assume:natural.
  forall record_equality__test_eq_ko_d3__g_pu1__assume1:natural.
  forall record_equality__test_eq_ko_d3__g_pu1__assume2:natural.
  forall record_equality__test_eq_ko_d3__g_pu1__assume3:natural.
  forall record_equality__test_eq_ko_d3__g_pu1__assume4:us_private.
  forall record_equality__test_eq_ko_d3__g_pu1__assume5:int.
  forall o5:natural. forall o6:natural. forall o7:natural. forall o8:natural.
  forall o9:us_private.
  forall record_equality__test_eq_ko_d3__g_pu2__assume:natural.
  forall record_equality__test_eq_ko_d3__g_pu2__assume1:natural.
  forall record_equality__test_eq_ko_d3__g_pu2__assume2:natural.
  forall record_equality__test_eq_ko_d3__g_pu2__assume3:natural.
  forall record_equality__test_eq_ko_d3__g_pu2__assume4:us_private.
  forall record_equality__test_eq_ko_d3__g_pu2__assume5:int.
  forall result:natural. forall result1:natural. forall result2:natural.
  forall result3:us_private. forall g_pu1__split_fields4:natural.
  forall g_pu1__split_fields5:natural. forall g_pu1__split_fields6:natural.
  forall g_pu1__split_fields7:us_private. forall result4:natural.
  forall result5:natural. forall result6:natural. forall result7:us_private.
  forall g_pu2__split_fields4:natural. forall g_pu2__split_fields5:natural.
  forall g_pu2__split_fields6:natural.
  forall g_pu2__split_fields7:us_private. forall result8:natural.
  forall result9:us_private. forall r_g1__split_fields2:natural.
  forall r_g1__split_fields3:us_private. forall result10:natural.
  forall result11:us_private. forall r_g2__split_fields2:natural.
  forall r_g2__split_fields3:us_private. (((us = 0) and in_range1(0)) ->
  (((c_pu1__attr__tag = us_tag3) and (((to_rep(c_pu1__split_discrs) = 0) and
  (to_rep(c_pu1__split_fields1) = 0)) and
  (to_rep(c_pu1__split_fields) = 0))) ->
  ((0 = to_rep(c_pu1__split_discrs)) ->
  ((to_rep(c_pu1__split_discrs) = r14b) -> (in_range1(r14b) ->
  (((((to_rep(o) = 0) and ((o = o1) and ((c_pu1__split_fields1 = o2) and
  ((c_pu1__split_fields = o3) and (us_null_ext__ = o4))))) and
  ((c_pu1__split_discrs = record_equality__test_eq_ko_d3__g_pu1__assume) and
  (((record_equality__test_eq_ko_d3__g_pu1__assume1 = o1) and
  ((record_equality__test_eq_ko_d3__g_pu1__assume2 = o2) and
  ((record_equality__test_eq_ko_d3__g_pu1__assume3 = o3) and
  (record_equality__test_eq_ko_d3__g_pu1__assume4 = o4)))) and
  (us_tag4 = record_equality__test_eq_ko_d3__g_pu1__assume5)))) and
  ((((result = g_pu1__split_fields) and ((result1 = g_pu1__split_fields1) and
  ((result2 = g_pu1__split_fields2) and
  (result3 = g_pu1__split_fields3)))) and
  ((record_equality__test_eq_ko_d3__g_pu1__assume1 = g_pu1__split_fields4) and
  ((record_equality__test_eq_ko_d3__g_pu1__assume2 = g_pu1__split_fields5) and
  ((record_equality__test_eq_ko_d3__g_pu1__assume3 = g_pu1__split_fields6) and
  (record_equality__test_eq_ko_d3__g_pu1__assume4 = g_pu1__split_fields7))))) and
  ((g_pu1__split_discrs = record_equality__test_eq_ko_d3__g_pu1__assume) and
  (g_pu1__attr__tag = us_tag2)))) -> ((to_rep(c_pu1__split_discrs) = r16b) ->
  (in_range1(r16b) -> (((((to_rep(o5) = 1) and ((o5 = o6) and
  ((c_pu1__split_fields1 = o7) and ((c_pu1__split_fields = o8) and
  (us_null_ext__ = o9))))) and
  ((c_pu1__split_discrs = record_equality__test_eq_ko_d3__g_pu2__assume) and
  (((record_equality__test_eq_ko_d3__g_pu2__assume1 = o6) and
  ((record_equality__test_eq_ko_d3__g_pu2__assume2 = o7) and
  ((record_equality__test_eq_ko_d3__g_pu2__assume3 = o8) and
  (record_equality__test_eq_ko_d3__g_pu2__assume4 = o9)))) and
  (us_tag5 = record_equality__test_eq_ko_d3__g_pu2__assume5)))) and
  ((((result4 = g_pu2__split_fields) and
  ((result5 = g_pu2__split_fields1) and ((result6 = g_pu2__split_fields2) and
  (result7 = g_pu2__split_fields3)))) and
  ((record_equality__test_eq_ko_d3__g_pu2__assume1 = g_pu2__split_fields4) and
  ((record_equality__test_eq_ko_d3__g_pu2__assume2 = g_pu2__split_fields5) and
  ((record_equality__test_eq_ko_d3__g_pu2__assume3 = g_pu2__split_fields6) and
  (record_equality__test_eq_ko_d3__g_pu2__assume4 = g_pu2__split_fields7))))) and
  ((g_pu2__split_discrs = record_equality__test_eq_ko_d3__g_pu2__assume) and
  (g_pu2__attr__tag = us_tag2)))) -> (((((result8 = r_g1__split_fields) and
  (result9 = r_g1__split_fields1)) and
  ((g_pu1__split_fields5 = r_g1__split_fields2) and
  (hide_ext__1(g_pu1__split_fields4, g_pu1__split_fields6,
  g_pu1__split_fields7) = r_g1__split_fields3))) and
  ((r_g1__split_discrs = g_pu1__split_discrs) and
  (r_g1__attr__tag = g_pu1__attr__tag))) ->
  (((((result10 = r_g2__split_fields) and
  (result11 = r_g2__split_fields1)) and
  ((g_pu2__split_fields5 = r_g2__split_fields2) and
  (hide_ext__1(g_pu2__split_fields4, g_pu2__split_fields6,
  g_pu2__split_fields7) = r_g2__split_fields3))) and
  ((r_g2__split_discrs = g_pu2__split_discrs) and
  (r_g2__attr__tag = g_pu2__attr__tag))) ->
  (((r_g1__attr__tag = r_g2__attr__tag) -> (us_dispatch_eq({
  us_split_discrs1 = { rec__record_equality__root__c = r_g1__split_discrs };
  us_split_fields1 = { rec__record_equality__root__f1 = r_g1__split_fields2;
  rec__ext__ = r_g1__split_fields3 }; attr__tag = r_g1__attr__tag }, {
  us_split_discrs1 = { rec__record_equality__root__c = r_g2__split_discrs };
  us_split_fields1 = { rec__record_equality__root__f1 = r_g2__split_fields2;
  rec__ext__ = r_g2__split_fields3 }; attr__tag = r_g2__attr__tag
  }) = true)) and ((not (r_g1__attr__tag = r_g2__attr__tag)) ->
  (false = true)))))))))))))))
