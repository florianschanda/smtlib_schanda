;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 64)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort modular 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (modular modular) Bool)

(declare-const dummy modular)

(declare-datatypes ((modular__ref 0))
(((mk_modular__ref (modular__content modular)))))
(define-fun modular__ref_8__projection ((a modular__ref)) modular (modular__content
                                                                  a))

(define-fun dynamic_invariant ((temp___expr_351 (_ BitVec 64))
  (temp___is_init_348 Bool) (temp___skip_constant_349 Bool)
  (temp___do_toplevel_350 Bool)) Bool true)

(declare-sort mask_size 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (mask_size mask_size) Bool)

(declare-const dummy1 mask_size)

(declare-datatypes ((mask_size__ref 0))
(((mk_mask_size__ref (mask_size__content mask_size)))))
(define-fun mask_size__ref_7__projection ((a mask_size__ref)) mask_size
  (mask_size__content a))

(define-fun dynamic_invariant1 ((temp___expr_363 Int)
  (temp___is_init_360 Bool) (temp___skip_constant_361 Bool)
  (temp___do_toplevel_362 Bool)) Bool (=>
                                      (or (= temp___is_init_360 true)
                                      (<= 1 64)) (in_range1 temp___expr_363)))

(declare-fun axiom__ (tuple0) Bool)

(declare-fun axiom____function_guard (Bool tuple0) Bool)

;; axiom____post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (=> (= (axiom__ us_void_param) true)
     (forall ((v (_ BitVec 64)))
     (=>
     (and (bvule ((_ int2bv 64) 0) v)
     (bvule v ((_ int2bv 64) 18446744073709551615)))
     (forall ((n Int))
     (=> (and (<= 0 n) (<= n 63))
     (=>
     (= (bvand v (ite (< n 18446744073709551616)
                 (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) n))
                 ((_ int2bv 64) 0))) ((_ int2bv 64) 0))
     (= (bvand (bvadd v (ite (< n 18446744073709551616)
                        (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) n))
                        ((_ int2bv 64) 0))) (ite (< n 18446744073709551616)
                                            (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) n))
                                            ((_ int2bv 64) 0))) (ite (< n 18446744073709551616)
                                                                (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) n))
                                                                ((_ int2bv 64) 0))))))))) :pattern (
  (axiom__ us_void_param)) )))

(declare-const amount Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort integer 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-const dummy2 integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ((t771s__ref 0))
(((mk_t771s__ref (t771s__content integer)))))
(define-fun t771s__ref___projection ((a t771s__ref)) integer (t771s__content
                                                             a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(declare-const result__ (_ BitVec 64))

(declare-const i Int)

(declare-const bits_manipulation_unsigned__unsigned_64__functions__proofs__make_mask__lemma2__ones__result (_ BitVec 64))

(declare-const temp___487 Int)

(declare-const temp___486 (_ BitVec 64))

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 64))

(declare-const o2 (_ BitVec 64))

(declare-const o3 (_ BitVec 64))

(declare-const result (_ BitVec 64))

(declare-const result__1 (_ BitVec 64))

(declare-const result1 Int)

(declare-const i1 Int)

(declare-const result2 (_ BitVec 64))

(declare-const result__2 (_ BitVec 64))

(declare-const result__3 (_ BitVec 64))

(declare-const i2 Int)

(declare-const result3 Int)

(declare-const i3 Int)

(declare-const result4 (_ BitVec 64))

(declare-const result__4 (_ BitVec 64))

(declare-const result__5 (_ BitVec 64))

(declare-const i4 Int)

(declare-const result__6 (_ BitVec 64))

(declare-const i5 Int)

(declare-const result__7 (_ BitVec 64))

(declare-const i6 Int)

(declare-const result__8 (_ BitVec 64))

(declare-const i7 Int)

(declare-const result__9 (_ BitVec 64))

(declare-const i8 Int)

(declare-const result__10 (_ BitVec 64))

(declare-const i9 Int)

(declare-const result5 (_ BitVec 64))

(declare-const bits_manipulation_unsigned__unsigned_64__functions__proofs__make_mask__lemma2__ones__result1 (_ BitVec 64))

(declare-const bits_manipulation_unsigned__unsigned_64__functions__proofs__make_mask__lemma2__ones__result2 (_ BitVec 64))

(declare-const bits_manipulation_unsigned__unsigned_64__functions__proofs__make_mask__lemma2__ones__result3 (_ BitVec 64))

(declare-const result__11 (_ BitVec 64))

(declare-const i10 Int)

(declare-const bits_manipulation_unsigned__unsigned_64__functions__proofs__make_mask__lemma2__ones__result4 (_ BitVec 64))

(declare-const result__12 (_ BitVec 64))

(declare-const i11 Int)

(declare-const bits_manipulation_unsigned__unsigned_64__functions__proofs__make_mask__lemma2__ones__result5 (_ BitVec 64))

(define-fun i12 () int__ref (mk_int__ref i6))

(define-fun result__13 () t__ref (mk_t__ref result__7))

(define-fun result6 () int__ref (mk_int__ref result1))

(define-fun result7 () t__ref (mk_t__ref result))

(define-fun i13 () int__ref (mk_int__ref i))

(define-fun result__14 () t__ref (mk_t__ref result__))

;; H
  (assert (in_range1 amount))

;; H
  (assert (= result7 result__14))

;; H
  (assert (= result__1 ((_ int2bv 64) 0)))

;; H
  (assert true)

;; H
  (assert (= (axiom__ Tuple0) true))

;; H
  (assert (= result6 i13))

;; H
  (assert (= i1 1))

;; H
  (assert (<= 1 i1))

;; H
  (assert (<= i1 amount))

;; H
  (assert
  (=> (< (- i1 1) 18446744073709551616)
  (= o (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) (- i1 1))))))

;; H
  (assert
  (=> (not (< (- i1 1) 18446744073709551616)) (= o ((_ int2bv 64) 0))))

;; H
  (assert (= o1 (bvadd result__1 o)))

;; H
  (assert (= result__1 result2))

;; H
  (assert (= result__2 o1))

;; H
  (assert
  (= (bvand result__3 (let ((temp___490 (- i2 1)))
                      (ite (< temp___490 18446744073709551616)
                      (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) temp___490))
                      ((_ int2bv 64) 0)))) (let ((temp___491 (- i2 1)))
                                           (ite (< temp___491 18446744073709551616)
                                           (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) temp___491))
                                           ((_ int2bv 64) 0)))))

;; H
  (assert
  (and (=> (<= 1 amount) (dynamic_property 1 amount i2))
  (and (<= 1 i2) (<= i2 amount))))

;; H
  (assert (not (= i2 amount)))

;; H
  (assert (= result3 i2))

;; H
  (assert (= i3 (+ i2 1)))

;; H
  (assert
  (=> (< (- i3 1) 18446744073709551616)
  (= o2 (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) (- i3 1))))))

;; H
  (assert
  (=> (not (< (- i3 1) 18446744073709551616)) (= o2 ((_ int2bv 64) 0))))

;; H
  (assert (= o3 (bvadd result__3 o2)))

;; H
  (assert (= result4 result__3))

;; H
  (assert (= result__4 o3))

(assert
;; WP_parameter_def
 ;; File "bits_manipulation.ads", line 3, characters 0-0
  (not
  (= (bvand result__4 (let ((temp___490 (- i3 1)))
                      (ite (< temp___490 18446744073709551616)
                      (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) temp___490))
                      ((_ int2bv 64) 0)))) (let ((temp___491 (- i3 1)))
                                           (ite (< temp___491 18446744073709551616)
                                           (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) temp___491))
                                           ((_ int2bv 64) 0))))))
(check-sat)
(exit)
