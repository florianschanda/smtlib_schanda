;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536))
  (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (unsigned_8 unsigned_8) Bool)

(declare-const dummy unsigned_8)

(declare-datatypes ((unsigned_8__ref 0))
(((mk_unsigned_8__ref (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref___projection ((a unsigned_8__ref)) unsigned_8
  (unsigned_8__content a))

(define-fun dynamic_invariant ((temp___expr_160 (_ BitVec 8))
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool true)

(declare-fun to_rep (unsigned_8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned_8)

;; inversion_axiom
  (assert
  (forall ((x unsigned_8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x unsigned_8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_8)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort unsigned_16 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (unsigned_16 unsigned_16) Bool)

(declare-const dummy1 unsigned_16)

(declare-datatypes ((unsigned_16__ref 0))
(((mk_unsigned_16__ref (unsigned_16__content unsigned_16)))))
(define-fun unsigned_16__ref___projection ((a unsigned_16__ref)) unsigned_16
  (unsigned_16__content a))

(define-fun dynamic_invariant1 ((temp___expr_166 (_ BitVec 16))
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)) Bool true)

(declare-fun to_rep1 (unsigned_16) (_ BitVec 16))

(declare-fun of_rep1 ((_ BitVec 16)) unsigned_16)

;; inversion_axiom
  (assert
  (forall ((x unsigned_16))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int5 ((x unsigned_16)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_16)) (! (uint_in_range1
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort return_code_t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (return_code_t return_code_t) Bool)

(declare-const dummy2 return_code_t)

(declare-datatypes ((return_code_t__ref 0))
(((mk_return_code_t__ref (return_code_t__content return_code_t)))))
(define-fun return_code_t__ref___projection ((a return_code_t__ref)) return_code_t
  (return_code_t__content a))

(define-fun dynamic_invariant2 ((temp___expr_238 Int)
  (temp___is_init_235 Bool) (temp___skip_constant_236 Bool)
  (temp___do_toplevel_237 Bool)) Bool (=>
                                      (or (= temp___is_init_235 true)
                                      (<= 0 1)) (in_range1 temp___expr_238)))

(declare-fun to_rep2 (return_code_t) Int)

(declare-fun of_rep2 (Int) return_code_t)

;; inversion_axiom
  (assert
  (forall ((x return_code_t))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x return_code_t)) (! (in_range1
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__types__octet__data unsigned_8)))))
(define-fun us_split_fields_Data__projection ((a us_split_fields)) unsigned_8
  (rec__types__octet__data a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__types__octet__data (us_split_fields1 a)))
                   (to_rep (rec__types__octet__data (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const types__octet__data__first__bit Int)

(declare-const types__octet__data__last__bit Int)

(declare-const types__octet__data__position Int)

;; types__octet__data__first__bit_axiom
  (assert (<= 0 types__octet__data__first__bit))

;; types__octet__data__last__bit_axiom
  (assert (< types__octet__data__first__bit types__octet__data__last__bit))

;; types__octet__data__position_axiom
  (assert (<= 0 types__octet__data__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((octet__ref 0))
(((mk_octet__ref (octet__content us_rep)))))
(define-fun octet__ref___projection ((a octet__ref)) us_rep (octet__content
                                                            a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-sort query_opcode 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (query_opcode query_opcode) Bool)

(declare-const dummy4 query_opcode)

(declare-datatypes ((query_opcode__ref 0))
(((mk_query_opcode__ref (query_opcode__content query_opcode)))))
(define-fun query_opcode__ref___projection ((a query_opcode__ref)) query_opcode
  (query_opcode__content a))

(declare-fun to_rep3 (query_opcode) Int)

(declare-fun of_rep3 (Int) query_opcode)

;; inversion_axiom
  (assert
  (forall ((x query_opcode))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x query_opcode)) (! (in_range2
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort qdcount_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (qdcount_range qdcount_range) Bool)

(declare-const dummy5 qdcount_range)

(declare-datatypes ((qdcount_range__ref 0))
(((mk_qdcount_range__ref (qdcount_range__content qdcount_range)))))
(define-fun qdcount_range__ref___projection ((a qdcount_range__ref)) qdcount_range
  (qdcount_range__content a))

(declare-fun to_rep4 (qdcount_range) Int)

(declare-fun of_rep4 (Int) qdcount_range)

;; inversion_axiom
  (assert
  (forall ((x qdcount_range))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x qdcount_range)) (! (in_range3
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__types__query_header__id unsigned_16)(rec__types__query_header__opcode query_opcode)(rec__types__query_header__qdcount qdcount_range)))))
(define-fun us_split_fields_ID__projection ((a us_split_fields2)) unsigned_16
  (rec__types__query_header__id a))

(define-fun us_split_fields_OPCODE__projection ((a us_split_fields2)) query_opcode
  (rec__types__query_header__opcode a))

(define-fun us_split_fields_QDCOUNT__projection ((a us_split_fields2)) qdcount_range
  (rec__types__query_header__qdcount a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__types__query_header__id
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__types__query_header__id
                                                   (us_split_fields3 b))))
                         (= (to_rep3
                            (rec__types__query_header__opcode
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__types__query_header__opcode
                                                   (us_split_fields3 b)))))
                         (= (to_rep4
                            (rec__types__query_header__qdcount
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__types__query_header__qdcount
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const types__query_header__id__first__bit Int)

(declare-const types__query_header__id__last__bit Int)

(declare-const types__query_header__id__position Int)

;; types__query_header__id__first__bit_axiom
  (assert (<= 0 types__query_header__id__first__bit))

;; types__query_header__id__last__bit_axiom
  (assert
  (< types__query_header__id__first__bit types__query_header__id__last__bit))

;; types__query_header__id__position_axiom
  (assert (<= 0 types__query_header__id__position))

(declare-const types__query_header__opcode__first__bit Int)

(declare-const types__query_header__opcode__last__bit Int)

(declare-const types__query_header__opcode__position Int)

;; types__query_header__opcode__first__bit_axiom
  (assert (<= 0 types__query_header__opcode__first__bit))

;; types__query_header__opcode__last__bit_axiom
  (assert
  (< types__query_header__opcode__first__bit types__query_header__opcode__last__bit))

;; types__query_header__opcode__position_axiom
  (assert (<= 0 types__query_header__opcode__position))

(declare-const types__query_header__qdcount__first__bit Int)

(declare-const types__query_header__qdcount__last__bit Int)

(declare-const types__query_header__qdcount__position Int)

;; types__query_header__qdcount__first__bit_axiom
  (assert (<= 0 types__query_header__qdcount__first__bit))

;; types__query_header__qdcount__last__bit_axiom
  (assert
  (< types__query_header__qdcount__first__bit types__query_header__qdcount__last__bit))

;; types__query_header__qdcount__position_axiom
  (assert (<= 0 types__query_header__qdcount__position))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((query_header__ref 0))
(((mk_query_header__ref (query_header__content us_rep1)))))
(define-fun query_header__ref___projection ((a query_header__ref)) us_rep1
  (query_header__content a))

(declare-sort network_dns_query_range 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 512)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (network_dns_query_range network_dns_query_range) Bool)

(declare-const dummy7 network_dns_query_range)

(declare-datatypes ((network_dns_query_range__ref 0))
(((mk_network_dns_query_range__ref
  (network_dns_query_range__content network_dns_query_range)))))
(define-fun network_dns_query_range__ref___projection ((a network_dns_query_range__ref)) network_dns_query_range
  (network_dns_query_range__content a))

(define-fun dynamic_invariant3 ((temp___expr_257 Int)
  (temp___is_init_254 Bool) (temp___skip_constant_255 Bool)
  (temp___do_toplevel_256 Bool)) Bool (=>
                                      (or (= temp___is_init_254 true)
                                      (<= 0 512)) (in_range4
                                      temp___expr_257)))

(declare-fun extract_unsigned_16 ((Array Int us_rep) Int) (_ BitVec 16))

(declare-fun extract_unsigned_16__function_guard ((_ BitVec 16)
  (Array Int us_rep) Int) Bool)

;; extract_unsigned_16__post_axiom
  (assert
  (forall ((query (Array Int us_rep)))
  (forall ((offset Int))
  (! (=> (and (dynamic_invariant3 offset true true true) (<= offset 511))
     (dynamic_invariant1 (extract_unsigned_16 query offset) true false true)) :pattern (
  (extract_unsigned_16 query offset)) ))))

(declare-sort bit_range 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (bit_range bit_range) Bool)

(declare-const dummy8 bit_range)

(declare-datatypes ((bit_range__ref 0))
(((mk_bit_range__ref (bit_range__content bit_range)))))
(define-fun bit_range__ref___projection ((a bit_range__ref)) bit_range
  (bit_range__content a))

(define-fun dynamic_invariant4 ((temp___expr_251 Int)
  (temp___is_init_248 Bool) (temp___skip_constant_249 Bool)
  (temp___do_toplevel_250 Bool)) Bool (=>
                                      (or (= temp___is_init_248 true)
                                      (<= 0 7)) (in_range5 temp___expr_251)))

(declare-fun extract_bits_of_octet ((Array Int us_rep) Int Int
  (_ BitVec 8)) (_ BitVec 8))

(declare-fun extract_bits_of_octet__function_guard ((_ BitVec 8)
  (Array Int us_rep) Int Int (_ BitVec 8)) Bool)

;; extract_bits_of_octet__post_axiom
  (assert
  (forall ((query (Array Int us_rep)))
  (forall ((offset Int) (bit_shift_right Int))
  (forall ((bit_mask (_ BitVec 8)))
  (! (=>
     (and
     (and (dynamic_invariant3 offset true true true) (dynamic_invariant4
     bit_shift_right true true true)) (dynamic_invariant bit_mask true true
     true)) (dynamic_invariant
     (extract_bits_of_octet query offset bit_shift_right bit_mask) true false
     true)) :pattern ((extract_bits_of_octet query offset bit_shift_right
                      bit_mask)) )))))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__parse__parse_result_t__return_code return_code_t)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) return_code_t
  (rec__parse__parse_result_t__return_code a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2 (rec__parse__parse_result_t__header us_rep1)))))
(define-fun us_split_fields_Header__projection ((a us_split_fields4)) us_rep1
  (rec__parse__parse_result_t__header a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2
  (us_split_discrs1 us_split_discrs)(us_split_fields5 us_split_fields4)(attr__constrained Bool)))))
(define-fun us_rep_3__projection ((a us_rep2)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_4__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun us_rep_5__projection ((a us_rep2)) Bool (attr__constrained a))

(define-fun parse__parse_result_t__header__pred ((a us_rep2)) Bool (=
  (to_rep2 (rec__parse__parse_result_t__return_code (us_split_discrs1 a))) 0))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep2
                            (rec__parse__parse_result_t__return_code
                            (us_split_discrs1 a))) (to_rep2
                                                   (rec__parse__parse_result_t__return_code
                                                   (us_split_discrs1 b))))
                         (=> (parse__parse_result_t__header__pred a)
                         (= (bool_eq2
                            (rec__parse__parse_result_t__header
                            (us_split_fields5 a))
                            (rec__parse__parse_result_t__header
                            (us_split_fields5 b))) true)))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-const parse__parse_result_t__return_code__first__bit Int)

(declare-const parse__parse_result_t__return_code__last__bit Int)

(declare-const parse__parse_result_t__return_code__position Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit parse__parse_result_t__return_code__last__bit))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position))

(declare-const parse__parse_result_t__header__first__bit Int)

(declare-const parse__parse_result_t__header__last__bit Int)

(declare-const parse__parse_result_t__header__position Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit parse__parse_result_t__header__last__bit))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes ((parse_result_t__ref 0))
(((mk_parse_result_t__ref (parse_result_t__content us_rep2)))))
(define-fun parse_result_t__ref___projection ((a parse_result_t__ref)) us_rep2
  (parse_result_t__content a))

(define-fun default_initial_assumption ((temp___expr_300 us_rep2)
  (temp___skip_top_level_301 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_300) false)
                                         (= (to_rep2
                                            (rec__parse__parse_result_t__return_code
                                            (us_split_discrs1
                                            temp___expr_300))) 1)))

(declare-const query (Array Int us_rep))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const result____attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const r2b Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun in_range6 ((rec__parse__parse_result_t__return_code1 Int)
  (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2
                                                                (rec__parse__parse_result_t__return_code
                                                                (us_split_discrs1
                                                                a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-const parse__parse_result_t__return_code__first__bit1 Int)

(declare-const parse__parse_result_t__return_code__last__bit1 Int)

(declare-const parse__parse_result_t__return_code__position1 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit1))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit1 parse__parse_result_t__return_code__last__bit1))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position1))

(declare-const parse__parse_result_t__header__first__bit1 Int)

(declare-const parse__parse_result_t__header__last__bit1 Int)

(declare-const parse__parse_result_t__header__position1 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit1))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit1 parse__parse_result_t__header__last__bit1))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position1))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ((t3b__ref 0)) (((mk_t3b__ref (t3b__content us_rep2)))))
(define-fun t3b__ref___projection ((a t3b__ref)) us_rep2 (t3b__content a))

(declare-const r6b Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun in_range7 ((rec__parse__parse_result_t__return_code1 Int)
  (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2
                                                                (rec__parse__parse_result_t__return_code
                                                                (us_split_discrs1
                                                                a)))))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const parse__parse_result_t__return_code__first__bit2 Int)

(declare-const parse__parse_result_t__return_code__last__bit2 Int)

(declare-const parse__parse_result_t__return_code__position2 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit2))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit2 parse__parse_result_t__return_code__last__bit2))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position2))

(declare-const parse__parse_result_t__header__first__bit2 Int)

(declare-const parse__parse_result_t__header__last__bit2 Int)

(declare-const parse__parse_result_t__header__position2 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit2))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit2 parse__parse_result_t__header__last__bit2))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position2))

(declare-fun user_eq11 (us_rep2 us_rep2) Bool)

(declare-const dummy11 us_rep2)

(declare-datatypes ((t7b__ref 0)) (((mk_t7b__ref (t7b__content us_rep2)))))
(define-fun t7b__ref___projection ((a t7b__ref)) us_rep2 (t7b__content a))

(declare-const r10b Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(define-fun in_range8 ((rec__parse__parse_result_t__return_code1 Int)
  (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2
                                                                (rec__parse__parse_result_t__return_code
                                                                (us_split_discrs1
                                                                a)))))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-const parse__parse_result_t__return_code__first__bit3 Int)

(declare-const parse__parse_result_t__return_code__last__bit3 Int)

(declare-const parse__parse_result_t__return_code__position3 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit3))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit3 parse__parse_result_t__return_code__last__bit3))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position3))

(declare-const parse__parse_result_t__header__first__bit3 Int)

(declare-const parse__parse_result_t__header__last__bit3 Int)

(declare-const parse__parse_result_t__header__position3 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit3))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit3 parse__parse_result_t__header__last__bit3))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position3))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-const dummy12 us_rep2)

(declare-datatypes ((t11b__ref 0))
(((mk_t11b__ref (t11b__content us_rep2)))))
(define-fun t11b__ref___projection ((a t11b__ref)) us_rep2 (t11b__content a))

(declare-const r14b Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(define-fun in_range9 ((rec__parse__parse_result_t__return_code1 Int)
  (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2
                                                                (rec__parse__parse_result_t__return_code
                                                                (us_split_discrs1
                                                                a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep2) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))

(declare-const parse__parse_result_t__return_code__first__bit4 Int)

(declare-const parse__parse_result_t__return_code__last__bit4 Int)

(declare-const parse__parse_result_t__return_code__position4 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit4))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit4 parse__parse_result_t__return_code__last__bit4))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position4))

(declare-const parse__parse_result_t__header__first__bit4 Int)

(declare-const parse__parse_result_t__header__last__bit4 Int)

(declare-const parse__parse_result_t__header__position4 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit4))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit4 parse__parse_result_t__header__last__bit4))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position4))

(declare-fun user_eq13 (us_rep2 us_rep2) Bool)

(declare-const dummy13 us_rep2)

(declare-datatypes ((t15b__ref 0))
(((mk_t15b__ref (t15b__content us_rep2)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_rep2 (t15b__content a))

(declare-const r18b Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun in_range10 ((rec__parse__parse_result_t__return_code1 Int)
  (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2
                                                                (rec__parse__parse_result_t__return_code
                                                                (us_split_discrs1
                                                                a)))))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep2) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment7 a))))

(declare-const parse__parse_result_t__return_code__first__bit5 Int)

(declare-const parse__parse_result_t__return_code__last__bit5 Int)

(declare-const parse__parse_result_t__return_code__position5 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit5))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit5 parse__parse_result_t__return_code__last__bit5))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position5))

(declare-const parse__parse_result_t__header__first__bit5 Int)

(declare-const parse__parse_result_t__header__last__bit5 Int)

(declare-const parse__parse_result_t__header__position5 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit5))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit5 parse__parse_result_t__header__last__bit5))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position5))

(declare-fun user_eq14 (us_rep2 us_rep2) Bool)

(declare-const dummy14 us_rep2)

(declare-datatypes ((t19b__ref 0))
(((mk_t19b__ref (t19b__content us_rep2)))))
(define-fun t19b__ref___projection ((a t19b__ref)) us_rep2 (t19b__content a))

(declare-const r22b Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(define-fun in_range11 ((rec__parse__parse_result_t__return_code1 Int)
  (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2
                                                                (rec__parse__parse_result_t__return_code
                                                                (us_split_discrs1
                                                                a)))))

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep2) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment8 a))))

(declare-const parse__parse_result_t__return_code__first__bit6 Int)

(declare-const parse__parse_result_t__return_code__last__bit6 Int)

(declare-const parse__parse_result_t__return_code__position6 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit6))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit6 parse__parse_result_t__return_code__last__bit6))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position6))

(declare-const parse__parse_result_t__header__first__bit6 Int)

(declare-const parse__parse_result_t__header__last__bit6 Int)

(declare-const parse__parse_result_t__header__position6 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit6))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit6 parse__parse_result_t__header__last__bit6))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position6))

(declare-fun user_eq15 (us_rep2 us_rep2) Bool)

(declare-const dummy15 us_rep2)

(declare-datatypes ((t23b__ref 0))
(((mk_t23b__ref (t23b__content us_rep2)))))
(define-fun t23b__ref___projection ((a t23b__ref)) us_rep2 (t23b__content a))

(declare-const r26b Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(define-fun in_range12 ((rec__parse__parse_result_t__return_code1 Int)
  (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2
                                                                (rec__parse__parse_result_t__return_code
                                                                (us_split_discrs1
                                                                a)))))

(declare-const value__size9 Int)

(declare-fun object__size9 (us_rep2) Int)

(declare-const value__alignment9 Int)

(declare-fun object__alignment9 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment9 a))))

(declare-const parse__parse_result_t__return_code__first__bit7 Int)

(declare-const parse__parse_result_t__return_code__last__bit7 Int)

(declare-const parse__parse_result_t__return_code__position7 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit7))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit7 parse__parse_result_t__return_code__last__bit7))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position7))

(declare-const parse__parse_result_t__header__first__bit7 Int)

(declare-const parse__parse_result_t__header__last__bit7 Int)

(declare-const parse__parse_result_t__header__position7 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit7))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit7 parse__parse_result_t__header__last__bit7))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position7))

(declare-fun user_eq16 (us_rep2 us_rep2) Bool)

(declare-const dummy16 us_rep2)

(declare-datatypes ((t27b__ref 0))
(((mk_t27b__ref (t27b__content us_rep2)))))
(define-fun t27b__ref___projection ((a t27b__ref)) us_rep2 (t27b__content a))

(declare-const r30b Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(define-fun in_range13 ((rec__parse__parse_result_t__return_code1 Int)
  (a us_rep2)) Bool (= rec__parse__parse_result_t__return_code1 (to_rep2
                                                                (rec__parse__parse_result_t__return_code
                                                                (us_split_discrs1
                                                                a)))))

(declare-const value__size10 Int)

(declare-fun object__size10 (us_rep2) Int)

(declare-const value__alignment10 Int)

(declare-fun object__alignment10 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size10 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment10))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment10 a))))

(declare-const parse__parse_result_t__return_code__first__bit8 Int)

(declare-const parse__parse_result_t__return_code__last__bit8 Int)

(declare-const parse__parse_result_t__return_code__position8 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit8))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit8 parse__parse_result_t__return_code__last__bit8))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position8))

(declare-const parse__parse_result_t__header__first__bit8 Int)

(declare-const parse__parse_result_t__header__last__bit8 Int)

(declare-const parse__parse_result_t__header__position8 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit8))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit8 parse__parse_result_t__header__last__bit8))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position8))

(declare-fun user_eq17 (us_rep2 us_rep2) Bool)

(declare-const dummy17 us_rep2)

(declare-datatypes ((t31b__ref 0))
(((mk_t31b__ref (t31b__content us_rep2)))))
(define-fun t31b__ref___projection ((a t31b__ref)) us_rep2 (t31b__content a))

(define-fun dynamic_invariant5 ((temp___expr_273 Int)
  (temp___is_init_270 Bool) (temp___skip_constant_271 Bool)
  (temp___do_toplevel_272 Bool)) Bool (=>
                                      (or (= temp___is_init_270 true)
                                      (<= 0 1)) (in_range2 temp___expr_273)))

(define-fun dynamic_invariant6 ((temp___expr_279 Int)
  (temp___is_init_276 Bool) (temp___skip_constant_277 Bool)
  (temp___do_toplevel_278 Bool)) Bool (=>
                                      (or (= temp___is_init_276 true)
                                      (<= 1 16)) (in_range3 temp___expr_279)))

(declare-const result____split_fields unsigned_16)

(declare-const result____split_fields1 query_opcode)

(declare-const result____split_fields2 qdcount_range)

(declare-const result____split_discrs return_code_t)

(declare-const opcode (_ BitVec 8))

(declare-const qdcount (_ BitVec 16))

(declare-const header__split_fields unsigned_16)

(declare-const header__split_fields1 query_opcode)

(declare-const header__split_fields2 qdcount_range)

(declare-const o (_ BitVec 16))

(declare-const o1 unsigned_16)

(declare-const o2 unsigned_16)

(declare-const o3 query_opcode)

(declare-const o4 qdcount_range)

(declare-const temp___313 unsigned_16)

(declare-const temp___3131 query_opcode)

(declare-const temp___3132 qdcount_range)

(declare-const o5 (_ BitVec 8))

(declare-const o6 Bool)

(declare-const o7 (_ BitVec 8))

(declare-const o8 query_opcode)

(declare-const o9 unsigned_16)

(declare-const o10 query_opcode)

(declare-const o11 qdcount_range)

(declare-const temp___318 us_rep1)

(declare-const o12 query_opcode)

(declare-const o13 us_split_fields2)

(declare-const temp___320 us_rep1)

(declare-const o14 (_ BitVec 8))

(declare-const o15 Bool)

(declare-const o16 Bool)

(declare-const o17 (_ BitVec 16))

(declare-const o18 return_code_t)

(declare-const o19 us_split_discrs)

(declare-const temp___327 us_rep2)

(declare-const result____split_fields3 us_split_fields4)

(declare-const result____split_discrs1 us_split_discrs)

(declare-const result us_split_fields__ref1)

(declare-const header__split_fields3 us_split_fields2)

(declare-const result1 Bool)

(declare-const result____split_fields4 us_split_fields4)

(declare-const result____split_discrs2 us_split_discrs)

(declare-const result2 t__ref)

(declare-const opcode1 (_ BitVec 8))

(declare-const result3 us_split_fields__ref1)

(declare-const header__split_fields4 us_split_fields2)

(declare-const result4 us_split_fields__ref1)

(declare-const header__split_fields5 us_split_fields2)

(declare-const result____split_fields5 us_split_fields4)

(declare-const result____split_discrs3 us_split_discrs)

(declare-const result5 Bool)

(declare-const result____split_fields6 us_split_fields4)

(declare-const result____split_discrs4 us_split_discrs)

(declare-const result6 t__ref1)

(declare-const qdcount1 (_ BitVec 16))

;; H
  (assert (not (= result____attr__constrained true)))

;; H
  (assert (= o (extract_unsigned_16 query 0)))

;; H
  (assert (= (to_rep1 o1) o))

;; H
  (assert (= o1 o2))

;; H
  (assert (= header__split_fields1 o3))

;; H
  (assert (= header__split_fields2 o4))

;; H
  (assert (= temp___313 o2))

;; H
  (assert (= temp___3131 o3))

;; H
  (assert (= temp___3132 o4))

;; H
  (assert
  (= result (mk___split_fields__ref1
            (mk___split_fields1 header__split_fields header__split_fields1
            header__split_fields2))))

;; H
  (assert
  (= header__split_fields3 (mk___split_fields1 temp___313 temp___3131
                           temp___3132)))

;; H
  (assert (= o5 (extract_bits_of_octet query 2 7 ((_ int2bv 8) 1))))

;; H
  (assert (= o6 (ite (= o5 ((_ int2bv 8) 0)) true false)))

;; H
  (assert (= result1 (ite (not (= o6 true)) true false)))

;; H
  (assert (not (= result1 true)))

;; H
  (assert
  (= result____split_discrs2 (mk___split_discrs result____split_discrs)))

;; H
  (assert
  (= result____split_fields4 (mk___split_fields2
                             (mk___rep1
                             (mk___split_fields1 result____split_fields
                             result____split_fields1 result____split_fields2)))))

;; H
  (assert (= result____split_discrs2 result____split_discrs1))

;; H
  (assert (= result____split_fields4 result____split_fields3))

;; H
  (assert (= o7 (extract_bits_of_octet query 2 3 ((_ int2bv 8) 15))))

;; H
  (assert (= result2 (mk_t__ref opcode)))

;; H
  (assert (= opcode1 o7))

;; H
  (assert (=> (= opcode1 ((_ int2bv 8) 0)) (= (to_rep3 o8) 0)))

;; H
  (assert
  (=> (= opcode1 ((_ int2bv 8) 0))
  (= (rec__types__query_header__id header__split_fields3) o9)))

;; H
  (assert (=> (= opcode1 ((_ int2bv 8) 0)) (= o8 o10)))

;; H
  (assert
  (=> (= opcode1 ((_ int2bv 8) 0))
  (= (rec__types__query_header__qdcount header__split_fields3) o11)))

;; H
  (assert
  (=> (= opcode1 ((_ int2bv 8) 0))
  (= temp___318 (mk___rep1 (mk___split_fields1 o9 o10 o11)))))

;; H
  (assert
  (=> (= opcode1 ((_ int2bv 8) 0))
  (= result3 (mk___split_fields__ref1 header__split_fields3))))

;; H
  (assert
  (=> (= opcode1 ((_ int2bv 8) 0))
  (= header__split_fields4 (us_split_fields3 temp___318))))

;; H
  (assert
  (=> (= opcode1 ((_ int2bv 8) 0))
  (= result____split_discrs3 result____split_discrs2)))

;; H
  (assert
  (=> (= opcode1 ((_ int2bv 8) 0))
  (= result____split_fields5 result____split_fields4)))

;; H
  (assert
  (=> (not (= opcode1 ((_ int2bv 8) 0))) (= opcode1 ((_ int2bv 8) 1))))

;; H
  (assert (=> (not (= opcode1 ((_ int2bv 8) 0))) (= (to_rep3 o12) 1)))

;; H
  (assert
  (=> (not (= opcode1 ((_ int2bv 8) 0)))
  (= o13 (mk___split_fields1
         (rec__types__query_header__id header__split_fields3) o12
         (rec__types__query_header__qdcount header__split_fields3)))))

;; H
  (assert
  (=> (not (= opcode1 ((_ int2bv 8) 0))) (= temp___320 (mk___rep1 o13))))

;; H
  (assert
  (=> (not (= opcode1 ((_ int2bv 8) 0)))
  (= result4 (mk___split_fields__ref1 header__split_fields3))))

;; H
  (assert
  (=> (not (= opcode1 ((_ int2bv 8) 0)))
  (= header__split_fields5 (us_split_fields3 temp___320))))

;; H
  (assert
  (=> (not (= opcode1 ((_ int2bv 8) 0)))
  (= result____split_discrs3 result____split_discrs2)))

;; H
  (assert
  (=> (not (= opcode1 ((_ int2bv 8) 0)))
  (= result____split_fields5 result____split_fields4)))

;; H
  (assert
  (=> (not (= opcode1 ((_ int2bv 8) 0)))
  (= header__split_fields4 header__split_fields5)))

;; H
  (assert (= o14 (extract_bits_of_octet query 2 0 ((_ int2bv 8) 6))))

;; H
  (assert (= o15 (ite (= o14 ((_ int2bv 8) 0)) true false)))

;; H
  (assert (= o16 (ite (not (= o15 true)) true false)))

;; H
  (assert
  (= result5 (ite (= o16 false) (ite (not
                                     (= (to_rep
                                        (rec__types__octet__data
                                        (us_split_fields1 (select query 3)))) ((_ int2bv 8) 0)))
                                true false) true)))

;; H
  (assert (not (= result5 true)))

;; H
  (assert (= result____split_discrs4 result____split_discrs3))

;; H
  (assert (= result____split_fields6 result____split_fields5))

;; H
  (assert (= o17 (extract_unsigned_16 query 4)))

;; H
  (assert (= result6 (mk_t__ref1 qdcount)))

;; H
  (assert (= qdcount1 o17))

;; H
  (assert
  (not
  (and (bvuge qdcount1 ((_ int2bv 16) 1))
  (bvule qdcount1 ((_ int2bv 16) 16)))))

;; H
  (assert
  (= (to_rep2
     (rec__parse__parse_result_t__return_code result____split_discrs4))
  r14b))

;; H
  (assert (in_range1 r14b))

;; H
  (assert (= (to_rep2 o18) 1))

;; H
  (assert (= o19 (mk___split_discrs o18)))

;; H
  (assert (= temp___327 (mk___rep2 o19 (mk___split_fields2 dummy6) true)))

;; H
  (assert (= result____attr__constrained true))

(assert
;; WP_parameter_def
 ;; File "parse.ads", line 16, characters 0-0
  (not
  (= (rec__parse__parse_result_t__return_code (us_split_discrs1 temp___327))
  (rec__parse__parse_result_t__return_code result____split_discrs4))))
(check-sat)
(exit)
