;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort count_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-const dummy1 count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_164 Int))
                           (=>
                           (and (<= a__first temp___idx_164)
                           (<= temp___idx_164 a__last))
                           (= (to_rep (select a temp___idx_164)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_164)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_164 Int))
  (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last))
  (= (to_rep (select a temp___idx_164)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_164)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort integer 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-const dummy2 integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort index 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (index index) Bool)

(declare-const dummy3 index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range3 f)
     (=> (in_range3 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range3 low)
                   (and (in_range3 high)
                   (=> (<= low high) (and (in_range4 low) (in_range4 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int natural)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ()
((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content
                                                                  a))

(define-fun dynamic_invariant ((temp___expr_326 us_t)
  (temp___is_init_323 Bool) (temp___skip_constant_324 Bool)
  (temp___do_toplevel_325 Bool)) Bool (=>
                                      (not (= temp___skip_constant_324 true))
                                      (dynamic_property 1 100
                                      (first1 temp___expr_326)
                                      (last1 temp___expr_326))))

(declare-fun equivalent_keys (Int Int) Bool)

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

;; equivalent_keys__post_axiom
  (assert true)

;; equivalent_keys__def_axiom
  (assert
  (forall ((e1 Int) (e2 Int))
  (! (= (= (equivalent_keys e1 e2) true) (= e1 e2)) :pattern ((equivalent_keys
                                                              e1 e2)) )))

(declare-sort element_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (element_type element_type) Bool)

(declare-const dummy5 element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort hash_type 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 32))

(declare-fun user_eq6 (hash_type hash_type) Bool)

(declare-const dummy6 hash_type)

(declare-datatypes ()
((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type
  (hash_type__content a))

(declare-fun to_rep2 (hash_type) (_ BitVec 32))

(declare-fun of_rep2 ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int3 ((x hash_type)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-fun to_rep3 (count_type) Int)

(declare-fun of_rep3 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range2
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__find_map__index_maps__map__capacity count_type)(rec__find_map__index_maps__map__modulus hash_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__find_map__index_maps__map__capacity a))

(define-fun us_split_discrs___2__projection ((a us_split_discrs)) hash_type
  (rec__find_map__index_maps__map__modulus a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__find_map__index_maps__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type
  (rec__find_map__index_maps__map a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep3
                           (rec__find_map__index_maps__map__capacity
                           (us_split_discrs1 a))) (to_rep3
                                                  (rec__find_map__index_maps__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (to_rep2
                           (rec__find_map__index_maps__map__modulus
                           (us_split_discrs1 a))) (to_rep2
                                                  (rec__find_map__index_maps__map__modulus
                                                  (us_split_discrs1 b)))))
                        (= (us_main_eq
                           (rec__find_map__index_maps__map
                           (us_split_fields1 a))
                           (rec__find_map__index_maps__map
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const find_map__index_maps__map__capacity__first__bit Int)

(declare-const find_map__index_maps__map__capacity__last__bit Int)

(declare-const find_map__index_maps__map__capacity__position Int)

;; find_map__index_maps__map__capacity__first__bit_axiom
  (assert (<= 0 find_map__index_maps__map__capacity__first__bit))

;; find_map__index_maps__map__capacity__last__bit_axiom
  (assert
  (< find_map__index_maps__map__capacity__first__bit find_map__index_maps__map__capacity__last__bit))

;; find_map__index_maps__map__capacity__position_axiom
  (assert (<= 0 find_map__index_maps__map__capacity__position))

(declare-const find_map__index_maps__map__modulus__first__bit Int)

(declare-const find_map__index_maps__map__modulus__last__bit Int)

(declare-const find_map__index_maps__map__modulus__position Int)

;; find_map__index_maps__map__modulus__first__bit_axiom
  (assert (<= 0 find_map__index_maps__map__modulus__first__bit))

;; find_map__index_maps__map__modulus__last__bit_axiom
  (assert
  (< find_map__index_maps__map__modulus__first__bit find_map__index_maps__map__modulus__last__bit))

;; find_map__index_maps__map__modulus__position_axiom
  (assert (<= 0 find_map__index_maps__map__modulus__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep)))))
(define-fun map__ref___projection ((a map__ref1)) us_rep (map__content1 a))

(declare-fun length1 (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun length2 (Int us_rep) Int)

(declare-fun length__function_guard1 (Int Int us_rep) Bool)

(define-fun dynamic_invariant2 ((temp___expr_174 Int)
  (temp___is_init_171 Bool) (temp___skip_constant_172 Bool)
  (temp___do_toplevel_173 Bool)) Bool (=>
                                      (or (= temp___is_init_171 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_174)))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq7 a b) (oeq a b)) :pattern ((user_eq7 a b)) )))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length1 container)))
     (and
     (<= result (to_rep3
                (rec__find_map__index_maps__map__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant2 result true false true))) :pattern ((length1
                                                             container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant2
  (length2 attr__tag container) true false
  true) :pattern ((length2 attr__tag container)) ))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq3 (us_rep1 us_rep1) Bool)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep1)))))
(define-fun map__ref___2__projection ((a map__ref2)) us_rep1 (map__content2
                                                             a))

(declare-fun is_empty (us_rep1) Bool)

(declare-fun is_empty__function_guard (Bool us_rep1) Bool)

(declare-fun model__ (us_rep) us_rep1)

(declare-fun model____function_guard (us_rep1 us_rep) Bool)

(declare-fun clear__specific_post (Int us_split_fields us_split_discrs
  us_split_fields) Bool)

(declare-fun has_key (us_rep1 Int) Bool)

(declare-fun has_key__function_guard (Bool us_rep1 Int) Bool)

(define-fun contains ((container us_rep)
  (key Int)) Bool (has_key (model__ container) key))

(declare-fun contains__function_guard (Bool us_rep Int) Bool)

(declare-fun contains1 (Int us_rep Int) Bool)

(declare-fun contains__function_guard1 (Bool Int us_rep Int) Bool)

(declare-sort key_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (key_type key_type) Bool)

(declare-const dummy9 key_type)

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref___projection ((a key_type__ref)) key_type (key_type__content
                                                                    a))

(define-fun dynamic_invariant3 ((temp___expr_331 Int)
  (temp___is_init_328 Bool) (temp___skip_constant_329 Bool)
  (temp___do_toplevel_330 Bool)) Bool (=>
                                      (or (= temp___is_init_328 true)
                                      (<= 0 2147483647)) (in_range6
                                      temp___expr_331)))

;; contains__post__dispatch_axiom
  (assert true)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__find_map__index_maps__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type
  (rec__find_map__index_maps__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___9__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (= (to_rep3
                            (rec__find_map__index_maps__cursor__node
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__find_map__index_maps__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-const find_map__index_maps__cursor__node__first__bit Int)

(declare-const find_map__index_maps__cursor__node__last__bit Int)

(declare-const find_map__index_maps__cursor__node__position Int)

;; find_map__index_maps__cursor__node__first__bit_axiom
  (assert (<= 0 find_map__index_maps__cursor__node__first__bit))

;; find_map__index_maps__cursor__node__last__bit_axiom
  (assert
  (< find_map__index_maps__cursor__node__first__bit find_map__index_maps__cursor__node__last__bit))

;; find_map__index_maps__cursor__node__position_axiom
  (assert (<= 0 find_map__index_maps__cursor__node__position))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep2)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep2 (cursor__content
                                                               a))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(declare-fun ole (us_rep1 us_rep1) Bool)

(declare-fun ole__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun keys_included_except (us_rep1 us_rep1 Int) Bool)

(declare-fun keys_included_except__function_guard (Bool us_rep1 us_rep1
  Int) Bool)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq5 (us_rep3 us_rep3) Bool)

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-fun user_eq11 (us_rep3 us_rep3) Bool)

(declare-const dummy11 us_rep3)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep3 (sequence__content
                                                                   a))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq6 (us_rep4 us_rep4) Bool)

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-fun user_eq12 (us_rep4 us_rep4) Bool)

(declare-const dummy12 us_rep4)

(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 us_rep4)))))
(define-fun map__ref___3__projection ((a map__ref3)) us_rep4 (map__content3
                                                             a))

(declare-datatypes ()
((key_type__ref1 (mk_key_type__ref1 (key_type__content1 us_rep2)))))
(define-fun key_type__ref___3__projection ((a key_type__ref1)) us_rep2
  (key_type__content1 a))

(declare-fun keys_included_except1 (us_rep4 us_rep4 us_rep2) Bool)

(declare-fun keys_included_except__function_guard1 (Bool us_rep4 us_rep4
  us_rep2) Bool)

(declare-fun mapping_preserved (us_rep3 us_rep3 us_rep4 us_rep4) Bool)

(declare-fun mapping_preserved__function_guard (Bool us_rep3 us_rep3 us_rep4
  us_rep4) Bool)

(declare-fun keys (us_rep) us_rep3)

(declare-fun keys__function_guard (us_rep3 us_rep) Bool)

(declare-fun positions (us_rep) us_rep4)

(declare-fun positions__function_guard (us_rep4 us_rep) Bool)

(declare-fun get1 (us_rep3 Int) Int)

(declare-fun get__function_guard1 (Int us_rep3 Int) Bool)

(declare-fun get2 (us_rep4 us_rep2) Int)

(declare-fun get__function_guard2 (Int us_rep4 us_rep2) Bool)

(define-fun key ((container us_rep)
  (position us_rep2)) Int (get1 (keys container)
                          (get2 (positions container) position)))

(declare-fun key__function_guard (Int us_rep us_rep2) Bool)

(declare-fun key1 (Int us_rep us_rep2) Int)

(declare-fun key__function_guard1 (Int Int us_rep us_rep2) Bool)

(declare-fun find (us_rep Int) us_rep2)

(declare-fun find__function_guard (us_rep2 us_rep Int) Bool)

(declare-fun find1 (Int us_rep Int) us_rep2)

(declare-fun find__function_guard1 (us_rep2 Int us_rep Int) Bool)

(declare-fun insert__2__specific_post (Int us_split_fields us_split_discrs
  Int Int us_split_fields) Bool)

(define-fun element__2 ((container us_rep)
  (key2 Int)) Int (get (model__ container) key2))

(declare-fun element__2__function_guard (Int us_rep Int) Bool)

(declare-fun element__21 (Int us_rep Int) Int)

(declare-fun element__2__function_guard1 (Int Int us_rep Int) Bool)

(define-fun dynamic_invariant4 ((temp___expr_337 Int)
  (temp___is_init_334 Bool) (temp___skip_constant_335 Bool)
  (temp___do_toplevel_336 Bool)) Bool (=>
                                      (or (= temp___is_init_334 true)
                                      (<= 1 100)) (in_range5
                                      temp___expr_337)))

;; element__2__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int) (key2 Int))
  (forall ((container us_rep))
  (! (=> (dynamic_invariant3 key2 true true true) (dynamic_invariant4
     (element__21 attr__tag container key2) true false true)) :pattern (
  (element__21 attr__tag container key2)) ))))

(define-fun in_range7 ((rec__find_map__index_maps__map__capacity1 Int)
  (rec__find_map__index_maps__map__modulus1 (_ BitVec 32))
  (a us_rep)) Bool (and
                   (= rec__find_map__index_maps__map__capacity1 (to_rep3
                                                                (rec__find_map__index_maps__map__capacity
                                                                (us_split_discrs1
                                                                a))))
                   (= rec__find_map__index_maps__map__modulus1 (to_rep2
                                                               (rec__find_map__index_maps__map__modulus
                                                               (us_split_discrs1
                                                               a))))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))

(declare-const find_map__index_maps__map__capacity__first__bit1 Int)

(declare-const find_map__index_maps__map__capacity__last__bit1 Int)

(declare-const find_map__index_maps__map__capacity__position1 Int)

;; find_map__index_maps__map__capacity__first__bit_axiom
  (assert (<= 0 find_map__index_maps__map__capacity__first__bit1))

;; find_map__index_maps__map__capacity__last__bit_axiom
  (assert
  (< find_map__index_maps__map__capacity__first__bit1 find_map__index_maps__map__capacity__last__bit1))

;; find_map__index_maps__map__capacity__position_axiom
  (assert (<= 0 find_map__index_maps__map__capacity__position1))

(declare-const find_map__index_maps__map__modulus__first__bit1 Int)

(declare-const find_map__index_maps__map__modulus__last__bit1 Int)

(declare-const find_map__index_maps__map__modulus__position1 Int)

;; find_map__index_maps__map__modulus__first__bit_axiom
  (assert (<= 0 find_map__index_maps__map__modulus__first__bit1))

;; find_map__index_maps__map__modulus__last__bit_axiom
  (assert
  (< find_map__index_maps__map__modulus__first__bit1 find_map__index_maps__map__modulus__last__bit1))

;; find_map__index_maps__map__modulus__position_axiom
  (assert (<= 0 find_map__index_maps__map__modulus__position1))

(declare-fun user_eq13 (us_rep us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes ()
((index_map__ref (mk_index_map__ref (index_map__content us_rep)))))
(define-fun index_map__ref___projection ((a index_map__ref)) us_rep (index_map__content
                                                                    a))

(declare-fun is_empty1 (us_rep) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep) Bool)

(declare-fun is_empty2 (Int us_rep) Bool)

(declare-fun is_empty__function_guard2 (Bool Int us_rep) Bool)

(declare-const r258s (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq13 a b) (oeq a b)) :pattern ((user_eq13 a b)) )))

(define-fun dynamic_invariant5 ((temp___expr_575 us_rep)
  (temp___is_init_572 Bool) (temp___skip_constant_573 Bool)
  (temp___do_toplevel_574 Bool)) Bool (=>
                                      (not (= temp___skip_constant_573 true))
                                      (in_range7 100 r258s temp___expr_575)))

(define-fun default_initial_assumption ((temp___expr_578 us_rep)
  (temp___skip_top_level_579 Bool)) Bool (and
                                         (and
                                         (= (to_rep3
                                            (rec__find_map__index_maps__map__capacity
                                            (us_split_discrs1
                                            temp___expr_578))) 100)
                                         (= (to_rep2
                                            (rec__find_map__index_maps__map__modulus
                                            (us_split_discrs1
                                            temp___expr_578))) r258s))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_579 true))
                                         (= (is_empty1 temp___expr_578) true))))

(declare-const a us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const result____split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq14 (integer integer) Bool)

(declare-const dummy14 integer)

(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content integer)))))
(define-fun t2b__ref___projection ((a1 t2b__ref)) integer (t2b__content a1))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant6 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_15)))

(define-fun dynamic_invariant7 ((temp___expr_320 Int)
  (temp___is_init_317 Bool) (temp___skip_constant_318 Bool)
  (temp___do_toplevel_319 Bool)) Bool (=>
                                      (or (= temp___is_init_317 true)
                                      (<= 1 100)) (in_range4
                                      temp___expr_320)))

(define-fun dynamic_invariant8 ((temp___expr_168 (_ BitVec 32))
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)) Bool true)

(declare-const no_element us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep3 0)))))

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(define-fun last2 ((container us_rep3)) Int (+ 0 (length3 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun oeq2 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length3 left) (length3 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last2 left)))
                                                                (= (get1 left
                                                                   n)
                                                                (get1 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a1 us_rep3) (b us_rep3))
  (! (= (user_eq11 a1 b) (oeq2 a1 b)) :pattern ((user_eq11 a1 b)) )))

(define-fun default_initial_assumption1 ((temp___expr_410 us_rep3)
  (temp___skip_top_level_411 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_411 true))
                                         (= (length3 temp___expr_410) 0)))

(declare-fun find2 (us_rep3 Int) Int)

(declare-fun find__function_guard2 (Int us_rep3 Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant3 key2 true true true)
     (let ((result (find2 container key2)))
     (and
     (=> (< 0 result)
     (and (<= result (length3 container))
     (= (equivalent_keys key2 (get1 container result)) true)))
     (dynamic_invariant2 result true false true)))) :pattern ((find2
                                                              container key2)) ))))

(declare-fun k_keys_included (us_rep3 us_rep3) Bool)

(declare-fun k_keys_included__function_guard (Bool us_rep3 us_rep3) Bool)

;; k_keys_included__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (k_keys_included left right) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length3 left)))
     (and (< 0 (find2 right (get1 left i)))
     (= (get1 right (find2 right (get1 left i))) (get1 left i)))))) :pattern (
  (k_keys_included left right)) )))

(declare-fun length4 (us_rep4) Int)

(declare-fun length__function_guard3 (Int us_rep4) Bool)

(declare-fun is_empty3 (us_rep4) Bool)

(declare-fun is_empty__function_guard3 (Bool us_rep4) Bool)

(define-fun default_initial_assumption2 ((temp___expr_430 us_rep4)
  (temp___skip_top_level_431 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_431 true))
                                         (and
                                         (= (is_empty3 temp___expr_430) true)
                                         (= (length4 temp___expr_430) 0))))

(declare-fun has_key1 (us_rep4 us_rep2) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep4 us_rep2) Bool)

(declare-fun keys_included (us_rep4 us_rep4) Bool)

(declare-fun keys_included__function_guard (Bool us_rep4 us_rep4) Bool)

;; mapping_preserved__post_axiom
  (assert
  (forall ((k_left us_rep3) (k_right us_rep3))
  (forall ((p_left us_rep4) (p_right us_rep4))
  (! (=> (= (mapping_preserved k_left k_right p_left p_right) true)
     (and
     (and (= (keys_included p_left p_right) true)
     (= (k_keys_included k_left k_right) true))
     (forall ((c us_rep2))
     (=> (= (has_key1 p_left c) true)
     (= (get1 k_left (get2 p_left c)) (get1 k_right (get2 p_right c))))))) :pattern (
  (mapping_preserved k_left k_right p_left p_right)) ))))

(declare-fun length5 (us_rep1) Int)

(declare-fun length__function_guard4 (Int us_rep1) Bool)

(define-fun default_initial_assumption3 ((temp___expr_379 us_rep1)
  (temp___skip_top_level_380 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_380 true))
                                         (and
                                         (= (is_empty temp___expr_379) true)
                                         (= (length5 temp___expr_379) 0))))

;; model____post_axiom
  (assert true)

(declare-sort key_type1 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq15 (key_type1 key_type1) Bool)

(declare-const dummy15 key_type1)

(declare-datatypes ()
((key_type__ref2 (mk_key_type__ref2 (key_type__content2 key_type1)))))
(define-fun key_type__ref___2__projection ((a1 key_type__ref2)) key_type1
  (key_type__content2 a1))

(declare-sort extended_index 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq16 (extended_index extended_index) Bool)

(declare-const dummy16 extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a1 extended_index__ref)) extended_index
  (extended_index__content a1))

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position
                                                             (last2
                                                             container)) true
                                                             false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

;; keys__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (keys container)))
     (and
     (and
     (and
     (and (= (length3 result) (length1 container))
     (forall ((temp___447 Int))
     (=>
     (and (in_range9 temp___447)
     (= (iter_has_element result temp___447) true))
     (= (has_key (model__ container) (get1 result temp___447)) true))))
     (forall ((key2 Int))
     (=> (and (in_range8 key2) (= (has_key (model__ container) key2) true))
     (and (< 0 (find2 result key2))
     (= (equivalent_keys (get1 result (find2 result key2)) key2) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length1 container)))
     (= (find2 result (get1 result i)) i))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length1 container)))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j (length1 container)))
     (=> (= (equivalent_keys (get1 result i) (get1 result j)) true) (= i j)))))))) :pattern (
  (keys container)) )))

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key1 result no_element) true))
     (forall ((i us_rep2))
     (=> (= (has_key1 result i) true)
     (and
     (and (<= 1 (get2 result i)) (<= (get2 result i) (length1 container)))
     (forall ((j us_rep2))
     (=> (= (has_key1 result j) true)
     (=> (= (get2 result i) (get2 result j)) (= (bool_eq4 i j) true))))))))) :pattern (
  (positions container)) )))

(declare-fun oeq3 (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep1 us_rep1) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq3 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty1 container) true) (= (length1 container) 0)) :pattern (
  (is_empty1 container)) )))

;; is_empty__post__dispatch_axiom
  (assert true)

(define-fun has_element ((container us_rep)
  (position us_rep2)) Bool (has_key1 (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep2) Bool)

(declare-fun has_element1 (Int us_rep us_rep2) Bool)

(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep2) Bool)

;; key__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep))
  (forall ((position us_rep2)) (! (dynamic_invariant3
  (key1 attr__tag container position) true false
  true) :pattern ((key1 attr__tag container position)) )))))

;; find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant3 key2 true true true)
     (let ((result (find container key2)))
     (ite (not (= (has_key (model__ container) key2) true))
     (= (bool_eq4 result no_element) true)
     (and
     (and (= (has_key1 (positions container) result) true)
     (= (get2 (positions container) result) (find2 (keys container) key2)))
     (= (equivalent_keys (key container result) key2) true))))) :pattern (
  (find container key2)) ))))

;; find__post__dispatch_axiom
  (assert true)

;; has_element__post__dispatch_axiom
  (assert true)

(define-fun dynamic_invariant9 ((temp___expr_366 Int)
  (temp___is_init_363 Bool) (temp___skip_constant_364 Bool)
  (temp___do_toplevel_365 Bool)) Bool (=>
                                      (or (= temp___is_init_363 true)
                                      (<= 0 2147483647)) (in_range8
                                      temp___expr_366)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant9 key2 true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((k Int))
     (and (and (in_range8 k) (= (has_key container k) true))
     (= (equivalent_keys k key2) true))) (= (has_key container key2) true)))) :pattern (
  (has_key container key2)) ))))

(declare-sort element_type1 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq17 (element_type1 element_type1) Bool)

(declare-const dummy17 element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a1 element_type__ref1)) element_type1
  (element_type__content1 a1))

(define-fun dynamic_invariant10 ((temp___expr_372 Int)
  (temp___is_init_369 Bool) (temp___skip_constant_370 Bool)
  (temp___do_toplevel_371 Bool)) Bool (=>
                                      (or (= temp___is_init_369 true)
                                      (<= 1 100)) (in_range10
                                      temp___expr_372)))

(declare-fun witness (us_rep1 Int) Int)

(declare-fun witness__function_guard (Int us_rep1 Int) Bool)

(declare-fun w_get (us_rep1 Int) Int)

(declare-fun w_get__function_guard (Int us_rep1 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant9 key2 true true true)
     (= (has_key container key2) true))
     (let ((result (get container key2)))
     (and
     (=> (= (of_int 1) true)
     (and (= result (w_get container (witness container key2)))
     (forall ((k Int))
     (=> (and (in_range8 k) (= (has_key container k) true))
     (= (= (equivalent_keys k key2) true)
     (= (witness container key2) (witness container k)))))))
     (dynamic_invariant10 result true false true)))) :pattern ((get container
                                                               key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep1)) (! (dynamic_invariant2 (length5 container)
  true false true) :pattern ((length5 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (ole left right) true)
     (forall ((key2 Int))
     (=> (and (in_range8 key2) (= (has_key left key2) true))
     (and (= (has_key right key2) true) (= (get right key2) (get left key2)))))) :pattern (
  (ole left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq3 left right) true)
     (and
     (forall ((key2 Int))
     (=> (and (in_range8 key2) (= (has_key left key2) true))
     (and (= (has_key right key2) true) (= (get right key2) (get left key2)))))
     (forall ((key2 Int))
     (=> (and (in_range8 key2) (= (has_key right key2) true))
     (= (has_key left key2) true))))) :pattern ((oeq3 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty container) true)
     (forall ((key2 Int))
     (not (and (in_range8 key2) (= (has_key container key2) true))))) :pattern (
  (is_empty container)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (forall ((new_key Int))
  (! (=> (dynamic_invariant9 new_key true true true)
     (= (= (keys_included_except left right new_key) true)
     (forall ((key2 Int))
     (=> (and (in_range8 key2) (= (has_key left key2) true))
     (=> (not (= (equivalent_keys key2 new_key) true))
     (= (has_key right key2) true)))))) :pattern ((keys_included_except left
                                                  right new_key)) ))))

(declare-fun has_witness (us_rep1 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep1 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant9 key2 true true true)
     (= (has_key container key2) true))
     (let ((result (witness container key2)))
     (and (= (has_witness container result) true) (dynamic_invariant2 result
     true false true)))) :pattern ((witness container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant2 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant10
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(define-fun dynamic_invariant11 ((temp___expr_403 Int)
  (temp___is_init_400 Bool) (temp___skip_constant_401 Bool)
  (temp___do_toplevel_402 Bool)) Bool (=>
                                      (or (= temp___is_init_400 true)
                                      (<= 0 2147483647)) (in_range9
                                      temp___expr_403)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length3 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant2 result true false
     true))) :pattern ((length3 container)) )))

(declare-sort element_type2 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq18 (element_type2 element_type2) Bool)

(declare-const dummy18 element_type2)

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___3__projection ((a1 element_type__ref2)) element_type2
  (element_type__content2 a1))

(define-fun dynamic_invariant12 ((temp___expr_397 Int)
  (temp___is_init_394 Bool) (temp___skip_constant_395 Bool)
  (temp___do_toplevel_396 Bool)) Bool (=>
                                      (or (= temp___is_init_394 true)
                                      (<= 0 2147483647)) (in_range11
                                      temp___expr_397)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant11 position true true true)
     (and (<= 1 position) (<= position (last2 container))))
     (dynamic_invariant12 (get1 container position) true false true)) :pattern (
  (get1 container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep2))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep2))
     (and (= (has_key1 container k) true) (= (bool_eq4 k key2) true)))
     (= (has_key1 container key2) true))) :pattern ((has_key1 container key2)) ))))

(declare-sort element_type3 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq19 (element_type3 element_type3) Bool)

(declare-const dummy19 element_type3)

(declare-datatypes ()
((element_type__ref3
 (mk_element_type__ref3 (element_type__content3 element_type3)))))
(define-fun element_type__ref___4__projection ((a1 element_type__ref3)) element_type3
  (element_type__content3 a1))

(define-fun dynamic_invariant13 ((temp___expr_423 Int)
  (temp___is_init_420 Bool) (temp___skip_constant_421 Bool)
  (temp___do_toplevel_422 Bool)) Bool (=>
                                      (or (= temp___is_init_420 true)
                                      (<= 1 2147483647)) (in_range12
                                      temp___expr_423)))

(declare-fun witness1 (us_rep4 us_rep2) Int)

(declare-fun witness__function_guard1 (Int us_rep4 us_rep2) Bool)

(declare-fun w_get1 (us_rep4 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep4 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep2))
  (! (=> (= (has_key1 container key2) true)
     (let ((result (get2 container key2)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get1 container (witness1 container key2)))
     (forall ((k us_rep2))
     (=> (= (has_key1 container k) true)
     (= (= (bool_eq4 k key2) true)
     (= (witness1 container key2) (witness1 container k)))))))
     (dynamic_invariant13 result true false true)))) :pattern ((get2
                                                               container
                                                               key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant2 (length4 container)
  true false true) :pattern ((length4 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty3 container) true)
     (forall ((key2 us_rep2)) (not (= (has_key1 container key2) true)))) :pattern (
  (is_empty3 container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (keys_included left right) true)
     (forall ((key2 us_rep2))
     (=> (= (has_key1 left key2) true) (= (has_key1 right key2) true)))) :pattern (
  (keys_included left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((new_key us_rep2))
  (! (= (= (keys_included_except1 left right new_key) true)
     (forall ((key2 us_rep2))
     (=> (= (has_key1 left key2) true)
     (=> (not (= (bool_eq4 key2 new_key) true))
     (= (has_key1 right key2) true))))) :pattern ((keys_included_except1 left
                                                  right new_key)) ))))

(declare-fun has_witness1 (us_rep4 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep4 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep2))
  (! (=> (= (has_key1 container key2) true)
     (let ((result (witness1 container key2)))
     (and (= (has_witness1 container result) true) (dynamic_invariant2 result
     true false true)))) :pattern ((witness1 container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant2 witness2 true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant13
     (w_get1 container witness2) true false true)) :pattern ((w_get1
                                                             container
                                                             witness2)) ))))

(declare-const result____split_fields us_main_type)

(declare-const k Int)

(declare-const o Bool)

(declare-const o1 Int)

(declare-const i Int)

(declare-const o2 Int)

(declare-const o3 natural)

(declare-const o4 Int)

(declare-const find_map__index_maps__clear__container__fields us_main_type)

(declare-const result us_main_type)

(declare-const result____split_fields1 us_main_type)

(declare-const result1 Int)

(declare-const k1 Int)

(declare-const result2 Bool)

(declare-const find_map__index_maps__insert__2__container__fields us_main_type)

(declare-const result3 us_main_type)

(declare-const result____split_fields2 us_main_type)

(declare-const result____split_fields3 us_main_type)

(declare-const k2 Int)

(declare-const result4 Bool)

(define-fun result____split_fields4 () us_split_fields (mk___split_fields
                                                       result____split_fields3))

(define-fun result____split_fields5 () us_split_fields (mk___split_fields
                                                       result____split_fields2))

(define-fun find_map__index_maps__insert__2__container__fields1 () us_split_fields
  (mk___split_fields find_map__index_maps__insert__2__container__fields))

(define-fun result____split_fields6 () us_split_fields (mk___split_fields
                                                       result____split_fields1))

(define-fun find_map__index_maps__clear__container__fields1 () us_split_fields
  (mk___split_fields find_map__index_maps__clear__container__fields))

;; H
  (assert (dynamic_invariant a true false true))

;; H
  (assert (default_initial_assumption
  (mk___rep result____split_discrs
  (mk___split_fields result____split_fields)) false))

;; H
  (assert
  (and
  (= 100 (to_rep3
         (rec__find_map__index_maps__map__capacity result____split_discrs)))
  (= r258s (to_rep2
           (rec__find_map__index_maps__map__modulus result____split_discrs)))))

;; H
  (assert
  (and
  (= (length1
     (mk___rep result____split_discrs
     find_map__index_maps__clear__container__fields1)) 0)
  (= (is_empty
     (model__
     (mk___rep result____split_discrs
     find_map__index_maps__clear__container__fields1))) true)))

;; H
  (assert
  (= (mk___split_fields__ref (mk___split_fields result)) (mk___split_fields__ref
                                                         (mk___split_fields
                                                         result____split_fields))))

;; H
  (assert
  (= result____split_fields6 find_map__index_maps__clear__container__fields1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref k)))

;; H
  (assert (= k1 (to_rep1 (first (rt a)))))

;; H
  (assert (<= (to_rep1 (first (rt a))) k1))

;; H
  (assert (<= k1 (to_rep1 (last (rt a)))))

;; H
  (assert
  (and
  (= o (has_key
       (model__ (mk___rep result____split_discrs result____split_fields6))
       (to_rep (select (elts a) k1))))
  (= (= o true)
  (= (has_key
     (model__ (mk___rep result____split_discrs result____split_fields6))
     (to_rep (select (elts a) k1))) true))))

;; H
  (assert (= result2 (ite (not (= o true)) true false)))

;; H
  (assert (=> (= result2 true) (and (= o1 k1) (in_range5 k1))))

;; H
  (assert
  (=> (= result2 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length1
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1)) (+ (length1
                                                              (mk___rep
                                                              result____split_discrs
                                                              result____split_fields6)) 1))
  (= (has_key
     (model__
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1))
     (to_rep (select (elts a) k1))) true))
  (= (key
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1)
     (find
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1)
     (to_rep (select (elts a) k1)))) (to_rep (select (elts a) k1))))
  (= (get
     (model__
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1))
     (to_rep (select (elts a) k1))) o1))
  (= (ole (model__ (mk___rep result____split_discrs result____split_fields6))
     (model__
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1))) true))
  (= (keys_included_except
     (model__
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1))
     (model__ (mk___rep result____split_discrs result____split_fields6))
     (to_rep (select (elts a) k1))) true))
  (= (mapping_preserved
     (keys (mk___rep result____split_discrs result____split_fields6))
     (keys
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1))
     (positions (mk___rep result____split_discrs result____split_fields6))
     (positions
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1))) true))
  (= (keys_included_except1
     (positions
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1))
     (positions (mk___rep result____split_discrs result____split_fields6))
     (find
     (mk___rep result____split_discrs
     find_map__index_maps__insert__2__container__fields1)
     (to_rep (select (elts a) k1)))) true))))

;; H
  (assert (=> (= result2 true) (= result3 result____split_fields1)))

;; H
  (assert
  (=> (= result2 true)
  (= result____split_fields5 find_map__index_maps__insert__2__container__fields1)))

;; H
  (assert
  (=> (not (= result2 true))
  (= result____split_fields5 result____split_fields6)))

;; H
  (assert
  (<= (length1 (mk___rep result____split_discrs result____split_fields4))
  k2))

;; H
  (assert
  (forall ((i1 Int))
  (=> (and (<= (to_rep1 (first (rt a))) i1) (<= i1 k2))
  (and
  (and
  (= (has_key
     (model__ (mk___rep result____split_discrs result____split_fields4))
     (to_rep (select (elts a) i1))) true)
  (and
  (<= (to_rep1 (first (rt a))) (get
                               (model__
                               (mk___rep result____split_discrs
                               result____split_fields4))
                               (to_rep (select (elts a) i1))))
  (<= (get
      (model__ (mk___rep result____split_discrs result____split_fields4))
      (to_rep (select (elts a) i1))) i1)))
  (= (to_rep
     (select (elts a) (get
                      (model__
                      (mk___rep result____split_discrs
                      result____split_fields4))
                      (to_rep (select (elts a) i1))))) (to_rep
                                                       (select (elts a) i1)))))))

;; H
  (assert
  (forall ((e Int))
  (=> (and (<= 0 e) (<= e 2147483647))
  (=>
  (= (has_key
     (model__ (mk___rep result____split_discrs result____split_fields4)) e) true)
  (and
  (and
  (<= (to_rep1 (first (rt a))) (get
                               (model__
                               (mk___rep result____split_discrs
                               result____split_fields4)) e))
  (<= (get
      (model__ (mk___rep result____split_discrs result____split_fields4)) e)
  k2))
  (= (equivalent_keys
     (to_rep
     (select (elts a) (get
                      (model__
                      (mk___rep result____split_discrs
                      result____split_fields4)) e)))
     e) true))))))

;; H
  (assert
  (and
  (=> (<= (to_rep1 (first (rt a))) (to_rep1 (last (rt a))))
  (dynamic_property1 (to_rep1 (first (rt a))) (to_rep1 (last (rt a)))
  k2))
  (and (<= (to_rep1 (first (rt a))) k2) (<= k2 (to_rep1 (last (rt a)))))))

;; H
  (assert (<= (to_rep1 (first (rt a))) i))

;; H
  (assert (<= i k2))

;; H
  (assert
  (and (<= (to_rep1 (first (rt a))) i) (<= i (to_rep1 (last (rt a))))))

;; H
  (assert (= o2 i))

;; H
  (assert (= o3 (select (elts a) o2)))

;; H
  (assert (= o4 (to_rep o3)))

;; H
  (assert
  (and
  (= result4 (has_key
             (model__
             (mk___rep result____split_discrs result____split_fields4))
             o4))
  (= (= result4 true)
  (= (has_key
     (model__ (mk___rep result____split_discrs result____split_fields4))
     o4) true))))

;; H
  (assert (= result4 true))

(assert
;; WP_parameter_def
 ;; File "find_map.ads", line 23, characters 0-0
  (not (<= (to_rep1 (first (rt a))) i)))
(check-sat)
(exit)
