;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))))))

(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun x () (Array Int Bool))

(declare-fun i () Int)

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun result1 () (Array Int Bool))

(declare-fun x1 () (Array Int Bool))

(declare-fun result2 () Int)

(declare-fun i2 () Int)

(declare-fun result3 () (Array Int Bool))

(declare-fun x2 () (Array Int Bool))

(declare-fun result4 () Int)

(declare-fun i3 () Int)

(declare-fun result5 () (Array Int Bool))

(declare-fun x3 () (Array Int Bool))

(declare-fun result6 () Int)

(declare-fun i4 () Int)

(declare-fun result7 () (Array Int Bool))

(declare-fun x4 () (Array Int Bool))

(declare-fun result8 () Int)

(declare-fun i5 () Int)

(declare-fun result9 () (Array Int Bool))

(declare-fun x5 () (Array Int Bool))

(declare-fun result10 () Int)

(declare-fun i6 () Int)

(declare-fun result11 () (Array Int Bool))

(declare-fun x6 () (Array Int Bool))

(declare-fun result12 () Int)

(declare-fun i7 () Int)

(declare-fun result13 () (Array Int Bool))

(declare-fun x7 () (Array Int Bool))

(declare-fun result14 () Int)

(declare-fun i8 () Int)

(declare-fun result15 () (Array Int Bool))

(declare-fun x8 () (Array Int Bool))

(declare-fun result16 () Int)

(declare-fun i9 () Int)

(declare-fun result17 () (Array Int Bool))

(declare-fun x9 () (Array Int Bool))

(declare-fun result18 () Int)

(declare-fun i10 () Int)

(declare-fun result19 () map__ref)

(declare-fun x10 () (Array Int Bool))

(declare-fun x11 () map__ref)

(declare-fun i11 () int__ref)

(declare-fun x12 () (Array Int Bool))

(declare-fun i12 () Int)

;; H
  (assert (= result i))

;; H
  (assert (= i1 1))

;; H
  (assert (= result1 x))

;; H
  (assert (= x1 (store x i1 (ite (not (= (select x i1) true)) true false))))

;; H
  (assert (= result2 i1))

;; H
  (assert (= i2 2))

;; H
  (assert (= result3 x1))

;; H
  (assert
  (= x2 (store x1 i2 (ite (not (= (select x1 i2) true)) true false))))

;; H
  (assert (= result4 i2))

;; H
  (assert (= i3 3))

;; H
  (assert (= result5 x2))

;; H
  (assert
  (= x3 (store x2 i3 (ite (not (= (select x2 i3) true)) true false))))

;; H
  (assert (= result6 i3))

;; H
  (assert (= i4 4))

;; H
  (assert (= result7 x3))

;; H
  (assert
  (= x4 (store x3 i4 (ite (not (= (select x3 i4) true)) true false))))

;; H
  (assert (= result8 i4))

;; H
  (assert (= i5 5))

;; H
  (assert (= result9 x4))

;; H
  (assert
  (= x5 (store x4 i5 (ite (not (= (select x4 i5) true)) true false))))

;; H
  (assert (= result10 i5))

;; H
  (assert (= i6 6))

;; H
  (assert (= result11 x5))

;; H
  (assert
  (= x6 (store x5 i6 (ite (not (= (select x5 i6) true)) true false))))

;; H
  (assert (= result12 i6))

;; H
  (assert (= i7 7))

;; H
  (assert (= result13 x6))

;; H
  (assert
  (= x7 (store x6 i7 (ite (not (= (select x6 i7) true)) true false))))

;; H
  (assert (= result14 i7))

;; H
  (assert (= i8 8))

;; H
  (assert (= result15 x7))

;; H
  (assert
  (= x8 (store x7 i8 (ite (not (= (select x7 i8) true)) true false))))

;; H
  (assert (= result16 i8))

;; H
  (assert (= i9 9))

;; H
  (assert (= result17 x8))

;; H
  (assert
  (= x9 (store x8 i9 (ite (not (= (select x8 i9) true)) true false))))

;; H
  (assert (= result18 i9))

;; H
  (assert (= i10 10))

;; H
  (assert (= result19 (mk_map__ref x9)))

;; H
  (assert
  (= x10 (store x9 i10 (ite (not (= (select x9 i10) true)) true false))))

;; H
  (assert (= i11 (mk_int__ref i10)))

;; H
  (assert (= x11 (mk_map__ref x10)))

;; H
  (assert (= i12 i10))

;; H
  (assert (= x12 x10))

(declare-fun i13 () Int)

;; H
  (assert (<= 1 i13))

;; H
  (assert (<= i13 10))

;; H
  (assert (= (select (map__content x11) i13) true))

(assert
;; WP_parameter_def
 ;; File "data.ads", line 6, characters 0-0
  (not (not (= (select x i13) true))))
(check-sat)
(exit)
