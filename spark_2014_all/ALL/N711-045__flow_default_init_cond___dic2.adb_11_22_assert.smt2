;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (t t) Bool)

(declare-fun dummy () t)

(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))

(declare-fun foo (Int) Bool)

(declare-fun foo__function_guard (Bool Int) Bool)

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range1 temp___expr_135)))

(define-fun default_initial_assumption ((temp___expr_136 Int)
  (temp___skip_top_level_137 Bool)) Bool (and (= temp___expr_136 0)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_137 true))
                                         (= (foo temp___expr_136) true))))

(declare-fun to_rep (t) Int)

(declare-fun of_rep (Int) t)

;; inversion_axiom
  (assert
  (forall ((x t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert (forall ((x t)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort u 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (u u) Bool)

(declare-fun dummy1 () u)

(declare-datatypes () ((u__ref (mk_u__ref (u__content u)))))
(define-fun u__ref___projection ((a u__ref)) u (u__content a))

(declare-fun bar (Int) Bool)

(declare-fun bar__function_guard (Bool Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range2 temp___expr_142)))

(define-fun default_initial_assumption1 ((temp___expr_143 Int)
  (temp___skip_top_level_144 Bool)) Bool (and (= temp___expr_143 1)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_144 true))
                                         (= (bar temp___expr_143) true))))

(declare-fun to_rep1 (u) Int)

(declare-fun of_rep1 (Int) u)

;; inversion_axiom
  (assert
  (forall ((x u)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x u)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__dic2__r__x t)(rec__dic2__r__y u)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) t (rec__dic2__r__x
                                                                  a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) u (rec__dic2__r__y
                                                                  a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep (rec__dic2__r__x (us_split_fields1 a)))
                        (to_rep (rec__dic2__r__x (us_split_fields1 b))))
                        (= (to_rep1 (rec__dic2__r__y (us_split_fields1 a)))
                        (to_rep1 (rec__dic2__r__y (us_split_fields1 b)))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dic2__r__x__first__bit () Int)

(declare-fun dic2__r__x__last__bit () Int)

(declare-fun dic2__r__x__position () Int)

;; dic2__r__x__first__bit_axiom
  (assert (<= 0 dic2__r__x__first__bit))

;; dic2__r__x__last__bit_axiom
  (assert (< dic2__r__x__first__bit dic2__r__x__last__bit))

;; dic2__r__x__position_axiom
  (assert (<= 0 dic2__r__x__position))

(declare-fun dic2__r__y__first__bit () Int)

(declare-fun dic2__r__y__last__bit () Int)

(declare-fun dic2__r__y__position () Int)

;; dic2__r__y__first__bit_axiom
  (assert (<= 0 dic2__r__y__first__bit))

;; dic2__r__y__last__bit_axiom
  (assert (< dic2__r__y__first__bit dic2__r__y__last__bit))

;; dic2__r__y__position_axiom
  (assert (<= 0 dic2__r__y__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((r__ref (mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))

(define-fun default_initial_assumption2 ((temp___expr_150 us_rep)
  (temp___skip_top_level_151 Bool)) Bool (and
                                         (let ((temp___152 (rec__dic2__r__x
                                                           (us_split_fields1
                                                           temp___expr_150))))
                                         (and (= (to_rep temp___152) 0)
                                         (= (foo (to_rep temp___152)) true)))
                                         (let ((temp___154 (rec__dic2__r__y
                                                           (us_split_fields1
                                                           temp___expr_150))))
                                         (and (= (to_rep1 temp___154) 1)
                                         (= (bar (to_rep1 temp___154)) true)))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

;; foo__post_axiom
  (assert true)

;; foo__def_axiom
  (assert
  (forall ((par1 Int))
  (! (= (= (foo par1) true) (= par1 0)) :pattern ((foo par1)) )))

;; bar__post_axiom
  (assert true)

;; bar__def_axiom
  (assert
  (forall ((par1 Int))
  (! (= (= (bar par1) true) (= par1 1)) :pattern ((bar par1)) )))

(declare-fun t_var () Int)

(declare-fun u_var () Int)

(declare-fun r_var__split_fields () t)

(declare-fun r_var__split_fields1 () u)

;; H
  (assert (default_initial_assumption t_var false))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 t_var)))

;; H
  (assert (default_initial_assumption1 u_var false))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range2 u_var)))

;; H
  (assert (default_initial_assumption2
  (mk___rep (mk___split_fields r_var__split_fields r_var__split_fields1))
  false))

(assert
;; WP_parameter_def
 ;; File "dic2.adb", line 4, characters 0-0
  (not (= t_var (to_rep r_var__split_fields))))
(check-sat)
(exit)
