;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__test_08__t2__n integer)))))
(define-fun us_split_fields_N__2__projection ((a us_split_fields)) integer
  (rec__test_08__t2__n a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__test_08__t2__n (us_split_fields1 a)))
                   (to_rep (rec__test_08__t2__n (us_split_fields1 b)))) true
                   false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const test_08__t2__n__first__bit Int)

(declare-const test_08__t2__n__last__bit Int)

(declare-const test_08__t2__n__position Int)

;; test_08__t2__n__first__bit_axiom
  (assert (<= 0 test_08__t2__n__first__bit))

;; test_08__t2__n__last__bit_axiom
  (assert (< test_08__t2__n__first__bit test_08__t2__n__last__bit))

;; test_08__t2__n__position_axiom
  (assert (<= 0 test_08__t2__n__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((t2__ref (mk_t2__ref (t2__content us_rep)))))
(define-fun t2__ref___projection ((a t2__ref)) us_rep (t2__content a))

(declare-fun is_positive_bad (Int) Bool)

(declare-fun is_positive_bad__function_guard (Bool Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_144 us_rep)
  (temp___is_init_141 Bool) (temp___skip_constant_142 Bool)
  (temp___do_toplevel_143 Bool)) Bool (or
                                      (= (is_positive_bad
                                         (to_rep
                                         (rec__test_08__t2__n
                                         (us_split_fields1 temp___expr_144)))) true)
                                      (= (to_rep
                                         (rec__test_08__t2__n
                                         (us_split_fields1 temp___expr_144))) (- 5))))

(define-fun default_initial_assumption ((temp___expr_146 us_rep)
  (temp___skip_top_level_147 Bool)) Bool (= (to_rep
                                            (rec__test_08__t2__n
                                            (us_split_fields1
                                            temp___expr_146))) 42))

(define-fun type_invariant ((temp___148 us_rep)) Bool (or
                                                      (= (is_positive_bad
                                                         (to_rep
                                                         (rec__test_08__t2__n
                                                         (us_split_fields1
                                                         temp___148)))) true)
                                                      (= (to_rep
                                                         (rec__test_08__t2__n
                                                         (us_split_fields1
                                                         temp___148))) (- 5))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; is_positive_bad__post_axiom
  (assert
  (forall ((n1 Int))
  (! (=> (dynamic_invariant n1 true true true)
     (= (= (is_positive_bad n1) true) (<= 1 n1))) :pattern ((is_positive_bad
                                                            n1)) )))

(declare-const x__split_fields integer)

(declare-const test_08_util__is_positive_bad__result Bool)

(declare-const result Bool)

(declare-const test_08_util__is_positive_bad__result1 Bool)

(declare-const test_08_util__is_positive_bad__result2 Bool)

(declare-const test_08_util__is_positive_bad__result3 Bool)

(declare-const test_08_util__is_positive_bad__result4 Bool)

(declare-const test_08_util__is_positive_bad__result5 Bool)

(declare-const result1 Bool)

;; H
  (assert (in_range1 n))

;; H
  (assert (= (to_rep x__split_fields) 42))

;; H
  (assert (dynamic_invariant1 (mk___rep (mk___split_fields x__split_fields))
  false false true))

;; H
  (assert
  (= test_08_util__is_positive_bad__result1 test_08_util__is_positive_bad__result2))

;; H
  (assert
  (= test_08_util__is_positive_bad__result3 test_08_util__is_positive_bad__result1))

;; H
  (assert (= result test_08_util__is_positive_bad__result))

;; H
  (assert
  (= test_08_util__is_positive_bad__result1 (ite (<= 1 n) true false)))

;; H
  (assert
  (= (mk_bool__ref test_08_util__is_positive_bad__result4) (mk_bool__ref
                                                           test_08_util__is_positive_bad__result2)))

;; H
  (assert
  (= test_08_util__is_positive_bad__result5 test_08_util__is_positive_bad__result3))

;; H
  (assert (= result1 test_08_util__is_positive_bad__result4))

;; H
  (assert (= test_08_util__is_positive_bad__result4 true))

(assert
;; WP_parameter_def
 ;; File "test_08_util.ads", line 6, characters 0-0
  (not (<= 1 n)))
(check-sat)
(exit)
