;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort state_t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (state_t state_t) Bool)

(declare-fun dummy () state_t)

(declare-datatypes ()
((state_t__ref (mk_state_t__ref (state_t__content state_t)))))
(define-fun state_t__ref___projection ((a state_t__ref)) state_t (state_t__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 3)) (in_range1 temp___expr_135)))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun cur_state (Int) Int)

(declare-fun cur_state__function_guard (Int Int) Bool)

;; cur_state__post_axiom
  (assert
  (forall ((ghost_example__state Int))
  (! (=> (dynamic_invariant ghost_example__state true true true)
     (dynamic_invariant (cur_state ghost_example__state) true false true)) :pattern (
  (cur_state ghost_example__state)) )))

;; cur_state__def_axiom
  (assert
  (forall ((ghost_example__state Int))
  (! (=> (dynamic_invariant ghost_example__state true true true)
     (= (cur_state ghost_example__state) ghost_example__state)) :pattern (
  (cur_state ghost_example__state)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun done__ () Bool)

(declare-fun state () Int)

(declare-fun successful () Bool)

(declare-fun state1 () Int)

(declare-fun result () Bool)

(declare-fun successful1 () Bool)

(declare-fun result1 () Bool)

(declare-fun done__1 () Bool)

(declare-fun result2 () Int)

(declare-fun state2 () Int)

(declare-fun result3 () Bool)

(declare-fun done__2 () Bool)

(declare-fun done__3 () Bool)

(declare-fun state3 () Int)

(declare-fun successful2 () Bool)

(declare-fun done__4 () Bool)

(declare-fun state4 () Int)

(declare-fun successful3 () Bool)

;; H
  (assert (in_range1 state))

;; H
  (assert (= (cur_state state) 0))

;; H
  (assert (= result successful))

;; H
  (assert (= successful1 (of_int 1)))

;; H
  (assert (=> (= successful1 true) (= result1 done__)))

;; H
  (assert (=> (= successful1 true) (= done__1 (of_int 1))))

;; H
  (assert (=> (= successful1 true) (= result2 state)))

;; H
  (assert (=> (= successful1 true) (= state2 1)))

;; H
  (assert (=> (not (= successful1 true)) (= result3 done__)))

;; H
  (assert (=> (not (= successful1 true)) (= done__2 (of_int 0))))

;; H
  (assert (=> (not (= successful1 true)) (= state2 state)))

;; H
  (assert (=> (not (= successful1 true)) (= done__1 done__2)))

;; H
  (assert (=> (not (= successful1 true)) (= state2 state1)))

;; H
  (assert (=> (not (= successful1 true)) (= done__1 done__2)))

;; H
  (assert (= successful2 successful1))

;; H
  (assert (= state2 state3))

;; H
  (assert (= done__1 done__3))

;; H
  (assert (= successful3 successful1))

;; H
  (assert (= state4 state2))

;; H
  (assert (= done__4 done__1))

(assert
;; WP_parameter_def
 ;; File "ghost_example.ads", line 18, characters 0-0
  (not (= (cur_state state3) (ite (= done__3 true) 1 0))))
(check-sat)
(exit)
