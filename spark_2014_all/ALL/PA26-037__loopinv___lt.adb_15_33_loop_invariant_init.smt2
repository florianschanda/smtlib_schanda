;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort bit 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (bit bit) Bool)

(declare-fun dummy1 () bit)

(declare-datatypes () ((bit__ref (mk_bit__ref (bit__content bit)))))
(define-fun bit__ref___projection ((a bit__ref)) bit (bit__content a))

(declare-fun to_rep (bit) Int)

(declare-fun of_rep (Int) bit)

;; inversion_axiom
  (assert
  (forall ((x bit)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x bit)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort n 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 9)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (n n) Bool)

(declare-fun dummy2 () n)

(declare-datatypes () ((n__ref (mk_n__ref (n__content n)))))
(define-fun n__ref___projection ((a n__ref)) n (n__content a))

(declare-sort sum 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (sum sum) Bool)

(declare-fun dummy3 () sum)

(declare-datatypes () ((sum__ref (mk_sum__ref (sum__content sum)))))
(define-fun sum__ref___projection ((a sum__ref)) sum (sum__content a))

(define-fun dynamic_invariant ((temp___expr_149 Int)
  (temp___is_init_146 Bool) (temp___skip_constant_147 Bool)
  (temp___do_toplevel_148 Bool)) Bool (=>
                                      (or (= temp___is_init_146 true)
                                      (<= 0 100)) (in_range4
                                      temp___expr_149)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int bit))))))
(declare-fun slide ((Array Int bit) Int Int) (Array Int bit))

;; slide_eq
  (assert
  (forall ((a (Array Int bit)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int bit)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int bit) Int Int (Array Int bit) Int
  Int) (Array Int bit))

;; concat_def
  (assert
  (forall ((a (Array Int bit)) (b (Array Int bit)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (bit Int) (Array Int bit))

;; singleton_def
  (assert
  (forall ((v bit))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int bit)) (a__first Int) (a__last Int)
  (b (Array Int bit)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int bit)) (b (Array Int bit)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int bit) Int Int (Array Int bit) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int bit)) (b (Array Int bit)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int bit)) (b (Array Int bit)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int bit)) (b (Array Int bit)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy4 () (Array Int bit))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int bit)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int bit)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int bit)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int bit))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int bit))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int bit))) (<= 0 (object__alignment a))))

(declare-fun user_eq4 ((Array Int bit) (Array Int bit)) Bool)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int bit)))))))
(declare-fun slide1 ((Array Int (Array Int bit)) Int
  Int) (Array Int (Array Int bit)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int bit))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int bit))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int bit)) Int Int
  (Array Int (Array Int bit)) Int Int) (Array Int (Array Int bit)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int bit))) (b (Array Int (Array Int bit))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int bit) Int) (Array Int (Array Int bit)))

;; singleton_def
  (assert
  (forall ((v (Array Int bit)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int (Array Int bit))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int bit))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq4 (select a temp___idx_133) 0 9
                              (select b (+ (- b__first a__first) temp___idx_133))
                              0 9) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int bit))) (b (Array Int (Array Int bit))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq4 (select a temp___idx_133) 0 9
     (select b (+ (- b__first a__first) temp___idx_133)) 0 9) true))))))))

(declare-fun x () (Array Int (Array Int bit)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_137 Int)
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool (=>
                                      (or (= temp___is_init_134 true)
                                      (<= 0 1)) (in_range2 temp___expr_137)))

(define-fun dynamic_invariant3 ((temp___expr_143 Int)
  (temp___is_init_140 Bool) (temp___skip_constant_141 Bool)
  (temp___do_toplevel_142 Bool)) Bool (=>
                                      (or (= temp___is_init_140 true)
                                      (<= 0 9)) (in_range3 temp___expr_143)))

(declare-fun r () Int)

(declare-fun i () Int)

(declare-fun j () Int)

(declare-fun temp___179 () Int)

(declare-fun temp___178 () Int)

(declare-fun o () Int)

(declare-fun result () Int)

(declare-fun r1 () Int)

(declare-fun result1 () Int)

(declare-fun i1 () Int)

(declare-fun result2 () Int)

(declare-fun j1 () Int)

(declare-fun result3 () Int)

(declare-fun r2 () Int)

(declare-fun r3 () Int)

(declare-fun j2 () Int)

(declare-fun r4 () Int)

(declare-fun j3 () Int)

(declare-fun r5 () Int)

(declare-fun j4 () Int)

(declare-fun r6 () Int)

(declare-fun j5 () Int)

(declare-fun r7 () Int)

(declare-fun j6 () Int)

;; H
  (assert (=> (<= 0 100) (in_range4 r)))

;; H
  (assert (= result r))

;; H
  (assert (= r1 0))

;; H
  (assert (= result1 i))

;; H
  (assert (= i1 0))

;; H
  (assert (<= 0 i1))

;; H
  (assert (<= i1 9))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref j)))

;; H
  (assert (= j1 0))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= temp___179 j1)))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= temp___178 r1)))

;; H
  (assert
  (=> (and (<= 0 j1) (<= j1 9))
  (and (= o (+ r1 (to_rep (select (select x i1) j1)))) (in_range4
  (+ r1 (to_rep (select (select x i1) j1)))))))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= r1 result3)))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= r2 o)))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (<= r3 (+ (+ (* i1 10) j2) 1))))

;; H
  (assert
  (=> (and (<= 0 j1) (<= j1 9))
  (and (and (=> (<= 0 100) (in_range4 r3)) (=> (<= 0 9) (in_range3 j2)))
  (and (<= 0 j2) (<= j2 9)))))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= j2 9)))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= j2 j3)))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= r3 r4)))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= j4 j2)))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= r5 r3)))

;; H
  (assert
  (=> (and (<= 0 j1) (<= j1 9)) (= (mk_int__ref j5) (mk_int__ref j3))))

;; H
  (assert
  (=> (and (<= 0 j1) (<= j1 9)) (= (mk_int__ref r6) (mk_int__ref r4))))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= j6 j4)))

;; H
  (assert (=> (and (<= 0 j1) (<= j1 9)) (= r7 r5)))

;; H
  (assert (=> (not (and (<= 0 j1) (<= j1 9))) (= j1 j5)))

;; H
  (assert (=> (not (and (<= 0 j1) (<= j1 9))) (= r1 r6)))

;; H
  (assert (=> (not (and (<= 0 j1) (<= j1 9))) (= j6 j1)))

;; H
  (assert (=> (not (and (<= 0 j1) (<= j1 9))) (= r7 r1)))

(assert
;; WP_parameter_def
 ;; File "lt.ads", line 7, characters 0-0
  (not (<= r6 (* (+ i1 1) 10))))
(check-sat)
