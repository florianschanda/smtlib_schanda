;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort tcount_typeB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy1 () tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-sort index_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (index_type index_type) Bool)

(declare-fun dummy2 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(declare-sort extended_index_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (extended_index_type extended_index_type) Bool)

(declare-fun dummy3 () extended_index_type)

(declare-datatypes ()
((extended_index_type__ref
 (mk_extended_index_type__ref
 (extended_index_type__content extended_index_type)))))
(define-fun extended_index_type__ref___projection ((a extended_index_type__ref)) extended_index_type 
  (extended_index_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_156 Int)
  (temp___is_init_153 Bool) (temp___skip_constant_154 Bool)
  (temp___do_toplevel_155 Bool)) Bool (=>
                                      (or (= temp___is_init_153 true)
                                      (<= 0 100)) (in_range4
                                      temp___expr_156)))

(declare-fun to_rep1 (extended_index_type) Int)

(declare-fun of_rep1 (Int) extended_index_type)

;; inversion_axiom
  (assert
  (forall ((x extended_index_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x extended_index_type)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort direction 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (direction direction) Bool)

(declare-fun dummy4 () direction)

(declare-datatypes ()
((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction 
  (direction__content a))

(define-fun dynamic_invariant2 ((temp___expr_168 Int)
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)) Bool (=>
                                      (or (= temp___is_init_165 true)
                                      (<= 0 1)) (in_range5 temp___expr_168)))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq5 (us_rep us_rep) Bool)

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy5 () us_rep)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content
                                                                  a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort count_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (count_type count_type) Bool)

(declare-fun dummy6 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_144 Int)
  (temp___is_init_141 Bool) (temp___skip_constant_142 Bool)
  (temp___do_toplevel_143 Bool)) Bool (=>
                                      (or (= temp___is_init_141 true)
                                      (<= 0 2147483647)) (in_range6
                                      temp___expr_144)))

(define-fun last ((container us_rep)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-fun get (us_rep Int) Int)

(declare-fun get__function_guard (Int us_rep Int) Bool)

(define-fun oeq ((left us_rep)
  (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq5 a b) (oeq a b)) :pattern ((user_eq5 a b)) )))

(define-fun default_initial_assumption ((temp___expr_199 us_rep)
  (temp___skip_top_level_200 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_200 true))
                                         (= (length temp___expr_199) 0)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant3 result true false
     true))) :pattern ((length container)) )))

(declare-sort element_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (element_type element_type) Bool)

(declare-fun dummy7 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant4 ((temp___expr_186 Int)
  (temp___is_init_183 Bool) (temp___skip_constant_184 Bool)
  (temp___do_toplevel_185 Bool)) Bool (=>
                                      (or (= temp___is_init_183 true)
                                      (<= 0 1)) (in_range7 temp___expr_186)))

(declare-sort extended_index 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (extended_index extended_index) Bool)

(declare-fun dummy8 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant5 ((temp___expr_192 Int)
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)) Bool (=>
                                      (or (= temp___is_init_189 true)
                                      (<= 0 2147483647)) (in_range8
                                      temp___expr_192)))

;; get__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant5 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant4 (get container position) true false true)) :pattern (
  (get container position)) ))))

(define-fun olt ((left us_rep)
  (right us_rep)) Bool (and (< (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 1 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (get left
                                                                  n) 
                                                                  (get right
                                                                  n))))
                                                             true false)))

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tree_model__path_type__a us_rep)(rec__tree_model__path_type__k Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) us_rep 
  (rec__tree_model__path_type__a a))

(define-fun us_split_fields_K__projection ((a us_split_fields)) Bool 
  (rec__tree_model__path_type__k a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq9 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (user_eq5
                            (rec__tree_model__path_type__a
                            (us_split_fields1 a))
                            (rec__tree_model__path_type__a
                            (us_split_fields1 b))) true)
                         (= (rec__tree_model__path_type__k
                            (us_split_fields1 a)) (rec__tree_model__path_type__k
                                                  (us_split_fields1 b))))
                    true false))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun tree_model__path_type__a__first__bit () Int)

(declare-fun tree_model__path_type__a__last__bit () Int)

(declare-fun tree_model__path_type__a__position () Int)

;; tree_model__path_type__a__first__bit_axiom
  (assert (<= 0 tree_model__path_type__a__first__bit))

;; tree_model__path_type__a__last__bit_axiom
  (assert
  (< tree_model__path_type__a__first__bit tree_model__path_type__a__last__bit))

;; tree_model__path_type__a__position_axiom
  (assert (<= 0 tree_model__path_type__a__position))

(declare-fun tree_model__path_type__k__first__bit () Int)

(declare-fun tree_model__path_type__k__last__bit () Int)

(declare-fun tree_model__path_type__k__position () Int)

;; tree_model__path_type__k__first__bit_axiom
  (assert (<= 0 tree_model__path_type__k__first__bit))

;; tree_model__path_type__k__last__bit_axiom
  (assert
  (< tree_model__path_type__k__first__bit tree_model__path_type__k__last__bit))

;; tree_model__path_type__k__position_axiom
  (assert (<= 0 tree_model__path_type__k__position))

(declare-fun dummy9 () us_rep1)

(declare-datatypes ()
((path_type__ref (mk_path_type__ref (path_type__content us_rep1)))))
(define-fun path_type__ref___projection ((a path_type__ref)) us_rep1 
  (path_type__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq10 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq9 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq10 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq9 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq11 (us_rep2 us_rep2) Bool)

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun dummy10 () us_rep2)

(declare-datatypes () ((set__ref (mk_set__ref (set__content us_rep2)))))
(define-fun set__ref___projection ((a set__ref)) us_rep2 (set__content a))

(declare-fun contains (us_rep2 Int) Bool)

(declare-fun contains__function_guard (Bool us_rep2 Int) Bool)

(declare-sort element_type1 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (element_type1 element_type1) Bool)

(declare-fun dummy11 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant6 ((temp___expr_232 Int)
  (temp___is_init_229 Bool) (temp___skip_constant_230 Bool)
  (temp___do_toplevel_231 Bool)) Bool (=>
                                      (or (= temp___is_init_229 true)
                                      (<= 0 2147483647)) (in_range9
                                      temp___expr_232)))

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun default_initial_assumption1 ((temp___expr_239 us_rep2)
  (temp___skip_top_level_240 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_240 true))
                                         (= (is_empty temp___expr_239) true)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((item Int))
  (! (=> (dynamic_invariant6 item true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((e Int))
     (and (and (in_range9 e) (= (contains container e) true)) (= e item)))
     (= (contains container item) true)))) :pattern ((contains container
                                                     item)) ))))

(declare-fun oeq1 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

(declare-fun ole (us_rep2 us_rep2) Bool)

(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq1 left right) true)
     (and (= (ole left right) true) (= (ole right left) true))) :pattern (
  (oeq1 left right)) )))

(declare-datatypes ()
((value_set__ref (mk_value_set__ref (value_set__content us_rep2)))))
(define-fun value_set__ref___projection ((a value_set__ref)) us_rep2 
  (value_set__content a))

(declare-fun is_add__2 (us_rep2 Int us_rep2) Bool)

(declare-fun is_add__2__function_guard (Bool us_rep2 Int us_rep2) Bool)

(declare-fun included_except (us_rep2 us_rep2 Int) Bool)

(declare-fun included_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)

(define-fun default_initial_assumption2 ((temp___expr_252 us_rep2)
  (temp___skip_top_level_253 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_253 true))
                                         (= (is_empty temp___expr_252) true)))

;; is_add__2__post_axiom
  (assert true)

;; is_add__2__def_axiom
  (assert
  (forall ((s1 us_rep2) (s2 us_rep2))
  (forall ((e Int))
  (! (= (= (is_add__2 s1 e s2) true)
     (and
     (and (and (not (= (contains s1 e) true)) (= (contains s2 e) true))
     (= (ole s1 s2) true)) (= (included_except s2 s1 e) true))) :pattern (
  (is_add__2 s1 e s2)) ))))

(declare-sort position_type 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq12 (position_type position_type) Bool)

(declare-fun dummy12 () position_type)

(declare-datatypes ()
((position_type__ref
 (mk_position_type__ref (position_type__content position_type)))))
(define-fun position_type__ref___projection ((a position_type__ref)) position_type 
  (position_type__content a))

(declare-fun to_rep2 (position_type) Int)

(declare-fun of_rep2 (Int) position_type)

;; inversion_axiom
  (assert
  (forall ((x position_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x position_type)) (! (in_range10
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                               (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__binary_trees__cell__left extended_index_type)(rec__binary_trees__cell__right extended_index_type)(rec__binary_trees__cell__parent extended_index_type)(rec__binary_trees__cell__position position_type)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__left a))

(define-fun us_split_fields_Right__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__right a))

(define-fun us_split_fields_Parent__projection ((a us_split_fields2)) extended_index_type 
  (rec__binary_trees__cell__parent a))

(define-fun us_split_fields_Position__projection ((a us_split_fields2)) position_type 
  (rec__binary_trees__cell__position a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep3 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep3)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq14 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep1
                            (rec__binary_trees__cell__left
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__left
                                                   (us_split_fields3 b))))
                         (= (to_rep1
                            (rec__binary_trees__cell__right
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__right
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__binary_trees__cell__parent
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__binary_trees__cell__parent
                                                   (us_split_fields3 b)))))
                         (= (to_rep2
                            (rec__binary_trees__cell__position
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__binary_trees__cell__position
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq13 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun binary_trees__cell__left__first__bit () Int)

(declare-fun binary_trees__cell__left__last__bit () Int)

(declare-fun binary_trees__cell__left__position () Int)

;; binary_trees__cell__left__first__bit_axiom
  (assert (<= 0 binary_trees__cell__left__first__bit))

;; binary_trees__cell__left__last__bit_axiom
  (assert
  (< binary_trees__cell__left__first__bit binary_trees__cell__left__last__bit))

;; binary_trees__cell__left__position_axiom
  (assert (<= 0 binary_trees__cell__left__position))

(declare-fun binary_trees__cell__right__first__bit () Int)

(declare-fun binary_trees__cell__right__last__bit () Int)

(declare-fun binary_trees__cell__right__position () Int)

;; binary_trees__cell__right__first__bit_axiom
  (assert (<= 0 binary_trees__cell__right__first__bit))

;; binary_trees__cell__right__last__bit_axiom
  (assert
  (< binary_trees__cell__right__first__bit binary_trees__cell__right__last__bit))

;; binary_trees__cell__right__position_axiom
  (assert (<= 0 binary_trees__cell__right__position))

(declare-fun binary_trees__cell__parent__first__bit () Int)

(declare-fun binary_trees__cell__parent__last__bit () Int)

(declare-fun binary_trees__cell__parent__position () Int)

;; binary_trees__cell__parent__first__bit_axiom
  (assert (<= 0 binary_trees__cell__parent__first__bit))

;; binary_trees__cell__parent__last__bit_axiom
  (assert
  (< binary_trees__cell__parent__first__bit binary_trees__cell__parent__last__bit))

;; binary_trees__cell__parent__position_axiom
  (assert (<= 0 binary_trees__cell__parent__position))

(declare-fun binary_trees__cell__position__first__bit () Int)

(declare-fun binary_trees__cell__position__last__bit () Int)

(declare-fun binary_trees__cell__position__position () Int)

;; binary_trees__cell__position__first__bit_axiom
  (assert (<= 0 binary_trees__cell__position__first__bit))

;; binary_trees__cell__position__last__bit_axiom
  (assert
  (< binary_trees__cell__position__first__bit binary_trees__cell__position__last__bit))

;; binary_trees__cell__position__position_axiom
  (assert (<= 0 binary_trees__cell__position__position))

(declare-fun dummy13 () us_rep3)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content us_rep3)))))
(define-fun cell__ref___projection ((a cell__ref)) us_rep3 (cell__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int
  Int) (Array Int us_rep3))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep3 Int) (Array Int us_rep3))

;; singleton_def
  (assert
  (forall ((v us_rep3))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq15 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq14 (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq15 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq14 (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-fun dummy14 () (Array Int us_rep3))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int us_rep3)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep3)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int us_rep3)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep3))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep3))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq14 ((Array Int us_rep3) (Array Int us_rep3)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__binary_trees__forest__s extended_index_type)(rec__binary_trees__forest__c (Array Int us_rep3))))))
(define-fun us_split_fields_S__projection ((a us_split_fields4)) extended_index_type 
  (rec__binary_trees__forest__s a))

(define-fun us_split_fields_C__projection ((a us_split_fields4)) (Array Int us_rep3) 
  (rec__binary_trees__forest__c a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep4 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep4)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq16 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep1
                            (rec__binary_trees__forest__s
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__binary_trees__forest__s
                                                   (us_split_fields5 b))))
                         (= (bool_eq15
                            (rec__binary_trees__forest__c
                            (us_split_fields5 a)) 1 100
                            (rec__binary_trees__forest__c
                            (us_split_fields5 b)) 1 100) true))
                    true false))

(declare-fun user_eq15 (us_rep4 us_rep4) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-fun binary_trees__forest__s__first__bit () Int)

(declare-fun binary_trees__forest__s__last__bit () Int)

(declare-fun binary_trees__forest__s__position () Int)

;; binary_trees__forest__s__first__bit_axiom
  (assert (<= 0 binary_trees__forest__s__first__bit))

;; binary_trees__forest__s__last__bit_axiom
  (assert
  (< binary_trees__forest__s__first__bit binary_trees__forest__s__last__bit))

;; binary_trees__forest__s__position_axiom
  (assert (<= 0 binary_trees__forest__s__position))

(declare-fun binary_trees__forest__c__first__bit () Int)

(declare-fun binary_trees__forest__c__last__bit () Int)

(declare-fun binary_trees__forest__c__position () Int)

;; binary_trees__forest__c__first__bit_axiom
  (assert (<= 0 binary_trees__forest__c__first__bit))

;; binary_trees__forest__c__last__bit_axiom
  (assert
  (< binary_trees__forest__c__first__bit binary_trees__forest__c__last__bit))

;; binary_trees__forest__c__position_axiom
  (assert (<= 0 binary_trees__forest__c__position))

(declare-fun dummy15 () us_rep4)

(declare-datatypes ()
((forest__ref (mk_forest__ref (forest__content us_rep4)))))
(define-fun forest__ref___projection ((a forest__ref)) us_rep4 (forest__content
                                                               a))

(define-fun dynamic_invariant7 ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 1 100)) (in_range3
                                      temp___expr_150)))

(declare-fun size (us_rep4) Int)

(declare-fun size__function_guard (Int us_rep4) Bool)

(declare-fun tree_structure (us_rep4) Bool)

(declare-fun tree_structure__function_guard (Bool us_rep4) Bool)

(define-fun dynamic_invariant8 ((temp___expr_273 us_rep4)
  (temp___is_init_270 Bool) (temp___skip_constant_271 Bool)
  (temp___do_toplevel_272 Bool)) Bool (= (tree_structure temp___expr_273) true))

(define-fun default_initial_assumption3 ((temp___expr_276 us_rep4)
  (temp___skip_top_level_277 Bool)) Bool (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            temp___expr_276))) 0)
                                         (forall ((temp___279 Int))
                                         (=>
                                         (and (<= 1 temp___279)
                                         (<= temp___279 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_276)) temp___279)))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_276)) temp___279)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_276)) temp___279)))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    temp___expr_276)) temp___279)))) 2)))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_277 true))
                                         (= (size temp___expr_276) 0))))

(define-fun type_invariant ((temp___282 us_rep4)) Bool (= (tree_structure
                                                          temp___282) true))

(declare-fun parent (us_rep4 Int) Int)

(declare-fun parent__function_guard (Int us_rep4 Int) Bool)

(declare-fun position (us_rep4 Int) Int)

(declare-fun position__function_guard (Int us_rep4 Int) Bool)

(declare-fun peek (us_rep4 Int Int) Int)

(declare-fun peek__function_guard (Int us_rep4 Int Int) Bool)

;; peek__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i Int) (d Int))
  (! (=>
     (and
     (and (dynamic_invariant8 f true true true) (dynamic_invariant7 i true
     true true)) (dynamic_invariant2 d true true true))
     (let ((result (peek f i d)))
     (and
     (and
     (ite (not (= result 0))
     (and (= (position f result) d) (= (parent f result) i))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=> (= (parent f j) i) (not (= (position f j) d))))))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=> (and (= (parent f j) i) (= (position f j) d)) (= result j)))))
     (dynamic_invariant1 result true false true)))) :pattern ((peek f i d)) ))))

(declare-fun model__ (us_rep4 Int) (Array Int us_rep1))

(declare-fun model____function_guard ((Array Int us_rep1) us_rep4 Int) Bool)

(define-fun dynamic_invariant9 ((temp___expr_216 (Array Int us_rep1))
  (temp___is_init_213 Bool) (temp___skip_constant_214 Bool)
  (temp___do_toplevel_215 Bool)) Bool (forall ((temp___217 Int))
                                      (=>
                                      (and (<= 1 temp___217)
                                      (<= temp___217 100))
                                      (=> (= temp___is_init_213 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1
                                         (select temp___expr_216 temp___217)))) 100)))))

(define-fun default_initial_assumption4 ((temp___expr_219 (Array Int us_rep1))
  (temp___skip_top_level_220 Bool)) Bool (forall ((temp___221 Int))
                                         (=>
                                         (and (<= 1 temp___221)
                                         (<= temp___221 100))
                                         (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            (select temp___expr_219 temp___221)))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            (select temp___expr_219 temp___221))) 
                                         (of_int 0))))))

(declare-fun is_add (us_rep Int us_rep) Bool)

(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)

(declare-fun valid_root (us_rep4 Int) Bool)

(declare-fun valid_root__function_guard (Bool us_rep4 Int) Bool)

;; model____post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((root Int))
  (! (=>
     (and
     (and (dynamic_invariant8 f true true true) (dynamic_invariant7 root true
     true true)) (= (valid_root f root) true))
     (let ((result (model__ f root)))
     (and
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1 (select result root))) true)
     (and
     (= (length
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result root)))) 0)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=> (not (= i root))
     (ite (and (not (= (parent f i) 0))
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result (parent f i)))) true))
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (not
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true))))))
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (ite (and
          (= (rec__tree_model__path_type__k
             (us_split_fields1 (select result i))) true)
          (not (= i root)))
     (= (is_add
        (rec__tree_model__path_type__a
        (us_split_fields1 (select result (parent f i)))) (position f i)
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) true)
     (= (length
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))) 0))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result i))) true)
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=>
     (and
     (= (rec__tree_model__path_type__k (us_split_fields1 (select result j))) true)
     (= (oeq
        (rec__tree_model__path_type__a (us_split_fields1 (select result i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select result j)))) true))
     (= j i))))))))))) (dynamic_invariant9 result true false true)))) :pattern (
  (model__ f root)) ))))

(declare-fun oeq2 ((Array Int us_rep1) (Array Int us_rep1)) Bool)

(declare-fun oeq__function_guard2 (Bool (Array Int us_rep1)
  (Array Int us_rep1)) Bool)

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int natural))))))
(declare-fun slide2 ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq17 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep (select a temp___idx_134)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq17 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep (select a temp___idx_134)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq17 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq17 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq17 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy16 () (Array Int natural))

(declare-fun value__size6 () Int)

(declare-fun object__size6 ((Array Int natural)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int natural)) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment6 a))))

(declare-fun user_eq16 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__search_trees__search_tree__root extended_index_type)(rec__search_trees__search_tree__struct us_rep4)(rec__search_trees__search_tree__values (Array Int natural))))))
(define-fun us_split_fields_Root__projection ((a us_split_fields6)) extended_index_type 
  (rec__search_trees__search_tree__root a))

(define-fun us_split_fields_Struct__projection ((a us_split_fields6)) us_rep4 
  (rec__search_trees__search_tree__struct a))

(define-fun us_split_fields_Values__projection ((a us_split_fields6)) (Array Int natural) 
  (rec__search_trees__search_tree__values a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep5 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_4__projection ((a us_rep5)) us_split_fields6 (us_split_fields7
                                                                a))

(define-fun bool_eq18 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__search_trees__search_tree__root
                            (us_split_fields7 a))) (to_rep1
                                                   (rec__search_trees__search_tree__root
                                                   (us_split_fields7 b))))
                         (= (bool_eq16
                            (rec__search_trees__search_tree__struct
                            (us_split_fields7 a))
                            (rec__search_trees__search_tree__struct
                            (us_split_fields7 b))) true))
                         (= (bool_eq17
                            (rec__search_trees__search_tree__values
                            (us_split_fields7 a)) 1 100
                            (rec__search_trees__search_tree__values
                            (us_split_fields7 b)) 1 100) true))
                    true false))

(declare-fun user_eq17 (us_rep5 us_rep5) Bool)

(declare-fun value__size7 () Int)

(declare-fun object__size7 (us_rep5) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))

(declare-fun search_trees__search_tree__root__first__bit () Int)

(declare-fun search_trees__search_tree__root__last__bit () Int)

(declare-fun search_trees__search_tree__root__position () Int)

;; search_trees__search_tree__root__first__bit_axiom
  (assert (<= 0 search_trees__search_tree__root__first__bit))

;; search_trees__search_tree__root__last__bit_axiom
  (assert
  (< search_trees__search_tree__root__first__bit search_trees__search_tree__root__last__bit))

;; search_trees__search_tree__root__position_axiom
  (assert (<= 0 search_trees__search_tree__root__position))

(declare-fun search_trees__search_tree__struct__first__bit () Int)

(declare-fun search_trees__search_tree__struct__last__bit () Int)

(declare-fun search_trees__search_tree__struct__position () Int)

;; search_trees__search_tree__struct__first__bit_axiom
  (assert (<= 0 search_trees__search_tree__struct__first__bit))

;; search_trees__search_tree__struct__last__bit_axiom
  (assert
  (< search_trees__search_tree__struct__first__bit search_trees__search_tree__struct__last__bit))

;; search_trees__search_tree__struct__position_axiom
  (assert (<= 0 search_trees__search_tree__struct__position))

(declare-fun search_trees__search_tree__values__first__bit () Int)

(declare-fun search_trees__search_tree__values__last__bit () Int)

(declare-fun search_trees__search_tree__values__position () Int)

;; search_trees__search_tree__values__first__bit_axiom
  (assert (<= 0 search_trees__search_tree__values__first__bit))

;; search_trees__search_tree__values__last__bit_axiom
  (assert
  (< search_trees__search_tree__values__first__bit search_trees__search_tree__values__last__bit))

;; search_trees__search_tree__values__position_axiom
  (assert (<= 0 search_trees__search_tree__values__position))

(declare-fun dummy17 () us_rep5)

(declare-datatypes ()
((search_tree__ref (mk_search_tree__ref (search_tree__content us_rep5)))))
(define-fun search_tree__ref___projection ((a search_tree__ref)) us_rep5 
  (search_tree__content a))

(declare-fun size1 (us_rep5) Int)

(declare-fun size__function_guard1 (Int us_rep5) Bool)

(declare-fun ordered_leafs (us_rep4 Int (Array Int natural)) Bool)

(declare-fun ordered_leafs__function_guard (Bool us_rep4 Int
  (Array Int natural)) Bool)

(declare-fun temp___387 (Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___389 Int))
  (forall ((temp___390 Int))
  (= (select (temp___387 temp___389) temp___390) (of_rep temp___389)))))

(define-fun dynamic_invariant10 ((temp___expr_376 us_rep5)
  (temp___is_init_373 Bool) (temp___skip_constant_374 Bool)
  (temp___do_toplevel_375 Bool)) Bool (= (tree_structure
                                         (rec__search_trees__search_tree__struct
                                         (us_split_fields7 temp___expr_376))) true))

(define-fun default_initial_assumption5 ((temp___expr_380 us_rep5)
  (temp___skip_top_level_381 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__search_trees__search_tree__root
                                            (us_split_fields7
                                            temp___expr_380))) 0)
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__forest__s
                                            (us_split_fields5
                                            (rec__search_trees__search_tree__struct
                                            (us_split_fields7
                                            temp___expr_380))))) 0)
                                         (forall ((temp___384 Int))
                                         (=>
                                         (and (<= 1 temp___384)
                                         (<= temp___384 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_380)))) temp___384)))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_380)))) temp___384)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_380)))) temp___384)))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select (rec__binary_trees__forest__c
                                                    (us_split_fields5
                                                    (rec__search_trees__search_tree__struct
                                                    (us_split_fields7
                                                    temp___expr_380)))) temp___384)))) 2)))))
                                         (= (size
                                            (rec__search_trees__search_tree__struct
                                            (us_split_fields7
                                            temp___expr_380))) 0)))
                                         (= (rec__search_trees__search_tree__values
                                            (us_split_fields7
                                            temp___expr_380)) (temp___387 0)))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_381 true))
                                         (= (size1 temp___expr_380) 0))))

(define-fun type_invariant1 ((temp___392 us_rep5)) Bool (ite (= (size
                                                                (rec__search_trees__search_tree__struct
                                                                (us_split_fields7
                                                                temp___392))) 0)
                                                        (= (to_rep1
                                                           (rec__search_trees__search_tree__root
                                                           (us_split_fields7
                                                           temp___392))) 0)
                                                        (and
                                                        (and
                                                        (not
                                                        (= (to_rep1
                                                           (rec__search_trees__search_tree__root
                                                           (us_split_fields7
                                                           temp___392))) 0))
                                                        (= (valid_root
                                                           (rec__search_trees__search_tree__struct
                                                           (us_split_fields7
                                                           temp___392))
                                                           (to_rep1
                                                           (rec__search_trees__search_tree__root
                                                           (us_split_fields7
                                                           temp___392)))) true))
                                                        (= (ordered_leafs
                                                           (rec__search_trees__search_tree__struct
                                                           (us_split_fields7
                                                           temp___392))
                                                           (to_rep1
                                                           (rec__search_trees__search_tree__root
                                                           (us_split_fields7
                                                           temp___392)))
                                                           (rec__search_trees__search_tree__values
                                                           (us_split_fields7
                                                           temp___392))) true))))

;; size__post_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (and (dynamic_invariant10 t true true true) (type_invariant1 t))
     (dynamic_invariant1 (size1 t) true false true)) :pattern ((size1 t)) )))

;; size__def_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (dynamic_invariant10 t true true true)
     (= (size1 t) (size
                  (rec__search_trees__search_tree__struct
                  (us_split_fields7 t))))) :pattern ((size1 t)) )))

(declare-fun root (us_rep5) Int)

(declare-fun root__function_guard (Int us_rep5) Bool)

;; root__post_axiom
  (assert
  (forall ((t us_rep5))
  (! (=>
     (and (and (dynamic_invariant10 t true true true) (type_invariant1 t))
     (not (= (size1 t) 0))) (dynamic_invariant7 (root t) true false true)) :pattern (
  (root t)) )))

;; root__def_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (dynamic_invariant10 t true true true)
     (= (root t) (to_rep1
                 (rec__search_trees__search_tree__root (us_split_fields7 t))))) :pattern (
  (root t)) )))

(declare-fun parent1 (us_rep5 Int) Int)

(declare-fun parent__function_guard1 (Int us_rep5 Int) Bool)

;; parent__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and
     (and (dynamic_invariant10 t true true true) (dynamic_invariant7 i true
     true true)) (type_invariant1 t))
     (let ((result (parent1 t i)))
     (and (=> (= (size1 t) 0) (= result 0)) (dynamic_invariant1 result true
     false true)))) :pattern ((parent1 t i)) ))))

;; parent__def_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant10 t true true true) (dynamic_invariant7 i true
     true true))
     (= (parent1 t i) (parent
                      (rec__search_trees__search_tree__struct
                      (us_split_fields7 t)) i))) :pattern ((parent1 t i)) ))))

(declare-fun position1 (us_rep5 Int) Int)

(declare-fun position__function_guard1 (Int us_rep5 Int) Bool)

;; position__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and
     (and
     (and (dynamic_invariant10 t true true true) (dynamic_invariant7 i true
     true true)) (type_invariant1 t)) (not (= (parent1 t i) 0)))
     (dynamic_invariant2 (position1 t i) true false true)) :pattern (
  (position1 t i)) ))))

;; position__def_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant10 t true true true) (dynamic_invariant7 i true
     true true))
     (= (position1 t i) (position
                        (rec__search_trees__search_tree__struct
                        (us_split_fields7 t)) i))) :pattern ((position1 t i)) ))))

(declare-fun model__1 (us_rep5) (Array Int us_rep1))

(declare-fun model____function_guard1 ((Array Int us_rep1) us_rep5) Bool)

;; model____post_axiom
  (assert
  (forall ((t us_rep5))
  (! (=>
     (and (and (dynamic_invariant10 t true true true) (type_invariant1 t))
     (not (= (size1 t) 0))) (dynamic_invariant9 (model__1 t) true false
     true)) :pattern ((model__1 t)) )))

;; model____def_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (dynamic_invariant10 t true true true)
     (= (model__1 t) (model__
                     (rec__search_trees__search_tree__struct
                     (us_split_fields7 t))
                     (to_rep1
                     (rec__search_trees__search_tree__root
                     (us_split_fields7 t)))))) :pattern ((model__1 t)) )))

(declare-fun peek1 (us_rep5 Int Int) Int)

(declare-fun peek__function_guard1 (Int us_rep5 Int Int) Bool)

;; peek__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int) (d Int))
  (! (=>
     (and
     (and
     (and
     (and (dynamic_invariant10 t true true true) (dynamic_invariant7 i true
     true true)) (dynamic_invariant2 d true true true)) (type_invariant1 t))
     (and (not (= (size1 t) 0))
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___419 (model__1 t))) (select temp___419 i)))) true)))
     (dynamic_invariant1 (peek1 t i d) true false true)) :pattern ((peek1 t i
                                                                   d)) ))))

;; peek__def_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((i Int) (d Int))
  (! (=>
     (and
     (and (dynamic_invariant10 t true true true) (dynamic_invariant7 i true
     true true)) (dynamic_invariant2 d true true true))
     (= (peek1 t i d) (peek
                      (rec__search_trees__search_tree__struct
                      (us_split_fields7 t)) i d))) :pattern ((peek1 t i d)) ))))

(declare-fun values (us_rep5) us_rep2)

(declare-fun values__function_guard (us_rep2 us_rep5) Bool)

(declare-fun values1 (us_rep5) us_rep2)

(declare-fun values__function_guard1 (us_rep2 us_rep5) Bool)

;; values__post_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (and (dynamic_invariant10 t true true true) (type_invariant1 t))
     (=> (= (size1 t) 0) (= (is_empty (values t)) true))) :pattern ((values
                                                                    t)) )))

;; values__post_refine_axiom
  (assert
  (forall ((t us_rep5))
  (! (=> (and (dynamic_invariant10 t true true true) (type_invariant1 t))
     (let ((result (values1 t)))
     (ite (= (size
             (rec__search_trees__search_tree__struct (us_split_fields7 t))) 0)
     (= (is_empty result) true)
     (and
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (=>
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___429 (model__
                          (rec__search_trees__search_tree__struct
                          (us_split_fields7 t))
                          (to_rep1
                          (rec__search_trees__search_tree__root
                          (us_split_fields7 t))))))
        (select temp___429 i)))) true)
     (= (contains result
        (to_rep
        (let ((temp___428 (rec__search_trees__search_tree__values
                          (us_split_fields7 t))))
        (select temp___428 i)))) true))))
     (forall ((v Int))
     (=> (and (<= 0 v) (<= v 2147483647))
     (=> (= (contains result v) true)
     (exists ((i Int))
     (and (and (<= 1 i) (<= i 100))
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___430 (model__
                          (rec__search_trees__search_tree__struct
                          (us_split_fields7 t))
                          (to_rep1
                          (rec__search_trees__search_tree__root
                          (us_split_fields7 t))))))
        (select temp___430 i)))) true)
     (= (to_rep
        (let ((temp___431 (rec__search_trees__search_tree__values
                          (us_split_fields7 t))))
        (select temp___431 i))) v))))))))))) :pattern ((values1 t)) )))

(declare-fun contains1 (us_rep5 Int) Bool)

(declare-fun contains__function_guard1 (Bool us_rep5 Int) Bool)

;; contains__post_axiom
  (assert
  (forall ((t us_rep5))
  (forall ((v Int))
  (! (=>
     (and
     (and (dynamic_invariant10 t true true true) (dynamic_invariant v true
     true true)) (type_invariant1 t))
     (= (= (contains1 t v) true) (= (contains (values1 t) v) true))) :pattern (
  (contains1 t v)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun v () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

;; ordered_leafs__post_axiom
  (assert true)

;; ordered_leafs__def_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((root1 Int))
  (forall ((values2 (Array Int natural)))
  (! (= (= (ordered_leafs f root1 values2) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j 100))
     (=>
     (and
     (and
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___482 (model__ f root1))) (select temp___482 i)))) true)
     (= (rec__tree_model__path_type__k
        (us_split_fields1
        (let ((temp___483 (model__ f root1))) (select temp___483 j)))) true))
     (= (olt
        (rec__tree_model__path_type__a
        (us_split_fields1
        (let ((temp___484 (model__ f root1))) (select temp___484 i))))
        (rec__tree_model__path_type__a
        (us_split_fields1
        (let ((temp___485 (model__ f root1))) (select temp___485 j))))) true))
     (ite (= (get
             (rec__tree_model__path_type__a
             (us_split_fields1
             (let ((temp___480 (model__ f root1))) (select temp___480 j))))
             (+ (length
                (rec__tree_model__path_type__a
                (us_split_fields1
                (let ((temp___481 (model__ f root1))) (select temp___481 i))))) 1)) 0)
     (< (to_rep (select values2 j)) (to_rep (select values2 i)))
     (< (to_rep (select values2 i)) (to_rep (select values2 j)))))))))) :pattern (
  (ordered_leafs f root1 values2)) )))))

(define-fun dynamic_invariant11 ((temp___expr_162 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)) Bool (=>
                                      (or (= temp___is_init_159 true)
                                      (<= 0 2)) (in_range10 temp___expr_162)))

(define-fun dynamic_invariant12 ((temp___expr_205 us_rep1)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)) Bool (=> (= temp___do_toplevel_204 true)
                                      (=> (= temp___is_init_202 true)
                                      (< (length
                                         (rec__tree_model__path_type__a
                                         (us_split_fields1 temp___expr_205))) 100))))

(define-fun default_initial_assumption6 ((temp___expr_207 us_rep1)
  (temp___skip_top_level_208 Bool)) Bool (and
                                         (= (length
                                            (rec__tree_model__path_type__a
                                            (us_split_fields1
                                            temp___expr_207))) 0)
                                         (= (rec__tree_model__path_type__k
                                            (us_split_fields1
                                            temp___expr_207)) (of_int 0))))

(define-fun dynamic_predicate ((temp___211 us_rep1)) Bool (< (length
                                                             (rec__tree_model__path_type__a
                                                             (us_split_fields1
                                                             temp___211))) 100))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((m1 (Array Int us_rep1)) (m2 (Array Int us_rep1)))
  (! (= (= (oeq2 m1 m2) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i 100))
     (and
     (= (oeq (rec__tree_model__path_type__a (us_split_fields1 (select m1 i)))
        (rec__tree_model__path_type__a (us_split_fields1 (select m2 i)))) true)
     (=
     (= (rec__tree_model__path_type__k (us_split_fields1 (select m1 i))) true)
     (= (rec__tree_model__path_type__k (us_split_fields1 (select m2 i))) true)))))) :pattern (
  (oeq2 m1 m2)) )))

;; is_add__post_axiom
  (assert true)

;; is_add__def_axiom
  (assert
  (forall ((s1 us_rep) (s2 us_rep))
  (forall ((d Int))
  (! (= (= (is_add s1 d s2) true)
     (and (and (= (- (length s2) 1) (length s1)) (= (olt s1 s2) true))
     (= (get s2 (length s2)) d))) :pattern ((is_add s1 d s2)) ))))

;; size__post_axiom
  (assert
  (forall ((f us_rep4))
  (! (=> (dynamic_invariant8 f true true true) (dynamic_invariant1 (size f)
     true false true)) :pattern ((size f)) )))

;; valid_root__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant8 f true true true) (dynamic_invariant7 i true
     true true)) (=> (< (size f) i) (not (= (valid_root f i) true)))) :pattern (
  (valid_root f i)) ))))

;; parent__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i Int))
  (! (=>
     (and (dynamic_invariant8 f true true true) (dynamic_invariant7 i true
     true true))
     (let ((result (parent f i)))
     (and
     (and (=> (= (valid_root f i) true) (= result 0))
     (=> (= (size f) 0) (= result 0))) (dynamic_invariant1 result true false
     true)))) :pattern ((parent f i)) ))))

;; position__post_axiom
  (assert
  (forall ((f us_rep4))
  (forall ((i Int))
  (! (=>
     (and
     (and (dynamic_invariant8 f true true true) (dynamic_invariant7 i true
     true true)) (not (= (parent f i) 0))) (dynamic_invariant2 (position f i)
     true false true)) :pattern ((position f i)) ))))

(define-fun default_initial_assumption7 ((temp___expr_259 us_rep3)
  (temp___skip_top_level_260 Bool)) Bool (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            temp___expr_259))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            temp___expr_259))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            temp___expr_259))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            temp___expr_259))) 2)))

(define-fun default_initial_assumption8 ((temp___expr_266 (Array Int us_rep3))
  (temp___skip_top_level_267 Bool)) Bool (forall ((temp___268 Int))
                                         (=>
                                         (and (<= 1 temp___268)
                                         (<= temp___268 100))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__binary_trees__cell__left
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0)
                                         (= (to_rep1
                                            (rec__binary_trees__cell__right
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0))
                                         (= (to_rep1
                                            (rec__binary_trees__cell__parent
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 0))
                                         (= (to_rep2
                                            (rec__binary_trees__cell__position
                                            (us_split_fields3
                                            (select temp___expr_266 temp___268)))) 2)))))

;; tree_structure__post_axiom
  (assert true)

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant3 (length1 container)
  true false true) :pattern ((length1 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (ole left right) true)
     (forall ((item Int))
     (=> (and (in_range9 item) (= (contains left item) true))
     (= (contains right item) true)))) :pattern ((ole left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (is_empty container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range9 item) (= (contains container item) true)))))
     (= (= result true) (= (length1 container) 0)))) :pattern ((is_empty
                                                               container)) )))

;; included_except__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (forall ((item Int))
  (! (=> (dynamic_invariant6 item true true true)
     (= (= (included_except left right item) true)
     (forall ((e Int))
     (=> (and (in_range9 e) (= (contains left e) true))
     (or (= (contains right e) true) (= e item)))))) :pattern ((included_except
                                                               left right
                                                               item)) ))))

(declare-fun t__split_fields () extended_index_type)

(declare-fun t__split_fields1 () extended_index_type)

(declare-fun t__split_fields2 () (Array Int us_rep3))

(declare-fun t__split_fields3 () (Array Int natural))

(declare-fun i () Int)

(declare-fun t_old__split_fields () extended_index_type)

(declare-fun t_old__split_fields1 () extended_index_type)

(declare-fun t_old__split_fields2 () (Array Int us_rep3))

(declare-fun t_old__split_fields3 () (Array Int natural))

(declare-fun current () Int)

(declare-fun previous () Int)

(declare-fun d () Int)

(declare-fun o () natural)

(declare-fun o1 () Int)

(declare-fun o2 () (Array Int natural))

(declare-fun o3 () extended_index_type)

(declare-fun o4 () extended_index_type)

(declare-fun o5 () (Array Int us_rep3))

(declare-fun o6 () (Array Int natural))

(declare-fun temp___704 () extended_index_type)

(declare-fun temp___7041 () extended_index_type)

(declare-fun temp___7042 () (Array Int us_rep3))

(declare-fun temp___7043 () (Array Int natural))

(declare-fun o7 () extended_index_type)

(declare-fun o8 () extended_index_type)

(declare-fun o9 () extended_index_type)

(declare-fun o10 () (Array Int us_rep3))

(declare-fun o11 () (Array Int natural))

(declare-fun temp___706 () us_rep5)

(declare-fun temp___718 () Int)

(declare-fun temp___717 () Int)

(declare-fun temp___716 () Int)

(declare-fun temp___715 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () natural)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () natural)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () Int)

(declare-fun o23 () natural)

(declare-fun o24 () Int)

(declare-fun o25 () (Array Int natural))

(declare-fun o26 () us_split_fields6)

(declare-fun temp___746 () us_rep5)

(declare-fun o27 () Int)

(declare-fun o28 () Int)

(declare-fun t__split_fields4 () us_split_fields6)

(declare-fun i1 () Int)

(declare-fun current1 () Int)

(declare-fun previous1 () Int)

(declare-fun d1 () Int)

(declare-fun result () us_split_fields__ref3)

(declare-fun t_old__split_fields4 () us_split_fields6)

(declare-fun binary_trees__init__root () Int)

(declare-fun binary_trees__init__f__fields () us_split_fields4)

(declare-fun result1 () us_split_fields__ref3)

(declare-fun t__split_fields5 () us_split_fields6)

(declare-fun result2 () int__ref)

(declare-fun i2 () Int)

(declare-fun result3 () us_split_fields__ref3)

(declare-fun t__split_fields6 () us_split_fields6)

(declare-fun result4 () us_split_fields__ref3)

(declare-fun t__split_fields7 () us_split_fields6)

(declare-fun result5 () int__ref)

(declare-fun current2 () Int)

(declare-fun result6 () int__ref)

(declare-fun previous2 () Int)

(declare-fun result7 () int__ref)

(declare-fun d2 () Int)

(declare-fun i3 () Int)

(declare-fun current3 () Int)

(declare-fun previous3 () Int)

(declare-fun d3 () Int)

(declare-fun result8 () int__ref)

(declare-fun previous4 () Int)

(declare-fun result9 () Bool)

(declare-fun result10 () int__ref)

(declare-fun i4 () Int)

(declare-fun result11 () Bool)

(declare-fun result12 () int__ref)

(declare-fun d4 () Int)

(declare-fun result13 () int__ref)

(declare-fun d5 () Int)

(declare-fun result14 () int__ref)

(declare-fun current4 () Int)

(declare-fun i5 () int__ref)

(declare-fun current5 () int__ref)

(declare-fun previous5 () int__ref)

(declare-fun d6 () int__ref)

(declare-fun i6 () Int)

(declare-fun current6 () Int)

(declare-fun previous6 () Int)

(declare-fun d7 () Int)

(declare-fun i7 () int__ref)

(declare-fun current7 () int__ref)

(declare-fun previous7 () int__ref)

(declare-fun d8 () int__ref)

(declare-fun i8 () Int)

(declare-fun current8 () Int)

(declare-fun previous8 () Int)

(declare-fun d9 () Int)

(declare-fun binary_trees__insert__v () Int)

(declare-fun binary_trees__insert__f__fields () us_split_fields4)

(declare-fun result15 () us_split_fields__ref3)

(declare-fun t__split_fields8 () us_split_fields6)

(declare-fun result16 () int__ref)

(declare-fun i9 () Int)

(declare-fun result17 () us_split_fields__ref3)

(declare-fun t__split_fields9 () us_split_fields6)

(declare-fun t__split_fields10 () us_split_fields__ref3)

(declare-fun i10 () int__ref)

(declare-fun current9 () int__ref)

(declare-fun previous9 () int__ref)

(declare-fun d10 () int__ref)

(declare-fun t__split_fields11 () us_split_fields6)

(declare-fun i11 () Int)

(declare-fun current10 () Int)

(declare-fun previous10 () Int)

(declare-fun d11 () Int)

(declare-fun t__split_fields12 () us_split_fields__ref3)

(declare-fun i12 () int__ref)

(declare-fun current11 () int__ref)

(declare-fun previous11 () int__ref)

(declare-fun d12 () int__ref)

(declare-fun t__split_fields13 () us_split_fields6)

(declare-fun i13 () Int)

(declare-fun current12 () Int)

(declare-fun previous12 () Int)

(declare-fun d13 () Int)

(declare-fun t__split_fields14 () us_split_fields__ref3)

(declare-fun i14 () int__ref)

(declare-fun t_old__split_fields5 () us_split_fields__ref3)

(declare-fun current13 () int__ref)

(declare-fun previous13 () int__ref)

(declare-fun d14 () int__ref)

(declare-fun t__split_fields15 () us_split_fields6)

(declare-fun i15 () Int)

(declare-fun t_old__split_fields6 () us_split_fields6)

(declare-fun current14 () Int)

(declare-fun previous14 () Int)

(declare-fun d15 () Int)

(define-fun d16 () int__ref (mk_int__ref d))

(define-fun previous15 () int__ref (mk_int__ref previous))

(define-fun current15 () int__ref (mk_int__ref current))

;; H
  (assert
  (= (tree_structure
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))) true))

;; H
  (assert (in_range1 v))

;; H
  (assert (=> (<= 0 100) (in_range4 i)))

;; H
  (assert (type_invariant1
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3))))

;; H
  (assert
  (< (size1
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3))) 100))

;; H
  (assert
  (= result (mk___split_fields__ref3
            (mk___split_fields3 t_old__split_fields
            (mk___rep2
            (mk___split_fields2 t_old__split_fields1 t_old__split_fields2))
            t_old__split_fields3))))

;; H
  (assert
  (= t_old__split_fields4 (mk___split_fields3 t__split_fields
                          (mk___rep2
                          (mk___split_fields2 t__split_fields1
                          t__split_fields2)) t__split_fields3)))

;; H
  (assert
  (= (tree_structure
     (rec__search_trees__search_tree__struct t_old__split_fields4)) true))

;; H
  (assert
  (or
  (and
  (and
  (and (= d12 d16)
  (and (= previous11 previous15)
  (and (= current11 current15)
  (and (= i12 (mk_int__ref i2))
  (= t__split_fields12 (mk___split_fields__ref3 t__split_fields7))))))
  (and (= d13 d1)
  (and (= previous12 previous1)
  (and (= current12 current1)
  (and (= i13 i2) (= t__split_fields13 t__split_fields7))))))
  (and (= (to_rep1 t__split_fields) 0)
  (and
  (and
  (and
  (and
  (= (size (mk___rep2 binary_trees__init__f__fields)) (+ (size
                                                         (mk___rep2
                                                         (mk___split_fields2
                                                         t__split_fields1
                                                         t__split_fields2))) 1))
  (and
  (not
  (= (valid_root
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     binary_trees__init__root) true))
  (and
  (= (valid_root (mk___rep2 binary_trees__init__f__fields)
     binary_trees__init__root) true)
  (and
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (= (parent (mk___rep2 binary_trees__init__f__fields) i16) (parent
                                                            (mk___rep2
                                                            (mk___split_fields2
                                                            t__split_fields1
                                                            t__split_fields2))
                                                            i16))))
  (and
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (=> (not (= (parent (mk___rep2 binary_trees__init__f__fields) i16) 0))
  (= (position (mk___rep2 binary_trees__init__f__fields) i16) (position
                                                              (mk___rep2
                                                              (mk___split_fields2
                                                              t__split_fields1
                                                              t__split_fields2))
                                                              i16)))))
  (and
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (=>
  (= (valid_root
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i16) true)
  (= (valid_root (mk___rep2 binary_trees__init__f__fields) i16) true))))
  (and
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (=>
  (and (= (valid_root (mk___rep2 binary_trees__init__f__fields) i16) true)
  (not (= i16 binary_trees__init__root)))
  (= (valid_root
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i16) true))))
  (and
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (=>
  (= (valid_root
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i16) true)
  (= (oeq2 (model__ (mk___rep2 binary_trees__init__f__fields) i16)
     (model__
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2)) i16)) true))))
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (=> (not (= i16 binary_trees__init__root))
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__init__f__fields)
             binary_trees__init__root) i16))) true)))))))))))))
  (and (= (tree_structure (mk___rep2 binary_trees__init__f__fields)) true)
  (in_range3 binary_trees__init__root)))
  (and
  (and
  (= result1 (mk___split_fields__ref3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3)))
  (= t__split_fields5 (mk___split_fields3 t__split_fields
                      (mk___rep2 binary_trees__init__f__fields)
                      t__split_fields3)))
  (and (= result2 (mk_int__ref i)) (= i2 binary_trees__init__root))))
  (and
  (and
  (and
  (and
  (and (= (to_rep o) v)
  (and (and (and (<= 1 i2) (<= i2 100)) (= o1 i2))
  (= o2 (store (rec__search_trees__search_tree__values t__split_fields5) 
  o1 o))))
  (and (= (rec__search_trees__search_tree__root t__split_fields5) o3)
  (and
  (= (rec__search_trees__search_tree__struct t__split_fields5) (mk___rep2
                                                               (mk___split_fields2
                                                               o4 o5)))
  (= o2 o6))))
  (and (= temp___704 o3)
  (and (and (= temp___7041 o4) (= temp___7042 o5)) (= temp___7043 o6))))
  (and (= result3 (mk___split_fields__ref3 t__split_fields5))
  (= t__split_fields6 (mk___split_fields3 temp___704
                      (mk___rep2
                      (mk___split_fields2 temp___7041 temp___7042))
                      temp___7043))))
  (and
  (and
  (and (= (to_rep1 o7) i2)
  (and (= o7 o8)
  (and
  (= (rec__search_trees__search_tree__struct t__split_fields6) (mk___rep2
                                                               (mk___split_fields2
                                                               o9 o10)))
  (= (rec__search_trees__search_tree__values t__split_fields6) o11))))
  (= temp___706 (mk___rep3
                (mk___split_fields3 o8
                (mk___rep2 (mk___split_fields2 o9 o10)) o11))))
  (and (= result4 (mk___split_fields__ref3 t__split_fields6))
  (= t__split_fields7 (us_split_fields7 temp___706))))))))
  (and
  (and (not (= (to_rep1 t__split_fields) 0))
  (and
  (and (= i2 i)
  (= t__split_fields7 (mk___split_fields3 t__split_fields
                      (mk___rep2
                      (mk___split_fields2 t__split_fields1 t__split_fields2))
                      t__split_fields3)))
  (and (= i2 i1) (= t__split_fields7 t__split_fields4))))
  (and
  (and
  (and (= d12 d10)
  (and (= previous11 previous9)
  (and (= current11 current9)
  (and (= i12 i10) (= t__split_fields12 t__split_fields10)))))
  (and (= d13 d11)
  (and (= previous12 previous10)
  (and (= current12 current10)
  (and (= i13 i11) (= t__split_fields13 t__split_fields11))))))
  (or
  (and
  (and
  (and (= d10 (mk_int__ref d3))
  (and (= previous9 (mk_int__ref previous4))
  (and (= current9 (mk_int__ref current3))
  (and (= i10 (mk_int__ref i4))
  (= t__split_fields10 (mk___split_fields__ref3 t__split_fields7))))))
  (and (= d11 d3)
  (and (= previous10 previous4)
  (and (= current10 current3)
  (and (= i11 i4) (= t__split_fields11 t__split_fields7))))))
  (and
  (and (= result5 current15)
  (= current2 (to_rep1
              (rec__search_trees__search_tree__root t__split_fields7))))
  (and (in_range4 current2)
  (and (and (= result6 previous15) (= previous2 0))
  (and (in_range4 previous2)
  (and (and (= result7 d16) (= d2 0))
  (and (in_range5 d2)
  (and (not (= current2 0))
  (and (= temp___718 current2)
  (and (= temp___717 i2)
  (and (= temp___716 d2)
  (and (= temp___715 previous2)
  (and
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7)
             (to_rep1
             (rec__search_trees__search_tree__root t__split_fields7))) 
     current3))) true)
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7)
             (to_rep1
             (rec__search_trees__search_tree__root t__split_fields7))) i16))) true)
  (=>
  (= (olt
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7)
             (to_rep1
             (rec__search_trees__search_tree__root t__split_fields7))) i16)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7)
             (to_rep1
             (rec__search_trees__search_tree__root t__split_fields7))) 
     current3)))) true)
  (ite (= (get
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__
                  (rec__search_trees__search_tree__struct t__split_fields7)
                  (to_rep1
                  (rec__search_trees__search_tree__root t__split_fields7))) 
          current3)))
          (+ (length
             (rec__tree_model__path_type__a
             (us_split_fields1
             (select (model__
                     (rec__search_trees__search_tree__struct
                     t__split_fields7)
                     (to_rep1
                     (rec__search_trees__search_tree__root t__split_fields7))) i16)))) 1)) 0)
  (< v (to_rep
       (select (rec__search_trees__search_tree__values t__split_fields7) i16)))
  (< (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields7) i16)) 
  v)))))))
  (and
  (and
  (and
  (and
  (and (=> (<= 0 100) (in_range4 previous3)) (=> (<= 0 1) (in_range5 d3)))
  (=> (<= 0 100) (in_range4 i3))) (=> (<= 0 100) (in_range4 current3)))
  (not (= current3 0)))
  (and (and (= result8 (mk_int__ref previous3)) (= previous4 current3))
  (and
  (and
  (and
  (and (and (and (<= 1 previous4) (<= previous4 100)) (= o12 previous4))
  (= o13 (select (rec__search_trees__search_tree__values t__split_fields7) 
  o12))) (= o14 (to_rep o13))) (= result9 (ite (= v o14) true false)))
  (and (= result9 true)
  (and (and (= result10 (mk_int__ref i3)) (= i4 0))
  (and
  (exists ((i16 Int))
  (and (and (<= 1 i16) (<= i16 100))
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1 (select (model__1 (mk___rep3 t__split_fields7)) i16))) true)
  (= (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields7) i16)) 
  v)))) (= (contains1 (mk___rep3 t__split_fields7) v) true))))))))))))))))))))
  (and
  (and
  (and (= result5 current15)
  (= current2 (to_rep1
              (rec__search_trees__search_tree__root t__split_fields7))))
  (and (in_range4 current2)
  (and (and (= result6 previous15) (= previous2 0))
  (and (in_range4 previous2)
  (and (and (= result7 d16) (= d2 0))
  (and (in_range5 d2)
  (and
  (ite (not (= current2 0))
  (and
  (and
  (and (= temp___718 current2)
  (and (= temp___717 i2)
  (and (= temp___716 d2)
  (and (= temp___715 previous2)
  (and
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7)
             (to_rep1
             (rec__search_trees__search_tree__root t__split_fields7))) 
     current3))) true)
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7)
             (to_rep1
             (rec__search_trees__search_tree__root t__split_fields7))) i16))) true)
  (=>
  (= (olt
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7)
             (to_rep1
             (rec__search_trees__search_tree__root t__split_fields7))) i16)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7)
             (to_rep1
             (rec__search_trees__search_tree__root t__split_fields7))) 
     current3)))) true)
  (ite (= (get
          (rec__tree_model__path_type__a
          (us_split_fields1
          (select (model__
                  (rec__search_trees__search_tree__struct t__split_fields7)
                  (to_rep1
                  (rec__search_trees__search_tree__root t__split_fields7))) 
          current3)))
          (+ (length
             (rec__tree_model__path_type__a
             (us_split_fields1
             (select (model__
                     (rec__search_trees__search_tree__struct
                     t__split_fields7)
                     (to_rep1
                     (rec__search_trees__search_tree__root t__split_fields7))) i16)))) 1)) 0)
  (< v (to_rep
       (select (rec__search_trees__search_tree__values t__split_fields7) i16)))
  (< (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields7) i16)) 
  v)))))))
  (and
  (and
  (and
  (and
  (and (=> (<= 0 100) (in_range4 previous3)) (=> (<= 0 1) (in_range5 d3)))
  (=> (<= 0 100) (in_range4 i3))) (=> (<= 0 100) (in_range4 current3)))
  (not (= current3 0)))
  (and (and (= result8 (mk_int__ref previous3)) (= previous4 current3))
  (and
  (and
  (and
  (and
  (and (and (and (<= 1 previous4) (<= previous4 100)) (= o12 previous4))
  (= o13 (select (rec__search_trees__search_tree__values t__split_fields7) 
  o12))) (= o14 (to_rep o13))) (= result9 (ite (= v o14) true false)))
  (and (not (= result9 true))
  (and
  (and
  (and
  (and
  (and (and (and (<= 1 previous4) (<= previous4 100)) (= o15 previous4))
  (= o16 (select (rec__search_trees__search_tree__values t__split_fields7) 
  o15))) (= o17 (to_rep o16))) (= result11 (ite (< v o17) true false)))
  (ite (= result11 true) (and (= result12 (mk_int__ref d3)) (= d4 0))
  (and (and (= result13 (mk_int__ref d3)) (= d5 1)) (= d4 d5)))) (= i4 
  i3))))
  (and
  (and
  (and (and (= o18 previous4) (in_range3 previous4))
  (and
  (= o19 (peek (rec__search_trees__search_tree__struct t__split_fields7) 
         o18 d4))
  (and (in_range4 o19)
  (and
  (ite (not (= o19 0))
  (and
  (= (position (rec__search_trees__search_tree__struct t__split_fields7) o19) 
  d4)
  (= (parent (rec__search_trees__search_tree__struct t__split_fields7) o19) 
  o18))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (= (parent (rec__search_trees__search_tree__struct t__split_fields7) j) 
  o18)
  (not
  (= (position (rec__search_trees__search_tree__struct t__split_fields7) j) 
  d4))))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (parent (rec__search_trees__search_tree__struct t__split_fields7) j) 
  o18)
  (= (position (rec__search_trees__search_tree__struct t__split_fields7) j) 
  d4)) (= o19 j))))))))
  (and (= result14 (mk_int__ref current3)) (= current4 o19))) (= current4 0))))))))))
  (and
  (and (= d6 (mk_int__ref d4))
  (and (= previous5 (mk_int__ref previous4))
  (and (= current5 (mk_int__ref current4)) (= i5 (mk_int__ref i4)))))
  (and (= d7 d4)
  (and (= previous6 previous4) (and (= current6 current4) (= i6 i4))))))
  (and
  (and (= d8 d6)
  (and (= previous7 previous5) (and (= current7 current5) (= i7 i5))))
  (and (= d9 d7)
  (and (= previous8 previous6) (and (= current8 current6) (= i8 i6))))))
  (and
  (and (= d8 (mk_int__ref d2))
  (and (= previous7 (mk_int__ref previous2))
  (and (= current7 (mk_int__ref current2)) (= i7 (mk_int__ref i2)))))
  (and (= d9 d2)
  (and (= previous8 previous2) (and (= current8 current2) (= i8 i2))))))
  (and
  (and
  (and (= o20 (int__content previous7)) (in_range3 (int__content previous7)))
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (rec__search_trees__search_tree__struct t__split_fields7)
             (to_rep1
             (rec__search_trees__search_tree__root t__split_fields7))) i16))) true)
  (not
  (= (to_rep
     (select (rec__search_trees__search_tree__values t__split_fields7) i16)) 
  v))))))
  (and
  (and
  (and
  (and (= o22 (int__content previous7)) (in_range3 (int__content previous7)))
  (and
  (and
  (= o21 (to_rep1 (rec__search_trees__search_tree__root t__split_fields7)))
  (in_range3
  (to_rep1 (rec__search_trees__search_tree__root t__split_fields7))))
  (and
  (and
  (= (size (mk___rep2 binary_trees__insert__f__fields)) (+ (size
                                                           (mk___rep2
                                                           (us_split_fields5
                                                           (rec__search_trees__search_tree__struct
                                                           t__split_fields7)))) 1))
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__insert__f__fields) o21) 
     o22))) true)
  (and
  (= (peek (mk___rep2 binary_trees__insert__f__fields) o22 (int__content d8)) 
  binary_trees__insert__v)
  (and
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (ite (= (valid_root
          (mk___rep2
          (us_split_fields5
          (rec__search_trees__search_tree__struct t__split_fields7))) i16) true)
  (= (valid_root (mk___rep2 binary_trees__insert__f__fields) i16) true)
  (not (= (valid_root (mk___rep2 binary_trees__insert__f__fields) i16) true)))))
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__insert__f__fields) o21) 
     binary_trees__insert__v))) true)
  (and
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields7))) 
             o21) binary_trees__insert__v))) true))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=> (not (= j binary_trees__insert__v))
  (= (parent (mk___rep2 binary_trees__insert__f__fields) j) (parent
                                                            (mk___rep2
                                                            (us_split_fields5
                                                            (rec__search_trees__search_tree__struct
                                                            t__split_fields7)))
                                                            j)))))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and (not (= j binary_trees__insert__v))
  (not
  (= (parent
     (mk___rep2
     (us_split_fields5
     (rec__search_trees__search_tree__struct t__split_fields7))) j) 0)))
  (= (position (mk___rep2 binary_trees__insert__f__fields) j) (position
                                                              (mk___rep2
                                                              (us_split_fields5
                                                              (rec__search_trees__search_tree__struct
                                                              t__split_fields7)))
                                                              j)))))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (forall ((e Int))
  (=> (and (<= 0 e) (<= e 1))
  (=> (or (not (= j o22)) (not (= e (int__content d8))))
  (= (peek (mk___rep2 binary_trees__insert__f__fields) j e) (peek
                                                            (mk___rep2
                                                            (us_split_fields5
                                                            (rec__search_trees__search_tree__struct
                                                            t__split_fields7)))
                                                            j e)))))))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__insert__f__fields) o21) j))) true)
  (or
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields7))) 
             o21) j))) true)
  (= j binary_trees__insert__v)))))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields7))) 
             o21) j))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__insert__f__fields) o21) j))) true))))
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (and
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__insert__f__fields) o21) j))) true)
  (not (= j binary_trees__insert__v)))
  (= (oeq
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__insert__f__fields) o21) j)))
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__
             (mk___rep2
             (us_split_fields5
             (rec__search_trees__search_tree__struct t__split_fields7))) 
             o21) j)))) true))))
  (and
  (= (is_add
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__insert__f__fields) o21) 
     o22))) (int__content d8)
     (rec__tree_model__path_type__a
     (us_split_fields1
     (select (model__ (mk___rep2 binary_trees__insert__f__fields) o21) 
     binary_trees__insert__v)))) true)
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (=>
  (and (not (= i16 o21))
  (= (valid_root
     (mk___rep2
     (us_split_fields5
     (rec__search_trees__search_tree__struct t__split_fields7))) i16) true))
  (= (oeq2 (model__ (mk___rep2 binary_trees__insert__f__fields) i16)
     (model__
     (mk___rep2
     (us_split_fields5
     (rec__search_trees__search_tree__struct t__split_fields7))) i16)) true)))))))))))))))))
  (and (= (tree_structure (mk___rep2 binary_trees__insert__f__fields)) true)
  (in_range3 binary_trees__insert__v)))))
  (and
  (and (= result15 (mk___split_fields__ref3 t__split_fields7))
  (= t__split_fields8 (mk___split_fields3
                      (rec__search_trees__search_tree__root t__split_fields7)
                      (mk___rep2 binary_trees__insert__f__fields)
                      (rec__search_trees__search_tree__values
                      t__split_fields7))))
  (and (= result16 i7) (= i9 binary_trees__insert__v))))
  (and
  (and
  (and
  (and
  (and (= (to_rep o23) v)
  (and (and (and (<= 1 i9) (<= i9 100)) (= o24 i9))
  (= o25 (store (rec__search_trees__search_tree__values t__split_fields8) 
  o24 o23))))
  (= o26 (mk___split_fields3
         (rec__search_trees__search_tree__root t__split_fields8)
         (rec__search_trees__search_tree__struct t__split_fields8) o25)))
  (= temp___746 (mk___rep3 o26)))
  (and (= result17 (mk___split_fields__ref3 t__split_fields8))
  (= t__split_fields9 (us_split_fields7 temp___746))))
  (and
  (and
  (and (= o27 (int__content previous7)) (in_range3 (int__content previous7)))
  (type_invariant1 (mk___rep3 t_old__split_fields4)))
  (and
  (and (= o28 (int__content previous7)) (in_range3 (int__content previous7)))
  (= (ordered_leafs (rec__search_trees__search_tree__struct t__split_fields9)
     (to_rep1 (rec__search_trees__search_tree__root t__split_fields9))
     (rec__search_trees__search_tree__values t__split_fields9)) true)))))))))))))
  (and
  (and (= d10 d8)
  (and (= previous9 previous7)
  (and (= current9 current7)
  (and (= i10 (mk_int__ref i9))
  (= t__split_fields10 (mk___split_fields__ref3 t__split_fields9))))))
  (and (= d11 d9)
  (and (= previous10 previous8)
  (and (= current10 current8)
  (and (= i11 i9) (= t__split_fields11 t__split_fields9))))))))))))

;; H
  (assert (= d14 d12))

;; H
  (assert (= previous13 previous11))

;; H
  (assert (= current13 current11))

;; H
  (assert
  (= t_old__split_fields5 (mk___split_fields__ref3 t_old__split_fields4)))

;; H
  (assert (= i14 i12))

;; H
  (assert (= t__split_fields14 t__split_fields12))

;; H
  (assert (= d15 d13))

;; H
  (assert (= previous14 previous12))

;; H
  (assert (= current14 current12))

;; H
  (assert (= t_old__split_fields6 t_old__split_fields4))

;; H
  (assert (= i15 i13))

;; H
  (assert (= t__split_fields15 t__split_fields13))

;; H
  (assert (type_invariant1
  (mk___rep3 (us_split_fields__content3 t__split_fields14))))

;; H
  (assert
  (=>
  (= (contains
     (values1
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3))) v) true)
  (and
  (and
  (and
  (and
  (and
  (and (= (int__content i14) 0)
  (= (oeq1
     (values1 (mk___rep3 (us_split_fields__content3 t__split_fields14)))
     (values1
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3)))) true))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (= (parent1 (mk___rep3 (us_split_fields__content3 t__split_fields14)) j) 
  (parent1
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3)) j)))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (not
  (= (parent1 (mk___rep3 (us_split_fields__content3 t__split_fields14)) j) 0))
  (= (position1 (mk___rep3 (us_split_fields__content3 t__split_fields14)) j) 
  (position1
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3)) j))))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__1
             (mk___rep3 (us_split_fields__content3 t__split_fields14))) j))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__1
             (mk___rep3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3))) j))) true)))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__1
             (mk___rep3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3))) j))) true)
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__1
             (mk___rep3 (us_split_fields__content3 t__split_fields14))) j))) true)))))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100))
  (forall ((d17 Int))
  (=> (and (<= 0 d17) (<= d17 1))
  (=>
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__1
             (mk___rep3 (us_split_fields__content3 t__split_fields14))) j))) true)
  (= (peek1
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3)) j d17) (peek1
                               (mk___rep3
                               (us_split_fields__content3 t__split_fields14))
                               j d17))))))))))

;; H
  (assert
  (=>
  (= (= (size1
        (mk___rep3
        (mk___split_fields3 t__split_fields
        (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
        t__split_fields3))) 0) true)
  (and
  (and
  (and
  (and
  (and (not (= (int__content i14) 0))
  (= (size1 (mk___rep3 (us_split_fields__content3 t__split_fields14))) 1))
  (= (root (mk___rep3 (us_split_fields__content3 t__split_fields14))) 
  (int__content i14)))
  (= (is_add__2
     (values1
     (mk___rep3
     (mk___split_fields3 t__split_fields
     (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
     t__split_fields3))) v
     (values1 (mk___rep3 (us_split_fields__content3 t__split_fields14)))) true))
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (=>
  (not
  (= i16 (root (mk___rep3 (us_split_fields__content3 t__split_fields14)))))
  (not
  (= (rec__tree_model__path_type__k
     (us_split_fields1
     (select (model__1
             (mk___rep3 (us_split_fields__content3 t__split_fields14))) i16))) true))))))
  (forall ((i16 Int))
  (=> (and (<= 1 i16) (<= i16 100))
  (= (parent1 (mk___rep3 (us_split_fields__content3 t__split_fields14)) i16) 
  (parent1
  (mk___rep3
  (mk___split_fields3 t__split_fields
  (mk___rep2 (mk___split_fields2 t__split_fields1 t__split_fields2))
  t__split_fields3)) i16)))))))

;; H
  (assert
  (not
  (= (ite (= (contains
             (values1
             (mk___rep3
             (mk___split_fields3 t__split_fields
             (mk___rep2
             (mk___split_fields2 t__split_fields1 t__split_fields2))
             t__split_fields3))) v) false) (= (size1
                                              (mk___rep3
                                              (mk___split_fields3
                                              t__split_fields
                                              (mk___rep2
                                              (mk___split_fields2
                                              t__split_fields1
                                              t__split_fields2))
                                              t__split_fields3))) 0) true) true)))

;; H
  (assert (not (= (int__content i14) 0)))

;; H
  (assert (type_invariant1
  (mk___rep3 (us_split_fields__content3 t__split_fields14))))

(assert
;; WP_parameter_def
 ;; File "search_trees.adb", line 1175, characters 0-0
  (not
  (not
  (= (size1 (mk___rep3 (us_split_fields__content3 t__split_fields14))) 0))))
(check-sat)
