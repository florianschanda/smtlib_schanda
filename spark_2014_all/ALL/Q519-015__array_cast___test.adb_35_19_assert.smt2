;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort integer_subtype 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer_subtype integer_subtype) Bool)

(declare-fun dummy2 () integer_subtype)

(declare-datatypes ()
((integer_subtype__ref
 (mk_integer_subtype__ref (integer_subtype__content integer_subtype)))))
(define-fun integer_subtype__ref___projection ((a integer_subtype__ref)) integer_subtype
  (integer_subtype__content a))

(declare-fun to_rep2 (integer_subtype) Int)

(declare-fun of_rep2 (Int) integer_subtype)

;; inversion_axiom
  (assert
  (forall ((x integer_subtype))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x integer_subtype)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int integer_subtype))))))
(declare-fun slide1 ((Array Int integer_subtype) Int
  Int) (Array Int integer_subtype))

;; slide_eq
  (assert
  (forall ((a (Array Int integer_subtype)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer_subtype)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int integer_subtype) Int Int
  (Array Int integer_subtype) Int Int) (Array Int integer_subtype))

;; concat_def
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (integer_subtype Int) (Array Int integer_subtype))

;; singleton_def
  (assert
  (forall ((v integer_subtype))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int integer_subtype)) (a__first Int)
  (a__last Int) (b (Array Int integer_subtype)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep2 (select a temp___idx_133)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep2 (select a temp___idx_133)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare1 ((Array Int integer_subtype) Int Int
  (Array Int integer_subtype) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun cast ((Array Int integer)) (Array Int integer_subtype))

(declare-fun cast__function_guard ((Array Int integer_subtype)
  (Array Int integer)) Bool)

;; cast__post_axiom
  (assert
  (forall ((input_array (Array Int integer)))
  (! (forall ((k Int))
     (=> (and (<= 0 k) (<= k 2))
     (= (to_rep2 (select (cast input_array) k)) (to_rep
                                                (select input_array k))))) :pattern (
  (cast input_array)) )))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int natural))))))
(declare-fun slide2 ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare2 ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare2 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare2 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare2 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

(declare-fun dummy3 () (Array Int natural))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int natural)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))

(declare-fun user_eq3 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int (Array Int natural)))))))
(declare-fun slide3 ((Array Int (Array Int natural)) Int
  Int) (Array Int (Array Int natural)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int natural))))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int natural))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat4 ((Array Int (Array Int natural)) Int Int
  (Array Int (Array Int natural)) Int Int) (Array Int (Array Int natural)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int natural)))
  (b (Array Int (Array Int natural))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat4 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton4 ((Array Int natural)
  Int) (Array Int (Array Int natural)))

;; singleton_def
  (assert
  (forall ((v (Array Int natural)))
  (forall ((i Int))
  (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int (Array Int natural))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int natural))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_135 Int))
                           (=>
                           (and (<= a__first temp___idx_135)
                           (<= temp___idx_135 a__last))
                           (= (bool_eq2 (select a temp___idx_135) 1 100
                              (select b (+ (- b__first a__first) temp___idx_135))
                              1 100) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int natural)))
  (b (Array Int (Array Int natural))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_135 Int))
  (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last))
  (= (bool_eq2 (select a temp___idx_135) 1 100
     (select b (+ (- b__first a__first) temp___idx_135)) 1 100) true))))))))

(declare-fun dummy4 () (Array Int natural))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int natural)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int natural)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq4 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ()
((map__ref4 (mk_map__ref4 (map__content4 (Array Int (Array Int natural)))))))
(declare-fun slide4 ((Array Int (Array Int natural)) Int
  Int) (Array Int (Array Int natural)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int natural))))
  (forall ((first Int))
  (! (= (slide4 a first first) a) :pattern ((slide4 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int natural))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide4 a old_first new_first) i)) ))))))

(declare-fun concat5 ((Array Int (Array Int natural)) Int Int
  (Array Int (Array Int natural)) Int Int) (Array Int (Array Int natural)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int natural)))
  (b (Array Int (Array Int natural))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat5 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton5 ((Array Int natural)
  Int) (Array Int (Array Int natural)))

;; singleton_def
  (assert
  (forall ((v (Array Int natural)))
  (forall ((i Int))
  (! (= (select (singleton5 v i) i) v) :pattern ((select (singleton5 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int (Array Int natural))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int natural))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_136 Int))
                           (=>
                           (and (<= a__first temp___idx_136)
                           (<= temp___idx_136 a__last))
                           (= (bool_eq2 (select a temp___idx_136) 1 100
                              (select b (+ (- b__first a__first) temp___idx_136))
                              1 100) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int natural)))
  (b (Array Int (Array Int natural))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_136 Int))
  (=> (and (<= a__first temp___idx_136) (<= temp___idx_136 a__last))
  (= (bool_eq2 (select a temp___idx_136) 1 100
     (select b (+ (- b__first a__first) temp___idx_136)) 1 100) true))))))))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__test__rec__x integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) integer
  (rec__test__rec__x a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__test__rec__y integer)))))
(define-fun us_split_fields_Y__projection ((a us_split_fields)) integer
  (rec__test__rec__y a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq5 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep (rec__test__rec__x (us_split_discrs1 a)))
                        (to_rep (rec__test__rec__x (us_split_discrs1 b))))
                        (= (to_rep (rec__test__rec__y (us_split_fields1 a)))
                        (to_rep (rec__test__rec__y (us_split_fields1 b)))))
                   true false))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun test__rec__x__first__bit () Int)

(declare-fun test__rec__x__last__bit () Int)

(declare-fun test__rec__x__position () Int)

;; test__rec__x__first__bit_axiom
  (assert (<= 0 test__rec__x__first__bit))

;; test__rec__x__last__bit_axiom
  (assert (< test__rec__x__first__bit test__rec__x__last__bit))

;; test__rec__x__position_axiom
  (assert (<= 0 test__rec__x__position))

(declare-fun test__rec__y__first__bit () Int)

(declare-fun test__rec__y__last__bit () Int)

(declare-fun test__rec__y__position () Int)

;; test__rec__y__first__bit_axiom
  (assert (<= 0 test__rec__y__first__bit))

;; test__rec__y__last__bit_axiom
  (assert (< test__rec__y__first__bit test__rec__y__last__bit))

;; test__rec__y__position_axiom
  (assert (<= 0 test__rec__y__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun dummy5 () us_rep)

(declare-datatypes () ((rec____ref (mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content
                                                            a))

(define-fun in_range4 ((rec__test__rec__x1 Int)
  (a us_rep)) Bool (= rec__test__rec__x1 (to_rep
                                         (rec__test__rec__x
                                         (us_split_discrs1 a)))))

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-fun test__rec__x__first__bit1 () Int)

(declare-fun test__rec__x__last__bit1 () Int)

(declare-fun test__rec__x__position1 () Int)

;; test__rec__x__first__bit_axiom
  (assert (<= 0 test__rec__x__first__bit1))

;; test__rec__x__last__bit_axiom
  (assert (< test__rec__x__first__bit1 test__rec__x__last__bit1))

;; test__rec__x__position_axiom
  (assert (<= 0 test__rec__x__position1))

(declare-fun test__rec__y__first__bit1 () Int)

(declare-fun test__rec__y__last__bit1 () Int)

(declare-fun test__rec__y__position1 () Int)

;; test__rec__y__first__bit_axiom
  (assert (<= 0 test__rec__y__first__bit1))

;; test__rec__y__last__bit_axiom
  (assert (< test__rec__y__first__bit1 test__rec__y__last__bit1))

;; test__rec__y__position_axiom
  (assert (<= 0 test__rec__y__position1))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun dummy6 () us_rep)

(declare-datatypes () ((rec1__ref (mk_rec1__ref (rec1__content us_rep)))))
(define-fun rec1__ref___projection ((a rec1__ref)) us_rep (rec1__content a))

(define-fun in_range5 ((rec__test__rec__x1 Int)
  (a us_rep)) Bool (= rec__test__rec__x1 (to_rep
                                         (rec__test__rec__x
                                         (us_split_discrs1 a)))))

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))

(declare-fun test__rec__x__first__bit2 () Int)

(declare-fun test__rec__x__last__bit2 () Int)

(declare-fun test__rec__x__position2 () Int)

;; test__rec__x__first__bit_axiom
  (assert (<= 0 test__rec__x__first__bit2))

;; test__rec__x__last__bit_axiom
  (assert (< test__rec__x__first__bit2 test__rec__x__last__bit2))

;; test__rec__x__position_axiom
  (assert (<= 0 test__rec__x__position2))

(declare-fun test__rec__y__first__bit2 () Int)

(declare-fun test__rec__y__last__bit2 () Int)

(declare-fun test__rec__y__position2 () Int)

;; test__rec__y__first__bit_axiom
  (assert (<= 0 test__rec__y__first__bit2))

;; test__rec__y__last__bit_axiom
  (assert (< test__rec__y__first__bit2 test__rec__y__last__bit2))

;; test__rec__y__position_axiom
  (assert (<= 0 test__rec__y__position2))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-fun dummy7 () us_rep)

(declare-datatypes () ((rec2__ref (mk_rec2__ref (rec2__content us_rep)))))
(define-fun rec2__ref___projection ((a rec2__ref)) us_rep (rec2__content a))

(declare-sort tarr3D1 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (tarr3D1 tarr3D1) Bool)

(declare-fun dummy8 () tarr3D1)

(declare-datatypes ()
((tarr3D1__ref (mk_tarr3D1__ref (tarr3D1__content tarr3D1)))))
(define-fun tarr3D1__ref___projection ((a tarr3D1__ref)) tarr3D1 (tarr3D1__content
                                                                 a))

(declare-datatypes ()
((map__ref5 (mk_map__ref5 (map__content5 (Array Int us_rep))))))
(declare-fun slide5 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide5 a first first) a) :pattern ((slide5 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide5 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide5 a old_first new_first) i)) ))))))

(declare-fun concat6 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat6 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat6 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat6 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton6 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton6 v i) i) v) :pattern ((select (singleton6 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_137 Int))
                           (=>
                           (and (<= a__first temp___idx_137)
                           (<= temp___idx_137 a__last))
                           (= (bool_eq5 (select a temp___idx_137)
                              (select b (+ (- b__first a__first) temp___idx_137))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_137 Int))
  (=> (and (<= a__first temp___idx_137) (<= temp___idx_137 a__last))
  (= (bool_eq5 (select a temp___idx_137)
     (select b (+ (- b__first a__first) temp___idx_137))) true))))))))

(define-fun dynamic_invariant ((temp___expr_276 (Array Int us_rep))
  (temp___is_init_273 Bool) (temp___skip_constant_274 Bool)
  (temp___do_toplevel_275 Bool)) Bool (forall ((temp___277 Int))
                                      (=>
                                      (and (<= 1 temp___277)
                                      (<= temp___277 3)) (in_range4 10
                                      (select temp___expr_276 temp___277)))))

(define-fun default_initial_assumption ((temp___expr_279 (Array Int us_rep))
  (temp___skip_top_level_280 Bool)) Bool (forall ((temp___281 Int))
                                         (=>
                                         (and (<= 1 temp___281)
                                         (<= temp___281 3))
                                         (= (to_rep
                                            (rec__test__rec__x
                                            (us_split_discrs1
                                            (select temp___expr_279 temp___281)))) 10))))

(declare-datatypes ()
((map__ref6 (mk_map__ref6 (map__content6 (Array Int us_rep))))))
(declare-fun slide6 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide6 a first first) a) :pattern ((slide6 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide6 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide6 a old_first new_first) i)) ))))))

(declare-fun concat7 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat7 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat7 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat7 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton7 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton7 v i) i) v) :pattern ((select (singleton7 v i) i)) ))))

(define-fun bool_eq7 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_138 Int))
                           (=>
                           (and (<= a__first temp___idx_138)
                           (<= temp___idx_138 a__last))
                           (= (bool_eq5 (select a temp___idx_138)
                              (select b (+ (- b__first a__first) temp___idx_138))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq7 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_138 Int))
  (=> (and (<= a__first temp___idx_138) (<= temp___idx_138 a__last))
  (= (bool_eq5 (select a temp___idx_138)
     (select b (+ (- b__first a__first) temp___idx_138))) true))))))))

(declare-sort tarr4D1 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (tarr4D1 tarr4D1) Bool)

(declare-fun dummy9 () tarr4D1)

(declare-datatypes ()
((tarr4D1__ref (mk_tarr4D1__ref (tarr4D1__content tarr4D1)))))
(define-fun tarr4D1__ref___projection ((a tarr4D1__ref)) tarr4D1 (tarr4D1__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_288 (Array Int us_rep))
  (temp___is_init_285 Bool) (temp___skip_constant_286 Bool)
  (temp___do_toplevel_287 Bool)) Bool (forall ((temp___289 Int))
                                      (=>
                                      (and (<= 1 temp___289)
                                      (<= temp___289 3)) (in_range5 10
                                      (select temp___expr_288 temp___289)))))

(define-fun default_initial_assumption1 ((temp___expr_291 (Array Int us_rep))
  (temp___skip_top_level_292 Bool)) Bool (forall ((temp___293 Int))
                                         (=>
                                         (and (<= 1 temp___293)
                                         (<= temp___293 3))
                                         (= (to_rep
                                            (rec__test__rec__x
                                            (us_split_discrs1
                                            (select temp___expr_291 temp___293)))) 10))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun in_range8 ((rec__test__rec__x1 Int)
  (a us_rep)) Bool (= rec__test__rec__x1 (to_rep
                                         (rec__test__rec__x
                                         (us_split_discrs1 a)))))

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))

(declare-fun test__rec__x__first__bit3 () Int)

(declare-fun test__rec__x__last__bit3 () Int)

(declare-fun test__rec__x__position3 () Int)

;; test__rec__x__first__bit_axiom
  (assert (<= 0 test__rec__x__first__bit3))

;; test__rec__x__last__bit_axiom
  (assert (< test__rec__x__first__bit3 test__rec__x__last__bit3))

;; test__rec__x__position_axiom
  (assert (<= 0 test__rec__x__position3))

(declare-fun test__rec__y__first__bit3 () Int)

(declare-fun test__rec__y__last__bit3 () Int)

(declare-fun test__rec__y__position3 () Int)

;; test__rec__y__first__bit_axiom
  (assert (<= 0 test__rec__y__first__bit3))

;; test__rec__y__last__bit_axiom
  (assert (< test__rec__y__first__bit3 test__rec__y__last__bit3))

;; test__rec__y__position_axiom
  (assert (<= 0 test__rec__y__position3))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-fun dummy10 () us_rep)

(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content us_rep)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_rep (t15b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun test__x__aggregate_def ((Array Int natural)) (Array Int (Array Int natural)))

;; def_axiom
  (assert
  (forall ((temp___299 (Array Int natural)))
  (forall ((temp___300 Int))
  (= (select (test__x__aggregate_def temp___299) temp___300) temp___299))))

(declare-fun temp___301 (Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___303 Int))
  (forall ((temp___304 Int))
  (= (select (temp___301 temp___303) temp___304) (of_rep1 temp___303)))))

(declare-fun convert ((Array Int (Array Int natural))) (Array Int (Array Int natural)))

;; convert__def
  (assert
  (forall ((a (Array Int (Array Int natural))))
  (forall ((temp___305 Int))
  (= (select a temp___305) (select (convert a) temp___305)))))

(declare-fun test__w__aggregate_def (us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___307 us_rep))
  (forall ((temp___308 Int))
  (= (select (test__w__aggregate_def temp___307) temp___308) temp___307))))

(declare-fun convert1 ((Array Int us_rep)) (Array Int us_rep))

;; convert__def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((temp___309 Int))
  (= (select a temp___309) (select (convert1 a) temp___309)))))

(declare-fun test__test_array__aggregate_def (Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___311 Int) (temp___312 Int) (temp___313 Int))
  (let ((temp___310 (test__test_array__aggregate_def temp___311 temp___312
                    temp___313)))
  (and
  (and (= (select temp___310 0) (of_rep temp___311))
  (= (select temp___310 1) (of_rep temp___312)))
  (= (select temp___310 2) (of_rep temp___313))))))

(declare-fun convert2 ((Array Int integer)) (Array Int integer_subtype))

;; convert__def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((temp___319 Int))
  (= (to_rep (select a temp___319)) (to_rep2
                                    (select (convert2 a) temp___319))))))

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant3 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(define-fun dynamic_invariant4 ((temp___expr_258 us_rep)
  (temp___is_init_255 Bool) (temp___skip_constant_256 Bool)
  (temp___do_toplevel_257 Bool)) Bool (=>
                                      (not (= temp___skip_constant_256 true))
                                      (in_range4 10 temp___expr_258)))

(define-fun default_initial_assumption2 ((temp___expr_260 us_rep)
  (temp___skip_top_level_261 Bool)) Bool (= (to_rep
                                            (rec__test__rec__x
                                            (us_split_discrs1
                                            temp___expr_260))) 10))

(define-fun dynamic_invariant5 ((temp___expr_267 us_rep)
  (temp___is_init_264 Bool) (temp___skip_constant_265 Bool)
  (temp___do_toplevel_266 Bool)) Bool (=>
                                      (not (= temp___skip_constant_265 true))
                                      (in_range5 10 temp___expr_267)))

(define-fun default_initial_assumption3 ((temp___expr_269 us_rep)
  (temp___skip_top_level_270 Bool)) Bool (= (to_rep
                                            (rec__test__rec__x
                                            (us_split_discrs1
                                            temp___expr_269))) 10))

(define-fun dynamic_invariant6 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range3 temp___expr_142)))

(declare-fun x () (Array Int (Array Int natural)))

(declare-fun y () (Array Int (Array Int natural)))

(declare-fun w () (Array Int us_rep))

(declare-fun z () (Array Int us_rep))

(declare-fun test_array () (Array Int integer))

(declare-fun result_array () (Array Int integer_subtype))

(declare-fun us () Int)

(declare-fun us1 () Int)

(declare-fun o () integer)

(declare-fun o1 () integer)

(declare-fun o2 () integer)

(declare-fun o3 () integer)

(declare-fun o4 () integer)

(declare-fun o5 () integer)

(declare-fun o6 () integer)

(declare-fun o7 () integer)

(declare-fun o8 () integer)

(declare-fun o9 () integer)

(declare-fun o10 () integer)

(declare-fun o11 () integer)

(declare-fun o12 () (Array Int us_rep))

(declare-fun o13 () (Array Int integer_subtype))

(declare-fun result () (Array Int (Array Int natural)))

(declare-fun x1 () (Array Int (Array Int natural)))

(declare-fun result1 () map__ref4)

(declare-fun y1 () (Array Int (Array Int natural)))

(declare-fun result2 () map__ref5)

(declare-fun w1 () (Array Int us_rep))

(declare-fun result3 () map__ref6)

(declare-fun z1 () (Array Int us_rep))

(declare-fun result4 () map__ref)

(declare-fun test_array1 () (Array Int integer))

(declare-fun result5 () map__ref1)

(declare-fun result_array1 () (Array Int integer_subtype))

(declare-fun result6 () map__ref1)

(declare-fun result_array2 () (Array Int integer_subtype))

(define-fun o14 () us_rep (mk___rep (mk___split_discrs o10)
                          (mk___split_fields o11)))

(define-fun o15 () us_rep (mk___rep (mk___split_discrs o8)
                          (mk___split_fields o9)))

(define-fun o16 () us_rep (mk___rep (mk___split_discrs o6)
                          (mk___split_fields o7)))

;; H
  (assert (and (= us 10) (in_range1 10)))

;; H
  (assert (and (= us1 10) (in_range1 10)))

;; H
  (assert (= result x))

;; H
  (assert (= x1 (test__x__aggregate_def (temp___301 1))))

;; H
  (assert (= result1 (mk_map__ref4 y)))

;; H
  (assert (= y1 (convert x1)))

;; H
  (assert (= (to_rep o1) 1))

;; H
  (assert (= o1 o2))

;; H
  (assert (= (to_rep o) 10))

;; H
  (assert (= o o3))

;; H
  (assert (= o4 o3))

;; H
  (assert (= o5 o2))

;; H
  (assert (= o16 (mk___rep (mk___split_discrs o4) (mk___split_fields o5))))

;; H
  (assert (= o15 o16))

;; H
  (assert (= o14 o15))

;; H
  (assert (= o12 (test__w__aggregate_def o14)))

;; H
  (assert (= result2 (mk_map__ref5 w)))

;; H
  (assert (= w1 o12))

;; H
  (assert (dynamic_invariant w1 true false true))

;; H
  (assert (= result3 (mk_map__ref6 z)))

;; H
  (assert (= z1 (convert1 w1)))

;; H
  (assert (dynamic_invariant1 z1 true false true))

;; H
  (assert (= result4 (mk_map__ref test_array)))

;; H
  (assert (= test_array1 (test__test_array__aggregate_def 1 2 3)))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 3))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100)) (= (to_rep1 (select (select y1 i) j)) 1))))))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 3))
  (= (to_rep (rec__test__rec__y (us_split_fields1 (select z1 i)))) 1))))

;; H
  (assert (= result5 (mk_map__ref1 result_array)))

;; H
  (assert (= result_array1 (convert2 test_array1)))

;; H
  (assert (= (to_rep2 (select result_array1 1)) 2))

;; H
  (assert
  (and (= o13 (cast test_array1))
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k 2))
  (= (to_rep2 (select o13 k)) (to_rep (select test_array1 k)))))))

;; H
  (assert (= result6 (mk_map__ref1 result_array1)))

;; H
  (assert (= result_array2 o13))

(assert
;; WP_parameter_def
 ;; File "test.adb", line 5, characters 0-0
  (not (= (to_rep2 (select result_array2 1)) 2)))
(check-sat)
(exit)
