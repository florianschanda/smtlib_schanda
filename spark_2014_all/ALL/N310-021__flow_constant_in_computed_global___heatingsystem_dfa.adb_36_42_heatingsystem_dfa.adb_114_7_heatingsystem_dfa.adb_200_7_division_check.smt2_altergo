(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type times

predicate in_range1(x: int) = ((0 <= x) and (x <= 86399))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : times, times -> bool

logic dummy : times

type times__ref = { times__content : times
}

function times__ref___projection(a: times__ref) : times = (a).times__content

logic to_rep : times -> int

logic of_rep : int -> times

axiom inversion_axiom : (forall x:times [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:times [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type displaydigits

predicate in_range2(x: int) = ((0 <= x) and (x <= 9))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : displaydigits, displaydigits -> bool

logic dummy1 : displaydigits

type displaydigits__ref = { displaydigits__content : displaydigits
}

function displaydigits__ref___projection(a: displaydigits__ref) : displaydigits =
  (a).displaydigits__content

logic to_rep1 : displaydigits -> int

logic of_rep1 : int -> displaydigits

axiom inversion_axiom1 :
  (forall x:displaydigits [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:displaydigits [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,displaydigits) farray
}

logic slide : (int,displaydigits) farray, int,
  int -> (int,displaydigits) farray

axiom slide_eq :
  (forall a:(int,displaydigits) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,displaydigits) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,displaydigits) farray, int, int,
  (int,displaydigits) farray, int, int -> (int,displaydigits) farray

axiom concat_def :
  (forall a:(int,displaydigits) farray. forall b:(int,displaydigits) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : displaydigits, int -> (int,displaydigits) farray

axiom singleton_def :
  (forall v:displaydigits.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,displaydigits) farray, int, int,
  (int,displaydigits) farray, int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,displaydigits) farray. forall a__first:int.
  forall a__last:int. forall b:(int,displaydigits) farray.
  forall b__first:int. forall b__last:int [bool_eq4(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,displaydigits) farray. forall b:(int,displaydigits) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,displaydigits) farray, int, int,
  (int,displaydigits) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,displaydigits) farray. forall b:(int,displaydigits) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,displaydigits) farray. forall b:(int,displaydigits) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,displaydigits) farray. forall b:(int,displaydigits) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

type positions

predicate in_range3(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positions, positions -> bool

logic dummy2 : positions

type positions__ref = { positions__content : positions
}

function positions__ref___projection(a: positions__ref) : positions =
  (a).positions__content

type advancemodes

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : advancemodes, advancemodes -> bool

logic dummy3 : advancemodes

type advancemodes__ref = { advancemodes__content : advancemodes
}

function advancemodes__ref___projection(a: advancemodes__ref) : advancemodes =
  (a).advancemodes__content

logic currentmode : us_private -> int

logic currentmode__function_guard : int, us_private -> prop

axiom currentmode__post_axiom :
  (forall advancebutton__advancemode:us_private
  [currentmode(advancebutton__advancemode)].
  in_range4(currentmode(advancebutton__advancemode)))

logic hoursinday : int

logic attr__ATTRIBUTE_ADDRESS : int

logic minutesinhour : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic secondsinminute : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic secondsinhour : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type programtimes

predicate in_range5(x: int) = ((2 <= x) and (x <= 5))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : programtimes, programtimes -> bool

logic dummy4 : programtimes

type programtimes__ref = { programtimes__content : programtimes
}

function programtimes__ref___projection(a: programtimes__ref) : programtimes =
  (a).programtimes__content

type map__ref1 = { map__content1 : (int,times) farray
}

logic slide1 : (int,times) farray, int, int -> (int,times) farray

axiom slide_eq1 :
  (forall a:(int,times) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,times) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,times) farray, int, int, (int,times) farray, int,
  int -> (int,times) farray

axiom concat_def1 :
  (forall a:(int,times) farray. forall b:(int,times) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : times, int -> (int,times) farray

axiom singleton_def1 :
  (forall v:times.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq8 : (int,times) farray, int, int, (int,times) farray, int,
  int -> bool

axiom bool_eq_def7 :
  (forall a:(int,times) farray. forall a__first:int. forall a__last:int.
  forall b:(int,times) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,times) farray. forall b:(int,times) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare1 : (int,times) farray, int, int, (int,times) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,times) farray. forall b:(int,times) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq8(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,times) farray. forall b:(int,times) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq8(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,times) farray. forall b:(int,times) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq8(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic c40b : int

logic attr__ATTRIBUTE_ADDRESS17 : int

type hours

predicate in_range6(x: int) = ((0 <= x) and (x <= 23))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : hours, hours -> bool

logic dummy5 : hours

type hours__ref = { hours__content : hours
}

function hours__ref_3__projection(a: hours__ref) : hours = (a).hours__content

type minutes

predicate in_range7(x: int) = ((0 <= x) and (x <= 59))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : minutes, minutes -> bool

logic dummy6 : minutes

type minutes__ref = { minutes__content : minutes
}

function minutes__ref_3__projection(a: minutes__ref) : minutes =
  (a).minutes__content

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic attr__ATTRIBUTE_ADDRESS20 : int

logic temp___268 : int, int, int, int -> (int,times) farray

axiom def_axiom :
  (forall temp___270:int. forall temp___271:int. forall temp___272:int.
  forall temp___273:int. (((((temp___268(temp___270, temp___271, temp___272,
  temp___273)[2]) = of_rep(temp___270)) and ((temp___268(temp___270,
  temp___271, temp___272, temp___273)[3]) = of_rep(temp___271))) and
  ((temp___268(temp___270, temp___271, temp___272,
  temp___273)[4]) = of_rep(temp___272))) and ((temp___268(temp___270,
  temp___271, temp___272, temp___273)[5]) = of_rep(temp___273))))

logic temp___275 : int, int, int, int -> (int,displaydigits) farray

axiom def_axiom1 :
  (forall temp___277:int. forall temp___278:int. forall temp___279:int.
  forall temp___280:int. (((((temp___275(temp___277, temp___278, temp___279,
  temp___280)[0]) = of_rep1(temp___277)) and ((temp___275(temp___277,
  temp___278, temp___279, temp___280)[1]) = of_rep1(temp___278))) and
  ((temp___275(temp___277, temp___278, temp___279,
  temp___280)[2]) = of_rep1(temp___279))) and ((temp___275(temp___277,
  temp___278, temp___279, temp___280)[3]) = of_rep1(temp___280))))

axiom hoursinday__def_axiom : (hoursinday = 24)

axiom minutesinhour__def_axiom : (minutesinhour = 60)

axiom secondsinminute__def_axiom : (secondsinminute = 60)

axiom secondsinhour__def_axiom : (secondsinhour = 3600)

 (* File "heatingsystem_dfa.adb", line 143, characters 0-0 *)
goal WP_parameter_def :
  (forall onofftime:(int,times) farray. forall clockoffset:int.
  forall heatingison:bool. forall o:int. forall o1:int. forall o2:times.
  forall o3:int. forall o4:int. forall o5:times. forall o6:int.
  forall o7:(int,times) farray. forall result:bool. forall heatingison1:bool.
  forall result1:int. forall clockoffset1:int.
  forall result2:(int,times) farray. forall onofftime1:(int,times) farray.
  forall onofftime2:(int,times) farray. forall clockoffset2:int.
  forall switchposition:int. forall timer:int. forall slowadvance:bool.
  forall fastadvance:bool. forall changetoslowmode:bool.
  forall changetofastmode:bool. forall slowadvance1:bool.
  forall fastadvance1:bool. forall changetoslowmode1:bool.
  forall changetofastmode1:bool. forall hour:int. forall minute:int.
  forall advancemode:us_private. forall advpressed:us_private.
  forall advtimer:us_private. forall switchposition1:int. forall timer1:int.
  forall result3:int. forall timer2:int. forall timer3:int.
  forall result4:bool. forall slowadvance2:bool. forall result5:int.
  forall clockoffset3:int. forall changetofastmode2:bool.
  forall advpressed1:us_private. forall advtimer1:us_private.
  forall advancemode1:us_private. forall fastadvance2:bool.
  forall advtimer2:us_private. forall result6:int. forall clockoffset4:int.
  forall changetoslowmode2:bool. forall advpressed2:us_private.
  forall advancemode2:us_private. forall result7:int. forall timer4:int.
  forall result8:int. forall timer5:int. forall result9:bool.
  forall slowadvance3:bool. forall result10:int. forall timer6:int.
  forall changetofastmode3:bool. forall advpressed3:us_private.
  forall advtimer3:us_private. forall advancemode3:us_private.
  forall fastadvance3:bool. forall advtimer4:us_private. forall result11:int.
  forall timer7:int. forall changetoslowmode3:bool.
  forall advpressed4:us_private. forall advancemode4:us_private.
  forall result12:(int,times) farray. forall onofftime3:(int,times) farray.
  forall result13:int. forall hour1:int. (in_range1(hoursinday) ->
  (in_range1(minutesinhour) -> (in_range1(secondsinminute) ->
  (in_range1(secondsinhour) -> (((0 <= 86399) -> in_range1(clockoffset)) ->
  (((result = heatingison) and (heatingison1 = of_int(0))) ->
  (((result1 = clockoffset) and (clockoffset1 = 0)) ->
  (((result2 = onofftime) and (onofftime1 = temp___268(0, 0, 0, 0))) ->
  (((0 <= 86399) -> in_range1(clockoffset2)) -> (((0 <= 5) ->
  in_range3(switchposition)) -> (((0 <= 86399) -> in_range1(timer)) ->
  (in_range3(switchposition1) -> ((((switchposition1 = 0) and
  ((in_range1(timer1) and ((result3 = timer1) and
  (timer2 = mod((timer1 + clockoffset2), 86400)))) and
  ((advtimer1 = advtimer) and ((advpressed1 = advpressed) and
  ((advancemode1 = advancemode) and
  ((changetofastmode3 = changetofastmode1) and
  ((changetoslowmode3 = changetoslowmode1) and
  ((fastadvance3 = fastadvance1) and ((slowadvance3 = slowadvance1) and
  ((changetofastmode2 = changetofastmode) and
  ((changetoslowmode2 = changetoslowmode) and
  ((fastadvance2 = fastadvance) and ((slowadvance2 = slowadvance) and
  ((clockoffset3 = clockoffset2) and
  (onofftime3 = onofftime2))))))))))))))) or ((not (switchposition1 = 0)) and
  ((((switchposition1 = 1) and ((in_range1(timer3) and
  (((((o = currentmode(advancemode)) and in_range4(o)) and (((o = 0) and
  (result4 = true)) or ((not (o = 0)) and (result4 = false)))) and
  (((result4 = true) and (((((slowadvance2 = true) and
  ((result5 = clockoffset2) and (clockoffset3 = mod((clockoffset2 + 60),
  86400)))) or ((not (slowadvance2 = true)) and
  (clockoffset3 = clockoffset2))) and ((not (changetofastmode2 = true)) ->
  (advancemode1 = advancemode))) and
  ((changetoslowmode2 = changetoslowmode) and
  (fastadvance2 = fastadvance)))) or ((not (result4 = true)) and
  (((((fastadvance2 = true) and ((result6 = clockoffset2) and
  (clockoffset4 = mod((clockoffset2 + 600), 86400)))) or
  ((not (fastadvance2 = true)) and (clockoffset4 = clockoffset2))) and
  ((not (changetoslowmode2 = true)) -> (advancemode2 = advancemode))) and
  ((advtimer1 = advtimer2) and ((advpressed1 = advpressed2) and
  ((advancemode1 = advancemode2) and
  ((changetofastmode2 = changetofastmode) and
  ((slowadvance2 = slowadvance) and
  (clockoffset3 = clockoffset4)))))))))) and ((result7 = timer3) and
  (timer4 = mod((timer3 + clockoffset3), 86400))))) and
  ((changetofastmode3 = changetofastmode1) and
  ((changetoslowmode3 = changetoslowmode1) and
  ((fastadvance3 = fastadvance1) and ((slowadvance3 = slowadvance1) and
  (onofftime3 = onofftime2))))))) or ((not (switchposition1 = 1)) and
  ((((((((2 <= switchposition1) and (switchposition1 <= 5)) and
  (o1 = switchposition1)) and (o2 = (onofftime2[o1]))) and
  (o3 = to_rep(o2))) and ((result8 = timer) and (timer5 = o3))) and
  (((((o4 = currentmode(advancemode)) and in_range4(o4)) and (((o4 = 0) and
  (result9 = true)) or ((not (o4 = 0)) and (result9 = false)))) and
  (((result9 = true) and (((((slowadvance3 = true) and
  ((result10 = timer5) and (timer6 = mod((timer5 + 60), 86400)))) or
  ((not (slowadvance3 = true)) and (timer6 = timer5))) and
  ((not (changetofastmode3 = true)) -> (advancemode3 = advancemode))) and
  ((changetoslowmode3 = changetoslowmode1) and
  (fastadvance3 = fastadvance1)))) or ((not (result9 = true)) and
  (((((fastadvance3 = true) and ((result11 = timer5) and
  (timer7 = mod((timer5 + 600), 86400)))) or ((not (fastadvance3 = true)) and
  (timer7 = timer5))) and ((not (changetoslowmode3 = true)) ->
  (advancemode4 = advancemode))) and ((advtimer3 = advtimer4) and
  ((advpressed3 = advpressed4) and ((advancemode3 = advancemode4) and
  ((changetofastmode3 = changetofastmode1) and
  ((slowadvance3 = slowadvance1) and (timer6 = timer7)))))))))) and
  (((to_rep(o5) = timer6) and ((((2 <= switchposition1) and
  (switchposition1 <= 5)) and (o6 = switchposition1)) and
  (o7 = (onofftime2[o6 <- o5])))) and ((result12 = onofftime2) and
  (onofftime3 = o7))))) and ((advtimer1 = advtimer3) and
  ((advpressed1 = advpressed3) and ((advancemode1 = advancemode3) and
  ((changetofastmode2 = changetofastmode) and
  ((changetoslowmode2 = changetoslowmode) and
  ((fastadvance2 = fastadvance) and ((slowadvance2 = slowadvance) and
  ((timer4 = timer6) and (clockoffset3 = clockoffset2)))))))))))) and
  (timer2 = timer4)))) -> (((timer2 = c40b) and in_range1(c40b)) ->
  (((0 <= 23) -> in_range6(hour)) -> (((0 <= 59) -> in_range7(minute)) ->
  (((result13 = hour) and (hour1 = comp_div(c40b,3600))) ->
  (not (60 = 0))))))))))))))))))))
