;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort event_count_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (event_count_type event_count_type) Bool)

(declare-fun dummy () event_count_type)

(declare-datatypes ()
((event_count_type__ref
 (mk_event_count_type__ref (event_count_type__content event_count_type)))))
(define-fun event_count_type__ref___projection ((a event_count_type__ref)) event_count_type
  (event_count_type__content a))

(define-fun dynamic_invariant ((temp___expr_216 Int)
  (temp___is_init_213 Bool) (temp___skip_constant_214 Bool)
  (temp___do_toplevel_215 Bool)) Bool (=>
                                      (or (= temp___is_init_213 true)
                                      (<= 0 64)) (in_range1 temp___expr_216)))

(declare-sort year_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 2000 x) (<= x 2099)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (year_type year_type) Bool)

(declare-fun dummy1 () year_type)

(declare-datatypes ()
((year_type__ref (mk_year_type__ref (year_type__content year_type)))))
(define-fun year_type__ref___projection ((a year_type__ref)) year_type
  (year_type__content a))

(declare-fun to_rep (year_type) Int)

(declare-fun of_rep (Int) year_type)

;; inversion_axiom
  (assert
  (forall ((x year_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x year_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort month_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (month_type month_type) Bool)

(declare-fun dummy2 () month_type)

(declare-datatypes ()
((month_type__ref (mk_month_type__ref (month_type__content month_type)))))
(define-fun month_type__ref___projection ((a month_type__ref)) month_type
  (month_type__content a))

(declare-fun to_rep1 (month_type) Int)

(declare-fun of_rep1 (Int) month_type)

;; inversion_axiom
  (assert
  (forall ((x month_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x month_type)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort day_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (day_type day_type) Bool)

(declare-fun dummy3 () day_type)

(declare-datatypes ()
((day_type__ref (mk_day_type__ref (day_type__content day_type)))))
(define-fun day_type__ref___projection ((a day_type__ref)) day_type (day_type__content
                                                                    a))

(declare-fun to_rep2 (day_type) Int)

(declare-fun of_rep2 (Int) day_type)

;; inversion_axiom
  (assert
  (forall ((x day_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x day_type)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__dates__date__day day_type)(rec__dates__date__month month_type)(rec__dates__date__year year_type)))))
(define-fun us_split_fields_Day__projection ((a us_split_fields)) day_type
  (rec__dates__date__day a))

(define-fun us_split_fields_Month__projection ((a us_split_fields)) month_type
  (rec__dates__date__month a))

(define-fun us_split_fields_Year__projection ((a us_split_fields)) year_type
  (rec__dates__date__year a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep2
                           (rec__dates__date__day (us_split_fields1 a)))
                        (to_rep2
                        (rec__dates__date__day (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__dates__date__month (us_split_fields1 a)))
                        (to_rep1
                        (rec__dates__date__month (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__dates__date__year (us_split_fields1 a)))
                        (to_rep
                        (rec__dates__date__year (us_split_fields1 b)))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dates__date__day__first__bit () Int)

(declare-fun dates__date__day__last__bit () Int)

(declare-fun dates__date__day__position () Int)

;; dates__date__day__first__bit_axiom
  (assert (<= 0 dates__date__day__first__bit))

;; dates__date__day__last__bit_axiom
  (assert (< dates__date__day__first__bit dates__date__day__last__bit))

;; dates__date__day__position_axiom
  (assert (<= 0 dates__date__day__position))

(declare-fun dates__date__month__first__bit () Int)

(declare-fun dates__date__month__last__bit () Int)

(declare-fun dates__date__month__position () Int)

;; dates__date__month__first__bit_axiom
  (assert (<= 0 dates__date__month__first__bit))

;; dates__date__month__last__bit_axiom
  (assert (< dates__date__month__first__bit dates__date__month__last__bit))

;; dates__date__month__position_axiom
  (assert (<= 0 dates__date__month__position))

(declare-fun dates__date__year__first__bit () Int)

(declare-fun dates__date__year__last__bit () Int)

(declare-fun dates__date__year__position () Int)

;; dates__date__year__first__bit_axiom
  (assert (<= 0 dates__date__year__first__bit))

;; dates__date__year__last__bit_axiom
  (assert (< dates__date__year__first__bit dates__date__year__last__bit))

;; dates__date__year__position_axiom
  (assert (<= 0 dates__date__year__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun dummy4 () us_rep)

(declare-datatypes () ((date__ref (mk_date__ref (date__content us_rep)))))
(define-fun date__ref___projection ((a date__ref)) us_rep (date__content a))

(declare-sort hour_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 23)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (hour_type hour_type) Bool)

(declare-fun dummy5 () hour_type)

(declare-datatypes ()
((hour_type__ref (mk_hour_type__ref (hour_type__content hour_type)))))
(define-fun hour_type__ref___projection ((a hour_type__ref)) hour_type
  (hour_type__content a))

(declare-fun to_rep3 (hour_type) Int)

(declare-fun of_rep3 (Int) hour_type)

;; inversion_axiom
  (assert
  (forall ((x hour_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x hour_type)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort minute_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 59)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (minute_type minute_type) Bool)

(declare-fun dummy6 () minute_type)

(declare-datatypes ()
((minute_type__ref (mk_minute_type__ref (minute_type__content minute_type)))))
(define-fun minute_type__ref___projection ((a minute_type__ref)) minute_type
  (minute_type__content a))

(declare-fun to_rep4 (minute_type) Int)

(declare-fun of_rep4 (Int) minute_type)

;; inversion_axiom
  (assert
  (forall ((x minute_type))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x minute_type)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort second_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 59)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (second_type second_type) Bool)

(declare-fun dummy7 () second_type)

(declare-datatypes ()
((second_type__ref (mk_second_type__ref (second_type__content second_type)))))
(define-fun second_type__ref___projection ((a second_type__ref)) second_type
  (second_type__content a))

(declare-fun to_rep5 (second_type) Int)

(declare-fun of_rep5 (Int) second_type)

;; inversion_axiom
  (assert
  (forall ((x second_type))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x second_type)) (! (in_range7
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__dates__time__hour hour_type)(rec__dates__time__minute minute_type)(rec__dates__time__second second_type)))))
(define-fun us_split_fields_Hour__projection ((a us_split_fields2)) hour_type
  (rec__dates__time__hour a))

(define-fun us_split_fields_Minute__projection ((a us_split_fields2)) minute_type
  (rec__dates__time__minute a))

(define-fun us_split_fields_Second__projection ((a us_split_fields2)) second_type
  (rec__dates__time__second a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep3
                            (rec__dates__time__hour (us_split_fields3 a)))
                         (to_rep3
                         (rec__dates__time__hour (us_split_fields3 b))))
                         (= (to_rep4
                            (rec__dates__time__minute (us_split_fields3 a)))
                         (to_rep4
                         (rec__dates__time__minute (us_split_fields3 b)))))
                         (= (to_rep5
                            (rec__dates__time__second (us_split_fields3 a)))
                         (to_rep5
                         (rec__dates__time__second (us_split_fields3 b)))))
                    true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun dates__time__hour__first__bit () Int)

(declare-fun dates__time__hour__last__bit () Int)

(declare-fun dates__time__hour__position () Int)

;; dates__time__hour__first__bit_axiom
  (assert (<= 0 dates__time__hour__first__bit))

;; dates__time__hour__last__bit_axiom
  (assert (< dates__time__hour__first__bit dates__time__hour__last__bit))

;; dates__time__hour__position_axiom
  (assert (<= 0 dates__time__hour__position))

(declare-fun dates__time__minute__first__bit () Int)

(declare-fun dates__time__minute__last__bit () Int)

(declare-fun dates__time__minute__position () Int)

;; dates__time__minute__first__bit_axiom
  (assert (<= 0 dates__time__minute__first__bit))

;; dates__time__minute__last__bit_axiom
  (assert (< dates__time__minute__first__bit dates__time__minute__last__bit))

;; dates__time__minute__position_axiom
  (assert (<= 0 dates__time__minute__position))

(declare-fun dates__time__second__first__bit () Int)

(declare-fun dates__time__second__last__bit () Int)

(declare-fun dates__time__second__position () Int)

;; dates__time__second__first__bit_axiom
  (assert (<= 0 dates__time__second__first__bit))

;; dates__time__second__last__bit_axiom
  (assert (< dates__time__second__first__bit dates__time__second__last__bit))

;; dates__time__second__position_axiom
  (assert (<= 0 dates__time__second__position))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-fun dummy8 () us_rep1)

(declare-datatypes () ((time__ref (mk_time__ref (time__content us_rep1)))))
(define-fun time__ref___projection ((a time__ref)) us_rep1 (time__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__dates__datetime__date_part us_rep)(rec__dates__datetime__time_part us_rep1)))))
(define-fun us_split_fields_Date_Part__projection ((a us_split_fields4)) us_rep
  (rec__dates__datetime__date_part a))

(define-fun us_split_fields_Time_Part__projection ((a us_split_fields4)) us_rep1
  (rec__dates__datetime__time_part a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (bool_eq
                            (rec__dates__datetime__date_part
                            (us_split_fields5 a))
                            (rec__dates__datetime__date_part
                            (us_split_fields5 b))) true)
                         (= (bool_eq1
                            (rec__dates__datetime__time_part
                            (us_split_fields5 a))
                            (rec__dates__datetime__time_part
                            (us_split_fields5 b))) true))
                    true false))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun dates__datetime__date_part__first__bit () Int)

(declare-fun dates__datetime__date_part__last__bit () Int)

(declare-fun dates__datetime__date_part__position () Int)

;; dates__datetime__date_part__first__bit_axiom
  (assert (<= 0 dates__datetime__date_part__first__bit))

;; dates__datetime__date_part__last__bit_axiom
  (assert
  (< dates__datetime__date_part__first__bit dates__datetime__date_part__last__bit))

;; dates__datetime__date_part__position_axiom
  (assert (<= 0 dates__datetime__date_part__position))

(declare-fun dates__datetime__time_part__first__bit () Int)

(declare-fun dates__datetime__time_part__last__bit () Int)

(declare-fun dates__datetime__time_part__position () Int)

;; dates__datetime__time_part__first__bit_axiom
  (assert (<= 0 dates__datetime__time_part__first__bit))

;; dates__datetime__time_part__last__bit_axiom
  (assert
  (< dates__datetime__time_part__first__bit dates__datetime__time_part__last__bit))

;; dates__datetime__time_part__position_axiom
  (assert (<= 0 dates__datetime__time_part__position))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-fun dummy9 () us_rep2)

(declare-datatypes ()
((datetime__ref (mk_datetime__ref (datetime__content us_rep2)))))
(define-fun datetime__ref___projection ((a datetime__ref)) us_rep2 (datetime__content
                                                                   a))

(declare-sort description_count_type 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (description_count_type description_count_type) Bool)

(declare-fun dummy10 () description_count_type)

(declare-datatypes ()
((description_count_type__ref
 (mk_description_count_type__ref
 (description_count_type__content description_count_type)))))
(define-fun description_count_type__ref___projection ((a description_count_type__ref)) description_count_type
  (description_count_type__content a))

(declare-fun to_rep6 (description_count_type) Int)

(declare-fun of_rep6 (Int) description_count_type)

;; inversion_axiom
  (assert
  (forall ((x description_count_type))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x description_count_type)) (! (in_range8
  (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-sort character 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (character character) Bool)

(declare-fun dummy11 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep7 (character) Int)

(declare-fun of_rep7 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range9
  (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                              (of_rep7 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep7 (select a temp___idx_78)) (to_rep7
                                                                 (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep7 (select a temp___idx_78)) (to_rep7
                                        (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep7 (select a (+ i 1))) (to_rep7 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep7 (select b (+ i 1))) (to_rep7 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy12 () (Array Int character))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq12 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__datebook__event_record__description_text (Array Int character))(rec__datebook__event_record__description_size description_count_type)(rec__datebook__event_record__date us_rep2)(rec__datebook__event_record__is_used Bool)))))
(define-fun us_split_fields_Description_Text__projection ((a us_split_fields6)) (Array Int character)
  (rec__datebook__event_record__description_text a))

(define-fun us_split_fields_Description_Size__projection ((a us_split_fields6)) description_count_type
  (rec__datebook__event_record__description_size a))

(define-fun us_split_fields_Date__projection ((a us_split_fields6)) us_rep2
  (rec__datebook__event_record__date a))

(define-fun us_split_fields_Is_Used__projection ((a us_split_fields6)) Bool
  (rec__datebook__event_record__is_used a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_4__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                a))

(define-fun bool_eq4 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq3
                            (rec__datebook__event_record__description_text
                            (us_split_fields7 a)) 1 128
                            (rec__datebook__event_record__description_text
                            (us_split_fields7 b)) 1 128) true)
                         (= (to_rep6
                            (rec__datebook__event_record__description_size
                            (us_split_fields7 a))) (to_rep6
                                                   (rec__datebook__event_record__description_size
                                                   (us_split_fields7 b)))))
                         (= (bool_eq2
                            (rec__datebook__event_record__date
                            (us_split_fields7 a))
                            (rec__datebook__event_record__date
                            (us_split_fields7 b))) true))
                         (= (rec__datebook__event_record__is_used
                            (us_split_fields7 a)) (rec__datebook__event_record__is_used
                                                  (us_split_fields7 b))))
                    true false))

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-fun datebook__event_record__description_text__first__bit () Int)

(declare-fun datebook__event_record__description_text__last__bit () Int)

(declare-fun datebook__event_record__description_text__position () Int)

;; datebook__event_record__description_text__first__bit_axiom
  (assert (<= 0 datebook__event_record__description_text__first__bit))

;; datebook__event_record__description_text__last__bit_axiom
  (assert
  (< datebook__event_record__description_text__first__bit datebook__event_record__description_text__last__bit))

;; datebook__event_record__description_text__position_axiom
  (assert (<= 0 datebook__event_record__description_text__position))

(declare-fun datebook__event_record__description_size__first__bit () Int)

(declare-fun datebook__event_record__description_size__last__bit () Int)

(declare-fun datebook__event_record__description_size__position () Int)

;; datebook__event_record__description_size__first__bit_axiom
  (assert (<= 0 datebook__event_record__description_size__first__bit))

;; datebook__event_record__description_size__last__bit_axiom
  (assert
  (< datebook__event_record__description_size__first__bit datebook__event_record__description_size__last__bit))

;; datebook__event_record__description_size__position_axiom
  (assert (<= 0 datebook__event_record__description_size__position))

(declare-fun datebook__event_record__date__first__bit () Int)

(declare-fun datebook__event_record__date__last__bit () Int)

(declare-fun datebook__event_record__date__position () Int)

;; datebook__event_record__date__first__bit_axiom
  (assert (<= 0 datebook__event_record__date__first__bit))

;; datebook__event_record__date__last__bit_axiom
  (assert
  (< datebook__event_record__date__first__bit datebook__event_record__date__last__bit))

;; datebook__event_record__date__position_axiom
  (assert (<= 0 datebook__event_record__date__position))

(declare-fun datebook__event_record__is_used__first__bit () Int)

(declare-fun datebook__event_record__is_used__last__bit () Int)

(declare-fun datebook__event_record__is_used__position () Int)

;; datebook__event_record__is_used__first__bit_axiom
  (assert (<= 0 datebook__event_record__is_used__first__bit))

;; datebook__event_record__is_used__last__bit_axiom
  (assert
  (< datebook__event_record__is_used__first__bit datebook__event_record__is_used__last__bit))

;; datebook__event_record__is_used__position_axiom
  (assert (<= 0 datebook__event_record__is_used__position))

(declare-fun user_eq13 (us_rep3 us_rep3) Bool)

(declare-fun dummy13 () us_rep3)

(declare-datatypes ()
((event_record__ref (mk_event_record__ref (event_record__content us_rep3)))))
(define-fun event_record__ref___projection ((a event_record__ref)) us_rep3
  (event_record__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int
  Int) (Array Int us_rep3))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep3 Int) (Array Int us_rep3))

;; singleton_def
  (assert
  (forall ((v us_rep3))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq4 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq4 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort event_index_type 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq14 (event_index_type event_index_type) Bool)

(declare-fun dummy14 () event_index_type)

(declare-datatypes ()
((event_index_type__ref
 (mk_event_index_type__ref (event_index_type__content event_index_type)))))
(define-fun event_index_type__ref___projection ((a event_index_type__ref)) event_index_type
  (event_index_type__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range9 temp___expr_63)))

(define-fun dynamic_invariant2 ((temp___expr_257 Int)
  (temp___is_init_254 Bool) (temp___skip_constant_255 Bool)
  (temp___do_toplevel_256 Bool)) Bool (=>
                                      (or (= temp___is_init_254 true)
                                      (<= 0 128)) (in_range8
                                      temp___expr_257)))

(define-fun dynamic_invariant3 ((temp___expr_293 Int)
  (temp___is_init_290 Bool) (temp___skip_constant_291 Bool)
  (temp___do_toplevel_292 Bool)) Bool (=>
                                      (or (= temp___is_init_290 true)
                                      (<= 1 64)) (in_range10
                                      temp___expr_293)))

(define-fun dynamic_invariant4 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 2000 2099)) (in_range2
                                      temp___expr_136)))

(define-fun dynamic_invariant5 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 12)) (in_range3 temp___expr_142)))

(define-fun dynamic_invariant6 ((temp___expr_148 Int)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (or (= temp___is_init_145 true)
                                      (<= 1 31)) (in_range4 temp___expr_148)))

(define-fun dynamic_invariant7 ((temp___expr_154 Int)
  (temp___is_init_151 Bool) (temp___skip_constant_152 Bool)
  (temp___do_toplevel_153 Bool)) Bool (=>
                                      (or (= temp___is_init_151 true)
                                      (<= 0 23)) (in_range5 temp___expr_154)))

(define-fun dynamic_invariant8 ((temp___expr_160 Int)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (=>
                                      (or (= temp___is_init_157 true)
                                      (<= 0 59)) (in_range6 temp___expr_160)))

(define-fun dynamic_invariant9 ((temp___expr_166 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)) Bool (=>
                                      (or (= temp___is_init_163 true)
                                      (<= 0 59)) (in_range7 temp___expr_166)))

(declare-fun event_array () (Array Int us_rep3))

(declare-fun count () Int)

(declare-fun index () Int)

(declare-fun o () Int)

(declare-fun result () Int)

(declare-fun count1 () Int)

(declare-fun result1 () Int)

(declare-fun index1 () Int)

(declare-fun count2 () Int)

(declare-fun index2 () Int)

(declare-fun result2 () Int)

(declare-fun count3 () Int)

(declare-fun result3 () Int)

(declare-fun index3 () Int)

;; H
  (assert (= result count))

;; H
  (assert (= count1 0))

;; H
  (assert (in_range1 count1))

;; H
  (assert (= result1 index))

;; H
  (assert (= index1 1))

;; H
  (assert (<= 1 index1))

;; H
  (assert (<= index1 64))

;; H
  (assert (< count2 index2))

;; H
  (assert
  (and
  (and (=> (<= 0 64) (in_range1 count2)) (=> (<= 1 64) (in_range10 index2)))
  (and (<= 1 index2) (<= index2 64))))

;; H
  (assert
  (=>
  (= (rec__datebook__event_record__is_used
     (us_split_fields7 (select event_array index2))) true)
  (and (= o (+ count2 1)) (in_range1 (+ count2 1)))))

;; H
  (assert
  (=>
  (= (rec__datebook__event_record__is_used
     (us_split_fields7 (select event_array index2))) true)
  (= result2 count2)))

;; H
  (assert
  (=>
  (= (rec__datebook__event_record__is_used
     (us_split_fields7 (select event_array index2))) true)
  (= count3 o)))

;; H
  (assert
  (=>
  (not
  (= (rec__datebook__event_record__is_used
     (us_split_fields7 (select event_array index2))) true))
  (= count3 count2)))

;; H
  (assert (not (= index2 64)))

;; H
  (assert (= result3 index2))

;; H
  (assert (= index3 (+ index2 1)))

(assert
;; WP_parameter_def
 ;; File "datebook.ads", line 20, characters 0-0
  (not (< count3 index3)))
(check-sat)
(exit)
