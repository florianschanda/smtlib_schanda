;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort usertexti 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (usertexti usertexti) Bool)

(declare-fun dummy4 () usertexti)

(declare-datatypes ()
((usertexti__ref (mk_usertexti__ref (usertexti__content usertexti)))))
(define-fun usertexti__ref___projection ((a usertexti__ref)) usertexti
  (usertexti__content a))

(declare-sort issueridt 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (issueridt issueridt) Bool)

(declare-fun dummy5 () issueridt)

(declare-datatypes ()
((issueridt__ref (mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt
  (issueridt__content a))

(declare-fun to_rep2 (issueridt) Int)

(declare-fun of_rep2 (Int) issueridt)

;; inversion_axiom
  (assert
  (forall ((x issueridt))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x issueridt)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort namecountt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 40)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (namecountt namecountt) Bool)

(declare-fun dummy6 () namecountt)

(declare-datatypes ()
((namecountt__ref (mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt
  (namecountt__content a))

(declare-fun to_rep3 (namecountt) Int)

(declare-fun of_rep3 (Int) namecountt)

;; inversion_axiom
  (assert
  (forall ((x namecountt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x namecountt)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-fun dummy7 () (Array Int character))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields)) issueridt
  (rec__cryptotypes__issuert__id a))

(define-fun us_split_fields_NameLength__projection ((a us_split_fields)) namecountt
  (rec__cryptotypes__issuert__namelength a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__cryptotypes__issuert__name a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_4__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep2
                           (rec__cryptotypes__issuert__id
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__cryptotypes__issuert__id
                                                  (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__cryptotypes__issuert__namelength
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__cryptotypes__issuert__namelength
                                                  (us_split_fields1 b)))))
                        (= (bool_eq
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 a)) 1 40
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 b)) 1 40) true))
                   true false))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun cryptotypes__issuert__id__first__bit () Int)

(declare-fun cryptotypes__issuert__id__last__bit () Int)

(declare-fun cryptotypes__issuert__id__position () Int)

;; cryptotypes__issuert__id__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__id__first__bit))

;; cryptotypes__issuert__id__last__bit_axiom
  (assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; cryptotypes__issuert__id__position_axiom
  (assert (<= 0 cryptotypes__issuert__id__position))

(declare-fun cryptotypes__issuert__namelength__first__bit () Int)

(declare-fun cryptotypes__issuert__namelength__last__bit () Int)

(declare-fun cryptotypes__issuert__namelength__position () Int)

;; cryptotypes__issuert__namelength__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; cryptotypes__issuert__namelength__last__bit_axiom
  (assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; cryptotypes__issuert__namelength__position_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-fun cryptotypes__issuert__name__first__bit () Int)

(declare-fun cryptotypes__issuert__name__last__bit () Int)

(declare-fun cryptotypes__issuert__name__position () Int)

;; cryptotypes__issuert__name__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__name__first__bit))

;; cryptotypes__issuert__name__last__bit_axiom
  (assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; cryptotypes__issuert__name__position_axiom
  (assert (<= 0 cryptotypes__issuert__name__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-fun dummy8 () us_rep)

(declare-datatypes ()
((issuert__ref (mk_issuert__ref (issuert__content us_rep)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep (issuert__content
                                                                a))

(declare-sort serialnumbert 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (serialnumbert serialnumbert) Bool)

(declare-fun dummy9 () serialnumbert)

(declare-datatypes ()
((serialnumbert__ref
 (mk_serialnumbert__ref (serialnumbert__content serialnumbert)))))
(define-fun serialnumbert__ref___projection ((a serialnumbert__ref)) serialnumbert
  (serialnumbert__content a))

(declare-fun to_rep4 (serialnumbert) Int)

(declare-fun of_rep4 (Int) serialnumbert)

;; inversion_axiom
  (assert
  (forall ((x serialnumbert))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x serialnumbert)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__certtypes__idt__issuer us_rep)(rec__certtypes__idt__serialnumber serialnumbert)))))
(define-fun us_split_fields_Issuer__projection ((a us_split_fields2)) us_rep
  (rec__certtypes__idt__issuer a))

(define-fun us_split_fields_SerialNumber__projection ((a us_split_fields2)) serialnumbert
  (rec__certtypes__idt__serialnumber a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_10__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                 a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq2
                            (rec__certtypes__idt__issuer
                            (us_split_fields3 a))
                            (rec__certtypes__idt__issuer
                            (us_split_fields3 b))) true)
                         (= (to_rep4
                            (rec__certtypes__idt__serialnumber
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__certtypes__idt__serialnumber
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-fun certtypes__idt__issuer__first__bit () Int)

(declare-fun certtypes__idt__issuer__last__bit () Int)

(declare-fun certtypes__idt__issuer__position () Int)

;; certtypes__idt__issuer__first__bit_axiom
  (assert (<= 0 certtypes__idt__issuer__first__bit))

;; certtypes__idt__issuer__last__bit_axiom
  (assert
  (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))

;; certtypes__idt__issuer__position_axiom
  (assert (<= 0 certtypes__idt__issuer__position))

(declare-fun certtypes__idt__serialnumber__first__bit () Int)

(declare-fun certtypes__idt__serialnumber__last__bit () Int)

(declare-fun certtypes__idt__serialnumber__position () Int)

;; certtypes__idt__serialnumber__first__bit_axiom
  (assert (<= 0 certtypes__idt__serialnumber__first__bit))

;; certtypes__idt__serialnumber__last__bit_axiom
  (assert
  (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))

;; certtypes__idt__serialnumber__position_axiom
  (assert (<= 0 certtypes__idt__serialnumber__position))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-fun dummy10 () us_rep1)

(declare-datatypes () ((idt__ref (mk_idt__ref (idt__content us_rep1)))))
(define-fun idt__ref___projection ((a idt__ref)) us_rep1 (idt__content a))

(declare-sort yearst 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (yearst yearst) Bool)

(declare-fun dummy11 () yearst)

(declare-datatypes ()
((yearst__ref (mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content
                                                              a))

(declare-fun to_rep5 (yearst) Int)

(declare-fun of_rep5 (Int) yearst)

;; inversion_axiom
  (assert
  (forall ((x yearst))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x yearst)) (! (in_range7 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort monthst 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (monthst monthst) Bool)

(declare-fun dummy12 () monthst)

(declare-datatypes ()
((monthst__ref (mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content
                                                                 a))

(declare-fun to_rep6 (monthst) Int)

(declare-fun of_rep6 (Int) monthst)

;; inversion_axiom
  (assert
  (forall ((x monthst))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x monthst)) (! (in_range8 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-sort dayst 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq13 (dayst dayst) Bool)

(declare-fun dummy13 () dayst)

(declare-datatypes () ((dayst__ref (mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))

(declare-fun to_rep7 (dayst) Int)

(declare-fun of_rep7 (Int) dayst)

;; inversion_axiom
  (assert
  (forall ((x dayst))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x dayst)) (! (in_range9 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                              (of_rep7 x))) )))

(declare-sort millisecst 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq14 (millisecst millisecst) Bool)

(declare-fun dummy14 () millisecst)

(declare-datatypes ()
((millisecst__ref (mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst
  (millisecst__content a))

(declare-fun to_rep8 (millisecst) Int)

(declare-fun of_rep8 (Int) millisecst)

;; inversion_axiom
  (assert
  (forall ((x millisecst))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x millisecst)) (! (in_range10
  (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                               (of_rep8 x))) )))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields4)) yearst
  (rec__clock__timet__year a))

(define-fun us_split_fields_Month__projection ((a us_split_fields4)) monthst
  (rec__clock__timet__month a))

(define-fun us_split_fields_Day__projection ((a us_split_fields4)) dayst
  (rec__clock__timet__day a))

(define-fun us_split_fields_MilliSec__projection ((a us_split_fields4)) millisecst
  (rec__clock__timet__millisec a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                               a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep5
                            (rec__clock__timet__year (us_split_fields5 a)))
                         (to_rep5
                         (rec__clock__timet__year (us_split_fields5 b))))
                         (= (to_rep6
                            (rec__clock__timet__month (us_split_fields5 a)))
                         (to_rep6
                         (rec__clock__timet__month (us_split_fields5 b)))))
                         (= (to_rep7
                            (rec__clock__timet__day (us_split_fields5 a)))
                         (to_rep7
                         (rec__clock__timet__day (us_split_fields5 b)))))
                         (= (to_rep8
                            (rec__clock__timet__millisec
                            (us_split_fields5 a))) (to_rep8
                                                   (rec__clock__timet__millisec
                                                   (us_split_fields5 b)))))
                    true false))

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-fun clock__timet__year__first__bit () Int)

(declare-fun clock__timet__year__last__bit () Int)

(declare-fun clock__timet__year__position () Int)

;; clock__timet__year__first__bit_axiom
  (assert (<= 0 clock__timet__year__first__bit))

;; clock__timet__year__last__bit_axiom
  (assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; clock__timet__year__position_axiom
  (assert (<= 0 clock__timet__year__position))

(declare-fun clock__timet__month__first__bit () Int)

(declare-fun clock__timet__month__last__bit () Int)

(declare-fun clock__timet__month__position () Int)

;; clock__timet__month__first__bit_axiom
  (assert (<= 0 clock__timet__month__first__bit))

;; clock__timet__month__last__bit_axiom
  (assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; clock__timet__month__position_axiom
  (assert (<= 0 clock__timet__month__position))

(declare-fun clock__timet__day__first__bit () Int)

(declare-fun clock__timet__day__last__bit () Int)

(declare-fun clock__timet__day__position () Int)

;; clock__timet__day__first__bit_axiom
  (assert (<= 0 clock__timet__day__first__bit))

;; clock__timet__day__last__bit_axiom
  (assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; clock__timet__day__position_axiom
  (assert (<= 0 clock__timet__day__position))

(declare-fun clock__timet__millisec__first__bit () Int)

(declare-fun clock__timet__millisec__last__bit () Int)

(declare-fun clock__timet__millisec__position () Int)

;; clock__timet__millisec__first__bit_axiom
  (assert (<= 0 clock__timet__millisec__first__bit))

;; clock__timet__millisec__last__bit_axiom
  (assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; clock__timet__millisec__position_axiom
  (assert (<= 0 clock__timet__millisec__position))

(declare-fun user_eq15 (us_rep2 us_rep2) Bool)

(declare-fun dummy15 () us_rep2)

(declare-datatypes ()
((timet__ref (mk_timet__ref (timet__content us_rep2)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep2 (timet__content
                                                             a))

(declare-sort algorithmt 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq16 (algorithmt algorithmt) Bool)

(declare-fun dummy16 () algorithmt)

(declare-datatypes ()
((algorithmt__ref (mk_algorithmt__ref (algorithmt__content algorithmt)))))
(define-fun algorithmt__ref___projection ((a algorithmt__ref)) algorithmt
  (algorithmt__content a))

(declare-fun to_rep9 (algorithmt) Int)

(declare-fun of_rep9 (Int) algorithmt)

;; inversion_axiom
  (assert
  (forall ((x algorithmt))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x algorithmt)) (! (in_range11
  (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                               (of_rep9 x))) )))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__cert__attr__contentst__id us_rep1)(rec__cert__attr__contentst__notbefore us_rep2)(rec__cert__attr__contentst__notafter us_rep2)(rec__cert__attr__contentst__mechanism algorithmt)(rec__cert__attr__contentst__basecertid us_rep1)))))
(define-fun us_split_fields_ID4__projection ((a us_split_fields6)) us_rep1
  (rec__cert__attr__contentst__id a))

(define-fun us_split_fields_NotBefore2__projection ((a us_split_fields6)) us_rep2
  (rec__cert__attr__contentst__notbefore a))

(define-fun us_split_fields_NotAfter2__projection ((a us_split_fields6)) us_rep2
  (rec__cert__attr__contentst__notafter a))

(define-fun us_split_fields_Mechanism2__projection ((a us_split_fields6)) algorithmt
  (rec__cert__attr__contentst__mechanism a))

(define-fun us_split_fields_BaseCertID__projection ((a us_split_fields6)) us_rep1
  (rec__cert__attr__contentst__basecertid a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_11__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_12__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                 a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (bool_eq3
                            (rec__cert__attr__contentst__id
                            (us_split_fields7 a))
                            (rec__cert__attr__contentst__id
                            (us_split_fields7 b))) true)
                         (= (bool_eq4
                            (rec__cert__attr__contentst__notbefore
                            (us_split_fields7 a))
                            (rec__cert__attr__contentst__notbefore
                            (us_split_fields7 b))) true))
                         (= (bool_eq4
                            (rec__cert__attr__contentst__notafter
                            (us_split_fields7 a))
                            (rec__cert__attr__contentst__notafter
                            (us_split_fields7 b))) true))
                         (= (to_rep9
                            (rec__cert__attr__contentst__mechanism
                            (us_split_fields7 a))) (to_rep9
                                                   (rec__cert__attr__contentst__mechanism
                                                   (us_split_fields7 b)))))
                         (= (bool_eq3
                            (rec__cert__attr__contentst__basecertid
                            (us_split_fields7 a))
                            (rec__cert__attr__contentst__basecertid
                            (us_split_fields7 b))) true))
                    true false))

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-fun cert__attr__contentst__id__first__bit () Int)

(declare-fun cert__attr__contentst__id__last__bit () Int)

(declare-fun cert__attr__contentst__id__position () Int)

;; cert__attr__contentst__id__first__bit_axiom
  (assert (<= 0 cert__attr__contentst__id__first__bit))

;; cert__attr__contentst__id__last__bit_axiom
  (assert
  (< cert__attr__contentst__id__first__bit cert__attr__contentst__id__last__bit))

;; cert__attr__contentst__id__position_axiom
  (assert (<= 0 cert__attr__contentst__id__position))

(declare-fun cert__attr__contentst__notbefore__first__bit () Int)

(declare-fun cert__attr__contentst__notbefore__last__bit () Int)

(declare-fun cert__attr__contentst__notbefore__position () Int)

;; cert__attr__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__attr__contentst__notbefore__first__bit))

;; cert__attr__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__attr__contentst__notbefore__first__bit cert__attr__contentst__notbefore__last__bit))

;; cert__attr__contentst__notbefore__position_axiom
  (assert (<= 0 cert__attr__contentst__notbefore__position))

(declare-fun cert__attr__contentst__notafter__first__bit () Int)

(declare-fun cert__attr__contentst__notafter__last__bit () Int)

(declare-fun cert__attr__contentst__notafter__position () Int)

;; cert__attr__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__attr__contentst__notafter__first__bit))

;; cert__attr__contentst__notafter__last__bit_axiom
  (assert
  (< cert__attr__contentst__notafter__first__bit cert__attr__contentst__notafter__last__bit))

;; cert__attr__contentst__notafter__position_axiom
  (assert (<= 0 cert__attr__contentst__notafter__position))

(declare-fun cert__attr__contentst__mechanism__first__bit () Int)

(declare-fun cert__attr__contentst__mechanism__last__bit () Int)

(declare-fun cert__attr__contentst__mechanism__position () Int)

;; cert__attr__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__attr__contentst__mechanism__first__bit))

;; cert__attr__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__attr__contentst__mechanism__first__bit cert__attr__contentst__mechanism__last__bit))

;; cert__attr__contentst__mechanism__position_axiom
  (assert (<= 0 cert__attr__contentst__mechanism__position))

(declare-fun cert__attr__contentst__basecertid__first__bit () Int)

(declare-fun cert__attr__contentst__basecertid__last__bit () Int)

(declare-fun cert__attr__contentst__basecertid__position () Int)

;; cert__attr__contentst__basecertid__first__bit_axiom
  (assert (<= 0 cert__attr__contentst__basecertid__first__bit))

;; cert__attr__contentst__basecertid__last__bit_axiom
  (assert
  (< cert__attr__contentst__basecertid__first__bit cert__attr__contentst__basecertid__last__bit))

;; cert__attr__contentst__basecertid__position_axiom
  (assert (<= 0 cert__attr__contentst__basecertid__position))

(declare-fun user_eq17 (us_rep3 us_rep3) Bool)

(declare-fun dummy17 () us_rep3)

(declare-datatypes ()
((contentst__ref (mk_contentst__ref (contentst__content us_rep3)))))
(define-fun contentst__ref_2__projection ((a contentst__ref)) us_rep3
  (contentst__content a))

(declare-fun contents () us_rep3)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun fullstring__first () integer)

(declare-fun fullstring__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq18 (integer integer) Bool)

(declare-fun dummy18 () integer)

(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content integer)))))
(define-fun t3b__ref___projection ((a t3b__ref)) integer (t3b__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int character))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))

(define-fun of_array1 ((a (Array Int character)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size6 () Int)

(declare-fun object__size6 ((Array Int character)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int character)) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment6 a))))

(define-fun bool_eq6 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq19 (us_t1 us_t1) Bool)

(declare-fun dummy19 () us_t1)

(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content us_t1)))))
(define-fun t4b__ref___projection ((a t4b__ref)) us_t1 (t4b__content a))

(declare-fun temp___String_Literal_1027 (tuple0) (Array Int character))

;; temp___String_Literal_1027__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 1)) 78)
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 3)) 85))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 24)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 28)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 32)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 33)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 35)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 36)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 37)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 38)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 39)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 40)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 41)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 42)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 43)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 44)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 45)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 46)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 47)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 48)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 49)) 32))
     (= (to_rep (select (temp___String_Literal_1027 us_void_param) 50)) 32)) :pattern (
  (temp___String_Literal_1027 us_void_param)) )))

(declare-fun temp___String_Literal_1028 (tuple0) (Array Int character))

;; temp___String_Literal_1028__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1028 us_void_param) 1)) 73)
     (= (to_rep (select (temp___String_Literal_1028 us_void_param) 2)) 115))
     (= (to_rep (select (temp___String_Literal_1028 us_void_param) 3)) 115))
     (= (to_rep (select (temp___String_Literal_1028 us_void_param) 4)) 117))
     (= (to_rep (select (temp___String_Literal_1028 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_1028 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_1028 us_void_param) 7)) 58))
     (= (to_rep (select (temp___String_Literal_1028 us_void_param) 8)) 32)) :pattern (
  (temp___String_Literal_1028 us_void_param)) )))

(declare-fun temp___String_Literal_1031 (tuple0) (Array Int character))

;; temp___String_Literal_1031__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 2)) 83))
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 4)) 114))
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 5)) 105))
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 6)) 97))
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 7)) 108))
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 8)) 78))
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 9)) 111))
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 10)) 58))
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_1031 us_void_param) 12)) 32)) :pattern (
  (temp___String_Literal_1031 us_void_param)) )))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(define-fun dynamic_invariant2 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant4 ((temp___expr_182 Int)
  (temp___is_init_179 Bool) (temp___skip_constant_180 Bool)
  (temp___do_toplevel_181 Bool)) Bool (=>
                                      (or (= temp___is_init_179 true)
                                      (<= 1 50)) (in_range3 temp___expr_182)))

(define-fun dynamic_invariant5 ((temp___expr_239 Int)
  (temp___is_init_236 Bool) (temp___skip_constant_237 Bool)
  (temp___do_toplevel_238 Bool)) Bool (=>
                                      (or (= temp___is_init_236 true)
                                      (<= 1901 2099)) (in_range7
                                      temp___expr_239)))

(define-fun dynamic_invariant6 ((temp___expr_245 Int)
  (temp___is_init_242 Bool) (temp___skip_constant_243 Bool)
  (temp___do_toplevel_244 Bool)) Bool (=>
                                      (or (= temp___is_init_242 true)
                                      (<= 1 12)) (in_range8 temp___expr_245)))

(define-fun dynamic_invariant7 ((temp___expr_251 Int)
  (temp___is_init_248 Bool) (temp___skip_constant_249 Bool)
  (temp___do_toplevel_250 Bool)) Bool (=>
                                      (or (= temp___is_init_248 true)
                                      (<= 1 31)) (in_range9 temp___expr_251)))

(define-fun dynamic_invariant8 ((temp___expr_275 Int)
  (temp___is_init_272 Bool) (temp___skip_constant_273 Bool)
  (temp___do_toplevel_274 Bool)) Bool (=>
                                      (or (= temp___is_init_272 true)
                                      (<= 0 86399999)) (in_range10
                                      temp___expr_275)))

(define-fun dynamic_invariant9 ((temp___expr_659 Int)
  (temp___is_init_656 Bool) (temp___skip_constant_657 Bool)
  (temp___do_toplevel_658 Bool)) Bool (=>
                                      (or (= temp___is_init_656 true)
                                      (<= 0 40)) (in_range5 temp___expr_659)))

(define-fun dynamic_invariant10 ((temp___expr_680 Int)
  (temp___is_init_677 Bool) (temp___skip_constant_678 Bool)
  (temp___do_toplevel_679 Bool)) Bool (=>
                                      (or (= temp___is_init_677 true)
                                      (<= 0 4294967295)) (in_range4
                                      temp___expr_680)))

(define-fun dynamic_invariant11 ((temp___expr_698 Int)
  (temp___is_init_695 Bool) (temp___skip_constant_696 Bool)
  (temp___do_toplevel_697 Bool)) Bool (=>
                                      (or (= temp___is_init_695 true)
                                      (<= 0 10)) (in_range11
                                      temp___expr_698)))

(define-fun dynamic_invariant12 ((temp___expr_894 Int)
  (temp___is_init_891 Bool) (temp___skip_constant_892 Bool)
  (temp___do_toplevel_893 Bool)) Bool (=>
                                      (or (= temp___is_init_891 true)
                                      (<= 0 4294967295)) (in_range6
                                      temp___expr_894)))

(declare-fun localuser () (Array Int character))

(declare-fun fullstring () (Array Int character))

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun temp___1032 () (Array Int character))

(declare-fun temp___10321 () t)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun temp___1034 () (Array Int character))

(declare-fun temp___10341 () t)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun cert__attr__extractuser__fullstring__assume () (Array Int character))

(declare-fun cert__attr__extractuser__fullstring__assume1 () t)

(declare-fun temp___1040 () (Array Int character))

(declare-fun temp___10401 () t1)

(declare-fun result () (Array Int character))

(declare-fun localuser1 () (Array Int character))

(declare-fun result1 () (Array Int character))

(declare-fun fullstring1 () (Array Int character))

;; H
  (assert (= result localuser))

;; H
  (assert (= localuser1 (temp___String_Literal_1027 Tuple0)))

;; H
  (assert
  (=>
  (<= (to_rep1
      (first
      (rt
      (to_string
      (attr__ATTRIBUTE_IMAGE4
      (to_rep2
      (rec__cryptotypes__issuert__id
      (us_split_fields1
      (rec__certtypes__idt__issuer
      (us_split_fields3
      (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))))))
  (to_rep1
  (last
  (rt
  (to_string
  (attr__ATTRIBUTE_IMAGE4
  (to_rep2
  (rec__cryptotypes__issuert__id
  (us_split_fields1
  (rec__certtypes__idt__issuer
  (us_split_fields3
  (rec__cert__attr__contentst__basecertid (us_split_fields7 contents)))))))))))))
  (= o (+ (- (to_rep1
             (last
             (rt
             (to_string
             (attr__ATTRIBUTE_IMAGE4
             (to_rep2
             (rec__cryptotypes__issuert__id
             (us_split_fields1
             (rec__certtypes__idt__issuer
             (us_split_fields3
             (rec__cert__attr__contentst__basecertid
             (us_split_fields7 contents)))))))))))) (to_rep1
                                                    (first
                                                    (rt
                                                    (to_string
                                                    (attr__ATTRIBUTE_IMAGE4
                                                    (to_rep2
                                                    (rec__cryptotypes__issuert__id
                                                    (us_split_fields1
                                                    (rec__certtypes__idt__issuer
                                                    (us_split_fields3
                                                    (rec__cert__attr__contentst__basecertid
                                                    (us_split_fields7
                                                    contents))))))))))))) 1))))

;; H
  (assert
  (=>
  (not
  (<= (to_rep1
      (first
      (rt
      (to_string
      (attr__ATTRIBUTE_IMAGE4
      (to_rep2
      (rec__cryptotypes__issuert__id
      (us_split_fields1
      (rec__certtypes__idt__issuer
      (us_split_fields3
      (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))))))
  (to_rep1
  (last
  (rt
  (to_string
  (attr__ATTRIBUTE_IMAGE4
  (to_rep2
  (rec__cryptotypes__issuert__id
  (us_split_fields1
  (rec__certtypes__idt__issuer
  (us_split_fields3
  (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))))))))
  (= o 0)))

;; H
  (assert (=> (<= 1 8) (= o1 (+ (- 8 1) 1))))

;; H
  (assert (=> (not (<= 1 8)) (= o1 0)))

;; H
  (assert (= o2 (+ o1 o)))

;; H
  (assert (= o3 (+ 1 o2)))

;; H
  (assert (= o4 (- o3 1)))

;; H
  (assert (and (= o5 o4) (in_range1 o4)))

;; H
  (assert
  (= (concat1 (temp___String_Literal_1028 Tuple0) 1 8
     (elts
     (to_string
     (attr__ATTRIBUTE_IMAGE4
     (to_rep2
     (rec__cryptotypes__issuert__id
     (us_split_fields1
     (rec__certtypes__idt__issuer
     (us_split_fields3
     (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))))
     (to_rep1
     (first
     (rt
     (to_string
     (attr__ATTRIBUTE_IMAGE4
     (to_rep2
     (rec__cryptotypes__issuert__id
     (us_split_fields1
     (rec__certtypes__idt__issuer
     (us_split_fields3
     (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))))))
     (to_rep1
     (last
     (rt
     (to_string
     (attr__ATTRIBUTE_IMAGE4
     (to_rep2
     (rec__cryptotypes__issuert__id
     (us_split_fields1
     (rec__certtypes__idt__issuer
     (us_split_fields3
     (rec__cert__attr__contentst__basecertid (us_split_fields7 contents)))))))))))))
  temp___1032))

;; H
  (assert (= (mk 1 o5) temp___10321))

;; H
  (assert
  (=> (= (length (mk___t temp___1032 temp___10321)) 0)
  (= (temp___String_Literal_1031 Tuple0) temp___1034)))

;; H
  (assert
  (=> (= (length (mk___t temp___1032 temp___10321)) 0)
  (= (mk 1 12) temp___10341)))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1032 temp___10321)) 0))
  (=> (<= 1 12) (= o6 (+ (- 12 1) 1)))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1032 temp___10321)) 0))
  (=> (not (<= 1 12)) (= o6 0))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1032 temp___10321)) 0))
  (=> (<= (to_rep1 (first temp___10321)) (to_rep1 (last temp___10321)))
  (= o7 (+ (- (to_rep1 (last temp___10321)) (to_rep1 (first temp___10321))) 1)))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1032 temp___10321)) 0))
  (=> (not (<= (to_rep1 (first temp___10321)) (to_rep1 (last temp___10321))))
  (= o7 0))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1032 temp___10321)) 0))
  (= o8 (+ o7 o6))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1032 temp___10321)) 0))
  (= o9 (+ (to_rep1 (first temp___10321)) o8))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1032 temp___10321)) 0))
  (= o10 (- o9 1))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1032 temp___10321)) 0))
  (and (= o11 o10) (in_range1 o10))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1032 temp___10321)) 0))
  (= (concat1 temp___1032 (to_rep1 (first temp___10321))
     (to_rep1 (last temp___10321)) (temp___String_Literal_1031 Tuple0) 1 12)
  temp___1034)))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1032 temp___10321)) 0))
  (= (mk (to_rep1 (first temp___10321)) o11) temp___10341)))

;; H
  (assert
  (=> (= (length (mk___t temp___1034 temp___10341)) 0)
  (= (elts
     (to_string
     (attr__ATTRIBUTE_IMAGE6
     (to_rep4
     (rec__certtypes__idt__serialnumber
     (us_split_fields3
     (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))
  cert__attr__extractuser__fullstring__assume)))

;; H
  (assert
  (=> (= (length (mk___t temp___1034 temp___10341)) 0)
  (= (mk
     (to_rep1
     (first
     (rt
     (to_string
     (attr__ATTRIBUTE_IMAGE6
     (to_rep4
     (rec__certtypes__idt__serialnumber
     (us_split_fields3
     (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))))
     (to_rep1
     (last
     (rt
     (to_string
     (attr__ATTRIBUTE_IMAGE6
     (to_rep4
     (rec__certtypes__idt__serialnumber
     (us_split_fields3
     (rec__cert__attr__contentst__basecertid (us_split_fields7 contents)))))))))))
  cert__attr__extractuser__fullstring__assume1)))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1034 temp___10341)) 0))
  (=>
  (<= (to_rep1
      (first
      (rt
      (to_string
      (attr__ATTRIBUTE_IMAGE6
      (to_rep4
      (rec__certtypes__idt__serialnumber
      (us_split_fields3
      (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))))
  (to_rep1
  (last
  (rt
  (to_string
  (attr__ATTRIBUTE_IMAGE6
  (to_rep4
  (rec__certtypes__idt__serialnumber
  (us_split_fields3
  (rec__cert__attr__contentst__basecertid (us_split_fields7 contents)))))))))))
  (= o12 (+ (- (to_rep1
               (last
               (rt
               (to_string
               (attr__ATTRIBUTE_IMAGE6
               (to_rep4
               (rec__certtypes__idt__serialnumber
               (us_split_fields3
               (rec__cert__attr__contentst__basecertid
               (us_split_fields7 contents)))))))))) (to_rep1
                                                    (first
                                                    (rt
                                                    (to_string
                                                    (attr__ATTRIBUTE_IMAGE6
                                                    (to_rep4
                                                    (rec__certtypes__idt__serialnumber
                                                    (us_split_fields3
                                                    (rec__cert__attr__contentst__basecertid
                                                    (us_split_fields7
                                                    contents))))))))))) 1)))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1034 temp___10341)) 0))
  (=>
  (not
  (<= (to_rep1
      (first
      (rt
      (to_string
      (attr__ATTRIBUTE_IMAGE6
      (to_rep4
      (rec__certtypes__idt__serialnumber
      (us_split_fields3
      (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))))
  (to_rep1
  (last
  (rt
  (to_string
  (attr__ATTRIBUTE_IMAGE6
  (to_rep4
  (rec__certtypes__idt__serialnumber
  (us_split_fields3
  (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))))))
  (= o12 0))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1034 temp___10341)) 0))
  (=> (<= (to_rep1 (first temp___10341)) (to_rep1 (last temp___10341)))
  (= o13 (+ (- (to_rep1 (last temp___10341)) (to_rep1 (first temp___10341))) 1)))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1034 temp___10341)) 0))
  (=> (not (<= (to_rep1 (first temp___10341)) (to_rep1 (last temp___10341))))
  (= o13 0))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1034 temp___10341)) 0))
  (= o14 (+ o13 o12))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1034 temp___10341)) 0))
  (= o15 (+ (to_rep1 (first temp___10341)) o14))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1034 temp___10341)) 0))
  (= o16 (- o15 1))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1034 temp___10341)) 0))
  (and (= o17 o16) (in_range1 o16))))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1034 temp___10341)) 0))
  (= (concat1 temp___1034 (to_rep1 (first temp___10341))
     (to_rep1 (last temp___10341))
     (elts
     (to_string
     (attr__ATTRIBUTE_IMAGE6
     (to_rep4
     (rec__certtypes__idt__serialnumber
     (us_split_fields3
     (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))
     (to_rep1
     (first
     (rt
     (to_string
     (attr__ATTRIBUTE_IMAGE6
     (to_rep4
     (rec__certtypes__idt__serialnumber
     (us_split_fields3
     (rec__cert__attr__contentst__basecertid (us_split_fields7 contents))))))))))
     (to_rep1
     (last
     (rt
     (to_string
     (attr__ATTRIBUTE_IMAGE6
     (to_rep4
     (rec__certtypes__idt__serialnumber
     (us_split_fields3
     (rec__cert__attr__contentst__basecertid (us_split_fields7 contents)))))))))))
  cert__attr__extractuser__fullstring__assume)))

;; H
  (assert
  (=> (not (= (length (mk___t temp___1034 temp___10341)) 0))
  (= (mk (to_rep1 (first temp___10341)) o17) cert__attr__extractuser__fullstring__assume1)))

;; H
  (assert (= result1 fullstring))

;; H
  (assert (= fullstring1 cert__attr__extractuser__fullstring__assume))

;; H
  (assert
  (= (to_rep1 fullstring__first) (to_rep1
                                 (first
                                 cert__attr__extractuser__fullstring__assume1))))

;; H
  (assert
  (= (to_rep1 fullstring__last) (to_rep1
                                (last
                                cert__attr__extractuser__fullstring__assume1))))

;; H
  (assert (dynamic_property 1 2147483647 (to_rep1 fullstring__first)
  (to_rep1 fullstring__last)))

;; H
  (assert (<= (to_rep1 fullstring__last) 50))

;; H
  (assert
  (= (ite (<= (to_rep1 fullstring__first) (to_rep1 fullstring__last))
     (+ (- (to_rep1 fullstring__last) (to_rep1 fullstring__first)) 1) 0)
  (ite (<= 1 (to_rep1 fullstring__last))
  (+ (- (to_rep1 fullstring__last) 1) 1) 0)))

;; H
  (assert (= (slide fullstring1 (to_rep1 fullstring__first) 1) temp___1040))

;; H
  (assert (= (mk1 1 (to_rep1 fullstring__last)) temp___10401))

(assert
;; WP_parameter_def
 ;; File "audittypes.ads", line 103, characters 0-0
  (not
  (= (ite (<= (to_rep1 (first2 temp___10401)) (to_rep1 (last2 temp___10401)))
     (+ (- (to_rep1 (last2 temp___10401)) (to_rep1 (first2 temp___10401))) 1)
     0) (ite (<= (to_rep1 (first2 (mk1 1 (to_rep1 fullstring__last))))
        (to_rep1 (last2 (mk1 1 (to_rep1 fullstring__last)))))
        (+ (- (to_rep1 (last2 (mk1 1 (to_rep1 fullstring__last)))) (to_rep1
                                                                   (first2
                                                                   (mk1 1
                                                                   (to_rep1
                                                                   fullstring__last))))) 1)
        0))))
(check-sat)
(exit)
