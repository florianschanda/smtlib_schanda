;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-sort byte 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (byte byte) Bool)

(declare-const dummy1 byte)

(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))

(declare-fun to_rep (byte) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int2 ((x byte)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__untangle__word_a__lo byte)(rec__untangle__word_a__hi byte)))))
(define-fun us_split_fields_Lo__projection ((a us_split_fields)) byte
  (rec__untangle__word_a__lo a))

(define-fun us_split_fields_Hi__projection ((a us_split_fields)) byte
  (rec__untangle__word_a__hi a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__untangle__word_a__lo (us_split_fields1 a)))
                        (to_rep
                        (rec__untangle__word_a__lo (us_split_fields1 b))))
                        (= (to_rep
                           (rec__untangle__word_a__hi (us_split_fields1 a)))
                        (to_rep
                        (rec__untangle__word_a__hi (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const untangle__word_a__lo__first__bit Int)

(declare-const untangle__word_a__lo__last__bit Int)

(declare-const untangle__word_a__lo__position Int)

;; untangle__word_a__lo__first__bit_axiom
  (assert (<= 0 untangle__word_a__lo__first__bit))

;; untangle__word_a__lo__last__bit_axiom
  (assert
  (< untangle__word_a__lo__first__bit untangle__word_a__lo__last__bit))

;; untangle__word_a__lo__position_axiom
  (assert (<= 0 untangle__word_a__lo__position))

(declare-const untangle__word_a__hi__first__bit Int)

(declare-const untangle__word_a__hi__last__bit Int)

(declare-const untangle__word_a__hi__position Int)

;; untangle__word_a__hi__first__bit_axiom
  (assert (<= 0 untangle__word_a__hi__first__bit))

;; untangle__word_a__hi__last__bit_axiom
  (assert
  (< untangle__word_a__hi__first__bit untangle__word_a__hi__last__bit))

;; untangle__word_a__hi__position_axiom
  (assert (<= 0 untangle__word_a__hi__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((word_a__ref (mk_word_a__ref (word_a__content us_rep)))))
(define-fun word_a__ref___projection ((a word_a__ref)) us_rep (word_a__content
                                                              a))

(declare-sort tword_arrayD1 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (tword_arrayD1 tword_arrayD1) Bool)

(declare-const dummy3 tword_arrayD1)

(declare-datatypes ()
((tword_arrayD1__ref
 (mk_tword_arrayD1__ref (tword_arrayD1__content tword_arrayD1)))))
(define-fun tword_arrayD1__ref___projection ((a tword_arrayD1__ref)) tword_arrayD1
  (tword_arrayD1__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-const dummy4 (Array Int us_rep))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq4 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__untangle__thing__a Bool)(rec__untangle__thing__b (Array Int us_rep))(rec__untangle__thing__c Bool)))))
(define-fun us_split_fields_A__projection ((a us_split_fields2)) Bool
  (rec__untangle__thing__a a))

(define-fun us_split_fields_B__projection ((a us_split_fields2)) (Array Int us_rep)
  (rec__untangle__thing__b a))

(define-fun us_split_fields_C__projection ((a us_split_fields2)) Bool
  (rec__untangle__thing__c a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (rec__untangle__thing__a (us_split_fields3 a))
                         (rec__untangle__thing__a (us_split_fields3 b)))
                         (= (bool_eq1
                            (rec__untangle__thing__b (us_split_fields3 a)) 1
                            10 (rec__untangle__thing__b (us_split_fields3 b))
                            1 10) true))
                         (= (rec__untangle__thing__c (us_split_fields3 a))
                         (rec__untangle__thing__c (us_split_fields3 b))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const untangle__thing__a__first__bit Int)

(declare-const untangle__thing__a__last__bit Int)

(declare-const untangle__thing__a__position Int)

;; untangle__thing__a__first__bit_axiom
  (assert (<= 0 untangle__thing__a__first__bit))

;; untangle__thing__a__last__bit_axiom
  (assert (< untangle__thing__a__first__bit untangle__thing__a__last__bit))

;; untangle__thing__a__position_axiom
  (assert (<= 0 untangle__thing__a__position))

(declare-const untangle__thing__b__first__bit Int)

(declare-const untangle__thing__b__last__bit Int)

(declare-const untangle__thing__b__position Int)

;; untangle__thing__b__first__bit_axiom
  (assert (<= 0 untangle__thing__b__first__bit))

;; untangle__thing__b__last__bit_axiom
  (assert (< untangle__thing__b__first__bit untangle__thing__b__last__bit))

;; untangle__thing__b__position_axiom
  (assert (<= 0 untangle__thing__b__position))

(declare-const untangle__thing__c__first__bit Int)

(declare-const untangle__thing__c__last__bit Int)

(declare-const untangle__thing__c__position Int)

;; untangle__thing__c__first__bit_axiom
  (assert (<= 0 untangle__thing__c__first__bit))

;; untangle__thing__c__last__bit_axiom
  (assert (< untangle__thing__c__first__bit untangle__thing__c__last__bit))

;; untangle__thing__c__position_axiom
  (assert (<= 0 untangle__thing__c__position))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ()
((thing__ref (mk_thing__ref (thing__content us_rep1)))))
(define-fun thing__ref___projection ((a thing__ref)) us_rep1 (thing__content
                                                             a))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__untangle__optional_thing__exists Bool)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) Bool (rec__untangle__optional_thing__exists
                                                                    a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2 (rec__untangle__optional_thing__t us_rep1)))))
(define-fun us_split_fields_T__projection ((a us_split_fields4)) us_rep1
  (rec__untangle__optional_thing__t a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2
 (mk___rep2
 (us_split_discrs1 us_split_discrs)(us_split_fields5 us_split_fields4)(attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_discrs (us_split_discrs1
                                                                 a))

(define-fun us_rep___4__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun us_rep___5__projection ((a us_rep2)) Bool (attr__constrained a))

(define-fun untangle__optional_thing__t__pred ((a us_rep2)) Bool (= (to_int3
                                                                    (rec__untangle__optional_thing__exists
                                                                    (us_split_discrs1
                                                                    a))) 1))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (rec__untangle__optional_thing__exists
                            (us_split_discrs1 a)) (rec__untangle__optional_thing__exists
                                                  (us_split_discrs1 b)))
                         (=> (untangle__optional_thing__t__pred a)
                         (= (bool_eq2
                            (rec__untangle__optional_thing__t
                            (us_split_fields5 a))
                            (rec__untangle__optional_thing__t
                            (us_split_fields5 b))) true)))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-const untangle__optional_thing__exists__first__bit Int)

(declare-const untangle__optional_thing__exists__last__bit Int)

(declare-const untangle__optional_thing__exists__position Int)

;; untangle__optional_thing__exists__first__bit_axiom
  (assert (<= 0 untangle__optional_thing__exists__first__bit))

;; untangle__optional_thing__exists__last__bit_axiom
  (assert
  (< untangle__optional_thing__exists__first__bit untangle__optional_thing__exists__last__bit))

;; untangle__optional_thing__exists__position_axiom
  (assert (<= 0 untangle__optional_thing__exists__position))

(declare-const untangle__optional_thing__t__first__bit Int)

(declare-const untangle__optional_thing__t__last__bit Int)

(declare-const untangle__optional_thing__t__position Int)

;; untangle__optional_thing__t__first__bit_axiom
  (assert (<= 0 untangle__optional_thing__t__first__bit))

;; untangle__optional_thing__t__last__bit_axiom
  (assert
  (< untangle__optional_thing__t__first__bit untangle__optional_thing__t__last__bit))

;; untangle__optional_thing__t__position_axiom
  (assert (<= 0 untangle__optional_thing__t__position))

(declare-fun user_eq6 (us_rep2 us_rep2) Bool)

(declare-const dummy6 us_rep2)

(declare-datatypes ()
((optional_thing__ref
 (mk_optional_thing__ref (optional_thing__content us_rep2)))))
(define-fun optional_thing__ref___projection ((a optional_thing__ref)) us_rep2
  (optional_thing__content a))

(define-fun default_initial_assumption ((temp___expr_184 us_rep2)
  (temp___skip_top_level_185 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_184) false)
                                         (= (rec__untangle__optional_thing__exists
                                            (us_split_discrs1
                                            temp___expr_184)) (of_int 0))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun wibble (Int Bool) Int)

(declare-fun wibble__function_guard (Int Int Bool) Bool)

;; wibble__post_axiom
  (assert
  (forall ((n Int))
  (forall ((untangle__g Bool))
  (! (=> (and (dynamic_invariant n true true true) (= untangle__g true))
     (dynamic_invariant (wibble n untangle__g) true false true)) :pattern (
  (wibble n untangle__g)) ))))

;; wibble__def_axiom
  (assert
  (forall ((n Int))
  (forall ((untangle__g Bool))
  (! (=> (dynamic_invariant n true true true) (= (wibble n untangle__g) n)) :pattern (
  (wibble n untangle__g)) ))))

(declare-const x__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_136 (_ BitVec 8))
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool true)

(declare-const x__split_discrs Bool)

;; H
  (assert (in_range n))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= (to_int3 x__split_discrs) 1)))
(check-sat)
(exit)
