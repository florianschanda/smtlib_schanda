(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type ta3D1

predicate in_range1(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : ta3D1, ta3D1 -> bool

logic dummy1 : ta3D1

type ta3D1__ref = { ta3D1__content : ta3D1
}

function ta3D1__ref___projection(a: ta3D1__ref) : ta3D1 = (a).ta3D1__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type map__ref1 = { map__content1 : (int,(int,integer) farray) farray
}

logic slide1 : (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,integer) farray) farray, int, int,
  (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,integer) farray,
  int -> (int,(int,integer) farray) farray

axiom singleton_def1 :
  (forall v:(int,integer) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq4 : (int,(int,integer) farray) farray, int, int,
  (int,(int,integer) farray) farray, int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,(int,integer) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,integer) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq4(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq3((a[temp___idx_133]), 1, 2,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 2) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq3((a[temp___idx_133]), 1, 2,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 2) = true))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq3((a[temp___idx_133]), 1, 2,
  (b[((b__first - a__first) + temp___idx_133)]), 1, 2) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t59s

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : t59s, t59s -> bool

logic dummy3 : t59s

type t59s__ref = { t59s__content : t59s
}

function t59s__ref___projection(a: t59s__ref) : t59s = (a).t59s__content

type t65s

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : t65s, t65s -> bool

logic dummy4 : t65s

type t65s__ref = { t65s__content : t65s
}

function t65s__ref___projection(a: t65s__ref) : t65s = (a).t65s__content

type t71s

predicate in_range4(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : t71s, t71s -> bool

logic dummy5 : t71s

type t71s__ref = { t71s__content : t71s
}

function t71s__ref___projection(a: t71s__ref) : t71s = (a).t71s__content

type t77s

predicate in_range5(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : t77s, t77s -> bool

logic dummy6 : t77s

type t77s__ref = { t77s__content : t77s
}

function t77s__ref___projection(a: t77s__ref) : t77s = (a).t77s__content

type t83s

predicate in_range6(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : t83s, t83s -> bool

logic dummy7 : t83s

type t83s__ref = { t83s__content : t83s
}

function t83s__ref___projection(a: t83s__ref) : t83s = (a).t83s__content

logic temp___224 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

axiom def_axiom :
  (forall temp___226:(int,integer) farray.
  forall temp___227:(int,integer) farray. (((temp___224(temp___226,
  temp___227)[1]) = temp___226) and ((temp___224(temp___226,
  temp___227)[2]) = temp___227)))

logic temp___229 : int, int -> (int,integer) farray

axiom def_axiom1 :
  (forall temp___231:int. forall temp___232:int. (((temp___229(temp___231,
  temp___232)[1]) = of_rep(temp___231)) and ((temp___229(temp___231,
  temp___232)[2]) = of_rep(temp___232))))

logic temp___234 : int, int -> (int,integer) farray

axiom def_axiom2 :
  (forall temp___236:int. forall temp___237:int. (((temp___234(temp___236,
  temp___237)[1]) = of_rep(temp___236)) and ((temp___234(temp___236,
  temp___237)[2]) = of_rep(temp___237))))

logic temp___240 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

axiom def_axiom3 :
  (forall temp___242:(int,integer) farray.
  forall temp___243:(int,integer) farray. (((temp___240(temp___242,
  temp___243)[1]) = temp___242) and ((temp___240(temp___242,
  temp___243)[2]) = temp___243)))

logic temp___245 : int, int -> (int,integer) farray

axiom def_axiom4 :
  (forall temp___247:int. forall temp___248:int. (((temp___245(temp___247,
  temp___248)[1]) = of_rep(temp___247)) and ((temp___245(temp___247,
  temp___248)[2]) = of_rep(temp___248))))

logic temp___250 : int, int -> (int,integer) farray

axiom def_axiom5 :
  (forall temp___252:int. forall temp___253:int. (((temp___250(temp___252,
  temp___253)[1]) = of_rep(temp___252)) and ((temp___250(temp___252,
  temp___253)[2]) = of_rep(temp___253))))

logic temp___256 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

axiom def_axiom6 :
  (forall temp___258:(int,integer) farray.
  forall temp___259:(int,integer) farray. (((temp___256(temp___258,
  temp___259)[1]) = temp___258) and ((temp___256(temp___258,
  temp___259)[2]) = temp___259)))

logic temp___261 : int, int -> (int,integer) farray

axiom def_axiom7 :
  (forall temp___263:int. forall temp___264:int. (((temp___261(temp___263,
  temp___264)[1]) = of_rep(temp___263)) and ((temp___261(temp___263,
  temp___264)[2]) = of_rep(temp___264))))

logic temp___266 : int, int -> (int,integer) farray

axiom def_axiom8 :
  (forall temp___268:int. forall temp___269:int. (((temp___266(temp___268,
  temp___269)[1]) = of_rep(temp___268)) and ((temp___266(temp___268,
  temp___269)[2]) = of_rep(temp___269))))

logic temp___272 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

axiom def_axiom9 :
  (forall temp___274:(int,integer) farray.
  forall temp___275:(int,integer) farray. (((temp___272(temp___274,
  temp___275)[1]) = temp___274) and ((temp___272(temp___274,
  temp___275)[2]) = temp___275)))

logic temp___277 : int, int -> (int,integer) farray

axiom def_axiom10 :
  (forall temp___279:int. forall temp___280:int. (((temp___277(temp___279,
  temp___280)[1]) = of_rep(temp___279)) and ((temp___277(temp___279,
  temp___280)[2]) = of_rep(temp___280))))

logic temp___282 : int, int -> (int,integer) farray

axiom def_axiom11 :
  (forall temp___284:int. forall temp___285:int. (((temp___282(temp___284,
  temp___285)[1]) = of_rep(temp___284)) and ((temp___282(temp___284,
  temp___285)[2]) = of_rep(temp___285))))

logic temp___288 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

axiom def_axiom12 :
  (forall temp___290:(int,integer) farray.
  forall temp___291:(int,integer) farray. (((temp___288(temp___290,
  temp___291)[1]) = temp___290) and ((temp___288(temp___290,
  temp___291)[2]) = temp___291)))

logic temp___293 : int, int -> (int,integer) farray

axiom def_axiom13 :
  (forall temp___295:int. forall temp___296:int. (((temp___293(temp___295,
  temp___296)[1]) = of_rep(temp___295)) and ((temp___293(temp___295,
  temp___296)[2]) = of_rep(temp___296))))

logic temp___298 : int, int -> (int,integer) farray

axiom def_axiom14 :
  (forall temp___300:int. forall temp___301:int. (((temp___298(temp___300,
  temp___301)[1]) = of_rep(temp___300)) and ((temp___298(temp___300,
  temp___301)[2]) = of_rep(temp___301))))

 (* File "arr_aggregate.ads", line 41, characters 0-0 *)
goal WP_parameter_def :
  (forall one:int. (in_range(one) -> (in_range(b) -> ((one = 1) ->
  (one = 1)))))
