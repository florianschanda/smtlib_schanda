;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort index_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (index_type index_type) Bool)

(declare-fun dummy () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type 
  (index_type__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134))))))))))

(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select 
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select 
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select 
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select 
  (notb a a_first a_last) i)) )))))

(declare-fun todo () (Array Int Bool))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort t73b 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (t73b t73b) Bool)

(declare-fun dummy1 () t73b)

(declare-datatypes () ((t73b__ref (mk_t73b__ref (t73b__content t73b)))))
(define-fun t73b__ref___projection ((a t73b__ref)) t73b (t73b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant ((temp___expr_150 Int)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (or (= temp___is_init_147 true)
                                      (<= 1 100)) (in_range1
                                      temp___expr_150)))

(declare-fun i () Int)

(declare-fun binary_trees__model__next__result () Int)

(declare-fun temp___1051 () Int)

(declare-fun temp___1052 () Int)

(declare-fun temp___1050 () Int)

(declare-fun binary_trees__model__next__result1 () Int)

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun i2 () Int)

(declare-fun binary_trees__model__next__result2 () Int)

(declare-fun result1 () Int)

(declare-fun binary_trees__model__next__result3 () Int)

(declare-fun i3 () Int)

(declare-fun binary_trees__model__next__result4 () Int)

(declare-fun i4 () Int)

(declare-fun binary_trees__model__next__result5 () Int)

(declare-fun i5 () Int)

(declare-fun binary_trees__model__next__result6 () Int)

(declare-fun i6 () Int)

(declare-fun binary_trees__model__next__result7 () Int)

(declare-fun result2 () Int)

(declare-fun binary_trees__model__next__result8 () Int)

(declare-fun binary_trees__model__next__result9 () Int)

(declare-fun binary_trees__model__next__result10 () Int)

(declare-fun i7 () Int)

(declare-fun binary_trees__model__next__result11 () Int)

(declare-fun i8 () Int)

(declare-fun binary_trees__model__next__result12 () Int)

(declare-fun i9 () Int)

(declare-fun binary_trees__model__next__result13 () Int)

(declare-fun i10 () Int)

(declare-fun binary_trees__model__next__result14 () Int)

(define-fun binary_trees__model__next__result15 () int__ref (mk_int__ref
                                                            binary_trees__model__next__result11))

(define-fun i11 () int__ref (mk_int__ref i7))

(define-fun binary_trees__model__next__result16 () int__ref (mk_int__ref
                                                            binary_trees__model__next__result6))

(define-fun i12 () int__ref (mk_int__ref i5))

(define-fun result3 () int__ref (mk_int__ref result))

(define-fun i13 () int__ref (mk_int__ref i))

;; H
  (assert
  (or
  (and
  (and
  (and
  (= binary_trees__model__next__result3 binary_trees__model__next__result11)
  (= i2 i7))
  (and
  (= binary_trees__model__next__result12 binary_trees__model__next__result3)
  (= i8 i2)))
  (and (= temp___1051 1)
  (and (= temp___1052 100)
  (and (and (= result3 i13) (= i1 temp___1051))
  (and (and (<= temp___1051 i1) (<= i1 temp___1052))
  (and (= temp___1050 i1)
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j (- i2 1))) (not (= (select todo j) true))))
  (and (and (=> (<= 1 100) (in_range2 i2)) (and (<= 1 i2) (<= i2 100)))
  (and (= (select todo i2) true)
  (and (= binary_trees__model__next__result2 result1)
  (= binary_trees__model__next__result3 i2)))))))))))
  (and
  (and (and (= result3 i13) (= i1 1))
  (ite (and (<= 1 i1) (<= i1 100))
  (and
  (and
  (and (= temp___1050 i1)
  (and
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j (- i2 1))) (not (= (select todo j) true))))
  (and (and (=> (<= 1 100) (in_range2 i2)) (and (<= 1 i2) (<= i2 100)))
  (and
  (and (not (= (select todo i2) true))
  (= binary_trees__model__next__result3 binary_trees__model__next__result2))
  (= i2 100)))))
  (and
  (and
  (= binary_trees__model__next__result3 binary_trees__model__next__result4)
  (= i2 i3))
  (and
  (= binary_trees__model__next__result5 binary_trees__model__next__result3)
  (= i4 i2))))
  (and
  (and
  (= binary_trees__model__next__result16 (mk_int__ref
                                         binary_trees__model__next__result4))
  (= i12 (mk_int__ref i3)))
  (and
  (= binary_trees__model__next__result7 binary_trees__model__next__result5)
  (= i6 i4))))
  (and
  (and
  (= binary_trees__model__next__result16 (mk_int__ref
                                         binary_trees__model__next__result))
  (= i1 i5))
  (and
  (= binary_trees__model__next__result7 binary_trees__model__next__result1)
  (= i6 i1)))))
  (and
  (and
  (and
  (= binary_trees__model__next__result15 (mk_int__ref
                                         binary_trees__model__next__result9))
  (= i11 i12))
  (and
  (= binary_trees__model__next__result12 binary_trees__model__next__result10)
  (= i8 i6)))
  (and
  (and
  (= binary_trees__model__next__result8 binary_trees__model__next__result9)
  (= binary_trees__model__next__result10 binary_trees__model__next__result8))
  (and (= (mk_int__ref result2) binary_trees__model__next__result16)
  (= binary_trees__model__next__result8 0)))))))

;; H
  (assert
  (= (mk_int__ref binary_trees__model__next__result13) binary_trees__model__next__result15))

;; H
  (assert (= (mk_int__ref i9) i11))

;; H
  (assert
  (= binary_trees__model__next__result14 binary_trees__model__next__result12))

;; H
  (assert (= i10 i8))

;; H
  (assert (not (= binary_trees__model__next__result13 0)))

(assert
;; WP_parameter_def
 ;; File "tree_model.ads", line 15, characters 0-0
  (not (<= 1 binary_trees__model__next__result13)))
(check-sat)
