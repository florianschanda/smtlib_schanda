(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 18446744073709551615)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (64 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  64)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (64 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 64))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 64))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(18446744073709551616 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  18446744073709551616)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 64)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 18446744073709551615)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  18446744073709551616) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  18446744073709551616)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 18446744073709551616)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  18446744073709551616) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 18446744073709551616)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 64)]. (eq_sub1(x, y, 0, 64) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

logic toBig : t -> t1

logic toSmall : t1 -> t

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t1. (ule1(x, rliteral) -> (tqtint1(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint1(toBig(x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq2 : bool, bool -> bool

axiom bool_eq_def2 :
  (forall x:bool. forall y:bool [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic to_int2 : bool -> int

axiom to_int_def2 :
  (forall b:bool [to_int2(b)]. (((b = true) -> (to_int2(b) = 1)) and
  ((not (b = true)) -> (to_int2(b) = 0))))

logic of_int2 : int -> bool

axiom of_int_def :
  (forall i:int [of_int2(i)]. (((i = 0) -> (of_int2(i) = false)) and
  ((not (i = 0)) -> (of_int2(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type byte

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq3 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq4 : t, t -> bool

axiom bool_eq_def3 :
  (forall x:t. forall y:t [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq : byte, byte -> bool

logic dummy : byte

type byte__ref = { byte__content : byte
}

function byte__ref___projection(a: byte__ref) : byte = (a).byte__content

logic to_rep : byte -> t

logic of_rep : t -> byte

axiom inversion_axiom : (forall x:byte [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int3(x: byte) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:byte [to_int3(x)]. uint_in_range(to_int3(x)))

type t2

logic tqtint2 : t2 -> int

axiom tqtaxiom2 :
  (forall i:t2. ((0 <= tqtint2(i)) and (tqtint2(i) <= 65535)))

logic nth2 : t2, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t2. forall n:int. (((n <  0) or (16 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t2

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t2

logic ones2 : t2

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth2(ones2, n) = true)))

logic bw_and2 : t2, t2 -> t2

axiom Nth_bw_and2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth2(bw_and2(v1, v2), n) = match_bool(nth2(v1, n), nth2(v2, n), false))))

logic bw_or2 : t2, t2 -> t2

axiom Nth_bw_or2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth2(bw_or2(v1, v2), n) = match_bool(nth2(v1, n), true, nth2(v2, n)))))

logic bw_xor2 : t2, t2 -> t2

axiom Nth_bw_xor2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth2(bw_xor2(v1, v2), n) = xorb(nth2(v1, n), nth2(v2, n)))))

logic bw_not2 : t2 -> t2

axiom Nth_bw_not2 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  16)) -> (nth2(bw_not2(v),
  n) = match_bool(nth2(v, n), false, true))))

logic lsr2 : t2, int -> t2

axiom Lsr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth2(lsr2(b, s), n) = nth2(b, (n + s)))))))

axiom Lsr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth2(lsr2(b, s), n) = false)))))

axiom lsr_zeros2 : (forall x:t2. (lsr2(x, 0) = x))

logic asr2 : t2, int -> t2

axiom Asr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth2(asr2(b, s), n) = nth2(b,
  (n + s)))))))

axiom Asr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth2(asr2(b, s), n) = nth2(b,
  (16 - 1)))))))

axiom asr_zeros2 : (forall x:t2. (asr2(x, 0) = x))

logic lsl2 : t2, int -> t2

axiom Lsl_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth2(lsl2(b, s), n) = nth2(b, (n - s)))))

axiom Lsl_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth2(lsl2(b, s), n) = false)))

axiom lsl_zeros2 : (forall x:t2. (lsl2(x, 0) = x))

logic rotate_right2 : t2, int -> t2

axiom Nth_rotate_right2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth2(rotate_right2(v, n), i) = nth2(v, ((i + n) % 16))))))

logic rotate_left2 : t2, int -> t2

axiom Nth_rotate_left2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth2(rotate_left2(v, n), i) = nth2(v, ((i - n) % 16))))))

logic is_signed_positive2 : t2 -> prop

logic of_int3 : int -> t2

logic to_int4 : t2 -> int

axiom to_int_def3 :
  (forall x:t2 [to_int4(x)]. ((is_signed_positive2(x) ->
  (to_int4(x) = tqtint2(x))) and ((not is_signed_positive2(x)) ->
  (to_int4(x) = (-(65536 - tqtint2(x)))))))

axiom to_uint_extensionality2 :
  (forall v:t2. forall vqt:t2. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t2. forall vqt:t2. ((to_int4(v) = to_int4(vqt)) -> (v = vqt)))

predicate uint_in_range2(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds2 :
  (forall v:t2. ((0 <= tqtint2(v)) and (tqtint2(v) <  65536)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint2(of_int3(i)) = i)))

logic size_bv2 : t2

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 16)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 65535)

predicate ult2(x: t2, y: t2) = (tqtint2(x) <  tqtint2(y))

predicate ule2(x: t2, y: t2) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t2, y: t2) = (tqtint2(y) <  tqtint2(x))

predicate uge2(x: t2, y: t2) = (tqtint2(y) <= tqtint2(x))

predicate slt2(v1: t2, v2: t2) = (to_int4(v1) <  to_int4(v2))

predicate sle2(v1: t2, v2: t2) = (to_int4(v1) <= to_int4(v2))

predicate sgt2(v1: t2, v2: t2) = (to_int4(v2) <  to_int4(v1))

predicate sge2(v1: t2, v2: t2) = (to_int4(v2) <= to_int4(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t2. (is_signed_positive2(x) <-> sge2(x, zeros2)))

logic add2 : t2, t2 -> t2

axiom to_uint_add_bounded2 :
  (forall v1:t2. forall v2:t2. (((tqtint2(v1) + tqtint2(v2)) <  65536) ->
  (tqtint2(add2(v1, v2)) = (tqtint2(v1) + tqtint2(v2)))))

logic sub2 : t2, t2 -> t2

axiom to_uint_sub_bounded2 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint2(v1) - tqtint2(v2))) and
  ((tqtint2(v1) - tqtint2(v2)) <  65536)) -> (tqtint2(sub2(v1,
  v2)) = (tqtint2(v1) - tqtint2(v2)))))

logic neg2 : t2 -> t2

axiom to_uint_neg2 :
  (forall v:t2. (tqtint2(neg2(v)) = ((-tqtint2(v)) % 65536)))

logic mul2 : t2, t2 -> t2

axiom to_uint_mul_bounded2 :
  (forall v1:t2. forall v2:t2. (((tqtint2(v1) * tqtint2(v2)) <  65536) ->
  (tqtint2(mul2(v1, v2)) = (tqtint2(v1) * tqtint2(v2)))))

logic udiv2 : t2, t2 -> t2

axiom to_uint_udiv2 :
  (forall v1:t2. forall v2:t2. (tqtint2(udiv2(v1,
  v2)) = (tqtint2(v1) / tqtint2(v2))))

logic urem2 : t2, t2 -> t2

axiom to_uint_urem2 :
  (forall v1:t2. forall v2:t2. (tqtint2(urem2(v1,
  v2)) = (tqtint2(v1) % tqtint2(v2))))

logic lsr_bv2 : t2, t2 -> t2

axiom lsr_bv_is_lsr2 :
  (forall x:t2. forall n:t2. (lsr_bv2(x, n) = lsr2(x, tqtint2(n))))

axiom to_uint_lsr2 :
  (forall v:t2. forall n:t2. (tqtint2(lsr_bv2(v,
  n)) = (tqtint2(v) / pow2(tqtint2(n)))))

logic asr_bv2 : t2, t2 -> t2

axiom asr_bv_is_asr2 :
  (forall x:t2. forall n:t2. (asr_bv2(x, n) = asr2(x, tqtint2(n))))

logic lsl_bv2 : t2, t2 -> t2

axiom lsl_bv_is_lsl2 :
  (forall x:t2. forall n:t2. (lsl_bv2(x, n) = lsl2(x, tqtint2(n))))

axiom to_uint_lsl2 :
  (forall v:t2. forall n:t2. (tqtint2(lsl_bv2(v,
  n)) = ((tqtint2(v) * pow2(tqtint2(n))) % 65536)))

logic rotate_right_bv2 : t2, t2 -> t2

logic rotate_left_bv2 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left2 :
  (forall v:t2. forall n:t2. (rotate_left_bv2(v, n) = rotate_left2(v,
  tqtint2(n))))

axiom rotate_right_bv_is_rotate_right2 :
  (forall v:t2. forall n:t2. (rotate_right_bv2(v, n) = rotate_right2(v,
  tqtint2(n))))

logic nth_bv2 : t2, t2 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t2. forall i:t2. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv2(x,
  of_int3(i)) = nth2(x, i))))

logic eq_sub_bv2 : t2, t2, t2, t2 -> prop

predicate eq_sub2(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth2(a, j) = nth2(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub2(a, b,
  tqtint2(i), tqtint2(n)) <-> eq_sub_bv2(a, b, i, n)))

axiom Extensionality2 :
  (forall x:t2. forall y:t2 [eq_sub2(x, y, 0, 16)]. (eq_sub2(x, y, 0, 16) ->
  (x = y)))

type t__ref2 = { t__content2 : t2
}

logic bool_eq5 : t2, t2 -> bool

axiom bool_eq_def4 :
  (forall x:t2. forall y:t2 [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic bool_ne3 : t2, t2 -> bool

axiom bool_ne_def2 :
  (forall x:t2. forall y:t2 [bool_ne3(x, y)]. (((not (x = y)) -> (bool_ne3(x,
  y) = true)) and ((x = y) -> (bool_ne3(x, y) = false))))

logic bool_lt3 : t2, t2 -> bool

axiom bool_lt_def2 :
  (forall x:t2. forall y:t2 [bool_lt3(x, y)]. ((ult2(x, y) -> (bool_lt3(x,
  y) = true)) and ((not ult2(x, y)) -> (bool_lt3(x, y) = false))))

logic bool_le3 : t2, t2 -> bool

axiom bool_le_def2 :
  (forall x:t2. forall y:t2 [bool_le3(x, y)]. ((ule2(x, y) -> (bool_le3(x,
  y) = true)) and ((not ule2(x, y)) -> (bool_le3(x, y) = false))))

logic bool_gt3 : t2, t2 -> bool

axiom bool_gt_def2 :
  (forall x:t2. forall y:t2 [bool_gt3(x, y)]. ((ugt2(x, y) -> (bool_gt3(x,
  y) = true)) and ((not ugt2(x, y)) -> (bool_gt3(x, y) = false))))

logic bool_ge3 : t2, t2 -> bool

axiom bool_ge_def2 :
  (forall x:t2. forall y:t2 [bool_ge3(x, y)]. ((uge2(x, y) -> (bool_ge3(x,
  y) = true)) and ((not uge2(x, y)) -> (bool_ge3(x, y) = false))))

logic power2 : t2, int -> t2

axiom Power_03 : (forall x:t2. (power2(x, 0) = one2))

axiom Power_13 : (forall x:t2. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t2. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul2(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t2. forall n:int. ((0 <  n) -> (power2(x, n) = mul2(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul2(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t2. forall y:t2. forall n:int. ((0 <= n) -> (power2(mul2(x, y),
  n) = mul2(power2(x, n), power2(y, n)))))

logic bv_min2 : t2, t2 -> t2

axiom bv_min_def2 :
  (forall x:t2. forall y:t2 [bv_min2(x, y)]. ((ule2(x, y) -> (bv_min2(x,
  y) = x)) and ((not ule2(x, y)) -> (bv_min2(x, y) = y))))

logic bv_max2 : t2, t2 -> t2

axiom bv_max_def2 :
  (forall x:t2. forall y:t2 [bv_max2(x, y)]. ((ule2(x, y) -> (bv_max2(x,
  y) = y)) and ((not ule2(x, y)) -> (bv_max2(x, y) = x))))

axiom bv_min_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_min2(x, y)) = min(tqtint2(x),
  tqtint2(y))))

axiom bv_max_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_max2(x, y)) = max(tqtint2(x),
  tqtint2(y))))

type u16

logic attr__ATTRIBUTE_MODULUS1 : t2

logic bool_eq6 : t2, t2 -> bool

axiom bool_eq_def5 :
  (forall x:t2. forall y:t2 [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t2

logic user_eq1 : u16, u16 -> bool

logic dummy1 : u16

type u16__ref = { u16__content : u16
}

function u16__ref___projection(a: u16__ref) : u16 = (a).u16__content

type t3

logic tqtint3 : t3 -> int

axiom tqtaxiom3 :
  (forall i:t3. ((0 <= tqtint3(i)) and (tqtint3(i) <= 4294967295)))

logic nth3 : t3, int -> bool

axiom nth_out_of_bound3 :
  (forall x:t3. forall n:int. (((n <  0) or (32 <= n)) -> (nth3(x,
  n) = false)))

logic zeros3 : t3

axiom Nth_zeros3 : (forall n:int. (nth3(zeros3, n) = false))

logic one3 : t3

logic ones3 : t3

axiom Nth_ones3 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth3(ones3, n) = true)))

logic bw_and3 : t3, t3 -> t3

axiom Nth_bw_and3 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth3(bw_and3(v1, v2), n) = match_bool(nth3(v1, n), nth3(v2, n), false))))

logic bw_or3 : t3, t3 -> t3

axiom Nth_bw_or3 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth3(bw_or3(v1, v2), n) = match_bool(nth3(v1, n), true, nth3(v2, n)))))

logic bw_xor3 : t3, t3 -> t3

axiom Nth_bw_xor3 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth3(bw_xor3(v1, v2), n) = xorb(nth3(v1, n), nth3(v2, n)))))

logic bw_not3 : t3 -> t3

axiom Nth_bw_not3 :
  (forall v:t3. forall n:int. (((0 <= n) and (n <  32)) -> (nth3(bw_not3(v),
  n) = match_bool(nth3(v, n), false, true))))

logic lsr3 : t3, int -> t3

axiom Lsr_nth_low3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth3(lsr3(b, s), n) = nth3(b, (n + s)))))))

axiom Lsr_nth_high3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth3(lsr3(b, s), n) = false)))))

axiom lsr_zeros3 : (forall x:t3. (lsr3(x, 0) = x))

logic asr3 : t3, int -> t3

axiom Asr_nth_low3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth3(asr3(b, s), n) = nth3(b,
  (n + s)))))))

axiom Asr_nth_high3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth3(asr3(b, s), n) = nth3(b,
  (32 - 1)))))))

axiom asr_zeros3 : (forall x:t3. (asr3(x, 0) = x))

logic lsl3 : t3, int -> t3

axiom Lsl_nth_high3 :
  (forall b:t3. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth3(lsl3(b, s), n) = nth3(b, (n - s)))))

axiom Lsl_nth_low3 :
  (forall b:t3. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth3(lsl3(b, s), n) = false)))

axiom lsl_zeros3 : (forall x:t3. (lsl3(x, 0) = x))

logic rotate_right3 : t3, int -> t3

axiom Nth_rotate_right3 :
  (forall v:t3. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth3(rotate_right3(v, n), i) = nth3(v, ((i + n) % 32))))))

logic rotate_left3 : t3, int -> t3

axiom Nth_rotate_left3 :
  (forall v:t3. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth3(rotate_left3(v, n), i) = nth3(v, ((i - n) % 32))))))

logic is_signed_positive3 : t3 -> prop

logic of_int4 : int -> t3

logic to_int5 : t3 -> int

axiom to_int_def4 :
  (forall x:t3 [to_int5(x)]. ((is_signed_positive3(x) ->
  (to_int5(x) = tqtint3(x))) and ((not is_signed_positive3(x)) ->
  (to_int5(x) = (-(4294967296 - tqtint3(x)))))))

axiom to_uint_extensionality3 :
  (forall v:t3. forall vqt:t3. ((tqtint3(v) = tqtint3(vqt)) -> (v = vqt)))

axiom to_int_extensionality3 :
  (forall v:t3. forall vqt:t3. ((to_int5(v) = to_int5(vqt)) -> (v = vqt)))

predicate uint_in_range3(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds3 :
  (forall v:t3. ((0 <= tqtint3(v)) and (tqtint3(v) <  4294967296)))

axiom to_uint_of_int3 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint3(of_int4(i)) = i)))

logic size_bv3 : t3

axiom to_uint_size_bv3 : (tqtint3(size_bv3) = 32)

axiom to_uint_zeros3 : (tqtint3(zeros3) = 0)

axiom to_uint_one3 : (tqtint3(one3) = 1)

axiom to_uint_ones3 : (tqtint3(ones3) = 4294967295)

predicate ult3(x: t3, y: t3) = (tqtint3(x) <  tqtint3(y))

predicate ule3(x: t3, y: t3) = (tqtint3(x) <= tqtint3(y))

predicate ugt3(x: t3, y: t3) = (tqtint3(y) <  tqtint3(x))

predicate uge3(x: t3, y: t3) = (tqtint3(y) <= tqtint3(x))

predicate slt3(v1: t3, v2: t3) = (to_int5(v1) <  to_int5(v2))

predicate sle3(v1: t3, v2: t3) = (to_int5(v1) <= to_int5(v2))

predicate sgt3(v1: t3, v2: t3) = (to_int5(v2) <  to_int5(v1))

predicate sge3(v1: t3, v2: t3) = (to_int5(v2) <= to_int5(v1))

axiom positive_is_ge_zeros3 :
  (forall x:t3. (is_signed_positive3(x) <-> sge3(x, zeros3)))

logic add3 : t3, t3 -> t3

axiom to_uint_add_bounded3 :
  (forall v1:t3. forall v2:t3.
  (((tqtint3(v1) + tqtint3(v2)) <  4294967296) -> (tqtint3(add3(v1,
  v2)) = (tqtint3(v1) + tqtint3(v2)))))

logic sub3 : t3, t3 -> t3

axiom to_uint_sub_bounded3 :
  (forall v1:t3. forall v2:t3. (((0 <= (tqtint3(v1) - tqtint3(v2))) and
  ((tqtint3(v1) - tqtint3(v2)) <  4294967296)) -> (tqtint3(sub3(v1,
  v2)) = (tqtint3(v1) - tqtint3(v2)))))

logic neg3 : t3 -> t3

axiom to_uint_neg3 :
  (forall v:t3. (tqtint3(neg3(v)) = ((-tqtint3(v)) % 4294967296)))

logic mul3 : t3, t3 -> t3

axiom to_uint_mul_bounded3 :
  (forall v1:t3. forall v2:t3.
  (((tqtint3(v1) * tqtint3(v2)) <  4294967296) -> (tqtint3(mul3(v1,
  v2)) = (tqtint3(v1) * tqtint3(v2)))))

logic udiv3 : t3, t3 -> t3

axiom to_uint_udiv3 :
  (forall v1:t3. forall v2:t3. (tqtint3(udiv3(v1,
  v2)) = (tqtint3(v1) / tqtint3(v2))))

logic urem3 : t3, t3 -> t3

axiom to_uint_urem3 :
  (forall v1:t3. forall v2:t3. (tqtint3(urem3(v1,
  v2)) = (tqtint3(v1) % tqtint3(v2))))

logic lsr_bv3 : t3, t3 -> t3

axiom lsr_bv_is_lsr3 :
  (forall x:t3. forall n:t3. (lsr_bv3(x, n) = lsr3(x, tqtint3(n))))

axiom to_uint_lsr3 :
  (forall v:t3. forall n:t3. (tqtint3(lsr_bv3(v,
  n)) = (tqtint3(v) / pow2(tqtint3(n)))))

logic asr_bv3 : t3, t3 -> t3

axiom asr_bv_is_asr3 :
  (forall x:t3. forall n:t3. (asr_bv3(x, n) = asr3(x, tqtint3(n))))

logic lsl_bv3 : t3, t3 -> t3

axiom lsl_bv_is_lsl3 :
  (forall x:t3. forall n:t3. (lsl_bv3(x, n) = lsl3(x, tqtint3(n))))

axiom to_uint_lsl3 :
  (forall v:t3. forall n:t3. (tqtint3(lsl_bv3(v,
  n)) = ((tqtint3(v) * pow2(tqtint3(n))) % 4294967296)))

logic rotate_right_bv3 : t3, t3 -> t3

logic rotate_left_bv3 : t3, t3 -> t3

axiom rotate_left_bv_is_rotate_left3 :
  (forall v:t3. forall n:t3. (rotate_left_bv3(v, n) = rotate_left3(v,
  tqtint3(n))))

axiom rotate_right_bv_is_rotate_right3 :
  (forall v:t3. forall n:t3. (rotate_right_bv3(v, n) = rotate_right3(v,
  tqtint3(n))))

logic nth_bv3 : t3, t3 -> bool

axiom Nth_bv_is_nth4 :
  (forall x:t3. forall i:t3. (nth3(x, tqtint3(i)) = nth_bv3(x, i)))

axiom Nth_bv_is_nth23 :
  (forall x:t3. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv3(x, of_int4(i)) = nth3(x, i))))

logic eq_sub_bv3 : t3, t3, t3, t3 -> prop

predicate eq_sub3(a: t3, b: t3, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth3(a, j) = nth3(b,
  j))))

axiom eq_sub_equiv3 :
  (forall a:t3. forall b:t3. forall i:t3. forall n:t3. (eq_sub3(a, b,
  tqtint3(i), tqtint3(n)) <-> eq_sub_bv3(a, b, i, n)))

axiom Extensionality3 :
  (forall x:t3. forall y:t3 [eq_sub3(x, y, 0, 32)]. (eq_sub3(x, y, 0, 32) ->
  (x = y)))

type t__ref3 = { t__content3 : t3
}

logic bool_eq7 : t3, t3 -> bool

axiom bool_eq_def6 :
  (forall x:t3. forall y:t3 [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic bool_ne4 : t3, t3 -> bool

axiom bool_ne_def3 :
  (forall x:t3. forall y:t3 [bool_ne4(x, y)]. (((not (x = y)) -> (bool_ne4(x,
  y) = true)) and ((x = y) -> (bool_ne4(x, y) = false))))

logic bool_lt4 : t3, t3 -> bool

axiom bool_lt_def3 :
  (forall x:t3. forall y:t3 [bool_lt4(x, y)]. ((ult3(x, y) -> (bool_lt4(x,
  y) = true)) and ((not ult3(x, y)) -> (bool_lt4(x, y) = false))))

logic bool_le4 : t3, t3 -> bool

axiom bool_le_def3 :
  (forall x:t3. forall y:t3 [bool_le4(x, y)]. ((ule3(x, y) -> (bool_le4(x,
  y) = true)) and ((not ule3(x, y)) -> (bool_le4(x, y) = false))))

logic bool_gt4 : t3, t3 -> bool

axiom bool_gt_def3 :
  (forall x:t3. forall y:t3 [bool_gt4(x, y)]. ((ugt3(x, y) -> (bool_gt4(x,
  y) = true)) and ((not ugt3(x, y)) -> (bool_gt4(x, y) = false))))

logic bool_ge4 : t3, t3 -> bool

axiom bool_ge_def3 :
  (forall x:t3. forall y:t3 [bool_ge4(x, y)]. ((uge3(x, y) -> (bool_ge4(x,
  y) = true)) and ((not uge3(x, y)) -> (bool_ge4(x, y) = false))))

logic power3 : t3, int -> t3

axiom Power_04 : (forall x:t3. (power3(x, 0) = one3))

axiom Power_14 : (forall x:t3. (power3(x, 1) = x))

axiom Power_s4 :
  (forall x:t3. forall n:int. ((0 <= n) -> (power3(x, (n + 1)) = mul3(x,
  power3(x, n)))))

axiom Power_s_alt3 :
  (forall x:t3. forall n:int. ((0 <  n) -> (power3(x, n) = mul3(x, power3(x,
  (n - 1))))))

axiom Power_sum4 :
  (forall x:t3. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power3(x, (n + m)) = mul3(power3(x, n), power3(x, m))))))

axiom Power_mult4 :
  (forall x:t3. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power3(x, (n * m)) = power3(power3(x, n), m)))))

axiom Power_mult23 :
  (forall x:t3. forall y:t3. forall n:int. ((0 <= n) -> (power3(mul3(x, y),
  n) = mul3(power3(x, n), power3(y, n)))))

logic bv_min3 : t3, t3 -> t3

axiom bv_min_def3 :
  (forall x:t3. forall y:t3 [bv_min3(x, y)]. ((ule3(x, y) -> (bv_min3(x,
  y) = x)) and ((not ule3(x, y)) -> (bv_min3(x, y) = y))))

logic bv_max3 : t3, t3 -> t3

axiom bv_max_def3 :
  (forall x:t3. forall y:t3 [bv_max3(x, y)]. ((ule3(x, y) -> (bv_max3(x,
  y) = y)) and ((not ule3(x, y)) -> (bv_max3(x, y) = x))))

axiom bv_min_to_uint3 :
  (forall x:t3. forall y:t3. (tqtint3(bv_min3(x, y)) = min(tqtint3(x),
  tqtint3(y))))

axiom bv_max_to_uint3 :
  (forall x:t3. forall y:t3. (tqtint3(bv_max3(x, y)) = max(tqtint3(x),
  tqtint3(y))))

type u32

logic attr__ATTRIBUTE_MODULUS2 : t3

logic bool_eq8 : t3, t3 -> bool

axiom bool_eq_def7 :
  (forall x:t3. forall y:t3 [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t3 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t3

logic user_eq2 : u32, u32 -> bool

logic dummy2 : u32

type u32__ref = { u32__content : u32
}

function u32__ref___projection(a: u32__ref) : u32 = (a).u32__content

type u64

logic attr__ATTRIBUTE_MODULUS3 : t1

logic bool_eq9 : t1, t1 -> bool

axiom bool_eq_def8 :
  (forall x:t1. forall y:t1 [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t1

logic user_eq3 : u64, u64 -> bool

logic dummy3 : u64

type u64__ref = { u64__content : u64
}

function u64__ref___projection(a: u64__ref) : u64 = (a).u64__content

logic to_rep1 : u64 -> t1

logic of_rep1 : t1 -> u64

axiom inversion_axiom1 :
  (forall x:u64 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t1 [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int6(x: u64) : int = tqtint1(to_rep1(x))

axiom range_int_axiom1 :
  (forall x:u64 [to_int6(x)]. uint_in_range1(to_int6(x)))

type i9

logic attr__ATTRIBUTE_MODULUS4 : t1

predicate in_range1(x: t1) = (ule1(of_int1(0), x) and ule1(x, of_int1(8)))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq10 : t1, t1 -> bool

axiom bool_eq_def9 :
  (forall x:t1. forall y:t1 [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t1

logic user_eq4 : i9, i9 -> bool

logic dummy4 : i9

type i9__ref = { i9__content : i9
}

function i9__ref___projection(a: i9__ref) : i9 = (a).i9__content

type map__ref = { map__content : (t1,byte) farray
}

logic slide : (t1,byte) farray, t1, t1 -> (t1,byte) farray

axiom slide_eq :
  (forall a:(t1,byte) farray.
  (forall first:t1 [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t1,byte) farray.
  (forall old_first:t1.
  (forall new_first:t1.
  (forall i:t1 [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub1(i, sub1(new_first, old_first))]))))))

logic concat : (t1,byte) farray, t1, t1, (t1,byte) farray, t1,
  t1 -> (t1,byte) farray

axiom concat_def :
  (forall a:(t1,byte) farray. forall b:(t1,byte) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1.
  (forall i:t1 [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  (((ule1(a_first, i) and ule1(i, a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and (ugt1(i, a_last) -> ((concat(a,
  a_first, a_last, b, b_first, b_last)[i]) = (b[add1(sub1(i, a_last),
  sub1(b_first, one1))])))))))

logic singleton : byte, t1 -> (t1,byte) farray

axiom singleton_def :
  (forall v:byte.
  (forall i:t1 [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq11 : (t1,byte) farray, t1, t1, (t1,byte) farray, t1, t1 -> bool

axiom bool_eq_def10 :
  (forall a:(t1,byte) farray. forall a__first:t1. forall a__last:t1.
  forall b:(t1,byte) farray. forall b__first:t1. forall b__last:t1
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  (((((ule1(a__first, a__last) and (ule1(b__first, b__last) and
  (sub1(a__last, a__first) = sub1(b__last, b__first)))) or
  ((not ule1(a__first, a__last)) and ugt1(b__first, b__last))) and
  (forall temp___idx_132:t1. (((ule1(a__first, temp___idx_132) and
  ule1(temp___idx_132, a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_132)])))) or (not (ule1(a__first, temp___idx_132) and
  ule1(temp___idx_132, a__last)))))) -> (bool_eq11(a, a__first, a__last, b,
  b__first, b__last) = true)) and ((not (((ule1(a__first, a__last) ->
  (ule1(b__first, b__last) and (sub1(a__last, a__first) = sub1(b__last,
  b__first)))) and ((not ule1(a__first, a__last)) -> ugt1(b__first,
  b__last))) and
  (forall temp___idx_132:t1. ((ule1(a__first, temp___idx_132) and
  ule1(temp___idx_132, a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_132)]))))))) -> (bool_eq11(a, a__first, a__last, b, b__first,
  b__last) = false))))

axiom bool_eq_rev :
  (forall a:(t1,byte) farray. forall b:(t1,byte) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> (((ule1(a__first, a__last) -> (ule1(b__first,
  b__last) and (sub1(a__last, a__first) = sub1(b__last, b__first)))) and
  ((not ule1(a__first, a__last)) -> ugt1(b__first, b__last))) and
  (forall temp___idx_132:t1. ((ule1(a__first, temp___idx_132) and
  ule1(temp___idx_132, a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[add1(sub1(b__first, a__first),
  temp___idx_132)])))))))))

logic compare : (t1,byte) farray, t1, t1, (t1,byte) farray, t1, t1 -> int

axiom compare_def_eq :
  (forall a:(t1,byte) farray. forall b:(t1,byte) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((compare(a, a_first,
  a_last, b, b_first, b_last) = 0) <-> (bool_eq11(a, a_first, a_last, b,
  b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(t1,byte) farray. forall b:(t1,byte) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((compare(a, a_first,
  a_last, b, b_first, b_last) <  0) <->
  (exists i:t1. exists j:t1. (ule1(i, a_last) and (ult1(j, b_last) and
  ((bool_eq11(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  (ult1(i, a_last) and ult(to_rep((a[add1(i, one1)])), to_rep((b[add1(j,
  one1)]))))))))))))

axiom compare_def_gt :
  (forall a:(t1,byte) farray. forall b:(t1,byte) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1
  [compare(a, a_first, a_last, b, b_first, b_last)]. ((0 <  compare(a,
  a_first, a_last, b, b_first, b_last)) <->
  (exists i:t1. exists j:t1. (ule1(i, b_last) and (ult1(j, a_last) and
  ((bool_eq11(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  (ult1(i, b_last) and ugt(to_rep((a[add1(j, one1)])), to_rep((b[add1(i,
  one1)]))))))))))))

type unsigned_64

logic attr__ATTRIBUTE_MODULUS5 : t1

logic bool_eq12 : t1, t1 -> bool

axiom bool_eq_def11 :
  (forall x:t1. forall y:t1 [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t1

logic user_eq5 : unsigned_64, unsigned_64 -> bool

logic dummy5 : unsigned_64

type unsigned_64__ref = { unsigned_64__content : unsigned_64
}

function unsigned_64__ref___projection(a: unsigned_64__ref) : unsigned_64 =
  (a).unsigned_64__content

logic to_rep2 : unsigned_64 -> t1

logic of_rep2 : t1 -> unsigned_64

axiom inversion_axiom2 :
  (forall x:unsigned_64 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : true

axiom coerce_axiom2 :
  (forall x:t1 [to_rep2(of_rep2(x))]. (to_rep2(of_rep2(x)) = x))

function to_int7(x: unsigned_64) : int = tqtint1(to_rep2(x))

axiom range_int_axiom2 :
  (forall x:unsigned_64 [to_int7(x)]. uint_in_range1(to_int7(x)))

type t4

logic first : t4 -> unsigned_64

logic last : t4 -> unsigned_64

logic mk : t1, t1 -> t4

axiom mk_def :
  (forall f:t1. forall l:t1 [mk(f, l)]. ((to_rep2(first(mk(f, l))) = f) and
  (to_rep2(last(mk(f, l))) = l)))

predicate dynamic_property(range_first: t1, range_last: t1, low: t1,
  high: t1) = true

type us_t = { elts : (t1,byte) farray; rt : t4
}

function to_array(a: us_t) : (t1,byte) farray = (a).elts

function of_array(a: (t1,byte) farray, f: t1, l: t1) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : t1 = to_rep2(first((a).rt))

function last1(a: us_t) : t1 = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. ((ule1(first1(a), last1(a)) ->
  (length(a) = ((tqtint1(last1(a)) - tqtint1(first1(a))) + 1))) and
  ((not ule1(first1(a), last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (t1,byte) farray -> int

logic value__component__size : int

logic object__component__size : (t1,byte) farray -> int

logic value__alignment : int

logic object__alignment : (t1,byte) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(t1,byte) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(t1,byte) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(t1,byte) farray. (0 <= object__alignment(a)))

function bool_eq13(x: us_t, y: us_t) : bool = bool_eq11((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq6 : us_t, us_t -> bool

logic dummy6 : (t1,byte) farray

logic dummy7 : t4

type byte_seq__ref = { byte_seq__content : us_t
}

function byte_seq__ref___projection(a: byte_seq__ref) : us_t =
  (a).byte_seq__content

type map__ref1 = { map__content1 : (t1,u64) farray
}

logic slide1 : (t1,u64) farray, t1, t1 -> (t1,u64) farray

axiom slide_eq1 :
  (forall a:(t1,u64) farray.
  (forall first2:t1 [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(t1,u64) farray.
  (forall old_first:t1.
  (forall new_first:t1.
  (forall i:t1 [(slide1(a, old_first, new_first)[i])]. ((slide1(a, old_first,
  new_first)[i]) = (a[sub1(i, sub1(new_first, old_first))]))))))

logic concat1 : (t1,u64) farray, t1, t1, (t1,u64) farray, t1,
  t1 -> (t1,u64) farray

axiom concat_def1 :
  (forall a:(t1,u64) farray. forall b:(t1,u64) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1.
  (forall i:t1 [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((ule1(a_first, i) and ule1(i, a_last)) -> ((concat1(a, a_first, a_last,
  b, b_first, b_last)[i]) = (a[i]))) and (ugt1(i, a_last) -> ((concat1(a,
  a_first, a_last, b, b_first, b_last)[i]) = (b[add1(sub1(i, a_last),
  sub1(b_first, one1))])))))))

logic singleton1 : u64, t1 -> (t1,u64) farray

axiom singleton_def1 :
  (forall v:u64.
  (forall i:t1 [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq14 : (t1,u64) farray, t1, t1, (t1,u64) farray, t1, t1 -> bool

axiom bool_eq_def12 :
  (forall a:(t1,u64) farray. forall a__first:t1. forall a__last:t1.
  forall b:(t1,u64) farray. forall b__first:t1. forall b__last:t1
  [bool_eq14(a, a__first, a__last, b, b__first, b__last)].
  (((((ule1(a__first, a__last) and (ule1(b__first, b__last) and
  (sub1(a__last, a__first) = sub1(b__last, b__first)))) or
  ((not ule1(a__first, a__last)) and ugt1(b__first, b__last))) and
  (forall temp___idx_133:t1. (((ule1(a__first, temp___idx_133) and
  ule1(temp___idx_133, a__last)) and
  (to_rep1((a[temp___idx_133])) = to_rep1((b[add1(sub1(b__first, a__first),
  temp___idx_133)])))) or (not (ule1(a__first, temp___idx_133) and
  ule1(temp___idx_133, a__last)))))) -> (bool_eq14(a, a__first, a__last, b,
  b__first, b__last) = true)) and ((not (((ule1(a__first, a__last) ->
  (ule1(b__first, b__last) and (sub1(a__last, a__first) = sub1(b__last,
  b__first)))) and ((not ule1(a__first, a__last)) -> ugt1(b__first,
  b__last))) and
  (forall temp___idx_133:t1. ((ule1(a__first, temp___idx_133) and
  ule1(temp___idx_133, a__last)) ->
  (to_rep1((a[temp___idx_133])) = to_rep1((b[add1(sub1(b__first, a__first),
  temp___idx_133)]))))))) -> (bool_eq14(a, a__first, a__last, b, b__first,
  b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(t1,u64) farray. forall b:(t1,u64) farray.
  (forall a__first:t1. forall a__last:t1. forall b__first:t1.
  forall b__last:t1. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> (((ule1(a__first, a__last) -> (ule1(b__first,
  b__last) and (sub1(a__last, a__first) = sub1(b__last, b__first)))) and
  ((not ule1(a__first, a__last)) -> ugt1(b__first, b__last))) and
  (forall temp___idx_133:t1. ((ule1(a__first, temp___idx_133) and
  ule1(temp___idx_133, a__last)) ->
  (to_rep1((a[temp___idx_133])) = to_rep1((b[add1(sub1(b__first, a__first),
  temp___idx_133)])))))))))

logic compare1 : (t1,u64) farray, t1, t1, (t1,u64) farray, t1, t1 -> int

axiom compare_def_eq1 :
  (forall a:(t1,u64) farray. forall b:(t1,u64) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1
  [compare1(a, a_first, a_last, b, b_first, b_last)]. ((compare1(a, a_first,
  a_last, b, b_first, b_last) = 0) <-> (bool_eq14(a, a_first, a_last, b,
  b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(t1,u64) farray. forall b:(t1,u64) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1
  [compare1(a, a_first, a_last, b, b_first, b_last)]. ((compare1(a, a_first,
  a_last, b, b_first, b_last) <  0) <->
  (exists i:t1. exists j:t1. (ule1(i, a_last) and (ult1(j, b_last) and
  ((bool_eq14(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  (ult1(i, a_last) and ult1(to_rep1((a[add1(i, one1)])), to_rep1((b[add1(j,
  one1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(t1,u64) farray. forall b:(t1,u64) farray.
  (forall a_first:t1. forall a_last:t1. forall b_first:t1. forall b_last:t1
  [compare1(a, a_first, a_last, b, b_first, b_last)]. ((0 <  compare1(a,
  a_first, a_last, b, b_first, b_last)) <->
  (exists i:t1. exists j:t1. (ule1(i, b_last) and (ult1(j, a_last) and
  ((bool_eq14(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  (ult1(i, b_last) and ugt1(to_rep1((a[add1(j, one1)])), to_rep1((b[add1(i,
  one1)]))))))))))))

type word_count_t

logic attr__ATTRIBUTE_MODULUS6 : t1

predicate in_range2(x: t1) = (ule1(of_int1(0), x) and ule1(x,
  of_int1(2305843009213693951)))

predicate in_range_int1(x: int) = ((0 <= x) and (x <= 2305843009213693951))

logic bool_eq15 : t1, t1 -> bool

axiom bool_eq_def13 :
  (forall x:t1. forall y:t1 [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t1

logic user_eq7 : word_count_t, word_count_t -> bool

logic dummy8 : word_count_t

type word_count_t__ref = { word_count_t__content : word_count_t
}

function word_count_t__ref___projection(a: word_count_t__ref) : word_count_t =
  (a).word_count_t__content

type t5

logic first2 : t5 -> unsigned_64

logic last2 : t5 -> unsigned_64

logic mk1 : t1, t1 -> t5

axiom mk_def1 :
  (forall f:t1. forall l:t1 [mk1(f, l)]. ((to_rep2(first2(mk1(f,
  l))) = f) and (to_rep2(last2(mk1(f, l))) = l)))

predicate dynamic_property1(range_first: t1, range_last: t1, low: t1,
  high: t1) = (ule1(low, high) -> (in_range2(low) and in_range2(high)))

type us_t1 = { elts1 : (t1,u64) farray; rt1 : t5
}

function to_array1(a: us_t1) : (t1,u64) farray = (a).elts1

function of_array1(a: (t1,u64) farray, f: t1, l: t1) : us_t1 = { elts1 = a;
  rt1 = mk1(f, l) }

function first3(a: us_t1) : t1 = to_rep2(first2((a).rt1))

function last3(a: us_t1) : t1 = to_rep2(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. ((ule1(first3(a), last3(a)) ->
  (length1(a) = ((tqtint1(last3(a)) - tqtint1(first3(a))) + 1))) and
  ((not ule1(first3(a), last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (t1,u64) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (t1,u64) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (t1,u64) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(t1,u64) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(t1,u64) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(t1,u64) farray. (0 <= object__alignment1(a)))

function bool_eq16(x: us_t1, y: us_t1) : bool = bool_eq14((x).elts1,
  to_rep2(first2((x).rt1)), to_rep2(last2((x).rt1)), (y).elts1,
  to_rep2(first2((y).rt1)), to_rep2(last2((y).rt1)))

logic user_eq8 : us_t1, us_t1 -> bool

logic dummy9 : (t1,u64) farray

logic dummy10 : t5

type u64_seq__ref = { u64_seq__content : us_t1
}

function u64_seq__ref___projection(a: u64_seq__ref) : us_t1 =
  (a).u64_seq__content

type hash_bit_length

logic attr__ATTRIBUTE_MODULUS7 : t1

predicate in_range3(x: t1) = (ule1(of_int1(0), x) and ule1(x,
  of_int1(18446744073709551608)))

predicate in_range_int2(x: int) = ((0 <= x) and (x <= 18446744073709551608))

logic bool_eq17 : t1, t1 -> bool

axiom bool_eq_def14 :
  (forall x:t1. forall y:t1 [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> t1

logic user_eq9 : hash_bit_length, hash_bit_length -> bool

logic dummy11 : hash_bit_length

type hash_bit_length__ref = { hash_bit_length__content : hash_bit_length
}

function hash_bit_length__ref___projection(a: hash_bit_length__ref) : hash_bit_length =
  (a).hash_bit_length__content

logic to_rep3 : hash_bit_length -> t1

logic of_rep3 : t1 -> hash_bit_length

axiom inversion_axiom3 :
  (forall x:hash_bit_length [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:hash_bit_length [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:t1 [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

function to_int8(x: hash_bit_length) : int = tqtint1(to_rep3(x))

axiom range_int_axiom3 :
  (forall x:hash_bit_length [to_int8(x)]. in_range_int2(to_int8(x)))

type initialized_hash_bit_length

logic attr__ATTRIBUTE_MODULUS8 : t1

predicate in_range4(x: t1) = (ule1(of_int1(1), x) and ule1(x,
  of_int1(18446744073709551608)))

predicate in_range_int3(x: int) = ((1 <= x) and (x <= 18446744073709551608))

logic bool_eq18 : t1, t1 -> bool

axiom bool_eq_def15 :
  (forall x:t1. forall y:t1 [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> t1

logic user_eq10 : initialized_hash_bit_length,
  initialized_hash_bit_length -> bool

logic dummy12 : initialized_hash_bit_length

type initialized_hash_bit_length__ref = {
initialized_hash_bit_length__content : initialized_hash_bit_length
}

function initialized_hash_bit_length__ref___projection(a: initialized_hash_bit_length__ref) : initialized_hash_bit_length =
  (a).initialized_hash_bit_length__content

type skein_512_block_bytes_count

logic attr__ATTRIBUTE_MODULUS9 : t1

predicate in_range5(x: t1) = (ule1(of_int1(0), x) and ule1(x, of_int1(64)))

predicate in_range_int4(x: int) = ((0 <= x) and (x <= 64))

logic bool_eq19 : t1, t1 -> bool

axiom bool_eq_def16 :
  (forall x:t1. forall y:t1 [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> t1

logic user_eq11 : skein_512_block_bytes_count,
  skein_512_block_bytes_count -> bool

logic dummy13 : skein_512_block_bytes_count

type skein_512_block_bytes_count__ref = {
skein_512_block_bytes_count__content : skein_512_block_bytes_count
}

function skein_512_block_bytes_count__ref___projection(a: skein_512_block_bytes_count__ref) : skein_512_block_bytes_count =
  (a).skein_512_block_bytes_count__content

type skein_512_block_bytes_index

logic attr__ATTRIBUTE_MODULUS10 : t1

predicate in_range6(x: t1) = (ule1(of_int1(0), x) and ule1(x, of_int1(63)))

predicate in_range_int5(x: int) = ((0 <= x) and (x <= 63))

logic bool_eq20 : t1, t1 -> bool

axiom bool_eq_def17 :
  (forall x:t1. forall y:t1 [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> t1

logic user_eq12 : skein_512_block_bytes_index,
  skein_512_block_bytes_index -> bool

logic dummy14 : skein_512_block_bytes_index

type skein_512_block_bytes_index__ref = {
skein_512_block_bytes_index__content : skein_512_block_bytes_index
}

function skein_512_block_bytes_index__ref___projection(a: skein_512_block_bytes_index__ref) : skein_512_block_bytes_index =
  (a).skein_512_block_bytes_index__content

logic i25s : (t1,byte) farray

logic attr__ATTRIBUTE_ADDRESS : int

type positive_block_512_count_t

logic attr__ATTRIBUTE_MODULUS11 : t1

predicate in_range7(x: t1) = (ule1(of_int1(1), x) and ule1(x,
  of_int1(288230376151711743)))

predicate in_range_int6(x: int) = ((1 <= x) and (x <= 288230376151711743))

logic bool_eq21 : t1, t1 -> bool

axiom bool_eq_def18 :
  (forall x:t1. forall y:t1 [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> t1

logic user_eq13 : positive_block_512_count_t,
  positive_block_512_count_t -> bool

logic dummy15 : positive_block_512_count_t

type positive_block_512_count_t__ref = { positive_block_512_count_t__content
: positive_block_512_count_t
}

function positive_block_512_count_t__ref___projection(a: positive_block_512_count_t__ref) : positive_block_512_count_t =
  (a).positive_block_512_count_t__content

type u7

predicate in_range8(x: t) = (ule(of_int(0), x) and ule(x, of_int(127)))

predicate in_range_int7(x: int) = ((0 <= x) and (x <= 127))

logic bool_eq22 : t, t -> bool

axiom bool_eq_def19 :
  (forall x:t. forall y:t [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> t

logic user_eq14 : u7, u7 -> bool

logic dummy16 : u7

type u7__ref = { u7__content : u7
}

function u7__ref___projection(a: u7__ref) : u7 = (a).u7__content

type u6

predicate in_range9(x: t) = (ule(of_int(0), x) and ule(x, of_int(63)))

predicate in_range_int8(x: int) = ((0 <= x) and (x <= 63))

logic bool_eq23 : t, t -> bool

axiom bool_eq_def20 :
  (forall x:t. forall y:t [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> t

logic user_eq15 : u6, u6 -> bool

logic dummy17 : u6

type u6__ref = { u6__content : u6
}

function u6__ref___projection(a: u6__ref) : u6 = (a).u6__content

logic to_rep4 : u16 -> t2

logic of_rep4 : t2 -> u16

axiom inversion_axiom4 :
  (forall x:u16 [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : true

axiom coerce_axiom4 :
  (forall x:t2 [to_rep4(of_rep4(x))]. (to_rep4(of_rep4(x)) = x))

function to_int9(x: u16) : int = tqtint2(to_rep4(x))

axiom range_int_axiom4 :
  (forall x:u16 [to_int9(x)]. uint_in_range2(to_int9(x)))

logic to_rep5 : u32 -> t3

logic of_rep5 : t3 -> u32

axiom inversion_axiom5 :
  (forall x:u32 [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : true

axiom coerce_axiom5 :
  (forall x:t3 [to_rep5(of_rep5(x))]. (to_rep5(of_rep5(x)) = x))

function to_int10(x: u32) : int = tqtint3(to_rep5(x))

axiom range_int_axiom5 :
  (forall x:u32 [to_int10(x)]. uint_in_range3(to_int10(x)))

logic to_rep6 : u7 -> t

logic of_rep6 : t -> u7

axiom inversion_axiom6 :
  (forall x:u7 [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 : (forall x:u7 [to_rep6(x)]. in_range8(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:t [to_rep6(of_rep6(x))]. (in_range8(urem(x, of_int(128))) ->
  (to_rep6(of_rep6(x)) = urem(x, of_int(128)))))

function to_int11(x: u7) : int = tqtint(to_rep6(x))

axiom range_int_axiom6 :
  (forall x:u7 [to_int11(x)]. in_range_int7(to_int11(x)))

logic to_rep7 : u6 -> t

logic of_rep7 : t -> u6

axiom inversion_axiom7 :
  (forall x:u6 [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 : (forall x:u6 [to_rep7(x)]. in_range9(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:t [to_rep7(of_rep7(x))]. (in_range9(urem(x, of_int(64))) ->
  (to_rep7(of_rep7(x)) = urem(x, of_int(64)))))

function to_int12(x: u6) : int = tqtint(to_rep7(x))

axiom range_int_axiom7 :
  (forall x:u6 [to_int12(x)]. in_range_int8(to_int12(x)))

type us_split_fields = { rec__skein__tweak_value__byte_count_lsb : u64;
rec__skein__tweak_value__byte_count_msb : u32;
rec__skein__tweak_value__reserved : u16; rec__skein__tweak_value__tree_level
: u7; rec__skein__tweak_value__bit_pad : bool;
rec__skein__tweak_value__field_type : u6;
rec__skein__tweak_value__first_block : bool;
rec__skein__tweak_value__final_block : bool
}

function us_split_fields_Byte_Count_LSB__projection(a: us_split_fields) : u64 =
  (a).rec__skein__tweak_value__byte_count_lsb

function us_split_fields_Byte_Count_MSB__projection(a: us_split_fields) : u32 =
  (a).rec__skein__tweak_value__byte_count_msb

function us_split_fields_Reserved__projection(a: us_split_fields) : u16 =
  (a).rec__skein__tweak_value__reserved

function us_split_fields_Tree_Level__projection(a: us_split_fields) : u7 =
  (a).rec__skein__tweak_value__tree_level

function us_split_fields_Bit_Pad__projection(a: us_split_fields) : bool =
  (a).rec__skein__tweak_value__bit_pad

function us_split_fields_Field_Type__projection(a: us_split_fields) : u6 =
  (a).rec__skein__tweak_value__field_type

function us_split_fields_First_Block__projection(a: us_split_fields) : bool =
  (a).rec__skein__tweak_value__first_block

function us_split_fields_Final_Block__projection(a: us_split_fields) : bool =
  (a).rec__skein__tweak_value__final_block

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq24 : us_rep, us_rep -> bool

axiom bool_eq_def21 :
  (forall a:us_rep. forall b:us_rep [bool_eq24(a, b)].
  ((((((((((to_rep1(((a).us_split_fields1).rec__skein__tweak_value__byte_count_lsb) = to_rep1(((b).us_split_fields1).rec__skein__tweak_value__byte_count_lsb)) and
  (to_rep5(((a).us_split_fields1).rec__skein__tweak_value__byte_count_msb) = to_rep5(((b).us_split_fields1).rec__skein__tweak_value__byte_count_msb))) and
  (to_rep4(((a).us_split_fields1).rec__skein__tweak_value__reserved) = to_rep4(((b).us_split_fields1).rec__skein__tweak_value__reserved))) and
  (to_rep6(((a).us_split_fields1).rec__skein__tweak_value__tree_level) = to_rep6(((b).us_split_fields1).rec__skein__tweak_value__tree_level))) and
  (((a).us_split_fields1).rec__skein__tweak_value__bit_pad = ((b).us_split_fields1).rec__skein__tweak_value__bit_pad)) and
  (to_rep7(((a).us_split_fields1).rec__skein__tweak_value__field_type) = to_rep7(((b).us_split_fields1).rec__skein__tweak_value__field_type))) and
  (((a).us_split_fields1).rec__skein__tweak_value__first_block = ((b).us_split_fields1).rec__skein__tweak_value__first_block)) and
  (((a).us_split_fields1).rec__skein__tweak_value__final_block = ((b).us_split_fields1).rec__skein__tweak_value__final_block)) ->
  (bool_eq24(a, b) = true)) and
  ((not ((((((((to_rep1(((a).us_split_fields1).rec__skein__tweak_value__byte_count_lsb) = to_rep1(((b).us_split_fields1).rec__skein__tweak_value__byte_count_lsb)) and
  (to_rep5(((a).us_split_fields1).rec__skein__tweak_value__byte_count_msb) = to_rep5(((b).us_split_fields1).rec__skein__tweak_value__byte_count_msb))) and
  (to_rep4(((a).us_split_fields1).rec__skein__tweak_value__reserved) = to_rep4(((b).us_split_fields1).rec__skein__tweak_value__reserved))) and
  (to_rep6(((a).us_split_fields1).rec__skein__tweak_value__tree_level) = to_rep6(((b).us_split_fields1).rec__skein__tweak_value__tree_level))) and
  (((a).us_split_fields1).rec__skein__tweak_value__bit_pad = ((b).us_split_fields1).rec__skein__tweak_value__bit_pad)) and
  (to_rep7(((a).us_split_fields1).rec__skein__tweak_value__field_type) = to_rep7(((b).us_split_fields1).rec__skein__tweak_value__field_type))) and
  (((a).us_split_fields1).rec__skein__tweak_value__first_block = ((b).us_split_fields1).rec__skein__tweak_value__first_block)) and
  (((a).us_split_fields1).rec__skein__tweak_value__final_block = ((b).us_split_fields1).rec__skein__tweak_value__final_block))) ->
  (bool_eq24(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:u64. forall a1:u32. forall a2:u16. forall a3:u7. forall a4:bool.
  forall a5:u6. forall a6:bool. forall a7:bool. (0 <= object__size2({
  us_split_fields1 = { rec__skein__tweak_value__byte_count_lsb = a;
  rec__skein__tweak_value__byte_count_msb = a1;
  rec__skein__tweak_value__reserved = a2;
  rec__skein__tweak_value__tree_level = a3;
  rec__skein__tweak_value__bit_pad = a4;
  rec__skein__tweak_value__field_type = a5;
  rec__skein__tweak_value__first_block = a6;
  rec__skein__tweak_value__final_block = a7 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:u64. forall a1:u32. forall a2:u16. forall a3:u7. forall a4:bool.
  forall a5:u6. forall a6:bool. forall a7:bool. (0 <= object__alignment2({
  us_split_fields1 = { rec__skein__tweak_value__byte_count_lsb = a;
  rec__skein__tweak_value__byte_count_msb = a1;
  rec__skein__tweak_value__reserved = a2;
  rec__skein__tweak_value__tree_level = a3;
  rec__skein__tweak_value__bit_pad = a4;
  rec__skein__tweak_value__field_type = a5;
  rec__skein__tweak_value__first_block = a6;
  rec__skein__tweak_value__final_block = a7 } })))

logic skein__tweak_value__byte_count_lsb__first__bit : int

logic skein__tweak_value__byte_count_lsb__last__bit : int

logic skein__tweak_value__byte_count_lsb__position : int

axiom skein__tweak_value__byte_count_lsb__first__bit_axiom :
  (0 <= skein__tweak_value__byte_count_lsb__first__bit)

axiom skein__tweak_value__byte_count_lsb__last__bit_axiom :
  (skein__tweak_value__byte_count_lsb__first__bit <  skein__tweak_value__byte_count_lsb__last__bit)

axiom skein__tweak_value__byte_count_lsb__position_axiom :
  (0 <= skein__tweak_value__byte_count_lsb__position)

logic skein__tweak_value__byte_count_msb__first__bit : int

logic skein__tweak_value__byte_count_msb__last__bit : int

logic skein__tweak_value__byte_count_msb__position : int

axiom skein__tweak_value__byte_count_msb__first__bit_axiom :
  (0 <= skein__tweak_value__byte_count_msb__first__bit)

axiom skein__tweak_value__byte_count_msb__last__bit_axiom :
  (skein__tweak_value__byte_count_msb__first__bit <  skein__tweak_value__byte_count_msb__last__bit)

axiom skein__tweak_value__byte_count_msb__position_axiom :
  (0 <= skein__tweak_value__byte_count_msb__position)

logic skein__tweak_value__reserved__first__bit : int

logic skein__tweak_value__reserved__last__bit : int

logic skein__tweak_value__reserved__position : int

axiom skein__tweak_value__reserved__first__bit_axiom :
  (0 <= skein__tweak_value__reserved__first__bit)

axiom skein__tweak_value__reserved__last__bit_axiom :
  (skein__tweak_value__reserved__first__bit <  skein__tweak_value__reserved__last__bit)

axiom skein__tweak_value__reserved__position_axiom :
  (0 <= skein__tweak_value__reserved__position)

logic skein__tweak_value__tree_level__first__bit : int

logic skein__tweak_value__tree_level__last__bit : int

logic skein__tweak_value__tree_level__position : int

axiom skein__tweak_value__tree_level__first__bit_axiom :
  (0 <= skein__tweak_value__tree_level__first__bit)

axiom skein__tweak_value__tree_level__last__bit_axiom :
  (skein__tweak_value__tree_level__first__bit <  skein__tweak_value__tree_level__last__bit)

axiom skein__tweak_value__tree_level__position_axiom :
  (0 <= skein__tweak_value__tree_level__position)

logic skein__tweak_value__bit_pad__first__bit : int

logic skein__tweak_value__bit_pad__last__bit : int

logic skein__tweak_value__bit_pad__position : int

axiom skein__tweak_value__bit_pad__first__bit_axiom :
  (0 <= skein__tweak_value__bit_pad__first__bit)

axiom skein__tweak_value__bit_pad__last__bit_axiom :
  (skein__tweak_value__bit_pad__first__bit <  skein__tweak_value__bit_pad__last__bit)

axiom skein__tweak_value__bit_pad__position_axiom :
  (0 <= skein__tweak_value__bit_pad__position)

logic skein__tweak_value__field_type__first__bit : int

logic skein__tweak_value__field_type__last__bit : int

logic skein__tweak_value__field_type__position : int

axiom skein__tweak_value__field_type__first__bit_axiom :
  (0 <= skein__tweak_value__field_type__first__bit)

axiom skein__tweak_value__field_type__last__bit_axiom :
  (skein__tweak_value__field_type__first__bit <  skein__tweak_value__field_type__last__bit)

axiom skein__tweak_value__field_type__position_axiom :
  (0 <= skein__tweak_value__field_type__position)

logic skein__tweak_value__first_block__first__bit : int

logic skein__tweak_value__first_block__last__bit : int

logic skein__tweak_value__first_block__position : int

axiom skein__tweak_value__first_block__first__bit_axiom :
  (0 <= skein__tweak_value__first_block__first__bit)

axiom skein__tweak_value__first_block__last__bit_axiom :
  (skein__tweak_value__first_block__first__bit <  skein__tweak_value__first_block__last__bit)

axiom skein__tweak_value__first_block__position_axiom :
  (0 <= skein__tweak_value__first_block__position)

logic skein__tweak_value__final_block__first__bit : int

logic skein__tweak_value__final_block__last__bit : int

logic skein__tweak_value__final_block__position : int

axiom skein__tweak_value__final_block__first__bit_axiom :
  (0 <= skein__tweak_value__final_block__first__bit)

axiom skein__tweak_value__final_block__last__bit_axiom :
  (skein__tweak_value__final_block__first__bit <  skein__tweak_value__final_block__last__bit)

axiom skein__tweak_value__final_block__position_axiom :
  (0 <= skein__tweak_value__final_block__position)

logic user_eq16 : us_rep, us_rep -> bool

logic dummy18 : u64

logic dummy19 : u32

logic dummy20 : u16

logic dummy21 : u7

logic dummy22 : bool

logic dummy23 : u6

logic dummy24 : bool

logic dummy25 : bool

type tweak_value__ref = { tweak_value__content : us_rep
}

function tweak_value__ref___projection(a: tweak_value__ref) : us_rep =
  (a).tweak_value__content

type us_split_fields2 = { rec__skein__context_header__tweak_words : us_rep;
rec__skein__context_header__hash_bit_len : hash_bit_length;
rec__skein__context_header__byte_count : u64
}

function us_split_fields_Tweak_Words__projection(a: us_split_fields2) : us_rep =
  (a).rec__skein__context_header__tweak_words

function us_split_fields_Hash_Bit_Len__projection(a: us_split_fields2) : hash_bit_length =
  (a).rec__skein__context_header__hash_bit_len

function us_split_fields_Byte_Count__projection(a: us_split_fields2) : u64 =
  (a).rec__skein__context_header__byte_count

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq25 : us_rep1, us_rep1 -> bool

axiom bool_eq_def22 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq25(a, b)].
  (((((bool_eq24(((a).us_split_fields3).rec__skein__context_header__tweak_words,
  ((b).us_split_fields3).rec__skein__context_header__tweak_words) = true) and
  (to_rep3(((a).us_split_fields3).rec__skein__context_header__hash_bit_len) = to_rep3(((b).us_split_fields3).rec__skein__context_header__hash_bit_len))) and
  (to_rep1(((a).us_split_fields3).rec__skein__context_header__byte_count) = to_rep1(((b).us_split_fields3).rec__skein__context_header__byte_count))) ->
  (bool_eq25(a, b) = true)) and
  ((not (((bool_eq24(((a).us_split_fields3).rec__skein__context_header__tweak_words,
  ((b).us_split_fields3).rec__skein__context_header__tweak_words) = true) and
  (to_rep3(((a).us_split_fields3).rec__skein__context_header__hash_bit_len) = to_rep3(((b).us_split_fields3).rec__skein__context_header__hash_bit_len))) and
  (to_rep1(((a).us_split_fields3).rec__skein__context_header__byte_count) = to_rep1(((b).us_split_fields3).rec__skein__context_header__byte_count)))) ->
  (bool_eq25(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:u64. forall a1:u32. forall a2:u16. forall a3:u7. forall a4:bool.
  forall a5:u6. forall a6:bool. forall a7:bool. forall a8:hash_bit_length.
  forall a9:u64. (0 <= object__size3({ us_split_fields3 = {
  rec__skein__context_header__tweak_words = { us_split_fields1 = {
  rec__skein__tweak_value__byte_count_lsb = a;
  rec__skein__tweak_value__byte_count_msb = a1;
  rec__skein__tweak_value__reserved = a2;
  rec__skein__tweak_value__tree_level = a3;
  rec__skein__tweak_value__bit_pad = a4;
  rec__skein__tweak_value__field_type = a5;
  rec__skein__tweak_value__first_block = a6;
  rec__skein__tweak_value__final_block = a7 } };
  rec__skein__context_header__hash_bit_len = a8;
  rec__skein__context_header__byte_count = a9 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:u64. forall a1:u32. forall a2:u16. forall a3:u7. forall a4:bool.
  forall a5:u6. forall a6:bool. forall a7:bool. forall a8:hash_bit_length.
  forall a9:u64. (0 <= object__alignment3({ us_split_fields3 = {
  rec__skein__context_header__tweak_words = { us_split_fields1 = {
  rec__skein__tweak_value__byte_count_lsb = a;
  rec__skein__tweak_value__byte_count_msb = a1;
  rec__skein__tweak_value__reserved = a2;
  rec__skein__tweak_value__tree_level = a3;
  rec__skein__tweak_value__bit_pad = a4;
  rec__skein__tweak_value__field_type = a5;
  rec__skein__tweak_value__first_block = a6;
  rec__skein__tweak_value__final_block = a7 } };
  rec__skein__context_header__hash_bit_len = a8;
  rec__skein__context_header__byte_count = a9 } })))

logic skein__context_header__tweak_words__first__bit : int

logic skein__context_header__tweak_words__last__bit : int

logic skein__context_header__tweak_words__position : int

axiom skein__context_header__tweak_words__first__bit_axiom :
  (0 <= skein__context_header__tweak_words__first__bit)

axiom skein__context_header__tweak_words__last__bit_axiom :
  (skein__context_header__tweak_words__first__bit <  skein__context_header__tweak_words__last__bit)

axiom skein__context_header__tweak_words__position_axiom :
  (0 <= skein__context_header__tweak_words__position)

logic skein__context_header__hash_bit_len__first__bit : int

logic skein__context_header__hash_bit_len__last__bit : int

logic skein__context_header__hash_bit_len__position : int

axiom skein__context_header__hash_bit_len__first__bit_axiom :
  (0 <= skein__context_header__hash_bit_len__first__bit)

axiom skein__context_header__hash_bit_len__last__bit_axiom :
  (skein__context_header__hash_bit_len__first__bit <  skein__context_header__hash_bit_len__last__bit)

axiom skein__context_header__hash_bit_len__position_axiom :
  (0 <= skein__context_header__hash_bit_len__position)

logic skein__context_header__byte_count__first__bit : int

logic skein__context_header__byte_count__last__bit : int

logic skein__context_header__byte_count__position : int

axiom skein__context_header__byte_count__first__bit_axiom :
  (0 <= skein__context_header__byte_count__first__bit)

axiom skein__context_header__byte_count__last__bit_axiom :
  (skein__context_header__byte_count__first__bit <  skein__context_header__byte_count__last__bit)

axiom skein__context_header__byte_count__position_axiom :
  (0 <= skein__context_header__byte_count__position)

logic user_eq17 : us_rep1, us_rep1 -> bool

logic dummy26 : u64

logic dummy27 : u32

logic dummy28 : u16

logic dummy29 : u7

logic dummy30 : bool

logic dummy31 : u6

logic dummy32 : bool

logic dummy33 : bool

logic dummy34 : hash_bit_length

logic dummy35 : u64

type context_header__ref = { context_header__content : us_rep1
}

function context_header__ref___projection(a: context_header__ref) : us_rep1 =
  (a).context_header__content

logic dummy36 : (t1,u64) farray

logic value__size4 : int

logic object__size4 : (t1,u64) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (t1,u64) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (t1,u64) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(t1,u64) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(t1,u64) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(t1,u64) farray. (0 <= object__alignment4(a)))

logic user_eq18 : (t1,u64) farray, (t1,u64) farray -> bool

logic dummy37 : (t1,byte) farray

logic value__size5 : int

logic object__size5 : (t1,byte) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (t1,byte) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (t1,byte) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(t1,byte) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(t1,byte) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(t1,byte) farray. (0 <= object__alignment5(a)))

logic user_eq19 : (t1,byte) farray, (t1,byte) farray -> bool

type us_split_fields4 = { rec__skein__skein_512_context__h : us_rep1;
rec__skein__skein_512_context__x : (t1,u64) farray;
rec__skein__skein_512_context__b : (t1,byte) farray
}

function us_split_fields_H__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__skein__skein_512_context__h

function us_split_fields_X__projection(a: us_split_fields4) : (t1,u64) farray =
  (a).rec__skein__skein_512_context__x

function us_split_fields_B__projection(a: us_split_fields4) : (t1,byte) farray =
  (a).rec__skein__skein_512_context__b

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq26 : us_rep2, us_rep2 -> bool

axiom bool_eq_def23 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq26(a, b)].
  (((((bool_eq25(((a).us_split_fields5).rec__skein__skein_512_context__h,
  ((b).us_split_fields5).rec__skein__skein_512_context__h) = true) and
  (bool_eq14(((a).us_split_fields5).rec__skein__skein_512_context__x,
  of_int1(0), of_int1(7),
  ((b).us_split_fields5).rec__skein__skein_512_context__x, of_int1(0),
  of_int1(7)) = true)) and
  (bool_eq11(((a).us_split_fields5).rec__skein__skein_512_context__b,
  of_int1(0), of_int1(63),
  ((b).us_split_fields5).rec__skein__skein_512_context__b, of_int1(0),
  of_int1(63)) = true)) -> (bool_eq26(a, b) = true)) and
  ((not (((bool_eq25(((a).us_split_fields5).rec__skein__skein_512_context__h,
  ((b).us_split_fields5).rec__skein__skein_512_context__h) = true) and
  (bool_eq14(((a).us_split_fields5).rec__skein__skein_512_context__x,
  of_int1(0), of_int1(7),
  ((b).us_split_fields5).rec__skein__skein_512_context__x, of_int1(0),
  of_int1(7)) = true)) and
  (bool_eq11(((a).us_split_fields5).rec__skein__skein_512_context__b,
  of_int1(0), of_int1(63),
  ((b).us_split_fields5).rec__skein__skein_512_context__b, of_int1(0),
  of_int1(63)) = true))) -> (bool_eq26(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep2 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep2 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:u64. forall a1:u32. forall a2:u16. forall a3:u7. forall a4:bool.
  forall a5:u6. forall a6:bool. forall a7:bool. forall a8:hash_bit_length.
  forall a9:u64. forall a10:(t1,u64) farray. forall a11:(t1,byte) farray.
  (0 <= object__size6({ us_split_fields5 = {
  rec__skein__skein_512_context__h = { us_split_fields3 = {
  rec__skein__context_header__tweak_words = { us_split_fields1 = {
  rec__skein__tweak_value__byte_count_lsb = a;
  rec__skein__tweak_value__byte_count_msb = a1;
  rec__skein__tweak_value__reserved = a2;
  rec__skein__tweak_value__tree_level = a3;
  rec__skein__tweak_value__bit_pad = a4;
  rec__skein__tweak_value__field_type = a5;
  rec__skein__tweak_value__first_block = a6;
  rec__skein__tweak_value__final_block = a7 } };
  rec__skein__context_header__hash_bit_len = a8;
  rec__skein__context_header__byte_count = a9 } };
  rec__skein__skein_512_context__x = a10; rec__skein__skein_512_context__b =
  a11 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:u64. forall a1:u32. forall a2:u16. forall a3:u7. forall a4:bool.
  forall a5:u6. forall a6:bool. forall a7:bool. forall a8:hash_bit_length.
  forall a9:u64. forall a10:(t1,u64) farray. forall a11:(t1,byte) farray.
  (0 <= object__alignment6({ us_split_fields5 = {
  rec__skein__skein_512_context__h = { us_split_fields3 = {
  rec__skein__context_header__tweak_words = { us_split_fields1 = {
  rec__skein__tweak_value__byte_count_lsb = a;
  rec__skein__tweak_value__byte_count_msb = a1;
  rec__skein__tweak_value__reserved = a2;
  rec__skein__tweak_value__tree_level = a3;
  rec__skein__tweak_value__bit_pad = a4;
  rec__skein__tweak_value__field_type = a5;
  rec__skein__tweak_value__first_block = a6;
  rec__skein__tweak_value__final_block = a7 } };
  rec__skein__context_header__hash_bit_len = a8;
  rec__skein__context_header__byte_count = a9 } };
  rec__skein__skein_512_context__x = a10; rec__skein__skein_512_context__b =
  a11 } })))

logic skein__skein_512_context__h__first__bit : int

logic skein__skein_512_context__h__last__bit : int

logic skein__skein_512_context__h__position : int

axiom skein__skein_512_context__h__first__bit_axiom :
  (0 <= skein__skein_512_context__h__first__bit)

axiom skein__skein_512_context__h__last__bit_axiom :
  (skein__skein_512_context__h__first__bit <  skein__skein_512_context__h__last__bit)

axiom skein__skein_512_context__h__position_axiom :
  (0 <= skein__skein_512_context__h__position)

logic skein__skein_512_context__x__first__bit : int

logic skein__skein_512_context__x__last__bit : int

logic skein__skein_512_context__x__position : int

axiom skein__skein_512_context__x__first__bit_axiom :
  (0 <= skein__skein_512_context__x__first__bit)

axiom skein__skein_512_context__x__last__bit_axiom :
  (skein__skein_512_context__x__first__bit <  skein__skein_512_context__x__last__bit)

axiom skein__skein_512_context__x__position_axiom :
  (0 <= skein__skein_512_context__x__position)

logic skein__skein_512_context__b__first__bit : int

logic skein__skein_512_context__b__last__bit : int

logic skein__skein_512_context__b__position : int

axiom skein__skein_512_context__b__first__bit_axiom :
  (0 <= skein__skein_512_context__b__first__bit)

axiom skein__skein_512_context__b__last__bit_axiom :
  (skein__skein_512_context__b__first__bit <  skein__skein_512_context__b__last__bit)

axiom skein__skein_512_context__b__position_axiom :
  (0 <= skein__skein_512_context__b__position)

logic user_eq20 : us_rep2, us_rep2 -> bool

logic dummy38 : u64

logic dummy39 : u32

logic dummy40 : u16

logic dummy41 : u7

logic dummy42 : bool

logic dummy43 : u6

logic dummy44 : bool

logic dummy45 : bool

logic dummy46 : hash_bit_length

logic dummy47 : u64

logic dummy48 : (t1,u64) farray

logic dummy49 : (t1,byte) farray

type skein_512_context__ref = { skein_512_context__content : us_rep2
}

function skein_512_context__ref___projection(a: skein_512_context__ref) : us_rep2 =
  (a).skein_512_context__content

logic add_in_range : t1, t1 -> bool

logic add_in_range__function_guard : bool, t1, t1 -> prop

axiom add_in_range__post_axiom : true

axiom add_in_range__def_axiom :
  (forall x:t1. forall y:t1 [add_in_range(x, y)]. ((add_in_range(x,
  y) = true) <-> ule1(y, sub1(of_int1(18446744073709551615), x))))

type modifier_words_index

logic attr__ATTRIBUTE_MODULUS12 : t1

predicate in_range10(x: t1) = (ule1(of_int1(0), x) and ule1(x, of_int1(1)))

predicate in_range_int9(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq27 : t1, t1 -> bool

axiom bool_eq_def24 :
  (forall x:t1. forall y:t1 [bool_eq27(x, y)]. (((x = y) -> (bool_eq27(x,
  y) = true)) and ((not (x = y)) -> (bool_eq27(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> t1

logic user_eq21 : modifier_words_index, modifier_words_index -> bool

logic dummy50 : modifier_words_index

type modifier_words_index__ref = { modifier_words_index__content :
modifier_words_index
}

function modifier_words_index__ref___projection(a: modifier_words_index__ref) : modifier_words_index =
  (a).modifier_words_index__content

type source__ref = { source__content : us_rep
}

function source__ref___projection(a: source__ref) : us_rep =
  (a).source__content

logic tweak_to_words : us_rep -> (t1,u64) farray

logic tweak_to_words__function_guard : (t1,u64) farray, us_rep -> prop

axiom tweak_to_words__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS1 : int

logic block : (t1,byte) farray

logic block1 : t4

logic attr__ATTRIBUTE_ADDRESS2 : int

logic starting_offset : t1

logic attr__ATTRIBUTE_ADDRESS3 : int

logic block_count : t1

logic attr__ATTRIBUTE_ADDRESS4 : int

logic byte_count_add : t1

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic src_offset : t1

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic c206b : t1

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic temp___1523 : t1, t1, t1 -> (t1,u64) farray

axiom def_axiom :
  (forall temp___1525:t1. forall temp___1526:t1. forall temp___1527:t1.
  ((((temp___1523(temp___1525, temp___1526,
  temp___1527)[of_int1(0)]) = of_rep1(temp___1525)) and
  ((temp___1523(temp___1525, temp___1526,
  temp___1527)[of_int1(1)]) = of_rep1(temp___1526))) and
  ((temp___1523(temp___1525, temp___1526,
  temp___1527)[of_int1(2)]) = of_rep1(temp___1527))))

logic temp___1540 : t1, t1, t1, t1, t1, t1, t1, t1 -> (t1,u64) farray

axiom def_axiom1 :
  (forall temp___1542:t1. forall temp___1543:t1. forall temp___1544:t1.
  forall temp___1545:t1. forall temp___1546:t1. forall temp___1547:t1.
  forall temp___1548:t1. forall temp___1549:t1.
  (((((((((temp___1540(temp___1542, temp___1543, temp___1544, temp___1545,
  temp___1546, temp___1547, temp___1548,
  temp___1549)[of_int1(0)]) = of_rep1(temp___1542)) and
  ((temp___1540(temp___1542, temp___1543, temp___1544, temp___1545,
  temp___1546, temp___1547, temp___1548,
  temp___1549)[of_int1(1)]) = of_rep1(temp___1543))) and
  ((temp___1540(temp___1542, temp___1543, temp___1544, temp___1545,
  temp___1546, temp___1547, temp___1548,
  temp___1549)[of_int1(2)]) = of_rep1(temp___1544))) and
  ((temp___1540(temp___1542, temp___1543, temp___1544, temp___1545,
  temp___1546, temp___1547, temp___1548,
  temp___1549)[of_int1(3)]) = of_rep1(temp___1545))) and
  ((temp___1540(temp___1542, temp___1543, temp___1544, temp___1545,
  temp___1546, temp___1547, temp___1548,
  temp___1549)[of_int1(4)]) = of_rep1(temp___1546))) and
  ((temp___1540(temp___1542, temp___1543, temp___1544, temp___1545,
  temp___1546, temp___1547, temp___1548,
  temp___1549)[of_int1(5)]) = of_rep1(temp___1547))) and
  ((temp___1540(temp___1542, temp___1543, temp___1544, temp___1545,
  temp___1546, temp___1547, temp___1548,
  temp___1549)[of_int1(6)]) = of_rep1(temp___1548))) and
  ((temp___1540(temp___1542, temp___1543, temp___1544, temp___1545,
  temp___1546, temp___1547, temp___1548,
  temp___1549)[of_int1(7)]) = of_rep1(temp___1549))))

logic temp___1551 : t1, t1, t1, t1, t1, t1, t1, t1 -> (t1,u64) farray

axiom def_axiom2 :
  (forall temp___1553:t1. forall temp___1554:t1. forall temp___1555:t1.
  forall temp___1556:t1. forall temp___1557:t1. forall temp___1558:t1.
  forall temp___1559:t1. forall temp___1560:t1.
  (((((((((temp___1551(temp___1553, temp___1554, temp___1555, temp___1556,
  temp___1557, temp___1558, temp___1559,
  temp___1560)[of_int1(0)]) = of_rep1(temp___1553)) and
  ((temp___1551(temp___1553, temp___1554, temp___1555, temp___1556,
  temp___1557, temp___1558, temp___1559,
  temp___1560)[of_int1(1)]) = of_rep1(temp___1554))) and
  ((temp___1551(temp___1553, temp___1554, temp___1555, temp___1556,
  temp___1557, temp___1558, temp___1559,
  temp___1560)[of_int1(2)]) = of_rep1(temp___1555))) and
  ((temp___1551(temp___1553, temp___1554, temp___1555, temp___1556,
  temp___1557, temp___1558, temp___1559,
  temp___1560)[of_int1(3)]) = of_rep1(temp___1556))) and
  ((temp___1551(temp___1553, temp___1554, temp___1555, temp___1556,
  temp___1557, temp___1558, temp___1559,
  temp___1560)[of_int1(4)]) = of_rep1(temp___1557))) and
  ((temp___1551(temp___1553, temp___1554, temp___1555, temp___1556,
  temp___1557, temp___1558, temp___1559,
  temp___1560)[of_int1(5)]) = of_rep1(temp___1558))) and
  ((temp___1551(temp___1553, temp___1554, temp___1555, temp___1556,
  temp___1557, temp___1558, temp___1559,
  temp___1560)[of_int1(6)]) = of_rep1(temp___1559))) and
  ((temp___1551(temp___1553, temp___1554, temp___1555, temp___1556,
  temp___1557, temp___1558, temp___1559,
  temp___1560)[of_int1(7)]) = of_rep1(temp___1560))))

 (* File "g-bytswa.ads", line 189, characters 0-0 *)
goal WP_parameter_def :
  (forall ctx__split_fields:u64. forall ctx__split_fields1:u32.
  forall ctx__split_fields2:u16. forall ctx__split_fields3:u7.
  forall ctx__split_fields4:bool. forall ctx__split_fields5:u6.
  forall ctx__split_fields6:bool. forall ctx__split_fields7:bool.
  forall ctx__split_fields8:hash_bit_length. forall ctx__split_fields9:u64.
  forall ctx__split_fields10:(t1,u64) farray.
  forall ctx__split_fields11:(t1,byte) farray. forall ts:(t1,u64) farray.
  forall ks:(t1,u64) farray. forall x:(t1,u64) farray.
  forall w:(t1,u64) farray. forall j:t1. forall i:t1. forall w0:t1.
  forall w1:t1. forall dst_index:t1. forall src_index:t1.
  forall temp___1574:(t1,u64) farray. forall temp___1572:(t1,u64) farray.
  forall temp___1571:u64. forall temp___15711:u32. forall temp___15712:u16.
  forall temp___15713:u7. forall temp___15714:bool. forall temp___15715:u6.
  forall temp___15716:bool. forall temp___15717:bool.
  forall temp___15718:hash_bit_length. forall temp___15719:u64.
  forall temp___157110:(t1,u64) farray.
  forall temp___157111:(t1,byte) farray. forall temp___1570:(t1,u64) farray.
  forall temp___1568:(t1,u64) farray.
  forall skein__skein_512_process_block__B_8__src_offset__assume:t1.
  forall o:u64. forall o1:u64. forall o2:u32. forall o3:u16. forall o4:u7.
  forall o5:bool. forall o6:u6. forall o7:bool. forall o8:bool.
  forall o9:u64. forall o10:u32. forall o11:u16. forall o12:u7.
  forall o13:bool. forall o14:u6. forall o15:bool. forall o16:bool.
  forall o17:u64. forall o18:u32. forall o19:u16. forall o20:u7.
  forall o21:bool. forall o22:u6. forall o23:bool. forall o24:bool.
  forall o25:hash_bit_length. forall o26:u64. forall o27:u64. forall o28:u32.
  forall o29:u16. forall o30:u7. forall o31:bool. forall o32:u6.
  forall o33:bool. forall o34:bool. forall o35:hash_bit_length.
  forall o36:u64. forall o37:u64. forall o38:u32. forall o39:u16.
  forall o40:u7. forall o41:bool. forall o42:u6. forall o43:bool.
  forall o44:bool. forall o45:hash_bit_length. forall o46:u64.
  forall o47:(t1,u64) farray. forall o48:(t1,byte) farray.
  forall temp___1514:u64. forall temp___15141:u32. forall temp___15142:u16.
  forall temp___15143:u7. forall temp___15144:bool. forall temp___15145:u6.
  forall temp___15146:bool. forall temp___15147:bool.
  forall temp___15148:hash_bit_length. forall temp___15149:u64.
  forall temp___151410:(t1,u64) farray.
  forall temp___151411:(t1,byte) farray. forall o49:u64.
  forall o50:(t1,u64) farray. forall o51:u64. forall o52:(t1,u64) farray.
  forall o53:u64. forall o54:(t1,u64) farray. forall o55:u64.
  forall o56:(t1,u64) farray. forall o57:u64. forall o58:(t1,u64) farray.
  forall o59:u64. forall o60:(t1,u64) farray. forall o61:u64.
  forall o62:(t1,u64) farray. forall o63:u64. forall o64:(t1,u64) farray.
  forall o65:u64. forall o66:(t1,u64) farray. forall o67:u64.
  forall o68:(t1,u64) farray. forall o69:u64. forall o70:(t1,u64) farray.
  forall o71:u64. forall o72:(t1,u64) farray. forall o73:u64.
  forall o74:(t1,u64) farray. forall o75:u64. forall o76:(t1,u64) farray.
  forall o77:u64. forall o78:(t1,u64) farray. forall o79:u64.
  forall o80:(t1,u64) farray. forall o81:u64. forall o82:(t1,u64) farray.
  forall o83:(t1,u64) farray. forall temp___1521:us_t1. forall o84:u64.
  forall o85:t1. forall o86:(t1,u64) farray. forall temp___1522:us_t1.
  forall o87:u64. forall o88:t1. forall o89:t1. forall o90:t1.
  forall o91:byte. forall o92:t. forall o93:t1. forall o94:byte.
  forall o95:t. forall o96:t1. forall o97:t1. forall o98:t1. forall o99:t1.
  forall o100:byte. forall o101:t. forall o102:t1. forall o103:t1.
  forall o104:t1. forall o105:t1. forall o106:byte. forall o107:t.
  forall o108:t1. forall o109:t1. forall o110:t1. forall o111:t1.
  forall o112:byte. forall o113:t. forall o114:t1. forall o115:t1.
  forall o116:t1. forall o117:t1. forall o118:byte. forall o119:t.
  forall o120:t1. forall o121:t1. forall o122:t1. forall o123:t1.
  forall o124:byte. forall o125:t. forall o126:t1. forall o127:t1.
  forall o128:t1. forall o129:t1. forall o130:byte. forall o131:t.
  forall o132:t1. forall o133:t1. forall o134:t1. forall o135:t1.
  forall o136:u64. forall o137:(t1,u64) farray. forall o138:t1.
  forall o139:t1. forall o140:byte. forall o141:t. forall o142:t1.
  forall o143:byte. forall o144:t. forall o145:t1. forall o146:t1.
  forall o147:t1. forall o148:t1. forall o149:byte. forall o150:t.
  forall o151:t1. forall o152:t1. forall o153:t1. forall o154:t1.
  forall o155:byte. forall o156:t. forall o157:t1. forall o158:t1.
  forall o159:t1. forall o160:t1. forall o161:byte. forall o162:t.
  forall o163:t1. forall o164:t1. forall o165:t1. forall o166:t1.
  forall o167:byte. forall o168:t. forall o169:t1. forall o170:t1.
  forall o171:t1. forall o172:t1. forall o173:byte. forall o174:t.
  forall o175:t1. forall o176:t1. forall o177:t1. forall o178:t1.
  forall o179:byte. forall o180:t. forall o181:t1. forall o182:t1.
  forall o183:t1. forall o184:t1. forall o185:u64.
  forall o186:(t1,u64) farray. forall o187:t1. forall o188:t1.
  forall o189:byte. forall o190:t. forall o191:t1. forall o192:byte.
  forall o193:t. forall o194:t1. forall o195:t1. forall o196:t1.
  forall o197:t1. forall o198:byte. forall o199:t. forall o200:t1.
  forall o201:t1. forall o202:t1. forall o203:t1. forall o204:byte.
  forall o205:t. forall o206:t1. forall o207:t1. forall o208:t1.
  forall o209:t1. forall o210:byte. forall o211:t. forall o212:t1.
  forall o213:t1. forall o214:t1. forall o215:t1. forall o216:byte.
  forall o217:t. forall o218:t1. forall o219:t1. forall o220:t1.
  forall o221:t1. forall o222:byte. forall o223:t. forall o224:t1.
  forall o225:t1. forall o226:t1. forall o227:t1. forall o228:byte.
  forall o229:t. forall o230:t1. forall o231:t1. forall o232:t1.
  forall o233:t1. forall o234:u64. forall o235:(t1,u64) farray.
  forall o236:t1. forall o237:t1. forall o238:byte. forall o239:t.
  forall o240:t1. forall o241:byte. forall o242:t. forall o243:t1.
  forall o244:t1. forall o245:t1. forall o246:t1. forall o247:byte.
  forall o248:t. forall o249:t1. forall o250:t1. forall o251:t1.
  forall o252:t1. forall o253:byte. forall o254:t. forall o255:t1.
  forall o256:t1. forall o257:t1. forall o258:t1. forall o259:byte.
  forall o260:t. forall o261:t1. forall o262:t1. forall o263:t1.
  forall o264:t1. forall o265:byte. forall o266:t. forall o267:t1.
  forall o268:t1. forall o269:t1. forall o270:t1. forall o271:byte.
  forall o272:t. forall o273:t1. forall o274:t1. forall o275:t1.
  forall o276:t1. forall o277:byte. forall o278:t. forall o279:t1.
  forall o280:t1. forall o281:t1. forall o282:t1. forall o283:u64.
  forall o284:(t1,u64) farray. forall o285:t1. forall o286:t1.
  forall o287:byte. forall o288:t. forall o289:t1. forall o290:byte.
  forall o291:t. forall o292:t1. forall o293:t1. forall o294:t1.
  forall o295:t1. forall o296:byte. forall o297:t. forall o298:t1.
  forall o299:t1. forall o300:t1. forall o301:t1. forall o302:byte.
  forall o303:t. forall o304:t1. forall o305:t1. forall o306:t1.
  forall o307:t1. forall o308:byte. forall o309:t. forall o310:t1.
  forall o311:t1. forall o312:t1. forall o313:t1. forall o314:byte.
  forall o315:t. forall o316:t1. forall o317:t1. forall o318:t1.
  forall o319:t1. forall o320:byte. forall o321:t. forall o322:t1.
  forall o323:t1. forall o324:t1. forall o325:t1. forall o326:byte.
  forall o327:t. forall o328:t1. forall o329:t1. forall o330:t1.
  forall o331:t1. forall o332:u64. forall o333:(t1,u64) farray.
  forall o334:t1. forall o335:t1. forall o336:byte. forall o337:t.
  forall o338:t1. forall o339:byte. forall o340:t. forall o341:t1.
  forall o342:t1. forall o343:t1. forall o344:t1. forall o345:byte.
  forall o346:t. forall o347:t1. forall o348:t1. forall o349:t1.
  forall o350:t1. forall o351:byte. forall o352:t. forall o353:t1.
  forall o354:t1. forall o355:t1. forall o356:t1. forall o357:byte.
  forall o358:t. forall o359:t1. forall o360:t1. forall o361:t1.
  forall o362:t1. forall o363:byte. forall o364:t. forall o365:t1.
  forall o366:t1. forall o367:t1. forall o368:t1. forall o369:byte.
  forall o370:t. forall o371:t1. forall o372:t1. forall o373:t1.
  forall o374:t1. forall o375:byte. forall o376:t. forall o377:t1.
  forall o378:t1. forall o379:t1. forall o380:t1. forall o381:u64.
  forall o382:(t1,u64) farray. forall o383:t1. forall o384:t1.
  forall o385:byte. forall o386:t. forall o387:t1. forall o388:byte.
  forall o389:t. forall o390:t1. forall o391:t1. forall o392:t1.
  forall o393:t1. forall o394:byte. forall o395:t. forall o396:t1.
  forall o397:t1. forall o398:t1. forall o399:t1. forall o400:byte.
  forall o401:t. forall o402:t1. forall o403:t1. forall o404:t1.
  forall o405:t1. forall o406:byte. forall o407:t. forall o408:t1.
  forall o409:t1. forall o410:t1. forall o411:t1. forall o412:byte.
  forall o413:t. forall o414:t1. forall o415:t1. forall o416:t1.
  forall o417:t1. forall o418:byte. forall o419:t. forall o420:t1.
  forall o421:t1. forall o422:t1. forall o423:t1. forall o424:byte.
  forall o425:t. forall o426:t1. forall o427:t1. forall o428:t1.
  forall o429:t1. forall o430:u64. forall o431:(t1,u64) farray.
  forall o432:t1. forall o433:t1. forall o434:byte. forall o435:t.
  forall o436:t1. forall o437:byte. forall o438:t. forall o439:t1.
  forall o440:t1. forall o441:t1. forall o442:t1. forall o443:byte.
  forall o444:t. forall o445:t1. forall o446:t1. forall o447:t1.
  forall o448:t1. forall o449:byte. forall o450:t. forall o451:t1.
  forall o452:t1. forall o453:t1. forall o454:t1. forall o455:byte.
  forall o456:t. forall o457:t1. forall o458:t1. forall o459:t1.
  forall o460:t1. forall o461:byte. forall o462:t. forall o463:t1.
  forall o464:t1. forall o465:t1. forall o466:t1. forall o467:byte.
  forall o468:t. forall o469:t1. forall o470:t1. forall o471:t1.
  forall o472:t1. forall o473:byte. forall o474:t. forall o475:t1.
  forall o476:t1. forall o477:t1. forall o478:t1. forall o479:u64.
  forall o480:(t1,u64) farray. forall o481:u64. forall o482:(t1,u64) farray.
  forall o483:u64. forall o484:(t1,u64) farray.
  forall ctx__split_fields12:us_split_fields4. forall ts1:(t1,u64) farray.
  forall ks1:(t1,u64) farray. forall x1:(t1,u64) farray.
  forall w2:(t1,u64) farray. forall i1:t1. forall w01:t1. forall w11:t1.
  forall dst_index1:t1. forall src_index1:t1. forall result:t__ref1.
  forall j1:t1. forall ctx__split_fields13:us_split_fields4.
  forall ts2:(t1,u64) farray. forall ks2:(t1,u64) farray.
  forall x2:(t1,u64) farray. forall w3:(t1,u64) farray. forall j2:t1.
  forall i2:t1. forall w02:t1. forall w12:t1. forall dst_index2:t1.
  forall src_index2:t1. forall result1:us_split_fields__ref2.
  forall ctx__split_fields14:us_split_fields4. forall result2:map__ref1.
  forall ks3:(t1,u64) farray. forall result3:t__ref1. forall i3:t1.
  forall result4:map__ref1. forall ks4:(t1,u64) farray.
  forall result5:map__ref1. forall ks5:(t1,u64) farray.
  forall result6:t__ref1. forall i4:t1. forall result7:map__ref1.
  forall ks6:(t1,u64) farray. forall result8:map__ref1.
  forall ks7:(t1,u64) farray. forall result9:t__ref1. forall i5:t1.
  forall result10:map__ref1. forall ks8:(t1,u64) farray.
  forall result11:map__ref1. forall ks9:(t1,u64) farray.
  forall result12:t__ref1. forall i6:t1. forall result13:map__ref1.
  forall ks10:(t1,u64) farray. forall result14:map__ref1.
  forall ks11:(t1,u64) farray. forall result15:t__ref1. forall i7:t1.
  forall result16:map__ref1. forall ks12:(t1,u64) farray.
  forall result17:map__ref1. forall ks13:(t1,u64) farray.
  forall result18:t__ref1. forall i8:t1. forall result19:map__ref1.
  forall ks14:(t1,u64) farray. forall result20:map__ref1.
  forall ks15:(t1,u64) farray. forall result21:t__ref1. forall i10:t1.
  forall result22:map__ref1. forall ks16:(t1,u64) farray.
  forall result23:map__ref1. forall ks17:(t1,u64) farray.
  forall result24:t__ref1. forall i11:t1. forall result25:map__ref1.
  forall ks18:(t1,u64) farray. forall result26:map__ref1.
  forall ks19:(t1,u64) farray. forall result27:t__ref1. forall w03:t1.
  forall result28:t__ref1. forall w13:t1. forall result29:map__ref1.
  forall ts3:(t1,u64) farray. forall result30:t__ref1. forall dst_index3:t1.
  forall result31:t__ref1. forall src_index3:t1. forall result32:map__ref1.
  forall w4:(t1,u64) farray. forall result33:t__ref1. forall dst_index4:t1.
  forall result34:t__ref1. forall src_index4:t1. forall result35:map__ref1.
  forall w5:(t1,u64) farray. forall result36:t__ref1. forall dst_index5:t1.
  forall result37:t__ref1. forall src_index5:t1. forall result38:map__ref1.
  forall w6:(t1,u64) farray. forall result39:t__ref1. forall dst_index6:t1.
  forall result40:t__ref1. forall src_index6:t1. forall result41:map__ref1.
  forall w7:(t1,u64) farray. forall result42:t__ref1. forall dst_index7:t1.
  forall result43:t__ref1. forall src_index7:t1. forall result44:map__ref1.
  forall w8:(t1,u64) farray. forall result45:t__ref1. forall dst_index8:t1.
  forall result46:t__ref1. forall src_index8:t1. forall result47:map__ref1.
  forall w9:(t1,u64) farray. forall result48:t__ref1. forall dst_index9:t1.
  forall result49:t__ref1. forall src_index9:t1. forall result50:map__ref1.
  forall w10:(t1,u64) farray. forall result51:t__ref1. forall dst_index10:t1.
  forall result52:t__ref1. forall src_index10:t1. forall result53:map__ref1.
  forall w14:(t1,u64) farray. forall result54:map__ref1.
  forall x3:(t1,u64) farray. forall result55:map__ref1.
  forall x4:(t1,u64) farray. forall result56:map__ref1.
  forall x5:(t1,u64) farray. forall x6:(t1,u64) farray.
  forall result57:us_split_fields__ref2.
  forall ctx__split_fields15:us_split_fields4.
  forall result58:us_split_fields__ref2.
  forall ctx__split_fields16:us_split_fields4.
  forall ctx__split_fields17:us_split_fields__ref2. forall ts4:map__ref1.
  forall ks20:map__ref1. forall x7:map__ref1. forall w15:map__ref1.
  forall j3:t__ref1. forall i12:t__ref1. forall w04:t__ref1.
  forall w16:t__ref1. forall dst_index11:t__ref1. forall src_index11:t__ref1.
  forall ctx__split_fields18:us_split_fields4. forall ts5:(t1,u64) farray.
  forall ks21:(t1,u64) farray. forall x8:(t1,u64) farray.
  forall w17:(t1,u64) farray. forall j4:t1. forall i13:t1. forall w05:t1.
  forall w18:t1. forall dst_index12:t1. forall src_index12:t1.
  forall ctx__split_fields19:us_split_fields__ref2. forall ts6:map__ref1.
  forall ks22:map__ref1. forall x9:map__ref1. forall w19:map__ref1.
  forall j5:t__ref1. forall i14:t__ref1. forall w06:t__ref1.
  forall w110:t__ref1. forall dst_index13:t__ref1.
  forall src_index13:t__ref1. forall ctx__split_fields20:us_split_fields4.
  forall ts7:(t1,u64) farray. forall ks23:(t1,u64) farray.
  forall x10:(t1,u64) farray. forall w20:(t1,u64) farray. forall j6:t1.
  forall i15:t1. forall w07:t1. forall w111:t1. forall dst_index14:t1.
  forall src_index14:t1. forall ctx__split_fields21:us_split_fields__ref2.
  forall ts8:map__ref1. forall ks24:map__ref1. forall x11:map__ref1.
  forall w21:map__ref1. forall j7:t__ref1. forall i16:t__ref1.
  forall w08:t__ref1. forall w112:t__ref1. forall dst_index15:t__ref1.
  forall src_index15:t__ref1. forall ctx__split_fields22:us_split_fields4.
  forall ts9:(t1,u64) farray. forall ks25:(t1,u64) farray.
  forall x12:(t1,u64) farray. forall w22:(t1,u64) farray. forall j8:t1.
  forall i17:t1. forall w09:t1. forall w113:t1. forall dst_index16:t1.
  forall src_index16:t1. ((ult1(to_rep2(last(mk(of_int1(0), of_int1(63)))),
  of_int1(18446744073709551615)) and (ult1(to_rep2(last(mk(of_int1(0),
  of_int1(63)))), of_int1(18446744073709551615)) and
  ((dynamic_property(of_int1(0), of_int1(18446744073709551615),
  to_rep2(first(block1)), to_rep2(last(block1))) and
  ult1(to_rep2(last(block1)), of_int1(18446744073709551615))) and
  (in_range7(block_count) and
  ((((((in_range4(to_rep3(ctx__split_fields8)) and
  in_range5(to_rep1(ctx__split_fields9))) and
  (to_rep2(first(block1)) = of_int1(0))) and (add_in_range(starting_offset,
  add1(mul1(sub1(block_count, of_int1(1)), of_int1(64)),
  of_int1(63))) = true)) and ule1(add1(add1(starting_offset,
  mul1(sub1(block_count, of_int1(1)), of_int1(64))), of_int1(63)),
  to_rep2(last(block1)))) and ule1(add1(starting_offset, of_int1(63)),
  to_rep2(last(block1)))) and ((((result = { t__content1 = j }) and
  (j1 = of_int1(1))) and (((ule1(of_int1(1), j1) and ule1(j1,
  block_count)) and ((((temp___1574 = x) and ((temp___1572 = ks) and
  (((((ctx__split_fields = temp___1571) and
  ((ctx__split_fields1 = temp___15711) and
  ((ctx__split_fields2 = temp___15712) and
  ((ctx__split_fields3 = temp___15713) and
  ((ctx__split_fields4 = temp___15714) and
  ((ctx__split_fields5 = temp___15715) and
  ((ctx__split_fields6 = temp___15716) and
  (ctx__split_fields7 = temp___15717)))))))) and
  ((ctx__split_fields8 = temp___15718) and
  (ctx__split_fields9 = temp___15719))) and
  ((ctx__split_fields10 = temp___157110) and
  (ctx__split_fields11 = temp___157111))) and ((temp___1570 = ts) and
  ((temp___1568 = w) and (((ult1(to_rep2(last(mk(of_int1(0), of_int1(63)))),
  of_int1(18446744073709551615)) and
  ((((((((((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__byte_count_msb = temp___15711) and
  ((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__reserved = temp___15712)) and
  ((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__tree_level = temp___15713)) and
  ((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__bit_pad = temp___15714)) and
  ((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__field_type = temp___15715)) and
  ((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__final_block = temp___15717)) and
  ((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len = temp___15718)) and
  ((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__byte_count = temp___15719)) and
  ((ctx__split_fields13).rec__skein__skein_512_context__b = temp___157111))) and
  (ule1(of_int1(1), j2) and ule1(j2, block_count))) and
  (((skein__skein_512_process_block__B_8__src_offset__assume = add1(starting_offset,
  mul1(sub1(j2, of_int1(1)), of_int1(64)))) and
  (skein__skein_512_process_block__B_8__src_offset__assume = src_offset)) and
  (((((((((to_rep1(o) = add1(to_rep1((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__byte_count_lsb),
  byte_count_add)) and ((o = o1) and
  (((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__byte_count_msb = o2) and
  (((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__reserved = o3) and
  (((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__tree_level = o4) and
  (((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__bit_pad = o5) and
  (((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__field_type = o6) and
  (((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__first_block = o7) and
  ((((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__final_block = o8))))))))) and
  ((o9 = o1) and ((o10 = o2) and ((o11 = o3) and ((o12 = o4) and
  ((o13 = o5) and ((o14 = o6) and ((o15 = o7) and (o16 = o8))))))))) and
  (((o17 = o9) and ((o18 = o10) and ((o19 = o11) and ((o20 = o12) and
  ((o21 = o13) and ((o22 = o14) and ((o23 = o15) and (o24 = o16)))))))) and
  (((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len = o25) and
  ((((ctx__split_fields13).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__byte_count = o26)))) and
  (((o27 = o17) and ((o28 = o18) and ((o29 = o19) and ((o30 = o20) and
  ((o31 = o21) and ((o32 = o22) and ((o33 = o23) and (o34 = o24)))))))) and
  ((o35 = o25) and (o36 = o26)))) and ((((o37 = o27) and ((o38 = o28) and
  ((o39 = o29) and ((o40 = o30) and ((o41 = o31) and ((o42 = o32) and
  ((o43 = o33) and (o44 = o34)))))))) and ((o45 = o35) and (o46 = o36))) and
  (((ctx__split_fields13).rec__skein__skein_512_context__x = o47) and
  ((ctx__split_fields13).rec__skein__skein_512_context__b = o48)))) and
  ((((temp___1514 = o37) and ((temp___15141 = o38) and
  ((temp___15142 = o39) and ((temp___15143 = o40) and
  ((temp___15144 = o41) and ((temp___15145 = o42) and
  ((temp___15146 = o43) and (temp___15147 = o44)))))))) and
  ((temp___15148 = o45) and (temp___15149 = o46))) and
  ((temp___151410 = o47) and (temp___151411 = o48)))) and ((result1 = {
  us_split_fields__content2 = ctx__split_fields13 }) and
  (ctx__split_fields14 = { rec__skein__skein_512_context__h = {
  us_split_fields3 = { rec__skein__context_header__tweak_words = {
  us_split_fields1 = { rec__skein__tweak_value__byte_count_lsb = temp___1514;
  rec__skein__tweak_value__byte_count_msb = temp___15141;
  rec__skein__tweak_value__reserved = temp___15142;
  rec__skein__tweak_value__tree_level = temp___15143;
  rec__skein__tweak_value__bit_pad = temp___15144;
  rec__skein__tweak_value__field_type = temp___15145;
  rec__skein__tweak_value__first_block = temp___15146;
  rec__skein__tweak_value__final_block = temp___15147 } };
  rec__skein__context_header__hash_bit_len = temp___15148;
  rec__skein__context_header__byte_count = temp___15149 } };
  rec__skein__skein_512_context__x = temp___151410;
  rec__skein__skein_512_context__b = temp___151411 }))) and
  ((((to_rep1(o49) = of_int1(2004413935125273122)) and
  (o50 = (ks2[of_int1(8) <- o49]))) and ((result2 = { map__content1 = ks2
  }) and (ks3 = o50))) and ((((result3 = { t__content1 = i2 }) and
  (i3 = of_int1(0))) and
  ((((to_rep1(o51) = to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i3]))) and
  (o52 = (ks3[i3 <- o51]))) and ((result4 = { map__content1 = ks3 }) and
  (ks4 = o52))) and ((((to_rep1(o53) = bw_xor1(to_rep1((ks4[of_int1(8)])),
  to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i3])))) and
  (o54 = (ks4[of_int1(8) <- o53]))) and ((result5 = { map__content1 = ks4
  }) and (ks5 = o54))) and (((result6 = { t__content1 = i3 }) and
  (i4 = of_int1(1))) and
  ((((to_rep1(o55) = to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i4]))) and
  (o56 = (ks5[i4 <- o55]))) and ((result7 = { map__content1 = ks5 }) and
  (ks6 = o56))) and ((((to_rep1(o57) = bw_xor1(to_rep1((ks6[of_int1(8)])),
  to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i4])))) and
  (o58 = (ks6[of_int1(8) <- o57]))) and ((result8 = { map__content1 = ks6
  }) and (ks7 = o58))) and (((result9 = { t__content1 = i4 }) and
  (i5 = of_int1(2))) and
  ((((to_rep1(o59) = to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i5]))) and
  (o60 = (ks7[i5 <- o59]))) and ((result10 = { map__content1 = ks7 }) and
  (ks8 = o60))) and ((((to_rep1(o61) = bw_xor1(to_rep1((ks8[of_int1(8)])),
  to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i5])))) and
  (o62 = (ks8[of_int1(8) <- o61]))) and ((result11 = { map__content1 = ks8
  }) and (ks9 = o62))) and (((result12 = { t__content1 = i5 }) and
  (i6 = of_int1(3))) and
  ((((to_rep1(o63) = to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i6]))) and
  (o64 = (ks9[i6 <- o63]))) and ((result13 = { map__content1 = ks9 }) and
  (ks10 = o64))) and ((((to_rep1(o65) = bw_xor1(to_rep1((ks10[of_int1(8)])),
  to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i6])))) and
  (o66 = (ks10[of_int1(8) <- o65]))) and ((result14 = { map__content1 = ks10
  }) and (ks11 = o66))) and (((result15 = { t__content1 = i6 }) and
  (i7 = of_int1(4))) and
  ((((to_rep1(o67) = to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i7]))) and
  (o68 = (ks11[i7 <- o67]))) and ((result16 = { map__content1 = ks11 }) and
  (ks12 = o68))) and ((((to_rep1(o69) = bw_xor1(to_rep1((ks12[of_int1(8)])),
  to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i7])))) and
  (o70 = (ks12[of_int1(8) <- o69]))) and ((result17 = { map__content1 = ks12
  }) and (ks13 = o70))) and (((result18 = { t__content1 = i7 }) and
  (i8 = of_int1(5))) and
  ((((to_rep1(o71) = to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i8]))) and
  (o72 = (ks13[i8 <- o71]))) and ((result19 = { map__content1 = ks13 }) and
  (ks14 = o72))) and ((((to_rep1(o73) = bw_xor1(to_rep1((ks14[of_int1(8)])),
  to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i8])))) and
  (o74 = (ks14[of_int1(8) <- o73]))) and ((result20 = { map__content1 = ks14
  }) and (ks15 = o74))) and (((result21 = { t__content1 = i8 }) and
  (i10 = of_int1(6))) and
  ((((to_rep1(o75) = to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i10]))) and
  (o76 = (ks15[i10 <- o75]))) and ((result22 = { map__content1 = ks15 }) and
  (ks16 = o76))) and ((((to_rep1(o77) = bw_xor1(to_rep1((ks16[of_int1(8)])),
  to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i10])))) and
  (o78 = (ks16[of_int1(8) <- o77]))) and ((result23 = { map__content1 = ks16
  }) and (ks17 = o78))) and (((result24 = { t__content1 = i10 }) and
  (i11 = of_int1(7))) and
  ((((to_rep1(o79) = to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i11]))) and
  (o80 = (ks17[i11 <- o79]))) and ((result25 = { map__content1 = ks17 }) and
  (ks18 = o80))) and (((to_rep1(o81) = bw_xor1(to_rep1((ks18[of_int1(8)])),
  to_rep1(((ctx__split_fields14).rec__skein__skein_512_context__x[i11])))) and
  (o82 = (ks18[of_int1(8) <- o81]))) and ((result26 = { map__content1 = ks18
  }) and (ks19 = o82)))))))))))))))))))))))))) and
  ((((((o83 = tweak_to_words((((ctx__split_fields14).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words)) and
  (temp___1521 = { elts1 = o83; rt1 = mk1(of_int1(0), of_int1(1)) })) and
  (o84 = ((temp___1521).elts1[of_int1(0)]))) and (o85 = to_rep1(o84))) and
  ((result27 = { t__content1 = w02 }) and (w03 = o85))) and
  ((((((o86 = tweak_to_words((((ctx__split_fields14).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words)) and
  (temp___1522 = { elts1 = o86; rt1 = mk1(of_int1(0), of_int1(1)) })) and
  (o87 = ((temp___1522).elts1[of_int1(1)]))) and (o88 = to_rep1(o87))) and
  ((result28 = { t__content1 = w12 }) and (w13 = o88))) and (((result29 = {
  map__content1 = ts2 }) and (ts3 = temp___1523(w03, w13, bw_xor1(w03,
  w13)))) and ((src_offset = c206b) and ((((result30 = { t__content1 =
  dst_index2 }) and (dst_index3 = of_int1(0))) and (((o89 = add1(c206b,
  mul1(dst_index3, of_int1(8)))) and ((result31 = { t__content1 = src_index2
  }) and (src_index3 = o89))) and (((((((((((ule1(to_rep2(first(block1)),
  add1(src_index3, of_int1(7))) and ule1(add1(src_index3, of_int1(7)),
  to_rep2(last(block1)))) and (o129 = add1(src_index3, of_int1(7)))) and
  (o130 = (block[o129]))) and (o131 = to_rep(o130))) and
  (o132 = toBig(o131))) and (o133 = lsl_bv1(o132, of_int1(56)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index3, of_int1(6))) and
  ule1(add1(src_index3, of_int1(6)), to_rep2(last(block1)))) and
  (o123 = add1(src_index3, of_int1(6)))) and (o124 = (block[o123]))) and
  (o125 = to_rep(o124))) and (o126 = toBig(o125))) and (o127 = lsl_bv1(o126,
  of_int1(48)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index3,
  of_int1(5))) and ule1(add1(src_index3, of_int1(5)),
  to_rep2(last(block1)))) and (o117 = add1(src_index3, of_int1(5)))) and
  (o118 = (block[o117]))) and (o119 = to_rep(o118))) and
  (o120 = toBig(o119))) and (o121 = lsl_bv1(o120, of_int1(40)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index3, of_int1(4))) and
  ule1(add1(src_index3, of_int1(4)), to_rep2(last(block1)))) and
  (o111 = add1(src_index3, of_int1(4)))) and (o112 = (block[o111]))) and
  (o113 = to_rep(o112))) and (o114 = toBig(o113))) and (o115 = lsl_bv1(o114,
  of_int1(32)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index3,
  of_int1(3))) and ule1(add1(src_index3, of_int1(3)),
  to_rep2(last(block1)))) and (o105 = add1(src_index3, of_int1(3)))) and
  (o106 = (block[o105]))) and (o107 = to_rep(o106))) and
  (o108 = toBig(o107))) and (o109 = lsl_bv1(o108, of_int1(24)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index3, of_int1(2))) and
  ule1(add1(src_index3, of_int1(2)), to_rep2(last(block1)))) and
  (o99 = add1(src_index3, of_int1(2)))) and (o100 = (block[o99]))) and
  (o101 = to_rep(o100))) and (o102 = toBig(o101))) and (o103 = lsl_bv1(o102,
  of_int1(16)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index3,
  of_int1(1))) and ule1(add1(src_index3, of_int1(1)),
  to_rep2(last(block1)))) and (o93 = add1(src_index3, of_int1(1)))) and
  (o94 = (block[o93]))) and (o95 = to_rep(o94))) and (o96 = toBig(o95))) and
  (o97 = lsl_bv1(o96, of_int1(8)))) and ((((((ule1(to_rep2(first(block1)),
  src_index3) and ule1(src_index3, to_rep2(last(block1)))) and
  (o90 = src_index3)) and (o91 = (block[o90]))) and (o92 = to_rep(o91))) and
  (o98 = toBig(o92))) and (o104 = add1(o98, o97)))) and (o110 = add1(o104,
  o103)))) and (o116 = add1(o110, o109)))) and (o122 = add1(o116,
  o115)))) and (o128 = add1(o122, o121)))) and (o134 = add1(o128,
  o127)))) and (o135 = add1(o134, o133)))) and (to_rep1(o136) = o135)) and
  (o137 = (w3[dst_index3 <- o136]))) and ((result32 = { map__content1 = w3
  }) and (w4 = o137))) and (((result33 = { t__content1 = dst_index3 }) and
  (dst_index4 = of_int1(1))) and (((o138 = add1(c206b, mul1(dst_index4,
  of_int1(8)))) and ((result34 = { t__content1 = src_index3 }) and
  (src_index4 = o138))) and (((((((((((ule1(to_rep2(first(block1)),
  add1(src_index4, of_int1(7))) and ule1(add1(src_index4, of_int1(7)),
  to_rep2(last(block1)))) and (o178 = add1(src_index4, of_int1(7)))) and
  (o179 = (block[o178]))) and (o180 = to_rep(o179))) and
  (o181 = toBig(o180))) and (o182 = lsl_bv1(o181, of_int1(56)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index4, of_int1(6))) and
  ule1(add1(src_index4, of_int1(6)), to_rep2(last(block1)))) and
  (o172 = add1(src_index4, of_int1(6)))) and (o173 = (block[o172]))) and
  (o174 = to_rep(o173))) and (o175 = toBig(o174))) and (o176 = lsl_bv1(o175,
  of_int1(48)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index4,
  of_int1(5))) and ule1(add1(src_index4, of_int1(5)),
  to_rep2(last(block1)))) and (o166 = add1(src_index4, of_int1(5)))) and
  (o167 = (block[o166]))) and (o168 = to_rep(o167))) and
  (o169 = toBig(o168))) and (o170 = lsl_bv1(o169, of_int1(40)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index4, of_int1(4))) and
  ule1(add1(src_index4, of_int1(4)), to_rep2(last(block1)))) and
  (o160 = add1(src_index4, of_int1(4)))) and (o161 = (block[o160]))) and
  (o162 = to_rep(o161))) and (o163 = toBig(o162))) and (o164 = lsl_bv1(o163,
  of_int1(32)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index4,
  of_int1(3))) and ule1(add1(src_index4, of_int1(3)),
  to_rep2(last(block1)))) and (o154 = add1(src_index4, of_int1(3)))) and
  (o155 = (block[o154]))) and (o156 = to_rep(o155))) and
  (o157 = toBig(o156))) and (o158 = lsl_bv1(o157, of_int1(24)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index4, of_int1(2))) and
  ule1(add1(src_index4, of_int1(2)), to_rep2(last(block1)))) and
  (o148 = add1(src_index4, of_int1(2)))) and (o149 = (block[o148]))) and
  (o150 = to_rep(o149))) and (o151 = toBig(o150))) and (o152 = lsl_bv1(o151,
  of_int1(16)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index4,
  of_int1(1))) and ule1(add1(src_index4, of_int1(1)),
  to_rep2(last(block1)))) and (o142 = add1(src_index4, of_int1(1)))) and
  (o143 = (block[o142]))) and (o144 = to_rep(o143))) and
  (o145 = toBig(o144))) and (o146 = lsl_bv1(o145, of_int1(8)))) and
  ((((((ule1(to_rep2(first(block1)), src_index4) and ule1(src_index4,
  to_rep2(last(block1)))) and (o139 = src_index4)) and
  (o140 = (block[o139]))) and (o141 = to_rep(o140))) and
  (o147 = toBig(o141))) and (o153 = add1(o147, o146)))) and
  (o159 = add1(o153, o152)))) and (o165 = add1(o159, o158)))) and
  (o171 = add1(o165, o164)))) and (o177 = add1(o171, o170)))) and
  (o183 = add1(o177, o176)))) and (o184 = add1(o183, o182)))) and
  (to_rep1(o185) = o184)) and (o186 = (w4[dst_index4 <- o185]))) and
  ((result35 = { map__content1 = w4 }) and (w5 = o186))) and (((result36 = {
  t__content1 = dst_index4 }) and (dst_index5 = of_int1(2))) and
  (((o187 = add1(c206b, mul1(dst_index5, of_int1(8)))) and ((result37 = {
  t__content1 = src_index4 }) and (src_index5 = o187))) and
  (((((((((((ule1(to_rep2(first(block1)), add1(src_index5, of_int1(7))) and
  ule1(add1(src_index5, of_int1(7)), to_rep2(last(block1)))) and
  (o227 = add1(src_index5, of_int1(7)))) and (o228 = (block[o227]))) and
  (o229 = to_rep(o228))) and (o230 = toBig(o229))) and (o231 = lsl_bv1(o230,
  of_int1(56)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index5,
  of_int1(6))) and ule1(add1(src_index5, of_int1(6)),
  to_rep2(last(block1)))) and (o221 = add1(src_index5, of_int1(6)))) and
  (o222 = (block[o221]))) and (o223 = to_rep(o222))) and
  (o224 = toBig(o223))) and (o225 = lsl_bv1(o224, of_int1(48)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index5, of_int1(5))) and
  ule1(add1(src_index5, of_int1(5)), to_rep2(last(block1)))) and
  (o215 = add1(src_index5, of_int1(5)))) and (o216 = (block[o215]))) and
  (o217 = to_rep(o216))) and (o218 = toBig(o217))) and (o219 = lsl_bv1(o218,
  of_int1(40)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index5,
  of_int1(4))) and ule1(add1(src_index5, of_int1(4)),
  to_rep2(last(block1)))) and (o209 = add1(src_index5, of_int1(4)))) and
  (o210 = (block[o209]))) and (o211 = to_rep(o210))) and
  (o212 = toBig(o211))) and (o213 = lsl_bv1(o212, of_int1(32)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index5, of_int1(3))) and
  ule1(add1(src_index5, of_int1(3)), to_rep2(last(block1)))) and
  (o203 = add1(src_index5, of_int1(3)))) and (o204 = (block[o203]))) and
  (o205 = to_rep(o204))) and (o206 = toBig(o205))) and (o207 = lsl_bv1(o206,
  of_int1(24)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index5,
  of_int1(2))) and ule1(add1(src_index5, of_int1(2)),
  to_rep2(last(block1)))) and (o197 = add1(src_index5, of_int1(2)))) and
  (o198 = (block[o197]))) and (o199 = to_rep(o198))) and
  (o200 = toBig(o199))) and (o201 = lsl_bv1(o200, of_int1(16)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index5, of_int1(1))) and
  ule1(add1(src_index5, of_int1(1)), to_rep2(last(block1)))) and
  (o191 = add1(src_index5, of_int1(1)))) and (o192 = (block[o191]))) and
  (o193 = to_rep(o192))) and (o194 = toBig(o193))) and (o195 = lsl_bv1(o194,
  of_int1(8)))) and ((((((ule1(to_rep2(first(block1)), src_index5) and
  ule1(src_index5, to_rep2(last(block1)))) and (o188 = src_index5)) and
  (o189 = (block[o188]))) and (o190 = to_rep(o189))) and
  (o196 = toBig(o190))) and (o202 = add1(o196, o195)))) and
  (o208 = add1(o202, o201)))) and (o214 = add1(o208, o207)))) and
  (o220 = add1(o214, o213)))) and (o226 = add1(o220, o219)))) and
  (o232 = add1(o226, o225)))) and (o233 = add1(o232, o231)))) and
  (to_rep1(o234) = o233)) and (o235 = (w5[dst_index5 <- o234]))) and
  ((result38 = { map__content1 = w5 }) and (w6 = o235))) and (((result39 = {
  t__content1 = dst_index5 }) and (dst_index6 = of_int1(3))) and
  (((o236 = add1(c206b, mul1(dst_index6, of_int1(8)))) and ((result40 = {
  t__content1 = src_index5 }) and (src_index6 = o236))) and
  (((((((((((ule1(to_rep2(first(block1)), add1(src_index6, of_int1(7))) and
  ule1(add1(src_index6, of_int1(7)), to_rep2(last(block1)))) and
  (o276 = add1(src_index6, of_int1(7)))) and (o277 = (block[o276]))) and
  (o278 = to_rep(o277))) and (o279 = toBig(o278))) and (o280 = lsl_bv1(o279,
  of_int1(56)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index6,
  of_int1(6))) and ule1(add1(src_index6, of_int1(6)),
  to_rep2(last(block1)))) and (o270 = add1(src_index6, of_int1(6)))) and
  (o271 = (block[o270]))) and (o272 = to_rep(o271))) and
  (o273 = toBig(o272))) and (o274 = lsl_bv1(o273, of_int1(48)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index6, of_int1(5))) and
  ule1(add1(src_index6, of_int1(5)), to_rep2(last(block1)))) and
  (o264 = add1(src_index6, of_int1(5)))) and (o265 = (block[o264]))) and
  (o266 = to_rep(o265))) and (o267 = toBig(o266))) and (o268 = lsl_bv1(o267,
  of_int1(40)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index6,
  of_int1(4))) and ule1(add1(src_index6, of_int1(4)),
  to_rep2(last(block1)))) and (o258 = add1(src_index6, of_int1(4)))) and
  (o259 = (block[o258]))) and (o260 = to_rep(o259))) and
  (o261 = toBig(o260))) and (o262 = lsl_bv1(o261, of_int1(32)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index6, of_int1(3))) and
  ule1(add1(src_index6, of_int1(3)), to_rep2(last(block1)))) and
  (o252 = add1(src_index6, of_int1(3)))) and (o253 = (block[o252]))) and
  (o254 = to_rep(o253))) and (o255 = toBig(o254))) and (o256 = lsl_bv1(o255,
  of_int1(24)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index6,
  of_int1(2))) and ule1(add1(src_index6, of_int1(2)),
  to_rep2(last(block1)))) and (o246 = add1(src_index6, of_int1(2)))) and
  (o247 = (block[o246]))) and (o248 = to_rep(o247))) and
  (o249 = toBig(o248))) and (o250 = lsl_bv1(o249, of_int1(16)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index6, of_int1(1))) and
  ule1(add1(src_index6, of_int1(1)), to_rep2(last(block1)))) and
  (o240 = add1(src_index6, of_int1(1)))) and (o241 = (block[o240]))) and
  (o242 = to_rep(o241))) and (o243 = toBig(o242))) and (o244 = lsl_bv1(o243,
  of_int1(8)))) and ((((((ule1(to_rep2(first(block1)), src_index6) and
  ule1(src_index6, to_rep2(last(block1)))) and (o237 = src_index6)) and
  (o238 = (block[o237]))) and (o239 = to_rep(o238))) and
  (o245 = toBig(o239))) and (o251 = add1(o245, o244)))) and
  (o257 = add1(o251, o250)))) and (o263 = add1(o257, o256)))) and
  (o269 = add1(o263, o262)))) and (o275 = add1(o269, o268)))) and
  (o281 = add1(o275, o274)))) and (o282 = add1(o281, o280)))) and
  (to_rep1(o283) = o282)) and (o284 = (w6[dst_index6 <- o283]))) and
  ((result41 = { map__content1 = w6 }) and (w7 = o284))) and (((result42 = {
  t__content1 = dst_index6 }) and (dst_index7 = of_int1(4))) and
  (((o285 = add1(c206b, mul1(dst_index7, of_int1(8)))) and ((result43 = {
  t__content1 = src_index6 }) and (src_index7 = o285))) and
  (((((((((((ule1(to_rep2(first(block1)), add1(src_index7, of_int1(7))) and
  ule1(add1(src_index7, of_int1(7)), to_rep2(last(block1)))) and
  (o325 = add1(src_index7, of_int1(7)))) and (o326 = (block[o325]))) and
  (o327 = to_rep(o326))) and (o328 = toBig(o327))) and (o329 = lsl_bv1(o328,
  of_int1(56)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index7,
  of_int1(6))) and ule1(add1(src_index7, of_int1(6)),
  to_rep2(last(block1)))) and (o319 = add1(src_index7, of_int1(6)))) and
  (o320 = (block[o319]))) and (o321 = to_rep(o320))) and
  (o322 = toBig(o321))) and (o323 = lsl_bv1(o322, of_int1(48)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index7, of_int1(5))) and
  ule1(add1(src_index7, of_int1(5)), to_rep2(last(block1)))) and
  (o313 = add1(src_index7, of_int1(5)))) and (o314 = (block[o313]))) and
  (o315 = to_rep(o314))) and (o316 = toBig(o315))) and (o317 = lsl_bv1(o316,
  of_int1(40)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index7,
  of_int1(4))) and ule1(add1(src_index7, of_int1(4)),
  to_rep2(last(block1)))) and (o307 = add1(src_index7, of_int1(4)))) and
  (o308 = (block[o307]))) and (o309 = to_rep(o308))) and
  (o310 = toBig(o309))) and (o311 = lsl_bv1(o310, of_int1(32)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index7, of_int1(3))) and
  ule1(add1(src_index7, of_int1(3)), to_rep2(last(block1)))) and
  (o301 = add1(src_index7, of_int1(3)))) and (o302 = (block[o301]))) and
  (o303 = to_rep(o302))) and (o304 = toBig(o303))) and (o305 = lsl_bv1(o304,
  of_int1(24)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index7,
  of_int1(2))) and ule1(add1(src_index7, of_int1(2)),
  to_rep2(last(block1)))) and (o295 = add1(src_index7, of_int1(2)))) and
  (o296 = (block[o295]))) and (o297 = to_rep(o296))) and
  (o298 = toBig(o297))) and (o299 = lsl_bv1(o298, of_int1(16)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index7, of_int1(1))) and
  ule1(add1(src_index7, of_int1(1)), to_rep2(last(block1)))) and
  (o289 = add1(src_index7, of_int1(1)))) and (o290 = (block[o289]))) and
  (o291 = to_rep(o290))) and (o292 = toBig(o291))) and (o293 = lsl_bv1(o292,
  of_int1(8)))) and ((((((ule1(to_rep2(first(block1)), src_index7) and
  ule1(src_index7, to_rep2(last(block1)))) and (o286 = src_index7)) and
  (o287 = (block[o286]))) and (o288 = to_rep(o287))) and
  (o294 = toBig(o288))) and (o300 = add1(o294, o293)))) and
  (o306 = add1(o300, o299)))) and (o312 = add1(o306, o305)))) and
  (o318 = add1(o312, o311)))) and (o324 = add1(o318, o317)))) and
  (o330 = add1(o324, o323)))) and (o331 = add1(o330, o329)))) and
  (to_rep1(o332) = o331)) and (o333 = (w7[dst_index7 <- o332]))) and
  ((result44 = { map__content1 = w7 }) and (w8 = o333))) and (((result45 = {
  t__content1 = dst_index7 }) and (dst_index8 = of_int1(5))) and
  (((o334 = add1(c206b, mul1(dst_index8, of_int1(8)))) and ((result46 = {
  t__content1 = src_index7 }) and (src_index8 = o334))) and
  (((((((((((ule1(to_rep2(first(block1)), add1(src_index8, of_int1(7))) and
  ule1(add1(src_index8, of_int1(7)), to_rep2(last(block1)))) and
  (o374 = add1(src_index8, of_int1(7)))) and (o375 = (block[o374]))) and
  (o376 = to_rep(o375))) and (o377 = toBig(o376))) and (o378 = lsl_bv1(o377,
  of_int1(56)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index8,
  of_int1(6))) and ule1(add1(src_index8, of_int1(6)),
  to_rep2(last(block1)))) and (o368 = add1(src_index8, of_int1(6)))) and
  (o369 = (block[o368]))) and (o370 = to_rep(o369))) and
  (o371 = toBig(o370))) and (o372 = lsl_bv1(o371, of_int1(48)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index8, of_int1(5))) and
  ule1(add1(src_index8, of_int1(5)), to_rep2(last(block1)))) and
  (o362 = add1(src_index8, of_int1(5)))) and (o363 = (block[o362]))) and
  (o364 = to_rep(o363))) and (o365 = toBig(o364))) and (o366 = lsl_bv1(o365,
  of_int1(40)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index8,
  of_int1(4))) and ule1(add1(src_index8, of_int1(4)),
  to_rep2(last(block1)))) and (o356 = add1(src_index8, of_int1(4)))) and
  (o357 = (block[o356]))) and (o358 = to_rep(o357))) and
  (o359 = toBig(o358))) and (o360 = lsl_bv1(o359, of_int1(32)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index8, of_int1(3))) and
  ule1(add1(src_index8, of_int1(3)), to_rep2(last(block1)))) and
  (o350 = add1(src_index8, of_int1(3)))) and (o351 = (block[o350]))) and
  (o352 = to_rep(o351))) and (o353 = toBig(o352))) and (o354 = lsl_bv1(o353,
  of_int1(24)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index8,
  of_int1(2))) and ule1(add1(src_index8, of_int1(2)),
  to_rep2(last(block1)))) and (o344 = add1(src_index8, of_int1(2)))) and
  (o345 = (block[o344]))) and (o346 = to_rep(o345))) and
  (o347 = toBig(o346))) and (o348 = lsl_bv1(o347, of_int1(16)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index8, of_int1(1))) and
  ule1(add1(src_index8, of_int1(1)), to_rep2(last(block1)))) and
  (o338 = add1(src_index8, of_int1(1)))) and (o339 = (block[o338]))) and
  (o340 = to_rep(o339))) and (o341 = toBig(o340))) and (o342 = lsl_bv1(o341,
  of_int1(8)))) and ((((((ule1(to_rep2(first(block1)), src_index8) and
  ule1(src_index8, to_rep2(last(block1)))) and (o335 = src_index8)) and
  (o336 = (block[o335]))) and (o337 = to_rep(o336))) and
  (o343 = toBig(o337))) and (o349 = add1(o343, o342)))) and
  (o355 = add1(o349, o348)))) and (o361 = add1(o355, o354)))) and
  (o367 = add1(o361, o360)))) and (o373 = add1(o367, o366)))) and
  (o379 = add1(o373, o372)))) and (o380 = add1(o379, o378)))) and
  (to_rep1(o381) = o380)) and (o382 = (w8[dst_index8 <- o381]))) and
  ((result47 = { map__content1 = w8 }) and (w9 = o382))) and (((result48 = {
  t__content1 = dst_index8 }) and (dst_index9 = of_int1(6))) and
  (((o383 = add1(c206b, mul1(dst_index9, of_int1(8)))) and ((result49 = {
  t__content1 = src_index8 }) and (src_index9 = o383))) and
  (((((((((((ule1(to_rep2(first(block1)), add1(src_index9, of_int1(7))) and
  ule1(add1(src_index9, of_int1(7)), to_rep2(last(block1)))) and
  (o423 = add1(src_index9, of_int1(7)))) and (o424 = (block[o423]))) and
  (o425 = to_rep(o424))) and (o426 = toBig(o425))) and (o427 = lsl_bv1(o426,
  of_int1(56)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index9,
  of_int1(6))) and ule1(add1(src_index9, of_int1(6)),
  to_rep2(last(block1)))) and (o417 = add1(src_index9, of_int1(6)))) and
  (o418 = (block[o417]))) and (o419 = to_rep(o418))) and
  (o420 = toBig(o419))) and (o421 = lsl_bv1(o420, of_int1(48)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index9, of_int1(5))) and
  ule1(add1(src_index9, of_int1(5)), to_rep2(last(block1)))) and
  (o411 = add1(src_index9, of_int1(5)))) and (o412 = (block[o411]))) and
  (o413 = to_rep(o412))) and (o414 = toBig(o413))) and (o415 = lsl_bv1(o414,
  of_int1(40)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index9,
  of_int1(4))) and ule1(add1(src_index9, of_int1(4)),
  to_rep2(last(block1)))) and (o405 = add1(src_index9, of_int1(4)))) and
  (o406 = (block[o405]))) and (o407 = to_rep(o406))) and
  (o408 = toBig(o407))) and (o409 = lsl_bv1(o408, of_int1(32)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index9, of_int1(3))) and
  ule1(add1(src_index9, of_int1(3)), to_rep2(last(block1)))) and
  (o399 = add1(src_index9, of_int1(3)))) and (o400 = (block[o399]))) and
  (o401 = to_rep(o400))) and (o402 = toBig(o401))) and (o403 = lsl_bv1(o402,
  of_int1(24)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index9,
  of_int1(2))) and ule1(add1(src_index9, of_int1(2)),
  to_rep2(last(block1)))) and (o393 = add1(src_index9, of_int1(2)))) and
  (o394 = (block[o393]))) and (o395 = to_rep(o394))) and
  (o396 = toBig(o395))) and (o397 = lsl_bv1(o396, of_int1(16)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index9, of_int1(1))) and
  ule1(add1(src_index9, of_int1(1)), to_rep2(last(block1)))) and
  (o387 = add1(src_index9, of_int1(1)))) and (o388 = (block[o387]))) and
  (o389 = to_rep(o388))) and (o390 = toBig(o389))) and (o391 = lsl_bv1(o390,
  of_int1(8)))) and ((((((ule1(to_rep2(first(block1)), src_index9) and
  ule1(src_index9, to_rep2(last(block1)))) and (o384 = src_index9)) and
  (o385 = (block[o384]))) and (o386 = to_rep(o385))) and
  (o392 = toBig(o386))) and (o398 = add1(o392, o391)))) and
  (o404 = add1(o398, o397)))) and (o410 = add1(o404, o403)))) and
  (o416 = add1(o410, o409)))) and (o422 = add1(o416, o415)))) and
  (o428 = add1(o422, o421)))) and (o429 = add1(o428, o427)))) and
  (to_rep1(o430) = o429)) and (o431 = (w9[dst_index9 <- o430]))) and
  ((result50 = { map__content1 = w9 }) and (w10 = o431))) and (((result51 = {
  t__content1 = dst_index9 }) and (dst_index10 = of_int1(7))) and
  (((o432 = add1(c206b, mul1(dst_index10, of_int1(8)))) and ((result52 = {
  t__content1 = src_index9 }) and (src_index10 = o432))) and
  ((((((((((ule1(to_rep2(first(block1)), add1(src_index10, of_int1(7))) and
  ule1(add1(src_index10, of_int1(7)), to_rep2(last(block1)))) and
  (o472 = add1(src_index10, of_int1(7)))) and (o473 = (block[o472]))) and
  (o474 = to_rep(o473))) and (o475 = toBig(o474))) and (o476 = lsl_bv1(o475,
  of_int1(56)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index10,
  of_int1(6))) and ule1(add1(src_index10, of_int1(6)),
  to_rep2(last(block1)))) and (o466 = add1(src_index10, of_int1(6)))) and
  (o467 = (block[o466]))) and (o468 = to_rep(o467))) and
  (o469 = toBig(o468))) and (o470 = lsl_bv1(o469, of_int1(48)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index10, of_int1(5))) and
  ule1(add1(src_index10, of_int1(5)), to_rep2(last(block1)))) and
  (o460 = add1(src_index10, of_int1(5)))) and (o461 = (block[o460]))) and
  (o462 = to_rep(o461))) and (o463 = toBig(o462))) and (o464 = lsl_bv1(o463,
  of_int1(40)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index10,
  of_int1(4))) and ule1(add1(src_index10, of_int1(4)),
  to_rep2(last(block1)))) and (o454 = add1(src_index10, of_int1(4)))) and
  (o455 = (block[o454]))) and (o456 = to_rep(o455))) and
  (o457 = toBig(o456))) and (o458 = lsl_bv1(o457, of_int1(32)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index10, of_int1(3))) and
  ule1(add1(src_index10, of_int1(3)), to_rep2(last(block1)))) and
  (o448 = add1(src_index10, of_int1(3)))) and (o449 = (block[o448]))) and
  (o450 = to_rep(o449))) and (o451 = toBig(o450))) and (o452 = lsl_bv1(o451,
  of_int1(24)))) and ((((((((ule1(to_rep2(first(block1)), add1(src_index10,
  of_int1(2))) and ule1(add1(src_index10, of_int1(2)),
  to_rep2(last(block1)))) and (o442 = add1(src_index10, of_int1(2)))) and
  (o443 = (block[o442]))) and (o444 = to_rep(o443))) and
  (o445 = toBig(o444))) and (o446 = lsl_bv1(o445, of_int1(16)))) and
  ((((((((ule1(to_rep2(first(block1)), add1(src_index10, of_int1(1))) and
  ule1(add1(src_index10, of_int1(1)), to_rep2(last(block1)))) and
  (o436 = add1(src_index10, of_int1(1)))) and (o437 = (block[o436]))) and
  (o438 = to_rep(o437))) and (o439 = toBig(o438))) and (o440 = lsl_bv1(o439,
  of_int1(8)))) and ((((((ule1(to_rep2(first(block1)), src_index10) and
  ule1(src_index10, to_rep2(last(block1)))) and (o433 = src_index10)) and
  (o434 = (block[o433]))) and (o435 = to_rep(o434))) and
  (o441 = toBig(o435))) and (o447 = add1(o441, o440)))) and
  (o453 = add1(o447, o446)))) and (o459 = add1(o453, o452)))) and
  (o465 = add1(o459, o458)))) and (o471 = add1(o465, o464)))) and
  (o477 = add1(o471, o470)))) and (o478 = add1(o477, o476)))) and
  (to_rep1(o479) = o478)) and (o480 = (w10[dst_index10 <- o479]))) and
  ((result53 = { map__content1 = w10 }) and
  (w14 = o480)))))))))))))))))))))))))) and (((result54 = { map__content1 =
  x2 }) and (x3 = temp___1540(add1(to_rep1((w14[of_int1(0)])),
  to_rep1((ks19[of_int1(0)]))), add1(to_rep1((w14[of_int1(1)])),
  to_rep1((ks19[of_int1(1)]))), add1(to_rep1((w14[of_int1(2)])),
  to_rep1((ks19[of_int1(2)]))), add1(to_rep1((w14[of_int1(3)])),
  to_rep1((ks19[of_int1(3)]))), add1(to_rep1((w14[of_int1(4)])),
  to_rep1((ks19[of_int1(4)]))), add1(to_rep1((w14[of_int1(5)])),
  to_rep1((ks19[of_int1(5)]))), add1(to_rep1((w14[of_int1(6)])),
  to_rep1((ks19[of_int1(6)]))), add1(to_rep1((w14[of_int1(7)])),
  to_rep1((ks19[of_int1(7)])))))) and
  ((((to_rep1(o481) = add1(to_rep1((x3[of_int1(5)])),
  to_rep1((ts3[of_int1(0)])))) and (o482 = (x3[of_int1(5) <- o481]))) and
  ((result55 = { map__content1 = x3 }) and (x4 = o482))) and
  ((((to_rep1(o483) = add1(to_rep1((x4[of_int1(6)])),
  to_rep1((ts3[of_int1(1)])))) and (o484 = (x4[of_int1(6) <- o483]))) and
  ((result56 = { map__content1 = x4 }) and (x5 = o484))) and (((result57 = {
  us_split_fields__content2 = ctx__split_fields14 }) and
  (ctx__split_fields15 = { rec__skein__skein_512_context__h =
  (ctx__split_fields14).rec__skein__skein_512_context__h;
  rec__skein__skein_512_context__x =
  temp___1551(bw_xor1(to_rep1((x6[of_int1(0)])), to_rep1((w14[of_int1(0)]))),
  bw_xor1(to_rep1((x6[of_int1(1)])), to_rep1((w14[of_int1(1)]))),
  bw_xor1(to_rep1((x6[of_int1(2)])), to_rep1((w14[of_int1(2)]))),
  bw_xor1(to_rep1((x6[of_int1(3)])), to_rep1((w14[of_int1(3)]))),
  bw_xor1(to_rep1((x6[of_int1(4)])), to_rep1((w14[of_int1(4)]))),
  bw_xor1(to_rep1((x6[of_int1(5)])), to_rep1((w14[of_int1(5)]))),
  bw_xor1(to_rep1((x6[of_int1(6)])), to_rep1((w14[of_int1(6)]))),
  bw_xor1(to_rep1((x6[of_int1(7)])), to_rep1((w14[of_int1(7)]))));
  rec__skein__skein_512_context__b =
  (ctx__split_fields14).rec__skein__skein_512_context__b })) and
  (((result58 = { us_split_fields__content2 = ctx__split_fields15 }) and
  (ctx__split_fields16 = { rec__skein__skein_512_context__h = {
  us_split_fields3 = { rec__skein__context_header__tweak_words = {
  us_split_fields1 = { rec__skein__tweak_value__byte_count_lsb =
  (((((ctx__split_fields15).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__byte_count_lsb;
  rec__skein__tweak_value__byte_count_msb =
  (((((ctx__split_fields15).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__byte_count_msb;
  rec__skein__tweak_value__reserved =
  (((((ctx__split_fields15).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__reserved;
  rec__skein__tweak_value__tree_level =
  (((((ctx__split_fields15).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__tree_level;
  rec__skein__tweak_value__bit_pad =
  (((((ctx__split_fields15).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__bit_pad;
  rec__skein__tweak_value__field_type =
  (((((ctx__split_fields15).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__field_type;
  rec__skein__tweak_value__first_block = of_int2(0);
  rec__skein__tweak_value__final_block =
  (((((ctx__split_fields15).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__tweak_words).us_split_fields1).rec__skein__tweak_value__final_block
  } }; rec__skein__context_header__hash_bit_len =
  (((ctx__split_fields15).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len;
  rec__skein__context_header__byte_count =
  (((ctx__split_fields15).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__byte_count
  } }; rec__skein__skein_512_context__x =
  (ctx__split_fields15).rec__skein__skein_512_context__x;
  rec__skein__skein_512_context__b =
  (ctx__split_fields15).rec__skein__skein_512_context__b })) and
  (j2 = block_count))))))))))))))))))))) and (((src_index11 = { t__content1 =
  src_index10 }) and ((dst_index11 = { t__content1 = dst_index10 }) and
  ((w16 = { t__content1 = w13 }) and ((w04 = { t__content1 = w03 }) and
  ((i12 = { t__content1 = i11 }) and ((j3 = { t__content1 = j2 }) and
  ((w15 = { map__content1 = w14 }) and ((x7 = { map__content1 = x6 }) and
  ((ks20 = { map__content1 = ks19 }) and ((ts4 = { map__content1 = ts3 }) and
  (ctx__split_fields17 = { us_split_fields__content2 = ctx__split_fields16
  }))))))))))) and ((src_index12 = src_index10) and
  ((dst_index12 = dst_index10) and ((w18 = w13) and ((w05 = w03) and
  ((i13 = i11) and ((j4 = j2) and ((w17 = w14) and ((x8 = x6) and
  ((ks21 = ks19) and ((ts5 = ts3) and
  (ctx__split_fields18 = ctx__split_fields16))))))))))))) and
  (((src_index13 = src_index11) and ((dst_index13 = dst_index11) and
  ((w110 = w16) and ((w06 = w04) and ((i14 = i12) and ((j5 = j3) and
  ((w19 = w15) and ((x9 = x7) and ((ks22 = ks20) and ((ts6 = ts4) and
  (ctx__split_fields19 = ctx__split_fields17))))))))))) and
  ((src_index14 = src_index12) and ((dst_index14 = dst_index12) and
  ((w111 = w18) and ((w07 = w05) and ((i15 = i13) and ((j6 = j4) and
  ((w20 = w17) and ((x10 = x8) and ((ks23 = ks21) and ((ts7 = ts5) and
  (ctx__split_fields20 = ctx__split_fields18)))))))))))))) or
  ((not (ule1(of_int1(1), j1) and ule1(j1, block_count))) and
  (((src_index13 = { t__content1 = src_index }) and ((dst_index13 = {
  t__content1 = dst_index }) and ((w110 = { t__content1 = w1 }) and ((w06 = {
  t__content1 = w0 }) and ((i14 = { t__content1 = i }) and ((j5 = {
  t__content1 = j1 }) and ((w19 = { map__content1 = w }) and ((x9 = {
  map__content1 = x }) and ((ks22 = { map__content1 = ks }) and ((ts6 = {
  map__content1 = ts }) and (ctx__split_fields19 = {
  us_split_fields__content2 = { rec__skein__skein_512_context__h = {
  us_split_fields3 = { rec__skein__context_header__tweak_words = {
  us_split_fields1 = { rec__skein__tweak_value__byte_count_lsb =
  ctx__split_fields; rec__skein__tweak_value__byte_count_msb =
  ctx__split_fields1; rec__skein__tweak_value__reserved = ctx__split_fields2;
  rec__skein__tweak_value__tree_level = ctx__split_fields3;
  rec__skein__tweak_value__bit_pad = ctx__split_fields4;
  rec__skein__tweak_value__field_type = ctx__split_fields5;
  rec__skein__tweak_value__first_block = ctx__split_fields6;
  rec__skein__tweak_value__final_block = ctx__split_fields7 } };
  rec__skein__context_header__hash_bit_len = ctx__split_fields8;
  rec__skein__context_header__byte_count = ctx__split_fields9 } };
  rec__skein__skein_512_context__x = ctx__split_fields10;
  rec__skein__skein_512_context__b = ctx__split_fields11 } }))))))))))) and
  ((src_index14 = src_index1) and ((dst_index14 = dst_index1) and
  ((w111 = w11) and ((w07 = w01) and ((i15 = i1) and ((j6 = j1) and
  ((w20 = w2) and ((x10 = x1) and ((ks23 = ks1) and ((ts7 = ts1) and
  (ctx__split_fields20 = ctx__split_fields12))))))))))))))) and
  (((src_index15 = src_index13) and ((dst_index15 = dst_index13) and
  ((w112 = w110) and ((w08 = w06) and ((i16 = i14) and ((j7 = j5) and
  ((w21 = w19) and ((x11 = x9) and ((ks24 = ks22) and ((ts8 = ts6) and
  (ctx__split_fields21 = ctx__split_fields19))))))))))) and
  ((src_index16 = src_index14) and ((dst_index16 = dst_index14) and
  ((w113 = w111) and ((w09 = w07) and ((i17 = i15) and ((j8 = j6) and
  ((w22 = w20) and ((x12 = x10) and ((ks25 = ks23) and ((ts9 = ts7) and
  (ctx__split_fields22 = ctx__split_fields20)))))))))))))))))) ->
  in_range4(to_rep3(((((ctx__split_fields21).us_split_fields__content2).rec__skein__skein_512_context__h).us_split_fields3).rec__skein__context_header__hash_bit_len))))
