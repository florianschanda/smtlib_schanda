(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type timetexti

predicate in_range3(x: int) = ((1 <= x) and (x <= 21))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : timetexti, timetexti -> bool

logic dummy5 : timetexti

type timetexti__ref = { timetexti__content : timetexti
}

function timetexti__ref___projection(a: timetexti__ref) : timetexti =
  (a).timetexti__content

logic converttoauditdescription : us_t -> (int,character) farray

logic converttoauditdescription__function_guard : (int,character) farray,
  us_t -> prop

axiom converttoauditdescription__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___String_Literal_1076 : unit -> (int,character) farray

axiom temp___String_Literal_1076__def_axiom :
  ((((((to_rep((temp___String_Literal_1076(void)[1])) = 70) and
  (to_rep((temp___String_Literal_1076(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_1076(void)[3])) = 111)) and
  (to_rep((temp___String_Literal_1076(void)[4])) = 109)) and
  (to_rep((temp___String_Literal_1076(void)[5])) = 58)) and
  (to_rep((temp___String_Literal_1076(void)[6])) = 32))

logic temp___String_Literal_1078 : unit -> (int,character) farray

axiom temp___String_Literal_1078__def_axiom :
  (((((to_rep((temp___String_Literal_1078(void)[1])) = 32) and
  (to_rep((temp___String_Literal_1078(void)[2])) = 116)) and
  (to_rep((temp___String_Literal_1078(void)[3])) = 111)) and
  (to_rep((temp___String_Literal_1078(void)[4])) = 58)) and
  (to_rep((temp___String_Literal_1078(void)[5])) = 32))

logic temp___String_Literal_1082 : unit -> (int,character) farray

axiom temp___String_Literal_1082__def_axiom :
  (((((((((((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_1082(void)[1])) = 69) and
  (to_rep((temp___String_Literal_1082(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_1082(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_1082(void)[4])) = 111)) and
  (to_rep((temp___String_Literal_1082(void)[5])) = 114)) and
  (to_rep((temp___String_Literal_1082(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_1082(void)[7])) = 111)) and
  (to_rep((temp___String_Literal_1082(void)[8])) = 98)) and
  (to_rep((temp___String_Literal_1082(void)[9])) = 116)) and
  (to_rep((temp___String_Literal_1082(void)[10])) = 97)) and
  (to_rep((temp___String_Literal_1082(void)[11])) = 105)) and
  (to_rep((temp___String_Literal_1082(void)[12])) = 110)) and
  (to_rep((temp___String_Literal_1082(void)[13])) = 105)) and
  (to_rep((temp___String_Literal_1082(void)[14])) = 110)) and
  (to_rep((temp___String_Literal_1082(void)[15])) = 103)) and
  (to_rep((temp___String_Literal_1082(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_1082(void)[17])) = 116)) and
  (to_rep((temp___String_Literal_1082(void)[18])) = 105)) and
  (to_rep((temp___String_Literal_1082(void)[19])) = 109)) and
  (to_rep((temp___String_Literal_1082(void)[20])) = 101)) and
  (to_rep((temp___String_Literal_1082(void)[21])) = 115)) and
  (to_rep((temp___String_Literal_1082(void)[22])) = 32)) and
  (to_rep((temp___String_Literal_1082(void)[23])) = 102)) and
  (to_rep((temp___String_Literal_1082(void)[24])) = 114)) and
  (to_rep((temp___String_Literal_1082(void)[25])) = 111)) and
  (to_rep((temp___String_Literal_1082(void)[26])) = 109)) and
  (to_rep((temp___String_Literal_1082(void)[27])) = 32)) and
  (to_rep((temp___String_Literal_1082(void)[28])) = 102)) and
  (to_rep((temp___String_Literal_1082(void)[29])) = 105)) and
  (to_rep((temp___String_Literal_1082(void)[30])) = 108)) and
  (to_rep((temp___String_Literal_1082(void)[31])) = 101)) and
  (to_rep((temp___String_Literal_1082(void)[32])) = 46)) and
  (to_rep((temp___String_Literal_1082(void)[33])) = 66)) and
  (to_rep((temp___String_Literal_1082(void)[34])) = 101)) and
  (to_rep((temp___String_Literal_1082(void)[35])) = 115)) and
  (to_rep((temp___String_Literal_1082(void)[36])) = 116)) and
  (to_rep((temp___String_Literal_1082(void)[37])) = 32)) and
  (to_rep((temp___String_Literal_1082(void)[38])) = 101)) and
  (to_rep((temp___String_Literal_1082(void)[39])) = 115)) and
  (to_rep((temp___String_Literal_1082(void)[40])) = 116)) and
  (to_rep((temp___String_Literal_1082(void)[41])) = 105)) and
  (to_rep((temp___String_Literal_1082(void)[42])) = 109)) and
  (to_rep((temp___String_Literal_1082(void)[43])) = 97)) and
  (to_rep((temp___String_Literal_1082(void)[44])) = 116)) and
  (to_rep((temp___String_Literal_1082(void)[45])) = 101)) and
  (to_rep((temp___String_Literal_1082(void)[46])) = 32)) and
  (to_rep((temp___String_Literal_1082(void)[47])) = 105)) and
  (to_rep((temp___String_Literal_1082(void)[48])) = 115)) and
  (to_rep((temp___String_Literal_1082(void)[49])) = 32)) and
  (to_rep((temp___String_Literal_1082(void)[50])) = 102)) and
  (to_rep((temp___String_Literal_1082(void)[51])) = 114)) and
  (to_rep((temp___String_Literal_1082(void)[52])) = 111)) and
  (to_rep((temp___String_Literal_1082(void)[53])) = 109)) and
  (to_rep((temp___String_Literal_1082(void)[54])) = 58)) and
  (to_rep((temp___String_Literal_1082(void)[55])) = 32))

logic temp___String_Literal_1084 : unit -> (int,character) farray

axiom temp___String_Literal_1084__def_axiom :
  (((((to_rep((temp___String_Literal_1084(void)[1])) = 32) and
  (to_rep((temp___String_Literal_1084(void)[2])) = 116)) and
  (to_rep((temp___String_Literal_1084(void)[3])) = 111)) and
  (to_rep((temp___String_Literal_1084(void)[4])) = 58)) and
  (to_rep((temp___String_Literal_1084(void)[5])) = 32))

 (* File "audittypes.ads", line 92, characters 0-0 *)
goal WP_parameter_def :
  (forall firsttime:(int,character) farray. forall timeok:bool. forall o:int.
  forall o1:int. forall o2:int. forall o3:int. forall o4:int. forall o5:int.
  forall temp___1337:(int,character) farray. forall temp___13371:t.
  forall o6:int. forall o7:int. forall o8:int. forall o9:int. forall o10:int.
  forall o11:int. forall temp___1339:(int,character) farray.
  forall temp___13391:t. forall o12:int. forall o13:int. forall o14:int.
  forall o15:int. forall o16:int. ((not (timeok = true)) ->
  ((((((((((1 <= 21) and (o = ((21 - 1) + 1))) or ((not (1 <= 21)) and
  (o = 0))) and ((((1 <= 55) and (o1 = ((55 - 1) + 1))) or
  ((not (1 <= 55)) and (o1 = 0))) and (o2 = (o1 + o)))) and
  (o3 = (1 + o2))) and (o4 = (o3 - 1))) and ((o5 = o4) and
  in_range1(o4))) and ((concat(temp___String_Literal_1082(void), 1, 55,
  firsttime, 1, 21) = temp___1337) and (mk(1, o5) = temp___13371))) and
  (((length({ elts = temp___1337; rt = temp___13371 }) = 0) and
  ((temp___String_Literal_1084(void) = temp___1339) and (mk(1,
  5) = temp___13391))) or ((not (length({ elts = temp___1337; rt =
  temp___13371 }) = 0)) and ((((((((1 <= 5) and (o6 = ((5 - 1) + 1))) or
  ((not (1 <= 5)) and (o6 = 0))) and
  ((((to_rep1(first(temp___13371)) <= to_rep1(last(temp___13371))) and
  (o7 = ((to_rep1(last(temp___13371)) - to_rep1(first(temp___13371))) + 1))) or
  ((not (to_rep1(first(temp___13371)) <= to_rep1(last(temp___13371)))) and
  (o7 = 0))) and (o8 = (o7 + o6)))) and
  (o9 = (to_rep1(first(temp___13371)) + o8))) and (o10 = (o9 - 1))) and
  ((o11 = o10) and in_range1(o10))) and ((concat(temp___1337,
  to_rep1(first(temp___13371)), to_rep1(last(temp___13371)),
  temp___String_Literal_1084(void), 1, 5) = temp___1339) and
  (mk(to_rep1(first(temp___13371)), o11) = temp___13391)))))) ->
  ((not (length({ elts = temp___1339; rt = temp___13391 }) = 0)) ->
  (((((((1 <= 21) and (o12 = ((21 - 1) + 1))) or ((not (1 <= 21)) and
  (o12 = 0))) and
  ((((to_rep1(first(temp___13391)) <= to_rep1(last(temp___13391))) and
  (o13 = ((to_rep1(last(temp___13391)) - to_rep1(first(temp___13391))) + 1))) or
  ((not (to_rep1(first(temp___13391)) <= to_rep1(last(temp___13391)))) and
  (o13 = 0))) and (o14 = (o13 + o12)))) and
  (o15 = (to_rep1(first(temp___13391)) + o14))) and (o16 = (o15 - 1))) ->
  in_range1(o16))))))
