;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int3 ((_ BitVec 32)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int4 ((_ BitVec 64)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-fun dummy () unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned16 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (unsigned16 unsigned16) Bool)

(declare-fun dummy1 () unsigned16)

(declare-datatypes ()
((unsigned16__ref (mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16
  (unsigned16__content a))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 16))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (unsigned8 unsigned8) Bool)

(declare-fun dummy2 () unsigned8)

(declare-datatypes ()
((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int6 ((x unsigned8)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-sort unsigned32 0)

(declare-fun attr__ATTRIBUTE_MODULUS3 () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (unsigned32 unsigned32) Bool)

(declare-fun dummy3 () unsigned32)

(declare-datatypes ()
((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32
  (unsigned32__content a))

(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))

(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; eax__post_axiom
  (assert
  (forall ((x86__rax (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rax true true true)
     (let ((result (eax x86__rax)))
     (and
     (= result ((_ extract 31 0) (bvand x86__rax ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true)))) :pattern ((eax x86__rax)) )))

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-fun ecx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ecx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ecx__post_axiom
  (assert
  (forall ((x86__rcx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rcx true true true)
     (let ((result (ecx x86__rcx)))
     (and (= result (readreg32 x86__rcx)) (dynamic_invariant2 result true
     false true)))) :pattern ((ecx x86__rcx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edx__post_axiom
  (assert
  (forall ((x86__rdx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdx true true true)
     (let ((result (edx x86__rdx)))
     (and (= result (readreg32 x86__rdx)) (dynamic_invariant2 result true
     false true)))) :pattern ((edx x86__rdx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun writereg16post ((_ BitVec 64) (_ BitVec 64) (_ BitVec 16)) Bool)

(declare-fun writereg16post__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 16)) Bool)

(declare-fun ebx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ebx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ebx__post_axiom
  (assert
  (forall ((x86__rbx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rbx true true true)
     (let ((result (ebx x86__rbx)))
     (and (= result (readreg32 x86__rbx)) (dynamic_invariant2 result true
     false true)))) :pattern ((ebx x86__rbx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun esp ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esp__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esp__post_axiom
  (assert
  (forall ((x86__rsp (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsp true true true)
     (let ((result (esp x86__rsp)))
     (and (= result (readreg32 x86__rsp)) (dynamic_invariant2 result true
     false true)))) :pattern ((esp x86__rsp)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun esi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esi__post_axiom
  (assert
  (forall ((x86__rsi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsi true true true)
     (let ((result (esi x86__rsi)))
     (and (= result (readreg32 x86__rsi)) (dynamic_invariant2 result true
     false true)))) :pattern ((esi x86__rsi)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edi__post_axiom
  (assert
  (forall ((x86__rdi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdi true true true)
     (let ((result (edi x86__rdi)))
     (and (= result (readreg32 x86__rdi)) (dynamic_invariant2 result true
     false true)))) :pattern ((edi x86__rdi)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS25 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS26 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS27 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS28 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS29 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS30 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS31 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS32 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS33 () Int)

(define-fun dynamic_invariant3 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-fun readmem8 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 8))

(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem8__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem8 addr x86__memory)))
     (and (= result (to_rep (select x86__memory addr))) (dynamic_invariant3
     result true false true)))) :pattern ((readmem8 addr x86__memory)) ))))

(declare-fun readmem32 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))

(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem32__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem32 addr x86__memory)))
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
     (= (bvand result ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
     (= (bvand result ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))
     (dynamic_invariant2 result true false true)))) :pattern ((readmem32 addr
                                                              x86__memory)) ))))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-fun attr__ATTRIBUTE_MODULUS4 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned641 unsigned641) Bool)

(declare-fun dummy4 () unsigned641)

(declare-datatypes ()
((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref_2__projection ((a unsigned64__ref1)) unsigned641
  (unsigned64__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_274 (_ BitVec 64))
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool true)

(declare-sort unsigned81 0)

(declare-fun attr__ATTRIBUTE_MODULUS5 () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq5 (unsigned81 unsigned81) Bool)

(declare-fun dummy5 () unsigned81)

(declare-datatypes ()
((unsigned8__ref1 (mk_unsigned8__ref1 (unsigned8__content1 unsigned81)))))
(define-fun unsigned8__ref_2__projection ((a unsigned8__ref1)) unsigned81
  (unsigned8__content1 a))

(define-fun dynamic_invariant5 ((temp___expr_292 (_ BitVec 8))
  (temp___is_init_289 Bool) (temp___skip_constant_290 Bool)
  (temp___do_toplevel_291 Bool)) Bool true)

(declare-fun attr__ATTRIBUTE_ADDRESS34 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS35 () Int)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS36 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS37 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS38 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS39 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS40 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS41 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS42 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS43 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS44 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS45 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS46 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS47 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS48 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS49 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS50 () Int)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (= (= (inrange64 var bottom range_size) true)
     (ite (bvule bottom (bvadd (bvsub ((_ int2bv 64) 18446744073709551615) range_size) ((_ int2bv 64) 1)))
     (and (bvule bottom var)
     (bvule var (bvadd bottom (bvsub range_size ((_ int2bv 64) 1)))))
     (or
     (and (bvule bottom var)
     (bvule var ((_ int2bv 64) 18446744073709551615)))
     (bvule var (bvsub (bvsub range_size (bvsub ((_ int2bv 64) 18446744073709551615) bottom)) ((_ int2bv 64) 2))))))) :pattern (
  (inrange64 var bottom range_size)) )))

(declare-fun readreg16 ((_ BitVec 64)) (_ BitVec 16))

(declare-fun readreg16__function_guard ((_ BitVec 16) (_ BitVec 64)) Bool)

;; readreg16__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg16 reg)))
     (and (= result ((_ extract 15 0) (bvand reg ((_ int2bv 64) 65535))))
     (dynamic_invariant1 result true false true)))) :pattern ((readreg16 reg)) )))

;; writereg16post__post_axiom
  (assert
  (forall ((regold (_ BitVec 64)) (regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 16)))
  (! (=>
     (and
     (and (dynamic_invariant regold true true true) (dynamic_invariant regnew
     true true true)) (dynamic_invariant1 val__ true true true))
     (= (= (writereg16post regold regnew val__) true)
     (and (= (readreg16 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744073709486080)) (bvand regold ((_ int2bv 64) 18446744073709486080)))))) :pattern (
  (writereg16post regold regnew val__)) ))))

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg32 reg)))
     (and
     (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true)))) :pattern ((readreg32 reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true) (dynamic_invariant2 val__
     true true true))
     (= (= (writereg32post regnew val__) true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern (
  (writereg32post regnew val__)) ))))

(declare-fun ds () (_ BitVec 64))

(declare-fun fs () (_ BitVec 64))

(declare-fun gs () (_ BitVec 64))

(declare-fun ss () (_ BitVec 64))

(declare-fun stackaddresssize () (_ BitVec 16))

(declare-fun zeroflag () Bool)

(declare-fun carryflag () Bool)

(declare-fun signflag () Bool)

(declare-fun overflowflag () Bool)

(declare-fun xmm0 () (_ BitVec 64))

(declare-fun xmm1 () (_ BitVec 64))

(declare-fun xmm2 () (_ BitVec 64))

(declare-fun xmm3 () (_ BitVec 64))

(declare-fun xmm4 () (_ BitVec 64))

(declare-fun xmm5 () (_ BitVec 64))

(declare-fun xmm6 () (_ BitVec 64))

(declare-fun xmm7 () (_ BitVec 64))

(declare-fun rax () (_ BitVec 64))

(declare-fun rcx () (_ BitVec 64))

(declare-fun rdx () (_ BitVec 64))

(declare-fun rbx () t__ref3)

(declare-fun rsp () t__ref3)

(declare-fun rbp () t__ref3)

(declare-fun rsi () t__ref3)

(declare-fun rdi () t__ref3)

(declare-fun r8 () t__ref3)

(declare-fun r9 () t__ref3)

(declare-fun r10 () t__ref3)

(declare-fun r11 () t__ref3)

(declare-fun r12 () t__ref3)

(declare-fun r13 () t__ref3)

(declare-fun r14 () t__ref3)

(declare-fun r15 () t__ref3)

(declare-fun memory () map__ref)

(declare-fun dummy_var () t__ref3)

(declare-fun savestackptr () t__ref3)

(declare-fun ra0 () t__ref)

(declare-fun ra1 () t__ref)

(declare-fun ra2 () t__ref)

(declare-fun ra3 () t__ref)

(declare-fun ra4 () t__ref)

(declare-fun ra5 () t__ref)

(declare-fun ra6 () t__ref)

(declare-fun ra7 () t__ref)

(declare-fun saverbx () t__ref3)

(declare-fun saverbp () t__ref3)

(declare-fun saver12 () t__ref3)

(declare-fun saver13 () t__ref3)

(declare-fun saver14 () t__ref3)

(declare-fun saver15 () t__ref3)

(declare-fun o () (_ BitVec 64))

(declare-fun o1 () (_ BitVec 8))

(declare-fun o2 () (_ BitVec 8))

(declare-fun o3 () (_ BitVec 8))

(declare-fun o4 () (_ BitVec 8))

(declare-fun o5 () (_ BitVec 8))

(declare-fun o6 () (_ BitVec 8))

(declare-fun o7 () (_ BitVec 8))

(declare-fun o8 () (_ BitVec 8))

(declare-fun o9 () (_ BitVec 8))

(declare-fun o10 () (_ BitVec 8))

(declare-fun o11 () (_ BitVec 8))

(declare-fun o12 () (_ BitVec 8))

(declare-fun o13 () (_ BitVec 8))

(declare-fun o14 () (_ BitVec 8))

(declare-fun o15 () (_ BitVec 8))

(declare-fun o16 () (_ BitVec 8))

(declare-fun o17 () (_ BitVec 64))

(declare-fun o18 () (_ BitVec 64))

(declare-fun o19 () (_ BitVec 64))

(declare-fun o20 () (_ BitVec 64))

(declare-fun o21 () (_ BitVec 64))

(declare-fun o22 () (_ BitVec 64))

(declare-fun o23 () (_ BitVec 64))

(declare-fun o24 () (_ BitVec 64))

(declare-fun o25 () (_ BitVec 64))

(declare-fun o26 () (_ BitVec 64))

(declare-fun o27 () (_ BitVec 32))

(declare-fun o28 () (_ BitVec 32))

(declare-fun o29 () (_ BitVec 64))

(declare-fun o30 () (_ BitVec 32))

(declare-fun o31 () (_ BitVec 32))

(declare-fun o32 () (_ BitVec 32))

(declare-fun o33 () (_ BitVec 32))

(declare-fun o34 () Bool)

(declare-fun o35 () (_ BitVec 32))

(declare-fun o36 () (_ BitVec 32))

(declare-fun o37 () (_ BitVec 32))

(declare-fun o38 () Bool)

(declare-fun temp___393 () (_ BitVec 64))

(declare-fun temp___394 () (_ BitVec 64))

(declare-fun temp___392 () (_ BitVec 64))

(declare-fun temp___391 () Bool)

(declare-fun temp___390 () Bool)

(declare-fun temp___389 () (_ BitVec 64))

(declare-fun temp___387 () Bool)

(declare-fun temp___388 () (_ BitVec 64))

(declare-fun temp___386 () (_ BitVec 64))

(declare-fun temp___385 () (_ BitVec 64))

(declare-fun temp___384 () Bool)

(declare-fun o39 () (_ BitVec 64))

(declare-fun o40 () (_ BitVec 32))

(declare-fun o41 () (_ BitVec 32))

(declare-fun o42 () (_ BitVec 32))

(declare-fun o43 () (_ BitVec 32))

(declare-fun o44 () (_ BitVec 32))

(declare-fun o45 () Bool)

(declare-fun o46 () (_ BitVec 32))

(declare-fun o47 () (_ BitVec 32))

(declare-fun o48 () (_ BitVec 32))

(declare-fun o49 () Bool)

(declare-fun o50 () (_ BitVec 32))

(declare-fun o51 () (_ BitVec 32))

(declare-fun o52 () Bool)

(declare-fun o53 () (_ BitVec 32))

(declare-fun o54 () (_ BitVec 32))

(declare-fun o55 () (_ BitVec 32))

(declare-fun o56 () (_ BitVec 32))

(declare-fun o57 () Bool)

(declare-fun o58 () Bool)

(declare-fun o59 () Bool)

(declare-fun o60 () (_ BitVec 64))

(declare-fun o61 () (_ BitVec 64))

(declare-fun o62 () (_ BitVec 64))

(declare-fun o63 () (_ BitVec 64))

(declare-fun o64 () (_ BitVec 32))

(declare-fun o65 () (_ BitVec 32))

(declare-fun o66 () (_ BitVec 64))

(declare-fun o67 () (_ BitVec 32))

(declare-fun o68 () (_ BitVec 32))

(declare-fun o69 () (_ BitVec 32))

(declare-fun o70 () (_ BitVec 32))

(declare-fun o71 () Bool)

(declare-fun o72 () (_ BitVec 32))

(declare-fun o73 () (_ BitVec 32))

(declare-fun o74 () (_ BitVec 32))

(declare-fun o75 () Bool)

(declare-fun temp___404 () (_ BitVec 64))

(declare-fun temp___403 () (_ BitVec 64))

(declare-fun temp___402 () Bool)

(declare-fun temp___401 () Bool)

(declare-fun temp___400 () (_ BitVec 64))

(declare-fun temp___398 () Bool)

(declare-fun temp___399 () (_ BitVec 64))

(declare-fun temp___397 () (_ BitVec 64))

(declare-fun temp___396 () (_ BitVec 64))

(declare-fun temp___395 () Bool)

(declare-fun temp___405 () (_ BitVec 64))

(declare-fun o76 () (_ BitVec 64))

(declare-fun o77 () (_ BitVec 32))

(declare-fun o78 () (_ BitVec 32))

(declare-fun o79 () (_ BitVec 32))

(declare-fun o80 () (_ BitVec 32))

(declare-fun o81 () (_ BitVec 32))

(declare-fun o82 () Bool)

(declare-fun o83 () (_ BitVec 32))

(declare-fun o84 () (_ BitVec 32))

(declare-fun o85 () (_ BitVec 32))

(declare-fun o86 () Bool)

(declare-fun o87 () (_ BitVec 32))

(declare-fun o88 () (_ BitVec 32))

(declare-fun o89 () Bool)

(declare-fun o90 () (_ BitVec 32))

(declare-fun o91 () (_ BitVec 32))

(declare-fun o92 () (_ BitVec 32))

(declare-fun o93 () (_ BitVec 32))

(declare-fun o94 () Bool)

(declare-fun o95 () Bool)

(declare-fun o96 () Bool)

(declare-fun o97 () (_ BitVec 64))

(declare-fun o98 () (_ BitVec 64))

(declare-fun o99 () (_ BitVec 64))

(declare-fun o100 () (_ BitVec 64))

(declare-fun o101 () (_ BitVec 32))

(declare-fun o102 () (_ BitVec 32))

(declare-fun o103 () (_ BitVec 64))

(declare-fun o104 () (_ BitVec 32))

(declare-fun o105 () (_ BitVec 32))

(declare-fun o106 () (_ BitVec 32))

(declare-fun o107 () (_ BitVec 32))

(declare-fun o108 () Bool)

(declare-fun o109 () (_ BitVec 32))

(declare-fun o110 () (_ BitVec 32))

(declare-fun o111 () (_ BitVec 32))

(declare-fun o112 () Bool)

(declare-fun temp___415 () (_ BitVec 64))

(declare-fun temp___414 () (_ BitVec 64))

(declare-fun temp___413 () Bool)

(declare-fun temp___412 () Bool)

(declare-fun temp___411 () (_ BitVec 64))

(declare-fun temp___409 () Bool)

(declare-fun temp___410 () (_ BitVec 64))

(declare-fun temp___408 () (_ BitVec 64))

(declare-fun temp___407 () (_ BitVec 64))

(declare-fun temp___416 () (_ BitVec 64))

(declare-fun temp___406 () Bool)

(declare-fun o113 () (_ BitVec 64))

(declare-fun o114 () (_ BitVec 32))

(declare-fun o115 () (_ BitVec 32))

(declare-fun o116 () (_ BitVec 32))

(declare-fun o117 () (_ BitVec 32))

(declare-fun o118 () (_ BitVec 32))

(declare-fun o119 () Bool)

(declare-fun o120 () (_ BitVec 32))

(declare-fun o121 () (_ BitVec 32))

(declare-fun o122 () (_ BitVec 32))

(declare-fun o123 () Bool)

(declare-fun o124 () (_ BitVec 32))

(declare-fun o125 () (_ BitVec 32))

(declare-fun o126 () Bool)

(declare-fun o127 () (_ BitVec 32))

(declare-fun o128 () (_ BitVec 32))

(declare-fun o129 () (_ BitVec 32))

(declare-fun o130 () (_ BitVec 32))

(declare-fun o131 () Bool)

(declare-fun o132 () Bool)

(declare-fun o133 () Bool)

(declare-fun o134 () (_ BitVec 64))

(declare-fun o135 () (_ BitVec 64))

(declare-fun o136 () (_ BitVec 64))

(declare-fun o137 () (_ BitVec 32))

(declare-fun o138 () (_ BitVec 32))

(declare-fun o139 () (_ BitVec 64))

(declare-fun o140 () (_ BitVec 32))

(declare-fun o141 () (_ BitVec 32))

(declare-fun o142 () (_ BitVec 32))

(declare-fun o143 () (_ BitVec 32))

(declare-fun o144 () Bool)

(declare-fun o145 () (_ BitVec 32))

(declare-fun o146 () (_ BitVec 32))

(declare-fun o147 () (_ BitVec 32))

(declare-fun o148 () Bool)

(declare-fun temp___426 () (_ BitVec 64))

(declare-fun temp___425 () (_ BitVec 64))

(declare-fun temp___424 () Bool)

(declare-fun temp___423 () Bool)

(declare-fun temp___422 () (_ BitVec 64))

(declare-fun temp___427 () (_ BitVec 64))

(declare-fun temp___420 () Bool)

(declare-fun temp___421 () (_ BitVec 64))

(declare-fun temp___419 () (_ BitVec 64))

(declare-fun temp___418 () (_ BitVec 64))

(declare-fun temp___417 () Bool)

(declare-fun o149 () (_ BitVec 64))

(declare-fun o150 () (_ BitVec 32))

(declare-fun o151 () (_ BitVec 32))

(declare-fun o152 () (_ BitVec 32))

(declare-fun o153 () (_ BitVec 32))

(declare-fun o154 () (_ BitVec 32))

(declare-fun o155 () Bool)

(declare-fun o156 () (_ BitVec 32))

(declare-fun o157 () (_ BitVec 32))

(declare-fun o158 () (_ BitVec 32))

(declare-fun o159 () Bool)

(declare-fun o160 () (_ BitVec 32))

(declare-fun o161 () (_ BitVec 32))

(declare-fun o162 () Bool)

(declare-fun o163 () (_ BitVec 32))

(declare-fun o164 () (_ BitVec 32))

(declare-fun o165 () (_ BitVec 32))

(declare-fun o166 () (_ BitVec 32))

(declare-fun o167 () Bool)

(declare-fun o168 () Bool)

(declare-fun o169 () Bool)

(declare-fun o170 () (_ BitVec 64))

(declare-fun o171 () (_ BitVec 32))

(declare-fun o172 () (_ BitVec 32))

(declare-fun o173 () (_ BitVec 64))

(declare-fun temp___526 () (_ BitVec 64))

(declare-fun temp___525 () (_ BitVec 64))

(declare-fun temp___527 () (_ BitVec 64))

(declare-fun temp___524 () (_ BitVec 64))

(declare-fun temp___522 () (_ BitVec 64))

(declare-fun temp___523 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___520 () Bool)

(declare-fun temp___521 () (_ BitVec 64))

(declare-fun temp___518 () (_ BitVec 64))

(declare-fun temp___519 () (_ BitVec 64))

(declare-fun temp___516 () Bool)

(declare-fun temp___517 () (_ BitVec 64))

(declare-fun temp___515 () (_ BitVec 64))

(declare-fun temp___514 () (_ BitVec 64))

(declare-fun temp___513 () (_ BitVec 64))

(declare-fun temp___511 () Bool)

(declare-fun temp___512 () (_ BitVec 64))

(declare-fun temp___510 () (_ BitVec 64))

(declare-fun temp___507 () (_ BitVec 64))

(declare-fun temp___508 () (_ BitVec 64))

(declare-fun temp___509 () (_ BitVec 64))

(declare-fun temp___506 () Bool)

(declare-fun temp___505 () (_ BitVec 64))

(declare-fun temp___528 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___504 () (_ BitVec 64))

(declare-fun o174 () (_ BitVec 64))

(declare-fun temp___501 () (_ BitVec 64))

(declare-fun temp___503 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___502 () (_ BitVec 64))

(declare-fun temp___500 () (_ BitVec 64))

(declare-fun temp___499 () (_ BitVec 64))

(declare-fun temp___497 () (_ BitVec 64))

(declare-fun temp___498 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___495 () Bool)

(declare-fun temp___496 () (_ BitVec 64))

(declare-fun temp___493 () (_ BitVec 64))

(declare-fun temp___494 () (_ BitVec 64))

(declare-fun temp___491 () Bool)

(declare-fun temp___492 () (_ BitVec 64))

(declare-fun temp___490 () (_ BitVec 64))

(declare-fun temp___489 () (_ BitVec 64))

(declare-fun temp___487 () Bool)

(declare-fun temp___488 () (_ BitVec 64))

(declare-fun temp___486 () (_ BitVec 64))

(declare-fun temp___483 () (_ BitVec 64))

(declare-fun temp___484 () (_ BitVec 64))

(declare-fun temp___485 () (_ BitVec 64))

(declare-fun temp___482 () Bool)

(declare-fun temp___481 () (_ BitVec 64))

(declare-fun temp___480 () (_ BitVec 64))

(declare-fun o175 () (_ BitVec 64))

(declare-fun temp___477 () (_ BitVec 64))

(declare-fun temp___476 () (_ BitVec 64))

(declare-fun temp___478 () (_ BitVec 64))

(declare-fun temp___475 () (_ BitVec 64))

(declare-fun temp___473 () (_ BitVec 64))

(declare-fun temp___474 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___471 () Bool)

(declare-fun temp___472 () (_ BitVec 64))

(declare-fun temp___479 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___469 () (_ BitVec 64))

(declare-fun temp___470 () (_ BitVec 64))

(declare-fun temp___467 () Bool)

(declare-fun temp___468 () (_ BitVec 64))

(declare-fun temp___466 () (_ BitVec 64))

(declare-fun temp___464 () Bool)

(declare-fun temp___465 () (_ BitVec 64))

(declare-fun temp___463 () (_ BitVec 64))

(declare-fun temp___460 () (_ BitVec 64))

(declare-fun temp___461 () (_ BitVec 64))

(declare-fun temp___462 () (_ BitVec 64))

(declare-fun temp___459 () Bool)

(declare-fun temp___458 () (_ BitVec 64))

(declare-fun o176 () (_ BitVec 64))

(declare-fun temp___455 () (_ BitVec 64))

(declare-fun temp___454 () (_ BitVec 64))

(declare-fun temp___453 () (_ BitVec 64))

(declare-fun temp___451 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___452 () (_ BitVec 64))

(declare-fun temp___449 () Bool)

(declare-fun temp___450 () (_ BitVec 64))

(declare-fun temp___447 () Bool)

(declare-fun temp___448 () (_ BitVec 64))

(declare-fun temp___456 () (_ BitVec 64))

(declare-fun temp___446 () (_ BitVec 64))

(declare-fun temp___444 () Bool)

(declare-fun temp___445 () (_ BitVec 64))

(declare-fun temp___443 () (_ BitVec 64))

(declare-fun temp___441 () (_ BitVec 64))

(declare-fun temp___442 () (_ BitVec 64))

(declare-fun temp___440 () Bool)

(declare-fun temp___439 () (_ BitVec 64))

(declare-fun temp___457 () (Array (_ BitVec 64) unsigned8))

(declare-fun o177 () (_ BitVec 64))

(declare-fun o178 () (_ BitVec 64))

(declare-fun o179 () (_ BitVec 64))

(declare-fun o180 () (_ BitVec 64))

(declare-fun o181 () (_ BitVec 32))

(declare-fun o182 () (_ BitVec 32))

(declare-fun o183 () Bool)

(declare-fun o184 () (_ BitVec 32))

(declare-fun o185 () Bool)

(declare-fun temp___437 () (_ BitVec 64))

(declare-fun temp___438 () (_ BitVec 64))

(declare-fun temp___436 () (_ BitVec 64))

(declare-fun temp___435 () Bool)

(declare-fun temp___434 () Bool)

(declare-fun temp___433 () (_ BitVec 64))

(declare-fun temp___431 () Bool)

(declare-fun temp___432 () (_ BitVec 64))

(declare-fun temp___430 () (_ BitVec 64))

(declare-fun temp___429 () (_ BitVec 64))

(declare-fun temp___428 () Bool)

(declare-fun o186 () (_ BitVec 64))

(declare-fun o187 () (_ BitVec 32))

(declare-fun o188 () (_ BitVec 32))

(declare-fun o189 () (_ BitVec 32))

(declare-fun o190 () (_ BitVec 32))

(declare-fun o191 () (_ BitVec 32))

(declare-fun o192 () Bool)

(declare-fun o193 () (_ BitVec 32))

(declare-fun o194 () (_ BitVec 32))

(declare-fun o195 () (_ BitVec 32))

(declare-fun o196 () Bool)

(declare-fun o197 () (_ BitVec 32))

(declare-fun o198 () (_ BitVec 32))

(declare-fun o199 () Bool)

(declare-fun o200 () (_ BitVec 32))

(declare-fun o201 () (_ BitVec 32))

(declare-fun o202 () (_ BitVec 32))

(declare-fun o203 () (_ BitVec 32))

(declare-fun o204 () Bool)

(declare-fun o205 () Bool)

(declare-fun o206 () Bool)

(declare-fun o207 () (_ BitVec 64))

(declare-fun o208 () (_ BitVec 64))

(declare-fun o209 () (_ BitVec 64))

(declare-fun o210 () (_ BitVec 64))

(declare-fun o211 () (_ BitVec 64))

(declare-fun o212 () (_ BitVec 64))

(declare-fun o213 () (_ BitVec 64))

(declare-fun o214 () (_ BitVec 64))

(declare-fun o215 () (_ BitVec 64))

(declare-fun o216 () (_ BitVec 64))

(declare-fun o217 () (_ BitVec 64))

(declare-fun o218 () (_ BitVec 64))

(declare-fun o219 () (_ BitVec 32))

(declare-fun o220 () (_ BitVec 32))

(declare-fun o221 () (_ BitVec 64))

(declare-fun o222 () (_ BitVec 32))

(declare-fun o223 () (_ BitVec 64))

(declare-fun o224 () (_ BitVec 64))

(declare-fun o225 () (_ BitVec 64))

(declare-fun o226 () (_ BitVec 64))

(declare-fun o227 () (_ BitVec 64))

(declare-fun o228 () (_ BitVec 64))

(declare-fun result () t__ref3)

(declare-fun savestackptr1 () (_ BitVec 64))

(declare-fun result1 () t__ref)

(declare-fun ra01 () (_ BitVec 8))

(declare-fun result2 () t__ref)

(declare-fun ra11 () (_ BitVec 8))

(declare-fun result3 () t__ref)

(declare-fun ra21 () (_ BitVec 8))

(declare-fun result4 () t__ref)

(declare-fun ra31 () (_ BitVec 8))

(declare-fun result5 () t__ref)

(declare-fun ra41 () (_ BitVec 8))

(declare-fun result6 () t__ref)

(declare-fun ra51 () (_ BitVec 8))

(declare-fun result7 () t__ref)

(declare-fun ra61 () (_ BitVec 8))

(declare-fun result8 () t__ref)

(declare-fun ra71 () (_ BitVec 8))

(declare-fun result9 () t__ref3)

(declare-fun saverbx1 () (_ BitVec 64))

(declare-fun result10 () t__ref3)

(declare-fun saverbp1 () (_ BitVec 64))

(declare-fun result11 () t__ref3)

(declare-fun saver121 () (_ BitVec 64))

(declare-fun result12 () t__ref3)

(declare-fun saver131 () (_ BitVec 64))

(declare-fun result13 () t__ref3)

(declare-fun saver141 () (_ BitVec 64))

(declare-fun result14 () t__ref3)

(declare-fun saver151 () (_ BitVec 64))

(declare-fun memory1 () (Array (_ BitVec 64) unsigned8))

(declare-fun result15 () t__ref3)

(declare-fun rsp1 () (_ BitVec 64))

(declare-fun memory2 () (Array (_ BitVec 64) unsigned8))

(declare-fun result16 () t__ref3)

(declare-fun rsp2 () (_ BitVec 64))

(declare-fun rdi1 () (_ BitVec 64))

(declare-fun memory3 () (Array (_ BitVec 64) unsigned8))

(declare-fun result17 () t__ref3)

(declare-fun rsp3 () (_ BitVec 64))

(declare-fun memory4 () (Array (_ BitVec 64) unsigned8))

(declare-fun result18 () t__ref3)

(declare-fun rsp4 () (_ BitVec 64))

(declare-fun memory5 () (Array (_ BitVec 64) unsigned8))

(declare-fun result19 () t__ref3)

(declare-fun rsp5 () (_ BitVec 64))

(declare-fun memory6 () (Array (_ BitVec 64) unsigned8))

(declare-fun result20 () t__ref3)

(declare-fun rsp6 () (_ BitVec 64))

(declare-fun rbx1 () (_ BitVec 64))

(declare-fun result21 () t__ref3)

(declare-fun rsp7 () (_ BitVec 64))

(declare-fun result22 () t__ref3)

(declare-fun rsp8 () (_ BitVec 64))

(declare-fun rsp9 () (_ BitVec 64))

(declare-fun result23 () t__ref3)

(declare-fun rsi1 () (_ BitVec 64))

(declare-fun result24 () t__ref3)

(declare-fun rdi2 () (_ BitVec 64))

(declare-fun result25 () t__ref3)

(declare-fun rbp1 () (_ BitVec 64))

(declare-fun result26 () t__ref3)

(declare-fun xmm31 () (_ BitVec 64))

(declare-fun result27 () t__ref3)

(declare-fun xmm21 () (_ BitVec 64))

(declare-fun result28 () t__ref3)

(declare-fun xmm11 () (_ BitVec 64))

(declare-fun result29 () t__ref3)

(declare-fun xmm01 () (_ BitVec 64))

(declare-fun result30 () t__ref3)

(declare-fun rsp10 () (_ BitVec 64))

(declare-fun rsp11 () (_ BitVec 64))

(declare-fun rdi3 () (_ BitVec 64))

(declare-fun rax1 () (_ BitVec 64))

(declare-fun result31 () t__ref3)

(declare-fun rsp12 () (_ BitVec 64))

(declare-fun rsp13 () (_ BitVec 64))

(declare-fun rdi4 () (_ BitVec 64))

(declare-fun result32 () bool__ref)

(declare-fun zeroflag1 () Bool)

(declare-fun result33 () bool__ref)

(declare-fun signflag1 () Bool)

(declare-fun result34 () bool__ref)

(declare-fun carryflag1 () Bool)

(declare-fun result35 () bool__ref)

(declare-fun overflowflag1 () Bool)

(declare-fun zeroflag2 () Bool)

(declare-fun carryflag2 () Bool)

(declare-fun signflag2 () Bool)

(declare-fun overflowflag2 () Bool)

(declare-fun xmm02 () (_ BitVec 64))

(declare-fun rax2 () (_ BitVec 64))

(declare-fun rbx2 () (_ BitVec 64))

(declare-fun rsp14 () (_ BitVec 64))

(declare-fun rbp2 () (_ BitVec 64))

(declare-fun rdi5 () (_ BitVec 64))

(declare-fun result36 () t__ref3)

(declare-fun xmm03 () (_ BitVec 64))

(declare-fun rdi6 () (_ BitVec 64))

(declare-fun rax3 () (_ BitVec 64))

(declare-fun rbx3 () (_ BitVec 64))

(declare-fun result37 () t__ref3)

(declare-fun rbp3 () (_ BitVec 64))

(declare-fun result38 () t__ref3)

(declare-fun rsp15 () (_ BitVec 64))

(declare-fun rsp16 () (_ BitVec 64))

(declare-fun result39 () bool__ref)

(declare-fun zeroflag3 () Bool)

(declare-fun result40 () bool__ref)

(declare-fun signflag3 () Bool)

(declare-fun result41 () bool__ref)

(declare-fun carryflag3 () Bool)

(declare-fun result42 () Bool)

(declare-fun result43 () Bool)

(declare-fun result44 () bool__ref)

(declare-fun overflowflag3 () Bool)

(declare-fun zeroflag4 () bool__ref)

(declare-fun carryflag4 () bool__ref)

(declare-fun signflag4 () bool__ref)

(declare-fun overflowflag4 () bool__ref)

(declare-fun xmm04 () t__ref3)

(declare-fun rax4 () t__ref3)

(declare-fun rbx4 () t__ref3)

(declare-fun rsp17 () t__ref3)

(declare-fun rbp4 () t__ref3)

(declare-fun rdi7 () t__ref3)

(declare-fun zeroflag5 () Bool)

(declare-fun carryflag5 () Bool)

(declare-fun signflag5 () Bool)

(declare-fun overflowflag5 () Bool)

(declare-fun xmm05 () (_ BitVec 64))

(declare-fun rax5 () (_ BitVec 64))

(declare-fun rbx5 () (_ BitVec 64))

(declare-fun rsp18 () (_ BitVec 64))

(declare-fun rbp5 () (_ BitVec 64))

(declare-fun rdi8 () (_ BitVec 64))

(declare-fun zeroflag6 () bool__ref)

(declare-fun carryflag6 () bool__ref)

(declare-fun signflag6 () bool__ref)

(declare-fun overflowflag6 () bool__ref)

(declare-fun xmm06 () t__ref3)

(declare-fun rax6 () t__ref3)

(declare-fun rbx6 () t__ref3)

(declare-fun rsp19 () t__ref3)

(declare-fun rbp6 () t__ref3)

(declare-fun rdi9 () t__ref3)

(declare-fun zeroflag7 () Bool)

(declare-fun carryflag7 () Bool)

(declare-fun signflag7 () Bool)

(declare-fun overflowflag7 () Bool)

(declare-fun xmm07 () (_ BitVec 64))

(declare-fun rax7 () (_ BitVec 64))

(declare-fun rbx7 () (_ BitVec 64))

(declare-fun rsp20 () (_ BitVec 64))

(declare-fun rbp7 () (_ BitVec 64))

(declare-fun rdi10 () (_ BitVec 64))

(declare-fun zeroflag8 () bool__ref)

(declare-fun carryflag8 () bool__ref)

(declare-fun signflag8 () bool__ref)

(declare-fun overflowflag8 () bool__ref)

(declare-fun xmm08 () t__ref3)

(declare-fun rax8 () t__ref3)

(declare-fun rbx8 () t__ref3)

(declare-fun rsp21 () t__ref3)

(declare-fun rbp8 () t__ref3)

(declare-fun rdi11 () t__ref3)

(declare-fun zeroflag9 () Bool)

(declare-fun carryflag9 () Bool)

(declare-fun signflag9 () Bool)

(declare-fun overflowflag9 () Bool)

(declare-fun xmm09 () (_ BitVec 64))

(declare-fun rax9 () (_ BitVec 64))

(declare-fun rbx9 () (_ BitVec 64))

(declare-fun rsp22 () (_ BitVec 64))

(declare-fun rbp9 () (_ BitVec 64))

(declare-fun rdi12 () (_ BitVec 64))

(declare-fun rdi13 () (_ BitVec 64))

(declare-fun rbx10 () (_ BitVec 64))

(declare-fun result45 () t__ref3)

(declare-fun rbp10 () (_ BitVec 64))

(declare-fun result46 () t__ref3)

(declare-fun rsp23 () (_ BitVec 64))

(declare-fun rsp24 () (_ BitVec 64))

(declare-fun result47 () t__ref3)

(declare-fun rsi2 () (_ BitVec 64))

(declare-fun result48 () t__ref3)

(declare-fun rdi14 () (_ BitVec 64))

(declare-fun result49 () t__ref3)

(declare-fun xmm32 () (_ BitVec 64))

(declare-fun result50 () t__ref3)

(declare-fun xmm22 () (_ BitVec 64))

(declare-fun result51 () t__ref3)

(declare-fun xmm12 () (_ BitVec 64))

(declare-fun result52 () t__ref3)

(declare-fun xmm010 () (_ BitVec 64))

(declare-fun result53 () t__ref3)

(declare-fun rsp25 () (_ BitVec 64))

(declare-fun rsp26 () (_ BitVec 64))

(declare-fun rax10 () (_ BitVec 64))

(declare-fun rdi15 () (_ BitVec 64))

(declare-fun result54 () t__ref3)

(declare-fun rsp27 () (_ BitVec 64))

(declare-fun rsp28 () (_ BitVec 64))

(declare-fun rsi3 () (_ BitVec 64))

(declare-fun result55 () bool__ref)

(declare-fun zeroflag10 () Bool)

(declare-fun result56 () bool__ref)

(declare-fun signflag10 () Bool)

(declare-fun result57 () bool__ref)

(declare-fun carryflag10 () Bool)

(declare-fun result58 () bool__ref)

(declare-fun overflowflag10 () Bool)

(declare-fun zeroflag11 () Bool)

(declare-fun carryflag11 () Bool)

(declare-fun signflag11 () Bool)

(declare-fun overflowflag11 () Bool)

(declare-fun xmm011 () (_ BitVec 64))

(declare-fun rax11 () (_ BitVec 64))

(declare-fun rbx11 () (_ BitVec 64))

(declare-fun rsp29 () (_ BitVec 64))

(declare-fun rbp11 () (_ BitVec 64))

(declare-fun rdi16 () (_ BitVec 64))

(declare-fun result59 () t__ref3)

(declare-fun xmm012 () (_ BitVec 64))

(declare-fun rdi17 () (_ BitVec 64))

(declare-fun rax12 () (_ BitVec 64))

(declare-fun rbx12 () (_ BitVec 64))

(declare-fun result60 () t__ref3)

(declare-fun rbp12 () (_ BitVec 64))

(declare-fun result61 () t__ref3)

(declare-fun rsp30 () (_ BitVec 64))

(declare-fun rsp31 () (_ BitVec 64))

(declare-fun result62 () bool__ref)

(declare-fun zeroflag12 () Bool)

(declare-fun result63 () bool__ref)

(declare-fun signflag12 () Bool)

(declare-fun result64 () bool__ref)

(declare-fun carryflag12 () Bool)

(declare-fun result65 () Bool)

(declare-fun result66 () Bool)

(declare-fun result67 () bool__ref)

(declare-fun overflowflag12 () Bool)

(declare-fun zeroflag13 () bool__ref)

(declare-fun carryflag13 () bool__ref)

(declare-fun signflag13 () bool__ref)

(declare-fun overflowflag13 () bool__ref)

(declare-fun xmm013 () t__ref3)

(declare-fun rax13 () t__ref3)

(declare-fun rbx13 () t__ref3)

(declare-fun rsp32 () t__ref3)

(declare-fun rbp13 () t__ref3)

(declare-fun rdi18 () t__ref3)

(declare-fun zeroflag14 () Bool)

(declare-fun carryflag14 () Bool)

(declare-fun signflag14 () Bool)

(declare-fun overflowflag14 () Bool)

(declare-fun xmm014 () (_ BitVec 64))

(declare-fun rax14 () (_ BitVec 64))

(declare-fun rbx14 () (_ BitVec 64))

(declare-fun rsp33 () (_ BitVec 64))

(declare-fun rbp14 () (_ BitVec 64))

(declare-fun rdi19 () (_ BitVec 64))

(declare-fun zeroflag15 () bool__ref)

(declare-fun carryflag15 () bool__ref)

(declare-fun signflag15 () bool__ref)

(declare-fun overflowflag15 () bool__ref)

(declare-fun xmm015 () t__ref3)

(declare-fun rax15 () t__ref3)

(declare-fun rbx15 () t__ref3)

(declare-fun rsp34 () t__ref3)

(declare-fun rbp15 () t__ref3)

(declare-fun rdi20 () t__ref3)

(declare-fun zeroflag16 () Bool)

(declare-fun carryflag16 () Bool)

(declare-fun signflag16 () Bool)

(declare-fun overflowflag16 () Bool)

(declare-fun xmm016 () (_ BitVec 64))

(declare-fun rax16 () (_ BitVec 64))

(declare-fun rbx16 () (_ BitVec 64))

(declare-fun rsp35 () (_ BitVec 64))

(declare-fun rbp16 () (_ BitVec 64))

(declare-fun rdi21 () (_ BitVec 64))

(declare-fun zeroflag17 () bool__ref)

(declare-fun carryflag17 () bool__ref)

(declare-fun signflag17 () bool__ref)

(declare-fun overflowflag17 () bool__ref)

(declare-fun xmm017 () t__ref3)

(declare-fun rax17 () t__ref3)

(declare-fun rbx17 () t__ref3)

(declare-fun rsp36 () t__ref3)

(declare-fun rbp17 () t__ref3)

(declare-fun rdi22 () t__ref3)

(declare-fun zeroflag18 () Bool)

(declare-fun carryflag18 () Bool)

(declare-fun signflag18 () Bool)

(declare-fun overflowflag18 () Bool)

(declare-fun xmm018 () (_ BitVec 64))

(declare-fun rax18 () (_ BitVec 64))

(declare-fun rbx18 () (_ BitVec 64))

(declare-fun rsp37 () (_ BitVec 64))

(declare-fun rbp18 () (_ BitVec 64))

(declare-fun rdi23 () (_ BitVec 64))

(declare-fun zeroflag19 () bool__ref)

(declare-fun carryflag19 () bool__ref)

(declare-fun signflag19 () bool__ref)

(declare-fun overflowflag19 () bool__ref)

(declare-fun xmm019 () t__ref3)

(declare-fun rax19 () t__ref3)

(declare-fun rbx19 () t__ref3)

(declare-fun rsp38 () t__ref3)

(declare-fun rbp19 () t__ref3)

(declare-fun rdi24 () t__ref3)

(declare-fun zeroflag20 () Bool)

(declare-fun carryflag20 () Bool)

(declare-fun signflag20 () Bool)

(declare-fun overflowflag20 () Bool)

(declare-fun xmm020 () (_ BitVec 64))

(declare-fun rax20 () (_ BitVec 64))

(declare-fun rbx20 () (_ BitVec 64))

(declare-fun rsp39 () (_ BitVec 64))

(declare-fun rbp20 () (_ BitVec 64))

(declare-fun rdi25 () (_ BitVec 64))

(declare-fun rdi26 () (_ BitVec 64))

(declare-fun rbx21 () (_ BitVec 64))

(declare-fun result68 () t__ref3)

(declare-fun rbp21 () (_ BitVec 64))

(declare-fun result69 () t__ref3)

(declare-fun rsp40 () (_ BitVec 64))

(declare-fun rsp41 () (_ BitVec 64))

(declare-fun result70 () t__ref3)

(declare-fun rsi4 () (_ BitVec 64))

(declare-fun result71 () t__ref3)

(declare-fun rdi27 () (_ BitVec 64))

(declare-fun result72 () t__ref3)

(declare-fun xmm33 () (_ BitVec 64))

(declare-fun result73 () t__ref3)

(declare-fun xmm23 () (_ BitVec 64))

(declare-fun result74 () t__ref3)

(declare-fun xmm13 () (_ BitVec 64))

(declare-fun result75 () t__ref3)

(declare-fun xmm021 () (_ BitVec 64))

(declare-fun result76 () t__ref3)

(declare-fun rsp42 () (_ BitVec 64))

(declare-fun rsp43 () (_ BitVec 64))

(declare-fun rax21 () (_ BitVec 64))

(declare-fun rdi28 () (_ BitVec 64))

(declare-fun result77 () t__ref3)

(declare-fun rsp44 () (_ BitVec 64))

(declare-fun rsp45 () (_ BitVec 64))

(declare-fun rcx1 () (_ BitVec 64))

(declare-fun result78 () bool__ref)

(declare-fun zeroflag21 () Bool)

(declare-fun result79 () bool__ref)

(declare-fun signflag21 () Bool)

(declare-fun result80 () bool__ref)

(declare-fun carryflag21 () Bool)

(declare-fun result81 () bool__ref)

(declare-fun overflowflag21 () Bool)

(declare-fun zeroflag22 () Bool)

(declare-fun carryflag22 () Bool)

(declare-fun signflag22 () Bool)

(declare-fun overflowflag22 () Bool)

(declare-fun xmm022 () (_ BitVec 64))

(declare-fun rax22 () (_ BitVec 64))

(declare-fun rbx22 () (_ BitVec 64))

(declare-fun rsp46 () (_ BitVec 64))

(declare-fun rbp22 () (_ BitVec 64))

(declare-fun rdi29 () (_ BitVec 64))

(declare-fun result82 () t__ref3)

(declare-fun xmm023 () (_ BitVec 64))

(declare-fun rdi30 () (_ BitVec 64))

(declare-fun rax23 () (_ BitVec 64))

(declare-fun rbx23 () (_ BitVec 64))

(declare-fun result83 () t__ref3)

(declare-fun rbp23 () (_ BitVec 64))

(declare-fun result84 () t__ref3)

(declare-fun rsp47 () (_ BitVec 64))

(declare-fun rsp48 () (_ BitVec 64))

(declare-fun result85 () bool__ref)

(declare-fun zeroflag23 () Bool)

(declare-fun result86 () bool__ref)

(declare-fun signflag23 () Bool)

(declare-fun result87 () bool__ref)

(declare-fun carryflag23 () Bool)

(declare-fun result88 () Bool)

(declare-fun result89 () Bool)

(declare-fun result90 () bool__ref)

(declare-fun overflowflag23 () Bool)

(declare-fun zeroflag24 () bool__ref)

(declare-fun carryflag24 () bool__ref)

(declare-fun signflag24 () bool__ref)

(declare-fun overflowflag24 () bool__ref)

(declare-fun xmm024 () t__ref3)

(declare-fun rax24 () t__ref3)

(declare-fun rbx24 () t__ref3)

(declare-fun rsp49 () t__ref3)

(declare-fun rbp24 () t__ref3)

(declare-fun rdi31 () t__ref3)

(declare-fun zeroflag25 () Bool)

(declare-fun carryflag25 () Bool)

(declare-fun signflag25 () Bool)

(declare-fun overflowflag25 () Bool)

(declare-fun xmm025 () (_ BitVec 64))

(declare-fun rax25 () (_ BitVec 64))

(declare-fun rbx25 () (_ BitVec 64))

(declare-fun rsp50 () (_ BitVec 64))

(declare-fun rbp25 () (_ BitVec 64))

(declare-fun rdi32 () (_ BitVec 64))

(declare-fun zeroflag26 () bool__ref)

(declare-fun carryflag26 () bool__ref)

(declare-fun signflag26 () bool__ref)

(declare-fun overflowflag26 () bool__ref)

(declare-fun xmm026 () t__ref3)

(declare-fun rax26 () t__ref3)

(declare-fun rbx26 () t__ref3)

(declare-fun rsp51 () t__ref3)

(declare-fun rbp26 () t__ref3)

(declare-fun rdi33 () t__ref3)

(declare-fun zeroflag27 () Bool)

(declare-fun carryflag27 () Bool)

(declare-fun signflag27 () Bool)

(declare-fun overflowflag27 () Bool)

(declare-fun xmm027 () (_ BitVec 64))

(declare-fun rax27 () (_ BitVec 64))

(declare-fun rbx27 () (_ BitVec 64))

(declare-fun rsp52 () (_ BitVec 64))

(declare-fun rbp27 () (_ BitVec 64))

(declare-fun rdi34 () (_ BitVec 64))

(declare-fun zeroflag28 () bool__ref)

(declare-fun carryflag28 () bool__ref)

(declare-fun signflag28 () bool__ref)

(declare-fun overflowflag28 () bool__ref)

(declare-fun xmm028 () t__ref3)

(declare-fun rax28 () t__ref3)

(declare-fun rbx28 () t__ref3)

(declare-fun rsp53 () t__ref3)

(declare-fun rbp28 () t__ref3)

(declare-fun rdi35 () t__ref3)

(declare-fun zeroflag29 () Bool)

(declare-fun carryflag29 () Bool)

(declare-fun signflag29 () Bool)

(declare-fun overflowflag29 () Bool)

(declare-fun xmm029 () (_ BitVec 64))

(declare-fun rax29 () (_ BitVec 64))

(declare-fun rbx29 () (_ BitVec 64))

(declare-fun rsp54 () (_ BitVec 64))

(declare-fun rbp29 () (_ BitVec 64))

(declare-fun rdi36 () (_ BitVec 64))

(declare-fun zeroflag30 () bool__ref)

(declare-fun carryflag30 () bool__ref)

(declare-fun signflag30 () bool__ref)

(declare-fun overflowflag30 () bool__ref)

(declare-fun xmm030 () t__ref3)

(declare-fun rax30 () t__ref3)

(declare-fun rbx30 () t__ref3)

(declare-fun rsp55 () t__ref3)

(declare-fun rbp30 () t__ref3)

(declare-fun rdi37 () t__ref3)

(declare-fun zeroflag31 () Bool)

(declare-fun carryflag31 () Bool)

(declare-fun signflag31 () Bool)

(declare-fun overflowflag31 () Bool)

(declare-fun xmm031 () (_ BitVec 64))

(declare-fun rax31 () (_ BitVec 64))

(declare-fun rbx31 () (_ BitVec 64))

(declare-fun rsp56 () (_ BitVec 64))

(declare-fun rbp31 () (_ BitVec 64))

(declare-fun rdi38 () (_ BitVec 64))

(declare-fun rdi39 () (_ BitVec 64))

(declare-fun rbx32 () (_ BitVec 64))

(declare-fun result91 () t__ref3)

(declare-fun rbp32 () (_ BitVec 64))

(declare-fun result92 () t__ref3)

(declare-fun rsp57 () (_ BitVec 64))

(declare-fun rsp58 () (_ BitVec 64))

(declare-fun result93 () t__ref3)

(declare-fun xmm24 () (_ BitVec 64))

(declare-fun result94 () t__ref3)

(declare-fun rsi5 () (_ BitVec 64))

(declare-fun result95 () t__ref3)

(declare-fun rdi40 () (_ BitVec 64))

(declare-fun result96 () t__ref3)

(declare-fun xmm34 () (_ BitVec 64))

(declare-fun result97 () t__ref3)

(declare-fun xmm14 () (_ BitVec 64))

(declare-fun result98 () t__ref3)

(declare-fun xmm032 () (_ BitVec 64))

(declare-fun result99 () t__ref3)

(declare-fun rsp59 () (_ BitVec 64))

(declare-fun rsp60 () (_ BitVec 64))

(declare-fun rax32 () (_ BitVec 64))

(declare-fun rdi41 () (_ BitVec 64))

(declare-fun result100 () t__ref3)

(declare-fun rsp61 () (_ BitVec 64))

(declare-fun rsp62 () (_ BitVec 64))

(declare-fun rdx1 () (_ BitVec 64))

(declare-fun result101 () bool__ref)

(declare-fun zeroflag32 () Bool)

(declare-fun result102 () bool__ref)

(declare-fun signflag32 () Bool)

(declare-fun result103 () bool__ref)

(declare-fun carryflag32 () Bool)

(declare-fun result104 () bool__ref)

(declare-fun overflowflag32 () Bool)

(declare-fun zeroflag33 () Bool)

(declare-fun carryflag33 () Bool)

(declare-fun signflag33 () Bool)

(declare-fun overflowflag33 () Bool)

(declare-fun xmm033 () (_ BitVec 64))

(declare-fun rax33 () (_ BitVec 64))

(declare-fun rbx33 () (_ BitVec 64))

(declare-fun rsp63 () (_ BitVec 64))

(declare-fun rbp33 () (_ BitVec 64))

(declare-fun rdi42 () (_ BitVec 64))

(declare-fun result105 () t__ref3)

(declare-fun xmm034 () (_ BitVec 64))

(declare-fun rdi43 () (_ BitVec 64))

(declare-fun rax34 () (_ BitVec 64))

(declare-fun rbx34 () (_ BitVec 64))

(declare-fun result106 () t__ref3)

(declare-fun rbp34 () (_ BitVec 64))

(declare-fun result107 () t__ref3)

(declare-fun rsp64 () (_ BitVec 64))

(declare-fun rsp65 () (_ BitVec 64))

(declare-fun result108 () bool__ref)

(declare-fun zeroflag34 () Bool)

(declare-fun result109 () bool__ref)

(declare-fun signflag34 () Bool)

(declare-fun result110 () bool__ref)

(declare-fun carryflag34 () Bool)

(declare-fun result111 () Bool)

(declare-fun result112 () Bool)

(declare-fun result113 () bool__ref)

(declare-fun overflowflag34 () Bool)

(declare-fun zeroflag35 () bool__ref)

(declare-fun carryflag35 () bool__ref)

(declare-fun signflag35 () bool__ref)

(declare-fun overflowflag35 () bool__ref)

(declare-fun xmm035 () t__ref3)

(declare-fun rax35 () t__ref3)

(declare-fun rbx35 () t__ref3)

(declare-fun rsp66 () t__ref3)

(declare-fun rbp35 () t__ref3)

(declare-fun rdi44 () t__ref3)

(declare-fun zeroflag36 () Bool)

(declare-fun carryflag36 () Bool)

(declare-fun signflag36 () Bool)

(declare-fun overflowflag36 () Bool)

(declare-fun xmm036 () (_ BitVec 64))

(declare-fun rax36 () (_ BitVec 64))

(declare-fun rbx36 () (_ BitVec 64))

(declare-fun rsp67 () (_ BitVec 64))

(declare-fun rbp36 () (_ BitVec 64))

(declare-fun rdi45 () (_ BitVec 64))

(declare-fun zeroflag37 () bool__ref)

(declare-fun carryflag37 () bool__ref)

(declare-fun signflag37 () bool__ref)

(declare-fun overflowflag37 () bool__ref)

(declare-fun xmm037 () t__ref3)

(declare-fun rax37 () t__ref3)

(declare-fun rbx37 () t__ref3)

(declare-fun rsp68 () t__ref3)

(declare-fun rbp37 () t__ref3)

(declare-fun rdi46 () t__ref3)

(declare-fun zeroflag38 () Bool)

(declare-fun carryflag38 () Bool)

(declare-fun signflag38 () Bool)

(declare-fun overflowflag38 () Bool)

(declare-fun xmm038 () (_ BitVec 64))

(declare-fun rax38 () (_ BitVec 64))

(declare-fun rbx38 () (_ BitVec 64))

(declare-fun rsp69 () (_ BitVec 64))

(declare-fun rbp38 () (_ BitVec 64))

(declare-fun rdi47 () (_ BitVec 64))

(declare-fun zeroflag39 () bool__ref)

(declare-fun carryflag39 () bool__ref)

(declare-fun signflag39 () bool__ref)

(declare-fun overflowflag39 () bool__ref)

(declare-fun xmm039 () t__ref3)

(declare-fun rax39 () t__ref3)

(declare-fun rbx39 () t__ref3)

(declare-fun rsp70 () t__ref3)

(declare-fun rbp39 () t__ref3)

(declare-fun rdi48 () t__ref3)

(declare-fun zeroflag40 () Bool)

(declare-fun carryflag40 () Bool)

(declare-fun signflag40 () Bool)

(declare-fun overflowflag40 () Bool)

(declare-fun xmm040 () (_ BitVec 64))

(declare-fun rax40 () (_ BitVec 64))

(declare-fun rbx40 () (_ BitVec 64))

(declare-fun rsp71 () (_ BitVec 64))

(declare-fun rbp40 () (_ BitVec 64))

(declare-fun rdi49 () (_ BitVec 64))

(declare-fun zeroflag41 () bool__ref)

(declare-fun carryflag41 () bool__ref)

(declare-fun signflag41 () bool__ref)

(declare-fun overflowflag41 () bool__ref)

(declare-fun xmm041 () t__ref3)

(declare-fun rax41 () t__ref3)

(declare-fun rbx41 () t__ref3)

(declare-fun rsp72 () t__ref3)

(declare-fun rbp41 () t__ref3)

(declare-fun rdi50 () t__ref3)

(declare-fun zeroflag42 () Bool)

(declare-fun carryflag42 () Bool)

(declare-fun signflag42 () Bool)

(declare-fun overflowflag42 () Bool)

(declare-fun xmm042 () (_ BitVec 64))

(declare-fun rax42 () (_ BitVec 64))

(declare-fun rbx42 () (_ BitVec 64))

(declare-fun rsp73 () (_ BitVec 64))

(declare-fun rbp42 () (_ BitVec 64))

(declare-fun rdi51 () (_ BitVec 64))

(declare-fun rdi52 () (_ BitVec 64))

(declare-fun result114 () t__ref3)

(declare-fun r151 () (_ BitVec 64))

(declare-fun result115 () t__ref3)

(declare-fun rsp74 () (_ BitVec 64))

(declare-fun rsp75 () (_ BitVec 64))

(declare-fun result116 () t__ref3)

(declare-fun xmm61 () (_ BitVec 64))

(declare-fun memory7 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag43 () Bool)

(declare-fun carryflag43 () Bool)

(declare-fun signflag43 () Bool)

(declare-fun overflowflag43 () Bool)

(declare-fun xmm043 () (_ BitVec 64))

(declare-fun xmm15 () (_ BitVec 64))

(declare-fun xmm25 () (_ BitVec 64))

(declare-fun xmm35 () (_ BitVec 64))

(declare-fun xmm41 () (_ BitVec 64))

(declare-fun xmm51 () (_ BitVec 64))

(declare-fun xmm62 () (_ BitVec 64))

(declare-fun xmm71 () (_ BitVec 64))

(declare-fun rax43 () (_ BitVec 64))

(declare-fun rbx43 () (_ BitVec 64))

(declare-fun rsp76 () (_ BitVec 64))

(declare-fun rbp43 () (_ BitVec 64))

(declare-fun rsi6 () (_ BitVec 64))

(declare-fun rdi53 () (_ BitVec 64))

(declare-fun r121 () (_ BitVec 64))

(declare-fun r131 () (_ BitVec 64))

(declare-fun r141 () (_ BitVec 64))

(declare-fun r152 () (_ BitVec 64))

(declare-fun memory8 () (Array (_ BitVec 64) unsigned8))

(declare-fun result117 () t__ref3)

(declare-fun xmm72 () (_ BitVec 64))

(declare-fun result118 () t__ref3)

(declare-fun r142 () (_ BitVec 64))

(declare-fun memory9 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag44 () Bool)

(declare-fun carryflag44 () Bool)

(declare-fun signflag44 () Bool)

(declare-fun overflowflag44 () Bool)

(declare-fun xmm044 () (_ BitVec 64))

(declare-fun xmm16 () (_ BitVec 64))

(declare-fun xmm26 () (_ BitVec 64))

(declare-fun xmm36 () (_ BitVec 64))

(declare-fun xmm42 () (_ BitVec 64))

(declare-fun xmm52 () (_ BitVec 64))

(declare-fun xmm63 () (_ BitVec 64))

(declare-fun xmm73 () (_ BitVec 64))

(declare-fun rax44 () (_ BitVec 64))

(declare-fun rbx44 () (_ BitVec 64))

(declare-fun rsp77 () (_ BitVec 64))

(declare-fun rbp44 () (_ BitVec 64))

(declare-fun rsi7 () (_ BitVec 64))

(declare-fun rdi54 () (_ BitVec 64))

(declare-fun r122 () (_ BitVec 64))

(declare-fun r132 () (_ BitVec 64))

(declare-fun r143 () (_ BitVec 64))

(declare-fun memory10 () (Array (_ BitVec 64) unsigned8))

(declare-fun result119 () t__ref3)

(declare-fun xmm74 () (_ BitVec 64))

(declare-fun result120 () t__ref3)

(declare-fun r133 () (_ BitVec 64))

(declare-fun memory11 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag45 () Bool)

(declare-fun carryflag45 () Bool)

(declare-fun signflag45 () Bool)

(declare-fun overflowflag45 () Bool)

(declare-fun xmm045 () (_ BitVec 64))

(declare-fun xmm17 () (_ BitVec 64))

(declare-fun xmm27 () (_ BitVec 64))

(declare-fun xmm37 () (_ BitVec 64))

(declare-fun xmm43 () (_ BitVec 64))

(declare-fun xmm53 () (_ BitVec 64))

(declare-fun xmm75 () (_ BitVec 64))

(declare-fun rax45 () (_ BitVec 64))

(declare-fun rbx45 () (_ BitVec 64))

(declare-fun rsp78 () (_ BitVec 64))

(declare-fun rbp45 () (_ BitVec 64))

(declare-fun rsi8 () (_ BitVec 64))

(declare-fun rdi55 () (_ BitVec 64))

(declare-fun r123 () (_ BitVec 64))

(declare-fun r134 () (_ BitVec 64))

(declare-fun memory12 () (Array (_ BitVec 64) unsigned8))

(declare-fun result121 () t__ref3)

(declare-fun xmm76 () (_ BitVec 64))

(declare-fun result122 () t__ref3)

(declare-fun r124 () (_ BitVec 64))

(declare-fun memory13 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag46 () Bool)

(declare-fun carryflag46 () Bool)

(declare-fun signflag46 () Bool)

(declare-fun overflowflag46 () Bool)

(declare-fun xmm046 () (_ BitVec 64))

(declare-fun xmm18 () (_ BitVec 64))

(declare-fun xmm28 () (_ BitVec 64))

(declare-fun xmm38 () (_ BitVec 64))

(declare-fun xmm44 () (_ BitVec 64))

(declare-fun rax46 () (_ BitVec 64))

(declare-fun rbx46 () (_ BitVec 64))

(declare-fun rsp79 () (_ BitVec 64))

(declare-fun rbp46 () (_ BitVec 64))

(declare-fun rsi9 () (_ BitVec 64))

(declare-fun rdi56 () (_ BitVec 64))

(declare-fun r125 () (_ BitVec 64))

(declare-fun memory14 () (Array (_ BitVec 64) unsigned8))

(declare-fun result123 () t__ref3)

(declare-fun rsi10 () (_ BitVec 64))

(declare-fun result124 () t__ref3)

(declare-fun rdi57 () (_ BitVec 64))

(declare-fun rbx47 () (_ BitVec 64))

(declare-fun result125 () t__ref3)

(declare-fun xmm39 () (_ BitVec 64))

(declare-fun result126 () t__ref3)

(declare-fun rbp47 () (_ BitVec 64))

(declare-fun result127 () t__ref3)

(declare-fun xmm29 () (_ BitVec 64))

(declare-fun result128 () t__ref3)

(declare-fun xmm19 () (_ BitVec 64))

(declare-fun result129 () t__ref3)

(declare-fun xmm047 () (_ BitVec 64))

(declare-fun result130 () t__ref3)

(declare-fun rsp80 () (_ BitVec 64))

(declare-fun rsp81 () (_ BitVec 64))

(declare-fun rax47 () (_ BitVec 64))

(declare-fun rdi58 () (_ BitVec 64))

(declare-fun result131 () t__ref3)

(declare-fun rsp82 () (_ BitVec 64))

(declare-fun rsp83 () (_ BitVec 64))

(declare-fun rax48 () (_ BitVec 64))

(declare-fun result132 () bool__ref)

(declare-fun zeroflag47 () Bool)

(declare-fun result133 () bool__ref)

(declare-fun signflag47 () Bool)

(declare-fun result134 () bool__ref)

(declare-fun carryflag47 () Bool)

(declare-fun result135 () bool__ref)

(declare-fun overflowflag47 () Bool)

(declare-fun zeroflag48 () Bool)

(declare-fun carryflag48 () Bool)

(declare-fun signflag48 () Bool)

(declare-fun overflowflag48 () Bool)

(declare-fun xmm048 () (_ BitVec 64))

(declare-fun rax49 () (_ BitVec 64))

(declare-fun rbx48 () (_ BitVec 64))

(declare-fun rsp84 () (_ BitVec 64))

(declare-fun rbp48 () (_ BitVec 64))

(declare-fun rdi59 () (_ BitVec 64))

(declare-fun result136 () t__ref3)

(declare-fun xmm049 () (_ BitVec 64))

(declare-fun rdi60 () (_ BitVec 64))

(declare-fun rax50 () (_ BitVec 64))

(declare-fun rbx49 () (_ BitVec 64))

(declare-fun result137 () t__ref3)

(declare-fun rbp49 () (_ BitVec 64))

(declare-fun result138 () t__ref3)

(declare-fun rsp85 () (_ BitVec 64))

(declare-fun rsp86 () (_ BitVec 64))

(declare-fun result139 () bool__ref)

(declare-fun zeroflag49 () Bool)

(declare-fun result140 () bool__ref)

(declare-fun signflag49 () Bool)

(declare-fun result141 () bool__ref)

(declare-fun carryflag49 () Bool)

(declare-fun result142 () Bool)

(declare-fun result143 () Bool)

(declare-fun result144 () bool__ref)

(declare-fun overflowflag49 () Bool)

(declare-fun zeroflag50 () bool__ref)

(declare-fun carryflag50 () bool__ref)

(declare-fun signflag50 () bool__ref)

(declare-fun overflowflag50 () bool__ref)

(declare-fun xmm050 () t__ref3)

(declare-fun rax51 () t__ref3)

(declare-fun rbx50 () t__ref3)

(declare-fun rsp87 () t__ref3)

(declare-fun rbp50 () t__ref3)

(declare-fun rdi61 () t__ref3)

(declare-fun zeroflag51 () Bool)

(declare-fun carryflag51 () Bool)

(declare-fun signflag51 () Bool)

(declare-fun overflowflag51 () Bool)

(declare-fun xmm051 () (_ BitVec 64))

(declare-fun rax52 () (_ BitVec 64))

(declare-fun rbx51 () (_ BitVec 64))

(declare-fun rsp88 () (_ BitVec 64))

(declare-fun rbp51 () (_ BitVec 64))

(declare-fun rdi62 () (_ BitVec 64))

(declare-fun zeroflag52 () bool__ref)

(declare-fun carryflag52 () bool__ref)

(declare-fun signflag52 () bool__ref)

(declare-fun overflowflag52 () bool__ref)

(declare-fun xmm052 () t__ref3)

(declare-fun rax53 () t__ref3)

(declare-fun rbx52 () t__ref3)

(declare-fun rsp89 () t__ref3)

(declare-fun rbp52 () t__ref3)

(declare-fun rdi63 () t__ref3)

(declare-fun zeroflag53 () Bool)

(declare-fun carryflag53 () Bool)

(declare-fun signflag53 () Bool)

(declare-fun overflowflag53 () Bool)

(declare-fun xmm053 () (_ BitVec 64))

(declare-fun rax54 () (_ BitVec 64))

(declare-fun rbx53 () (_ BitVec 64))

(declare-fun rsp90 () (_ BitVec 64))

(declare-fun rbp53 () (_ BitVec 64))

(declare-fun rdi64 () (_ BitVec 64))

(declare-fun zeroflag54 () bool__ref)

(declare-fun carryflag54 () bool__ref)

(declare-fun signflag54 () bool__ref)

(declare-fun overflowflag54 () bool__ref)

(declare-fun xmm054 () t__ref3)

(declare-fun rax55 () t__ref3)

(declare-fun rbx54 () t__ref3)

(declare-fun rsp91 () t__ref3)

(declare-fun rbp54 () t__ref3)

(declare-fun rdi65 () t__ref3)

(declare-fun zeroflag55 () Bool)

(declare-fun carryflag55 () Bool)

(declare-fun signflag55 () Bool)

(declare-fun overflowflag55 () Bool)

(declare-fun xmm055 () (_ BitVec 64))

(declare-fun rax56 () (_ BitVec 64))

(declare-fun rbx55 () (_ BitVec 64))

(declare-fun rsp92 () (_ BitVec 64))

(declare-fun rbp55 () (_ BitVec 64))

(declare-fun rdi66 () (_ BitVec 64))

(declare-fun zeroflag56 () bool__ref)

(declare-fun carryflag56 () bool__ref)

(declare-fun signflag56 () bool__ref)

(declare-fun overflowflag56 () bool__ref)

(declare-fun xmm056 () t__ref3)

(declare-fun rax57 () t__ref3)

(declare-fun rbx56 () t__ref3)

(declare-fun rsp93 () t__ref3)

(declare-fun rbp56 () t__ref3)

(declare-fun rdi67 () t__ref3)

(declare-fun zeroflag57 () Bool)

(declare-fun carryflag57 () Bool)

(declare-fun signflag57 () Bool)

(declare-fun overflowflag57 () Bool)

(declare-fun xmm057 () (_ BitVec 64))

(declare-fun rax58 () (_ BitVec 64))

(declare-fun rbx57 () (_ BitVec 64))

(declare-fun rsp94 () (_ BitVec 64))

(declare-fun rbp57 () (_ BitVec 64))

(declare-fun rdi68 () (_ BitVec 64))

(declare-fun rdi69 () (_ BitVec 64))

(declare-fun result145 () t__ref3)

(declare-fun rsp95 () (_ BitVec 64))

(declare-fun rsp96 () (_ BitVec 64))

(declare-fun result146 () t__ref3)

(declare-fun xmm45 () (_ BitVec 64))

(declare-fun result147 () t__ref3)

(declare-fun r126 () (_ BitVec 64))

(declare-fun result148 () bool__ref)

(declare-fun zeroflag58 () Bool)

(declare-fun result149 () t__ref3)

(declare-fun xmm46 () (_ BitVec 64))

(declare-fun memory15 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag59 () bool__ref)

(declare-fun carryflag58 () bool__ref)

(declare-fun signflag58 () bool__ref)

(declare-fun overflowflag58 () bool__ref)

(declare-fun xmm058 () t__ref3)

(declare-fun xmm110 () t__ref3)

(declare-fun xmm210 () t__ref3)

(declare-fun xmm310 () t__ref3)

(declare-fun xmm47 () t__ref3)

(declare-fun rax59 () t__ref3)

(declare-fun rbx58 () t__ref3)

(declare-fun rsp97 () t__ref3)

(declare-fun rbp58 () t__ref3)

(declare-fun rsi11 () t__ref3)

(declare-fun rdi70 () t__ref3)

(declare-fun r127 () t__ref3)

(declare-fun memory16 () map__ref)

(declare-fun zeroflag60 () Bool)

(declare-fun carryflag59 () Bool)

(declare-fun signflag59 () Bool)

(declare-fun overflowflag59 () Bool)

(declare-fun xmm059 () (_ BitVec 64))

(declare-fun xmm111 () (_ BitVec 64))

(declare-fun xmm211 () (_ BitVec 64))

(declare-fun xmm311 () (_ BitVec 64))

(declare-fun xmm48 () (_ BitVec 64))

(declare-fun rax60 () (_ BitVec 64))

(declare-fun rbx59 () (_ BitVec 64))

(declare-fun rsp98 () (_ BitVec 64))

(declare-fun rbp59 () (_ BitVec 64))

(declare-fun rsi12 () (_ BitVec 64))

(declare-fun rdi71 () (_ BitVec 64))

(declare-fun r128 () (_ BitVec 64))

(declare-fun memory17 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag61 () bool__ref)

(declare-fun carryflag60 () bool__ref)

(declare-fun signflag60 () bool__ref)

(declare-fun overflowflag60 () bool__ref)

(declare-fun xmm060 () t__ref3)

(declare-fun xmm112 () t__ref3)

(declare-fun xmm212 () t__ref3)

(declare-fun xmm312 () t__ref3)

(declare-fun xmm49 () t__ref3)

(declare-fun rax61 () t__ref3)

(declare-fun rbx60 () t__ref3)

(declare-fun rsp99 () t__ref3)

(declare-fun rbp60 () t__ref3)

(declare-fun rsi13 () t__ref3)

(declare-fun rdi72 () t__ref3)

(declare-fun r129 () t__ref3)

(declare-fun memory18 () map__ref)

(declare-fun zeroflag62 () Bool)

(declare-fun carryflag61 () Bool)

(declare-fun signflag61 () Bool)

(declare-fun overflowflag61 () Bool)

(declare-fun xmm061 () (_ BitVec 64))

(declare-fun xmm113 () (_ BitVec 64))

(declare-fun xmm213 () (_ BitVec 64))

(declare-fun xmm313 () (_ BitVec 64))

(declare-fun xmm410 () (_ BitVec 64))

(declare-fun rax62 () (_ BitVec 64))

(declare-fun rbx61 () (_ BitVec 64))

(declare-fun rsp100 () (_ BitVec 64))

(declare-fun rbp61 () (_ BitVec 64))

(declare-fun rsi14 () (_ BitVec 64))

(declare-fun rdi73 () (_ BitVec 64))

(declare-fun r1210 () (_ BitVec 64))

(declare-fun memory19 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag63 () bool__ref)

(declare-fun carryflag62 () bool__ref)

(declare-fun signflag62 () bool__ref)

(declare-fun overflowflag62 () bool__ref)

(declare-fun xmm062 () t__ref3)

(declare-fun xmm114 () t__ref3)

(declare-fun xmm214 () t__ref3)

(declare-fun xmm314 () t__ref3)

(declare-fun xmm411 () t__ref3)

(declare-fun rax63 () t__ref3)

(declare-fun rbx62 () t__ref3)

(declare-fun rsp101 () t__ref3)

(declare-fun rbp62 () t__ref3)

(declare-fun rsi15 () t__ref3)

(declare-fun rdi74 () t__ref3)

(declare-fun r1211 () t__ref3)

(declare-fun memory20 () map__ref)

(declare-fun zeroflag64 () Bool)

(declare-fun carryflag63 () Bool)

(declare-fun signflag63 () Bool)

(declare-fun overflowflag63 () Bool)

(declare-fun xmm063 () (_ BitVec 64))

(declare-fun xmm115 () (_ BitVec 64))

(declare-fun xmm215 () (_ BitVec 64))

(declare-fun xmm315 () (_ BitVec 64))

(declare-fun xmm412 () (_ BitVec 64))

(declare-fun rax64 () (_ BitVec 64))

(declare-fun rbx63 () (_ BitVec 64))

(declare-fun rsp102 () (_ BitVec 64))

(declare-fun rbp63 () (_ BitVec 64))

(declare-fun rsi16 () (_ BitVec 64))

(declare-fun rdi75 () (_ BitVec 64))

(declare-fun r1212 () (_ BitVec 64))

(declare-fun memory21 () (Array (_ BitVec 64) unsigned8))

(declare-fun result150 () t__ref3)

(declare-fun xmm54 () (_ BitVec 64))

(declare-fun result151 () t__ref3)

(declare-fun r135 () (_ BitVec 64))

(declare-fun result152 () bool__ref)

(declare-fun zeroflag65 () Bool)

(declare-fun result153 () t__ref3)

(declare-fun xmm55 () (_ BitVec 64))

(declare-fun memory22 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag66 () bool__ref)

(declare-fun carryflag64 () bool__ref)

(declare-fun signflag64 () bool__ref)

(declare-fun overflowflag64 () bool__ref)

(declare-fun xmm064 () t__ref3)

(declare-fun xmm116 () t__ref3)

(declare-fun xmm216 () t__ref3)

(declare-fun xmm316 () t__ref3)

(declare-fun xmm413 () t__ref3)

(declare-fun xmm56 () t__ref3)

(declare-fun xmm77 () t__ref3)

(declare-fun rax65 () t__ref3)

(declare-fun rbx64 () t__ref3)

(declare-fun rsp103 () t__ref3)

(declare-fun rbp64 () t__ref3)

(declare-fun rsi17 () t__ref3)

(declare-fun rdi76 () t__ref3)

(declare-fun r1213 () t__ref3)

(declare-fun r136 () t__ref3)

(declare-fun memory23 () map__ref)

(declare-fun zeroflag67 () Bool)

(declare-fun carryflag65 () Bool)

(declare-fun signflag65 () Bool)

(declare-fun overflowflag65 () Bool)

(declare-fun xmm065 () (_ BitVec 64))

(declare-fun xmm117 () (_ BitVec 64))

(declare-fun xmm217 () (_ BitVec 64))

(declare-fun xmm317 () (_ BitVec 64))

(declare-fun xmm414 () (_ BitVec 64))

(declare-fun xmm57 () (_ BitVec 64))

(declare-fun xmm78 () (_ BitVec 64))

(declare-fun rax66 () (_ BitVec 64))

(declare-fun rbx65 () (_ BitVec 64))

(declare-fun rsp104 () (_ BitVec 64))

(declare-fun rbp65 () (_ BitVec 64))

(declare-fun rsi18 () (_ BitVec 64))

(declare-fun rdi77 () (_ BitVec 64))

(declare-fun r1214 () (_ BitVec 64))

(declare-fun r137 () (_ BitVec 64))

(declare-fun memory24 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag68 () bool__ref)

(declare-fun carryflag66 () bool__ref)

(declare-fun signflag66 () bool__ref)

(declare-fun overflowflag66 () bool__ref)

(declare-fun xmm066 () t__ref3)

(declare-fun xmm118 () t__ref3)

(declare-fun xmm218 () t__ref3)

(declare-fun xmm318 () t__ref3)

(declare-fun xmm415 () t__ref3)

(declare-fun xmm58 () t__ref3)

(declare-fun xmm79 () t__ref3)

(declare-fun rax67 () t__ref3)

(declare-fun rbx66 () t__ref3)

(declare-fun rsp105 () t__ref3)

(declare-fun rbp66 () t__ref3)

(declare-fun rsi19 () t__ref3)

(declare-fun rdi78 () t__ref3)

(declare-fun r1215 () t__ref3)

(declare-fun r138 () t__ref3)

(declare-fun memory25 () map__ref)

(declare-fun zeroflag69 () Bool)

(declare-fun carryflag67 () Bool)

(declare-fun signflag67 () Bool)

(declare-fun overflowflag67 () Bool)

(declare-fun xmm067 () (_ BitVec 64))

(declare-fun xmm119 () (_ BitVec 64))

(declare-fun xmm219 () (_ BitVec 64))

(declare-fun xmm319 () (_ BitVec 64))

(declare-fun xmm416 () (_ BitVec 64))

(declare-fun xmm59 () (_ BitVec 64))

(declare-fun xmm710 () (_ BitVec 64))

(declare-fun rax68 () (_ BitVec 64))

(declare-fun rbx67 () (_ BitVec 64))

(declare-fun rsp106 () (_ BitVec 64))

(declare-fun rbp67 () (_ BitVec 64))

(declare-fun rsi20 () (_ BitVec 64))

(declare-fun rdi79 () (_ BitVec 64))

(declare-fun r1216 () (_ BitVec 64))

(declare-fun r139 () (_ BitVec 64))

(declare-fun memory26 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag70 () bool__ref)

(declare-fun carryflag68 () bool__ref)

(declare-fun signflag68 () bool__ref)

(declare-fun overflowflag68 () bool__ref)

(declare-fun xmm068 () t__ref3)

(declare-fun xmm120 () t__ref3)

(declare-fun xmm220 () t__ref3)

(declare-fun xmm320 () t__ref3)

(declare-fun xmm417 () t__ref3)

(declare-fun xmm510 () t__ref3)

(declare-fun xmm711 () t__ref3)

(declare-fun rax69 () t__ref3)

(declare-fun rbx68 () t__ref3)

(declare-fun rsp107 () t__ref3)

(declare-fun rbp68 () t__ref3)

(declare-fun rsi21 () t__ref3)

(declare-fun rdi80 () t__ref3)

(declare-fun r1217 () t__ref3)

(declare-fun r1310 () t__ref3)

(declare-fun memory27 () map__ref)

(declare-fun zeroflag71 () Bool)

(declare-fun carryflag69 () Bool)

(declare-fun signflag69 () Bool)

(declare-fun overflowflag69 () Bool)

(declare-fun xmm069 () (_ BitVec 64))

(declare-fun xmm121 () (_ BitVec 64))

(declare-fun xmm221 () (_ BitVec 64))

(declare-fun xmm321 () (_ BitVec 64))

(declare-fun xmm418 () (_ BitVec 64))

(declare-fun xmm511 () (_ BitVec 64))

(declare-fun xmm712 () (_ BitVec 64))

(declare-fun rax70 () (_ BitVec 64))

(declare-fun rbx69 () (_ BitVec 64))

(declare-fun rsp108 () (_ BitVec 64))

(declare-fun rbp69 () (_ BitVec 64))

(declare-fun rsi22 () (_ BitVec 64))

(declare-fun rdi81 () (_ BitVec 64))

(declare-fun r1218 () (_ BitVec 64))

(declare-fun r1311 () (_ BitVec 64))

(declare-fun memory28 () (Array (_ BitVec 64) unsigned8))

(declare-fun result154 () t__ref3)

(declare-fun xmm64 () (_ BitVec 64))

(declare-fun result155 () t__ref3)

(declare-fun r144 () (_ BitVec 64))

(declare-fun result156 () bool__ref)

(declare-fun zeroflag72 () Bool)

(declare-fun result157 () t__ref3)

(declare-fun xmm65 () (_ BitVec 64))

(declare-fun memory29 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag73 () bool__ref)

(declare-fun carryflag70 () bool__ref)

(declare-fun signflag70 () bool__ref)

(declare-fun overflowflag70 () bool__ref)

(declare-fun xmm070 () t__ref3)

(declare-fun xmm122 () t__ref3)

(declare-fun xmm222 () t__ref3)

(declare-fun xmm322 () t__ref3)

(declare-fun xmm419 () t__ref3)

(declare-fun xmm512 () t__ref3)

(declare-fun xmm66 () t__ref3)

(declare-fun xmm713 () t__ref3)

(declare-fun rax71 () t__ref3)

(declare-fun rbx70 () t__ref3)

(declare-fun rsp109 () t__ref3)

(declare-fun rbp70 () t__ref3)

(declare-fun rsi23 () t__ref3)

(declare-fun rdi82 () t__ref3)

(declare-fun r1219 () t__ref3)

(declare-fun r1312 () t__ref3)

(declare-fun r145 () t__ref3)

(declare-fun memory30 () map__ref)

(declare-fun zeroflag74 () Bool)

(declare-fun carryflag71 () Bool)

(declare-fun signflag71 () Bool)

(declare-fun overflowflag71 () Bool)

(declare-fun xmm071 () (_ BitVec 64))

(declare-fun xmm123 () (_ BitVec 64))

(declare-fun xmm223 () (_ BitVec 64))

(declare-fun xmm323 () (_ BitVec 64))

(declare-fun xmm420 () (_ BitVec 64))

(declare-fun xmm513 () (_ BitVec 64))

(declare-fun xmm67 () (_ BitVec 64))

(declare-fun xmm714 () (_ BitVec 64))

(declare-fun rax72 () (_ BitVec 64))

(declare-fun rbx71 () (_ BitVec 64))

(declare-fun rsp110 () (_ BitVec 64))

(declare-fun rbp71 () (_ BitVec 64))

(declare-fun rsi24 () (_ BitVec 64))

(declare-fun rdi83 () (_ BitVec 64))

(declare-fun r1220 () (_ BitVec 64))

(declare-fun r1313 () (_ BitVec 64))

(declare-fun r146 () (_ BitVec 64))

(declare-fun memory31 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag75 () bool__ref)

(declare-fun carryflag72 () bool__ref)

(declare-fun signflag72 () bool__ref)

(declare-fun overflowflag72 () bool__ref)

(declare-fun xmm072 () t__ref3)

(declare-fun xmm124 () t__ref3)

(declare-fun xmm224 () t__ref3)

(declare-fun xmm324 () t__ref3)

(declare-fun xmm421 () t__ref3)

(declare-fun xmm514 () t__ref3)

(declare-fun xmm68 () t__ref3)

(declare-fun xmm715 () t__ref3)

(declare-fun rax73 () t__ref3)

(declare-fun rbx72 () t__ref3)

(declare-fun rsp111 () t__ref3)

(declare-fun rbp72 () t__ref3)

(declare-fun rsi25 () t__ref3)

(declare-fun rdi84 () t__ref3)

(declare-fun r1221 () t__ref3)

(declare-fun r1314 () t__ref3)

(declare-fun r147 () t__ref3)

(declare-fun memory32 () map__ref)

(declare-fun zeroflag76 () Bool)

(declare-fun carryflag73 () Bool)

(declare-fun signflag73 () Bool)

(declare-fun overflowflag73 () Bool)

(declare-fun xmm073 () (_ BitVec 64))

(declare-fun xmm125 () (_ BitVec 64))

(declare-fun xmm225 () (_ BitVec 64))

(declare-fun xmm325 () (_ BitVec 64))

(declare-fun xmm422 () (_ BitVec 64))

(declare-fun xmm515 () (_ BitVec 64))

(declare-fun xmm69 () (_ BitVec 64))

(declare-fun xmm716 () (_ BitVec 64))

(declare-fun rax74 () (_ BitVec 64))

(declare-fun rbx73 () (_ BitVec 64))

(declare-fun rsp112 () (_ BitVec 64))

(declare-fun rbp73 () (_ BitVec 64))

(declare-fun rsi26 () (_ BitVec 64))

(declare-fun rdi85 () (_ BitVec 64))

(declare-fun r1222 () (_ BitVec 64))

(declare-fun r1315 () (_ BitVec 64))

(declare-fun r148 () (_ BitVec 64))

(declare-fun memory33 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag77 () bool__ref)

(declare-fun carryflag74 () bool__ref)

(declare-fun signflag74 () bool__ref)

(declare-fun overflowflag74 () bool__ref)

(declare-fun xmm074 () t__ref3)

(declare-fun xmm126 () t__ref3)

(declare-fun xmm226 () t__ref3)

(declare-fun xmm326 () t__ref3)

(declare-fun xmm423 () t__ref3)

(declare-fun xmm516 () t__ref3)

(declare-fun xmm610 () t__ref3)

(declare-fun xmm717 () t__ref3)

(declare-fun rax75 () t__ref3)

(declare-fun rbx74 () t__ref3)

(declare-fun rsp113 () t__ref3)

(declare-fun rbp74 () t__ref3)

(declare-fun rsi27 () t__ref3)

(declare-fun rdi86 () t__ref3)

(declare-fun r1223 () t__ref3)

(declare-fun r1316 () t__ref3)

(declare-fun r149 () t__ref3)

(declare-fun memory34 () map__ref)

(declare-fun zeroflag78 () Bool)

(declare-fun carryflag75 () Bool)

(declare-fun signflag75 () Bool)

(declare-fun overflowflag75 () Bool)

(declare-fun xmm075 () (_ BitVec 64))

(declare-fun xmm127 () (_ BitVec 64))

(declare-fun xmm227 () (_ BitVec 64))

(declare-fun xmm327 () (_ BitVec 64))

(declare-fun xmm424 () (_ BitVec 64))

(declare-fun xmm517 () (_ BitVec 64))

(declare-fun xmm611 () (_ BitVec 64))

(declare-fun xmm718 () (_ BitVec 64))

(declare-fun rax76 () (_ BitVec 64))

(declare-fun rbx75 () (_ BitVec 64))

(declare-fun rsp114 () (_ BitVec 64))

(declare-fun rbp75 () (_ BitVec 64))

(declare-fun rsi28 () (_ BitVec 64))

(declare-fun rdi87 () (_ BitVec 64))

(declare-fun r1224 () (_ BitVec 64))

(declare-fun r1317 () (_ BitVec 64))

(declare-fun r1410 () (_ BitVec 64))

(declare-fun memory35 () (Array (_ BitVec 64) unsigned8))

(declare-fun result158 () t__ref3)

(declare-fun xmm719 () (_ BitVec 64))

(declare-fun result159 () t__ref3)

(declare-fun r153 () (_ BitVec 64))

(declare-fun result160 () bool__ref)

(declare-fun zeroflag79 () Bool)

(declare-fun result161 () t__ref3)

(declare-fun xmm720 () (_ BitVec 64))

(declare-fun memory36 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag80 () bool__ref)

(declare-fun carryflag76 () bool__ref)

(declare-fun signflag76 () bool__ref)

(declare-fun overflowflag76 () bool__ref)

(declare-fun xmm076 () t__ref3)

(declare-fun xmm128 () t__ref3)

(declare-fun xmm228 () t__ref3)

(declare-fun xmm328 () t__ref3)

(declare-fun xmm425 () t__ref3)

(declare-fun xmm518 () t__ref3)

(declare-fun xmm612 () t__ref3)

(declare-fun xmm721 () t__ref3)

(declare-fun rax77 () t__ref3)

(declare-fun rbx76 () t__ref3)

(declare-fun rsp115 () t__ref3)

(declare-fun rbp76 () t__ref3)

(declare-fun rsi29 () t__ref3)

(declare-fun rdi88 () t__ref3)

(declare-fun r1225 () t__ref3)

(declare-fun r1318 () t__ref3)

(declare-fun r1411 () t__ref3)

(declare-fun r154 () t__ref3)

(declare-fun memory37 () map__ref)

(declare-fun zeroflag81 () Bool)

(declare-fun carryflag77 () Bool)

(declare-fun signflag77 () Bool)

(declare-fun overflowflag77 () Bool)

(declare-fun xmm077 () (_ BitVec 64))

(declare-fun xmm129 () (_ BitVec 64))

(declare-fun xmm229 () (_ BitVec 64))

(declare-fun xmm329 () (_ BitVec 64))

(declare-fun xmm426 () (_ BitVec 64))

(declare-fun xmm519 () (_ BitVec 64))

(declare-fun xmm613 () (_ BitVec 64))

(declare-fun xmm722 () (_ BitVec 64))

(declare-fun rax78 () (_ BitVec 64))

(declare-fun rbx77 () (_ BitVec 64))

(declare-fun rsp116 () (_ BitVec 64))

(declare-fun rbp77 () (_ BitVec 64))

(declare-fun rsi30 () (_ BitVec 64))

(declare-fun rdi89 () (_ BitVec 64))

(declare-fun r1226 () (_ BitVec 64))

(declare-fun r1319 () (_ BitVec 64))

(declare-fun r1412 () (_ BitVec 64))

(declare-fun r155 () (_ BitVec 64))

(declare-fun memory38 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag82 () bool__ref)

(declare-fun carryflag78 () bool__ref)

(declare-fun signflag78 () bool__ref)

(declare-fun overflowflag78 () bool__ref)

(declare-fun xmm078 () t__ref3)

(declare-fun xmm130 () t__ref3)

(declare-fun xmm230 () t__ref3)

(declare-fun xmm330 () t__ref3)

(declare-fun xmm427 () t__ref3)

(declare-fun xmm520 () t__ref3)

(declare-fun xmm614 () t__ref3)

(declare-fun xmm723 () t__ref3)

(declare-fun rax79 () t__ref3)

(declare-fun rbx78 () t__ref3)

(declare-fun rsp117 () t__ref3)

(declare-fun rbp78 () t__ref3)

(declare-fun rsi31 () t__ref3)

(declare-fun rdi90 () t__ref3)

(declare-fun r1227 () t__ref3)

(declare-fun r1320 () t__ref3)

(declare-fun r1413 () t__ref3)

(declare-fun r156 () t__ref3)

(declare-fun memory39 () map__ref)

(declare-fun zeroflag83 () Bool)

(declare-fun carryflag79 () Bool)

(declare-fun signflag79 () Bool)

(declare-fun overflowflag79 () Bool)

(declare-fun xmm079 () (_ BitVec 64))

(declare-fun xmm131 () (_ BitVec 64))

(declare-fun xmm231 () (_ BitVec 64))

(declare-fun xmm331 () (_ BitVec 64))

(declare-fun xmm428 () (_ BitVec 64))

(declare-fun xmm521 () (_ BitVec 64))

(declare-fun xmm615 () (_ BitVec 64))

(declare-fun xmm724 () (_ BitVec 64))

(declare-fun rax80 () (_ BitVec 64))

(declare-fun rbx79 () (_ BitVec 64))

(declare-fun rsp118 () (_ BitVec 64))

(declare-fun rbp79 () (_ BitVec 64))

(declare-fun rsi32 () (_ BitVec 64))

(declare-fun rdi91 () (_ BitVec 64))

(declare-fun r1228 () (_ BitVec 64))

(declare-fun r1321 () (_ BitVec 64))

(declare-fun r1414 () (_ BitVec 64))

(declare-fun r157 () (_ BitVec 64))

(declare-fun memory40 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag84 () bool__ref)

(declare-fun carryflag80 () bool__ref)

(declare-fun signflag80 () bool__ref)

(declare-fun overflowflag80 () bool__ref)

(declare-fun xmm080 () t__ref3)

(declare-fun xmm132 () t__ref3)

(declare-fun xmm232 () t__ref3)

(declare-fun xmm332 () t__ref3)

(declare-fun xmm429 () t__ref3)

(declare-fun xmm522 () t__ref3)

(declare-fun xmm616 () t__ref3)

(declare-fun xmm725 () t__ref3)

(declare-fun rax81 () t__ref3)

(declare-fun rbx80 () t__ref3)

(declare-fun rsp119 () t__ref3)

(declare-fun rbp80 () t__ref3)

(declare-fun rsi33 () t__ref3)

(declare-fun rdi92 () t__ref3)

(declare-fun r1229 () t__ref3)

(declare-fun r1322 () t__ref3)

(declare-fun r1415 () t__ref3)

(declare-fun r158 () t__ref3)

(declare-fun memory41 () map__ref)

(declare-fun zeroflag85 () Bool)

(declare-fun carryflag81 () Bool)

(declare-fun signflag81 () Bool)

(declare-fun overflowflag81 () Bool)

(declare-fun xmm081 () (_ BitVec 64))

(declare-fun xmm133 () (_ BitVec 64))

(declare-fun xmm233 () (_ BitVec 64))

(declare-fun xmm333 () (_ BitVec 64))

(declare-fun xmm430 () (_ BitVec 64))

(declare-fun xmm523 () (_ BitVec 64))

(declare-fun xmm617 () (_ BitVec 64))

(declare-fun xmm726 () (_ BitVec 64))

(declare-fun rax82 () (_ BitVec 64))

(declare-fun rbx81 () (_ BitVec 64))

(declare-fun rsp120 () (_ BitVec 64))

(declare-fun rbp81 () (_ BitVec 64))

(declare-fun rsi34 () (_ BitVec 64))

(declare-fun rdi93 () (_ BitVec 64))

(declare-fun r1230 () (_ BitVec 64))

(declare-fun r1323 () (_ BitVec 64))

(declare-fun r1416 () (_ BitVec 64))

(declare-fun r159 () (_ BitVec 64))

(declare-fun memory42 () (Array (_ BitVec 64) unsigned8))

(declare-fun rdi94 () (_ BitVec 64))

(declare-fun rbx82 () (_ BitVec 64))

(declare-fun rax83 () (_ BitVec 64))

(declare-fun rcx2 () (_ BitVec 64))

(declare-fun rdx2 () (_ BitVec 64))

(declare-fun rbx83 () (_ BitVec 64))

(declare-fun rsp121 () (_ BitVec 64))

(declare-fun rbp82 () (_ BitVec 64))

(declare-fun rsi35 () (_ BitVec 64))

(declare-fun rdi95 () (_ BitVec 64))

(declare-fun r81 () (_ BitVec 64))

(declare-fun memory43 () (Array (_ BitVec 64) unsigned8))

(declare-fun result162 () t__ref3)

(declare-fun rsi36 () (_ BitVec 64))

(declare-fun rdi96 () (_ BitVec 64))

(declare-fun rbx84 () (_ BitVec 64))

(declare-fun result163 () t__ref3)

(declare-fun rsp122 () (_ BitVec 64))

(declare-fun exit_called () Bool)

(declare-fun carryflag82 () Bool)

(declare-fun signflag82 () Bool)

(declare-fun overflowflag82 () Bool)

(declare-fun rax84 () (_ BitVec 64))

(declare-fun rcx3 () (_ BitVec 64))

(declare-fun rdx3 () (_ BitVec 64))

(declare-fun rsp123 () (_ BitVec 64))

(declare-fun rdi97 () (_ BitVec 64))

(declare-fun r82 () (_ BitVec 64))

(declare-fun memory44 () (Array (_ BitVec 64) unsigned8))

(declare-fun rdx4 () (_ BitVec 64))

(declare-fun rsi37 () (_ BitVec 64))

(declare-fun rdi98 () (_ BitVec 64))

(declare-fun rax85 () (_ BitVec 64))

(declare-fun result164 () t__ref3)

(declare-fun rsp124 () (_ BitVec 64))

(declare-fun rsp125 () (_ BitVec 64))

(declare-fun rdi99 () (_ BitVec 64))

(declare-fun result165 () t__ref3)

(declare-fun rsp126 () (_ BitVec 64))

(declare-fun rsp127 () (_ BitVec 64))

(declare-fun result166 () t__ref3)

(declare-fun xmm234 () (_ BitVec 64))

(declare-fun xmm082 () (_ BitVec 64))

(declare-fun xmm134 () (_ BitVec 64))

(declare-fun xmm235 () (_ BitVec 64))

(declare-fun rax86 () (_ BitVec 64))

(declare-fun rbx85 () (_ BitVec 64))

(declare-fun rsp128 () (_ BitVec 64))

(declare-fun rbp83 () (_ BitVec 64))

(declare-fun rdi100 () (_ BitVec 64))

(declare-fun memory45 () (Array (_ BitVec 64) unsigned8))

(declare-fun rdi101 () (_ BitVec 64))

(declare-fun rbx86 () (_ BitVec 64))

(declare-fun result167 () t__ref3)

(declare-fun rsp129 () (_ BitVec 64))

(declare-fun rsp130 () (_ BitVec 64))

(declare-fun result168 () t__ref3)

(declare-fun xmm236 () (_ BitVec 64))

(declare-fun zeroflag86 () Bool)

(declare-fun xmm083 () (_ BitVec 64))

(declare-fun xmm135 () (_ BitVec 64))

(declare-fun xmm237 () (_ BitVec 64))

(declare-fun rax87 () (_ BitVec 64))

(declare-fun rbx87 () (_ BitVec 64))

(declare-fun rsp131 () (_ BitVec 64))

(declare-fun rbp84 () (_ BitVec 64))

(declare-fun rdi102 () (_ BitVec 64))

(declare-fun memory46 () (Array (_ BitVec 64) unsigned8))

(declare-fun result169 () t__ref3)

(declare-fun rsp132 () (_ BitVec 64))

(declare-fun rax88 () (_ BitVec 64))

(declare-fun result170 () t__ref3)

(declare-fun rbx88 () (_ BitVec 64))

(declare-fun result171 () t__ref3)

(declare-fun rsp133 () (_ BitVec 64))

(declare-fun result172 () t__ref3)

(declare-fun rbp85 () (_ BitVec 64))

(declare-fun result173 () t__ref3)

(declare-fun rsp134 () (_ BitVec 64))

(declare-fun result174 () t__ref3)

(declare-fun r1231 () (_ BitVec 64))

(declare-fun result175 () t__ref3)

(declare-fun rsp135 () (_ BitVec 64))

(declare-fun result176 () t__ref3)

(declare-fun r1324 () (_ BitVec 64))

(declare-fun result177 () t__ref3)

(declare-fun rsp136 () (_ BitVec 64))

(declare-fun result178 () t__ref3)

(declare-fun r1417 () (_ BitVec 64))

(declare-fun result179 () t__ref3)

(declare-fun rsp137 () (_ BitVec 64))

(declare-fun result180 () t__ref3)

(declare-fun r1510 () (_ BitVec 64))

(declare-fun result181 () t__ref3)

(declare-fun rsp138 () (_ BitVec 64))

(declare-fun result182 () t__ref3)

(declare-fun rsp139 () (_ BitVec 64))

(declare-fun exit_called1 () bool__ref)

(declare-fun zeroflag87 () bool__ref)

(declare-fun carryflag83 () bool__ref)

(declare-fun signflag83 () bool__ref)

(declare-fun overflowflag83 () bool__ref)

(declare-fun xmm084 () t__ref3)

(declare-fun xmm136 () t__ref3)

(declare-fun xmm238 () t__ref3)

(declare-fun xmm334 () t__ref3)

(declare-fun xmm431 () t__ref3)

(declare-fun xmm524 () t__ref3)

(declare-fun xmm618 () t__ref3)

(declare-fun xmm727 () t__ref3)

(declare-fun rax89 () t__ref3)

(declare-fun rcx4 () t__ref3)

(declare-fun rdx5 () t__ref3)

(declare-fun rbx89 () t__ref3)

(declare-fun rsp140 () t__ref3)

(declare-fun rbp86 () t__ref3)

(declare-fun rsi38 () t__ref3)

(declare-fun rdi103 () t__ref3)

(declare-fun r83 () t__ref3)

(declare-fun r1232 () t__ref3)

(declare-fun r1325 () t__ref3)

(declare-fun r1418 () t__ref3)

(declare-fun r1511 () t__ref3)

(declare-fun memory47 () map__ref)

(declare-fun savestackptr2 () t__ref3)

(declare-fun ra02 () t__ref)

(declare-fun ra12 () t__ref)

(declare-fun ra22 () t__ref)

(declare-fun ra32 () t__ref)

(declare-fun ra42 () t__ref)

(declare-fun ra52 () t__ref)

(declare-fun ra62 () t__ref)

(declare-fun ra72 () t__ref)

(declare-fun saverbx2 () t__ref3)

(declare-fun saverbp2 () t__ref3)

(declare-fun saver122 () t__ref3)

(declare-fun saver132 () t__ref3)

(declare-fun saver142 () t__ref3)

(declare-fun saver152 () t__ref3)

(declare-fun exit_called2 () Bool)

(declare-fun zeroflag88 () Bool)

(declare-fun carryflag84 () Bool)

(declare-fun signflag84 () Bool)

(declare-fun overflowflag84 () Bool)

(declare-fun xmm085 () (_ BitVec 64))

(declare-fun xmm137 () (_ BitVec 64))

(declare-fun xmm239 () (_ BitVec 64))

(declare-fun xmm335 () (_ BitVec 64))

(declare-fun xmm432 () (_ BitVec 64))

(declare-fun xmm525 () (_ BitVec 64))

(declare-fun xmm619 () (_ BitVec 64))

(declare-fun xmm728 () (_ BitVec 64))

(declare-fun rax90 () (_ BitVec 64))

(declare-fun rcx5 () (_ BitVec 64))

(declare-fun rdx6 () (_ BitVec 64))

(declare-fun rbx90 () (_ BitVec 64))

(declare-fun rsp141 () (_ BitVec 64))

(declare-fun rbp87 () (_ BitVec 64))

(declare-fun rsi39 () (_ BitVec 64))

(declare-fun rdi104 () (_ BitVec 64))

(declare-fun r84 () (_ BitVec 64))

(declare-fun r1233 () (_ BitVec 64))

(declare-fun r1326 () (_ BitVec 64))

(declare-fun r1419 () (_ BitVec 64))

(declare-fun r1512 () (_ BitVec 64))

(declare-fun memory48 () (Array (_ BitVec 64) unsigned8))

(declare-fun savestackptr3 () (_ BitVec 64))

(declare-fun ra03 () (_ BitVec 8))

(declare-fun ra13 () (_ BitVec 8))

(declare-fun ra23 () (_ BitVec 8))

(declare-fun ra33 () (_ BitVec 8))

(declare-fun ra43 () (_ BitVec 8))

(declare-fun ra53 () (_ BitVec 8))

(declare-fun ra63 () (_ BitVec 8))

(declare-fun ra73 () (_ BitVec 8))

(declare-fun saverbx3 () (_ BitVec 64))

(declare-fun saverbp3 () (_ BitVec 64))

(declare-fun saver123 () (_ BitVec 64))

(declare-fun saver133 () (_ BitVec 64))

(declare-fun saver143 () (_ BitVec 64))

(declare-fun saver153 () (_ BitVec 64))

(define-fun xmm620 () t__ref3 (mk_t__ref3 xmm6))

(define-fun xmm336 () t__ref3 (mk_t__ref3 xmm3))

(define-fun xmm240 () t__ref3 (mk_t__ref3 xmm2))

(define-fun xmm138 () t__ref3 (mk_t__ref3 xmm1))

(define-fun xmm086 () t__ref3 (mk_t__ref3 xmm0))

(define-fun overflowflag85 () bool__ref (mk_bool__ref overflowflag))

(define-fun signflag85 () bool__ref (mk_bool__ref signflag))

(define-fun carryflag85 () bool__ref (mk_bool__ref carryflag))

(define-fun zeroflag89 () bool__ref (mk_bool__ref zeroflag))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (= o (t__content3 rsp)))

;; H
  (assert (= result savestackptr))

;; H
  (assert (= (let ((subject savestackptr)) savestackptr1) o))

;; H
  (assert true)

;; H
  (assert
  (and (= o1 (readmem8 (t__content3 rsp) (map__content memory)))
  (= o1 (to_rep (select (map__content memory) (t__content3 rsp))))))

;; H
  (assert (= o2 o1))

;; H
  (assert (= result1 ra0))

;; H
  (assert (= (let ((subject ra0)) ra01) o2))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o3 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 1))
        (map__content memory)))
  (= o3 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 1)))))))

;; H
  (assert (= o4 o3))

;; H
  (assert (= result2 ra1))

;; H
  (assert (= (let ((subject ra1)) ra11) o4))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o5 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 2))
        (map__content memory)))
  (= o5 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 2)))))))

;; H
  (assert (= o6 o5))

;; H
  (assert (= result3 ra2))

;; H
  (assert (= (let ((subject ra2)) ra21) o6))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o7 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 3))
        (map__content memory)))
  (= o7 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 3)))))))

;; H
  (assert (= o8 o7))

;; H
  (assert (= result4 ra3))

;; H
  (assert (= (let ((subject ra3)) ra31) o8))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o9 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 4))
        (map__content memory)))
  (= o9 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 4)))))))

;; H
  (assert (= o10 o9))

;; H
  (assert (= result5 ra4))

;; H
  (assert (= (let ((subject ra4)) ra41) o10))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o11 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 5))
         (map__content memory)))
  (= o11 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 5)))))))

;; H
  (assert (= o12 o11))

;; H
  (assert (= result6 ra5))

;; H
  (assert (= (let ((subject ra5)) ra51) o12))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o13 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 6))
         (map__content memory)))
  (= o13 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 6)))))))

;; H
  (assert (= o14 o13))

;; H
  (assert (= result7 ra6))

;; H
  (assert (= (let ((subject ra6)) ra61) o14))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o15 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 7))
         (map__content memory)))
  (= o15 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 7)))))))

;; H
  (assert (= o16 o15))

;; H
  (assert (= result8 ra7))

;; H
  (assert (= (let ((subject ra7)) ra71) o16))

;; H
  (assert true)

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 334, characters 0-0
  (not true))
(check-sat)
(exit)
