;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-fun nouser () (Array Int character))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun temp___String_Literal_135 (tuple0) (Array Int character))

;; temp___String_Literal_135__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 1)) 78)
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 3)) 85))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 24)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 28)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 32)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 33)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 35)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 36)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 37)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 38)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 39)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 40)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 41)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 42)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 43)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 44)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 45)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 46)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 47)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 48)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 49)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 50)) 32)) :pattern (
  (temp___String_Literal_135 us_void_param)) )))

(declare-fun valid_numberlogentries (us_private) Bool)

(declare-fun valid_numberlogentries__function_guard (Bool us_private) Bool)

(declare-sort msgt 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (msgt msgt) Bool)

(declare-fun dummy4 () msgt)

(declare-datatypes () ((msgt__ref (mk_msgt__ref (msgt__content msgt)))))
(define-fun msgt__ref___projection ((a msgt__ref)) msgt (msgt__content a))

(define-fun dynamic_invariant ((temp___expr_857 Int)
  (temp___is_init_854 Bool) (temp___skip_constant_855 Bool)
  (temp___do_toplevel_856 Bool)) Bool (=>
                                      (or (= temp___is_init_854 true)
                                      (<= 0 7)) (in_range4 temp___expr_857)))

(declare-sort msgtextcount 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 23)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (msgtextcount msgtextcount) Bool)

(declare-fun dummy5 () msgtextcount)

(declare-datatypes ()
((msgtextcount__ref
 (mk_msgtextcount__ref (msgtextcount__content msgtextcount)))))
(define-fun msgtextcount__ref___projection ((a msgtextcount__ref)) msgtextcount
  (msgtextcount__content a))

(declare-fun to_rep2 (msgtextcount) Int)

(declare-fun of_rep2 (Int) msgtextcount)

;; inversion_axiom
  (assert
  (forall ((x msgtextcount))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x msgtextcount)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun dummy6 () (Array Int character))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq6 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__display__msglinet__text (Array Int character))(rec__display__msglinet__len msgtextcount)))))
(define-fun us_split_fields_Text__projection ((a us_split_fields)) (Array Int character)
  (rec__display__msglinet__text a))

(define-fun us_split_fields_Len__projection ((a us_split_fields)) msgtextcount
  (rec__display__msglinet__len a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_7__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq
                           (rec__display__msglinet__text
                           (us_split_fields1 a)) 1 23
                           (rec__display__msglinet__text
                           (us_split_fields1 b)) 1 23) true)
                        (= (to_rep2
                           (rec__display__msglinet__len (us_split_fields1 a)))
                        (to_rep2
                        (rec__display__msglinet__len (us_split_fields1 b)))))
                   true false))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun display__msglinet__text__first__bit () Int)

(declare-fun display__msglinet__text__last__bit () Int)

(declare-fun display__msglinet__text__position () Int)

;; display__msglinet__text__first__bit_axiom
  (assert (<= 0 display__msglinet__text__first__bit))

;; display__msglinet__text__last__bit_axiom
  (assert
  (< display__msglinet__text__first__bit display__msglinet__text__last__bit))

;; display__msglinet__text__position_axiom
  (assert (<= 0 display__msglinet__text__position))

(declare-fun display__msglinet__len__first__bit () Int)

(declare-fun display__msglinet__len__last__bit () Int)

(declare-fun display__msglinet__len__position () Int)

;; display__msglinet__len__first__bit_axiom
  (assert (<= 0 display__msglinet__len__first__bit))

;; display__msglinet__len__last__bit_axiom
  (assert
  (< display__msglinet__len__first__bit display__msglinet__len__last__bit))

;; display__msglinet__len__position_axiom
  (assert (<= 0 display__msglinet__len__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-fun dummy7 () us_rep)

(declare-datatypes ()
((msglinet__ref (mk_msglinet__ref (msglinet__content us_rep)))))
(define-fun msglinet__ref___projection ((a msglinet__ref)) us_rep (msglinet__content
                                                                  a))

(declare-fun blankline () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__display__msgstrt__top us_rep)(rec__display__msgstrt__bottom us_rep)))))
(define-fun us_split_fields_Top__projection ((a us_split_fields2)) us_rep
  (rec__display__msgstrt__top a))

(define-fun us_split_fields_Bottom__projection ((a us_split_fields2)) us_rep
  (rec__display__msgstrt__bottom a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_8__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq2
                            (rec__display__msgstrt__top (us_split_fields3 a))
                            (rec__display__msgstrt__top (us_split_fields3 b))) true)
                         (= (bool_eq2
                            (rec__display__msgstrt__bottom
                            (us_split_fields3 a))
                            (rec__display__msgstrt__bottom
                            (us_split_fields3 b))) true))
                    true false))

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-fun display__msgstrt__top__first__bit () Int)

(declare-fun display__msgstrt__top__last__bit () Int)

(declare-fun display__msgstrt__top__position () Int)

;; display__msgstrt__top__first__bit_axiom
  (assert (<= 0 display__msgstrt__top__first__bit))

;; display__msgstrt__top__last__bit_axiom
  (assert
  (< display__msgstrt__top__first__bit display__msgstrt__top__last__bit))

;; display__msgstrt__top__position_axiom
  (assert (<= 0 display__msgstrt__top__position))

(declare-fun display__msgstrt__bottom__first__bit () Int)

(declare-fun display__msgstrt__bottom__last__bit () Int)

(declare-fun display__msgstrt__bottom__position () Int)

;; display__msgstrt__bottom__first__bit_axiom
  (assert (<= 0 display__msgstrt__bottom__first__bit))

;; display__msgstrt__bottom__last__bit_axiom
  (assert
  (< display__msgstrt__bottom__first__bit display__msgstrt__bottom__last__bit))

;; display__msgstrt__bottom__position_axiom
  (assert (<= 0 display__msgstrt__bottom__position))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-fun dummy8 () us_rep1)

(declare-datatypes ()
((msgstrt__ref (mk_msgstrt__ref (msgstrt__content us_rep1)))))
(define-fun msgstrt__ref___projection ((a msgstrt__ref)) us_rep1 (msgstrt__content
                                                                 a))

(declare-sort scrolltextcount 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (scrolltextcount scrolltextcount) Bool)

(declare-fun dummy9 () scrolltextcount)

(declare-datatypes ()
((scrolltextcount__ref
 (mk_scrolltextcount__ref (scrolltextcount__content scrolltextcount)))))
(define-fun scrolltextcount__ref___projection ((a scrolltextcount__ref)) scrolltextcount
  (scrolltextcount__content a))

(declare-fun to_rep3 (scrolltextcount) Int)

(declare-fun of_rep3 (Int) scrolltextcount)

;; inversion_axiom
  (assert
  (forall ((x scrolltextcount))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x scrolltextcount)) (! (in_range6
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort scrolltexti 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (scrolltexti scrolltexti) Bool)

(declare-fun dummy10 () scrolltexti)

(declare-datatypes ()
((scrolltexti__ref (mk_scrolltexti__ref (scrolltexti__content scrolltexti)))))
(define-fun scrolltexti__ref___projection ((a scrolltexti__ref)) scrolltexti
  (scrolltexti__content a))

(declare-fun dummy11 () (Array Int character))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int character)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int character)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq11 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__display__scrollstrt__text (Array Int character))(rec__display__scrollstrt__len scrolltextcount)))))
(define-fun us_split_fields_Text2__projection ((a us_split_fields4)) (Array Int character)
  (rec__display__scrollstrt__text a))

(define-fun us_split_fields_Len2__projection ((a us_split_fields4)) scrolltextcount
  (rec__display__scrollstrt__len a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_10__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                 a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (bool_eq
                            (rec__display__scrollstrt__text
                            (us_split_fields5 a)) 1 50
                            (rec__display__scrollstrt__text
                            (us_split_fields5 b)) 1 50) true)
                         (= (to_rep3
                            (rec__display__scrollstrt__len
                            (us_split_fields5 a))) (to_rep3
                                                   (rec__display__scrollstrt__len
                                                   (us_split_fields5 b)))))
                    true false))

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-fun display__scrollstrt__text__first__bit () Int)

(declare-fun display__scrollstrt__text__last__bit () Int)

(declare-fun display__scrollstrt__text__position () Int)

;; display__scrollstrt__text__first__bit_axiom
  (assert (<= 0 display__scrollstrt__text__first__bit))

;; display__scrollstrt__text__last__bit_axiom
  (assert
  (< display__scrollstrt__text__first__bit display__scrollstrt__text__last__bit))

;; display__scrollstrt__text__position_axiom
  (assert (<= 0 display__scrollstrt__text__position))

(declare-fun display__scrollstrt__len__first__bit () Int)

(declare-fun display__scrollstrt__len__last__bit () Int)

(declare-fun display__scrollstrt__len__position () Int)

;; display__scrollstrt__len__first__bit_axiom
  (assert (<= 0 display__scrollstrt__len__first__bit))

;; display__scrollstrt__len__last__bit_axiom
  (assert
  (< display__scrollstrt__len__first__bit display__scrollstrt__len__last__bit))

;; display__scrollstrt__len__position_axiom
  (assert (<= 0 display__scrollstrt__len__position))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-fun dummy12 () us_rep2)

(declare-datatypes ()
((scrollstrt__ref (mk_scrollstrt__ref (scrollstrt__content us_rep2)))))
(define-fun scrollstrt__ref___projection ((a scrollstrt__ref)) us_rep2
  (scrollstrt__content a))

(declare-fun msg () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_150 Int))
                           (=>
                           (and (<= a__first temp___idx_150)
                           (<= temp___idx_150 a__last))
                           (= (bool_eq3 (select a temp___idx_150)
                              (select b (+ (- b__first a__first) temp___idx_150))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_150 Int))
  (=> (and (<= a__first temp___idx_150) (<= temp___idx_150 a__last))
  (= (bool_eq3 (select a temp___idx_150)
     (select b (+ (- b__first a__first) temp___idx_150))) true))))))))

(declare-fun msgtostrings () (Array Int us_rep1))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun display__msgtostrings__aggregate_def (us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1) (Array Int us_rep1))

;; def_axiom
  (assert
  (forall ((temp___152 us_rep1) (temp___153 us_rep1) (temp___154 us_rep1)
  (temp___155 us_rep1) (temp___156 us_rep1) (temp___157 us_rep1)
  (temp___158 us_rep1) (temp___159 us_rep1))
  (let ((temp___151 (display__msgtostrings__aggregate_def temp___152
                    temp___153 temp___154 temp___155 temp___156 temp___157
                    temp___158 temp___159)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___151 0) temp___152)
  (= (select temp___151 1) temp___153)) (= (select temp___151 2) temp___154))
  (= (select temp___151 3) temp___155)) (= (select temp___151 4) temp___156))
  (= (select temp___151 5) temp___157)) (= (select temp___151 6) temp___158))
  (= (select temp___151 7) temp___159)))))

(declare-fun temp___String_Literal_161 (tuple0) (Array Int character))

;; temp___String_Literal_161__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 1)) 83)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 2)) 89))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 3)) 83))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 4)) 84))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 5)) 69))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 6)) 77))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 8)) 78))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 9)) 79))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 10)) 84))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 12)) 79))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 13)) 80))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 14)) 69))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 15)) 82))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 16)) 65))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 17)) 84))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 18)) 73))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 19)) 79))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 20)) 78))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 21)) 65))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 22)) 76))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_161 us_void_param)) )))

(declare-fun temp___String_Literal_162 (tuple0) (Array Int character))

;; temp___String_Literal_162__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 1)) 87)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 2)) 69))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 3)) 76))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 4)) 67))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 5)) 79))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 6)) 77))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 7)) 69))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 9)) 84))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 10)) 79))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 12)) 84))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 13)) 73))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 14)) 83))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_162 us_void_param)) )))

(declare-fun temp___String_Literal_163 (tuple0) (Array Int character))

;; temp___String_Literal_163__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 1)) 69)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 2)) 78))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 3)) 84))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 4)) 69))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 5)) 82))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 7)) 84))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 8)) 79))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 9)) 75))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 10)) 69))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 11)) 78))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_163 us_void_param)) )))

(declare-fun temp___String_Literal_164 (tuple0) (Array Int character))

;; temp___String_Literal_164__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 2)) 85))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 3)) 84))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 4)) 72))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 5)) 69))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 6)) 78))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 7)) 84))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 8)) 73))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 9)) 67))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 10)) 65))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 11)) 84))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 12)) 73))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 13)) 78))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 14)) 71))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 16)) 85))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 17)) 83))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 18)) 69))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 19)) 82))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_164 us_void_param)) )))

(declare-fun temp___String_Literal_165 (tuple0) (Array Int character))

;; temp___String_Literal_165__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 1)) 73)
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 2)) 78))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 3)) 83))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 4)) 69))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 5)) 82))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 6)) 84))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 8)) 70))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 9)) 73))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 10)) 78))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 11)) 71))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 12)) 69))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 13)) 82))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_165 us_void_param)) )))

(declare-fun temp___String_Literal_166 (tuple0) (Array Int character))

;; temp___String_Literal_166__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 1)) 82)
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 2)) 69))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 3)) 77))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 4)) 79))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 5)) 86))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 6)) 69))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 8)) 84))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 9)) 79))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 10)) 75))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 11)) 69))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 12)) 78))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 14)) 65))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 15)) 78))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 16)) 68))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 18)) 69))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 19)) 78))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 20)) 84))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 21)) 69))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 22)) 82))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_166 us_void_param)) )))

(declare-fun temp___String_Literal_167 (tuple0) (Array Int character))

;; temp___String_Literal_167__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 2)) 85))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 3)) 84))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 4)) 72))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 5)) 69))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 6)) 78))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 7)) 84))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 8)) 73))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 9)) 67))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 10)) 65))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 11)) 84))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 12)) 73))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 13)) 78))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 14)) 71))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 16)) 85))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 17)) 83))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 18)) 69))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 19)) 82))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_167 us_void_param)) )))

(declare-fun temp___String_Literal_168 (tuple0) (Array Int character))

;; temp___String_Literal_168__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 2)) 76))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 3)) 69))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 4)) 65))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 5)) 83))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 6)) 69))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 8)) 87))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 9)) 65))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 10)) 73))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 11)) 84))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_168 us_void_param)) )))

(declare-fun temp___String_Literal_169 (tuple0) (Array Int character))

;; temp___String_Literal_169__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 1)) 69)
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 2)) 78))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 3)) 84))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 4)) 82))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 5)) 89))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 7)) 68))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 8)) 69))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 9)) 78))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 10)) 73))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 11)) 69))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 12)) 68))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_169 us_void_param)) )))

(declare-fun temp___String_Literal_170 (tuple0) (Array Int character))

;; temp___String_Literal_170__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 1)) 82)
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 2)) 69))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 3)) 77))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 4)) 79))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 5)) 86))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 6)) 69))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 8)) 84))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 9)) 79))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 10)) 75))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 11)) 69))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 12)) 78))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_170 us_void_param)) )))

(declare-fun temp___String_Literal_171 (tuple0) (Array Int character))

;; temp___String_Literal_171__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 2)) 79))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 3)) 75))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 4)) 69))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 5)) 78))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 7)) 85))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 8)) 80))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 9)) 68))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 10)) 65))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 11)) 84))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 12)) 69))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 14)) 70))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 15)) 65))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 16)) 73))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 17)) 76))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 18)) 69))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 19)) 68))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_171 us_void_param)) )))

(declare-fun temp___String_Literal_172 (tuple0) (Array Int character))

;; temp___String_Literal_172__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 1)) 69)
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 2)) 78))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 3)) 84))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 4)) 69))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 5)) 82))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 7)) 69))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 8)) 78))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 9)) 67))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 10)) 76))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 11)) 65))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 12)) 86))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 13)) 69))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_172 us_void_param)) )))

(declare-fun c27b () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq13 (integer integer) Bool)

(declare-fun dummy13 () integer)

(declare-datatypes () ((t33b__ref (mk_t33b__ref (t33b__content integer)))))
(define-fun t33b__ref___projection ((a t33b__ref)) integer (t33b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq14 (integer integer) Bool)

(declare-fun dummy14 () integer)

(declare-datatypes () ((t34b__ref (mk_t34b__ref (t34b__content integer)))))
(define-fun t34b__ref___projection ((a t34b__ref)) integer (t34b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun temp___1015 (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___1017 Int))
  (forall ((temp___1018 Int))
  (= (select (temp___1015 temp___1017) temp___1018) (of_rep temp___1017)))))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; msgtostrings__def_axiom
  (assert
  (= msgtostrings (display__msgtostrings__aggregate_def
                  (mk___rep1
                  (mk___split_fields1
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_161 Tuple0)
                  (of_rep2 22))) blankline))
                  (mk___rep1
                  (mk___split_fields1
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_162 Tuple0)
                  (of_rep2 14)))
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_163 Tuple0)
                  (of_rep2 11)))))
                  (mk___rep1
                  (mk___split_fields1
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_164 Tuple0)
                  (of_rep2 19)))
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_165 Tuple0)
                  (of_rep2 13)))))
                  (mk___rep1
                  (mk___split_fields1 blankline
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_166 Tuple0)
                  (of_rep2 22)))))
                  (mk___rep1
                  (mk___split_fields1
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_167 Tuple0)
                  (of_rep2 19)))
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_168 Tuple0)
                  (of_rep2 11)))))
                  (mk___rep1
                  (mk___split_fields1
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_169 Tuple0)
                  (of_rep2 12)))
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_170 Tuple0)
                  (of_rep2 12)))))
                  (mk___rep1
                  (mk___split_fields1 blankline
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_171 Tuple0)
                  (of_rep2 19)))))
                  (mk___rep1
                  (mk___split_fields1 blankline
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_172 Tuple0)
                  (of_rep2 13))))))))

(define-fun dynamic_invariant5 ((temp___expr_863 Int)
  (temp___is_init_860 Bool) (temp___skip_constant_861 Bool)
  (temp___do_toplevel_862 Bool)) Bool (=>
                                      (or (= temp___is_init_860 true)
                                      (<= 0 23)) (in_range5 temp___expr_863)))

(declare-fun temp___String_Literal_149 (tuple0) (Array Int character))

;; temp___String_Literal_149__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_149 us_void_param)) )))

;; blankline__def_axiom
  (assert
  (= blankline (mk___rep
               (mk___split_fields (temp___String_Literal_149 Tuple0)
               (of_rep2 0)))))

(define-fun dynamic_invariant6 ((temp___expr_913 Int)
  (temp___is_init_910 Bool) (temp___skip_constant_911 Bool)
  (temp___do_toplevel_912 Bool)) Bool (=>
                                      (or (= temp___is_init_910 true)
                                      (<= 0 50)) (in_range6 temp___expr_913)))

(define-fun dynamic_invariant7 ((temp___expr_919 Int)
  (temp___is_init_916 Bool) (temp___skip_constant_917 Bool)
  (temp___do_toplevel_918 Bool)) Bool (=>
                                      (or (= temp___is_init_916 true)
                                      (<= 1 50)) (in_range7 temp___expr_919)))

;; valid_numberlogentries__post_axiom
  (assert true)

;; nouser__def_axiom
  (assert (= nouser (temp___String_Literal_135 Tuple0)))

(declare-fun currentdisplay () Int)

(declare-fun result____split_fields () (Array Int character))

(declare-fun result____split_fields1 () scrolltextcount)

(declare-fun i () Int)

(declare-fun o () msgtextcount)

(declare-fun o1 () (Array Int character))

(declare-fun o2 () msgtextcount)

(declare-fun o3 () (Array Int character))

(declare-fun o4 () msgtextcount)

(declare-fun o5 () (Array Int character))

(declare-fun o6 () msgtextcount)

(declare-fun o7 () (Array Int character))

(declare-fun o8 () msgtextcount)

(declare-fun o9 () msgtextcount)

(declare-fun o10 () (Array Int character))

(declare-fun o11 () msgtextcount)

(declare-fun o12 () msgtextcount)

(declare-fun o13 () (Array Int character))

(declare-fun o14 () msgtextcount)

(declare-fun o15 () (Array Int character))

(declare-fun o16 () msgtextcount)

(declare-fun o17 () (Array Int character))

(declare-fun o18 () msgtextcount)

(declare-fun o19 () us_split_fields2)

(declare-fun o20 () msgtextcount)

(declare-fun o21 () us_split_fields)

(declare-fun o22 () msgtextcount)

(declare-fun o23 () us_split_fields)

(declare-fun o24 () us_rep)

(declare-fun o25 () us_rep)

(declare-fun o26 () us_split_fields2)

(declare-fun o27 () msgtextcount)

(declare-fun o28 () us_split_fields)

(declare-fun o29 () us_rep)

(declare-fun o30 () us_split_fields2)

(declare-fun o31 () msgtextcount)

(declare-fun o32 () us_split_fields)

(declare-fun o33 () msgtextcount)

(declare-fun o34 () us_split_fields)

(declare-fun o35 () us_rep)

(declare-fun o36 () us_rep)

(declare-fun o37 () us_split_fields2)

(declare-fun o38 () msgtextcount)

(declare-fun o39 () us_split_fields)

(declare-fun o40 () msgtextcount)

(declare-fun o41 () us_split_fields)

(declare-fun o42 () us_rep)

(declare-fun o43 () us_rep)

(declare-fun o44 () us_split_fields2)

(declare-fun o45 () msgtextcount)

(declare-fun o46 () us_split_fields)

(declare-fun o47 () us_rep)

(declare-fun o48 () us_split_fields2)

(declare-fun o49 () msgtextcount)

(declare-fun o50 () us_split_fields)

(declare-fun o51 () us_rep)

(declare-fun o52 () us_split_fields2)

(declare-fun o53 () us_rep1)

(declare-fun o54 () us_rep1)

(declare-fun o55 () us_rep1)

(declare-fun o56 () us_rep1)

(declare-fun o57 () us_rep1)

(declare-fun o58 () us_rep1)

(declare-fun o59 () us_rep1)

(declare-fun o60 () us_rep1)

(declare-fun temp___1019 () (Array Int us_rep1))

(declare-fun o61 () scrolltextcount)

(declare-fun o62 () us_split_fields4)

(declare-fun display__setvalue__B30b__result__assume () us_rep2)

(declare-fun result () us_split_fields__ref2)

(declare-fun result____split_fields2 () us_split_fields4)

(declare-fun result1 () int__ref)

(declare-fun i1 () Int)

;; H
  (assert (= (to_rep2 o49) 13))

;; H
  (assert (= o50 (mk___split_fields (temp___String_Literal_172 Tuple0) o49)))

;; H
  (assert (= o51 (mk___rep o50)))

;; H
  (assert (= o52 (mk___split_fields1 blankline o51)))

;; H
  (assert (= o53 (mk___rep1 o52)))

;; H
  (assert (= (to_rep2 o45) 19))

;; H
  (assert (= o46 (mk___split_fields (temp___String_Literal_171 Tuple0) o45)))

;; H
  (assert (= o47 (mk___rep o46)))

;; H
  (assert (= o48 (mk___split_fields1 blankline o47)))

;; H
  (assert (= o54 (mk___rep1 o48)))

;; H
  (assert (= (to_rep2 o40) 12))

;; H
  (assert (= o41 (mk___split_fields (temp___String_Literal_170 Tuple0) o40)))

;; H
  (assert (= o42 (mk___rep o41)))

;; H
  (assert (= (to_rep2 o38) 12))

;; H
  (assert (= o39 (mk___split_fields (temp___String_Literal_169 Tuple0) o38)))

;; H
  (assert (= o43 (mk___rep o39)))

;; H
  (assert (= o44 (mk___split_fields1 o43 o42)))

;; H
  (assert (= o55 (mk___rep1 o44)))

;; H
  (assert (= (to_rep2 o33) 11))

;; H
  (assert (= o34 (mk___split_fields (temp___String_Literal_168 Tuple0) o33)))

;; H
  (assert (= o35 (mk___rep o34)))

;; H
  (assert (= (to_rep2 o31) 19))

;; H
  (assert (= o32 (mk___split_fields (temp___String_Literal_167 Tuple0) o31)))

;; H
  (assert (= o36 (mk___rep o32)))

;; H
  (assert (= o37 (mk___split_fields1 o36 o35)))

;; H
  (assert (= o56 (mk___rep1 o37)))

;; H
  (assert (= (to_rep2 o27) 22))

;; H
  (assert (= o28 (mk___split_fields (temp___String_Literal_166 Tuple0) o27)))

;; H
  (assert (= o29 (mk___rep o28)))

;; H
  (assert (= o30 (mk___split_fields1 blankline o29)))

;; H
  (assert (= o57 (mk___rep1 o30)))

;; H
  (assert (= (to_rep2 o22) 13))

;; H
  (assert (= o23 (mk___split_fields (temp___String_Literal_165 Tuple0) o22)))

;; H
  (assert (= o24 (mk___rep o23)))

;; H
  (assert (= (to_rep2 o20) 19))

;; H
  (assert (= o21 (mk___split_fields (temp___String_Literal_164 Tuple0) o20)))

;; H
  (assert (= o25 (mk___rep o21)))

;; H
  (assert (= o26 (mk___split_fields1 o25 o24)))

;; H
  (assert (= o58 (mk___rep1 o26)))

;; H
  (assert (= (to_rep2 o12) 11))

;; H
  (assert (= (temp___String_Literal_163 Tuple0) o13))

;; H
  (assert (= o12 o14))

;; H
  (assert (= o15 o13))

;; H
  (assert (= o16 o14))

;; H
  (assert (= (to_rep2 o9) 14))

;; H
  (assert (= (temp___String_Literal_162 Tuple0) o10))

;; H
  (assert (= o9 o11))

;; H
  (assert (= o17 o10))

;; H
  (assert (= o18 o11))

;; H
  (assert
  (= o19 (mk___split_fields1 (mk___rep (mk___split_fields o17 o18))
         (mk___rep (mk___split_fields o15 o16)))))

;; H
  (assert (= o59 (mk___rep1 o19)))

;; H
  (assert (= (to_rep2 o) 22))

;; H
  (assert (= (temp___String_Literal_161 Tuple0) o1))

;; H
  (assert (= o o2))

;; H
  (assert (= o3 o1))

;; H
  (assert (= o4 o2))

;; H
  (assert (= o5 o3))

;; H
  (assert (= o6 o4))

;; H
  (assert (= blankline (mk___rep (mk___split_fields o7 o8))))

;; H
  (assert
  (= o60 (mk___rep1
         (mk___split_fields1 (mk___rep (mk___split_fields o5 o6))
         (mk___rep (mk___split_fields o7 o8))))))

;; H
  (assert
  (= temp___1019 (display__msgtostrings__aggregate_def o60 o59 o58 o57
                 o56 o55 o54 o53)))

;; H
  (assert (= temp___1019 msgtostrings))

;; H
  (assert (= (temp___String_Literal_135 Tuple0) nouser))

;; H
  (assert (in_range4 currentdisplay))

;; H
  (assert (in_range4 msg))

;; H
  (assert (not (= msg currentdisplay)))

;; H
  (assert (= (select msgtostrings msg) c27b))

;; H
  (assert (= (to_rep3 o61) 0))

;; H
  (assert (= o62 (mk___split_fields2 (temp___1015 32) o61)))

;; H
  (assert (= display__setvalue__B30b__result__assume (mk___rep2 o62)))

;; H
  (assert
  (= result (mk___split_fields__ref2
            (mk___split_fields2 result____split_fields
            result____split_fields1))))

;; H
  (assert
  (= result____split_fields2 (us_split_fields5
                             display__setvalue__B30b__result__assume)))

;; H
  (assert (= result1 (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (<= 1 i1))

;; H
  (assert
  (<= i1 (to_rep2
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c27b)))))))

(assert
;; WP_parameter_def
 ;; File "display.adb", line 93, characters 0-0
  (not (<= 1 i1)))
(check-sat)
(exit)
