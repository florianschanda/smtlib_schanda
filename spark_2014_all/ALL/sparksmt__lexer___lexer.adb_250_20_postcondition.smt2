;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort name_id 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (name_id name_id) Bool)

(declare-fun dummy1 () name_id)

(declare-datatypes ()
((name_id__ref (mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content
                                                                 a))

(declare-sort token_kind 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (token_kind token_kind) Bool)

(declare-fun dummy2 () token_kind)

(declare-datatypes ()
((token_kind__ref (mk_token_kind__ref (token_kind__content token_kind)))))
(define-fun token_kind__ref___projection ((a token_kind__ref)) token_kind
  (token_kind__content a))

(define-fun dynamic_invariant1 ((temp___expr_572 Int)
  (temp___is_init_569 Bool) (temp___skip_constant_570 Bool)
  (temp___do_toplevel_571 Bool)) Bool (=>
                                      (or (= temp___is_init_569 true)
                                      (<= 0 8)) (in_range3 temp___expr_572)))

(declare-fun to_rep1 (token_kind) Int)

(declare-fun of_rep1 (Int) token_kind)

;; inversion_axiom
  (assert
  (forall ((x token_kind))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x token_kind)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun to_rep2 (name_id) Int)

(declare-fun of_rep2 (Int) name_id)

;; inversion_axiom
  (assert
  (forall ((x name_id))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x name_id)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__lexer__token__kind token_kind)))))
(define-fun us_split_discrs_3__projection ((a us_split_discrs)) token_kind
  (rec__lexer__token__kind a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref_3__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__lexer__token__line natural)(rec__lexer__token__col natural)(rec__lexer__token__length natural)(rec__lexer__token__value name_id)))))
(define-fun us_split_fields_Line__projection ((a us_split_fields)) natural
  (rec__lexer__token__line a))

(define-fun us_split_fields_Col__projection ((a us_split_fields)) natural
  (rec__lexer__token__col a))

(define-fun us_split_fields_Length__projection ((a us_split_fields)) natural
  (rec__lexer__token__length a))

(define-fun us_split_fields_Value__projection ((a us_split_fields)) name_id
  (rec__lexer__token__value a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep_8__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                              a))

(define-fun us_rep_9__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun us_rep_10__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun lexer__token__value__pred ((a us_rep)) Bool (and
                                                        (<= 3 (to_rep1
                                                              (rec__lexer__token__kind
                                                              (us_split_discrs1
                                                              a))))
                                                        (<= (to_rep1
                                                            (rec__lexer__token__kind
                                                            (us_split_discrs1
                                                            a))) 8)))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__lexer__token__kind (us_split_discrs1 a)))
                        (to_rep1
                        (rec__lexer__token__kind (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__lexer__token__line (us_split_fields1 a)))
                        (to_rep
                        (rec__lexer__token__line (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__lexer__token__col (us_split_fields1 a)))
                        (to_rep
                        (rec__lexer__token__col (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__lexer__token__length (us_split_fields1 a)))
                        (to_rep
                        (rec__lexer__token__length (us_split_fields1 b)))))
                        (=> (lexer__token__value__pred a)
                        (= (to_rep2
                           (rec__lexer__token__value (us_split_fields1 a)))
                        (to_rep2
                        (rec__lexer__token__value (us_split_fields1 b))))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun lexer__token__kind__first__bit () Int)

(declare-fun lexer__token__kind__last__bit () Int)

(declare-fun lexer__token__kind__position () Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit lexer__token__kind__last__bit))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position))

(declare-fun lexer__token__line__first__bit () Int)

(declare-fun lexer__token__line__last__bit () Int)

(declare-fun lexer__token__line__position () Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit lexer__token__line__last__bit))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position))

(declare-fun lexer__token__col__first__bit () Int)

(declare-fun lexer__token__col__last__bit () Int)

(declare-fun lexer__token__col__position () Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit lexer__token__col__last__bit))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position))

(declare-fun lexer__token__length__first__bit () Int)

(declare-fun lexer__token__length__last__bit () Int)

(declare-fun lexer__token__length__position () Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit lexer__token__length__last__bit))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position))

(declare-fun lexer__token__value__first__bit () Int)

(declare-fun lexer__token__value__last__bit () Int)

(declare-fun lexer__token__value__position () Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit))

;; lexer__token__value__last__bit_axiom
  (assert (< lexer__token__value__first__bit lexer__token__value__last__bit))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun dummy3 () us_rep)

(declare-datatypes () ((token__ref (mk_token__ref (token__content us_rep)))))
(define-fun token__ref___projection ((a token__ref)) us_rep (token__content
                                                            a))

(define-fun default_initial_assumption ((temp___expr_586 us_rep)
  (temp___skip_top_level_587 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_586) false)
                                         (= (to_rep1
                                            (rec__lexer__token__kind
                                            (us_split_discrs1
                                            temp___expr_586))) 0)))

(declare-fun t__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun kind () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun r19b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun in_range4 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep1
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun lexer__token__kind__first__bit1 () Int)

(declare-fun lexer__token__kind__last__bit1 () Int)

(declare-fun lexer__token__kind__position1 () Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit1))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit1 lexer__token__kind__last__bit1))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position1))

(declare-fun lexer__token__value__first__bit1 () Int)

(declare-fun lexer__token__value__last__bit1 () Int)

(declare-fun lexer__token__value__position1 () Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit1))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit1 lexer__token__value__last__bit1))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position1))

(declare-fun lexer__token__line__first__bit1 () Int)

(declare-fun lexer__token__line__last__bit1 () Int)

(declare-fun lexer__token__line__position1 () Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit1))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit1 lexer__token__line__last__bit1))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position1))

(declare-fun lexer__token__col__first__bit1 () Int)

(declare-fun lexer__token__col__last__bit1 () Int)

(declare-fun lexer__token__col__position1 () Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit1))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit1 lexer__token__col__last__bit1))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position1))

(declare-fun lexer__token__length__first__bit1 () Int)

(declare-fun lexer__token__length__last__bit1 () Int)

(declare-fun lexer__token__length__position1 () Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit1))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit1 lexer__token__length__last__bit1))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position1))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun dummy4 () us_rep)

(declare-datatypes () ((t20b__ref (mk_t20b__ref (t20b__content us_rep)))))
(define-fun t20b__ref___projection ((a t20b__ref)) us_rep (t20b__content a))

(declare-fun r22b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun in_range5 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep1
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun lexer__token__kind__first__bit2 () Int)

(declare-fun lexer__token__kind__last__bit2 () Int)

(declare-fun lexer__token__kind__position2 () Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit2))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit2 lexer__token__kind__last__bit2))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position2))

(declare-fun lexer__token__value__first__bit2 () Int)

(declare-fun lexer__token__value__last__bit2 () Int)

(declare-fun lexer__token__value__position2 () Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit2))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit2 lexer__token__value__last__bit2))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position2))

(declare-fun lexer__token__line__first__bit2 () Int)

(declare-fun lexer__token__line__last__bit2 () Int)

(declare-fun lexer__token__line__position2 () Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit2))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit2 lexer__token__line__last__bit2))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position2))

(declare-fun lexer__token__col__first__bit2 () Int)

(declare-fun lexer__token__col__last__bit2 () Int)

(declare-fun lexer__token__col__position2 () Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit2))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit2 lexer__token__col__last__bit2))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position2))

(declare-fun lexer__token__length__first__bit2 () Int)

(declare-fun lexer__token__length__last__bit2 () Int)

(declare-fun lexer__token__length__position2 () Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit2))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit2 lexer__token__length__last__bit2))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position2))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun dummy5 () us_rep)

(declare-datatypes () ((t23b__ref (mk_t23b__ref (t23b__content us_rep)))))
(define-fun t23b__ref___projection ((a t23b__ref)) us_rep (t23b__content a))

(define-fun dynamic_invariant2 ((temp___expr_563 Int)
  (temp___is_init_560 Bool) (temp___skip_constant_561 Bool)
  (temp___do_toplevel_562 Bool)) Bool (=>
                                      (or (= temp___is_init_560 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_563)))

(declare-fun t__split_fields () natural)

(declare-fun t__split_fields1 () natural)

(declare-fun t__split_fields2 () natural)

(declare-fun t__split_fields3 () name_id)

(declare-fun t__split_discrs () token_kind)

(declare-fun first_line () Int)

(declare-fun first_col () Int)

(declare-fun o () token_kind)

(declare-fun o1 () natural)

(declare-fun o2 () natural)

(declare-fun o3 () natural)

(declare-fun o4 () natural)

(declare-fun o5 () natural)

(declare-fun o6 () natural)

(declare-fun o7 () name_id)

(declare-fun o8 () token_kind)

(declare-fun temp___856 () token_kind)

(declare-fun temp___8561 () natural)

(declare-fun temp___8562 () natural)

(declare-fun temp___8563 () natural)

(declare-fun temp___8564 () name_id)

(declare-fun temp___8565 () Bool)

(declare-fun usq_ () token_kind)

(declare-fun usq_1 () natural)

(declare-fun usq_2 () natural)

(declare-fun usq_3 () natural)

(declare-fun usq_4 () name_id)

(declare-fun usq_5 () Bool)

(declare-fun temp___858 () token_kind)

(declare-fun temp___8581 () natural)

(declare-fun temp___8582 () natural)

(declare-fun temp___8583 () natural)

(declare-fun temp___8584 () name_id)

(declare-fun temp___8585 () Bool)

(declare-fun o9 () token_kind)

(declare-fun o10 () natural)

(declare-fun o11 () natural)

(declare-fun o12 () natural)

(declare-fun o13 () natural)

(declare-fun o14 () natural)

(declare-fun o15 () natural)

(declare-fun o16 () name_id)

(declare-fun o17 () token_kind)

(declare-fun temp___859 () token_kind)

(declare-fun temp___8591 () natural)

(declare-fun temp___8592 () natural)

(declare-fun temp___8593 () natural)

(declare-fun temp___8594 () name_id)

(declare-fun temp___8595 () Bool)

(declare-fun usq_6 () us_rep)

(declare-fun temp___861 () us_rep)

(declare-fun result () us_split_fields__ref)

(declare-fun t__split_fields4 () us_split_fields)

(declare-fun result1 () us_split_discrs__ref)

(declare-fun t__split_discrs1 () us_split_discrs)

(declare-fun result2 () us_split_fields__ref)

(declare-fun t__split_fields5 () us_split_fields)

(declare-fun result3 () us_split_discrs__ref)

(declare-fun t__split_discrs2 () us_split_discrs)

(declare-fun t__split_fields6 () us_split_fields__ref)

(declare-fun t__split_discrs3 () us_split_discrs__ref)

(declare-fun t__split_fields7 () us_split_fields)

(declare-fun t__split_discrs4 () us_split_discrs)

(define-fun t__split_discrs5 () us_split_discrs__ref (mk___split_discrs__ref
                                                     (mk___split_discrs
                                                     t__split_discrs)))

(define-fun t__split_fields8 () us_split_fields__ref (mk___split_fields__ref
                                                     (mk___split_fields
                                                     t__split_fields
                                                     t__split_fields1
                                                     t__split_fields2
                                                     t__split_fields3)))

;; H
  (assert (in_range1 first_line))

;; H
  (assert (in_range1 first_col))

;; H
  (assert (in_range3 kind))

;; H
  (assert
  (and (not (= t__attr__constrained true)) (or (= kind 1) (= kind 2))))

;; H
  (assert (=> (= kind 1) (= (to_rep1 t__split_discrs) r19b)))

;; H
  (assert (=> (= kind 1) (in_range3 r19b)))

;; H
  (assert (=> (= kind 1) (= (to_rep o1) 1)))

;; H
  (assert (=> (= kind 1) (= (to_rep o2) first_col)))

;; H
  (assert (=> (= kind 1) (= (to_rep o3) first_line)))

;; H
  (assert (=> (= kind 1) (= o3 o4)))

;; H
  (assert (=> (= kind 1) (= o2 o5)))

;; H
  (assert (=> (= kind 1) (= o1 o6)))

;; H
  (assert (=> (= kind 1) (= dummy1 o7)))

;; H
  (assert (=> (= kind 1) (= (to_rep1 o) 1)))

;; H
  (assert (=> (= kind 1) (= o o8)))

;; H
  (assert (=> (= kind 1) (= temp___856 o8)))

;; H
  (assert (=> (= kind 1) (= temp___8561 o4)))

;; H
  (assert (=> (= kind 1) (= temp___8562 o5)))

;; H
  (assert (=> (= kind 1) (= temp___8563 o6)))

;; H
  (assert (=> (= kind 1) (= temp___8564 o7)))

;; H
  (assert (=> (= kind 1) (= true temp___8565)))

;; H
  (assert
  (=> (= kind 1)
  (=> (= t__attr__constrained true) (= temp___856 t__split_discrs))))

;; H
  (assert
  (=> (= kind 1)
  (= (mk___rep (mk___split_discrs usq_)
     (mk___split_fields usq_1 usq_2 usq_3 usq_4) usq_5) (mk___rep
                                                        (mk___split_discrs
                                                        temp___856)
                                                        (mk___split_fields
                                                        temp___8561
                                                        temp___8562
                                                        temp___8563
                                                        temp___8564)
                                                        temp___8565))))

;; H
  (assert (=> (= kind 1) (= usq_ temp___858)))

;; H
  (assert (=> (= kind 1) (= usq_1 temp___8581)))

;; H
  (assert (=> (= kind 1) (= usq_2 temp___8582)))

;; H
  (assert (=> (= kind 1) (= usq_3 temp___8583)))

;; H
  (assert (=> (= kind 1) (= usq_4 temp___8584)))

;; H
  (assert (=> (= kind 1) (= t__attr__constrained temp___8585)))

;; H
  (assert (=> (= kind 1) (= result t__split_fields8)))

;; H
  (assert
  (=> (= kind 1)
  (= t__split_fields4 (mk___split_fields temp___8581 temp___8582 temp___8583
                      temp___8584))))

;; H
  (assert (=> (= kind 1) (= result1 t__split_discrs5)))

;; H
  (assert
  (=> (= kind 1) (= t__split_discrs1 (mk___split_discrs temp___858))))

;; H
  (assert (=> (not (= kind 1)) (= kind 2)))

;; H
  (assert (=> (not (= kind 1)) (= (to_rep1 t__split_discrs) r22b)))

;; H
  (assert (=> (not (= kind 1)) (in_range3 r22b)))

;; H
  (assert (=> (not (= kind 1)) (= (to_rep o10) 1)))

;; H
  (assert (=> (not (= kind 1)) (= (to_rep o11) first_col)))

;; H
  (assert (=> (not (= kind 1)) (= (to_rep o12) first_line)))

;; H
  (assert (=> (not (= kind 1)) (= o12 o13)))

;; H
  (assert (=> (not (= kind 1)) (= o11 o14)))

;; H
  (assert (=> (not (= kind 1)) (= o10 o15)))

;; H
  (assert (=> (not (= kind 1)) (= dummy1 o16)))

;; H
  (assert (=> (not (= kind 1)) (= (to_rep1 o9) 2)))

;; H
  (assert (=> (not (= kind 1)) (= o9 o17)))

;; H
  (assert (=> (not (= kind 1)) (= temp___859 o17)))

;; H
  (assert (=> (not (= kind 1)) (= temp___8591 o13)))

;; H
  (assert (=> (not (= kind 1)) (= temp___8592 o14)))

;; H
  (assert (=> (not (= kind 1)) (= temp___8593 o15)))

;; H
  (assert (=> (not (= kind 1)) (= temp___8594 o16)))

;; H
  (assert (=> (not (= kind 1)) (= true temp___8595)))

;; H
  (assert
  (=> (not (= kind 1))
  (=> (= t__attr__constrained true) (= temp___859 t__split_discrs))))

;; H
  (assert
  (=> (not (= kind 1))
  (= usq_6 (mk___rep (mk___split_discrs temp___859)
           (mk___split_fields temp___8591 temp___8592 temp___8593
           temp___8594) temp___8595))))

;; H
  (assert
  (=> (not (= kind 1))
  (= temp___861 (mk___rep (us_split_discrs1 usq_6) (us_split_fields1 usq_6)
                t__attr__constrained))))

;; H
  (assert (=> (not (= kind 1)) (= result2 t__split_fields8)))

;; H
  (assert
  (=> (not (= kind 1)) (= t__split_fields5 (us_split_fields1 temp___861))))

;; H
  (assert (=> (not (= kind 1)) (= result3 t__split_discrs5)))

;; H
  (assert
  (=> (not (= kind 1)) (= t__split_discrs2 (us_split_discrs1 temp___861))))

;; H
  (assert (=> (not (= kind 1)) (= t__split_discrs1 t__split_discrs2)))

;; H
  (assert (=> (not (= kind 1)) (= t__split_fields4 t__split_fields5)))

;; H
  (assert (= t__split_discrs3 (mk___split_discrs__ref t__split_discrs1)))

;; H
  (assert (= t__split_fields6 (mk___split_fields__ref t__split_fields4)))

;; H
  (assert (= t__split_discrs4 t__split_discrs1))

;; H
  (assert (= t__split_fields7 t__split_fields4))

(assert
;; WP_parameter_def
 ;; File "lexer.adb", line 220, characters 0-0
  (not
  (= (to_rep1
     (rec__lexer__token__kind (us_split_discrs__content t__split_discrs3)))
  kind)))
(check-sat)
(exit)
