;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort rx_frame_queue_index 0)

(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 1))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (rx_frame_queue_index rx_frame_queue_index) Bool)

(declare-const dummy1 rx_frame_queue_index)

(declare-datatypes ()
((rx_frame_queue_index__ref
 (mk_rx_frame_queue_index__ref
 (rx_frame_queue_index__content rx_frame_queue_index)))))
(define-fun rx_frame_queue_index__ref___projection ((a rx_frame_queue_index__ref)) rx_frame_queue_index
  (rx_frame_queue_index__content a))

(declare-sort frame_length 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1024)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (frame_length frame_length) Bool)

(declare-const dummy2 frame_length)

(declare-datatypes ()
((frame_length__ref
 (mk_frame_length__ref (frame_length__content frame_length)))))
(define-fun frame_length__ref___projection ((a frame_length__ref)) frame_length
  (frame_length__content a))

(declare-fun to_rep1 (frame_length) Int)

(declare-fun of_rep1 (Int) frame_length)

;; inversion_axiom
  (assert
  (forall ((x frame_length))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x frame_length)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort rx_errors 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (rx_errors rx_errors) Bool)

(declare-const dummy3 rx_errors)

(declare-datatypes ()
((rx_errors__ref (mk_rx_errors__ref (rx_errors__content rx_errors)))))
(define-fun rx_errors__ref___projection ((a rx_errors__ref)) rx_errors
  (rx_errors__content a))

(declare-fun to_rep2 (rx_errors) Int)

(declare-fun of_rep2 (Int) rx_errors)

;; inversion_axiom
  (assert
  (forall ((x rx_errors))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x rx_errors)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort bits_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))

(declare-fun user_eq4 (bits_8 bits_8) Bool)

(declare-const dummy4 bits_8)

(declare-datatypes ()
((bits_8__ref (mk_bits_8__ref (bits_8__content bits_8)))))
(define-fun bits_8__ref___projection ((a bits_8__ref)) bits_8 (bits_8__content
                                                              a))

(declare-fun to_rep3 (bits_8) (_ BitVec 8))

(declare-fun of_rep3 ((_ BitVec 8)) bits_8)

;; inversion_axiom
  (assert
  (forall ((x bits_8))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))) )))

(define-fun to_int2 ((x bits_8)) Int (bv2int (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_8)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int bits_8))))))
(declare-fun slide ((Array Int bits_8) Int Int) (Array Int bits_8))

;; slide_eq
  (assert
  (forall ((a (Array Int bits_8)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int bits_8)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int bits_8) Int Int (Array Int bits_8) Int
  Int) (Array Int bits_8))

;; concat_def
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (bits_8 Int) (Array Int bits_8))

;; singleton_def
  (assert
  (forall ((v bits_8))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int bits_8)) (a__first Int) (a__last Int)
  (b (Array Int bits_8)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int bits_8) Int Int (Array Int bits_8) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep3 (select a (+ j 1))) (to_rep3 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy5 (Array Int bits_8))

(declare-const value__size Int)

(declare-fun object__size ((Array Int bits_8)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int bits_8)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int bits_8)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int bits_8))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment a))))

(declare-fun user_eq5 ((Array Int bits_8) (Array Int bits_8)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__decadriver__rx_frame_type__size frame_length)(rec__decadriver__rx_frame_type__frame (Array Int bits_8))(rec__decadriver__rx_frame_type__error rx_errors)(rec__decadriver__rx_frame_type__overrun Bool)))))
(define-fun us_split_fields_Size__2__projection ((a us_split_fields)) frame_length
  (rec__decadriver__rx_frame_type__size a))

(define-fun us_split_fields_Frame__projection ((a us_split_fields)) (Array Int bits_8)
  (rec__decadriver__rx_frame_type__frame a))

(define-fun us_split_fields_Error__projection ((a us_split_fields)) rx_errors
  (rec__decadriver__rx_frame_type__error a))

(define-fun us_split_fields_Overrun__projection ((a us_split_fields)) Bool
  (rec__decadriver__rx_frame_type__overrun a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___137__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___138__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                  a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__decadriver__rx_frame_type__size
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__decadriver__rx_frame_type__size
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__decadriver__rx_frame_type__frame
                           (us_split_fields1 a)) 0 1024
                           (rec__decadriver__rx_frame_type__frame
                           (us_split_fields1 b)) 0 1024) true))
                        (= (to_rep2
                           (rec__decadriver__rx_frame_type__error
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__decadriver__rx_frame_type__error
                                                  (us_split_fields1 b)))))
                        (= (rec__decadriver__rx_frame_type__overrun
                           (us_split_fields1 a)) (rec__decadriver__rx_frame_type__overrun
                                                 (us_split_fields1 b))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const decadriver__rx_frame_type__size__first__bit Int)

(declare-const decadriver__rx_frame_type__size__last__bit Int)

(declare-const decadriver__rx_frame_type__size__position Int)

;; decadriver__rx_frame_type__size__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__size__first__bit))

;; decadriver__rx_frame_type__size__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__size__first__bit decadriver__rx_frame_type__size__last__bit))

;; decadriver__rx_frame_type__size__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__size__position))

(declare-const decadriver__rx_frame_type__frame__first__bit Int)

(declare-const decadriver__rx_frame_type__frame__last__bit Int)

(declare-const decadriver__rx_frame_type__frame__position Int)

;; decadriver__rx_frame_type__frame__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__frame__first__bit))

;; decadriver__rx_frame_type__frame__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__frame__first__bit decadriver__rx_frame_type__frame__last__bit))

;; decadriver__rx_frame_type__frame__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__frame__position))

(declare-const decadriver__rx_frame_type__error__first__bit Int)

(declare-const decadriver__rx_frame_type__error__last__bit Int)

(declare-const decadriver__rx_frame_type__error__position Int)

;; decadriver__rx_frame_type__error__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__error__first__bit))

;; decadriver__rx_frame_type__error__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__error__first__bit decadriver__rx_frame_type__error__last__bit))

;; decadriver__rx_frame_type__error__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__error__position))

(declare-const decadriver__rx_frame_type__overrun__first__bit Int)

(declare-const decadriver__rx_frame_type__overrun__last__bit Int)

(declare-const decadriver__rx_frame_type__overrun__position Int)

;; decadriver__rx_frame_type__overrun__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__overrun__first__bit))

;; decadriver__rx_frame_type__overrun__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__overrun__first__bit decadriver__rx_frame_type__overrun__last__bit))

;; decadriver__rx_frame_type__overrun__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__overrun__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ()
((rx_frame_type__ref (mk_rx_frame_type__ref (rx_frame_type__content us_rep)))))
(define-fun rx_frame_type__ref___projection ((a rx_frame_type__ref)) us_rep
  (rx_frame_type__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array (_ BitVec 8) us_rep))))))
(declare-fun slide1 ((Array (_ BitVec 8) us_rep) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array (_ BitVec 8) us_rep) (_ BitVec 8) (_ BitVec 8)
  (Array (_ BitVec 8) us_rep) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i (_ BitVec 8)))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array (_ BitVec 8) us_rep)) (a__first (_ BitVec 8))
  (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) us_rep))
  (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_183 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_183)
                                    (bvule temp___idx_183 a__last))
                                    (= (bool_eq1 (select a temp___idx_183)
                                       (select b (bvadd (bvsub b__first a__first) temp___idx_183))) true))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_183 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_183) (bvule temp___idx_183 a__last))
  (= (bool_eq1 (select a temp___idx_183)
     (select b (bvadd (bvsub b__first a__first) temp___idx_183))) true))))))))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__decadriver__receiver_type__frame_queue (Array (_ BitVec 8) us_rep))(rec__decadriver__receiver_type__queue_head rx_frame_queue_index)(rec__decadriver__receiver_type__rx_count natural)(rec__decadriver__receiver_type__overrun_occurred Bool)(rec__decadriver__receiver_type__frame_ready Bool)))))
(define-fun us_split_fields_Frame_Queue__projection ((a us_split_fields2)) (Array (_ BitVec 8) us_rep)
  (rec__decadriver__receiver_type__frame_queue a))

(define-fun us_split_fields_Queue_Head__projection ((a us_split_fields2)) rx_frame_queue_index
  (rec__decadriver__receiver_type__queue_head a))

(define-fun us_split_fields_Rx_Count__projection ((a us_split_fields2)) natural
  (rec__decadriver__receiver_type__rx_count a))

(define-fun us_split_fields_Overrun_Occurred__projection ((a us_split_fields2)) Bool
  (rec__decadriver__receiver_type__overrun_occurred a))

(define-fun us_split_fields_Frame_Ready__projection ((a us_split_fields2)) Bool
  (rec__decadriver__receiver_type__frame_ready a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___138__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___139__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                    a))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const decadriver__receiver_type__frame_queue__first__bit Int)

(declare-const decadriver__receiver_type__frame_queue__last__bit Int)

(declare-const decadriver__receiver_type__frame_queue__position Int)

;; decadriver__receiver_type__frame_queue__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__frame_queue__first__bit))

;; decadriver__receiver_type__frame_queue__last__bit_axiom
  (assert
  (< decadriver__receiver_type__frame_queue__first__bit decadriver__receiver_type__frame_queue__last__bit))

;; decadriver__receiver_type__frame_queue__position_axiom
  (assert (<= 0 decadriver__receiver_type__frame_queue__position))

(declare-const decadriver__receiver_type__queue_head__first__bit Int)

(declare-const decadriver__receiver_type__queue_head__last__bit Int)

(declare-const decadriver__receiver_type__queue_head__position Int)

;; decadriver__receiver_type__queue_head__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__queue_head__first__bit))

;; decadriver__receiver_type__queue_head__last__bit_axiom
  (assert
  (< decadriver__receiver_type__queue_head__first__bit decadriver__receiver_type__queue_head__last__bit))

;; decadriver__receiver_type__queue_head__position_axiom
  (assert (<= 0 decadriver__receiver_type__queue_head__position))

(declare-const decadriver__receiver_type__rx_count__first__bit Int)

(declare-const decadriver__receiver_type__rx_count__last__bit Int)

(declare-const decadriver__receiver_type__rx_count__position Int)

;; decadriver__receiver_type__rx_count__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__rx_count__first__bit))

;; decadriver__receiver_type__rx_count__last__bit_axiom
  (assert
  (< decadriver__receiver_type__rx_count__first__bit decadriver__receiver_type__rx_count__last__bit))

;; decadriver__receiver_type__rx_count__position_axiom
  (assert (<= 0 decadriver__receiver_type__rx_count__position))

(declare-const decadriver__receiver_type__overrun_occurred__first__bit Int)

(declare-const decadriver__receiver_type__overrun_occurred__last__bit Int)

(declare-const decadriver__receiver_type__overrun_occurred__position Int)

;; decadriver__receiver_type__overrun_occurred__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__overrun_occurred__first__bit))

;; decadriver__receiver_type__overrun_occurred__last__bit_axiom
  (assert
  (< decadriver__receiver_type__overrun_occurred__first__bit decadriver__receiver_type__overrun_occurred__last__bit))

;; decadriver__receiver_type__overrun_occurred__position_axiom
  (assert (<= 0 decadriver__receiver_type__overrun_occurred__position))

(declare-const decadriver__receiver_type__frame_ready__first__bit Int)

(declare-const decadriver__receiver_type__frame_ready__last__bit Int)

(declare-const decadriver__receiver_type__frame_ready__position Int)

;; decadriver__receiver_type__frame_ready__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__frame_ready__first__bit))

;; decadriver__receiver_type__frame_ready__last__bit_axiom
  (assert
  (< decadriver__receiver_type__frame_ready__first__bit decadriver__receiver_type__frame_ready__last__bit))

;; decadriver__receiver_type__frame_ready__position_axiom
  (assert (<= 0 decadriver__receiver_type__frame_ready__position))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-datatypes ()
((receiver_type__ref
 (mk_receiver_type__ref (receiver_type__content us_rep1)))))
(define-fun receiver_type__ref___projection ((a receiver_type__ref)) us_rep1
  (receiver_type__content a))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range4 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Bool)

(declare-fun to_rep4 (rx_frame_queue_index) (_ BitVec 8))

(declare-fun of_rep4 ((_ BitVec 8)) rx_frame_queue_index)

;; inversion_axiom
  (assert
  (forall ((x rx_frame_queue_index))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x rx_frame_queue_index)) (! (in_range1
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 2))))
     (=> (in_range1 y) (= (to_rep4 (of_rep4 x)) y))) :pattern ((to_rep4
                                                               (of_rep4 x))) )))

(define-fun to_int4 ((x rx_frame_queue_index)) Int (bv2int (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x rx_frame_queue_index)) (! (in_range_int
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-fun temp___4475 (us_rep) (Array (_ BitVec 8) us_rep))

;; def_axiom
  (assert
  (forall ((temp___4477 us_rep))
  (forall ((temp___4478 (_ BitVec 8)))
  (= (select (temp___4475 temp___4477) temp___4478) temp___4477))))

(declare-fun temp___4479 ((_ BitVec 8)) (Array Int bits_8))

;; def_axiom
  (assert
  (forall ((temp___4481 (_ BitVec 8)))
  (forall ((temp___4482 Int))
  (= (select (temp___4479 temp___4481) temp___4482) (of_rep3 temp___4481)))))

(define-fun dynamic_invariant ((temp___expr_4469 us_rep1)
  (temp___is_init_4466 Bool) (temp___skip_constant_4467 Bool)
  (temp___do_toplevel_4468 Bool)) Bool (forall ((temp___4470 (_ BitVec 8)))
                                       (=>
                                       (and
                                       (bvule ((_ int2bv 8) 0) temp___4470)
                                       (bvule temp___4470 ((_ int2bv 8) 1)))
                                       (let ((temp___4471 (select (rec__decadriver__receiver_type__frame_queue
                                                                  (us_split_fields3
                                                                  temp___expr_4469)) temp___4470)))
                                       (ite (= (to_rep2
                                               (rec__decadriver__rx_frame_type__error
                                               (us_split_fields1 temp___4471))) 0)
                                       (< 0 (to_rep1
                                            (rec__decadriver__rx_frame_type__size
                                            (us_split_fields1 temp___4471))))
                                       (= (to_rep1
                                          (rec__decadriver__rx_frame_type__size
                                          (us_split_fields1 temp___4471))) 0))))))

(define-fun default_initial_assumption ((temp___expr_4473 us_rep1)
  (temp___skip_top_level_4474 Bool)) Bool (and
                                          (and
                                          (and
                                          (and
                                          (= (rec__decadriver__receiver_type__frame_queue
                                             (us_split_fields3
                                             temp___expr_4473)) (temp___4475
                                                                (mk___rep
                                                                (mk___split_fields
                                                                (of_rep1 0)
                                                                (temp___4479
                                                                ((_ int2bv 8) 0))
                                                                (of_rep2 0)
                                                                (of_int 0)))))
                                          (= (to_rep4
                                             (rec__decadriver__receiver_type__queue_head
                                             (us_split_fields3
                                             temp___expr_4473))) ((_ int2bv 8) 1)))
                                          (= (to_rep
                                             (rec__decadriver__receiver_type__rx_count
                                             (us_split_fields3
                                             temp___expr_4473))) 0))
                                          (= (rec__decadriver__receiver_type__overrun_occurred
                                             (us_split_fields3
                                             temp___expr_4473)) (of_int 0)))
                                          (= (rec__decadriver__receiver_type__frame_ready
                                             (us_split_fields3
                                             temp___expr_4473)) (of_int 0))))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_4407 Int)
  (temp___is_init_4404 Bool) (temp___skip_constant_4405 Bool)
  (temp___do_toplevel_4406 Bool)) Bool (=>
                                       (or (= temp___is_init_4404 true)
                                       (<= 0 1024)) (in_range2
                                       temp___expr_4407)))

(define-fun dynamic_invariant3 ((temp___expr_4413 Int)
  (temp___is_init_4410 Bool) (temp___skip_constant_4411 Bool)
  (temp___do_toplevel_4412 Bool)) Bool (=>
                                       (or (= temp___is_init_4410 true)
                                       (<= 0 5)) (in_range3
                                       temp___expr_4413)))

(define-fun dynamic_invariant4 ((temp___expr_4419 us_rep)
  (temp___is_init_4416 Bool) (temp___skip_constant_4417 Bool)
  (temp___do_toplevel_4418 Bool)) Bool (=> (= temp___do_toplevel_4418 true)
                                       (=> (= temp___is_init_4416 true)
                                       (ite (= (to_rep2
                                               (rec__decadriver__rx_frame_type__error
                                               (us_split_fields1
                                               temp___expr_4419))) 0)
                                       (< 0 (to_rep1
                                            (rec__decadriver__rx_frame_type__size
                                            (us_split_fields1
                                            temp___expr_4419))))
                                       (= (to_rep1
                                          (rec__decadriver__rx_frame_type__size
                                          (us_split_fields1 temp___expr_4419))) 0)))))

(define-fun dynamic_predicate ((temp___4430 us_rep)) Bool (ite (= (to_rep2
                                                                  (rec__decadriver__rx_frame_type__error
                                                                  (us_split_fields1
                                                                  temp___4430))) 0)
                                                          (< 0 (to_rep1
                                                               (rec__decadriver__rx_frame_type__size
                                                               (us_split_fields1
                                                               temp___4430))))
                                                          (= (to_rep1
                                                             (rec__decadriver__rx_frame_type__size
                                                             (us_split_fields1
                                                             temp___4430))) 0)))

(define-fun dynamic_invariant5 ((temp___expr_4437 (_ BitVec 8))
  (temp___is_init_4434 Bool) (temp___skip_constant_4435 Bool)
  (temp___do_toplevel_4436 Bool)) Bool (=>
                                       (or (= temp___is_init_4434 true)
                                       (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 1)))
                                       (in_range1 temp___expr_4437)))

(define-fun dynamic_invariant6 ((temp___expr_323 (_ BitVec 8))
  (temp___is_init_320 Bool) (temp___skip_constant_321 Bool)
  (temp___do_toplevel_322 Bool)) Bool true)

(declare-const decadriver__receiver_type__pending_frames_count__result Int)

(declare-const self__ (Array (_ BitVec 8) us_rep))

(declare-const self__1 rx_frame_queue_index)

(declare-const self__2 natural)

(declare-const self__3 Bool)

(declare-const self__4 Bool)

(declare-const result Int)

(declare-const decadriver__receiver_type__pending_frames_count__result1 Int)

(declare-const decadriver__receiver_type__pending_frames_count__result2 Int)

(declare-const decadriver__receiver_type__pending_frames_count__result3 Int)

(declare-const decadriver__receiver_type__pending_frames_count__result4 Int)

(declare-const decadriver__receiver_type__pending_frames_count__result5 Int)

(declare-const result1 Int)

;; H
  (assert (dynamic_invariant
  (mk___rep1 (mk___split_fields1 self__ self__1 self__2 self__3 self__4))
  true false true))

;; H
  (assert
  (= decadriver__receiver_type__pending_frames_count__result1 decadriver__receiver_type__pending_frames_count__result2))

;; H
  (assert
  (= decadriver__receiver_type__pending_frames_count__result3 decadriver__receiver_type__pending_frames_count__result1))

;; H
  (assert (= result decadriver__receiver_type__pending_frames_count__result))

;; H
  (assert
  (= decadriver__receiver_type__pending_frames_count__result1 (to_rep
                                                              self__2)))

;; H
  (assert
  (= (mk_int__ref decadriver__receiver_type__pending_frames_count__result4)
  (mk_int__ref decadriver__receiver_type__pending_frames_count__result2)))

;; H
  (assert
  (= decadriver__receiver_type__pending_frames_count__result5 decadriver__receiver_type__pending_frames_count__result3))

;; H
  (assert
  (= result1 decadriver__receiver_type__pending_frames_count__result4))

(assert
;; WP_parameter_def
 ;; File "decadriver.ads", line 77, characters 0-0
  (not (<= decadriver__receiver_type__pending_frames_count__result4 2)))
(check-sat)
(exit)
