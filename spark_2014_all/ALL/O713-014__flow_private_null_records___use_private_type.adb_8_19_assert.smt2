;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__private_types__root us_main_type)(rec__ext__ us_private)))))
(define-fun us_split_fields_Root__projection ((a us_split_fields)) us_main_type 
  (rec__private_types__root a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (us_main_eq
                           (rec__private_types__root (us_split_fields1 a))
                           (rec__private_types__root (us_split_fields1 b))) true)
                   true false))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-fun us_tag () Int)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy () us_rep)

(declare-datatypes () ((root__ref (mk_root__ref (root__content us_rep)))))
(define-fun root__ref___projection ((a root__ref)) us_rep (root__content a))

(define-fun default_initial_assumption ((temp___expr_136 us_rep)
  (temp___skip_top_level_137 Bool)) Bool (= (attr__tag temp___expr_136) 
  us_tag))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__private_types__root_d__c natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural 
  (rec__private_types__root_d__c a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__private_types__root_d us_main_type1)(rec__ext__1 us_private)))))
(define-fun us_split_fields_Root_D__projection ((a us_split_fields2)) us_main_type1 
  (rec__private_types__root_d a))

(define-fun us_split_fields_2__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun us_rep_5__projection ((a us_rep1)) Int (attr__tag1 a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__private_types__root_d__c
                            (us_split_discrs1 a))) (to_rep
                                                   (rec__private_types__root_d__c
                                                   (us_split_discrs1 b))))
                         (= (us_main_eq1
                            (rec__private_types__root_d (us_split_fields3 a))
                            (rec__private_types__root_d (us_split_fields3 b))) true))
                    true false))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-fun us_dispatch_eq1 (us_rep1 us_rep1) Bool)

(declare-fun us_tag1 () Int)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun private_types__root_d__c__first__bit () Int)

(declare-fun private_types__root_d__c__last__bit () Int)

(declare-fun private_types__root_d__c__position () Int)

;; private_types__root_d__c__first__bit_axiom
  (assert (<= 0 private_types__root_d__c__first__bit))

;; private_types__root_d__c__last__bit_axiom
  (assert
  (< private_types__root_d__c__first__bit private_types__root_d__c__last__bit))

;; private_types__root_d__c__position_axiom
  (assert (<= 0 private_types__root_d__c__position))

(declare-fun dummy2 () us_rep1)

(declare-datatypes ()
((root_d__ref (mk_root_d__ref (root_d__content us_rep1)))))
(define-fun root_d__ref___projection ((a root_d__ref)) us_rep1 (root_d__content
                                                               a))

(declare-fun c () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun c_d () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-datatypes ()
((us_split_discrs2
 (mk___split_discrs1 (rec__private_types__non_tagged__c natural)))))
(define-fun us_split_discrs_2__projection ((a us_split_discrs2)) natural 
  (rec__private_types__non_tagged__c a))

(declare-datatypes ()
((us_split_discrs__ref1
 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref_2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2 (rec__private_types__non_tagged us_main_type2)))))
(define-fun us_split_fields_Non_Tagged__projection ((a us_split_fields4)) us_main_type2 
  (rec__private_types__non_tagged a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2
 (mk___rep2
 (us_split_discrs3 us_split_discrs2)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep_6__projection ((a us_rep2)) us_split_discrs2 (us_split_discrs3
                                                                a))

(define-fun us_rep_7__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep
                            (rec__private_types__non_tagged__c
                            (us_split_discrs3 a))) (to_rep
                                                   (rec__private_types__non_tagged__c
                                                   (us_split_discrs3 b))))
                         (= (us_main_eq2
                            (rec__private_types__non_tagged
                            (us_split_fields5 a))
                            (rec__private_types__non_tagged
                            (us_split_fields5 b))) true))
                    true false))

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun private_types__non_tagged__c__first__bit () Int)

(declare-fun private_types__non_tagged__c__last__bit () Int)

(declare-fun private_types__non_tagged__c__position () Int)

;; private_types__non_tagged__c__first__bit_axiom
  (assert (<= 0 private_types__non_tagged__c__first__bit))

;; private_types__non_tagged__c__last__bit_axiom
  (assert
  (< private_types__non_tagged__c__first__bit private_types__non_tagged__c__last__bit))

;; private_types__non_tagged__c__position_axiom
  (assert (<= 0 private_types__non_tagged__c__position))

(declare-fun dummy3 () us_rep2)

(declare-datatypes ()
((non_tagged__ref (mk_non_tagged__ref (non_tagged__content us_rep2)))))
(define-fun non_tagged__ref___projection ((a non_tagged__ref)) us_rep2 
  (non_tagged__content a))

(declare-fun c_nt () us_rep2)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun pr__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun pr_d__split_discrs () us_split_discrs)

(declare-fun pr_d__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun pr_nt__split_discrs () us_split_discrs2)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-fun pr__split_fields () us_main_type)

(declare-fun pr__split_fields1 () us_private)

(declare-fun pr_d__split_fields () us_main_type1)

(declare-fun pr_d__split_fields1 () us_private)

(declare-fun pr_nt__split_fields () us_main_type2)

(declare-fun result () us_main_type)

(declare-fun result1 () us_private)

(declare-fun pr__split_fields2 () us_main_type)

(declare-fun pr__split_fields3 () us_private)

(declare-fun result2 () us_main_type1)

(declare-fun result3 () us_private)

(declare-fun pr_d__split_fields2 () us_main_type1)

(declare-fun pr_d__split_fields3 () us_private)

(declare-fun result4 () us_main_type2)

(declare-fun pr_nt__split_fields1 () us_main_type2)

;; H
  (assert (= result pr__split_fields))

;; H
  (assert (= result1 pr__split_fields1))

;; H
  (assert
  (= (mk___split_fields pr__split_fields2 pr__split_fields3) (us_split_fields1
                                                             c)))

;; H
  (assert (= pr__attr__tag (attr__tag c)))

;; H
  (assert (= result2 pr_d__split_fields))

;; H
  (assert (= result3 pr_d__split_fields1))

;; H
  (assert
  (= (mk___split_fields1 pr_d__split_fields2 pr_d__split_fields3) (us_split_fields3
                                                                  c_d)))

;; H
  (assert (= pr_d__split_discrs (us_split_discrs1 c_d)))

;; H
  (assert (= pr_d__attr__tag (attr__tag1 c_d)))

;; H
  (assert (= result4 pr_nt__split_fields))

;; H
  (assert
  (= (mk___split_fields2 pr_nt__split_fields1) (us_split_fields5 c_nt)))

;; H
  (assert (= pr_nt__split_discrs (us_split_discrs3 c_nt)))

(assert
;; WP_parameter_def
 ;; File "use_private_type.adb", line 3, characters 0-0
  (not (= pr__attr__tag us_tag)))
(check-sat)
