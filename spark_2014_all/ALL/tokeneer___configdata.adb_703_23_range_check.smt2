;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-fun dummy4 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq2 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun dummy5 () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-sort accesspolicyt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (accesspolicyt accesspolicyt) Bool)

(declare-fun dummy6 () accesspolicyt)

(declare-datatypes ()
((accesspolicyt__ref
 (mk_accesspolicyt__ref (accesspolicyt__content accesspolicyt)))))
(define-fun accesspolicyt__ref___projection ((a accesspolicyt__ref)) accesspolicyt
  (accesspolicyt__content a))

(define-fun dynamic_invariant1 ((temp___expr_852 Int)
  (temp___is_init_849 Bool) (temp___skip_constant_850 Bool)
  (temp___do_toplevel_851 Bool)) Bool (=>
                                      (or (= temp___is_init_849 true)
                                      (<= 0 1)) (in_range5 temp___expr_852)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort accesspolicytexti 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 13)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (accesspolicytexti accesspolicytexti) Bool)

(declare-fun dummy7 () accesspolicytexti)

(declare-datatypes ()
((accesspolicytexti__ref
 (mk_accesspolicytexti__ref (accesspolicytexti__content accesspolicytexti)))))
(define-fun accesspolicytexti__ref___projection ((a accesspolicytexti__ref)) accesspolicytexti
  (accesspolicytexti__content a))

(declare-fun accesspolicytitle () (Array Int character))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun temp___String_Literal_157 (tuple0) (Array Int character))

;; temp___String_Literal_157__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 2)) 67))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 3)) 67))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 4)) 69))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 5)) 83))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 6)) 83))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 7)) 80))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 8)) 79))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 9)) 76))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 10)) 73))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 11)) 67))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 12)) 89))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 13)) 32)) :pattern (
  (temp___String_Literal_157 us_void_param)) )))

(declare-sort accesstexti 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (accesstexti accesstexti) Bool)

(declare-fun dummy8 () accesstexti)

(declare-datatypes ()
((accesstexti__ref (mk_accesstexti__ref (accesstexti__content accesstexti)))))
(define-fun accesstexti__ref___projection ((a accesstexti__ref)) accesstexti
  (accesstexti__content a))

(declare-fun to_rep2 (accesstexti) Int)

(declare-fun of_rep2 (Int) accesstexti)

;; inversion_axiom
  (assert
  (forall ((x accesstexti))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x accesstexti)) (! (in_range7
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun dummy9 () (Array Int character))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq9 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__configdata__accessstringt__text (Array Int character))(rec__configdata__accessstringt__length accesstexti)))))
(define-fun us_split_fields_Text2__projection ((a us_split_fields)) (Array Int character)
  (rec__configdata__accessstringt__text a))

(define-fun us_split_fields_Length3__projection ((a us_split_fields)) accesstexti
  (rec__configdata__accessstringt__length a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_8__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_9__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                               a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq
                            (rec__configdata__accessstringt__text
                            (us_split_fields1 a)) 1 12
                            (rec__configdata__accessstringt__text
                            (us_split_fields1 b)) 1 12) true)
                         (= (to_rep2
                            (rec__configdata__accessstringt__length
                            (us_split_fields1 a))) (to_rep2
                                                   (rec__configdata__accessstringt__length
                                                   (us_split_fields1 b)))))
                    true false))

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-fun configdata__accessstringt__text__first__bit () Int)

(declare-fun configdata__accessstringt__text__last__bit () Int)

(declare-fun configdata__accessstringt__text__position () Int)

;; configdata__accessstringt__text__first__bit_axiom
  (assert (<= 0 configdata__accessstringt__text__first__bit))

;; configdata__accessstringt__text__last__bit_axiom
  (assert
  (< configdata__accessstringt__text__first__bit configdata__accessstringt__text__last__bit))

;; configdata__accessstringt__text__position_axiom
  (assert (<= 0 configdata__accessstringt__text__position))

(declare-fun configdata__accessstringt__length__first__bit () Int)

(declare-fun configdata__accessstringt__length__last__bit () Int)

(declare-fun configdata__accessstringt__length__position () Int)

;; configdata__accessstringt__length__first__bit_axiom
  (assert (<= 0 configdata__accessstringt__length__first__bit))

;; configdata__accessstringt__length__last__bit_axiom
  (assert
  (< configdata__accessstringt__length__first__bit configdata__accessstringt__length__last__bit))

;; configdata__accessstringt__length__position_axiom
  (assert (<= 0 configdata__accessstringt__length__position))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-fun dummy10 () us_rep1)

(declare-datatypes ()
((accessstringt__ref
 (mk_accessstringt__ref (accessstringt__content us_rep1)))))
(define-fun accessstringt__ref___projection ((a accessstringt__ref)) us_rep1
  (accessstringt__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_177 Int))
                           (=>
                           (and (<= a__first temp___idx_177)
                           (<= temp___idx_177 a__last))
                           (= (bool_eq3 (select a temp___idx_177)
                              (select b (+ (- b__first a__first) temp___idx_177))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_177 Int))
  (=> (and (<= a__first temp___idx_177) (<= temp___idx_177 a__last))
  (= (bool_eq3 (select a temp___idx_177)
     (select b (+ (- b__first a__first) temp___idx_177))) true))))))))

(declare-fun accessstringlookup () (Array Int us_rep1))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun configdata__accessstringlookup__aggregate_def (us_rep1
  us_rep1) (Array Int us_rep1))

;; def_axiom
  (assert
  (forall ((temp___179 us_rep1) (temp___180 us_rep1))
  (let ((temp___178 (configdata__accessstringlookup__aggregate_def temp___179
                    temp___180)))
  (and (= (select temp___178 1) temp___179)
  (= (select temp___178 0) temp___180)))))

(declare-fun temp___String_Literal_182 (tuple0) (Array Int character))

;; temp___String_Literal_182__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 1)) 97)
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 2)) 108))
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 3)) 108))
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 4)) 104))
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 5)) 111))
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 6)) 117))
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 7)) 114))
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 8)) 115))
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_182 us_void_param) 12)) 32)) :pattern (
  (temp___String_Literal_182 us_void_param)) )))

(declare-fun temp___String_Literal_183 (tuple0) (Array Int character))

;; temp___String_Literal_183__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 1)) 119)
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 3)) 114))
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 4)) 107))
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 5)) 105))
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 6)) 110))
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 7)) 103))
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 8)) 104))
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 9)) 111))
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 10)) 117))
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 11)) 114))
     (= (to_rep (select (temp___String_Literal_183 us_void_param) 12)) 115)) :pattern (
  (temp___String_Literal_183 us_void_param)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (integer integer) Bool)

(declare-fun dummy11 () integer)

(declare-datatypes () ((t33b__ref (mk_t33b__ref (t33b__content integer)))))
(define-fun t33b__ref___projection ((a t33b__ref)) integer (t33b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant6 ((temp___expr_993 Int)
  (temp___is_init_990 Bool) (temp___skip_constant_991 Bool)
  (temp___do_toplevel_992 Bool)) Bool (=>
                                      (or (= temp___is_init_990 true)
                                      (<= 1 13)) (in_range6 temp___expr_993)))

;; accesspolicytitle__def_axiom
  (assert (= accesspolicytitle (temp___String_Literal_157 Tuple0)))

(define-fun dynamic_invariant7 ((temp___expr_1093 Int)
  (temp___is_init_1090 Bool) (temp___skip_constant_1091 Bool)
  (temp___do_toplevel_1092 Bool)) Bool (=>
                                       (or (= temp___is_init_1090 true)
                                       (<= 1 12)) (in_range7
                                       temp___expr_1093)))

;; accessstringlookup__def_axiom
  (assert
  (= accessstringlookup (configdata__accessstringlookup__aggregate_def
                        (mk___rep
                        (mk___split_fields (temp___String_Literal_182 Tuple0)
                        (of_rep2 8)))
                        (mk___rep
                        (mk___split_fields (temp___String_Literal_183 Tuple0)
                        (of_rep2 12))))))

(declare-fun theaccesspolicy () Int)

(declare-fun thetitle () (Array Int character))

(declare-fun rawaccesspolicy () (Array Int character))

(declare-fun stop () Int)

(declare-fun matched () Bool)

(declare-fun ap () Int)

(declare-fun r32b () Int)

(declare-fun o () accesstexti)

(declare-fun o1 () (Array Int character))

(declare-fun o2 () accesstexti)

(declare-fun o3 () accesstexti)

(declare-fun o4 () (Array Int character))

(declare-fun o5 () accesstexti)

(declare-fun o6 () (Array Int character))

(declare-fun o7 () accesstexti)

(declare-fun o8 () (Array Int character))

(declare-fun o9 () accesstexti)

(declare-fun temp___1216 () (Array Int us_rep1))

(declare-fun o10 () integer)

(declare-fun o11 () integer)

(declare-fun o12 () integer)

(declare-fun o13 () integer)

(declare-fun result () Bool)

(declare-fun matched1 () Bool)

(declare-fun result1 () Int)

(declare-fun theaccesspolicy1 () Int)

(declare-fun stop1 () Int)

(declare-fun file__getstring__text () (Array Int character))

(declare-fun result2 () (Array Int character))

(declare-fun thetitle1 () (Array Int character))

(declare-fun stop2 () Int)

(declare-fun file__getline__item () (Array Int character))

(declare-fun result3 () (Array Int character))

(declare-fun rawaccesspolicy1 () (Array Int character))

(declare-fun result4 () Int)

(declare-fun ap1 () Int)

(declare-fun result5 () Bool)

(declare-fun matched2 () Bool)

(declare-fun result6 () int__ref)

(declare-fun r32b1 () Int)

;; H
  (assert (= (temp___String_Literal_157 Tuple0) accesspolicytitle))

;; H
  (assert (= (to_rep2 o3) 12))

;; H
  (assert (= (temp___String_Literal_183 Tuple0) o4))

;; H
  (assert (= o3 o5))

;; H
  (assert (= o6 o4))

;; H
  (assert (= o7 o5))

;; H
  (assert (= (to_rep2 o) 8))

;; H
  (assert (= (temp___String_Literal_182 Tuple0) o1))

;; H
  (assert (= o o2))

;; H
  (assert (= o8 o1))

;; H
  (assert (= o9 o2))

;; H
  (assert
  (= temp___1216 (configdata__accessstringlookup__aggregate_def
                 (mk___rep (mk___split_fields o8 o9))
                 (mk___rep (mk___split_fields o6 o7)))))

;; H
  (assert (= temp___1216 accessstringlookup))

;; H
  (assert (=> (<= 0 1) (in_range5 theaccesspolicy)))

;; H
  (assert (=> (<= 0 2147483647) (in_range4 stop)))

;; H
  (assert (= result matched))

;; H
  (assert (= matched1 (of_int 0)))

;; H
  (assert (= result1 theaccesspolicy))

;; H
  (assert (= theaccesspolicy1 0))

;; H
  (assert (= (to_rep1 o11) 13))

;; H
  (assert (= (to_rep1 o10) 1))

;; H
  (assert (in_range4 stop1))

;; H
  (assert (= result2 thetitle))

;; H
  (assert
  (= thetitle1 (slide file__getstring__text (to_rep1 (first (mk 1 13))) 1)))

;; H
  (assert (= stop1 13))

;; H
  (assert (= (bool_eq thetitle1 1 13 accesspolicytitle 1 13) true))

;; H
  (assert (= (to_rep1 o13) 12))

;; H
  (assert (= (to_rep1 o12) 1))

;; H
  (assert (in_range4 stop2))

;; H
  (assert (= result3 rawaccesspolicy))

;; H
  (assert
  (= rawaccesspolicy1 (slide file__getline__item (to_rep1 (first (mk 1 12)))
                      1)))

;; H
  (assert (= result4 ap))

;; H
  (assert (= ap1 0))

;; H
  (assert
  (= stop2 (to_rep2
           (rec__configdata__accessstringt__length
           (us_split_fields1 (select accessstringlookup ap1))))))

;; H
  (assert (= matched1 result5))

;; H
  (assert (= matched2 (of_int 1)))

;; H
  (assert (= result6 (mk_int__ref r32b)))

;; H
  (assert (= r32b1 stop2))

;; H
  (assert (in_range4 r32b1))

;; H
  (assert (<= 1 r32b1))

(assert
;; WP_parameter_def
 ;; File "configdata.adb", line 646, characters 0-0
  (not (<= 1 1)))
(check-sat)
(exit)
