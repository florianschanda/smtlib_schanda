(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__p__pt__x : integer
}

function us_split_discrs___projection(a: us_split_discrs) : integer =
  (a).rec__p__pt__x

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. (0 <= object__size({ us_split_discrs1 = {
  rec__p__pt__x = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. (0 <= object__alignment({ us_split_discrs1 = {
  rec__p__pt__x = a } })))

logic p__pt__x__first__bit : int

logic p__pt__x__last__bit : int

logic p__pt__x__position : int

axiom p__pt__x__first__bit_axiom : (0 <= p__pt__x__first__bit)

axiom p__pt__x__last__bit_axiom :
  (p__pt__x__first__bit <  p__pt__x__last__bit)

axiom p__pt__x__position_axiom : (0 <= p__pt__x__position)

logic user_eq1 : us_rep, us_rep -> bool

type pt__ref = { pt__content : us_rep
}

function pt__ref___projection(a: pt__ref) : us_rep = (a).pt__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs2 = { rec__p__tt__x : integer
}

function us_split_discrs___2__projection(a: us_split_discrs2) : integer =
  (a).rec__p__tt__x

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields = { rec__p__tt : us_main_type
}

function us_split_fields_TT__projection(a: us_split_fields) : us_main_type =
  (a).rec__p__tt

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields1 :
us_split_fields
}

function us_rep___2__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___3__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:us_main_type. (0 <= object__size1({
  us_split_discrs3 = { rec__p__tt__x = a }; us_split_fields1 = { rec__p__tt =
  a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:us_main_type. (0 <= object__alignment1({
  us_split_discrs3 = { rec__p__tt__x = a }; us_split_fields1 = { rec__p__tt =
  a1 } })))

logic p__tt__x__first__bit : int

logic p__tt__x__last__bit : int

logic p__tt__x__position : int

axiom p__tt__x__first__bit_axiom : (0 <= p__tt__x__first__bit)

axiom p__tt__x__last__bit_axiom :
  (p__tt__x__first__bit <  p__tt__x__last__bit)

axiom p__tt__x__position_axiom : (0 <= p__tt__x__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

type tt__ref = { tt__content : us_rep1
}

function tt__ref___projection(a: tt__ref) : us_rep1 = (a).tt__content

type us_rep2 = { us_split_discrs4 : us_split_discrs
}

function us_rep___4__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs4

function to_base(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs4 }

function of_base(r: us_rep) : us_rep2 = { us_split_discrs4 =
  (r).us_split_discrs1 }

predicate in_range1(rec__p__pt__x1: int, a: us_rep) =
  (rec__p__pt__x1 = to_rep(((a).us_split_discrs1).rec__p__pt__x))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:integer. (0 <= object__size2({ us_split_discrs4 = {
  rec__p__pt__x = a } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:integer. (0 <= object__alignment2({ us_split_discrs4 = {
  rec__p__pt__x = a } })))

logic p__pt__x__first__bit1 : int

logic p__pt__x__last__bit1 : int

logic p__pt__x__position1 : int

axiom p__pt__x__first__bit_axiom1 : (0 <= p__pt__x__first__bit1)

axiom p__pt__x__last__bit_axiom1 :
  (p__pt__x__first__bit1 <  p__pt__x__last__bit1)

axiom p__pt__x__position_axiom1 : (0 <= p__pt__x__position1)

logic user_eq3 : us_rep2, us_rep2 -> bool

type tpoS__ref = { tpoS__content : us_rep2
}

function tpoS__ref___projection(a: tpoS__ref) : us_rep2 = (a).tpoS__content

logic po__split_discrs : integer

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_fields2 = { rec__p__tt1 : us_main_type
}

function us_split_fields_TT__2__projection(a: us_split_fields2) : us_main_type =
  (a).rec__p__tt1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep3 = { us_split_discrs5 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___5__projection(a: us_rep3) : us_split_discrs2 =
  (a).us_split_discrs5

function us_rep___6__projection(a: us_rep3) : us_split_fields2 =
  (a).us_split_fields3

function to_base1(a: us_rep3) : us_rep1 = { us_split_discrs3 =
  (a).us_split_discrs5; us_split_fields1 = { rec__p__tt =
  ((a).us_split_fields3).rec__p__tt1 } }

function of_base1(r: us_rep1) : us_rep3 = { us_split_discrs5 =
  (r).us_split_discrs3; us_split_fields3 = { rec__p__tt1 =
  ((r).us_split_fields1).rec__p__tt } }

predicate in_range2(rec__p__tt__x1: int, a: us_rep1) =
  (rec__p__tt__x1 = to_rep(((a).us_split_discrs3).rec__p__tt__x))

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:integer. forall a1:us_main_type. (0 <= object__size3({
  us_split_discrs5 = { rec__p__tt__x = a }; us_split_fields3 = {
  rec__p__tt1 = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:integer. forall a1:us_main_type. (0 <= object__alignment3({
  us_split_discrs5 = { rec__p__tt__x = a }; us_split_fields3 = {
  rec__p__tt1 = a1 } })))

logic p__tt__x__first__bit1 : int

logic p__tt__x__last__bit1 : int

logic p__tt__x__position1 : int

axiom p__tt__x__first__bit_axiom1 : (0 <= p__tt__x__first__bit1)

axiom p__tt__x__last__bit_axiom1 :
  (p__tt__x__first__bit1 <  p__tt__x__last__bit1)

axiom p__tt__x__position_axiom1 : (0 <= p__tt__x__position1)

logic user_eq4 : us_rep3, us_rep3 -> bool

type ttoS__ref = { ttoS__content : us_rep3
}

function ttoS__ref___projection(a: ttoS__ref) : us_rep3 = (a).ttoS__content

logic to____split_discrs : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic po_x : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic to_x : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "system.ads", line 81, characters 0-0 *)
goal WP_parameter_def :
  (forall us:int. forall us1:int. forall o:integer. forall o1:integer.
  forall o2:integer. forall p__po_x__assume:int. (((us = 0) and
  in_range(0)) -> ((to_rep(po__split_discrs) = 0) ->
  ((0 = to_rep(po__split_discrs)) -> (((us1 = 0) and in_range(0)) ->
  ((to_rep(to____split_discrs) = 0) -> ((0 = to_rep(to____split_discrs)) ->
  ((((((po__split_discrs = o) and (o = o1)) and (o2 = o1)) and
  (p__po_x__assume = to_rep(o2))) and (p__po_x__assume = po_x)) ->
  (in_range(po_x) -> ((to_rep(to____split_discrs) = to_x) ->
  (in_range(to_x) -> ((po_x = 0) -> (to_x = 0)))))))))))))
