(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep : positive -> int

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic to_rep2 : integer -> int

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep2(first(mk(f, l))) = f) and (to_rep2(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

type text__ref = { text__content : us_t
}

function text__ref___projection(a: text__ref) : us_t = (a).text__content

logic match_at : us_t, us_t, int -> bool

logic match_at__function_guard : bool, us_t, us_t, int -> prop

logic partial_match_at : us_t, us_t, int, int -> bool

logic partial_match_at__function_guard : bool, us_t, us_t, int, int -> prop

axiom match_at__post_axiom : true

axiom match_at__def_axiom :
  (forall needle:(int,character) farray. forall needle1:t.
  forall haystack:(int,character) farray. forall haystack1:t.
  (forall loc:int [match_at({ elts = needle; rt = needle1 }, { elts =
  haystack; rt = haystack1 }, loc)]. ((match_at({ elts = needle; rt = needle1
  }, { elts = haystack; rt = haystack1 }, loc) = true) <->
  (((loc - 1) <= (length({ elts = haystack; rt = haystack1 }) - length({
  elts = needle; rt = needle1 }))) and (partial_match_at({ elts = needle;
  rt = needle1 }, { elts = haystack; rt = haystack1 }, loc, length({ elts =
  needle; rt = needle1 })) = true)))))

type map__ref1 = { map__content1 : (int,positive) farray
}

logic slide1 : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq1 :
  (forall a:(int,positive) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> (int,positive) farray

axiom concat_def1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : positive, int -> (int,positive) farray

axiom singleton_def1 :
  (forall v:positive.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,positive) farray. forall a__first:int. forall a__last:int.
  forall b:(int,positive) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare1 : (int,positive) farray, int, int, (int,positive) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic needle : (int,character) farray

logic needle1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic haystack : (int,character) farray

logic haystack1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type t54b__ref = { t54b__content : integer
}

function t54b__ref___projection(a: t54b__ref) : integer = (a).t54b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep2(first2(mk1(f, l))) = f) and (to_rep2(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep2(first2((a).rt1))

function last3(a: us_t1) : int = to_rep2(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep2(first2((x).rt1)), to_rep2(last2((x).rt1)), (y).elts1,
  to_rep2(first2((y).rt1)), to_rep2(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,character) farray

logic dummy7 : t1

type t55b__ref = { t55b__content : us_t1
}

function t55b__ref___projection(a: t55b__ref) : us_t1 = (a).t55b__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t60b__ref = { t60b__content : integer
}

function t60b__ref___projection(a: t60b__ref) : integer = (a).t60b__content

logic attr__ATTRIBUTE_ADDRESS9 : int

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : natural, natural -> bool

logic dummy9 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

axiom partial_match_at__post_axiom : true

axiom partial_match_at__def_axiom :
  (forall needle2:(int,character) farray. forall needle3:t.
  forall haystack2:(int,character) farray. forall haystack3:t.
  (forall loc:int. forall len:int [partial_match_at({ elts = needle2; rt =
  needle3 }, { elts = haystack2; rt = haystack3 }, loc, len)].
  ((partial_match_at({ elts = needle2; rt = needle3 }, { elts = haystack2;
  rt = haystack3 }, loc, len) = true) <->
  (forall i:int. (((1 <= i) and (i <= len)) ->
  (to_rep1((needle2[i])) = to_rep1((haystack2[(loc + (i - 1))]))))))))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall i:int. forall r52b:int. forall r53b:int. forall shift:int.
  forall r58b:int. forall r59b:int. forall k:int.
  forall string_search__qs__result:int. forall o:int. forall o1:int.
  forall o2:int. forall o3:int. forall o4:int. forall o5:int.
  forall temp___309:int. forall temp___308:int. forall temp___307:int.
  forall temp___306:int. forall temp___304:int. forall temp___305:int.
  forall temp___311:int. forall o6:int. forall o7:int. forall o8:int.
  forall o9:(int,character) farray. forall temp___296:(int,character) farray.
  forall temp___2961:t1. forall o10:int. forall o11:int. forall o12:int.
  forall o13:int. forall o14:int. forall o15:int. forall o16:int.
  forall o17:int. forall temp___297:int. forall o18:int.
  forall o19:character. forall o20:int. forall o21:positive. forall o22:int.
  forall o23:int. forall o24:int. forall o25:int. forall temp___300:int.
  forall o26:int. forall o27:int. forall temp___303:int. forall o28:int.
  forall o29:character. forall o30:int. forall o31:positive. forall o32:int.
  forall o33:int. forall o34:int. forall o35:int. forall o36:int.
  forall o37:int. forall o38:int. forall o39:int. forall o40:int.
  forall o41:bool. forall o42:int. forall o43:int. forall o44:int.
  forall o45:(int,character) farray.
  forall temp___2962:(int,character) farray. forall temp___2963:t1.
  forall o46:int. forall o47:int. forall o48:int. forall o49:int.
  forall o50:int. forall o51:int. forall o52:int. forall o53:int.
  forall o54:int. forall o55:int. forall o56:int. forall r52b1:int.
  forall r53b1:int. forall shift1:int. forall r58b1:int. forall r59b1:int.
  forall k1:int. forall string_search__qs__result1:int.
  forall bad_shift:(int,positive) farray. forall result:int. forall i1:int.
  forall result1:bool. forall temp___3111:int. forall result2:int.
  forall r52b2:int. forall result3:int. forall r53b2:int.
  forall result4:bool. forall result5:int.
  forall string_search__qs__result2:int. forall result6:bool.
  forall result7:int. forall shift2:int. forall result8:int.
  forall r58b2:int. forall result9:int. forall r59b2:int.
  forall result10:int. forall k2:int. forall k3:int. forall k4:int.
  forall k5:int. forall k6:int. forall k7:int. forall i2:int.
  forall r52b3:int. forall r53b3:int. forall shift3:int. forall r58b3:int.
  forall r59b3:int. forall k8:int. forall string_search__qs__result3:int.
  forall temp___3112:int. forall result11:int. forall temp___3113:int.
  forall result12:int. forall i3:int. forall result13:bool.
  forall result14:int. forall r52b4:int. forall result15:int.
  forall r53b4:int. forall result16:bool. forall result17:int.
  forall string_search__qs__result4:int.
  forall string_search__qs__result5:int.
  forall string_search__qs__result6:int. forall result18:bool.
  forall r52b5:int. forall r53b5:int. forall string_search__qs__result7:int.
  forall r52b6:int. forall r53b6:int. forall string_search__qs__result8:int.
  forall i4:int__ref. forall r52b7:int__ref. forall r53b7:int__ref.
  forall shift4:int__ref. forall r58b4:int__ref. forall r59b4:int__ref.
  forall k9:int__ref. forall string_search__qs__result9:int__ref.
  forall temp___3114:int__ref. forall i5:int. forall r52b8:int.
  forall r53b8:int. forall shift5:int. forall r58b5:int. forall r59b5:int.
  forall k10:int. forall string_search__qs__result10:int.
  forall temp___3115:int. forall i6:int__ref. forall r52b9:int__ref.
  forall r53b9:int__ref. forall shift6:int__ref. forall r58b6:int__ref.
  forall r59b6:int__ref. forall k11:int__ref.
  forall string_search__qs__result11:int__ref. forall temp___3116:int__ref.
  forall i7:int. forall r52b10:int. forall r53b10:int. forall shift7:int.
  forall r58b7:int. forall r59b7:int. forall k12:int.
  forall string_search__qs__result12:int. forall temp___3117:int.
  forall i8:int__ref. forall r52b11:int__ref. forall r53b11:int__ref.
  forall shift8:int__ref. forall r58b8:int__ref. forall r59b8:int__ref.
  forall k13:int__ref. forall string_search__qs__result13:int__ref.
  forall i9:int. forall r52b12:int. forall r53b12:int. forall shift9:int.
  forall r58b9:int. forall r59b9:int. forall k14:int.
  forall string_search__qs__result14:int. forall i10:int__ref.
  forall r52b13:int__ref. forall r53b13:int__ref. forall shift10:int__ref.
  forall r58b10:int__ref. forall r59b10:int__ref. forall k15:int__ref.
  forall string_search__qs__result15:int__ref. forall i11:int.
  forall r52b14:int. forall r53b14:int. forall shift11:int.
  forall r58b11:int. forall r59b11:int. forall k16:int.
  forall string_search__qs__result16:int. forall result19:int__ref.
  forall string_search__qs__result17:int.
  forall string_search__qs__result18:int__ref.
  forall string_search__qs__result19:int. forall i12:int__ref.
  forall r52b15:int__ref. forall r53b15:int__ref. forall shift12:int__ref.
  forall r58b12:int__ref. forall r59b12:int__ref. forall k17:int__ref.
  forall string_search__qs__result20:int__ref. forall i13:int.
  forall r52b16:int. forall r53b16:int. forall shift13:int.
  forall r58b13:int. forall r59b13:int. forall k18:int.
  forall string_search__qs__result21:int. forall bad_shift1:map__ref1.
  forall i14:int__ref. forall r52b17:int__ref. forall r53b17:int__ref.
  forall shift14:int__ref. forall r58b14:int__ref. forall r59b14:int__ref.
  forall k19:int__ref. forall string_search__qs__result22:int__ref.
  forall bad_shift2:(int,positive) farray. forall i15:int. forall r52b18:int.
  forall r53b18:int. forall shift15:int. forall r58b15:int.
  forall r59b15:int. forall k20:int. forall string_search__qs__result23:int.
  ((dynamic_property(1, 2147483647, to_rep2(first(needle1)),
  to_rep2(last(needle1))) and (to_rep2(first(needle1)) = 1)) ->
  ((dynamic_property(1, 2147483647, to_rep2(first(haystack1)),
  to_rep2(last(haystack1))) and (to_rep2(first(haystack1)) = 1)) ->
  (((length({ elts = needle; rt = needle1 }) <  2147483647) and ((length({
  elts = haystack; rt = haystack1 }) <  2147483646) and ((1 <= length({
  elts = needle; rt = needle1 })) and (length({ elts = needle; rt = needle1
  }) <= length({ elts = haystack; rt = haystack1 }))))) ->
  (((((1 <= 2147483647) -> in_range2(i)) and
  (((forall c:int. (((0 <= c) and (c <= 255)) ->
    ((1 <= to_rep((bad_shift[c]))) and (to_rep((bad_shift[c])) <= (length({
    elts = needle; rt = needle1 }) + 1))))) and
  (forall c:int. (((0 <= c) and (c <= 255)) ->
  (((to_rep((bad_shift[c])) = (length({ elts = needle; rt = needle1
  }) + 1)) and
  (forall k21:int. (((to_rep2(first(needle1)) <= k21) and
  (k21 <= to_rep2(last(needle1)))) -> (not (c = to_rep1((needle[k21]))))))) or
  ((not (to_rep((bad_shift[c])) = (length({ elts = needle; rt = needle1
  }) + 1))) and ((to_rep1((needle[((length({ elts = needle; rt = needle1
  }) - to_rep((bad_shift[c]))) + 1)])) = c) and
  (forall k21:int. (((((length({ elts = needle; rt = needle1
  }) - to_rep((bad_shift[c]))) + 2) <= k21) and
  (k21 <= to_rep2(last(needle1)))) -> (not (to_rep1((needle[k21])) = c)))))))))) and
  ((({ int__content = result } = { int__content = i }) and (i1 = 1)) and
  (((((string_search__qs__result20 = string_search__qs__result11) and
  ((k17 = k11) and ((r59b12 = r59b6) and ((r58b12 = r58b6) and
  ((shift12 = shift6) and ((r53b15 = r53b9) and ((r52b15 = r52b9) and
  (i12 = i6)))))))) and
  ((string_search__qs__result21 = string_search__qs__result12) and
  ((k18 = k12) and ((r59b13 = r59b7) and ((r58b13 = r58b7) and
  ((shift13 = shift7) and ((r53b16 = r53b10) and ((r52b16 = r52b10) and
  (i13 = i7))))))))) and ((((((((o = length({ elts = needle; rt = needle1
  })) and in_range1(length({ elts = needle; rt = needle1 }))) and
  (((o1 = length({ elts = haystack; rt = haystack1 })) and in_range1(length({
  elts = haystack; rt = haystack1 }))) and (o2 = (o1 - o)))) and
  ((o3 = o2) and in_range1(o2))) and (o4 = (o3 + 1))) and ((o5 = o4) and
  in_range1(o4))) and (((i1 <= o5) and (result1 = true)) or
  ((not (i1 <= o5)) and (result1 = false)))) and ((result1 = true) and
  ((temp___309 = shift) and ((temp___308 = r59b) and ((temp___307 = r58b) and
  ((temp___306 = r53b) and ((temp___304 = i1) and ((temp___305 = r52b) and
  ((0 = temp___311) and (((({ int__content = result2 } = { int__content =
  r52b }) and (r52b2 = i1)) and in_range2(r52b2)) and
  (((((((o6 = (to_rep2(last(needle1)) - 1)) and
  in_range1((to_rep2(last(needle1)) - 1))) and (o7 = (i1 + o6))) and
  ((o8 = o7) and in_range1(o7))) and (({ int__content = result3 } = {
  int__content = r53b }) and (r53b2 = o8))) and in_range1(r53b2)) and
  (((((temp___3116 = { int__content = temp___311 }) and
  ((string_search__qs__result11 = { int__content = string_search__qs__result2
  }) and ((k11 = { int__content = k }) and ((r59b6 = { int__content = r59b
  }) and ((r58b6 = { int__content = r58b }) and ((shift6 = { int__content =
  shift }) and ((r53b9 = { int__content = r53b2 }) and ((r52b9 = {
  int__content = r52b2 }) and (i6 = { int__content = i1 }))))))))) and
  ((temp___3117 = temp___3111) and
  ((string_search__qs__result12 = string_search__qs__result2) and
  ((k12 = k1) and ((r59b7 = r59b1) and ((r58b7 = r58b1) and
  ((shift7 = shift1) and ((r53b10 = r53b2) and ((r52b10 = r52b2) and
  (i7 = i1)))))))))) and ((((((r52b2 <= r53b2) ->
  (((to_rep2(first(haystack1)) <= r52b2) and
  (r52b2 <= to_rep2(last(haystack1)))) and
  ((to_rep2(first(haystack1)) <= r53b2) and
  (r53b2 <= to_rep2(last(haystack1)))))) and (o9 = haystack)) and
  ((o9 = temp___296) and (mk1(r52b2, r53b2) = temp___2961))) and
  (result4 = bool_eq5(needle, to_rep2(first(needle1)),
  to_rep2(last(needle1)), temp___296, to_rep2(first2(temp___2961)),
  to_rep2(last2(temp___2961))))) and ((result4 = true) and (({ int__content =
  result5 } = { int__content = string_search__qs__result }) and
  (string_search__qs__result2 = i1))))) or (((((((r52b2 <= r53b2) ->
  (((to_rep2(first(haystack1)) <= r52b2) and
  (r52b2 <= to_rep2(last(haystack1)))) and
  ((to_rep2(first(haystack1)) <= r53b2) and
  (r53b2 <= to_rep2(last(haystack1)))))) and (o9 = haystack)) and
  ((o9 = temp___296) and (mk1(r52b2, r53b2) = temp___2961))) and
  (result4 = bool_eq5(needle, to_rep2(first(needle1)),
  to_rep2(last(needle1)), temp___296, to_rep2(first2(temp___2961)),
  to_rep2(last2(temp___2961))))) and ((not (result4 = true)) and
  ((string_search__qs__result2 = string_search__qs__result) and
  (string_search__qs__result2 = string_search__qs__result1)))) and
  ((((temp___3116 = { int__content = temp___3113 }) and
  ((string_search__qs__result11 = { int__content = string_search__qs__result4
  }) and ((k11 = { int__content = k8 }) and ((r59b6 = { int__content = r59b3
  }) and ((r58b6 = { int__content = r58b3 }) and ((shift6 = { int__content =
  shift3 }) and ((r53b9 = { int__content = r53b4 }) and ((r52b9 = {
  int__content = r52b4 }) and (i6 = { int__content = i3 }))))))))) and
  ((temp___3117 = temp___3113) and
  ((string_search__qs__result12 = string_search__qs__result4) and
  ((k12 = k8) and ((r59b7 = r59b3) and ((r58b7 = r58b3) and
  ((shift7 = shift3) and ((r53b10 = r53b4) and ((r52b10 = r52b4) and
  (i7 = i3)))))))))) and (((((((((o10 = length({ elts = needle; rt = needle1
  })) and in_range1(length({ elts = needle; rt = needle1 }))) and
  (((o11 = length({ elts = haystack; rt = haystack1 })) and
  in_range1(length({ elts = haystack; rt = haystack1 }))) and
  (o12 = (o11 - o10)))) and ((o13 = o12) and in_range1(o12))) and
  (o14 = (o13 + 1))) and ((o15 = o14) and in_range1(o14))) and
  (((i1 = o15) and (result6 = true)) or ((not (i1 = o15)) and
  (result6 = false)))) and (not (result6 = true))) and
  ((((((((((((o16 = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 }))) and
  (o17 = (i1 + o16))) and ((temp___297 = o17) and in_range1(o17))) and
  (((to_rep2(first(haystack1)) <= temp___297) and
  (temp___297 <= to_rep2(last(haystack1)))) and (o18 = temp___297))) and
  (o19 = (haystack[o18]))) and (o20 = to_rep1(o19))) and
  (o21 = (bad_shift[o20]))) and (o22 = to_rep(o21))) and (({ int__content =
  result7 } = { int__content = shift }) and (shift2 = o22))) and
  in_range2(shift2)) and (((((o23 = (i1 + 1)) and in_range1((i1 + 1))) and
  (({ int__content = result8 } = { int__content = r58b }) and
  (r58b2 = o23))) and in_range1(r58b2)) and ((((((o24 = (i1 + shift2)) and
  in_range1((i1 + shift2))) and (o25 = (o24 - 1))) and (({ int__content =
  result9 } = { int__content = r59b }) and (r59b2 = o25))) and
  in_range1(r59b2)) and (((({ int__content = result10 } = { int__content = k
  }) and (k2 = r58b2)) and ((((r58b2 <= k2) and (k2 <= r59b2)) and
  ((((temp___300 = k2) and ((not (to_rep1((haystack[(i1 + length({ elts =
  needle; rt = needle1 }))])) = to_rep1((needle[(((i1 + length({ elts =
  needle; rt = needle1 })) - k2) + 1)])))) and
  ((forall l:int. (((1 <= l) and (l <= k3)) -> (not (match_at({ elts =
   needle; rt = needle1 }, { elts = haystack; rt = haystack1 }, l) = true)))) and
  ((((r58b2 <= r59b2) -> dynamic_property3(r58b2, r59b2, k3)) and
  ((r58b2 <= k3) and (k3 <= r59b2))) and (k3 = r59b2))))) and ((k3 = k4) and
  (k5 = k3))) and (({ int__content = k6 } = { int__content = k4 }) and
  (k7 = k5)))) or ((not ((r58b2 <= k2) and (k2 <= r59b2))) and ((k2 = k6) and
  (k7 = k2))))) and (((i2 <= (length({ elts = haystack; rt = haystack1
  }) - length({ elts = needle; rt = needle1 }))) and
  (forall k21:int. (((1 <= k21) and
  (k21 <= ((i2 + to_rep((bad_shift[to_rep1((haystack[(i2 + length({ elts =
  needle; rt = needle1 }))]))]))) - 1))) -> (not (match_at({ elts = needle;
  rt = needle1 }, { elts = haystack; rt = haystack1 }, k21) = true))))) and
  ((((((((1 <= 2147483647) -> in_range2(i2)) and ((1 <= 2147483647) ->
  in_range2(r52b3))) and (((-2147483648) <= 2147483647) ->
  in_range1(r53b3))) and (((-2147483648) <= 2147483647) ->
  in_range1(r58b3))) and (((-2147483648) <= 2147483647) ->
  in_range1(r59b3))) and ((1 <= 2147483647) -> in_range2(shift3))) and
  (((temp___3112 = result11) and (temp___3113 = i2)) and
  (((((((((((((o26 = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 }))) and
  (o27 = (i2 + o26))) and ((temp___303 = o27) and in_range1(o27))) and
  (((to_rep2(first(haystack1)) <= temp___303) and
  (temp___303 <= to_rep2(last(haystack1)))) and (o28 = temp___303))) and
  (o29 = (haystack[o28]))) and (o30 = to_rep1(o29))) and
  (o31 = (bad_shift[o30]))) and (o32 = to_rep(o31))) and
  (o33 = (i2 + o32))) and ((o34 = o33) and in_range1(o33))) and
  ((i2 = result12) and (i3 = o34))) and ((((((((((o35 = length({ elts =
  needle; rt = needle1 })) and in_range1(length({ elts = needle; rt = needle1
  }))) and (((o36 = length({ elts = haystack; rt = haystack1 })) and
  in_range1(length({ elts = haystack; rt = haystack1 }))) and
  (o37 = (o36 - o35)))) and ((o38 = o37) and in_range1(o37))) and
  (o39 = (o38 + 1))) and ((o40 = o39) and in_range1(o39))) and
  (((i3 <= o40) and (o41 = true)) or ((not (i3 <= o40)) and
  (o41 = false)))) and (((not (o41 = true)) and (result13 = true)) or
  ((o41 = true) and (result13 = false)))) and (not (result13 = true))) and
  ((((r52b3 = result14) and (r52b4 = i3)) and in_range2(r52b4)) and
  (((((((o42 = (to_rep2(last(needle1)) - 1)) and
  in_range1((to_rep2(last(needle1)) - 1))) and (o43 = (i3 + o42))) and
  ((o44 = o43) and in_range1(o43))) and ((r53b3 = result15) and
  (r53b4 = o44))) and in_range1(r53b4)) and ((((((r52b4 <= r53b4) ->
  (((to_rep2(first(haystack1)) <= r52b4) and
  (r52b4 <= to_rep2(last(haystack1)))) and
  ((to_rep2(first(haystack1)) <= r53b4) and
  (r53b4 <= to_rep2(last(haystack1)))))) and (o45 = haystack)) and
  ((o45 = temp___2962) and (mk1(r52b4, r53b4) = temp___2963))) and
  (result16 = bool_eq5(needle, to_rep2(first(needle1)),
  to_rep2(last(needle1)), temp___2962, to_rep2(first2(temp___2963)),
  to_rep2(last2(temp___2963))))) and ((result16 = true) and
  ((result17 = string_search__qs__result3) and
  (string_search__qs__result4 = i3))))))))))))))))))))))))))))))) or
  (((((((((o = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 }))) and (((o1 = length({
  elts = haystack; rt = haystack1 })) and in_range1(length({ elts = haystack;
  rt = haystack1 }))) and (o2 = (o1 - o)))) and ((o3 = o2) and
  in_range1(o2))) and (o4 = (o3 + 1))) and ((o5 = o4) and in_range1(o4))) and
  (((i1 <= o5) and (result1 = true)) or ((not (i1 <= o5)) and
  (result1 = false)))) and (((result1 = true) and ((((temp___309 = shift) and
  ((temp___308 = r59b) and ((temp___307 = r58b) and ((temp___306 = r53b) and
  ((temp___304 = i1) and ((temp___305 = r52b) and ((0 = temp___311) and (((({
  int__content = result2 } = { int__content = r52b }) and (r52b2 = i1)) and
  in_range2(r52b2)) and (((((((o6 = (to_rep2(last(needle1)) - 1)) and
  in_range1((to_rep2(last(needle1)) - 1))) and (o7 = (i1 + o6))) and
  ((o8 = o7) and in_range1(o7))) and (({ int__content = result3 } = {
  int__content = r53b }) and (r53b2 = o8))) and in_range1(r53b2)) and
  (((((((r52b2 <= r53b2) -> (((to_rep2(first(haystack1)) <= r52b2) and
  (r52b2 <= to_rep2(last(haystack1)))) and
  ((to_rep2(first(haystack1)) <= r53b2) and
  (r53b2 <= to_rep2(last(haystack1)))))) and (o9 = haystack)) and
  ((o9 = temp___296) and (mk1(r52b2, r53b2) = temp___2961))) and
  (result4 = bool_eq5(needle, to_rep2(first(needle1)),
  to_rep2(last(needle1)), temp___296, to_rep2(first2(temp___2961)),
  to_rep2(last2(temp___2961))))) and ((not (result4 = true)) and
  ((string_search__qs__result2 = string_search__qs__result) and
  (string_search__qs__result2 = string_search__qs__result1)))) and
  (((((temp___3114 = { int__content = temp___311 }) and
  ((string_search__qs__result9 = { int__content = string_search__qs__result2
  }) and ((k9 = { int__content = k }) and ((r59b4 = { int__content = r59b
  }) and ((r58b4 = { int__content = r58b }) and ((shift4 = { int__content =
  shift }) and ((r53b7 = { int__content = r53b2 }) and ((r52b7 = {
  int__content = r52b2 }) and (i4 = { int__content = i1 }))))))))) and
  ((temp___3115 = temp___3111) and
  ((string_search__qs__result10 = string_search__qs__result2) and
  ((k10 = k1) and ((r59b5 = r59b1) and ((r58b5 = r58b1) and
  ((shift5 = shift1) and ((r53b8 = r53b2) and ((r52b8 = r52b2) and
  (i5 = i1)))))))))) and ((((((((o10 = length({ elts = needle; rt = needle1
  })) and in_range1(length({ elts = needle; rt = needle1 }))) and
  (((o11 = length({ elts = haystack; rt = haystack1 })) and
  in_range1(length({ elts = haystack; rt = haystack1 }))) and
  (o12 = (o11 - o10)))) and ((o13 = o12) and in_range1(o12))) and
  (o14 = (o13 + 1))) and ((o15 = o14) and in_range1(o14))) and
  (((i1 = o15) and (result6 = true)) or ((not (i1 = o15)) and
  (result6 = false)))) and (result6 = true))) or (((((((((o10 = length({
  elts = needle; rt = needle1 })) and in_range1(length({ elts = needle; rt =
  needle1 }))) and (((o11 = length({ elts = haystack; rt = haystack1 })) and
  in_range1(length({ elts = haystack; rt = haystack1 }))) and
  (o12 = (o11 - o10)))) and ((o13 = o12) and in_range1(o12))) and
  (o14 = (o13 + 1))) and ((o15 = o14) and in_range1(o14))) and
  (((i1 = o15) and (result6 = true)) or ((not (i1 = o15)) and
  (result6 = false)))) and (not (result6 = true))) and ((((temp___3114 = {
  int__content = temp___3113 }) and ((string_search__qs__result9 = {
  int__content = string_search__qs__result7 }) and ((k9 = { int__content = k8
  }) and ((r59b4 = { int__content = r59b3 }) and ((r58b4 = { int__content =
  r58b3 }) and ((shift4 = { int__content = shift3 }) and ((r53b7 = {
  int__content = r53b5 }) and ((r52b7 = { int__content = r52b5 }) and (i4 = {
  int__content = i3 }))))))))) and ((temp___3115 = temp___3113) and
  ((string_search__qs__result10 = string_search__qs__result8) and
  ((k10 = k8) and ((r59b5 = r59b3) and ((r58b5 = r58b3) and
  ((shift5 = shift3) and ((r53b8 = r53b6) and ((r52b8 = r52b6) and
  (i5 = i3)))))))))) and ((((((((((((o16 = length({ elts = needle; rt =
  needle1 })) and in_range1(length({ elts = needle; rt = needle1 }))) and
  (o17 = (i1 + o16))) and ((temp___297 = o17) and in_range1(o17))) and
  (((to_rep2(first(haystack1)) <= temp___297) and
  (temp___297 <= to_rep2(last(haystack1)))) and (o18 = temp___297))) and
  (o19 = (haystack[o18]))) and (o20 = to_rep1(o19))) and
  (o21 = (bad_shift[o20]))) and (o22 = to_rep(o21))) and (({ int__content =
  result7 } = { int__content = shift }) and (shift2 = o22))) and
  in_range2(shift2)) and (((((o23 = (i1 + 1)) and in_range1((i1 + 1))) and
  (({ int__content = result8 } = { int__content = r58b }) and
  (r58b2 = o23))) and in_range1(r58b2)) and ((((((o24 = (i1 + shift2)) and
  in_range1((i1 + shift2))) and (o25 = (o24 - 1))) and (({ int__content =
  result9 } = { int__content = r59b }) and (r59b2 = o25))) and
  in_range1(r59b2)) and (((({ int__content = result10 } = { int__content = k
  }) and (k2 = r58b2)) and ((((r58b2 <= k2) and (k2 <= r59b2)) and
  ((((temp___300 = k2) and ((not (to_rep1((haystack[(i1 + length({ elts =
  needle; rt = needle1 }))])) = to_rep1((needle[(((i1 + length({ elts =
  needle; rt = needle1 })) - k2) + 1)])))) and
  ((forall l:int. (((1 <= l) and (l <= k3)) -> (not (match_at({ elts =
   needle; rt = needle1 }, { elts = haystack; rt = haystack1 }, l) = true)))) and
  ((((r58b2 <= r59b2) -> dynamic_property3(r58b2, r59b2, k3)) and
  ((r58b2 <= k3) and (k3 <= r59b2))) and (k3 = r59b2))))) and ((k3 = k4) and
  (k5 = k3))) and (({ int__content = k6 } = { int__content = k4 }) and
  (k7 = k5)))) or ((not ((r58b2 <= k2) and (k2 <= r59b2))) and ((k2 = k6) and
  (k7 = k2))))) and (((i2 <= (length({ elts = haystack; rt = haystack1
  }) - length({ elts = needle; rt = needle1 }))) and
  (forall k21:int. (((1 <= k21) and
  (k21 <= ((i2 + to_rep((bad_shift[to_rep1((haystack[(i2 + length({ elts =
  needle; rt = needle1 }))]))]))) - 1))) -> (not (match_at({ elts = needle;
  rt = needle1 }, { elts = haystack; rt = haystack1 }, k21) = true))))) and
  ((((((((1 <= 2147483647) -> in_range2(i2)) and ((1 <= 2147483647) ->
  in_range2(r52b3))) and (((-2147483648) <= 2147483647) ->
  in_range1(r53b3))) and (((-2147483648) <= 2147483647) ->
  in_range1(r58b3))) and (((-2147483648) <= 2147483647) ->
  in_range1(r59b3))) and ((1 <= 2147483647) -> in_range2(shift3))) and
  (((temp___3112 = result11) and (temp___3113 = i2)) and
  (((((((((((((o26 = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 }))) and
  (o27 = (i2 + o26))) and ((temp___303 = o27) and in_range1(o27))) and
  (((to_rep2(first(haystack1)) <= temp___303) and
  (temp___303 <= to_rep2(last(haystack1)))) and (o28 = temp___303))) and
  (o29 = (haystack[o28]))) and (o30 = to_rep1(o29))) and
  (o31 = (bad_shift[o30]))) and (o32 = to_rep(o31))) and
  (o33 = (i2 + o32))) and ((o34 = o33) and in_range1(o33))) and
  ((i2 = result12) and (i3 = o34))) and
  (((((string_search__qs__result3 = string_search__qs__result7) and
  ((r53b3 = r53b5) and (r52b3 = r52b5))) and
  ((string_search__qs__result8 = string_search__qs__result3) and
  ((r53b6 = r53b3) and (r52b6 = r52b3)))) and (((((((((o35 = length({ elts =
  needle; rt = needle1 })) and in_range1(length({ elts = needle; rt = needle1
  }))) and (((o36 = length({ elts = haystack; rt = haystack1 })) and
  in_range1(length({ elts = haystack; rt = haystack1 }))) and
  (o37 = (o36 - o35)))) and ((o38 = o37) and in_range1(o37))) and
  (o39 = (o38 + 1))) and ((o40 = o39) and in_range1(o39))) and
  (((i3 <= o40) and (o41 = true)) or ((not (i3 <= o40)) and
  (o41 = false)))) and (((not (o41 = true)) and (result13 = true)) or
  ((o41 = true) and (result13 = false)))) and (result13 = true))) or
  ((((((((((o35 = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 }))) and (((o36 = length({
  elts = haystack; rt = haystack1 })) and in_range1(length({ elts = haystack;
  rt = haystack1 }))) and (o37 = (o36 - o35)))) and ((o38 = o37) and
  in_range1(o37))) and (o39 = (o38 + 1))) and ((o40 = o39) and
  in_range1(o39))) and (((i3 <= o40) and (o41 = true)) or
  ((not (i3 <= o40)) and (o41 = false)))) and (((not (o41 = true)) and
  (result13 = true)) or ((o41 = true) and (result13 = false)))) and
  (not (result13 = true))) and (((({ int__content =
  string_search__qs__result7 } = { int__content = string_search__qs__result5
  }) and ((r53b4 = r53b5) and (r52b4 = r52b5))) and
  ((string_search__qs__result8 = string_search__qs__result6) and
  ((r53b6 = r53b4) and (r52b6 = r52b4)))) and ((((r52b3 = result14) and
  (r52b4 = i3)) and in_range2(r52b4)) and
  (((((((o42 = (to_rep2(last(needle1)) - 1)) and
  in_range1((to_rep2(last(needle1)) - 1))) and (o43 = (i3 + o42))) and
  ((o44 = o43) and in_range1(o43))) and ((r53b3 = result15) and
  (r53b4 = o44))) and in_range1(r53b4)) and (((((((r52b4 <= r53b4) ->
  (((to_rep2(first(haystack1)) <= r52b4) and
  (r52b4 <= to_rep2(last(haystack1)))) and
  ((to_rep2(first(haystack1)) <= r53b4) and
  (r53b4 <= to_rep2(last(haystack1)))))) and (o45 = haystack)) and
  ((o45 = temp___2962) and (mk1(r52b4, r53b4) = temp___2963))) and
  (result16 = bool_eq5(needle, to_rep2(first(needle1)),
  to_rep2(last(needle1)), temp___2962, to_rep2(first2(temp___2963)),
  to_rep2(last2(temp___2963))))) and ((not (result16 = true)) and
  ((string_search__qs__result3 = string_search__qs__result5) and
  (string_search__qs__result6 = string_search__qs__result3)))) and
  ((((((((o46 = length({ elts = needle; rt = needle1 })) and
  in_range1(length({ elts = needle; rt = needle1 }))) and (((o47 = length({
  elts = haystack; rt = haystack1 })) and in_range1(length({ elts = haystack;
  rt = haystack1 }))) and (o48 = (o47 - o46)))) and ((o49 = o48) and
  in_range1(o48))) and (o50 = (o49 + 1))) and ((o51 = o50) and
  in_range1(o50))) and (((i3 = o51) and (result18 = true)) or
  ((not (i3 = o51)) and (result18 = false)))) and
  (result18 = true))))))))))))))))))))))))))))) and
  (((string_search__qs__result13 = string_search__qs__result9) and
  ((k13 = k9) and ((r59b8 = r59b4) and ((r58b8 = r58b4) and
  ((shift8 = shift4) and ((r53b11 = r53b7) and ((r52b11 = r52b7) and
  (i8 = i4)))))))) and
  ((string_search__qs__result14 = string_search__qs__result10) and
  ((k14 = k10) and ((r59b9 = r59b5) and ((r58b9 = r58b5) and
  ((shift9 = shift5) and ((r53b12 = r53b8) and ((r52b12 = r52b8) and
  (i9 = i5)))))))))) and
  (((string_search__qs__result15 = string_search__qs__result13) and
  ((k15 = k13) and ((r59b10 = r59b8) and ((r58b10 = r58b8) and
  ((shift10 = shift8) and ((r53b13 = r53b11) and ((r52b13 = r52b11) and
  (i10 = i8)))))))) and
  ((string_search__qs__result16 = string_search__qs__result14) and
  ((k16 = k14) and ((r59b11 = r59b9) and ((r58b11 = r58b9) and
  ((shift11 = shift9) and ((r53b14 = r53b12) and ((r52b14 = r52b12) and
  (i11 = i9))))))))))) or ((not (result1 = true)) and
  (((string_search__qs__result15 = { int__content = string_search__qs__result
  }) and ((k15 = { int__content = k }) and ((r59b10 = { int__content = r59b
  }) and ((r58b10 = { int__content = r58b }) and ((shift10 = { int__content =
  shift }) and ((r53b13 = { int__content = r53b }) and ((r52b13 = {
  int__content = r52b }) and (i10 = { int__content = i1 })))))))) and
  ((string_search__qs__result16 = string_search__qs__result1) and
  ((k16 = k1) and ((r59b11 = r59b1) and ((r58b11 = r58b1) and
  ((shift11 = shift1) and ((r53b14 = r53b1) and ((r52b14 = r52b1) and
  (i11 = i1)))))))))))) and
  ((((string_search__qs__result20 = string_search__qs__result18) and
  ((k17 = k15) and ((r59b12 = r59b10) and ((r58b12 = r58b10) and
  ((shift12 = shift10) and ((r53b15 = r53b13) and ((r52b15 = r52b13) and
  (i12 = i10)))))))) and
  ((string_search__qs__result21 = string_search__qs__result19) and
  ((k18 = k16) and ((r59b13 = r59b11) and ((r58b13 = r58b11) and
  ((shift13 = shift11) and ((r53b16 = r53b14) and ((r52b16 = r52b14) and
  (i13 = i11))))))))) and (((string_search__qs__result18 = { int__content =
  string_search__qs__result17 }) and
  (string_search__qs__result19 = string_search__qs__result17)) and
  ((result19 = string_search__qs__result15) and
  (string_search__qs__result17 = 0))))))))) and
  (((string_search__qs__result22 = string_search__qs__result20) and
  ((k19 = k17) and ((r59b14 = r59b12) and ((r58b14 = r58b12) and
  ((shift14 = shift12) and ((r53b17 = r53b15) and ((r52b17 = r52b15) and
  ((i14 = i12) and (bad_shift1 = { map__content1 = bad_shift }))))))))) and
  ((string_search__qs__result23 = string_search__qs__result21) and
  ((k20 = k18) and ((r59b15 = r59b13) and ((r58b15 = r58b13) and
  ((shift15 = shift13) and ((r53b18 = r53b16) and ((r52b18 = r52b16) and
  ((i15 = i13) and (bad_shift2 = bad_shift))))))))))) -> ((((((o52 = length({
  elts = needle; rt = needle1 })) and in_range1(length({ elts = needle; rt =
  needle1 }))) and (((o53 = length({ elts = haystack; rt = haystack1 })) and
  in_range1(length({ elts = haystack; rt = haystack1 }))) and
  (o54 = (o53 - o52)))) and ((o55 = o54) and in_range1(o54))) and
  (o56 = (o55 + 1))) -> in_range1(o56)))))))
