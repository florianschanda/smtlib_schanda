;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun is_digit (Int) Bool)

(declare-fun is_digit__function_guard (Bool Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

;; is_digit__post_axiom
  (assert
  (forall ((c Int))
  (! (=> (dynamic_invariant2 c true true true)
     (let ((result (is_digit c)))
     (ite (= c 48) (= result true)
     (ite (= c 49) (= result true)
     (ite (= c 50) (= result true)
     (ite (= c 51) (= result true)
     (ite (= c 52) (= result true)
     (ite (= c 53) (= result true)
     (ite (= c 54) (= result true)
     (ite (= c 55) (= result true)
     (ite (= c 56) (= result true)
     (ite (= c 57) (= result true)
     (ite (< 57 c) (not (= result true)) (=> (< c 48) (not (= result true)))))))))))))))) :pattern (
  (is_digit c)) )))

(declare-fun convert_character_digit_to_integer (Int) Int)

(declare-fun convert_character_digit_to_integer__function_guard (Int
  Int) Bool)

;; convert_character_digit_to_integer__post_axiom
  (assert
  (forall ((source Int))
  (! (=>
     (and (dynamic_invariant2 source true true true)
     (= (is_digit source) true))
     (let ((result (convert_character_digit_to_integer source)))
     (and
     (and (and (<= 0 result) (<= result 9))
     (ite (= source 48) (= result 0)
     (ite (= source 49) (= result 1)
     (ite (= source 50) (= result 2)
     (ite (= source 51) (= result 3)
     (ite (= source 52) (= result 4)
     (ite (= source 53) (= result 5)
     (ite (= source 54) (= result 6)
     (ite (= source 55) (= result 7)
     (ite (= source 56) (= result 8) (=> (= source 57) (= result 9))))))))))))
     (dynamic_invariant result true false true)))) :pattern ((convert_character_digit_to_integer
                                                             source)) )))

(declare-const source us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-const target Int)

(declare-const has_failed Bool)

(declare-const temp___1806 Int)

(declare-const o Int)

(declare-const o1 character)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const temp___1807 Int)

(declare-const o5 Int)

(declare-const o6 character)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const temp___1808 Int)

(declare-const o11 Int)

(declare-const o12 character)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const o15 Int)

(declare-const o16 Int)

(declare-const temp___1809 Int)

(declare-const o17 Int)

(declare-const o18 character)

(declare-const o19 Int)

(declare-const o20 Int)

(declare-const o21 Int)

(declare-const o22 Int)

(declare-const temp___1810 Int)

(declare-const o23 Int)

(declare-const o24 character)

(declare-const o25 Int)

(declare-const o26 Int)

(declare-const o27 Int)

(declare-const o28 Int)

(declare-const temp___1811 Int)

(declare-const o29 Int)

(declare-const o30 character)

(declare-const o31 Int)

(declare-const o32 Int)

(declare-const o33 Int)

(declare-const o34 Int)

(declare-const temp___1812 Int)

(declare-const o35 Int)

(declare-const o36 character)

(declare-const o37 Int)

(declare-const o38 Int)

(declare-const o39 Int)

(declare-const o40 Int)

(declare-const temp___1813 Int)

(declare-const o41 Int)

(declare-const o42 character)

(declare-const o43 Int)

(declare-const o44 Int)

(declare-const o45 Int)

(declare-const o46 Int)

(declare-const target1 Int)

(declare-const has_failed1 Bool)

(declare-const target2 Int)

(declare-const has_failed2 Bool)

(declare-const target3 Int)

(declare-const has_failed3 Bool)

(declare-const target4 Int)

(declare-const has_failed4 Bool)

(declare-const target5 Int)

(declare-const has_failed5 Bool)

(declare-const target6 Int)

(declare-const has_failed6 Bool)

(declare-const target7 Int)

(declare-const has_failed7 Bool)

(declare-const target8 Int)

(declare-const has_failed8 Bool)

(declare-const target9 Int)

(declare-const has_failed9 Bool)

(declare-const result Int)

(declare-const target10 Int)

(declare-const result1 Bool)

(declare-const has_failed10 Bool)

(declare-const target11 Int)

(declare-const has_failed11 Bool)

(declare-const target12 Int)

(declare-const has_failed12 Bool)

;; H
  (assert (dynamic_invariant1 source true false true))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 target)))

;; H
  (assert
  (and (and (< 0 (length source)) (< (length source) 10))
  (forall ((index Int))
  (=>
  (and (<= (to_rep1 (first (rt source))) index)
  (<= index (to_rep1 (last (rt source)))))
  (= (is_digit (to_rep (select (elts source) index))) true)))))

;; H
  (assert
  (=> (= (length source) 1)
  (and
  (and (not (= has_failed1 true))
  (= target1 (convert_character_digit_to_integer
             (to_rep (select (elts source) (to_rep1 (first (rt source))))))))
  (in_range1 target1))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (= (length source) 2)
  (and
  (and (not (= has_failed2 true))
  (= target2 (+ (* (convert_character_digit_to_integer
                   (to_rep
                   (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10)
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))))))
  (in_range1 target2)))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (= (length source) 3)
  (and
  (and (not (= has_failed3 true))
  (= target3 (+ (+ (* (convert_character_digit_to_integer
                      (to_rep
                      (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1))))
  (in_range1 target3))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (= (length source) 4)
  (and
  (and (not (= has_failed4 true))
  (= target4 (+ (+ (+ (* (convert_character_digit_to_integer
                         (to_rep
                         (select (elts source) (+ (to_rep1
                                                  (first (rt source))) 0)))) 1000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 1))))
  (in_range1 target4)))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (= (length source) 5)
  (and
  (and (not (= has_failed5 true))
  (= target5 (+ (+ (+ (+ (* (convert_character_digit_to_integer
                            (to_rep
                            (select (elts source) (+ (to_rep1
                                                     (first (rt source))) 0)))) 10000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 1000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 1))))
  (in_range1 target5))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (= (length source) 6)
  (and
  (and (not (= has_failed6 true))
  (= target6 (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer
                               (to_rep
                               (select (elts source) (+ (to_rep1
                                                        (first (rt source))) 0)))) 100000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 1))))
  (in_range1 target6)))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (= (length source) 7)
  (and
  (and (not (= has_failed7 true))
  (= target7 (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer
                                  (to_rep
                                  (select (elts source) (+ (to_rep1
                                                           (first
                                                           (rt source))) 0)))) 1000000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 100000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 10000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 1000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 1))))
  (in_range1 target7))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7))
  (=> (= (length source) 8)
  (and
  (and (not (= has_failed8 true))
  (= target8 (+ (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer
                                     (to_rep
                                     (select (elts source) (+ (to_rep1
                                                              (first
                                                              (rt source))) 0)))) 10000000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 1000000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 100000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 10000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 1000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 7)))) 1))))
  (in_range1 target8)))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7))
  (=> (not (= (length source) 8))
  (=> (= (length source) 9)
  (and
  (and (not (= has_failed9 true))
  (= target9 (+ (+ (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer
                                        (to_rep
                                        (select (elts source) (+ (to_rep1
                                                                 (first
                                                                 (rt source))) 0)))) 100000000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10000000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1000000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 100000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 10000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 1000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 7)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 8)))) 1))))
  (in_range1 target9))))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7))
  (=> (not (= (length source) 8))
  (=> (not (= (length source) 9))
  (= (mk_int__ref result) (mk_int__ref target))))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7))
  (=> (not (= (length source) 8))
  (=> (not (= (length source) 9)) (= target10 0)))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7))
  (=> (not (= (length source) 8))
  (=> (not (= (length source) 9))
  (= (mk_bool__ref result1) (mk_bool__ref has_failed))))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7))
  (=> (not (= (length source) 8))
  (=> (not (= (length source) 9)) (= has_failed10 (of_int 1))))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7))
  (=> (not (= (length source) 8))
  (=> (not (= (length source) 9)) (= has_failed9 has_failed10)))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7))
  (=> (not (= (length source) 8))
  (=> (not (= (length source) 9)) (= target9 target10)))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7))
  (=> (not (= (length source) 8)) (= has_failed8 has_failed9))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7))
  (=> (not (= (length source) 8)) (= target8 target9))))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7)) (= has_failed7 has_failed8)))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6))
  (=> (not (= (length source) 7)) (= target7 target8)))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6)) (= has_failed6 has_failed7))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5))
  (=> (not (= (length source) 6)) (= target6 target7))))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5)) (= has_failed5 has_failed6)))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4))
  (=> (not (= (length source) 5)) (= target5 target6)))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4)) (= has_failed4 has_failed5))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3))
  (=> (not (= (length source) 4)) (= target4 target5))))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3)) (= has_failed3 has_failed4)))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2))
  (=> (not (= (length source) 3)) (= target3 target4)))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2)) (= has_failed2 has_failed3))))

;; H
  (assert
  (=> (not (= (length source) 1))
  (=> (not (= (length source) 2)) (= target2 target3))))

;; H
  (assert (=> (not (= (length source) 1)) (= has_failed1 has_failed2)))

;; H
  (assert (=> (not (= (length source) 1)) (= target1 target2)))

;; H
  (assert (= has_failed1 has_failed11))

;; H
  (assert (= target1 target11))

;; H
  (assert (= has_failed12 has_failed1))

;; H
  (assert (= target12 target1))

;; H
  (assert
  (=> (= (= (length source) 1) true)
  (= target11 (convert_character_digit_to_integer
              (to_rep (select (elts source) (to_rep1 (first (rt source)))))))))

;; H
  (assert
  (=> (= (= (length source) 2) true)
  (= target11 (+ (* (convert_character_digit_to_integer
                    (to_rep
                    (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 10)
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1))))))))

;; H
  (assert
  (=> (= (= (length source) 3) true)
  (= target11 (+ (+ (* (convert_character_digit_to_integer
                       (to_rep
                       (select (elts source) (+ (to_rep1 (first (rt source))) 0)))) 100) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1)))))

;; H
  (assert
  (=> (= (= (length source) 4) true)
  (= target11 (+ (+ (+ (* (convert_character_digit_to_integer
                          (to_rep
                          (select (elts source) (+ (to_rep1
                                                   (first (rt source))) 0)))) 1000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 1)))))

;; H
  (assert
  (=> (= (= (length source) 5) true)
  (= target11 (+ (+ (+ (+ (* (convert_character_digit_to_integer
                             (to_rep
                             (select (elts source) (+ (to_rep1
                                                      (first (rt source))) 0)))) 10000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 1000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 1)))))

;; H
  (assert
  (=> (= (= (length source) 6) true)
  (= target11 (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer
                                (to_rep
                                (select (elts source) (+ (to_rep1
                                                         (first (rt source))) 0)))) 100000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 10000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 1000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 1)))))

;; H
  (assert
  (=> (= (= (length source) 7) true)
  (= target11 (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer
                                   (to_rep
                                   (select (elts source) (+ (to_rep1
                                                            (first
                                                            (rt source))) 0)))) 1000000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 100000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 10000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 1000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 1)))))

;; H
  (assert
  (=> (= (= (length source) 8) true)
  (= target11 (+ (+ (+ (+ (+ (+ (+ (* (convert_character_digit_to_integer
                                      (to_rep
                                      (select (elts source) (+ (to_rep1
                                                               (first
                                                               (rt source))) 0)))) 10000000) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 1)))) 1000000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 2)))) 100000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 3)))) 10000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 4)))) 1000)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 5)))) 100)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 6)))) 10)) (*
  (convert_character_digit_to_integer
  (to_rep (select (elts source) (+ (to_rep1 (first (rt source))) 7)))) 1)))))

;; H
  (assert (= (= (length source) 9) true))

;; H
  (assert
  (and (= temp___1813 (+ (to_rep1 (first (rt source))) 8)) (in_range1
  (+ (to_rep1 (first (rt source))) 8))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1813)
  (<= temp___1813 (to_rep1 (last (rt source))))))

;; H
  (assert (= o41 temp___1813))

;; H
  (assert (= o42 (select (elts source) o41)))

;; H
  (assert (= o43 (to_rep o42)))

;; H
  (assert
  (and (= o44 (convert_character_digit_to_integer o43))
  (and (in_range1 o44)
  (and (and (<= 0 o44) (<= o44 9))
  (ite (= (= o43 48) true) (= o44 0)
  (ite (= (= o43 49) true) (= o44 1)
  (ite (= (= o43 50) true) (= o44 2)
  (ite (= (= o43 51) true) (= o44 3)
  (ite (= (= o43 52) true) (= o44 4)
  (ite (= (= o43 53) true) (= o44 5)
  (ite (= (= o43 54) true) (= o44 6)
  (ite (= (= o43 55) true) (= o44 7)
  (ite (= (= o43 56) true) (= o44 8) (=> (= (= o43 57) true) (= o44 9)))))))))))))))

;; H
  (assert (= o45 (* o44 1)))

;; H
  (assert (and (= o46 o45) (in_range1 o45)))

;; H
  (assert
  (and (= temp___1812 (+ (to_rep1 (first (rt source))) 7)) (in_range1
  (+ (to_rep1 (first (rt source))) 7))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1812)
  (<= temp___1812 (to_rep1 (last (rt source))))))

;; H
  (assert (= o35 temp___1812))

;; H
  (assert (= o36 (select (elts source) o35)))

;; H
  (assert (= o37 (to_rep o36)))

;; H
  (assert
  (and (= o38 (convert_character_digit_to_integer o37))
  (and (in_range1 o38)
  (and (and (<= 0 o38) (<= o38 9))
  (ite (= (= o37 48) true) (= o38 0)
  (ite (= (= o37 49) true) (= o38 1)
  (ite (= (= o37 50) true) (= o38 2)
  (ite (= (= o37 51) true) (= o38 3)
  (ite (= (= o37 52) true) (= o38 4)
  (ite (= (= o37 53) true) (= o38 5)
  (ite (= (= o37 54) true) (= o38 6)
  (ite (= (= o37 55) true) (= o38 7)
  (ite (= (= o37 56) true) (= o38 8) (=> (= (= o37 57) true) (= o38 9)))))))))))))))

;; H
  (assert (= o39 (* o38 10)))

;; H
  (assert (and (= o40 o39) (in_range1 o39)))

;; H
  (assert
  (and (= temp___1811 (+ (to_rep1 (first (rt source))) 6)) (in_range1
  (+ (to_rep1 (first (rt source))) 6))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1811)
  (<= temp___1811 (to_rep1 (last (rt source))))))

;; H
  (assert (= o29 temp___1811))

;; H
  (assert (= o30 (select (elts source) o29)))

;; H
  (assert (= o31 (to_rep o30)))

;; H
  (assert
  (and (= o32 (convert_character_digit_to_integer o31))
  (and (in_range1 o32)
  (and (and (<= 0 o32) (<= o32 9))
  (ite (= (= o31 48) true) (= o32 0)
  (ite (= (= o31 49) true) (= o32 1)
  (ite (= (= o31 50) true) (= o32 2)
  (ite (= (= o31 51) true) (= o32 3)
  (ite (= (= o31 52) true) (= o32 4)
  (ite (= (= o31 53) true) (= o32 5)
  (ite (= (= o31 54) true) (= o32 6)
  (ite (= (= o31 55) true) (= o32 7)
  (ite (= (= o31 56) true) (= o32 8) (=> (= (= o31 57) true) (= o32 9)))))))))))))))

;; H
  (assert (= o33 (* o32 100)))

;; H
  (assert (and (= o34 o33) (in_range1 o33)))

;; H
  (assert
  (and (= temp___1810 (+ (to_rep1 (first (rt source))) 5)) (in_range1
  (+ (to_rep1 (first (rt source))) 5))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1810)
  (<= temp___1810 (to_rep1 (last (rt source))))))

;; H
  (assert (= o23 temp___1810))

;; H
  (assert (= o24 (select (elts source) o23)))

;; H
  (assert (= o25 (to_rep o24)))

;; H
  (assert
  (and (= o26 (convert_character_digit_to_integer o25))
  (and (in_range1 o26)
  (and (and (<= 0 o26) (<= o26 9))
  (ite (= (= o25 48) true) (= o26 0)
  (ite (= (= o25 49) true) (= o26 1)
  (ite (= (= o25 50) true) (= o26 2)
  (ite (= (= o25 51) true) (= o26 3)
  (ite (= (= o25 52) true) (= o26 4)
  (ite (= (= o25 53) true) (= o26 5)
  (ite (= (= o25 54) true) (= o26 6)
  (ite (= (= o25 55) true) (= o26 7)
  (ite (= (= o25 56) true) (= o26 8) (=> (= (= o25 57) true) (= o26 9)))))))))))))))

;; H
  (assert (= o27 (* o26 1000)))

;; H
  (assert (and (= o28 o27) (in_range1 o27)))

;; H
  (assert
  (and (= temp___1809 (+ (to_rep1 (first (rt source))) 4)) (in_range1
  (+ (to_rep1 (first (rt source))) 4))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1809)
  (<= temp___1809 (to_rep1 (last (rt source))))))

;; H
  (assert (= o17 temp___1809))

;; H
  (assert (= o18 (select (elts source) o17)))

;; H
  (assert (= o19 (to_rep o18)))

;; H
  (assert
  (and (= o20 (convert_character_digit_to_integer o19))
  (and (in_range1 o20)
  (and (and (<= 0 o20) (<= o20 9))
  (ite (= (= o19 48) true) (= o20 0)
  (ite (= (= o19 49) true) (= o20 1)
  (ite (= (= o19 50) true) (= o20 2)
  (ite (= (= o19 51) true) (= o20 3)
  (ite (= (= o19 52) true) (= o20 4)
  (ite (= (= o19 53) true) (= o20 5)
  (ite (= (= o19 54) true) (= o20 6)
  (ite (= (= o19 55) true) (= o20 7)
  (ite (= (= o19 56) true) (= o20 8) (=> (= (= o19 57) true) (= o20 9)))))))))))))))

;; H
  (assert (= o21 (* o20 10000)))

;; H
  (assert (and (= o22 o21) (in_range1 o21)))

;; H
  (assert
  (and (= temp___1808 (+ (to_rep1 (first (rt source))) 3)) (in_range1
  (+ (to_rep1 (first (rt source))) 3))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1808)
  (<= temp___1808 (to_rep1 (last (rt source))))))

;; H
  (assert (= o11 temp___1808))

;; H
  (assert (= o12 (select (elts source) o11)))

;; H
  (assert (= o13 (to_rep o12)))

;; H
  (assert
  (and (= o14 (convert_character_digit_to_integer o13))
  (and (in_range1 o14)
  (and (and (<= 0 o14) (<= o14 9))
  (ite (= (= o13 48) true) (= o14 0)
  (ite (= (= o13 49) true) (= o14 1)
  (ite (= (= o13 50) true) (= o14 2)
  (ite (= (= o13 51) true) (= o14 3)
  (ite (= (= o13 52) true) (= o14 4)
  (ite (= (= o13 53) true) (= o14 5)
  (ite (= (= o13 54) true) (= o14 6)
  (ite (= (= o13 55) true) (= o14 7)
  (ite (= (= o13 56) true) (= o14 8) (=> (= (= o13 57) true) (= o14 9)))))))))))))))

;; H
  (assert (= o15 (* o14 100000)))

;; H
  (assert (and (= o16 o15) (in_range1 o15)))

;; H
  (assert
  (and (= temp___1807 (+ (to_rep1 (first (rt source))) 2)) (in_range1
  (+ (to_rep1 (first (rt source))) 2))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1807)
  (<= temp___1807 (to_rep1 (last (rt source))))))

;; H
  (assert (= o5 temp___1807))

;; H
  (assert (= o6 (select (elts source) o5)))

;; H
  (assert (= o7 (to_rep o6)))

;; H
  (assert
  (and (= o8 (convert_character_digit_to_integer o7))
  (and (in_range1 o8)
  (and (and (<= 0 o8) (<= o8 9))
  (ite (= (= o7 48) true) (= o8 0)
  (ite (= (= o7 49) true) (= o8 1)
  (ite (= (= o7 50) true) (= o8 2)
  (ite (= (= o7 51) true) (= o8 3)
  (ite (= (= o7 52) true) (= o8 4)
  (ite (= (= o7 53) true) (= o8 5)
  (ite (= (= o7 54) true) (= o8 6)
  (ite (= (= o7 55) true) (= o8 7)
  (ite (= (= o7 56) true) (= o8 8) (=> (= (= o7 57) true) (= o8 9)))))))))))))))

;; H
  (assert (= o9 (* o8 1000000)))

;; H
  (assert (and (= o10 o9) (in_range1 o9)))

;; H
  (assert
  (and (= temp___1806 (+ (to_rep1 (first (rt source))) 1)) (in_range1
  (+ (to_rep1 (first (rt source))) 1))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt source))) temp___1806)
  (<= temp___1806 (to_rep1 (last (rt source))))))

;; H
  (assert (= o temp___1806))

;; H
  (assert (= o1 (select (elts source) o)))

;; H
  (assert (= o2 (to_rep o1)))

;; H
  (assert
  (and (= o3 (convert_character_digit_to_integer o2))
  (and (in_range1 o3)
  (and (and (<= 0 o3) (<= o3 9))
  (ite (= (= o2 48) true) (= o3 0)
  (ite (= (= o2 49) true) (= o3 1)
  (ite (= (= o2 50) true) (= o3 2)
  (ite (= (= o2 51) true) (= o3 3)
  (ite (= (= o2 52) true) (= o3 4)
  (ite (= (= o2 53) true) (= o3 5)
  (ite (= (= o2 54) true) (= o3 6)
  (ite (= (= o2 55) true) (= o3 7)
  (ite (= (= o2 56) true) (= o3 8) (=> (= (= o2 57) true) (= o3 9)))))))))))))))

;; H
  (assert (= o4 (* o3 10000000)))

(assert
;; WP_parameter_def
 ;; File "aida-conversion.adb", line 1093, characters 0-0
  (not (in_range1 o4)))
(check-sat)
(exit)
