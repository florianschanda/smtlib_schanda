;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort track_id 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (track_id track_id) Bool)

(declare-const dummy track_id)

(declare-datatypes ()
((track_id__ref (mk_track_id__ref (track_id__content track_id)))))
(define-fun track_id__ref___projection ((a track_id__ref)) track_id (track_id__content
                                                                    a))

(declare-fun to_rep (track_id) Int)

(declare-fun of_rep (Int) track_id)

;; inversion_axiom
  (assert
  (forall ((x track_id))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x track_id)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort train_id 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (train_id train_id) Bool)

(declare-const dummy1 train_id)

(declare-datatypes ()
((train_id__ref (mk_train_id__ref (train_id__content train_id)))))
(define-fun train_id__ref___projection ((a train_id__ref)) train_id (train_id__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_231 Int)
  (temp___is_init_228 Bool) (temp___skip_constant_229 Bool)
  (temp___do_toplevel_230 Bool)) Bool (=>
                                      (or (= temp___is_init_228 true)
                                      (<= 1 10)) (in_range2 temp___expr_231)))

(declare-sort natural 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (natural natural) Bool)

(declare-const dummy2 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__trains__train_position__track_begin track_id)(rec__trains__train_position__pos_begin natural)(rec__trains__train_position__track_end track_id)))))
(define-fun us_split_fields_Track_Begin__projection ((a us_split_fields)) track_id
  (rec__trains__train_position__track_begin a))

(define-fun us_split_fields_Pos_Begin__projection ((a us_split_fields)) natural
  (rec__trains__train_position__pos_begin a))

(define-fun us_split_fields_Track_End__projection ((a us_split_fields)) track_id
  (rec__trains__train_position__track_end a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__trains__train_position__track_begin
                           (us_split_fields1 a))) (to_rep
                                                  (rec__trains__train_position__track_begin
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__trains__train_position__pos_begin
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__trains__train_position__pos_begin
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__trains__train_position__track_end
                           (us_split_fields1 a))) (to_rep
                                                  (rec__trains__train_position__track_end
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const trains__train_position__track_begin__first__bit Int)

(declare-const trains__train_position__track_begin__last__bit Int)

(declare-const trains__train_position__track_begin__position Int)

;; trains__train_position__track_begin__first__bit_axiom
  (assert (<= 0 trains__train_position__track_begin__first__bit))

;; trains__train_position__track_begin__last__bit_axiom
  (assert
  (< trains__train_position__track_begin__first__bit trains__train_position__track_begin__last__bit))

;; trains__train_position__track_begin__position_axiom
  (assert (<= 0 trains__train_position__track_begin__position))

(declare-const trains__train_position__pos_begin__first__bit Int)

(declare-const trains__train_position__pos_begin__last__bit Int)

(declare-const trains__train_position__pos_begin__position Int)

;; trains__train_position__pos_begin__first__bit_axiom
  (assert (<= 0 trains__train_position__pos_begin__first__bit))

;; trains__train_position__pos_begin__last__bit_axiom
  (assert
  (< trains__train_position__pos_begin__first__bit trains__train_position__pos_begin__last__bit))

;; trains__train_position__pos_begin__position_axiom
  (assert (<= 0 trains__train_position__pos_begin__position))

(declare-const trains__train_position__track_end__first__bit Int)

(declare-const trains__train_position__track_end__last__bit Int)

(declare-const trains__train_position__track_end__position Int)

;; trains__train_position__track_end__first__bit_axiom
  (assert (<= 0 trains__train_position__track_end__first__bit))

;; trains__train_position__track_end__last__bit_axiom
  (assert
  (< trains__train_position__track_end__first__bit trains__train_position__track_end__last__bit))

;; trains__train_position__track_end__position_axiom
  (assert (<= 0 trains__train_position__track_end__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ()
((train_position__ref
 (mk_train_position__ref (train_position__content us_rep)))))
(define-fun train_position__ref___projection ((a train_position__ref)) us_rep
  (train_position__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_182 Int))
                           (=>
                           (and (<= a__first temp___idx_182)
                           (<= temp___idx_182 a__last))
                           (= (bool_eq (select a temp___idx_182)
                              (select b (+ (- b__first a__first) temp___idx_182))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_182 Int))
  (=> (and (<= a__first temp___idx_182) (<= temp___idx_182 a__last))
  (= (bool_eq (select a temp___idx_182)
     (select b (+ (- b__first a__first) temp___idx_182))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_208 Int)
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (<= 1 8)) (in_range1 temp___expr_208)))

(declare-const cur_num_trains Int)

(declare-const trains (Array Int us_rep))

(declare-const train Int)

(declare-const other_train Int)

(declare-const o Int)

(declare-const o1 track_id)

(declare-const o2 natural)

(declare-const o3 track_id)

(declare-const o4 track_id)

(declare-const o5 natural)

(declare-const o6 track_id)

(declare-const o7 track_id)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 track_id)

(declare-const o11 natural)

(declare-const o12 track_id)

(declare-const o13 track_id)

(declare-const o14 natural)

(declare-const o15 track_id)

(declare-const o16 track_id)

(declare-const o17 Int)

(declare-const o18 track_id)

(declare-const o19 natural)

(declare-const o20 track_id)

(declare-const o21 track_id)

(declare-const o22 natural)

(declare-const o23 track_id)

(declare-const o24 track_id)

(declare-const o25 Int)

(declare-const o26 Int)

(declare-const o27 Bool)

(declare-const o28 Int)

(declare-const o29 track_id)

(declare-const o30 natural)

(declare-const o31 track_id)

(declare-const o32 track_id)

(declare-const o33 natural)

(declare-const o34 track_id)

(declare-const o35 track_id)

(declare-const o36 Int)

(declare-const o37 track_id)

(declare-const o38 natural)

(declare-const o39 track_id)

(declare-const o40 us_split_fields)

(declare-const o41 track_id)

(declare-const o42 Int)

(declare-const o43 Int)

(declare-const o44 Bool)

(declare-const result Bool)

(declare-const result1 Bool)

;; H
  (assert (in_range2 cur_num_trains))

;; H
  (assert (<= 1 train))

;; H
  (assert (<= train cur_num_trains))

;; H
  (assert (<= 1 other_train))

;; H
  (assert (<= other_train cur_num_trains))

;; H
  (assert (not (= other_train train)))

;; H
  (assert (and (<= 1 other_train) (<= other_train 10)))

;; H
  (assert (= o36 other_train))

;; H
  (assert (= (mk___rep (mk___split_fields o37 o38 o39)) (select trains
  o36)))

;; H
  (assert (= o40 (mk___split_fields o37 o38 o39)))

;; H
  (assert (= o41 (rec__trains__train_position__track_begin o40)))

;; H
  (assert (= o42 (to_rep o41)))

;; H
  (assert (and (<= 1 train) (<= train 10)))

;; H
  (assert (= o28 train))

;; H
  (assert (= (mk___rep (mk___split_fields o29 o30 o31)) (select trains
  o28)))

;; H
  (assert (= o29 o32))

;; H
  (assert (= o30 o33))

;; H
  (assert (= o31 o34))

;; H
  (assert (= o35 o32))

;; H
  (assert (= o43 (to_rep o35)))

;; H
  (assert (= o44 (ite (= o43 o42) true false)))

;; H
  (assert (= result1 (ite (not (= o44 true)) true false)))

;; H
  (assert (=> (= result1 true) (and (<= 1 other_train) (<= other_train 10))))

;; H
  (assert (=> (= result1 true) (= o17 other_train)))

;; H
  (assert
  (=> (= result1 true)
  (= (mk___rep (mk___split_fields o18 o19 o20)) (select trains o17))))

;; H
  (assert (=> (= result1 true) (= o18 o21)))

;; H
  (assert (=> (= result1 true) (= o19 o22)))

;; H
  (assert (=> (= result1 true) (= o20 o23)))

;; H
  (assert (=> (= result1 true) (= o24 o23)))

;; H
  (assert (=> (= result1 true) (= o25 (to_rep o24))))

;; H
  (assert (=> (= result1 true) (and (<= 1 train) (<= train 10))))

;; H
  (assert (=> (= result1 true) (= o9 train)))

;; H
  (assert
  (=> (= result1 true)
  (= (mk___rep (mk___split_fields o10 o11 o12)) (select trains o9))))

;; H
  (assert (=> (= result1 true) (= o10 o13)))

;; H
  (assert (=> (= result1 true) (= o11 o14)))

;; H
  (assert (=> (= result1 true) (= o12 o15)))

;; H
  (assert (=> (= result1 true) (= o16 o13)))

;; H
  (assert (=> (= result1 true) (= o26 (to_rep o16))))

;; H
  (assert (=> (= result1 true) (= o27 (ite (= o26 o25) true false))))

;; H
  (assert
  (=> (= result1 true) (= result (ite (not (= o27 true)) true false))))

;; H
  (assert (=> (not (= result1 true)) (= result false)))

;; H
  (assert (= result true))

;; H
  (assert (and (<= 1 other_train) (<= other_train 10)))

;; H
  (assert (= o other_train))

;; H
  (assert (= (mk___rep (mk___split_fields o1 o2 o3)) (select trains o)))

;; H
  (assert (= o1 o4))

;; H
  (assert (= o2 o5))

;; H
  (assert (= o3 o6))

;; H
  (assert (= o7 o4))

;; H
  (assert (= o8 (to_rep o7)))

(assert
;; WP_parameter_def
 ;; File "trains.ads", line 91, characters 0-0
  (not (<= 1 train)))
(check-sat)
(exit)
