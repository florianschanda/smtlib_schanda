(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type value_kind

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : value_kind, value_kind -> bool

logic dummy1 : value_kind

type value_kind__ref = { value_kind__content : value_kind
}

function value_kind__ref___projection(a: value_kind__ref) : value_kind =
  (a).value_kind__content

logic to_rep1 : value_kind -> int

logic of_rep1 : int -> value_kind

axiom inversion_axiom1 :
  (forall x:value_kind [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:value_kind [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__foo__value__kind : value_kind
}

function us_split_discrs___projection(a: us_split_discrs) : value_kind =
  (a).rec__foo__value__kind

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__foo__value__bool_field : bool;
rec__foo__value__int_field : integer
}

function us_split_fields_Bool_Field__projection(a: us_split_fields) : bool =
  (a).rec__foo__value__bool_field

function us_split_fields_Int_Field__projection(a: us_split_fields) : integer =
  (a).rec__foo__value__int_field

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

predicate foo__value__bool_field__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__foo__value__kind) = 1)

predicate foo__value__int_field__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__foo__value__kind) = 2)

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((((to_rep1(((a).us_split_discrs1).rec__foo__value__kind) = to_rep1(((b).us_split_discrs1).rec__foo__value__kind)) and
  (foo__value__bool_field__pred(a) ->
  (((a).us_split_fields1).rec__foo__value__bool_field = ((b).us_split_fields1).rec__foo__value__bool_field))) and
  (foo__value__int_field__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__foo__value__int_field) = to_rep(((b).us_split_fields1).rec__foo__value__int_field)))) ->
  (bool_eq3(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_discrs1).rec__foo__value__kind) = to_rep1(((b).us_split_discrs1).rec__foo__value__kind)) and
  (foo__value__bool_field__pred(a) ->
  (((a).us_split_fields1).rec__foo__value__bool_field = ((b).us_split_fields1).rec__foo__value__bool_field))) and
  (foo__value__int_field__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__foo__value__int_field) = to_rep(((b).us_split_fields1).rec__foo__value__int_field))))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:value_kind. forall a1:bool. forall a2:integer. forall a3:bool.
  (0 <= object__size({ us_split_discrs1 = { rec__foo__value__kind = a };
  us_split_fields1 = { rec__foo__value__bool_field = a1;
  rec__foo__value__int_field = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:value_kind. forall a1:bool. forall a2:integer. forall a3:bool.
  (0 <= object__alignment({ us_split_discrs1 = { rec__foo__value__kind = a };
  us_split_fields1 = { rec__foo__value__bool_field = a1;
  rec__foo__value__int_field = a2 }; attr__constrained = a3 })))

logic foo__value__kind__first__bit : int

logic foo__value__kind__last__bit : int

logic foo__value__kind__position : int

axiom foo__value__kind__first__bit_axiom :
  (0 <= foo__value__kind__first__bit)

axiom foo__value__kind__last__bit_axiom :
  (foo__value__kind__first__bit <  foo__value__kind__last__bit)

axiom foo__value__kind__position_axiom : (0 <= foo__value__kind__position)

logic foo__value__bool_field__first__bit : int

logic foo__value__bool_field__last__bit : int

logic foo__value__bool_field__position : int

axiom foo__value__bool_field__first__bit_axiom :
  (0 <= foo__value__bool_field__first__bit)

axiom foo__value__bool_field__last__bit_axiom :
  (foo__value__bool_field__first__bit <  foo__value__bool_field__last__bit)

axiom foo__value__bool_field__position_axiom :
  (0 <= foo__value__bool_field__position)

logic foo__value__int_field__first__bit : int

logic foo__value__int_field__last__bit : int

logic foo__value__int_field__position : int

axiom foo__value__int_field__first__bit_axiom :
  (0 <= foo__value__int_field__first__bit)

axiom foo__value__int_field__last__bit_axiom :
  (foo__value__int_field__first__bit <  foo__value__int_field__last__bit)

axiom foo__value__int_field__position_axiom :
  (0 <= foo__value__int_field__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : value_kind

logic dummy3 : bool

logic dummy4 : integer

logic dummy5 : bool

type value__ref = { value__content : us_rep
}

function value__ref___projection(a: value__ref) : us_rep = (a).value__content

predicate in_range2(rec__foo__value__kind1: int, a: us_rep) =
  (rec__foo__value__kind1 = to_rep1(((a).us_split_discrs1).rec__foo__value__kind))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:value_kind. forall a1:bool. forall a2:integer. forall a3:bool.
  (0 <= object__size1({ us_split_discrs1 = { rec__foo__value__kind = a };
  us_split_fields1 = { rec__foo__value__bool_field = a1;
  rec__foo__value__int_field = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:value_kind. forall a1:bool. forall a2:integer. forall a3:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__foo__value__kind = a
  }; us_split_fields1 = { rec__foo__value__bool_field = a1;
  rec__foo__value__int_field = a2 }; attr__constrained = a3 })))

logic foo__value__kind__first__bit1 : int

logic foo__value__kind__last__bit1 : int

logic foo__value__kind__position1 : int

axiom foo__value__kind__first__bit_axiom1 :
  (0 <= foo__value__kind__first__bit1)

axiom foo__value__kind__last__bit_axiom1 :
  (foo__value__kind__first__bit1 <  foo__value__kind__last__bit1)

axiom foo__value__kind__position_axiom1 : (0 <= foo__value__kind__position1)

logic foo__value__int_field__first__bit1 : int

logic foo__value__int_field__last__bit1 : int

logic foo__value__int_field__position1 : int

axiom foo__value__int_field__first__bit_axiom1 :
  (0 <= foo__value__int_field__first__bit1)

axiom foo__value__int_field__last__bit_axiom1 :
  (foo__value__int_field__first__bit1 <  foo__value__int_field__last__bit1)

axiom foo__value__int_field__position_axiom1 :
  (0 <= foo__value__int_field__position1)

logic foo__value__bool_field__first__bit1 : int

logic foo__value__bool_field__last__bit1 : int

logic foo__value__bool_field__position1 : int

axiom foo__value__bool_field__first__bit_axiom1 :
  (0 <= foo__value__bool_field__first__bit1)

axiom foo__value__bool_field__last__bit_axiom1 :
  (foo__value__bool_field__first__bit1 <  foo__value__bool_field__last__bit1)

axiom foo__value__bool_field__position_axiom1 :
  (0 <= foo__value__bool_field__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy6 : value_kind

logic dummy7 : bool

logic dummy8 : integer

logic dummy9 : bool

type t1b__ref = { t1b__content : us_rep
}

function t1b__ref___projection(a: t1b__ref) : us_rep = (a).t1b__content

predicate in_range3(rec__foo__value__kind1: int, a: us_rep) =
  (rec__foo__value__kind1 = to_rep1(((a).us_split_discrs1).rec__foo__value__kind))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:value_kind. forall a1:bool. forall a2:integer. forall a3:bool.
  (0 <= object__size2({ us_split_discrs1 = { rec__foo__value__kind = a };
  us_split_fields1 = { rec__foo__value__bool_field = a1;
  rec__foo__value__int_field = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:value_kind. forall a1:bool. forall a2:integer. forall a3:bool.
  (0 <= object__alignment2({ us_split_discrs1 = { rec__foo__value__kind = a
  }; us_split_fields1 = { rec__foo__value__bool_field = a1;
  rec__foo__value__int_field = a2 }; attr__constrained = a3 })))

logic foo__value__kind__first__bit2 : int

logic foo__value__kind__last__bit2 : int

logic foo__value__kind__position2 : int

axiom foo__value__kind__first__bit_axiom2 :
  (0 <= foo__value__kind__first__bit2)

axiom foo__value__kind__last__bit_axiom2 :
  (foo__value__kind__first__bit2 <  foo__value__kind__last__bit2)

axiom foo__value__kind__position_axiom2 : (0 <= foo__value__kind__position2)

logic foo__value__bool_field__first__bit2 : int

logic foo__value__bool_field__last__bit2 : int

logic foo__value__bool_field__position2 : int

axiom foo__value__bool_field__first__bit_axiom2 :
  (0 <= foo__value__bool_field__first__bit2)

axiom foo__value__bool_field__last__bit_axiom2 :
  (foo__value__bool_field__first__bit2 <  foo__value__bool_field__last__bit2)

axiom foo__value__bool_field__position_axiom2 :
  (0 <= foo__value__bool_field__position2)

logic foo__value__int_field__first__bit2 : int

logic foo__value__int_field__last__bit2 : int

logic foo__value__int_field__position2 : int

axiom foo__value__int_field__first__bit_axiom2 :
  (0 <= foo__value__int_field__first__bit2)

axiom foo__value__int_field__last__bit_axiom2 :
  (foo__value__int_field__first__bit2 <  foo__value__int_field__last__bit2)

axiom foo__value__int_field__position_axiom2 :
  (0 <= foo__value__int_field__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy10 : value_kind

logic dummy11 : bool

logic dummy12 : integer

logic dummy13 : bool

type t2b__ref = { t2b__content : us_rep
}

function t2b__ref___projection(a: t2b__ref) : us_rep = (a).t2b__content

predicate in_range4(rec__foo__value__kind1: int, a: us_rep) =
  (rec__foo__value__kind1 = to_rep1(((a).us_split_discrs1).rec__foo__value__kind))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:value_kind. forall a1:bool. forall a2:integer. forall a3:bool.
  (0 <= object__size3({ us_split_discrs1 = { rec__foo__value__kind = a };
  us_split_fields1 = { rec__foo__value__bool_field = a1;
  rec__foo__value__int_field = a2 }; attr__constrained = a3 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:value_kind. forall a1:bool. forall a2:integer. forall a3:bool.
  (0 <= object__alignment3({ us_split_discrs1 = { rec__foo__value__kind = a
  }; us_split_fields1 = { rec__foo__value__bool_field = a1;
  rec__foo__value__int_field = a2 }; attr__constrained = a3 })))

logic foo__value__kind__first__bit3 : int

logic foo__value__kind__last__bit3 : int

logic foo__value__kind__position3 : int

axiom foo__value__kind__first__bit_axiom3 :
  (0 <= foo__value__kind__first__bit3)

axiom foo__value__kind__last__bit_axiom3 :
  (foo__value__kind__first__bit3 <  foo__value__kind__last__bit3)

axiom foo__value__kind__position_axiom3 : (0 <= foo__value__kind__position3)

logic foo__value__bool_field__first__bit3 : int

logic foo__value__bool_field__last__bit3 : int

logic foo__value__bool_field__position3 : int

axiom foo__value__bool_field__first__bit_axiom3 :
  (0 <= foo__value__bool_field__first__bit3)

axiom foo__value__bool_field__last__bit_axiom3 :
  (foo__value__bool_field__first__bit3 <  foo__value__bool_field__last__bit3)

axiom foo__value__bool_field__position_axiom3 :
  (0 <= foo__value__bool_field__position3)

logic foo__value__int_field__first__bit3 : int

logic foo__value__int_field__last__bit3 : int

logic foo__value__int_field__position3 : int

axiom foo__value__int_field__first__bit_axiom3 :
  (0 <= foo__value__int_field__first__bit3)

axiom foo__value__int_field__last__bit_axiom3 :
  (foo__value__int_field__first__bit3 <  foo__value__int_field__last__bit3)

axiom foo__value__int_field__position_axiom3 :
  (0 <= foo__value__int_field__position3)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy14 : value_kind

logic dummy15 : bool

logic dummy16 : integer

logic dummy17 : bool

type t3b__ref = { t3b__content : us_rep
}

function t3b__ref___projection(a: t3b__ref) : us_rep = (a).t3b__content

type us_split_fields2 = { rec__foo__record_a__x : us_rep;
rec__foo__record_a__y : us_rep; rec__foo__record_a__z : us_rep
}

function us_split_fields_X__projection(a: us_split_fields2) : us_rep =
  (a).rec__foo__record_a__x

function us_split_fields_Y__projection(a: us_split_fields2) : us_rep =
  (a).rec__foo__record_a__y

function us_split_fields_Z__projection(a: us_split_fields2) : us_rep =
  (a).rec__foo__record_a__z

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  (((((bool_eq3(((a).us_split_fields3).rec__foo__record_a__x,
  ((b).us_split_fields3).rec__foo__record_a__x) = true) and
  (bool_eq3(((a).us_split_fields3).rec__foo__record_a__y,
  ((b).us_split_fields3).rec__foo__record_a__y) = true)) and
  (bool_eq3(((a).us_split_fields3).rec__foo__record_a__z,
  ((b).us_split_fields3).rec__foo__record_a__z) = true)) -> (bool_eq4(a,
  b) = true)) and
  ((not (((bool_eq3(((a).us_split_fields3).rec__foo__record_a__x,
  ((b).us_split_fields3).rec__foo__record_a__x) = true) and
  (bool_eq3(((a).us_split_fields3).rec__foo__record_a__y,
  ((b).us_split_fields3).rec__foo__record_a__y) = true)) and
  (bool_eq3(((a).us_split_fields3).rec__foo__record_a__z,
  ((b).us_split_fields3).rec__foo__record_a__z) = true))) -> (bool_eq4(a,
  b) = false))))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep1. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep1. (0 <= object__alignment4(a)))

logic foo__record_a__x__first__bit : int

logic foo__record_a__x__last__bit : int

logic foo__record_a__x__position : int

axiom foo__record_a__x__first__bit_axiom :
  (0 <= foo__record_a__x__first__bit)

axiom foo__record_a__x__last__bit_axiom :
  (foo__record_a__x__first__bit <  foo__record_a__x__last__bit)

axiom foo__record_a__x__position_axiom : (0 <= foo__record_a__x__position)

logic foo__record_a__y__first__bit : int

logic foo__record_a__y__last__bit : int

logic foo__record_a__y__position : int

axiom foo__record_a__y__first__bit_axiom :
  (0 <= foo__record_a__y__first__bit)

axiom foo__record_a__y__last__bit_axiom :
  (foo__record_a__y__first__bit <  foo__record_a__y__last__bit)

axiom foo__record_a__y__position_axiom : (0 <= foo__record_a__y__position)

logic foo__record_a__z__first__bit : int

logic foo__record_a__z__last__bit : int

logic foo__record_a__z__position : int

axiom foo__record_a__z__first__bit_axiom :
  (0 <= foo__record_a__z__first__bit)

axiom foo__record_a__z__last__bit_axiom :
  (foo__record_a__z__first__bit <  foo__record_a__z__last__bit)

axiom foo__record_a__z__position_axiom : (0 <= foo__record_a__z__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy18 : value_kind

logic dummy19 : bool

logic dummy20 : integer

logic dummy21 : bool

logic dummy22 : value_kind

logic dummy23 : bool

logic dummy24 : integer

logic dummy25 : bool

logic dummy26 : value_kind

logic dummy27 : bool

logic dummy28 : integer

logic dummy29 : bool

type record_a__ref = { record_a__content : us_rep1
}

function record_a__ref___projection(a: record_a__ref) : us_rep1 =
  (a).record_a__content

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "foo.adb", line 24, characters 0-0 *)
goal WP_parameter_def :
  (forall v__split_fields:us_split_fields__ref1.
  ((((((1 = to_rep1(((((v__split_fields).us_split_fields__content1).rec__foo__record_a__x).us_split_discrs1).rec__foo__value__kind)) and
  ((((v__split_fields).us_split_fields__content1).rec__foo__record_a__x).attr__constrained = true)) and
  ((((v__split_fields).us_split_fields__content1).rec__foo__record_a__x).attr__constrained = true)) and
  (((2 = to_rep1(((((v__split_fields).us_split_fields__content1).rec__foo__record_a__y).us_split_discrs1).rec__foo__value__kind)) and
  ((((v__split_fields).us_split_fields__content1).rec__foo__record_a__y).attr__constrained = true)) and
  ((((v__split_fields).us_split_fields__content1).rec__foo__record_a__y).attr__constrained = true))) and
  (((0 = to_rep1(((((v__split_fields).us_split_fields__content1).rec__foo__record_a__z).us_split_discrs1).rec__foo__value__kind)) and
  ((((v__split_fields).us_split_fields__content1).rec__foo__record_a__z).attr__constrained = true)) and
  ((((v__split_fields).us_split_fields__content1).rec__foo__record_a__z).attr__constrained = true))) ->
  (to_rep1(((((v__split_fields).us_split_fields__content1).rec__foo__record_a__x).us_split_discrs1).rec__foo__value__kind) = 1)))
