;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__dic_and_predicate_checks__r__f integer)(rec__dic_and_predicate_checks__r__g integer)))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) integer
  (rec__dic_and_predicate_checks__r__f a))

(define-fun us_split_fields_G__projection ((a us_split_fields)) integer
  (rec__dic_and_predicate_checks__r__g a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__dic_and_predicate_checks__r__f
                           (us_split_fields1 a))) (to_rep
                                                  (rec__dic_and_predicate_checks__r__f
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__dic_and_predicate_checks__r__g
                           (us_split_fields1 a))) (to_rep
                                                  (rec__dic_and_predicate_checks__r__g
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const dic_and_predicate_checks__r__f__first__bit Int)

(declare-const dic_and_predicate_checks__r__f__last__bit Int)

(declare-const dic_and_predicate_checks__r__f__position Int)

;; dic_and_predicate_checks__r__f__first__bit_axiom
  (assert (<= 0 dic_and_predicate_checks__r__f__first__bit))

;; dic_and_predicate_checks__r__f__last__bit_axiom
  (assert
  (< dic_and_predicate_checks__r__f__first__bit dic_and_predicate_checks__r__f__last__bit))

;; dic_and_predicate_checks__r__f__position_axiom
  (assert (<= 0 dic_and_predicate_checks__r__f__position))

(declare-const dic_and_predicate_checks__r__g__first__bit Int)

(declare-const dic_and_predicate_checks__r__g__last__bit Int)

(declare-const dic_and_predicate_checks__r__g__position Int)

;; dic_and_predicate_checks__r__g__first__bit_axiom
  (assert (<= 0 dic_and_predicate_checks__r__g__first__bit))

;; dic_and_predicate_checks__r__g__last__bit_axiom
  (assert
  (< dic_and_predicate_checks__r__g__first__bit dic_and_predicate_checks__r__g__last__bit))

;; dic_and_predicate_checks__r__g__position_axiom
  (assert (<= 0 dic_and_predicate_checks__r__g__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const dic_and_predicate_checks__r__f__first__bit1 Int)

(declare-const dic_and_predicate_checks__r__f__last__bit1 Int)

(declare-const dic_and_predicate_checks__r__f__position1 Int)

;; dic_and_predicate_checks__r__f__first__bit_axiom
  (assert (<= 0 dic_and_predicate_checks__r__f__first__bit1))

;; dic_and_predicate_checks__r__f__last__bit_axiom
  (assert
  (< dic_and_predicate_checks__r__f__first__bit1 dic_and_predicate_checks__r__f__last__bit1))

;; dic_and_predicate_checks__r__f__position_axiom
  (assert (<= 0 dic_and_predicate_checks__r__f__position1))

(declare-const dic_and_predicate_checks__r__g__first__bit1 Int)

(declare-const dic_and_predicate_checks__r__g__last__bit1 Int)

(declare-const dic_and_predicate_checks__r__g__position1 Int)

;; dic_and_predicate_checks__r__g__first__bit_axiom
  (assert (<= 0 dic_and_predicate_checks__r__g__first__bit1))

;; dic_and_predicate_checks__r__g__last__bit_axiom
  (assert
  (< dic_and_predicate_checks__r__g__first__bit1 dic_and_predicate_checks__r__g__last__bit1))

;; dic_and_predicate_checks__r__g__position_axiom
  (assert (<= 0 dic_and_predicate_checks__r__g__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((r__ref 0)) (((mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))

(declare-fun is_valid (us_rep) Bool)

(declare-fun is_valid__function_guard (Bool us_rep) Bool)

(declare-fun is_valid1 (us_rep) Bool)

(declare-fun is_valid__function_guard1 (Bool us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_142 us_rep)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=> (= temp___do_toplevel_141 true)
                                      (=> (= temp___is_init_139 true)
                                      (= (is_valid temp___expr_142) true))))

(define-fun default_initial_assumption ((temp___expr_144 us_rep)
  (temp___skip_top_level_145 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__dic_and_predicate_checks__r__g
                                            (us_split_fields1
                                            temp___expr_144))) 0)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_145 true))
                                         (= (is_valid1 temp___expr_144) true))))

(define-fun dynamic_predicate ((temp___148 us_rep)) Bool (= (is_valid
                                                            temp___148) true))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__dic_and_predicate_checks__nested_2__r__f integer)))))
(define-fun us_split_fields_F__2__projection ((a us_split_fields2)) integer
  (rec__dic_and_predicate_checks__nested_2__r__f a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__dic_and_predicate_checks__nested_2__r__f
                            (us_split_fields3 a))) (to_rep
                                                   (rec__dic_and_predicate_checks__nested_2__r__f
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const dic_and_predicate_checks__nested_2__r__f__first__bit Int)

(declare-const dic_and_predicate_checks__nested_2__r__f__last__bit Int)

(declare-const dic_and_predicate_checks__nested_2__r__f__position Int)

;; dic_and_predicate_checks__nested_2__r__f__first__bit_axiom
  (assert (<= 0 dic_and_predicate_checks__nested_2__r__f__first__bit))

;; dic_and_predicate_checks__nested_2__r__f__last__bit_axiom
  (assert
  (< dic_and_predicate_checks__nested_2__r__f__first__bit dic_and_predicate_checks__nested_2__r__f__last__bit))

;; dic_and_predicate_checks__nested_2__r__f__position_axiom
  (assert (<= 0 dic_and_predicate_checks__nested_2__r__f__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((t__ref1 0)) (((mk_t__ref1 (t__content1 us_rep1)))))
(define-fun t__ref___2__projection ((a t__ref1)) us_rep1 (t__content1 a))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const dic_and_predicate_checks__nested_2__r__f__first__bit1 Int)

(declare-const dic_and_predicate_checks__nested_2__r__f__last__bit1 Int)

(declare-const dic_and_predicate_checks__nested_2__r__f__position1 Int)

;; dic_and_predicate_checks__nested_2__r__f__first__bit_axiom
  (assert (<= 0 dic_and_predicate_checks__nested_2__r__f__first__bit1))

;; dic_and_predicate_checks__nested_2__r__f__last__bit_axiom
  (assert
  (< dic_and_predicate_checks__nested_2__r__f__first__bit1 dic_and_predicate_checks__nested_2__r__f__last__bit1))

;; dic_and_predicate_checks__nested_2__r__f__position_axiom
  (assert (<= 0 dic_and_predicate_checks__nested_2__r__f__position1))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ((r__ref1 0)) (((mk_r__ref1 (r__content1 us_rep1)))))
(define-fun r__ref___2__projection ((a r__ref1)) us_rep1 (r__content1 a))

(declare-fun is_valid2 (us_rep1) Bool)

(declare-fun is_valid__function_guard2 (Bool us_rep1) Bool)

(define-fun dynamic_invariant1 ((temp___expr_163 us_rep1)
  (temp___is_init_160 Bool) (temp___skip_constant_161 Bool)
  (temp___do_toplevel_162 Bool)) Bool (=> (= temp___do_toplevel_162 true)
                                      (=> (= temp___is_init_160 true)
                                      (< 0 (to_rep
                                           (rec__dic_and_predicate_checks__nested_2__r__f
                                           (us_split_fields3 temp___expr_163)))))))

(define-fun default_initial_assumption1 ((temp___expr_166 us_rep1)
  (temp___skip_top_level_167 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_167 true))
                                         (= (is_valid2 temp___expr_166) true)))

(define-fun dynamic_predicate1 ((temp___170 us_rep1)) Bool (< 0 (to_rep
                                                                (rec__dic_and_predicate_checks__nested_2__r__f
                                                                (us_split_fields3
                                                                temp___170)))))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))

(declare-const dic_and_predicate_checks__r__f__first__bit2 Int)

(declare-const dic_and_predicate_checks__r__f__last__bit2 Int)

(declare-const dic_and_predicate_checks__r__f__position2 Int)

;; dic_and_predicate_checks__r__f__first__bit_axiom
  (assert (<= 0 dic_and_predicate_checks__r__f__first__bit2))

;; dic_and_predicate_checks__r__f__last__bit_axiom
  (assert
  (< dic_and_predicate_checks__r__f__first__bit2 dic_and_predicate_checks__r__f__last__bit2))

;; dic_and_predicate_checks__r__f__position_axiom
  (assert (<= 0 dic_and_predicate_checks__r__f__position2))

(declare-const dic_and_predicate_checks__r__g__first__bit2 Int)

(declare-const dic_and_predicate_checks__r__g__last__bit2 Int)

(declare-const dic_and_predicate_checks__r__g__position2 Int)

;; dic_and_predicate_checks__r__g__first__bit_axiom
  (assert (<= 0 dic_and_predicate_checks__r__g__first__bit2))

;; dic_and_predicate_checks__r__g__last__bit_axiom
  (assert
  (< dic_and_predicate_checks__r__g__first__bit2 dic_and_predicate_checks__r__g__last__bit2))

;; dic_and_predicate_checks__r__g__position_axiom
  (assert (<= 0 dic_and_predicate_checks__r__g__position2))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((nested_3_t__ref 0))
(((mk_nested_3_t__ref (nested_3_t__content us_rep)))))
(define-fun nested_3_t__ref___projection ((a nested_3_t__ref)) us_rep
  (nested_3_t__content a))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))

(declare-const dic_and_predicate_checks__r__f__first__bit3 Int)

(declare-const dic_and_predicate_checks__r__f__last__bit3 Int)

(declare-const dic_and_predicate_checks__r__f__position3 Int)

;; dic_and_predicate_checks__r__f__first__bit_axiom
  (assert (<= 0 dic_and_predicate_checks__r__f__first__bit3))

;; dic_and_predicate_checks__r__f__last__bit_axiom
  (assert
  (< dic_and_predicate_checks__r__f__first__bit3 dic_and_predicate_checks__r__f__last__bit3))

;; dic_and_predicate_checks__r__f__position_axiom
  (assert (<= 0 dic_and_predicate_checks__r__f__position3))

(declare-const dic_and_predicate_checks__r__g__first__bit3 Int)

(declare-const dic_and_predicate_checks__r__g__last__bit3 Int)

(declare-const dic_and_predicate_checks__r__g__position3 Int)

;; dic_and_predicate_checks__r__g__first__bit_axiom
  (assert (<= 0 dic_and_predicate_checks__r__g__first__bit3))

;; dic_and_predicate_checks__r__g__last__bit_axiom
  (assert
  (< dic_and_predicate_checks__r__g__first__bit3 dic_and_predicate_checks__r__g__last__bit3))

;; dic_and_predicate_checks__r__g__position_axiom
  (assert (<= 0 dic_and_predicate_checks__r__g__position3))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((p__ref 0)) (((mk_p__ref (p__content us_rep)))))
(define-fun p__ref___projection ((a p__ref)) us_rep (p__content a))

(declare-fun is_valid3 (us_rep) Bool)

(declare-fun is_valid__function_guard3 (Bool us_rep) Bool)

(define-fun dynamic_invariant2 ((temp___expr_184 us_rep)
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)) Bool (=> (= temp___do_toplevel_183 true)
                                      (=> (= temp___is_init_181 true)
                                      (= (is_valid3 temp___expr_184) true))))

(define-fun default_initial_assumption2 ((temp___expr_186 us_rep)
  (temp___skip_top_level_187 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__dic_and_predicate_checks__r__g
                                            (us_split_fields1
                                            temp___expr_186))) 0)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_187 true))
                                         (= (is_valid3 temp___expr_186) true))))

(define-fun dynamic_predicate2 ((temp___190 us_rep)) Bool (= (is_valid3
                                                             temp___190) true))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep2) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))

(declare-fun user_eq7 (us_rep2 us_rep2) Bool)

(declare-const dummy7 us_rep2)

(declare-datatypes ((t__ref2 0)) (((mk_t__ref2 (t__content2 us_rep2)))))
(define-fun t__ref___3__projection ((a t__ref2)) us_rep2 (t__content2 a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun default_initial_assumption3 ((temp___expr_136 us_rep)
  (temp___skip_top_level_137 Bool)) Bool (= (to_rep
                                            (rec__dic_and_predicate_checks__r__g
                                            (us_split_fields1
                                            temp___expr_136))) 0))

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (= (is_valid x) true)
     (< 0 (to_rep (rec__dic_and_predicate_checks__r__f (us_split_fields1 x))))) :pattern (
  (is_valid x)) )))

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (= (is_valid1 x) true) (= (is_valid x) true)) :pattern ((is_valid1 x)) )))

(define-fun dynamic_invariant4 ((temp___expr_153 us_rep1)
  (temp___is_init_150 Bool) (temp___skip_constant_151 Bool)
  (temp___do_toplevel_152 Bool)) Bool (=> (= temp___do_toplevel_152 true)
                                      (=> (= temp___is_init_150 true)
                                      (< 0 (to_rep
                                           (rec__dic_and_predicate_checks__nested_2__r__f
                                           (us_split_fields3 temp___expr_153)))))))

(define-fun dynamic_predicate3 ((temp___158 us_rep1)) Bool (< 0 (to_rep
                                                                (rec__dic_and_predicate_checks__nested_2__r__f
                                                                (us_split_fields3
                                                                temp___158)))))

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((x us_rep1))
  (! (= (= (is_valid2 x) true)
     (< 0 (to_rep
          (rec__dic_and_predicate_checks__nested_2__r__f
          (us_split_fields3 x))))) :pattern ((is_valid2 x)) )))

(define-fun default_initial_assumption4 ((temp___expr_177 us_rep)
  (temp___skip_top_level_178 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__dic_and_predicate_checks__r__g
                                            (us_split_fields1
                                            temp___expr_177))) 0)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_178 true))
                                         (= (is_valid3 temp___expr_177) true))))

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (= (is_valid3 x) true) (= (is_valid x) true)) :pattern ((is_valid3 x)) )))

(declare-const x1__split_fields integer)

(declare-const x1__split_fields1 integer)

(declare-const x2__split_fields integer)

(declare-const temp___207 integer)

(declare-const temp___2071 integer)

(define-fun temp___2072 () us_rep (mk___rep
                                  (mk___split_fields temp___207 temp___2071)))

;; H
  (assert (default_initial_assumption
  (mk___rep (mk___split_fields x1__split_fields x1__split_fields1)) false))

;; H
  (assert
  (= (is_valid2 (mk___rep1 (mk___split_fields1 x2__split_fields))) true))

;; H
  (assert (default_initial_assumption2 temp___2072 false))

(assert
;; WP_parameter_def
 ;; File "dic_and_predicate_checks.ads", line 41, characters 0-0
  (not (= (is_valid3 temp___2072) true)))
(check-sat)
(exit)
