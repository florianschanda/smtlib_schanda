;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__record_equality__root__c natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural
  (rec__record_equality__root__c a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__record_equality__root__f1 natural)(rec__ext__ us_private)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) natural
  (rec__record_equality__root__f1 a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun us_rep_3__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__record_equality__root__c
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__record_equality__root__c
                                                  (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__record_equality__root__f1
                           (us_split_fields1 a))) (to_rep
                                                  (rec__record_equality__root__f1
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const record_equality__root__c__first__bit Int)

(declare-const record_equality__root__c__last__bit Int)

(declare-const record_equality__root__c__position Int)

;; record_equality__root__c__first__bit_axiom
  (assert (<= 0 record_equality__root__c__first__bit))

;; record_equality__root__c__last__bit_axiom
  (assert
  (< record_equality__root__c__first__bit record_equality__root__c__last__bit))

;; record_equality__root__c__position_axiom
  (assert (<= 0 record_equality__root__c__position))

(declare-const record_equality__root__f1__first__bit Int)

(declare-const record_equality__root__f1__last__bit Int)

(declare-const record_equality__root__f1__position Int)

;; record_equality__root__f1__first__bit_axiom
  (assert (<= 0 record_equality__root__f1__first__bit))

;; record_equality__root__f1__last__bit_axiom
  (assert
  (< record_equality__root__f1__first__bit record_equality__root__f1__last__bit))

;; record_equality__root__f1__position_axiom
  (assert (<= 0 record_equality__root__f1__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((root__ref 0)) (((mk_root__ref (root__content us_rep)))))
(define-fun root__ref___projection ((a root__ref)) us_rep (root__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__record_equality__child__f2 natural)(rec__record_equality__root__f11 natural)(rec__ext__1 us_private)))))
(define-fun us_split_fields_F2__projection ((a us_split_fields2)) natural
  (rec__record_equality__child__f2 a))

(define-fun us_split_fields_F12__projection ((a us_split_fields2)) natural
  (rec__record_equality__root__f11 a))

(define-fun us_split_fields_2__projection ((a us_split_fields2)) us_private
  (rec__ext__1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep_4__projection ((a us_rep1)) us_split_discrs (us_split_discrs2
                                                               a))

(define-fun us_rep_5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun us_rep_6__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (natural us_private) us_private)

(declare-fun extract__f2 (us_private) natural)

;; extract__f2__conv
  (assert
  (forall ((f2 natural))
  (forall ((rec__ext__2 us_private))
  (= (extract__f2 (hide_ext__ f2 rec__ext__2)) f2))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a)
                                         (mk___split_fields
                                         (rec__record_equality__root__f11
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__record_equality__child__f2
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r)
                                         (mk___split_fields1
                                         (extract__f2
                                         (rec__ext__ (us_split_fields1 r)))
                                         (rec__record_equality__root__f1
                                         (us_split_fields1 r))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__record_equality__root__c
                            (us_split_discrs2 a))) (to_rep
                                                   (rec__record_equality__root__c
                                                   (us_split_discrs2 b))))
                         (= (to_rep
                            (rec__record_equality__child__f2
                            (us_split_fields3 a))) (to_rep
                                                   (rec__record_equality__child__f2
                                                   (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__record_equality__root__f11
                            (us_split_fields3 a))) (to_rep
                                                   (rec__record_equality__root__f11
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const record_equality__root__c__first__bit1 Int)

(declare-const record_equality__root__c__last__bit1 Int)

(declare-const record_equality__root__c__position1 Int)

;; record_equality__root__c__first__bit_axiom
  (assert (<= 0 record_equality__root__c__first__bit1))

;; record_equality__root__c__last__bit_axiom
  (assert
  (< record_equality__root__c__first__bit1 record_equality__root__c__last__bit1))

;; record_equality__root__c__position_axiom
  (assert (<= 0 record_equality__root__c__position1))

(declare-const record_equality__child__f2__first__bit Int)

(declare-const record_equality__child__f2__last__bit Int)

(declare-const record_equality__child__f2__position Int)

;; record_equality__child__f2__first__bit_axiom
  (assert (<= 0 record_equality__child__f2__first__bit))

;; record_equality__child__f2__last__bit_axiom
  (assert
  (< record_equality__child__f2__first__bit record_equality__child__f2__last__bit))

;; record_equality__child__f2__position_axiom
  (assert (<= 0 record_equality__child__f2__position))

(declare-const record_equality__root__f1__first__bit1 Int)

(declare-const record_equality__root__f1__last__bit1 Int)

(declare-const record_equality__root__f1__position1 Int)

;; record_equality__root__f1__first__bit_axiom
  (assert (<= 0 record_equality__root__f1__first__bit1))

;; record_equality__root__f1__last__bit_axiom
  (assert
  (< record_equality__root__f1__first__bit1 record_equality__root__f1__last__bit1))

;; record_equality__root__f1__position_axiom
  (assert (<= 0 record_equality__root__f1__position1))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((child__ref 0))
(((mk_child__ref (child__content us_rep1)))))
(define-fun child__ref___projection ((a child__ref)) us_rep1 (child__content
                                                             a))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__record_equality__grandchild__f3 natural)(rec__record_equality__root__f12 natural)(rec__record_equality__child__f21 natural)(rec__ext__2 us_private)))))
(define-fun us_split_fields_F3__projection ((a us_split_fields4)) natural
  (rec__record_equality__grandchild__f3 a))

(define-fun us_split_fields_F13__projection ((a us_split_fields4)) natural
  (rec__record_equality__root__f12 a))

(define-fun us_split_fields_F22__projection ((a us_split_fields4)) natural
  (rec__record_equality__child__f21 a))

(define-fun us_split_fields_3__projection ((a us_split_fields4)) us_private
  (rec__ext__2 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2
  (us_split_discrs3 us_split_discrs)(us_split_fields5 us_split_fields4)(attr__tag2 Int)))))
(define-fun us_rep_7__projection ((a us_rep2)) us_split_discrs (us_split_discrs3
                                                               a))

(define-fun us_rep_8__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun us_rep_9__projection ((a us_rep2)) Int (attr__tag2 a))

(declare-fun hide_ext__1 (natural natural us_private) us_private)

(declare-fun extract__f3 (us_private) natural)

;; extract__f3__conv
  (assert
  (forall ((f3 natural) (f2 natural))
  (forall ((rec__ext__3 us_private))
  (= (extract__f3 (hide_ext__1 f3 f2 rec__ext__3)) f3))))

;; extract__f2__conv
  (assert
  (forall ((f3 natural) (f2 natural))
  (forall ((rec__ext__3 us_private))
  (= (extract__f2 (hide_ext__1 f3 f2 rec__ext__3)) f2))))

(declare-fun extract__ext__1 (us_private) us_private)

(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (us_split_discrs3 a)
                                          (mk___split_fields
                                          (rec__record_equality__root__f12
                                          (us_split_fields5 a))
                                          (hide_ext__1
                                          (rec__record_equality__grandchild__f3
                                          (us_split_fields5 a))
                                          (rec__record_equality__child__f21
                                          (us_split_fields5 a))
                                          (rec__ext__2 (us_split_fields5 a))))
                                          (attr__tag2 a)))

(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (us_split_discrs1 r)
                                          (mk___split_fields2
                                          (extract__f3
                                          (rec__ext__ (us_split_fields1 r)))
                                          (rec__record_equality__root__f1
                                          (us_split_fields1 r))
                                          (extract__f2
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__ext__1
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep
                            (rec__record_equality__root__c
                            (us_split_discrs3 a))) (to_rep
                                                   (rec__record_equality__root__c
                                                   (us_split_discrs3 b))))
                         (= (to_rep
                            (rec__record_equality__grandchild__f3
                            (us_split_fields5 a))) (to_rep
                                                   (rec__record_equality__grandchild__f3
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__record_equality__root__f12
                            (us_split_fields5 a))) (to_rep
                                                   (rec__record_equality__root__f12
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__record_equality__child__f21
                            (us_split_fields5 a))) (to_rep
                                                   (rec__record_equality__child__f21
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const us_tag2 Int)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-const record_equality__root__c__first__bit2 Int)

(declare-const record_equality__root__c__last__bit2 Int)

(declare-const record_equality__root__c__position2 Int)

;; record_equality__root__c__first__bit_axiom
  (assert (<= 0 record_equality__root__c__first__bit2))

;; record_equality__root__c__last__bit_axiom
  (assert
  (< record_equality__root__c__first__bit2 record_equality__root__c__last__bit2))

;; record_equality__root__c__position_axiom
  (assert (<= 0 record_equality__root__c__position2))

(declare-const record_equality__grandchild__f3__first__bit Int)

(declare-const record_equality__grandchild__f3__last__bit Int)

(declare-const record_equality__grandchild__f3__position Int)

;; record_equality__grandchild__f3__first__bit_axiom
  (assert (<= 0 record_equality__grandchild__f3__first__bit))

;; record_equality__grandchild__f3__last__bit_axiom
  (assert
  (< record_equality__grandchild__f3__first__bit record_equality__grandchild__f3__last__bit))

;; record_equality__grandchild__f3__position_axiom
  (assert (<= 0 record_equality__grandchild__f3__position))

(declare-const record_equality__root__f1__first__bit2 Int)

(declare-const record_equality__root__f1__last__bit2 Int)

(declare-const record_equality__root__f1__position2 Int)

;; record_equality__root__f1__first__bit_axiom
  (assert (<= 0 record_equality__root__f1__first__bit2))

;; record_equality__root__f1__last__bit_axiom
  (assert
  (< record_equality__root__f1__first__bit2 record_equality__root__f1__last__bit2))

;; record_equality__root__f1__position_axiom
  (assert (<= 0 record_equality__root__f1__position2))

(declare-const record_equality__child__f2__first__bit1 Int)

(declare-const record_equality__child__f2__last__bit1 Int)

(declare-const record_equality__child__f2__position1 Int)

;; record_equality__child__f2__first__bit_axiom
  (assert (<= 0 record_equality__child__f2__first__bit1))

;; record_equality__child__f2__last__bit_axiom
  (assert
  (< record_equality__child__f2__first__bit1 record_equality__child__f2__last__bit1))

;; record_equality__child__f2__position_axiom
  (assert (<= 0 record_equality__child__f2__position1))

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-const dummy3 us_rep2)

(declare-datatypes ((grandchild__ref 0))
(((mk_grandchild__ref (grandchild__content us_rep2)))))
(define-fun grandchild__ref___projection ((a grandchild__ref)) us_rep2
  (grandchild__content a))

(declare-const us_tag3 Int)

(define-fun in_range2 ((rec__record_equality__root__c1 Int)
  (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep
                                                     (rec__record_equality__root__c
                                                     (us_split_discrs1 a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-const record_equality__root__c__first__bit3 Int)

(declare-const record_equality__root__c__last__bit3 Int)

(declare-const record_equality__root__c__position3 Int)

;; record_equality__root__c__first__bit_axiom
  (assert (<= 0 record_equality__root__c__first__bit3))

;; record_equality__root__c__last__bit_axiom
  (assert
  (< record_equality__root__c__first__bit3 record_equality__root__c__last__bit3))

;; record_equality__root__c__position_axiom
  (assert (<= 0 record_equality__root__c__position3))

(declare-const record_equality__root__f1__first__bit3 Int)

(declare-const record_equality__root__f1__last__bit3 Int)

(declare-const record_equality__root__f1__position3 Int)

;; record_equality__root__f1__first__bit_axiom
  (assert (<= 0 record_equality__root__f1__first__bit3))

;; record_equality__root__f1__last__bit_axiom
  (assert
  (< record_equality__root__f1__first__bit3 record_equality__root__f1__last__bit3))

;; record_equality__root__f1__position_axiom
  (assert (<= 0 record_equality__root__f1__position3))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((root_0__ref 0))
(((mk_root_0__ref (root_0__content us_rep)))))
(define-fun root_0__ref___projection ((a root_0__ref)) us_rep (root_0__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_165 us_rep)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)) Bool (=>
                                      (not (= temp___skip_constant_163 true))
                                      (in_range2 0 temp___expr_165)))

(define-fun default_initial_assumption ((temp___expr_167 us_rep)
  (temp___skip_top_level_168 Bool)) Bool (and
                                         (= (attr__tag temp___expr_167)
                                         us_tag3)
                                         (and
                                         (= (to_rep
                                            (rec__record_equality__root__c
                                            (us_split_discrs1
                                            temp___expr_167))) 0)
                                         (= (to_rep
                                            (rec__record_equality__root__f1
                                            (us_split_fields1
                                            temp___expr_167))) 0))))

(declare-const us_tag4 Int)

(define-fun in_range3 ((rec__record_equality__root__c1 Int)
  (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep
                                                     (rec__record_equality__root__c
                                                     (us_split_discrs1 a)))))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep1) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))

(declare-const record_equality__root__c__first__bit4 Int)

(declare-const record_equality__root__c__last__bit4 Int)

(declare-const record_equality__root__c__position4 Int)

;; record_equality__root__c__first__bit_axiom
  (assert (<= 0 record_equality__root__c__first__bit4))

;; record_equality__root__c__last__bit_axiom
  (assert
  (< record_equality__root__c__first__bit4 record_equality__root__c__last__bit4))

;; record_equality__root__c__position_axiom
  (assert (<= 0 record_equality__root__c__position4))

(declare-const record_equality__root__f1__first__bit4 Int)

(declare-const record_equality__root__f1__last__bit4 Int)

(declare-const record_equality__root__f1__position4 Int)

;; record_equality__root__f1__first__bit_axiom
  (assert (<= 0 record_equality__root__f1__first__bit4))

;; record_equality__root__f1__last__bit_axiom
  (assert
  (< record_equality__root__f1__first__bit4 record_equality__root__f1__last__bit4))

;; record_equality__root__f1__position_axiom
  (assert (<= 0 record_equality__root__f1__position4))

(declare-const record_equality__child__f2__first__bit2 Int)

(declare-const record_equality__child__f2__last__bit2 Int)

(declare-const record_equality__child__f2__position2 Int)

;; record_equality__child__f2__first__bit_axiom
  (assert (<= 0 record_equality__child__f2__first__bit2))

;; record_equality__child__f2__last__bit_axiom
  (assert
  (< record_equality__child__f2__first__bit2 record_equality__child__f2__last__bit2))

;; record_equality__child__f2__position_axiom
  (assert (<= 0 record_equality__child__f2__position2))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ((child_0__ref 0))
(((mk_child_0__ref (child_0__content us_rep1)))))
(define-fun child_0__ref___projection ((a child_0__ref)) us_rep1 (child_0__content
                                                                 a))

(define-fun dynamic_invariant2 ((temp___expr_173 us_rep1)
  (temp___is_init_170 Bool) (temp___skip_constant_171 Bool)
  (temp___do_toplevel_172 Bool)) Bool (=>
                                      (not (= temp___skip_constant_171 true))
                                      (in_range3 0
                                      (to_base temp___expr_173))))

(define-fun default_initial_assumption1 ((temp___expr_175 us_rep1)
  (temp___skip_top_level_176 Bool)) Bool (and
                                         (= (attr__tag1 temp___expr_175)
                                         us_tag4)
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__record_equality__root__c
                                            (us_split_discrs2
                                            temp___expr_175))) 0)
                                         (= (to_rep
                                            (rec__record_equality__root__f11
                                            (us_split_fields3
                                            temp___expr_175))) 0))
                                         (= (to_rep
                                            (rec__record_equality__child__f2
                                            (us_split_fields3
                                            temp___expr_175))) 0))))

(declare-const us_tag5 Int)

(define-fun in_range4 ((rec__record_equality__root__c1 Int)
  (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep
                                                     (rec__record_equality__root__c
                                                     (us_split_discrs1 a)))))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))

(declare-const record_equality__root__c__first__bit5 Int)

(declare-const record_equality__root__c__last__bit5 Int)

(declare-const record_equality__root__c__position5 Int)

;; record_equality__root__c__first__bit_axiom
  (assert (<= 0 record_equality__root__c__first__bit5))

;; record_equality__root__c__last__bit_axiom
  (assert
  (< record_equality__root__c__first__bit5 record_equality__root__c__last__bit5))

;; record_equality__root__c__position_axiom
  (assert (<= 0 record_equality__root__c__position5))

(declare-const record_equality__root__f1__first__bit5 Int)

(declare-const record_equality__root__f1__last__bit5 Int)

(declare-const record_equality__root__f1__position5 Int)

;; record_equality__root__f1__first__bit_axiom
  (assert (<= 0 record_equality__root__f1__first__bit5))

;; record_equality__root__f1__last__bit_axiom
  (assert
  (< record_equality__root__f1__first__bit5 record_equality__root__f1__last__bit5))

;; record_equality__root__f1__position_axiom
  (assert (<= 0 record_equality__root__f1__position5))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((tr_pu1S__ref 0))
(((mk_tr_pu1S__ref (tr_pu1S__content us_rep)))))
(define-fun tr_pu1S__ref___projection ((a tr_pu1S__ref)) us_rep (tr_pu1S__content
                                                                a))

(define-fun dynamic_invariant3 ((temp___expr_181 us_rep)
  (temp___is_init_178 Bool) (temp___skip_constant_179 Bool)
  (temp___do_toplevel_180 Bool)) Bool (=>
                                      (not (= temp___skip_constant_179 true))
                                      (in_range4 0 temp___expr_181)))

(define-fun default_initial_assumption2 ((temp___expr_183 us_rep)
  (temp___skip_top_level_184 Bool)) Bool (and
                                         (= (attr__tag temp___expr_183)
                                         us_tag5)
                                         (and
                                         (= (to_rep
                                            (rec__record_equality__root__c
                                            (us_split_discrs1
                                            temp___expr_183))) 0)
                                         (= (to_rep
                                            (rec__record_equality__root__f1
                                            (us_split_fields1
                                            temp___expr_183))) 0))))

(declare-const r_pu1__split_discrs us_split_discrs)

(declare-const r_pu1__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const r_pu2__split_discrs us_split_discrs)

(declare-const r_pu2__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const us_tag6 Int)

(define-fun in_range5 ((rec__record_equality__root__c1 Int)
  (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep
                                                     (rec__record_equality__root__c
                                                     (us_split_discrs1 a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep1) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment6 a))))

(declare-const record_equality__root__c__first__bit6 Int)

(declare-const record_equality__root__c__last__bit6 Int)

(declare-const record_equality__root__c__position6 Int)

;; record_equality__root__c__first__bit_axiom
  (assert (<= 0 record_equality__root__c__first__bit6))

;; record_equality__root__c__last__bit_axiom
  (assert
  (< record_equality__root__c__first__bit6 record_equality__root__c__last__bit6))

;; record_equality__root__c__position_axiom
  (assert (<= 0 record_equality__root__c__position6))

(declare-const record_equality__root__f1__first__bit6 Int)

(declare-const record_equality__root__f1__last__bit6 Int)

(declare-const record_equality__root__f1__position6 Int)

;; record_equality__root__f1__first__bit_axiom
  (assert (<= 0 record_equality__root__f1__first__bit6))

;; record_equality__root__f1__last__bit_axiom
  (assert
  (< record_equality__root__f1__first__bit6 record_equality__root__f1__last__bit6))

;; record_equality__root__f1__position_axiom
  (assert (<= 0 record_equality__root__f1__position6))

(declare-const record_equality__child__f2__first__bit3 Int)

(declare-const record_equality__child__f2__last__bit3 Int)

(declare-const record_equality__child__f2__position3 Int)

;; record_equality__child__f2__first__bit_axiom
  (assert (<= 0 record_equality__child__f2__first__bit3))

;; record_equality__child__f2__last__bit_axiom
  (assert
  (< record_equality__child__f2__first__bit3 record_equality__child__f2__last__bit3))

;; record_equality__child__f2__position_axiom
  (assert (<= 0 record_equality__child__f2__position3))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes ((tc_pu1S__ref 0))
(((mk_tc_pu1S__ref (tc_pu1S__content us_rep1)))))
(define-fun tc_pu1S__ref___projection ((a tc_pu1S__ref)) us_rep1 (tc_pu1S__content
                                                                 a))

(define-fun dynamic_invariant4 ((temp___expr_189 us_rep1)
  (temp___is_init_186 Bool) (temp___skip_constant_187 Bool)
  (temp___do_toplevel_188 Bool)) Bool (=>
                                      (not (= temp___skip_constant_187 true))
                                      (in_range5 0
                                      (to_base temp___expr_189))))

(define-fun default_initial_assumption3 ((temp___expr_191 us_rep1)
  (temp___skip_top_level_192 Bool)) Bool (and
                                         (= (attr__tag1 temp___expr_191)
                                         us_tag6)
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__record_equality__root__c
                                            (us_split_discrs2
                                            temp___expr_191))) 0)
                                         (= (to_rep
                                            (rec__record_equality__root__f11
                                            (us_split_fields3
                                            temp___expr_191))) 0))
                                         (= (to_rep
                                            (rec__record_equality__child__f2
                                            (us_split_fields3
                                            temp___expr_191))) 0))))

(declare-const c_pu1__split_discrs us_split_discrs)

(declare-const c_pu1__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c_pu2__split_discrs us_split_discrs)

(declare-const c_pu2__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const r2b Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const us_tag7 Int)

(define-fun in_range6 ((rec__record_equality__root__c1 Int)
  (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep
                                                     (rec__record_equality__root__c
                                                     (us_split_discrs1 a)))))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep2) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment7 a))))

(declare-const record_equality__root__c__first__bit7 Int)

(declare-const record_equality__root__c__last__bit7 Int)

(declare-const record_equality__root__c__position7 Int)

;; record_equality__root__c__first__bit_axiom
  (assert (<= 0 record_equality__root__c__first__bit7))

;; record_equality__root__c__last__bit_axiom
  (assert
  (< record_equality__root__c__first__bit7 record_equality__root__c__last__bit7))

;; record_equality__root__c__position_axiom
  (assert (<= 0 record_equality__root__c__position7))

(declare-const record_equality__root__f1__first__bit7 Int)

(declare-const record_equality__root__f1__last__bit7 Int)

(declare-const record_equality__root__f1__position7 Int)

;; record_equality__root__f1__first__bit_axiom
  (assert (<= 0 record_equality__root__f1__first__bit7))

;; record_equality__root__f1__last__bit_axiom
  (assert
  (< record_equality__root__f1__first__bit7 record_equality__root__f1__last__bit7))

;; record_equality__root__f1__position_axiom
  (assert (<= 0 record_equality__root__f1__position7))

(declare-const record_equality__child__f2__first__bit4 Int)

(declare-const record_equality__child__f2__last__bit4 Int)

(declare-const record_equality__child__f2__position4 Int)

;; record_equality__child__f2__first__bit_axiom
  (assert (<= 0 record_equality__child__f2__first__bit4))

;; record_equality__child__f2__last__bit_axiom
  (assert
  (< record_equality__child__f2__first__bit4 record_equality__child__f2__last__bit4))

;; record_equality__child__f2__position_axiom
  (assert (<= 0 record_equality__child__f2__position4))

(declare-const record_equality__grandchild__f3__first__bit1 Int)

(declare-const record_equality__grandchild__f3__last__bit1 Int)

(declare-const record_equality__grandchild__f3__position1 Int)

;; record_equality__grandchild__f3__first__bit_axiom
  (assert (<= 0 record_equality__grandchild__f3__first__bit1))

;; record_equality__grandchild__f3__last__bit_axiom
  (assert
  (< record_equality__grandchild__f3__first__bit1 record_equality__grandchild__f3__last__bit1))

;; record_equality__grandchild__f3__position_axiom
  (assert (<= 0 record_equality__grandchild__f3__position1))

(declare-fun user_eq8 (us_rep2 us_rep2) Bool)

(declare-const dummy8 us_rep2)

(declare-datatypes ((t1b__ref 0)) (((mk_t1b__ref (t1b__content us_rep2)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep2 (t1b__content a))

(declare-const g_pu1__split_discrs us_split_discrs)

(declare-const g_pu1__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const r4b Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const us_tag8 Int)

(define-fun in_range7 ((rec__record_equality__root__c1 Int)
  (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep
                                                     (rec__record_equality__root__c
                                                     (us_split_discrs1 a)))))

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep2) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment8 a))))

(declare-const record_equality__root__c__first__bit8 Int)

(declare-const record_equality__root__c__last__bit8 Int)

(declare-const record_equality__root__c__position8 Int)

;; record_equality__root__c__first__bit_axiom
  (assert (<= 0 record_equality__root__c__first__bit8))

;; record_equality__root__c__last__bit_axiom
  (assert
  (< record_equality__root__c__first__bit8 record_equality__root__c__last__bit8))

;; record_equality__root__c__position_axiom
  (assert (<= 0 record_equality__root__c__position8))

(declare-const record_equality__root__f1__first__bit8 Int)

(declare-const record_equality__root__f1__last__bit8 Int)

(declare-const record_equality__root__f1__position8 Int)

;; record_equality__root__f1__first__bit_axiom
  (assert (<= 0 record_equality__root__f1__first__bit8))

;; record_equality__root__f1__last__bit_axiom
  (assert
  (< record_equality__root__f1__first__bit8 record_equality__root__f1__last__bit8))

;; record_equality__root__f1__position_axiom
  (assert (<= 0 record_equality__root__f1__position8))

(declare-const record_equality__child__f2__first__bit5 Int)

(declare-const record_equality__child__f2__last__bit5 Int)

(declare-const record_equality__child__f2__position5 Int)

;; record_equality__child__f2__first__bit_axiom
  (assert (<= 0 record_equality__child__f2__first__bit5))

;; record_equality__child__f2__last__bit_axiom
  (assert
  (< record_equality__child__f2__first__bit5 record_equality__child__f2__last__bit5))

;; record_equality__child__f2__position_axiom
  (assert (<= 0 record_equality__child__f2__position5))

(declare-const record_equality__grandchild__f3__first__bit2 Int)

(declare-const record_equality__grandchild__f3__last__bit2 Int)

(declare-const record_equality__grandchild__f3__position2 Int)

;; record_equality__grandchild__f3__first__bit_axiom
  (assert (<= 0 record_equality__grandchild__f3__first__bit2))

;; record_equality__grandchild__f3__last__bit_axiom
  (assert
  (< record_equality__grandchild__f3__first__bit2 record_equality__grandchild__f3__last__bit2))

;; record_equality__grandchild__f3__position_axiom
  (assert (<= 0 record_equality__grandchild__f3__position2))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes ((t3b__ref 0)) (((mk_t3b__ref (t3b__content us_rep2)))))
(define-fun t3b__ref___projection ((a t3b__ref)) us_rep2 (t3b__content a))

(declare-const g_pu2__split_discrs us_split_discrs)

(declare-const g_pu2__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const c_gp1 us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const us_tag9 Int)

(define-fun in_range8 ((rec__record_equality__root__c1 Int)
  (a us_rep)) Bool (= rec__record_equality__root__c1 (to_rep
                                                     (rec__record_equality__root__c
                                                     (us_split_discrs1 a)))))

(declare-const value__size9 Int)

(declare-fun object__size9 (us_rep1) Int)

(declare-const value__alignment9 Int)

(declare-fun object__alignment9 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size9 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment9 a))))

(declare-const record_equality__root__c__first__bit9 Int)

(declare-const record_equality__root__c__last__bit9 Int)

(declare-const record_equality__root__c__position9 Int)

;; record_equality__root__c__first__bit_axiom
  (assert (<= 0 record_equality__root__c__first__bit9))

;; record_equality__root__c__last__bit_axiom
  (assert
  (< record_equality__root__c__first__bit9 record_equality__root__c__last__bit9))

;; record_equality__root__c__position_axiom
  (assert (<= 0 record_equality__root__c__position9))

(declare-const record_equality__root__f1__first__bit9 Int)

(declare-const record_equality__root__f1__last__bit9 Int)

(declare-const record_equality__root__f1__position9 Int)

;; record_equality__root__f1__first__bit_axiom
  (assert (<= 0 record_equality__root__f1__first__bit9))

;; record_equality__root__f1__last__bit_axiom
  (assert
  (< record_equality__root__f1__first__bit9 record_equality__root__f1__last__bit9))

;; record_equality__root__f1__position_axiom
  (assert (<= 0 record_equality__root__f1__position9))

(declare-const record_equality__child__f2__first__bit6 Int)

(declare-const record_equality__child__f2__last__bit6 Int)

(declare-const record_equality__child__f2__position6 Int)

;; record_equality__child__f2__first__bit_axiom
  (assert (<= 0 record_equality__child__f2__first__bit6))

;; record_equality__child__f2__last__bit_axiom
  (assert
  (< record_equality__child__f2__first__bit6 record_equality__child__f2__last__bit6))

;; record_equality__child__f2__position_axiom
  (assert (<= 0 record_equality__child__f2__position6))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-const dummy10 us_rep1)

(declare-datatypes ((tc_gp2S__ref 0))
(((mk_tc_gp2S__ref (tc_gp2S__content us_rep1)))))
(define-fun tc_gp2S__ref___projection ((a tc_gp2S__ref)) us_rep1 (tc_gp2S__content
                                                                 a))

(define-fun dynamic_invariant5 ((temp___expr_197 us_rep1)
  (temp___is_init_194 Bool) (temp___skip_constant_195 Bool)
  (temp___do_toplevel_196 Bool)) Bool (=>
                                      (not (= temp___skip_constant_195 true))
                                      (in_range8 0
                                      (to_base temp___expr_197))))

(define-fun default_initial_assumption4 ((temp___expr_199 us_rep1)
  (temp___skip_top_level_200 Bool)) Bool (and
                                         (= (attr__tag1 temp___expr_199)
                                         us_tag9)
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__record_equality__root__c
                                            (us_split_discrs2
                                            temp___expr_199))) 0)
                                         (= (to_rep
                                            (rec__record_equality__root__f11
                                            (us_split_fields3
                                            temp___expr_199))) 0))
                                         (= (to_rep
                                            (rec__record_equality__child__f2
                                            (us_split_fields3
                                            temp___expr_199))) 0))))

(declare-const c_gp2 us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const r_pu1__split_fields natural)

(declare-const r_pu1__split_fields1 us_private)

(declare-const r_pu2__split_fields natural)

(declare-const r_pu2__split_fields1 us_private)

(declare-const c_pu1__split_fields natural)

(declare-const c_pu1__split_fields1 natural)

(declare-const c_pu1__split_fields2 us_private)

(declare-const c_pu2__split_fields natural)

(declare-const c_pu2__split_fields1 natural)

(declare-const c_pu2__split_fields2 us_private)

(declare-const g_pu1__split_fields natural)

(declare-const g_pu1__split_fields1 natural)

(declare-const g_pu1__split_fields2 natural)

(declare-const g_pu1__split_fields3 us_private)

(declare-const g_pu2__split_fields natural)

(declare-const g_pu2__split_fields1 natural)

(declare-const g_pu2__split_fields2 natural)

(declare-const g_pu2__split_fields3 us_private)

(declare-const us Int)

(declare-const us1 Int)

(declare-const o natural)

(declare-const o1 natural)

(declare-const o2 natural)

(declare-const o3 natural)

(declare-const o4 us_private)

(declare-const record_equality__test_eq_ok__g_pu1__assume natural)

(declare-const record_equality__test_eq_ok__g_pu1__assume1 natural)

(declare-const record_equality__test_eq_ok__g_pu1__assume2 natural)

(declare-const record_equality__test_eq_ok__g_pu1__assume3 natural)

(declare-const record_equality__test_eq_ok__g_pu1__assume4 us_private)

(declare-const record_equality__test_eq_ok__g_pu1__assume5 Int)

(declare-const o5 natural)

(declare-const o6 natural)

(declare-const o7 natural)

(declare-const o8 natural)

(declare-const o9 us_private)

(declare-const record_equality__test_eq_ok__g_pu2__assume natural)

(declare-const record_equality__test_eq_ok__g_pu2__assume1 natural)

(declare-const record_equality__test_eq_ok__g_pu2__assume2 natural)

(declare-const record_equality__test_eq_ok__g_pu2__assume3 natural)

(declare-const record_equality__test_eq_ok__g_pu2__assume4 us_private)

(declare-const record_equality__test_eq_ok__g_pu2__assume5 Int)

(declare-const us2 Int)

(declare-const result natural)

(declare-const result1 natural)

(declare-const result2 natural)

(declare-const result3 us_private)

(declare-const g_pu1__split_fields4 us_split_fields4)

(declare-const result4 us_split_fields__ref2)

(declare-const g_pu2__split_fields4 us_split_fields4)

;; H
  (assert (and (= us 0) (in_range1 0)))

;; H
  (assert
  (and (= r_pu1__attr__tag us_tag5)
  (and (= (to_rep (rec__record_equality__root__c r_pu1__split_discrs)) 0)
  (= (to_rep r_pu1__split_fields) 0))))

;; H
  (assert (= 0 (to_rep (rec__record_equality__root__c r_pu1__split_discrs))))

;; H
  (assert
  (and (= r_pu2__attr__tag us_tag3)
  (and (= (to_rep (rec__record_equality__root__c r_pu2__split_discrs)) 0)
  (= (to_rep r_pu2__split_fields) 0))))

;; H
  (assert (= 0 (to_rep (rec__record_equality__root__c r_pu2__split_discrs))))

;; H
  (assert (and (= us1 0) (in_range1 0)))

;; H
  (assert
  (and (= c_pu1__attr__tag us_tag6)
  (and
  (and (= (to_rep (rec__record_equality__root__c c_pu1__split_discrs)) 0)
  (= (to_rep c_pu1__split_fields1) 0)) (= (to_rep c_pu1__split_fields) 0))))

;; H
  (assert (= 0 (to_rep (rec__record_equality__root__c c_pu1__split_discrs))))

;; H
  (assert
  (and (= c_pu2__attr__tag us_tag4)
  (and
  (and (= (to_rep (rec__record_equality__root__c c_pu2__split_discrs)) 0)
  (= (to_rep c_pu2__split_fields1) 0)) (= (to_rep c_pu2__split_fields) 0))))

;; H
  (assert (= 0 (to_rep (rec__record_equality__root__c c_pu2__split_discrs))))

;; H
  (assert
  (= (to_rep (rec__record_equality__root__c c_pu1__split_discrs)) r2b))

;; H
  (assert (in_range1 r2b))

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= o o1))

;; H
  (assert (= c_pu1__split_fields1 o2))

;; H
  (assert (= c_pu1__split_fields o3))

;; H
  (assert (= us_null_ext__ o4))

;; H
  (assert
  (= c_pu1__split_discrs (mk___split_discrs
                         record_equality__test_eq_ok__g_pu1__assume)))

;; H
  (assert (= record_equality__test_eq_ok__g_pu1__assume1 o1))

;; H
  (assert (= record_equality__test_eq_ok__g_pu1__assume2 o2))

;; H
  (assert (= record_equality__test_eq_ok__g_pu1__assume3 o3))

;; H
  (assert (= record_equality__test_eq_ok__g_pu1__assume4 o4))

;; H
  (assert (= us_tag7 record_equality__test_eq_ok__g_pu1__assume5))

;; H
  (assert (= result g_pu1__split_fields))

;; H
  (assert (= result1 g_pu1__split_fields1))

;; H
  (assert (= result2 g_pu1__split_fields2))

;; H
  (assert (= result3 g_pu1__split_fields3))

;; H
  (assert
  (= g_pu1__split_fields4 (mk___split_fields2
                          record_equality__test_eq_ok__g_pu1__assume1
                          record_equality__test_eq_ok__g_pu1__assume2
                          record_equality__test_eq_ok__g_pu1__assume3
                          record_equality__test_eq_ok__g_pu1__assume4)))

;; H
  (assert
  (= g_pu1__split_discrs (mk___split_discrs
                         record_equality__test_eq_ok__g_pu1__assume)))

;; H
  (assert (= g_pu1__attr__tag us_tag2))

;; H
  (assert
  (= (to_rep (rec__record_equality__root__c c_pu1__split_discrs)) r4b))

;; H
  (assert (in_range1 r4b))

;; H
  (assert (= (to_rep o5) 1))

;; H
  (assert (= o5 o6))

;; H
  (assert (= c_pu1__split_fields1 o7))

;; H
  (assert (= c_pu1__split_fields o8))

;; H
  (assert (= us_null_ext__ o9))

;; H
  (assert
  (= c_pu1__split_discrs (mk___split_discrs
                         record_equality__test_eq_ok__g_pu2__assume)))

;; H
  (assert (= record_equality__test_eq_ok__g_pu2__assume1 o6))

;; H
  (assert (= record_equality__test_eq_ok__g_pu2__assume2 o7))

;; H
  (assert (= record_equality__test_eq_ok__g_pu2__assume3 o8))

;; H
  (assert (= record_equality__test_eq_ok__g_pu2__assume4 o9))

;; H
  (assert (= us_tag8 record_equality__test_eq_ok__g_pu2__assume5))

;; H
  (assert
  (= result4 (mk___split_fields__ref2
             (mk___split_fields2 g_pu2__split_fields g_pu2__split_fields1
             g_pu2__split_fields2 g_pu2__split_fields3))))

;; H
  (assert
  (= g_pu2__split_fields4 (mk___split_fields2
                          record_equality__test_eq_ok__g_pu2__assume1
                          record_equality__test_eq_ok__g_pu2__assume2
                          record_equality__test_eq_ok__g_pu2__assume3
                          record_equality__test_eq_ok__g_pu2__assume4)))

;; H
  (assert
  (= g_pu2__split_discrs (mk___split_discrs
                         record_equality__test_eq_ok__g_pu2__assume)))

;; H
  (assert (= g_pu2__attr__tag us_tag2))

;; H
  (assert
  (= (mk___rep1
     (us_split_discrs2
     (of_base
     (mk___rep g_pu1__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu1__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu1__split_fields4)
     (rec__record_equality__child__f21 g_pu1__split_fields4)
     (rec__ext__2 g_pu1__split_fields4))) g_pu1__attr__tag)))
     (us_split_fields3
     (of_base
     (mk___rep g_pu1__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu1__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu1__split_fields4)
     (rec__record_equality__child__f21 g_pu1__split_fields4)
     (rec__ext__2 g_pu1__split_fields4))) g_pu1__attr__tag))) us_tag1)
  c_gp1))

;; H
  (assert (and (= us2 0) (in_range1 0)))

;; H
  (assert
  (= (mk___rep1
     (us_split_discrs2
     (of_base
     (mk___rep
     (us_split_discrs2
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag)))
     (mk___split_fields
     (rec__record_equality__root__f11
     (us_split_fields3
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag))))
     (hide_ext__
     (rec__record_equality__child__f2
     (us_split_fields3
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag))))
     (rec__ext__1
     (us_split_fields3
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag))))))
     (attr__tag1
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag))))))
     (us_split_fields3
     (of_base
     (mk___rep
     (us_split_discrs2
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag)))
     (mk___split_fields
     (rec__record_equality__root__f11
     (us_split_fields3
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag))))
     (hide_ext__
     (rec__record_equality__child__f2
     (us_split_fields3
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag))))
     (rec__ext__1
     (us_split_fields3
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag))))))
     (attr__tag1
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag)))))) us_tag9)
  c_gp2))

;; H
  (assert
  (= 0 (to_rep (rec__record_equality__root__c (us_split_discrs2 c_gp2)))))

;; H
  (assert
  (= (bool_eq
     (mk___rep r_pu1__split_discrs
     (mk___split_fields r_pu1__split_fields r_pu1__split_fields1)
     r_pu1__attr__tag)
     (mk___rep r_pu2__split_discrs
     (mk___split_fields r_pu2__split_fields r_pu2__split_fields1)
     r_pu2__attr__tag)) true))

;; H
  (assert
  (= (bool_eq
     (mk___rep c_pu1__split_discrs
     (mk___split_fields c_pu1__split_fields1
     (hide_ext__ c_pu1__split_fields c_pu1__split_fields2)) c_pu1__attr__tag)
     (mk___rep c_pu2__split_discrs
     (mk___split_fields c_pu2__split_fields1
     (hide_ext__ c_pu2__split_fields c_pu2__split_fields2)) c_pu2__attr__tag)) true))

;; H
  (assert
  (= (bool_eq1
     (of_base
     (mk___rep g_pu1__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu1__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu1__split_fields4)
     (rec__record_equality__child__f21 g_pu1__split_fields4)
     (rec__ext__2 g_pu1__split_fields4))) g_pu1__attr__tag))
     (of_base
     (mk___rep g_pu2__split_discrs
     (mk___split_fields
     (rec__record_equality__root__f12 g_pu2__split_fields4)
     (hide_ext__1 (rec__record_equality__grandchild__f3 g_pu2__split_fields4)
     (rec__record_equality__child__f21 g_pu2__split_fields4)
     (rec__ext__2 g_pu2__split_fields4))) g_pu2__attr__tag))) true))

;; H
  (assert (= (bool_eq1 c_gp1 c_gp2) true))

;; H
  (assert
  (not
  (= (bool_eq2
     (mk___rep2 g_pu1__split_discrs g_pu1__split_fields4 g_pu1__attr__tag)
     (mk___rep2 g_pu2__split_discrs g_pu2__split_fields4 g_pu2__attr__tag)) true)))

;; H
  (assert
  (= (bool_eq1
     (mk___rep1 c_pu1__split_discrs
     (mk___split_fields1 c_pu1__split_fields c_pu1__split_fields1
     c_pu1__split_fields2) c_pu1__attr__tag)
     (mk___rep1 c_pu2__split_discrs
     (mk___split_fields1 c_pu2__split_fields c_pu2__split_fields1
     c_pu2__split_fields2) c_pu2__attr__tag)) true))

(assert
;; WP_parameter_def
 ;; File "record_equality.ads", line 13, characters 0-0
  (not
  (not
  (= (ite (= r_pu1__attr__tag c_pu1__attr__tag)
     (us_dispatch_eq
     (mk___rep r_pu1__split_discrs
     (mk___split_fields r_pu1__split_fields r_pu1__split_fields1)
     r_pu1__attr__tag)
     (mk___rep c_pu1__split_discrs
     (mk___split_fields c_pu1__split_fields1
     (hide_ext__ c_pu1__split_fields c_pu1__split_fields2)) c_pu1__attr__tag))
     false) true))))
(check-sat)
(exit)
