;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int3 ((_ BitVec 32)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes ((t__ref2 0))
(((mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int4 ((_ BitVec 64)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes ((t__ref3 0))
(((mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ((unsigned64__ref 0))
(((mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned16 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (unsigned16 unsigned16) Bool)

(declare-const dummy1 unsigned16)

(declare-datatypes ((unsigned16__ref 0))
(((mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16
  (unsigned16__content a))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 16))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (unsigned8 unsigned8) Bool)

(declare-const dummy2 unsigned8)

(declare-datatypes ((unsigned8__ref 0))
(((mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int6 ((x unsigned8)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun inmemoryrange ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inmemoryrange__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; inmemoryrange__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (lower (_ BitVec 64)) (upper (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant lower
     true true true)) (dynamic_invariant upper true true true))
     (= (= (inmemoryrange var lower upper) true)
     (ite (bvult lower upper) (and (bvule lower var) (bvult var upper))
     (or (bvule lower var) (bvult var upper))))) :pattern ((inmemoryrange var
                                                           lower upper)) )))

(declare-fun insaferegion64 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun insaferegion64__function_guard (Bool (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; insaferegion64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (rsp (_ BitVec 64)))
  (! (=>
     (and (dynamic_invariant var true true true) (dynamic_invariant rsp true
     true true))
     (= (= (insaferegion64 var rsp) true)
     (or
     (and (bvule var ((_ int2bv 64) 14987979559889010687))
     (bvuge var (bvadd rsp ((_ int2bv 64) 8))))
     (and (bvule var ((_ int2bv 64) 4611686018427387903))
     (bvuge var ((_ int2bv 64) 0)))))) :pattern ((insaferegion64 var rsp)) )))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-sort unsigned32 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (unsigned32 unsigned32) Bool)

(declare-const dummy3 unsigned32)

(declare-datatypes ((unsigned32__ref 0))
(((mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32
  (unsigned32__content a))

(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))

(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; eax__post_axiom
  (assert
  (forall ((x86__rax (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rax true true true)
     (let ((result (eax x86__rax)))
     (and
     (= result ((_ extract 31 0) (bvand x86__rax ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true)))) :pattern ((eax x86__rax)) )))

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned641 unsigned641) Bool)

(declare-const dummy4 unsigned641)

(declare-datatypes ((unsigned64__ref1 0))
(((mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref___2__projection ((a unsigned64__ref1)) unsigned641
  (unsigned64__content1 a))

(define-fun dynamic_invariant3 ((temp___expr_274 (_ BitVec 64))
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(define-fun dynamic_invariant4 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg32 reg)))
     (and
     (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true)))) :pattern ((readreg32 reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true) (dynamic_invariant2 val__
     true true true))
     (= (= (writereg32post regnew val__) true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern (
  (writereg32post regnew val__)) ))))

(declare-const fs (_ BitVec 64))

(declare-const gs (_ BitVec 64))

(declare-const stackaddresssize (_ BitVec 16))

(declare-const zeroflag Bool)

(declare-const carryflag Bool)

(declare-const signflag Bool)

(declare-const overflowflag Bool)

(declare-const rax (_ BitVec 64))

(declare-const rcx (_ BitVec 64))

(declare-const rdx (_ BitVec 64))

(declare-const rbx (_ BitVec 64))

(declare-const rsp (_ BitVec 64))

(declare-const rbp (_ BitVec 64))

(declare-const rsi (_ BitVec 64))

(declare-const rdi (_ BitVec 64))

(declare-const r8 (_ BitVec 64))

(declare-const r9 (_ BitVec 64))

(declare-const r10 (_ BitVec 64))

(declare-const r11 (_ BitVec 64))

(declare-const r12 (_ BitVec 64))

(declare-const r13 (_ BitVec 64))

(declare-const r14 t__ref3)

(declare-const r15 t__ref3)

(declare-const memory map__ref)

(declare-const rdx_400586 t__ref3)

(declare-const rdi_400586 t__ref3)

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 64))

(declare-const o2 (_ BitVec 64))

(declare-const o3 (_ BitVec 32))

(declare-const o4 (_ BitVec 32))

(declare-const o5 (_ BitVec 64))

(declare-const o6 (_ BitVec 64))

(declare-const o7 Bool)

(declare-const o8 (_ BitVec 64))

(declare-const o9 (_ BitVec 64))

(declare-const o10 Bool)

(declare-const o11 Bool)

(declare-const o12 (_ BitVec 64))

(declare-const o13 (_ BitVec 64))

(declare-const o14 (_ BitVec 64))

(declare-const o15 (_ BitVec 64))

(declare-const o16 (_ BitVec 64))

(declare-const o17 (_ BitVec 64))

(declare-const result t__ref3)

(declare-const rdx_4005861 (_ BitVec 64))

(declare-const result1 t__ref3)

(declare-const rdi_4005861 (_ BitVec 64))

(declare-const memory1 (Array (_ BitVec 64) unsigned8))

(declare-const result2 t__ref3)

(declare-const rsp1 (_ BitVec 64))

(declare-const result3 t__ref3)

(declare-const rbp1 (_ BitVec 64))

(declare-const memory2 (Array (_ BitVec 64) unsigned8))

(declare-const memory3 (Array (_ BitVec 64) unsigned8))

(declare-const memory4 (Array (_ BitVec 64) unsigned8))

(declare-const result4 t__ref3)

(declare-const rax1 (_ BitVec 64))

(declare-const rax2 (_ BitVec 64))

(declare-const result5 bool__ref)

(declare-const zeroflag1 Bool)

(declare-const result6 bool__ref)

(declare-const signflag1 Bool)

(declare-const result7 bool__ref)

(declare-const carryflag1 Bool)

(declare-const result8 bool__ref)

(declare-const overflowflag1 Bool)

(declare-const result9 Bool)

(declare-const result10 Bool)

(declare-const result11 t__ref3)

(declare-const rax3 (_ BitVec 64))

(declare-const memory5 (Array (_ BitVec 64) unsigned8))

(declare-const result12 t__ref3)

(declare-const rax4 (_ BitVec 64))

(declare-const memory6 (Array (_ BitVec 64) unsigned8))

(declare-const memory7 (Array (_ BitVec 64) unsigned8))

(declare-const result13 t__ref3)

(declare-const rax5 (_ BitVec 64))

(declare-const memory8 (Array (_ BitVec 64) unsigned8))

(declare-const result14 t__ref3)

(declare-const rax6 (_ BitVec 64))

(declare-const memory9 (Array (_ BitVec 64) unsigned8))

(declare-const memory10 (Array (_ BitVec 64) unsigned8))

(declare-const result15 t__ref3)

(declare-const rax7 (_ BitVec 64))

(declare-const result16 t__ref3)

(declare-const rbp2 (_ BitVec 64))

(declare-const result17 t__ref3)

(declare-const rsp2 (_ BitVec 64))

(declare-const result18 t__ref3)

(declare-const rsp3 (_ BitVec 64))

(declare-const zeroflag2 bool__ref)

(declare-const carryflag2 bool__ref)

(declare-const signflag2 bool__ref)

(declare-const overflowflag2 bool__ref)

(declare-const rax8 t__ref3)

(declare-const rsp4 t__ref3)

(declare-const rbp3 t__ref3)

(declare-const memory11 map__ref)

(declare-const rdx_4005862 t__ref3)

(declare-const rdi_4005862 t__ref3)

(declare-const zeroflag3 Bool)

(declare-const carryflag3 Bool)

(declare-const signflag3 Bool)

(declare-const overflowflag3 Bool)

(declare-const rax9 (_ BitVec 64))

(declare-const rsp5 (_ BitVec 64))

(declare-const rbp4 (_ BitVec 64))

(declare-const memory12 (Array (_ BitVec 64) unsigned8))

(declare-const rdx_4005863 (_ BitVec 64))

(declare-const rdi_4005863 (_ BitVec 64))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=> (= (inmemoryrange i rdi (bvadd rdi rdx)) true)
  (= (insaferegion64 i rsp) true)))))

;; H
  (assert (= o rdx))

;; H
  (assert (= result rdx_400586))

;; H
  (assert (= (let ((subject rdx_400586)) rdx_4005861) o))

;; H
  (assert true)

;; H
  (assert (= o1 rdi))

;; H
  (assert (= result1 rdi_400586))

;; H
  (assert (= (let ((subject rdi_400586)) rdi_4005861) o1))

;; H
  (assert true)

;; H
  (assert (= rsp ((_ int2bv 64) 12105675798371893247)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rbp ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory1) (bvsub
                                                         rsp ((_ int2bv 64) 8))))))
  (= (bvand rbp ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory1) (bvadd (bvsub
                                                                  rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand rbp ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand rbp ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand rbp ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand rbp ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand rbp ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand rbp ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rsp ((_ int2bv 64) 8))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rsp ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory1) i)) (to_rep
                                                          (select (map__content
                                                                  memory) i))))))))

;; H
  (assert (= result2 (mk_t__ref3 rsp)))

;; H
  (assert (= rsp1 (bvsub rsp ((_ int2bv 64) 8))))

;; H
  (assert (= result3 (mk_t__ref3 rbp)))

;; H
  (assert (= rbp1 rsp1))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rdi ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory2) (bvsub
                                                         rbp1 ((_ int2bv 64) 56))))))
  (= (bvand rdi ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory2) (bvadd (bvsub
                                                                  rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand rdi ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand rdi ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand rdi ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand rdi ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand rdi ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand rdi ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 56))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory2) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory1) i))))))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rsi ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory3) (bvsub
                                                         rbp1 ((_ int2bv 64) 64))))))
  (= (bvand rsi ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory3) (bvadd (bvsub
                                                                  rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand rsi ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand rsi ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand rsi ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand rsi ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand rsi ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand rsi ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 64))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory3) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory2) i))))))))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rdx ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory4) (bvsub
                                                         rbp1 ((_ int2bv 64) 72))))))
  (= (bvand rdx ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory4) (bvadd (bvsub
                                                                  rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand rdx ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand rdx ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand rdx ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand rdx ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand rdx ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand rdx ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 72))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory4) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory3) i))))))))

;; H
  (assert
  (and
  (= o2 (readmem64 (bvsub rbp1 ((_ int2bv 64) 56))
        (let ((subject memory)) memory4)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o2 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select (let ((subject
                                                                memory))
                                                                memory4) (bvsub
                                                        rbp1 ((_ int2bv 64) 56))))))
  (= (bvand o2 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 (let ((subject
                                                                 memory))
                                                                 memory4) (bvadd (bvsub
                                                                 rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o2 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    (let ((subject
                                                                    memory))
                                                                    memory4) (bvadd (bvsub
                                                                    rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o2 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o2 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o2 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o2 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o2 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result4 (mk_t__ref3 rax)))

;; H
  (assert (= rax1 o2))

;; H
  (assert
  (and (= o3 (eax rax1))
  (= o3 ((_ extract 31 0) (bvand rax1 ((_ int2bv 64) 4294967295))))))

;; H
  (assert (= o4 (bvand o3 ((_ int2bv 32) 7))))

;; H
  (assert (= (writereg32post rax2 o4) true))

;; H
  (assert (= result5 (mk_bool__ref zeroflag)))

;; H
  (assert (= zeroflag1 (ite (= rax2 ((_ int2bv 64) 0)) true false)))

;; H
  (assert (= result6 (mk_bool__ref signflag)))

;; H
  (assert
  (= signflag1 (ite (bvugt rax2 ((_ int2bv 64) 9223372036854775807)) true
               false)))

;; H
  (assert (= result7 (mk_bool__ref carryflag)))

;; H
  (assert (= carryflag1 (of_int 0)))

;; H
  (assert (= result8 (mk_bool__ref overflowflag)))

;; H
  (assert (= overflowflag1 (of_int 0)))

;; H
  (assert (=> (not (= rax2 ((_ int2bv 64) 0))) (= result10 true)))

;; H
  (assert
  (=> (= rax2 ((_ int2bv 64) 0))
  (and
  (= o8 (readmem64 (bvsub rbp1 ((_ int2bv 64) 64))
        (let ((subject memory)) memory4)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o8 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select (let ((subject
                                                                memory))
                                                                memory4) (bvsub
                                                        rbp1 ((_ int2bv 64) 64))))))
  (= (bvand o8 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 (let ((subject
                                                                 memory))
                                                                 memory4) (bvadd (bvsub
                                                                 rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o8 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    (let ((subject
                                                                    memory))
                                                                    memory4) (bvadd (bvsub
                                                                    rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o8 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o8 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o8 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o8 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o8 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert
  (=> (= rax2 ((_ int2bv 64) 0)) (= o9 (bvand o8 ((_ int2bv 64) 7)))))

;; H
  (assert
  (=> (= rax2 ((_ int2bv 64) 0))
  (= o10 (ite (= o9 ((_ int2bv 64) 0)) true false))))

;; H
  (assert
  (=> (= rax2 ((_ int2bv 64) 0))
  (= result10 (ite (not (= o10 true)) true false))))

;; H
  (assert (=> (= result10 true) (= o11 true)))

;; H
  (assert
  (=> (not (= result10 true))
  (and
  (= o5 (readmem64 (bvsub rbp1 ((_ int2bv 64) 72))
        (let ((subject memory)) memory4)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o5 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select (let ((subject
                                                                memory))
                                                                memory4) (bvsub
                                                        rbp1 ((_ int2bv 64) 72))))))
  (= (bvand o5 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 (let ((subject
                                                                 memory))
                                                                 memory4) (bvadd (bvsub
                                                                 rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o5 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    (let ((subject
                                                                    memory))
                                                                    memory4) (bvadd (bvsub
                                                                    rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o5 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o5 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o5 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o5 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o5 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 72)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert (=> (not (= result10 true)) (= o6 (bvand o5 ((_ int2bv 64) 7)))))

;; H
  (assert
  (=> (not (= result10 true))
  (= o7 (ite (= o6 ((_ int2bv 64) 0)) true false))))

;; H
  (assert
  (=> (not (= result10 true)) (= o11 (ite (not (= o7 true)) true false))))

;; H
  (assert (= result9 (ite (not (= o11 true)) true false)))

;; H
  (assert
  (=> (= result9 true)
  (and
  (= o12 (readmem64 (bvsub rbp1 ((_ int2bv 64) 56))
         (let ((subject memory)) memory4)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o12 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory4) (bvsub
                                                         rbp1 ((_ int2bv 64) 56))))))
  (= (bvand o12 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory4) (bvadd (bvsub
                                                                  rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o12 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o12 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o12 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o12 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o12 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o12 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert (=> (= result9 true) (= result11 (mk_t__ref3 rax2))))

;; H
  (assert (=> (= result9 true) (= rax3 o12)))

;; H
  (assert
  (=> (= result9 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rax3 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory5) (bvsub
                                                          rbp1 ((_ int2bv 64) 16))))))
  (= (bvand rax3 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select
                                                                   (let ((subject
                                                                   memory))
                                                                   memory5) (bvadd (bvsub
                                                                   rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand rax3 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand rax3 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand rax3 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand rax3 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand rax3 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand rax3 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 16))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 16)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory5) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory4) i)))))))))

;; H
  (assert
  (=> (= result9 true)
  (and
  (= o13 (readmem64 (bvsub rbp1 ((_ int2bv 64) 64))
         (let ((subject memory)) memory5)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o13 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory5) (bvsub
                                                         rbp1 ((_ int2bv 64) 64))))))
  (= (bvand o13 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory5) (bvadd (bvsub
                                                                  rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o13 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o13 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o13 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o13 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o13 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o13 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory5) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert (=> (= result9 true) (= result12 (mk_t__ref3 rax3))))

;; H
  (assert (=> (= result9 true) (= rax4 o13)))

;; H
  (assert
  (=> (= result9 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rax4 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory6) (bvsub
                                                          rbp1 ((_ int2bv 64) 24))))))
  (= (bvand rax4 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select
                                                                   (let ((subject
                                                                   memory))
                                                                   memory6) (bvadd (bvsub
                                                                   rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand rax4 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand rax4 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand rax4 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand rax4 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand rax4 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand rax4 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory6) (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 24))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 24)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory6) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory5) i)))))))))

;; H
  (assert
  (=> (= result9 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvsub rbp1 ((_ int2bv 64) 8))))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 8))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory7) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory6) i)))))))))

;; H
  (assert
  (=> (not (= result9 true))
  (and
  (= o14 (readmem64 (bvsub rbp1 ((_ int2bv 64) 56))
         (let ((subject memory)) memory4)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o14 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory4) (bvsub
                                                         rbp1 ((_ int2bv 64) 56))))))
  (= (bvand o14 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory4) (bvadd (bvsub
                                                                  rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o14 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o14 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o14 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o14 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o14 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o14 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert (=> (not (= result9 true)) (= result13 (mk_t__ref3 rax2))))

;; H
  (assert (=> (not (= result9 true)) (= rax5 o14)))

;; H
  (assert
  (=> (not (= result9 true))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rax5 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory8) (bvsub
                                                          rbp1 ((_ int2bv 64) 32))))))
  (= (bvand rax5 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select
                                                                   (let ((subject
                                                                   memory))
                                                                   memory8) (bvadd (bvsub
                                                                   rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand rax5 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand rax5 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand rax5 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand rax5 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand rax5 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand rax5 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 32))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 32)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory8) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory4) i)))))))))

;; H
  (assert
  (=> (not (= result9 true))
  (and
  (= o15 (readmem64 (bvsub rbp1 ((_ int2bv 64) 64))
         (let ((subject memory)) memory8)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o15 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory8) (bvsub
                                                         rbp1 ((_ int2bv 64) 64))))))
  (= (bvand o15 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory8) (bvadd (bvsub
                                                                  rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o15 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o15 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o15 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o15 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o15 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o15 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory8) (bvadd (bvsub rbp1 ((_ int2bv 64) 64)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936)))))))

;; H
  (assert (=> (not (= result9 true)) (= result14 (mk_t__ref3 rax5))))

;; H
  (assert (=> (not (= result9 true)) (= rax6 o15)))

;; H
  (assert
  (=> (not (= result9 true))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rax6 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory9) (bvsub
                                                          rbp1 ((_ int2bv 64) 40))))))
  (= (bvand rax6 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select
                                                                   (let ((subject
                                                                   memory))
                                                                   memory9) (bvadd (bvsub
                                                                   rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand rax6 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand rax6 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand rax6 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand rax6 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand rax6 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand rax6 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory9) (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 40))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 40)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory9) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory8) i)))))))))

;; H
  (assert
  (=> (not (= result9 true))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 255)) ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory10) (bvsub rbp1 ((_ int2bv 64) 8))))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand ((_ int2bv 64) 0) ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory10) (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and (not (= i (bvsub rbp1 ((_ int2bv 64) 8))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 1)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 2)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 3)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 4)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 5)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 6)))))
  (not (= i (bvadd (bvsub rbp1 ((_ int2bv 64) 8)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory10) i)) (to_rep
                                                           (select (let ((subject
                                                                   memory))
                                                                   memory9) i)))))))))

;; H
  (assert
  (=> (not (= result9 true))
  (= (let ((subject memory)) (mk_map__ref memory7)) (let ((subject memory))
                                                    (mk_map__ref memory10)))))

;; H
  (assert (=> (not (= result9 true)) (= rax4 rax6)))

;; H
  (assert (=> (not (= result9 true)) (= memory7 memory10)))

;; H
  (assert (=> (not (= result9 true)) (= rax4 rax6)))

;; H
  (assert
  (and
  (= o16 (readmem64 (bvsub rbp1 ((_ int2bv 64) 56))
         (let ((subject memory)) memory7)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o16 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory7) (bvsub
                                                         rbp1 ((_ int2bv 64) 56))))))
  (= (bvand o16 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory7) (bvadd (bvsub
                                                                  rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o16 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o16 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o16 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o16 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o16 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o16 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd (bvsub rbp1 ((_ int2bv 64) 56)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result15 (mk_t__ref3 rax4)))

;; H
  (assert (= rax7 o16))

;; H
  (assert
  (and (= o17 (readmem64 rsp1 (let ((subject memory)) memory7)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o17 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                         (select (let ((subject
                                                                 memory))
                                                                 memory7)
                                                         rsp1))))
  (= (bvand o17 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                  (select
                                                                  (let ((subject
                                                                  memory))
                                                                  memory7) (bvadd
                                                                  rsp1 ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o17 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd rsp1 ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o17 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd rsp1 ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o17 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd rsp1 ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o17 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd rsp1 ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o17 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd rsp1 ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o17 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory7) (bvadd rsp1 ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result16 (mk_t__ref3 rbp1)))

;; H
  (assert (= rbp2 o17))

;; H
  (assert (= result17 (mk_t__ref3 rsp1)))

;; H
  (assert (= rsp2 (bvadd rsp1 ((_ int2bv 64) 8))))

;; H
  (assert (= result18 (mk_t__ref3 rsp2)))

;; H
  (assert (= rsp3 (bvadd rsp2 ((_ int2bv 64) 8))))

;; H
  (assert
  (= rdi_4005862 (let ((subject rdi_400586)) (mk_t__ref3 rdi_4005861))))

;; H
  (assert
  (= rdx_4005862 (let ((subject rdx_400586)) (mk_t__ref3 rdx_4005861))))

;; H
  (assert (= memory11 (let ((subject memory)) (mk_map__ref memory7))))

;; H
  (assert (= rbp3 (mk_t__ref3 rbp2)))

;; H
  (assert (= rsp4 (mk_t__ref3 rsp3)))

;; H
  (assert (= rax8 (mk_t__ref3 rax7)))

;; H
  (assert (= overflowflag2 (mk_bool__ref overflowflag1)))

;; H
  (assert (= signflag2 (mk_bool__ref signflag1)))

;; H
  (assert (= carryflag2 (mk_bool__ref carryflag1)))

;; H
  (assert (= zeroflag2 (mk_bool__ref zeroflag1)))

;; H
  (assert (= rdi_4005863 rdi_4005861))

;; H
  (assert (= rdx_4005863 rdx_4005861))

;; H
  (assert (= memory12 memory7))

;; H
  (assert (= rbp4 rbp2))

;; H
  (assert (= rsp5 rsp3))

;; H
  (assert (= rax9 rax7))

;; H
  (assert (= overflowflag3 overflowflag1))

;; H
  (assert (= signflag3 signflag1))

;; H
  (assert (= carryflag3 carryflag1))

;; H
  (assert (= zeroflag3 zeroflag1))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 201, characters 0-0
  (not (= (t__content3 rsp4) (bvadd rsp ((_ int2bv 64) 8)))))
(check-sat)
(exit)
