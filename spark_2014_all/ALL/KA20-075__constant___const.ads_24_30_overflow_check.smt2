;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-fun a () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a1 (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a1 first first) a1) :pattern ((slide a1 first first)) ))))

;; slide_def
  (assert
  (forall ((a1 (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a1 old_first new_first) i) (select a1 (- i (- new_first old_first)))) :pattern ((select
  (slide a1 old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a1 (Array Int integer)) (b1 (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a1 a_first a_last b1 b_first b_last) i) (select a1 i)))
     (=> (< a_last i)
     (= (select (concat1 a1 a_first a_last b1 b_first b_last) i) (select b1 (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a1 a_first a_last b1 b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a1 (Array Int integer)) (a__first Int) (a__last Int)
  (b1 (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a1 temp___idx_132)) (to_rep
                                                                  (select b1 (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a1 (Array Int integer)) (b1 (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b1 b__first b__last a1 a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a1 temp___idx_132)) (to_rep
                                         (select b1 (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a1 (Array Int integer)) (b1 (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a1 a_first a_last b1 b_first b_last) 0)
     (= (bool_eq a1 a_first a_last b1 b_first b_last) true)) :pattern (
  (compare a1 a_first a_last b1 b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a1 (Array Int integer)) (b1 (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a1 a_first a_last b1 b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a1 a_first i b1 b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a1 (+ i 1))) (to_rep (select b1 (+ j 1))))))))))) :pattern (
  (compare a1 a_first a_last b1 b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a1 (Array Int integer)) (b1 (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a1 a_first a_last b1 b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a1 a_first j b1 b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b1 (+ i 1))) (to_rep (select a1 (+ j 1))))))))))) :pattern (
  (compare a1 a_first a_last b1 b_first b_last)) ))))

(declare-fun c () (Array Int integer))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun const__c__aggregate_def (Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___134 Int))
  (forall ((temp___135 Int))
  (= (select (const__c__aggregate_def temp___134) temp___135) (of_rep
                                                              temp___134)))))

(declare-fun c2 () (Array Int integer))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun const__c2__aggregate_def (Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___137 Int))
  (forall ((temp___138 Int))
  (= (select (const__c2__aggregate_def temp___137) temp___138) (of_rep
                                                               temp___137)))))

(declare-fun d () (Array Int integer))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun const__d__aggregate_def (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___140 Int) (temp___141 Int))
  (let ((temp___139 (const__d__aggregate_def temp___140 temp___141)))
  (and (= (select temp___139 1) (of_rep temp___140))
  (= (select temp___139 2) (of_rep temp___141))))))

(declare-fun d2 () (Array Int integer))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun const__d2__aggregate_def (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___144 Int) (temp___145 Int))
  (let ((temp___143 (const__d2__aggregate_def temp___144 temp___145)))
  (and (= (select temp___143 1) (of_rep temp___144))
  (= (select temp___143 2) (of_rep temp___145))))))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__const__te__x integer)(rec__const__te__y integer)))))
(define-fun us_split_fields_X__projection ((a1 us_split_fields)) integer
  (rec__const__te__x a1))

(define-fun us_split_fields_Y__projection ((a1 us_split_fields)) integer
  (rec__const__te__y a1))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a1 us_split_fields__ref)) us_split_fields
  (us_split_fields__content a1))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a1 us_rep)) us_split_fields (us_split_fields1
                                                              a1))

(define-fun bool_eq1 ((a1 us_rep)
  (b1 us_rep)) Bool (ite (and
                         (= (to_rep
                            (rec__const__te__x (us_split_fields1 a1)))
                         (to_rep (rec__const__te__x (us_split_fields1 b1))))
                         (= (to_rep
                            (rec__const__te__y (us_split_fields1 a1)))
                         (to_rep (rec__const__te__y (us_split_fields1 b1)))))
                    true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a1 us_rep)) (<= 0 (object__size a1))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a1 us_rep)) (<= 0 (object__alignment a1))))

(declare-fun const__te__x__first__bit () Int)

(declare-fun const__te__x__last__bit () Int)

(declare-fun const__te__x__position () Int)

;; const__te__x__first__bit_axiom
  (assert (<= 0 const__te__x__first__bit))

;; const__te__x__last__bit_axiom
  (assert (< const__te__x__first__bit const__te__x__last__bit))

;; const__te__x__position_axiom
  (assert (<= 0 const__te__x__position))

(declare-fun const__te__y__first__bit () Int)

(declare-fun const__te__y__last__bit () Int)

(declare-fun const__te__y__position () Int)

;; const__te__y__first__bit_axiom
  (assert (<= 0 const__te__y__first__bit))

;; const__te__y__last__bit_axiom
  (assert (< const__te__y__first__bit const__te__y__last__bit))

;; const__te__y__position_axiom
  (assert (<= 0 const__te__y__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((te__ref (mk_te__ref (te__content us_rep)))))
(define-fun te__ref___projection ((a1 te__ref)) us_rep (te__content a1))

(declare-fun e () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun f () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun g () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun fi (tuple0) Int)

(declare-fun fi__function_guard (Int tuple0) Bool)

;; fi__post_axiom
  (assert
  (forall ((us_void_param tuple0)) (! (dynamic_invariant (fi us_void_param)
  true false true) :pattern ((fi us_void_param)) )))

;; fi__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (fi us_void_param) 1) :pattern ((fi us_void_param)) )))

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun j () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun fk (tuple0) Int)

(declare-fun fk__function_guard (Int tuple0) Bool)

;; fk__post_axiom
  (assert
  (forall ((us_void_param tuple0)) (! (dynamic_invariant (fk us_void_param)
  true false true) :pattern ((fk us_void_param)) )))

;; fk__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (fk us_void_param) 1) :pattern ((fk us_void_param)) )))

(declare-fun k () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun l () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun fm (Int) Int)

(declare-fun fm__function_guard (Int Int) Bool)

;; fm__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true) (dynamic_invariant (fm x) true
     false true)) :pattern ((fm x)) )))

;; fm__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true) (= (fm x) x)) :pattern (
  (fm x)) )))

(declare-fun m () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun n () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun p () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

;; a__def_axiom
  (assert (= a 1))

;; b__def_axiom
  (assert (= b 1))

;; c__def_axiom
  (assert (= c (const__c__aggregate_def 1)))

;; c2__def_axiom
  (assert (= c2 (const__c2__aggregate_def 1)))

;; d__def_axiom
  (assert (= d (const__d__aggregate_def 1 1)))

;; d2__def_axiom
  (assert (= d2 (const__d2__aggregate_def 1 1)))

;; e__def_axiom
  (assert (= e (mk___rep (mk___split_fields (of_rep 1) (of_rep 1)))))

;; f__def_axiom
  (assert (= f (mk___rep (mk___split_fields (of_rep 1) (of_rep 1)))))

;; g__def_axiom
  (assert (= g (mk___rep (mk___split_fields (of_rep 1) (of_rep 1)))))

;; i__def_axiom
  (assert (= i (fi Tuple0)))

;; j__def_axiom
  (assert (= j (- (* 2 (fi Tuple0)) 1)))

;; k__def_axiom
  (assert (= k (fk Tuple0)))

;; l__def_axiom
  (assert (= l (- (* 2 (fk Tuple0)) 1)))

;; m__def_axiom
  (assert (= m (fm 1)))

;; n__def_axiom
  (assert (= n (- (* 2 (fm 1)) 1)))

(declare-fun o () integer)

(declare-fun o1 () integer)

(declare-fun o2 () integer)

(declare-fun o3 () integer)

(declare-fun const__e__assume () integer)

(declare-fun const__e__assume1 () integer)

(declare-fun o4 () integer)

(declare-fun o5 () integer)

(declare-fun o6 () integer)

(declare-fun o7 () integer)

(declare-fun const__f__assume () integer)

(declare-fun const__f__assume1 () integer)

(declare-fun o8 () integer)

(declare-fun o9 () integer)

(declare-fun o10 () integer)

(declare-fun o11 () integer)

(declare-fun const__g__assume () integer)

(declare-fun const__g__assume1 () integer)

(declare-fun const__i__assume () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

;; H
  (assert (in_range a))

;; H
  (assert (in_range b))

;; H
  (assert (= (const__c__aggregate_def 1) c))

;; H
  (assert (= (const__c2__aggregate_def 1) c2))

;; H
  (assert (= (const__d__aggregate_def 1 1) d))

;; H
  (assert (= (const__d2__aggregate_def 1 1) d2))

;; H
  (assert (= (to_rep o) 1))

;; H
  (assert (= (to_rep o1) 1))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= const__e__assume o2))

;; H
  (assert (= const__e__assume1 o3))

;; H
  (assert
  (= (mk___rep (mk___split_fields const__e__assume const__e__assume1))
  e))

;; H
  (assert (= (to_rep o4) 1))

;; H
  (assert (= (to_rep o5) 1))

;; H
  (assert (= o5 o6))

;; H
  (assert (= o4 o7))

;; H
  (assert (= const__f__assume o6))

;; H
  (assert (= const__f__assume1 o7))

;; H
  (assert
  (= (mk___rep (mk___split_fields const__f__assume const__f__assume1))
  f))

;; H
  (assert (= (to_rep o8) 1))

;; H
  (assert (= (to_rep o9) 1))

;; H
  (assert (= o9 o10))

;; H
  (assert (= o8 o11))

;; H
  (assert (= const__g__assume o10))

;; H
  (assert (= const__g__assume1 o11))

;; H
  (assert
  (= (mk___rep (mk___split_fields const__g__assume const__g__assume1))
  g))

;; H
  (assert
  (and (= const__i__assume (fi Tuple0))
  (and (in_range const__i__assume) (= const__i__assume 1))))

;; H
  (assert (= const__i__assume i))

;; H
  (assert (in_range i))

;; H
  (assert (and (= o12 (fi Tuple0)) (and (in_range o12) (= o12 1))))

;; H
  (assert (= o13 (* 2 o12)))

(assert
;; WP_parameter_def
 ;; File "const.ads", line 36, characters 0-0
  (not (in_range o13)))
(check-sat)
(exit)
