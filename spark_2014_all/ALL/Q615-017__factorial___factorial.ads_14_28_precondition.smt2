;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun mathematical_factorial (Int) Int)

(declare-fun mathematical_factorial__function_guard (Int Int) Bool)

;; mathematical_factorial__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true)
     (= (mathematical_factorial x) (ite (<= x 1) 1
                                   (* x (mathematical_factorial (- x 1)))))) :pattern (
  (mathematical_factorial x)) )))

(declare-fun x () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x1 integer))
  (! (= (of_rep (to_rep x1)) x1) :pattern ((to_rep x1)) )))

;; range_axiom
  (assert
  (forall ((x1 integer)) (! (in_range1 (to_rep x1)) :pattern ((to_rep x1)) )))

;; coerce_axiom
  (assert
  (forall ((x1 Int))
  (! (=> (in_range1 x1) (= (to_rep (of_rep x1)) x1)) :pattern ((to_rep
                                                               (of_rep x1))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-fun dummy1 () integer)

(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content integer)))))
(define-fun t2b__ref___projection ((a t2b__ref)) integer (t2b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun result__ () Int)

(declare-fun i () Int)

(declare-fun factorial__fact__result () Int)

(declare-fun temp___133 () Int)

(declare-fun temp___132 () Int)

(declare-fun o () Int)

(declare-fun result () Int)

(declare-fun result__1 () Int)

(declare-fun result1 () Int)

(declare-fun i1 () Int)

(declare-fun result2 () Int)

(declare-fun result__2 () Int)

(declare-fun result__3 () Int)

(declare-fun i2 () Int)

(declare-fun result__4 () Int)

(declare-fun i3 () Int)

(declare-fun result__5 () Int)

(declare-fun i4 () Int)

(declare-fun result__6 () Int)

(declare-fun i5 () Int)

(declare-fun result__7 () Int)

(declare-fun i6 () Int)

(declare-fun result3 () Int)

(declare-fun factorial__fact__result1 () Int)

(declare-fun result__8 () Int)

(declare-fun i7 () Int)

(declare-fun factorial__fact__result2 () Int)

(declare-fun result__9 () Int)

(declare-fun i8 () Int)

(declare-fun factorial__fact__result3 () Int)

(declare-fun result__10 () Int)

(declare-fun i9 () Int)

(declare-fun factorial__fact__result4 () Int)

(declare-fun result__11 () Int)

(declare-fun i10 () Int)

(declare-fun factorial__fact__result5 () Int)

(define-fun i11 () int__ref (mk_int__ref i7))

(define-fun result__12 () int__ref (mk_int__ref result__8))

(define-fun i12 () int__ref (mk_int__ref i5))

(define-fun result__13 () int__ref (mk_int__ref result__6))

;; H
  (assert (in_range1 x))

;; H
  (assert (and (<= 1 x) (<= x 12)))

;; H
  (assert (= factorial__fact__result1 factorial__fact__result2))

;; H
  (assert (= i11 i12))

;; H
  (assert (= result__12 result__13))

;; H
  (assert (= factorial__fact__result3 factorial__fact__result1))

;; H
  (assert (= i8 i6))

;; H
  (assert (= result__9 result__7))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 result__)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref result__)))

;; H
  (assert (= result__1 1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref i)))

;; H
  (assert (= i1 2))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= temp___133 i1)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= temp___132 result__1)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 x))
  (and (= o (* result__1 i1)) (in_range1 (* result__1 i1)))))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= result__1 result2)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= result__2 o)))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 x)) (= result__3 (mathematical_factorial i2))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 x))
  (and
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 result__3))
  (=> (<= 2 x) (dynamic_property 2 x i2))) (and (<= 2 i2) (<= i2 x)))))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= i2 x)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= i2 i3)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= result__3 result__4)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= i4 i2)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= result__5 result__3)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= i12 (mk_int__ref i3))))

;; H
  (assert
  (=> (and (<= 2 i1) (<= i1 x)) (= result__13 (mk_int__ref result__4))))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= i6 i4)))

;; H
  (assert (=> (and (<= 2 i1) (<= i1 x)) (= result__7 result__5)))

;; H
  (assert (=> (not (and (<= 2 i1) (<= i1 x))) (= i1 i5)))

;; H
  (assert (=> (not (and (<= 2 i1) (<= i1 x))) (= result__1 result__6)))

;; H
  (assert (=> (not (and (<= 2 i1) (<= i1 x))) (= i6 i1)))

;; H
  (assert (=> (not (and (<= 2 i1) (<= i1 x))) (= result__7 result__1)))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref factorial__fact__result)))

;; H
  (assert (= factorial__fact__result1 result__6))

;; H
  (assert
  (= (mk_int__ref factorial__fact__result4) (mk_int__ref
                                            factorial__fact__result2)))

;; H
  (assert (= (mk_int__ref i9) i11))

;; H
  (assert (= (mk_int__ref result__10) result__12))

;; H
  (assert (= factorial__fact__result5 factorial__fact__result3))

;; H
  (assert (= i10 i8))

;; H
  (assert (= result__11 result__9))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (<= 1 x)))
(check-sat)
(exit)
