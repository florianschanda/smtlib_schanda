;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort big_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (big_type big_type) Bool)

(declare-const dummy big_type)

(declare-datatypes ((big_type__ref 0))
(((mk_big_type__ref (big_type__content big_type)))))
(define-fun big_type__ref___projection ((a big_type__ref)) big_type (big_type__content
                                                                    a))

(declare-sort smaller_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 3 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (smaller_type smaller_type) Bool)

(declare-const dummy1 smaller_type)

(declare-datatypes ((smaller_type__ref 0))
(((mk_smaller_type__ref (smaller_type__content smaller_type)))))
(define-fun smaller_type__ref___projection ((a smaller_type__ref)) smaller_type
  (smaller_type__content a))

(define-fun dynamic_invariant ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 3 5)) (in_range2 temp___expr_141)))

(declare-const a Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 8)) (in_range1 temp___expr_135)))

(declare-const r Int)

(declare-const enums__next_b__result Int)

(declare-const o Bool)

(declare-const result Int)

(declare-const r1 Int)

(declare-const result1 Int)

(declare-const r2 Int)

(declare-const result2 Int)

(declare-const r3 Int)

(declare-const result3 Int)

(declare-const enums__next_b__result1 Int)

(declare-const enums__next_b__result2 Int)

(declare-const enums__next_b__result3 Int)

(declare-const r4 Int)

(declare-const enums__next_b__result4 Int)

(declare-const r5 Int)

(declare-const enums__next_b__result5 Int)

(define-fun r6 () int__ref (mk_int__ref r))

;; H
  (assert (in_range2 a))

;; H
  (assert (=> (<= 3 5) (in_range2 r)))

;; H
  (assert (=> (= a 3) (= (mk_int__ref result) r6)))

;; H
  (assert (=> (= a 3) (= r1 4)))

;; H
  (assert (=> (not (= a 3)) (=> (= a 4) (= (mk_int__ref result1) r6))))

;; H
  (assert (=> (not (= a 3)) (=> (= a 4) (= r2 5))))

;; H
  (assert (=> (not (= a 3)) (=> (not (= a 4)) (= (mk_int__ref result2) r6))))

;; H
  (assert (=> (not (= a 3)) (=> (not (= a 4)) (= r3 3))))

;; H
  (assert (=> (not (= a 3)) (=> (not (= a 4)) (= r2 r3))))

;; H
  (assert (=> (not (= a 3)) (= r1 r2)))

;; H
  (assert (= enums__next_b__result1 enums__next_b__result2))

;; H
  (assert (= enums__next_b__result3 enums__next_b__result1))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref enums__next_b__result)))

;; H
  (assert (= enums__next_b__result1 r1))

;; H
  (assert
  (= (mk_int__ref enums__next_b__result4) (mk_int__ref
                                          enums__next_b__result2)))

;; H
  (assert (= r1 r4))

;; H
  (assert (= enums__next_b__result5 enums__next_b__result3))

;; H
  (assert (= r5 r1))

;; H
  (assert (=> (= a 5) (= o (ite (= enums__next_b__result4 3) true false))))

;; H
  (assert (=> (not (= a 5)) (= o (of_int 1))))

;; H
  (assert (< a 5))

(assert
;; WP_parameter_def
 ;; File "enums.adb", line 7, characters 0-0
  (not (not (= a 8))))
(check-sat)
(exit)
