;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep1 (character) Int)

(declare-fun of_rep1 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep1 (select a temp___idx_78)) (to_rep1
                                                                 (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep1 (select a temp___idx_78)) (to_rep1
                                        (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep2 (integer) Int)

(declare-fun of_rep2 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-sort name_id 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (name_id name_id) Bool)

(declare-const dummy5 name_id)

(declare-datatypes ((name_id__ref 0))
(((mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content
                                                                 a))

(define-fun dynamic_invariant2 ((temp___expr_651 Int)
  (temp___is_init_648 Bool) (temp___skip_constant_649 Bool)
  (temp___do_toplevel_650 Bool)) Bool (=>
                                      (or (= temp___is_init_648 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_651)))

(declare-fun to_rep3 (name_id) Int)

(declare-fun of_rep3 (Int) name_id)

;; inversion_axiom
  (assert
  (forall ((x name_id))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x name_id)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-fun invariant__ (us_private) Bool)

(declare-fun invariant____function_guard (Bool us_private) Bool)

;; invariant____post_axiom
  (assert true)

(declare-sort token_kind 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (token_kind token_kind) Bool)

(declare-const dummy6 token_kind)

(declare-datatypes ((token_kind__ref 0))
(((mk_token_kind__ref (token_kind__content token_kind)))))
(define-fun token_kind__ref___projection ((a token_kind__ref)) token_kind
  (token_kind__content a))

(define-fun dynamic_invariant3 ((temp___expr_660 Int)
  (temp___is_init_657 Bool) (temp___skip_constant_658 Bool)
  (temp___do_toplevel_659 Bool)) Bool (=>
                                      (or (= temp___is_init_657 true)
                                      (<= 0 8)) (in_range6 temp___expr_660)))

(declare-fun to_rep4 (token_kind) Int)

(declare-fun of_rep4 (Int) token_kind)

;; inversion_axiom
  (assert
  (forall ((x token_kind))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x token_kind)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort valued_tokens 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 3 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (valued_tokens valued_tokens) Bool)

(declare-const dummy7 valued_tokens)

(declare-datatypes ((valued_tokens__ref 0))
(((mk_valued_tokens__ref (valued_tokens__content valued_tokens)))))
(define-fun valued_tokens__ref___projection ((a valued_tokens__ref)) valued_tokens
  (valued_tokens__content a))

(define-fun dynamic_invariant4 ((temp___expr_666 Int)
  (temp___is_init_663 Bool) (temp___skip_constant_664 Bool)
  (temp___do_toplevel_665 Bool)) Bool (=>
                                      (or (= temp___is_init_663 true)
                                      (<= 3 8)) (in_range7 temp___expr_666)))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__lexer__token__kind token_kind)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs)) token_kind
  (rec__lexer__token__kind a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__lexer__token__line natural)(rec__lexer__token__col natural)(rec__lexer__token__length natural)(rec__lexer__token__value name_id)))))
(define-fun us_split_fields_Line__projection ((a us_split_fields)) natural
  (rec__lexer__token__line a))

(define-fun us_split_fields_Col__projection ((a us_split_fields)) natural
  (rec__lexer__token__col a))

(define-fun us_split_fields_Length__projection ((a us_split_fields)) natural
  (rec__lexer__token__length a))

(define-fun us_split_fields_Value__projection ((a us_split_fields)) name_id
  (rec__lexer__token__value a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___8__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep___9__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___10__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun lexer__token__value__pred ((a us_rep)) Bool (and
                                                        (<= 3 (to_rep4
                                                              (rec__lexer__token__kind
                                                              (us_split_discrs1
                                                              a))))
                                                        (<= (to_rep4
                                                            (rec__lexer__token__kind
                                                            (us_split_discrs1
                                                            a))) 8)))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (= (to_rep4
                           (rec__lexer__token__kind (us_split_discrs1 a)))
                        (to_rep4
                        (rec__lexer__token__kind (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__lexer__token__line (us_split_fields1 a)))
                        (to_rep
                        (rec__lexer__token__line (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__lexer__token__col (us_split_fields1 a)))
                        (to_rep
                        (rec__lexer__token__col (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__lexer__token__length (us_split_fields1 a)))
                        (to_rep
                        (rec__lexer__token__length (us_split_fields1 b)))))
                        (=> (lexer__token__value__pred a)
                        (= (to_rep3
                           (rec__lexer__token__value (us_split_fields1 a)))
                        (to_rep3
                        (rec__lexer__token__value (us_split_fields1 b))))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const lexer__token__kind__first__bit Int)

(declare-const lexer__token__kind__last__bit Int)

(declare-const lexer__token__kind__position Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit lexer__token__kind__last__bit))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position))

(declare-const lexer__token__line__first__bit Int)

(declare-const lexer__token__line__last__bit Int)

(declare-const lexer__token__line__position Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit lexer__token__line__last__bit))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position))

(declare-const lexer__token__col__first__bit Int)

(declare-const lexer__token__col__last__bit Int)

(declare-const lexer__token__col__position Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit lexer__token__col__last__bit))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position))

(declare-const lexer__token__length__first__bit Int)

(declare-const lexer__token__length__last__bit Int)

(declare-const lexer__token__length__position Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit lexer__token__length__last__bit))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position))

(declare-const lexer__token__value__first__bit Int)

(declare-const lexer__token__value__last__bit Int)

(declare-const lexer__token__value__position Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit))

;; lexer__token__value__last__bit_axiom
  (assert (< lexer__token__value__first__bit lexer__token__value__last__bit))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((token__ref 0))
(((mk_token__ref (token__content us_rep)))))
(define-fun token__ref___projection ((a token__ref)) us_rep (token__content
                                                            a))

(define-fun default_initial_assumption ((temp___expr_674 us_rep)
  (temp___skip_top_level_675 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_674) false)
                                         (= (to_rep4
                                            (rec__lexer__token__kind
                                            (us_split_discrs1
                                            temp___expr_674))) 0)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const t__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const kind Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const value us_t)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const t_length Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const r28b Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(define-fun in_range8 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep4
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const lexer__token__kind__first__bit1 Int)

(declare-const lexer__token__kind__last__bit1 Int)

(declare-const lexer__token__kind__position1 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit1))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit1 lexer__token__kind__last__bit1))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position1))

(declare-const lexer__token__line__first__bit1 Int)

(declare-const lexer__token__line__last__bit1 Int)

(declare-const lexer__token__line__position1 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit1))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit1 lexer__token__line__last__bit1))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position1))

(declare-const lexer__token__col__first__bit1 Int)

(declare-const lexer__token__col__last__bit1 Int)

(declare-const lexer__token__col__position1 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit1))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit1 lexer__token__col__last__bit1))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position1))

(declare-const lexer__token__length__first__bit1 Int)

(declare-const lexer__token__length__last__bit1 Int)

(declare-const lexer__token__length__position1 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit1))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit1 lexer__token__length__last__bit1))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position1))

(declare-const lexer__token__value__first__bit1 Int)

(declare-const lexer__token__value__last__bit1 Int)

(declare-const lexer__token__value__position1 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit1))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit1 lexer__token__value__last__bit1))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position1))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((t29b__ref 0)) (((mk_t29b__ref (t29b__content us_rep)))))
(define-fun t29b__ref___projection ((a t29b__ref)) us_rep (t29b__content a))

(declare-const r31b Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun in_range9 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep4
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-const lexer__token__kind__first__bit2 Int)

(declare-const lexer__token__kind__last__bit2 Int)

(declare-const lexer__token__kind__position2 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit2))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit2 lexer__token__kind__last__bit2))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position2))

(declare-const lexer__token__line__first__bit2 Int)

(declare-const lexer__token__line__last__bit2 Int)

(declare-const lexer__token__line__position2 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit2))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit2 lexer__token__line__last__bit2))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position2))

(declare-const lexer__token__col__first__bit2 Int)

(declare-const lexer__token__col__last__bit2 Int)

(declare-const lexer__token__col__position2 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit2))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit2 lexer__token__col__last__bit2))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position2))

(declare-const lexer__token__length__first__bit2 Int)

(declare-const lexer__token__length__last__bit2 Int)

(declare-const lexer__token__length__position2 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit2))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit2 lexer__token__length__last__bit2))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position2))

(declare-const lexer__token__value__first__bit2 Int)

(declare-const lexer__token__value__last__bit2 Int)

(declare-const lexer__token__value__position2 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit2))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit2 lexer__token__value__last__bit2))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position2))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes ((t32b__ref 0)) (((mk_t32b__ref (t32b__content us_rep)))))
(define-fun t32b__ref___projection ((a t32b__ref)) us_rep (t32b__content a))

(declare-const r34b Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(define-fun in_range10 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep4
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))

(declare-const lexer__token__kind__first__bit3 Int)

(declare-const lexer__token__kind__last__bit3 Int)

(declare-const lexer__token__kind__position3 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit3))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit3 lexer__token__kind__last__bit3))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position3))

(declare-const lexer__token__line__first__bit3 Int)

(declare-const lexer__token__line__last__bit3 Int)

(declare-const lexer__token__line__position3 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit3))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit3 lexer__token__line__last__bit3))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position3))

(declare-const lexer__token__col__first__bit3 Int)

(declare-const lexer__token__col__last__bit3 Int)

(declare-const lexer__token__col__position3 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit3))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit3 lexer__token__col__last__bit3))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position3))

(declare-const lexer__token__length__first__bit3 Int)

(declare-const lexer__token__length__last__bit3 Int)

(declare-const lexer__token__length__position3 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit3))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit3 lexer__token__length__last__bit3))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position3))

(declare-const lexer__token__value__first__bit3 Int)

(declare-const lexer__token__value__last__bit3 Int)

(declare-const lexer__token__value__position3 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit3))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit3 lexer__token__value__last__bit3))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position3))

(declare-fun user_eq11 (us_rep us_rep) Bool)

(declare-const dummy11 us_rep)

(declare-datatypes ((t35b__ref 0)) (((mk_t35b__ref (t35b__content us_rep)))))
(define-fun t35b__ref___projection ((a t35b__ref)) us_rep (t35b__content a))

(declare-const r37b Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(define-fun in_range11 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep4
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))

(declare-const lexer__token__kind__first__bit4 Int)

(declare-const lexer__token__kind__last__bit4 Int)

(declare-const lexer__token__kind__position4 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit4))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit4 lexer__token__kind__last__bit4))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position4))

(declare-const lexer__token__line__first__bit4 Int)

(declare-const lexer__token__line__last__bit4 Int)

(declare-const lexer__token__line__position4 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit4))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit4 lexer__token__line__last__bit4))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position4))

(declare-const lexer__token__col__first__bit4 Int)

(declare-const lexer__token__col__last__bit4 Int)

(declare-const lexer__token__col__position4 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit4))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit4 lexer__token__col__last__bit4))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position4))

(declare-const lexer__token__length__first__bit4 Int)

(declare-const lexer__token__length__last__bit4 Int)

(declare-const lexer__token__length__position4 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit4))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit4 lexer__token__length__last__bit4))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position4))

(declare-const lexer__token__value__first__bit4 Int)

(declare-const lexer__token__value__last__bit4 Int)

(declare-const lexer__token__value__position4 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit4))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit4 lexer__token__value__last__bit4))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position4))

(declare-fun user_eq12 (us_rep us_rep) Bool)

(declare-const dummy12 us_rep)

(declare-datatypes ((t38b__ref 0)) (((mk_t38b__ref (t38b__content us_rep)))))
(define-fun t38b__ref___projection ((a t38b__ref)) us_rep (t38b__content a))

(declare-const r40b Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(define-fun in_range12 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep4
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))

(declare-const lexer__token__kind__first__bit5 Int)

(declare-const lexer__token__kind__last__bit5 Int)

(declare-const lexer__token__kind__position5 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit5))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit5 lexer__token__kind__last__bit5))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position5))

(declare-const lexer__token__line__first__bit5 Int)

(declare-const lexer__token__line__last__bit5 Int)

(declare-const lexer__token__line__position5 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit5))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit5 lexer__token__line__last__bit5))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position5))

(declare-const lexer__token__col__first__bit5 Int)

(declare-const lexer__token__col__last__bit5 Int)

(declare-const lexer__token__col__position5 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit5))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit5 lexer__token__col__last__bit5))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position5))

(declare-const lexer__token__length__first__bit5 Int)

(declare-const lexer__token__length__last__bit5 Int)

(declare-const lexer__token__length__position5 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit5))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit5 lexer__token__length__last__bit5))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position5))

(declare-const lexer__token__value__first__bit5 Int)

(declare-const lexer__token__value__last__bit5 Int)

(declare-const lexer__token__value__position5 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit5))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit5 lexer__token__value__last__bit5))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position5))

(declare-fun user_eq13 (us_rep us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes ((t41b__ref 0)) (((mk_t41b__ref (t41b__content us_rep)))))
(define-fun t41b__ref___projection ((a t41b__ref)) us_rep (t41b__content a))

(declare-const r43b Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(define-fun in_range13 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep4
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment7 a))))

(declare-const lexer__token__kind__first__bit6 Int)

(declare-const lexer__token__kind__last__bit6 Int)

(declare-const lexer__token__kind__position6 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit6))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit6 lexer__token__kind__last__bit6))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position6))

(declare-const lexer__token__line__first__bit6 Int)

(declare-const lexer__token__line__last__bit6 Int)

(declare-const lexer__token__line__position6 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit6))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit6 lexer__token__line__last__bit6))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position6))

(declare-const lexer__token__col__first__bit6 Int)

(declare-const lexer__token__col__last__bit6 Int)

(declare-const lexer__token__col__position6 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit6))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit6 lexer__token__col__last__bit6))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position6))

(declare-const lexer__token__length__first__bit6 Int)

(declare-const lexer__token__length__last__bit6 Int)

(declare-const lexer__token__length__position6 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit6))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit6 lexer__token__length__last__bit6))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position6))

(declare-const lexer__token__value__first__bit6 Int)

(declare-const lexer__token__value__last__bit6 Int)

(declare-const lexer__token__value__position6 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit6))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit6 lexer__token__value__last__bit6))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position6))

(declare-fun user_eq14 (us_rep us_rep) Bool)

(declare-const dummy14 us_rep)

(declare-datatypes ((t44b__ref 0)) (((mk_t44b__ref (t44b__content us_rep)))))
(define-fun t44b__ref___projection ((a t44b__ref)) us_rep (t44b__content a))

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

(define-fun dynamic_invariant6 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range4 temp___expr_63)))

(define-fun dynamic_invariant7 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const name_table us_private)

(declare-const current_pos Int)

(declare-const first_line Int)

(declare-const first_col Int)

(declare-const first_pos Int)

;; H
  (assert (in_range2 current_pos))

;; H
  (assert (in_range2 first_line))

;; H
  (assert (in_range2 first_col))

;; H
  (assert (in_range2 first_pos))

;; H
  (assert (in_range7 kind))

;; H
  (assert (dynamic_invariant1 value true false true))

;; H
  (assert
  (and
  (and (not (= t__attr__constrained true)) (= (invariant__ name_table) true))
  (<= first_pos current_pos)))

(assert
;; WP_parameter_def
 ;; File "lexer.ads", line 79, characters 0-0
  (not (in_range1 (- current_pos first_pos))))
(check-sat)
(exit)
