(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic search_item : int

logic attr__ATTRIBUTE_ADDRESS : int

logic items : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

 (* File "searchers3.ads", line 10, characters 0-0 *)
goal WP_parameter_def :
  (forall found:bool. forall result__:int. forall low_index:int.
  forall mid_index:int. forall high_index:int. forall temp___154:int.
  forall temp___153:int. forall temp___152:bool. forall temp___151:int.
  forall temp___150:int. forall temp___155:int. forall o:int.
  forall o1:integer. forall o2:int. forall o3:int. forall mid_index1:int.
  forall result:int. forall low_index1:int. forall result1:int.
  forall high_index1:int. forall result2:bool. forall found1:bool.
  forall result3:int. forall result__1:int. forall temp___1551:int.
  forall result4:int. forall mid_index2:int. forall result5:bool.
  forall found2:bool. forall result6:int. forall result__2:int.
  forall found3:bool. forall result__3:int. forall low_index2:int.
  forall mid_index3:int. forall high_index2:int. forall temp___1552:int.
  forall result7:int. forall temp___1553:int. forall result8:bool.
  forall result9:int. forall low_index3:int. forall result10:int.
  forall high_index3:int. forall result11:int. forall mid_index4:int.
  forall result12:bool. forall found4:bool. forall result13:int.
  forall result__4:int. forall found5:bool. forall result__5:int.
  forall mid_index5:int. forall found6:bool. forall result__6:int.
  forall mid_index6:int. forall found7:bool. forall result__7:int.
  forall low_index4:int. forall mid_index7:int. forall high_index4:int.
  forall found8:bool. forall result__8:int. forall low_index5:int.
  forall mid_index8:int. forall high_index5:int. forall found9:bool.
  forall result__9:int. forall low_index6:int. forall mid_index9:int.
  forall high_index6:int. forall temp___1554:int. forall found10:bool.
  forall result__10:int. forall low_index7:int. forall mid_index10:int.
  forall high_index7:int. forall temp___1555:int. forall found11:bool.
  forall result__11:int. forall low_index8:int. forall mid_index11:int.
  forall high_index8:int. forall temp___1556:int. forall found12:bool.
  forall result__12:int. forall low_index9:int. forall mid_index12:int.
  forall high_index9:int. forall temp___1557:int. forall found13:bool.
  forall result__13:int. forall low_index10:int. forall mid_index13:int__ref.
  forall high_index10:int__ref. forall found14:bool. forall result__14:int.
  forall low_index11:int. forall mid_index14:int. forall high_index11:int.
  forall found15:bool__ref. forall result__15:int__ref.
  forall low_index12:int__ref. forall mid_index15:int__ref.
  forall high_index12:int__ref. forall found16:bool. forall result__16:int.
  forall low_index13:int. forall mid_index16:int. forall high_index13:int.
  forall found17:bool__ref. forall result__17:int__ref.
  forall low_index14:int__ref. forall mid_index17:int__ref.
  forall high_index14:int__ref. forall found18:bool. forall result__18:int.
  forall low_index15:int. forall mid_index18:int. forall high_index15:int.
  forall found19:bool__ref. forall result__19:int__ref.
  forall low_index16:int__ref. forall mid_index19:int__ref.
  forall high_index16:int__ref. forall found20:bool. forall result__20:int.
  forall low_index17:int. forall mid_index20:int. forall high_index17:int.
  forall found21:bool__ref. forall result__21:int__ref.
  forall low_index18:int__ref. forall mid_index21:int__ref.
  forall high_index18:int__ref. forall found22:bool. forall result__22:int.
  forall low_index19:int. forall mid_index22:int. forall high_index19:int.
  ((in_range1(search_item) and (((1 <= 100) -> in_range2(result__)) and
  ((forall j:int. (((1 <= j) and (j <= 100)) ->
   (forall k:int. ((((j + 1) <= k) and (k <= 100)) ->
   (to_rep((items[j])) <= to_rep((items[k]))))))) and
  (((({ int__content = result } = { int__content = low_index }) and
  (low_index1 = 1)) and (in_range2(low_index1) and (((1 <= 100) ->
  in_range2(mid_index)) and ((({ int__content = result1 } = { int__content =
  high_index }) and (high_index1 = 100)) and (in_range2(high_index1) and ((({
  bool__content = result2 } = { bool__content = found }) and
  (found1 = of_int(0))) and ((({ int__content = result3 } = { int__content =
  result__ }) and (result__1 = 1)) and (((((high_index16 = { int__content =
  high_index1 }) and ((mid_index19 = { int__content = mid_index }) and
  ((low_index16 = { int__content = low_index1 }) and ((result__19 = {
  int__content = result__1 }) and (found19 = { bool__content = found1
  }))))) and ((high_index17 = high_index1) and
  ((mid_index20 = mid_index1) and ((low_index17 = low_index1) and
  ((result__20 = result__1) and (found20 = found1)))))) and
  ((not (search_item <  to_rep((items[low_index1])))) ->
  (to_rep((items[high_index1])) <  search_item))) or
  ((not ((not (search_item <  to_rep((items[low_index1])))) ->
  (to_rep((items[high_index1])) <  search_item))) and
  ((((high_index16 = high_index14) and ((mid_index19 = mid_index17) and
  ((low_index16 = low_index14) and ((result__19 = result__17) and
  (found19 = found17))))) and ((high_index17 = high_index15) and
  ((mid_index20 = mid_index18) and ((low_index17 = low_index15) and
  ((result__20 = result__18) and (found20 = found18)))))) and
  (((((high_index14 = { int__content = high_index8 }) and ((mid_index17 = {
  int__content = mid_index11 }) and ((low_index14 = { int__content =
  low_index8 }) and ((result__17 = { int__content = result__11 }) and
  (found17 = { bool__content = found11 }))))) and
  ((high_index15 = high_index9) and ((mid_index18 = mid_index12) and
  ((low_index15 = low_index9) and ((result__18 = result__12) and
  (found18 = found12)))))) and ((temp___154 = result__1) and
  ((temp___153 = high_index1) and ((temp___152 = found1) and
  ((temp___151 = mid_index) and ((temp___150 = low_index1) and
  ((0 = temp___155) and ((({ int__content = result4 } = { int__content =
  mid_index }) and (mid_index2 = comp_div((low_index1 + high_index1),2))) and
  ((((({ int__content = temp___1556 } = { int__content = temp___155 }) and
  ((high_index1 = high_index8) and ((mid_index2 = mid_index11) and
  ((low_index1 = low_index8) and ((result__2 = result__11) and
  (found2 = found11)))))) and ((temp___1557 = temp___1551) and
  ((high_index9 = high_index1) and ((mid_index12 = mid_index2) and
  ((low_index9 = low_index1) and ((result__12 = result__2) and
  (found12 = found2))))))) and
  ((search_item = to_rep((items[mid_index2]))) and (((result5 = found1) and
  (found2 = of_int(1))) and ((result6 = result__1) and
  (result__2 = mid_index2))))) or
  (((not (search_item = to_rep((items[mid_index2])))) and
  ((result__2 = result__1) and (found2 = found1))) and
  ((((temp___1553 = temp___1556) and (({ int__content = high_index8 } = {
  int__content = high_index4 }) and (({ int__content = mid_index11 } = {
  int__content = mid_index7 }) and (({ int__content = low_index8 } = {
  int__content = low_index4 }) and (({ int__content = result__11 } = {
  int__content = result__7 }) and ({ bool__content = found11 } = {
  bool__content = found7 })))))) and ((temp___1557 = temp___1553) and
  ((high_index9 = high_index5) and ((mid_index12 = mid_index8) and
  ((low_index9 = low_index5) and ((result__12 = result__8) and
  (found12 = found8))))))) and ((not (low_index1 = high_index1)) and
  (((not (found3 = true)) and (((low_index2 <= mid_index3) and
  (mid_index3 <= (high_index2 - 1))) and
  ((to_rep((items[low_index2])) <= search_item) and
  (search_item <= to_rep((items[high_index2])))))) and ((((((1 <= 100) ->
  in_range2(low_index2)) and ((1 <= 100) -> in_range2(mid_index3))) and
  ((1 <= 100) -> in_range2(high_index2))) and ((1 <= 100) ->
  in_range2(result__3))) and (((temp___1552 = result7) and
  (temp___1553 = (high_index2 - low_index2))) and
  (((((high_index2 = high_index4) and ((mid_index3 = mid_index7) and
  ((low_index2 = low_index4) and ((result__3 = result__7) and
  (found3 = found7))))) and ((high_index5 = high_index2) and
  ((mid_index8 = mid_index3) and ((low_index5 = low_index2) and
  ((result__8 = result__3) and (found8 = found3)))))) and
  ((to_rep((items[mid_index3])) <  search_item) and
  (((((((1 <= (mid_index3 + 1)) and ((mid_index3 + 1) <= 100)) and
  (o = (mid_index3 + 1))) and (o1 = (items[o]))) and (o2 = to_rep(o1))) and
  (((search_item <  o2) and (result8 = true)) or
  ((not (search_item <  o2)) and (result8 = false)))) and
  (result8 = true)))) or ((((to_rep((items[mid_index3])) <  search_item) and
  (((((((((1 <= (mid_index3 + 1)) and ((mid_index3 + 1) <= 100)) and
  (o = (mid_index3 + 1))) and (o1 = (items[o]))) and (o2 = to_rep(o1))) and
  (((search_item <  o2) and (result8 = true)) or
  ((not (search_item <  o2)) and (result8 = false)))) and
  (not (result8 = true))) and (((o3 = (mid_index3 + 1)) and
  in_range2((mid_index3 + 1))) and ((low_index2 = result9) and
  (low_index3 = o3)))) and (high_index3 = high_index2))) or
  ((not (to_rep((items[mid_index3])) <  search_item)) and
  (((high_index2 = result10) and (high_index3 = mid_index3)) and
  (low_index3 = low_index2)))) and ((((high_index3 = high_index4) and
  ((mid_index4 = mid_index7) and ((low_index3 = low_index4) and
  ((result__4 = result__7) and (found4 = found7))))) and
  ((high_index5 = high_index3) and ((mid_index8 = mid_index4) and
  ((low_index5 = low_index3) and ((result__8 = result__4) and
  (found8 = found4)))))) and (((mid_index3 = result11) and
  (mid_index4 = comp_div((low_index3 + high_index3),2))) and
  ((search_item = to_rep((items[mid_index4]))) and (((result12 = found3) and
  (found4 = of_int(1))) and ((result13 = result__3) and
  (result__4 = mid_index4))))))))))))))))))))))) or
  (((((temp___154 = result__1) and ((temp___153 = high_index1) and
  ((temp___152 = found1) and ((temp___151 = mid_index) and
  ((temp___150 = low_index1) and ((0 = temp___155) and ((({ int__content =
  result4 } = { int__content = mid_index }) and
  (mid_index2 = comp_div((low_index1 + high_index1),2))) and
  (((not (search_item = to_rep((items[mid_index2])))) and
  ((result__2 = result__1) and (found2 = found1))) and ((((({ int__content =
  temp___1554 } = { int__content = temp___155 }) and
  ((high_index1 = high_index6) and ((mid_index2 = mid_index9) and
  ((low_index1 = low_index6) and ((result__2 = result__9) and
  (found2 = found9)))))) and ((temp___1555 = temp___1551) and
  ((high_index7 = high_index1) and ((mid_index10 = mid_index2) and
  ((low_index7 = low_index1) and ((result__10 = result__2) and
  (found10 = found2))))))) and (low_index1 = high_index1)) or
  ((not (low_index1 = high_index1)) and ((((temp___1553 = temp___1554) and
  ((high_index3 = high_index6) and (({ int__content = mid_index9 } = {
  int__content = mid_index5 }) and ((low_index3 = low_index6) and
  ((result__5 = result__9) and (found5 = found9)))))) and
  ((temp___1555 = temp___1553) and ((high_index7 = high_index3) and
  ((mid_index10 = mid_index6) and ((low_index7 = low_index3) and
  ((result__10 = result__6) and (found10 = found6))))))) and
  (((not (found3 = true)) and (((low_index2 <= mid_index3) and
  (mid_index3 <= (high_index2 - 1))) and
  ((to_rep((items[low_index2])) <= search_item) and
  (search_item <= to_rep((items[high_index2])))))) and ((((((1 <= 100) ->
  in_range2(low_index2)) and ((1 <= 100) -> in_range2(mid_index3))) and
  ((1 <= 100) -> in_range2(high_index2))) and ((1 <= 100) ->
  in_range2(result__3))) and (((temp___1552 = result7) and
  (temp___1553 = (high_index2 - low_index2))) and
  ((((to_rep((items[mid_index3])) <  search_item) and
  (((((((((1 <= (mid_index3 + 1)) and ((mid_index3 + 1) <= 100)) and
  (o = (mid_index3 + 1))) and (o1 = (items[o]))) and (o2 = to_rep(o1))) and
  (((search_item <  o2) and (result8 = true)) or
  ((not (search_item <  o2)) and (result8 = false)))) and
  (not (result8 = true))) and (((o3 = (mid_index3 + 1)) and
  in_range2((mid_index3 + 1))) and ((low_index2 = result9) and
  (low_index3 = o3)))) and (high_index3 = high_index2))) or
  ((not (to_rep((items[mid_index3])) <  search_item)) and
  (((high_index2 = result10) and (high_index3 = mid_index3)) and
  (low_index3 = low_index2)))) and ((((mid_index4 = mid_index5) and
  ((result__4 = result__5) and (found4 = found5))) and
  ((mid_index6 = mid_index4) and ((result__6 = result__4) and
  (found6 = found4)))) and (((mid_index3 = result11) and
  (mid_index4 = comp_div((low_index3 + high_index3),2))) and
  (((not (search_item = to_rep((items[mid_index4])))) and
  ((result__4 = result__3) and (found4 = found3))) and
  (low_index3 = high_index3))))))))))))))))))) and (((high_index10 = {
  int__content = high_index6 }) and ((mid_index13 = { int__content =
  mid_index9 }) and (({ int__content = low_index10 } = { int__content =
  low_index6 }) and (({ int__content = result__13 } = { int__content =
  result__9 }) and ({ bool__content = found13 } = { bool__content = found9
  }))))) and ((high_index11 = high_index7) and
  ((mid_index14 = mid_index10) and ((low_index11 = low_index7) and
  ((result__14 = result__10) and (found14 = found10))))))) and
  (((high_index12 = high_index10) and ((mid_index15 = mid_index13) and
  ((low_index12 = { int__content = low_index10 }) and ((result__15 = {
  int__content = result__13 }) and (found15 = { bool__content = found13
  }))))) and ((high_index13 = high_index11) and
  ((mid_index16 = mid_index14) and ((low_index13 = low_index11) and
  ((result__16 = result__14) and (found16 = found14))))))) and
  (((high_index14 = high_index12) and ((mid_index17 = mid_index15) and
  ((low_index14 = low_index12) and ((result__17 = result__15) and
  (found17 = found15))))) and ((high_index15 = high_index13) and
  ((mid_index18 = mid_index16) and ((low_index15 = low_index13) and
  ((result__18 = result__16) and (found18 = found16)))))))))))))))))) and
  (((high_index18 = high_index16) and ((mid_index21 = mid_index19) and
  ((low_index18 = low_index16) and ((result__21 = result__19) and
  (found21 = found19))))) and ((high_index19 = high_index17) and
  ((mid_index22 = mid_index20) and ((low_index19 = low_index17) and
  ((result__22 = result__20) and (found22 = found20)))))))))) ->
  (((found21).bool__content = true) ->
  (search_item = to_rep((items[(result__21).int__content]))))))
