;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort uml_state_access 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (uml_state_access uml_state_access) Bool)

(declare-const dummy uml_state_access)

(declare-datatypes ()
((uml_state_access__ref
 (mk_uml_state_access__ref (uml_state_access__content uml_state_access)))))
(define-fun uml_state_access__ref___projection ((a uml_state_access__ref)) uml_state_access
  (uml_state_access__content a))

(define-fun dynamic_invariant ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 0 100)) (in_range temp___expr_158)))

(declare-fun to_rep (uml_state_access) Int)

(declare-fun of_rep (Int) uml_state_access)

;; inversion_axiom
  (assert
  (forall ((x uml_state_access))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x uml_state_access)) (! (in_range
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__model__uml_transition__from_data uml_state_access)(rec__model__uml_transition__to_data uml_state_access)))))
(define-fun us_split_fields_From_Data__projection ((a us_split_fields)) uml_state_access
  (rec__model__uml_transition__from_data a))

(define-fun us_split_fields_To_Data__projection ((a us_split_fields)) uml_state_access
  (rec__model__uml_transition__to_data a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__model__uml_transition__from_data
                           (us_split_fields1 a))) (to_rep
                                                  (rec__model__uml_transition__from_data
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__model__uml_transition__to_data
                           (us_split_fields1 a))) (to_rep
                                                  (rec__model__uml_transition__to_data
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const model__uml_transition__from_data__first__bit Int)

(declare-const model__uml_transition__from_data__last__bit Int)

(declare-const model__uml_transition__from_data__position Int)

;; model__uml_transition__from_data__first__bit_axiom
  (assert (<= 0 model__uml_transition__from_data__first__bit))

;; model__uml_transition__from_data__last__bit_axiom
  (assert
  (< model__uml_transition__from_data__first__bit model__uml_transition__from_data__last__bit))

;; model__uml_transition__from_data__position_axiom
  (assert (<= 0 model__uml_transition__from_data__position))

(declare-const model__uml_transition__to_data__first__bit Int)

(declare-const model__uml_transition__to_data__last__bit Int)

(declare-const model__uml_transition__to_data__position Int)

;; model__uml_transition__to_data__first__bit_axiom
  (assert (<= 0 model__uml_transition__to_data__first__bit))

;; model__uml_transition__to_data__last__bit_axiom
  (assert
  (< model__uml_transition__to_data__first__bit model__uml_transition__to_data__last__bit))

;; model__uml_transition__to_data__position_axiom
  (assert (<= 0 model__uml_transition__to_data__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((uml_transition__ref
 (mk_uml_transition__ref (uml_transition__content us_rep)))))
(define-fun uml_transition__ref___projection ((a uml_transition__ref)) us_rep
  (uml_transition__content a))

(declare-fun to__ (us_rep) Int)

(declare-fun to____function_guard (Int us_rep) Bool)

;; to____post_axiom
  (assert
  (forall ((self us_rep)) (! (dynamic_invariant (to__ self) true false
  true) :pattern ((to__ self)) )))

;; to____def_axiom
  (assert
  (forall ((self us_rep))
  (! (= (to__ self) (to_rep
                    (rec__model__uml_transition__to_data
                    (us_split_fields1 self)))) :pattern ((to__ self)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const val__ Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const self__split_fields uml_state_access)

(declare-const self__split_fields1 uml_state_access)

(declare-const o uml_state_access)

(declare-const o1 uml_state_access)

(declare-const o2 uml_state_access)

(declare-const temp___369 uml_state_access)

(declare-const temp___3691 uml_state_access)

(declare-const result uml_state_access)

(declare-const result1 uml_state_access)

(declare-const self__split_fields2 uml_state_access)

(declare-const self__split_fields3 uml_state_access)

(declare-const self__split_fields4 uml_state_access)

(declare-const self__split_fields5 uml_state_access)

(declare-const self__split_fields6 uml_state_access)

(declare-const self__split_fields7 uml_state_access)

;; H
  (assert (in_range val__))

;; H
  (assert (= (to_rep o) val__))

;; H
  (assert (= self__split_fields o1))

;; H
  (assert (= o o2))

;; H
  (assert (= temp___369 o1))

;; H
  (assert (= temp___3691 o2))

;; H
  (assert (= result self__split_fields))

;; H
  (assert (= result1 self__split_fields1))

;; H
  (assert (= temp___369 self__split_fields2))

;; H
  (assert (= temp___3691 self__split_fields3))

;; H
  (assert (= self__split_fields4 self__split_fields2))

;; H
  (assert (= self__split_fields5 self__split_fields3))

;; H
  (assert (= self__split_fields6 self__split_fields2))

;; H
  (assert (= self__split_fields7 self__split_fields3))

(assert
;; WP_parameter_def
 ;; File "model.ads", line 35, characters 0-0
  (not
  (= (to__
     (mk___rep (mk___split_fields self__split_fields4 self__split_fields5)))
  val__)))
(check-sat)
(exit)
