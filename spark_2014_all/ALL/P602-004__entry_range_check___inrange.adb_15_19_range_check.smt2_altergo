(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type int20

predicate in_range(x: int) = ((1 <= x) and (x <= 20))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : int20, int20 -> bool

logic dummy : int20

type int20__ref = { int20__content : int20
}

function int20__ref___projection(a: int20__ref) : int20 = (a).int20__content

type int10

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : int10, int10 -> bool

logic dummy1 : int10

type int10__ref = { int10__content : int10
}

function int10__ref___projection(a: int10__ref) : int10 = (a).int10__content

type pt

logic user_eq2 : pt, pt -> bool

logic value__size : int

logic object__size : pt -> int

logic value__alignment : int

logic object__alignment : pt -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:pt. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom : (forall a:pt. (0 <= object__alignment(a)))

type pt__ref = { pt__content : pt
}

function pt__ref___projection(a: pt__ref) : pt = (a).pt__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "inrange.ads", line 6, characters 0-0 *)
goal WP_parameter_def :
  (forall x:int. forall y:int. forall o:int.
  forall inrange__pt__add_out__i:int. forall o1:pt. forall us_self__compl:pt.
  forall result:int. forall x1:int. forall result1:int. forall y1:int.
  forall po:pt. forall inrange__pt__add_out__i1:int.
  forall us_self__compl1:pt. forall result2:pt. forall po1:pt.
  (((result = x) and (x1 = 10)) -> (in_range1(x1) -> (((result1 = y) and
  (y1 = 10)) -> (in_range1(y1) -> ((((o = x1) and in_range(x1)) and
  (o = inrange__pt__add_out__i)) -> (((o1 = po) and (o1 = us_self__compl)) ->
  (((inrange__pt__add_out__i1 = (inrange__pt__add_out__i + y1)) and
  in_range(inrange__pt__add_out__i1)) -> (((po = result2) and
  (po1 = us_self__compl1)) -> in_range1(inrange__pt__add_out__i1))))))))))
