;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort int__ 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (int__ int__) Bool)

(declare-const dummy3 int__)

(declare-datatypes () ((int____ref (mk_int____ref (int____content int__)))))
(define-fun int____ref___2__projection ((a int____ref)) int__ (int____content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_306 Int)
  (temp___is_init_303 Bool) (temp___skip_constant_304 Bool)
  (temp___do_toplevel_305 Bool)) Bool (=>
                                      (or (= temp___is_init_303 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range3 temp___expr_306)))

(declare-const eof Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort file_descr 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (file_descr file_descr) Bool)

(declare-const dummy4 file_descr)

(declare-datatypes ()
((file_descr__ref (mk_file_descr__ref (file_descr__content file_descr)))))
(define-fun file_descr__ref___projection ((a file_descr__ref)) file_descr
  (file_descr__content a))

(declare-fun to_rep1 (file_descr) Int)

(declare-fun of_rep1 (Int) file_descr)

;; inversion_axiom
  (assert
  (forall ((x file_descr))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x file_descr)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant2 ((temp___expr_354 Int)
  (temp___is_init_351 Bool) (temp___skip_constant_352 Bool)
  (temp___do_toplevel_353 Bool)) Bool (=>
                                      (or (= temp___is_init_351 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range4 temp___expr_354)))

(declare-fun ferror (Int) Int)

(declare-fun ferror__function_guard (Int Int) Bool)

;; ferror__post_axiom
  (assert
  (forall ((stream Int))
  (! (=> (dynamic_invariant2 stream true true true) (dynamic_invariant1
     (ferror stream) true false true)) :pattern ((ferror stream)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__fileio__file_type__descr file_descr)(rec__fileio__file_type__before_lm Bool)(rec__fileio__file_type__before_lm_pm Bool)(rec__fileio__file_type__is_regular_file Bool)))))
(define-fun us_split_fields_Descr__projection ((a us_split_fields)) file_descr
  (rec__fileio__file_type__descr a))

(define-fun us_split_fields_Before_LM__projection ((a us_split_fields)) Bool
  (rec__fileio__file_type__before_lm a))

(define-fun us_split_fields_Before_LM_PM__projection ((a us_split_fields)) Bool
  (rec__fileio__file_type__before_lm_pm a))

(define-fun us_split_fields_Is_Regular_File__projection ((a us_split_fields)) Bool
  (rec__fileio__file_type__is_regular_file a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__fileio__file_type__descr
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__fileio__file_type__descr
                                                  (us_split_fields1 b))))
                        (= (rec__fileio__file_type__before_lm
                           (us_split_fields1 a)) (rec__fileio__file_type__before_lm
                                                 (us_split_fields1 b))))
                        (= (rec__fileio__file_type__before_lm_pm
                           (us_split_fields1 a)) (rec__fileio__file_type__before_lm_pm
                                                 (us_split_fields1 b))))
                        (= (rec__fileio__file_type__is_regular_file
                           (us_split_fields1 a)) (rec__fileio__file_type__is_regular_file
                                                 (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const fileio__file_type__descr__first__bit Int)

(declare-const fileio__file_type__descr__last__bit Int)

(declare-const fileio__file_type__descr__position Int)

;; fileio__file_type__descr__first__bit_axiom
  (assert (<= 0 fileio__file_type__descr__first__bit))

;; fileio__file_type__descr__last__bit_axiom
  (assert
  (< fileio__file_type__descr__first__bit fileio__file_type__descr__last__bit))

;; fileio__file_type__descr__position_axiom
  (assert (<= 0 fileio__file_type__descr__position))

(declare-const fileio__file_type__before_lm__first__bit Int)

(declare-const fileio__file_type__before_lm__last__bit Int)

(declare-const fileio__file_type__before_lm__position Int)

;; fileio__file_type__before_lm__first__bit_axiom
  (assert (<= 0 fileio__file_type__before_lm__first__bit))

;; fileio__file_type__before_lm__last__bit_axiom
  (assert
  (< fileio__file_type__before_lm__first__bit fileio__file_type__before_lm__last__bit))

;; fileio__file_type__before_lm__position_axiom
  (assert (<= 0 fileio__file_type__before_lm__position))

(declare-const fileio__file_type__before_lm_pm__first__bit Int)

(declare-const fileio__file_type__before_lm_pm__last__bit Int)

(declare-const fileio__file_type__before_lm_pm__position Int)

;; fileio__file_type__before_lm_pm__first__bit_axiom
  (assert (<= 0 fileio__file_type__before_lm_pm__first__bit))

;; fileio__file_type__before_lm_pm__last__bit_axiom
  (assert
  (< fileio__file_type__before_lm_pm__first__bit fileio__file_type__before_lm_pm__last__bit))

;; fileio__file_type__before_lm_pm__position_axiom
  (assert (<= 0 fileio__file_type__before_lm_pm__position))

(declare-const fileio__file_type__is_regular_file__first__bit Int)

(declare-const fileio__file_type__is_regular_file__last__bit Int)

(declare-const fileio__file_type__is_regular_file__position Int)

;; fileio__file_type__is_regular_file__first__bit_axiom
  (assert (<= 0 fileio__file_type__is_regular_file__first__bit))

;; fileio__file_type__is_regular_file__last__bit_axiom
  (assert
  (< fileio__file_type__is_regular_file__first__bit fileio__file_type__is_regular_file__last__bit))

;; fileio__file_type__is_regular_file__position_axiom
  (assert (<= 0 fileio__file_type__is_regular_file__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ()
((file_type__ref (mk_file_type__ref (file_type__content us_rep)))))
(define-fun file_type__ref___projection ((a file_type__ref)) us_rep (file_type__content
                                                                    a))

(declare-const file us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-const the_file (Array Int character))

(declare-const cur_position Int)

(declare-const ch Int)

(declare-const o Int)

(declare-const o1 Bool)

(declare-const cur_position1 Int)

(declare-const ch1 Int)

(declare-const result Bool)

(declare-const cur_position2 Int)

(declare-const ch2 Int)

(declare-const cur_position3 Int)

(declare-const ch3 Int)

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range3 ch)))

;; H
  (assert (in_range3 eof))

;; H
  (assert (in_range1 cur_position))

;; H
  (assert
  (and
  (=> (not (= ch1 eof))
  (and (= cur_position1 (+ cur_position 1))
  (= ch1 (to_rep (select the_file cur_position)))))
  (and (in_range3 ch1) (in_range1 cur_position1))))

;; H
  (assert
  (=> (= ch1 eof)
  (and
  (= o (ferror
       (to_rep1 (rec__fileio__file_type__descr (us_split_fields1 file)))))
  (in_range3 o))))

;; H
  (assert (=> (= ch1 eof) (= o1 (ite (= o 0) true false))))

;; H
  (assert (=> (= ch1 eof) (= result (ite (not (= o1 true)) true false))))

;; H
  (assert (=> (not (= ch1 eof)) (= result false)))

;; H
  (assert (not (= result true)))

;; H
  (assert (= ch1 ch2))

;; H
  (assert (= cur_position1 cur_position2))

;; H
  (assert (= ch3 ch1))

;; H
  (assert (= cur_position3 cur_position1))

(assert
;; WP_parameter_def
 ;; File "fileio.adb", line 13, characters 0-0
  (not (= ch2 (to_rep (select the_file cur_position)))))
(check-sat)
(exit)
