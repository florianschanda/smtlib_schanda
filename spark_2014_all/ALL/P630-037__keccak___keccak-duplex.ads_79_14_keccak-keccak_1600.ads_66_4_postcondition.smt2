;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort positive 0)

(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range
                                     temp___expr_39)))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort lane_type 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (lane_type lane_type) Bool)

(declare-const dummy1 lane_type)

(declare-datatypes ()
((lane_type__ref (mk_lane_type__ref (lane_type__content lane_type)))))
(define-fun lane_type__ref___projection ((a lane_type__ref)) lane_type
  (lane_type__content a))

(declare-fun to_rep (lane_type) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) lane_type)

;; inversion_axiom
  (assert
  (forall ((x lane_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x lane_type)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x lane_type)) (! (uint_in_range1
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort map1 0)

(declare-datatypes () ((map__ref (mk_map__ref (map__content map1)))))
(declare-fun get (map1 (_ BitVec 8) (_ BitVec 8)) lane_type)

(declare-fun set (map1 (_ BitVec 8) (_ BitVec 8) lane_type) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (forall ((a lane_type))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)) (i2 (_ BitVec 8)))
  (forall ((j (_ BitVec 8)) (j2 (_ BitVec 8)))
  (forall ((a lane_type))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide (map1 (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first (_ BitVec 8)) (old_first (_ BitVec 8)))
  (forall ((new_first_2 (_ BitVec 8)) (old_first_2 (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (! (= (get (slide a old_first new_first old_first_2 new_first_2) i j)
  (get a (bvsub i (bvsub new_first old_first))
  (bvsub j (bvsub new_first_2 old_first_2)))) :pattern ((get
                                                        (slide a old_first
                                                        new_first old_first_2
                                                        new_first_2) i j)) )))))))

(define-fun bool_eq ((a map1) (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b map1)
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8))
  (b__last_2 (_ BitVec 8))) Bool (ite (and
                                      (and
                                      (ite (bvule a__first a__last)
                                      (and (bvule b__first b__last)
                                      (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                      (bvugt b__first b__last))
                                      (ite (bvule a__first_2 a__last_2)
                                      (and (bvule b__first_2 b__last_2)
                                      (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
                                      (bvugt b__first_2 b__last_2)))
                                      (forall ((temp___idx_133 (_ BitVec 8))
                                      (temp___idx_134 (_ BitVec 8)))
                                      (=>
                                      (and
                                      (and (bvule a__first temp___idx_133)
                                      (bvule temp___idx_133 a__last))
                                      (and (bvule a__first_2 temp___idx_134)
                                      (bvule temp___idx_134 a__last_2)))
                                      (= (to_rep
                                         (get a temp___idx_133
                                         temp___idx_134)) (to_rep
                                                          (get b
                                                          (bvadd (bvsub b__first a__first) temp___idx_133)
                                                          (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)))))))
                                 true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8)))
  (=>
  (= (bool_eq b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (ite (bvule a__first_2 a__last_2)
  (and (bvule b__first_2 b__last_2)
  (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
  (bvugt b__first_2 b__last_2)))
  (forall ((temp___idx_133 (_ BitVec 8)) (temp___idx_134 (_ BitVec 8)))
  (=>
  (and (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last))
  (and (bvule a__first_2 temp___idx_134) (bvule temp___idx_134 a__last_2)))
  (= (to_rep (get a temp___idx_133 temp___idx_134)) (to_rep
                                                    (get b
                                                    (bvadd (bvsub b__first a__first) temp___idx_133)
                                                    (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)))))))))))

(declare-sort rate_number 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 3 x) (<= x 1599)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (rate_number rate_number) Bool)

(declare-const dummy2 rate_number)

(declare-datatypes ()
((rate_number__ref (mk_rate_number__ref (rate_number__content rate_number)))))
(define-fun rate_number__ref___2__projection ((a rate_number__ref)) rate_number
  (rate_number__content a))

(declare-fun to_rep1 (rate_number) Int)

(declare-fun of_rep1 (Int) rate_number)

;; inversion_axiom
  (assert
  (forall ((x rate_number))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x rate_number)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-const dummy3 map1)

(declare-const value__size Int)

(declare-fun object__size (map1) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size (map1) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment a))))

(declare-fun user_eq3 (map1 map1) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__keccak__keccak_1600__duplex__context__state map1)(rec__keccak__keccak_1600__duplex__context__rate rate_number)))))
(define-fun us_split_fields_State__2__projection ((a us_split_fields)) map1
  (rec__keccak__keccak_1600__duplex__context__state a))

(define-fun us_split_fields_Rate__2__projection ((a us_split_fields)) rate_number
  (rec__keccak__keccak_1600__duplex__context__rate a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq
                           (rec__keccak__keccak_1600__duplex__context__state
                           (us_split_fields1 a)) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4) ((_ int2bv 8) 0) ((_ int2bv 8) 4)
                           (rec__keccak__keccak_1600__duplex__context__state
                           (us_split_fields1 b)) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4)) true)
                        (= (to_rep1
                           (rec__keccak__keccak_1600__duplex__context__rate
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__keccak__keccak_1600__duplex__context__rate
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const keccak__keccak_1600__duplex__context__state__first__bit Int)

(declare-const keccak__keccak_1600__duplex__context__state__last__bit Int)

(declare-const keccak__keccak_1600__duplex__context__state__position Int)

;; keccak__keccak_1600__duplex__context__state__first__bit_axiom
  (assert (<= 0 keccak__keccak_1600__duplex__context__state__first__bit))

;; keccak__keccak_1600__duplex__context__state__last__bit_axiom
  (assert
  (< keccak__keccak_1600__duplex__context__state__first__bit keccak__keccak_1600__duplex__context__state__last__bit))

;; keccak__keccak_1600__duplex__context__state__position_axiom
  (assert (<= 0 keccak__keccak_1600__duplex__context__state__position))

(declare-const keccak__keccak_1600__duplex__context__rate__first__bit Int)

(declare-const keccak__keccak_1600__duplex__context__rate__last__bit Int)

(declare-const keccak__keccak_1600__duplex__context__rate__position Int)

;; keccak__keccak_1600__duplex__context__rate__first__bit_axiom
  (assert (<= 0 keccak__keccak_1600__duplex__context__rate__first__bit))

;; keccak__keccak_1600__duplex__context__rate__last__bit_axiom
  (assert
  (< keccak__keccak_1600__duplex__context__rate__first__bit keccak__keccak_1600__duplex__context__rate__last__bit))

;; keccak__keccak_1600__duplex__context__rate__position_axiom
  (assert (<= 0 keccak__keccak_1600__duplex__context__rate__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ()
((context__ref (mk_context__ref (context__content us_rep)))))
(define-fun context__ref___2__projection ((a context__ref)) us_rep (context__content
                                                                   a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const capacity Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun rate_of (us_rep) Int)

(declare-fun rate_of__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant1 ((temp___expr_511 Int)
  (temp___is_init_508 Bool) (temp___skip_constant_509 Bool)
  (temp___do_toplevel_510 Bool)) Bool (=>
                                      (or (= temp___is_init_508 true)
                                      (<= 3 1599)) (in_range1
                                      temp___expr_511)))

;; rate_of__post_axiom
  (assert
  (forall ((ctx us_rep)) (! (dynamic_invariant1 (rate_of ctx) true false
  true) :pattern ((rate_of ctx)) )))

;; rate_of__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (rate_of ctx) (to_rep1
                      (rec__keccak__keccak_1600__duplex__context__rate
                      (us_split_fields1 ctx)))) :pattern ((rate_of ctx)) )))

(declare-const ctx__split_fields map1)

(declare-const ctx__split_fields1 rate_number)

(declare-const o Int)

(declare-const o1 rate_number)

(declare-const o2 map1)

(declare-const o3 rate_number)

(declare-const temp___1045 map1)

(declare-const temp___10451 rate_number)

(declare-const keccak__keccak_1600__keccakf_1600__init__a map1)

(declare-const result map1)

(declare-const result1 rate_number)

(declare-const ctx__split_fields2 map1)

(declare-const ctx__split_fields3 rate_number)

(declare-const result2 map1)

(declare-const result3 rate_number)

(declare-const ctx__split_fields4 map1)

(declare-const ctx__split_fields5 rate_number)

(declare-const ctx__split_fields6 map1)

(declare-const ctx__split_fields7 rate_number)

(declare-const ctx__split_fields8 map1)

(declare-const ctx__split_fields9 rate_number)

;; H
  (assert (in_range capacity))

;; H
  (assert (< capacity 1598))

;; H
  (assert
  (= (mk___split_fields__ref (mk___split_fields result result1)) (mk___split_fields__ref
                                                                 (mk___split_fields
                                                                 ctx__split_fields
                                                                 ctx__split_fields1))))

;; H
  (assert (= keccak__keccak_1600__keccakf_1600__init__a ctx__split_fields2))

;; H
  (assert (= ctx__split_fields1 ctx__split_fields3))

;; H
  (assert (and (= o (- 1600 capacity)) (in_range1 (- 1600 capacity))))

;; H
  (assert (= (to_rep1 o1) o))

;; H
  (assert (= ctx__split_fields2 o2))

;; H
  (assert (= o1 o3))

;; H
  (assert (= temp___1045 o2))

;; H
  (assert (= temp___10451 o3))

;; H
  (assert (= result2 ctx__split_fields2))

;; H
  (assert (= result3 ctx__split_fields3))

;; H
  (assert (= temp___1045 ctx__split_fields4))

;; H
  (assert (= temp___10451 ctx__split_fields5))

;; H
  (assert (= ctx__split_fields6 ctx__split_fields4))

;; H
  (assert (= ctx__split_fields7 ctx__split_fields5))

;; H
  (assert (= ctx__split_fields8 ctx__split_fields4))

;; H
  (assert (= ctx__split_fields9 ctx__split_fields5))

(assert
;; WP_parameter_def
 ;; File "keccak-duplex.ads", line 71, characters 0-0
  (not
  (= (rate_of
     (mk___rep (mk___split_fields ctx__split_fields6 ctx__split_fields7))) (- 1600
  capacity))))
(check-sat)
(exit)
