(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__rec_aggregate__r2__x : integer;
rec__rec_aggregate__r2__y : integer
}

function us_split_fields_X2__projection(a: us_split_fields) : integer =
  (a).rec__rec_aggregate__r2__x

function us_split_fields_Y__projection(a: us_split_fields) : integer =
  (a).rec__rec_aggregate__r2__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep_2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__x) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__x)) and
  (to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__y) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__y))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__x) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__x)) and
  (to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__y) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__y)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__rec_aggregate__r2__x = a;
  rec__rec_aggregate__r2__y = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__rec_aggregate__r2__x = a;
  rec__rec_aggregate__r2__y = a1 } })))

logic rec_aggregate__r2__x__first__bit : int

logic rec_aggregate__r2__x__last__bit : int

logic rec_aggregate__r2__x__position : int

axiom rec_aggregate__r2__x__first__bit_axiom :
  (0 <= rec_aggregate__r2__x__first__bit)

axiom rec_aggregate__r2__x__last__bit_axiom :
  (rec_aggregate__r2__x__first__bit <  rec_aggregate__r2__x__last__bit)

axiom rec_aggregate__r2__x__position_axiom :
  (0 <= rec_aggregate__r2__x__position)

logic rec_aggregate__r2__y__first__bit : int

logic rec_aggregate__r2__y__last__bit : int

logic rec_aggregate__r2__y__position : int

axiom rec_aggregate__r2__y__first__bit_axiom :
  (0 <= rec_aggregate__r2__y__first__bit)

axiom rec_aggregate__r2__y__last__bit_axiom :
  (rec_aggregate__r2__y__first__bit <  rec_aggregate__r2__y__last__bit)

axiom rec_aggregate__r2__y__position_axiom :
  (0 <= rec_aggregate__r2__y__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

type r2__ref = { r2__content : us_rep
}

function r2__ref___projection(a: r2__ref) : us_rep = (a).r2__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "rec_aggregate.ads", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall one:int. forall r__split_fields:integer.
  forall r__split_fields1:integer. forall o:integer. forall o1:integer.
  forall o2:integer. forall o3:integer. forall temp___172:integer.
  forall temp___1721:integer. forall o4:integer. forall o5:integer.
  forall o6:integer. forall o7:integer. forall temp___173:integer.
  forall temp___1731:integer. forall o8:integer. forall o9:integer.
  forall o10:integer. forall o11:integer. forall temp___174:integer.
  forall temp___1741:integer. forall o12:integer. forall o13:integer.
  forall o14:integer. forall o15:integer. forall temp___175:integer.
  forall temp___1751:integer. forall o16:integer. forall o17:integer.
  forall o18:integer. forall o19:integer. forall temp___176:integer.
  forall temp___1761:integer. forall result:integer. forall result1:integer.
  forall r__split_fields2:integer. forall r__split_fields3:integer.
  forall result2:integer. forall result3:integer.
  forall r__split_fields4:integer. forall r__split_fields5:integer.
  forall result4:integer. forall result5:integer.
  forall r__split_fields6:integer. forall r__split_fields7:integer.
  forall result6:integer. forall result7:integer.
  forall r__split_fields8:integer. forall r__split_fields9:integer.
  forall result8:integer. forall result9:integer.
  forall r__split_fields10:integer. forall r__split_fields11:integer.
  forall r__split_fields12:integer. forall r__split_fields13:integer.
  forall r__split_fields14:integer. forall r__split_fields15:integer.
  ((in_range(one) and (in_range(b) and ((one = 1) and ((((b = 1) and
  ((((to_rep(o) = 2) and ((to_rep(o1) = one) and ((o1 = o2) and
  (o = o3)))) and ((temp___172 = o2) and (temp___1721 = o3))) and (({
  us_split_fields__content = { rec__rec_aggregate__r2__x = result;
  rec__rec_aggregate__r2__y = result1 } } = { us_split_fields__content = {
  rec__rec_aggregate__r2__x = r__split_fields; rec__rec_aggregate__r2__y =
  r__split_fields1 } }) and ((temp___172 = r__split_fields2) and
  (temp___1721 = r__split_fields3))))) or ((not (b = 1)) and ((((b = 2) and
  ((((to_rep(o4) = one) and ((to_rep(o5) = one) and ((o5 = o6) and
  (o4 = o7)))) and ((temp___173 = o6) and (temp___1731 = o7))) and
  (((result2 = r__split_fields) and (result3 = r__split_fields1)) and
  ((temp___173 = r__split_fields4) and
  (temp___1731 = r__split_fields5))))) or ((not (b = 2)) and ((((b = 3) and
  ((((to_rep(o8) = one) and ((to_rep(o9) = one) and ((o9 = o10) and
  (o8 = o11)))) and ((temp___174 = o10) and (temp___1741 = o11))) and
  (((result4 = r__split_fields) and (result5 = r__split_fields1)) and
  ((temp___174 = r__split_fields6) and
  (temp___1741 = r__split_fields7))))) or ((not (b = 3)) and ((((b = 4) and
  ((((to_rep(o12) = one) and ((to_rep(o13) = 2) and ((o13 = o14) and
  (o12 = o15)))) and ((temp___175 = o14) and (temp___1751 = o15))) and
  (((result6 = r__split_fields) and (result7 = r__split_fields1)) and
  ((temp___175 = r__split_fields8) and
  (temp___1751 = r__split_fields9))))) or ((not (b = 4)) and
  (((((to_rep(o16) = 2) and ((to_rep(o17) = one) and ((o17 = o18) and
  (o16 = o19)))) and ((temp___176 = o18) and (temp___1761 = o19))) and
  (((result8 = r__split_fields) and (result9 = r__split_fields1)) and
  ((temp___176 = r__split_fields10) and
  (temp___1761 = r__split_fields11)))) and ({ rec__rec_aggregate__r2__x =
  r__split_fields8; rec__rec_aggregate__r2__y = r__split_fields9 } = {
  rec__rec_aggregate__r2__x = r__split_fields10; rec__rec_aggregate__r2__y =
  r__split_fields11 })))) and ({ rec__rec_aggregate__r2__x =
  r__split_fields6; rec__rec_aggregate__r2__y = r__split_fields7 } = {
  rec__rec_aggregate__r2__x = r__split_fields8; rec__rec_aggregate__r2__y =
  r__split_fields9 })))) and ({ rec__rec_aggregate__r2__x = r__split_fields4;
  rec__rec_aggregate__r2__y = r__split_fields5 } = {
  rec__rec_aggregate__r2__x = r__split_fields6; rec__rec_aggregate__r2__y =
  r__split_fields7 })))) and ({ rec__rec_aggregate__r2__x = r__split_fields2;
  rec__rec_aggregate__r2__y = r__split_fields3 } = {
  rec__rec_aggregate__r2__x = r__split_fields4; rec__rec_aggregate__r2__y =
  r__split_fields5 })))) and (((r__split_fields12 = r__split_fields2) and
  (r__split_fields13 = r__split_fields3)) and
  ((r__split_fields14 = r__split_fields2) and
  (r__split_fields15 = r__split_fields3))))))) -> ((b = 1) -> (bool_eq2({
  us_split_fields1 = { rec__rec_aggregate__r2__x = r__split_fields12;
  rec__rec_aggregate__r2__y = r__split_fields13 } }, { us_split_fields1 = {
  rec__rec_aggregate__r2__x = of_rep(one); rec__rec_aggregate__r2__y =
  of_rep((2 * one)) } }) = true))))
