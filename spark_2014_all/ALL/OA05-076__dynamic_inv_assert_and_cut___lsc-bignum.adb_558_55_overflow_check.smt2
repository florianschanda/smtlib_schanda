;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun power (Int Int) Int)

;; Power_0
  (assert (forall ((x Int)) (= (power x 0) 1)))

;; Power_s
  (assert
  (forall ((x Int) (n Int))
  (=> (<= 0 n) (= (power x (+ n 1)) (* x (power x n))))))

;; Power_s_alt
  (assert
  (forall ((x Int) (n Int))
  (=> (< 0 n) (= (power x n) (* x (power x (- n 1)))))))

;; Power_1
  (assert (forall ((x Int)) (= (power x 1) x)))

;; Power_sum
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (<= 0 n)
  (=> (<= 0 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))

;; Power_mult
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
  (assert
  (forall ((x Int) (y Int) (n Int))
  (=> (<= 0 n) (= (power (* x y) n) (* (power x n) (power y n))))))

;; Power_non_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power x y)))))

;; Power_monotonic
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power x n) (power x m)))))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort word32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (word32 word32) Bool)

(declare-const dummy2 word32)

(declare-datatypes ()
((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_217 (_ BitVec 32))
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)) Bool true)

(declare-fun to_rep1 (word32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x word32)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort word64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (word64 word64) Bool)

(declare-const dummy3 word64)

(declare-datatypes ()
((word64__ref (mk_word64__ref (word64__content word64)))))
(define-fun word64__ref___projection ((a word64__ref)) word64 (word64__content
                                                              a))

(define-fun dynamic_invariant2 ((temp___expr_223 (_ BitVec 64))
  (temp___is_init_220 Bool) (temp___skip_constant_221 Bool)
  (temp___do_toplevel_222 Bool)) Bool true)

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))

;; slide_eq
  (assert
  (forall ((a (Array Int word32)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int word32)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int word32) Int Int (Array Int word32) Int
  Int) (Array Int word32))

;; concat_def
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (word32 Int) (Array Int word32))

;; singleton_def
  (assert
  (forall ((v word32))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int word32)) (a__first Int) (a__last Int)
  (b (Array Int word32)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int word32) Int Int (Array Int word32) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq1 (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ()
((math_int__ref (mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content
                                                                  a))

(declare-fun oadd (us_rep us_rep) us_rep)

(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)

;; oadd__post_axiom
  (assert true)

(declare-fun osubtract (us_rep us_rep) us_rep)

(declare-fun osubtract__function_guard (us_rep us_rep us_rep) Bool)

;; osubtract__post_axiom
  (assert true)

(declare-fun omultiply (us_rep us_rep) us_rep)

(declare-fun omultiply__function_guard (us_rep us_rep us_rep) Bool)

;; omultiply__post_axiom
  (assert true)

(declare-fun odivide (us_rep us_rep) us_rep)

(declare-fun odivide__function_guard (us_rep us_rep us_rep) Bool)

;; odivide__post_axiom
  (assert true)

(declare-fun omod (us_rep us_rep) us_rep)

(declare-fun omod__function_guard (us_rep us_rep us_rep) Bool)

;; omod__post_axiom
  (assert true)

(declare-fun oexpon (us_rep Int) us_rep)

(declare-fun oexpon__function_guard (us_rep us_rep Int) Bool)

;; oexpon__post_axiom
  (assert true)

(declare-fun oexpon__2 (us_rep us_rep) us_rep)

(declare-fun oexpon__2__function_guard (us_rep us_rep us_rep) Bool)

;; oexpon__2__post_axiom
  (assert true)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; oeq__post_axiom
  (assert true)

(declare-fun olt (us_rep us_rep) Bool)

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

;; olt__post_axiom
  (assert true)

(declare-fun ole (us_rep us_rep) Bool)

(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)

;; ole__post_axiom
  (assert true)

(declare-fun from_integer (Int) us_rep)

(declare-fun from_integer__function_guard (us_rep Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; from_integer__post_axiom
  (assert true)

(declare-fun from_word32 ((_ BitVec 32)) us_rep)

(declare-fun from_word32__function_guard (us_rep (_ BitVec 32)) Bool)

;; from_word32__post_axiom
  (assert true)

(declare-fun from_word64 ((_ BitVec 64)) us_rep)

(declare-fun from_word64__function_guard (us_rep (_ BitVec 64)) Bool)

;; from_word64__post_axiom
  (assert true)

(declare-fun base (tuple0) us_rep)

(declare-fun base__function_guard (us_rep tuple0) Bool)

;; base__post_axiom
  (assert true)

;; base__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (base us_void_param) (oexpon (from_word32 ((_ int2bv 32) 2)) 32)) :pattern (
  (base us_void_param)) )))

(declare-sort big_int_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (big_int_range big_int_range) Bool)

(declare-const dummy5 big_int_range)

(declare-datatypes ()
((big_int_range__ref
 (mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range
  (big_int_range__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int word32))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))

(define-fun of_array ((a (Array Int word32)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int word32)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int word32)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int word32)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq6 (us_t us_t) Bool)

(declare-const dummy6 us_t)

(declare-datatypes ()
((big_int__ref (mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content
                                                              a))

(define-fun dynamic_invariant4 ((temp___expr_289 us_t)
  (temp___is_init_286 Bool) (temp___skip_constant_287 Bool)
  (temp___do_toplevel_288 Bool)) Bool (=>
                                      (not (= temp___skip_constant_287 true))
                                      (dynamic_property 0 2147483646
                                      (first1 temp___expr_289)
                                      (last1 temp___expr_289))))

(declare-fun num_of_big_int (us_t Int Int) us_rep)

(declare-fun num_of_big_int__function_guard (us_rep us_t Int Int) Bool)

;; num_of_big_int__post_axiom
  (assert true)

(declare-fun inverse (us_rep us_rep) us_rep)

(declare-fun inverse__function_guard (us_rep us_rep us_rep) Bool)

(declare-const a__first integer)

(declare-const a__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const a_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const a_last Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const x us_t)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const x_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const e us_t)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const e_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const e_last Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const m us_t)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const m_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const k Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const aux1__first integer)

(declare-const aux1__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const aux1_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const aux2__first integer)

(declare-const aux2__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const aux2_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const aux3__first integer)

(declare-const aux3__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const aux3_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const aux4__first integer)

(declare-const aux4__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const aux4_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const r us_t)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const r_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const m_inv (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-fun bit_set (us_t Int (_ BitVec 64)) Bool)

(declare-fun bit_set__function_guard (Bool us_t Int (_ BitVec 64)) Bool)

;; bit_set__post_axiom
  (assert
  (forall ((a us_t))
  (forall ((a_first1 Int))
  (forall ((i (_ BitVec 64)))
  (! (=>
     (and
     (and
     (and (dynamic_invariant4 a true true true) (dynamic_invariant a_first1
     true true true)) (dynamic_invariant2 i true true true))
     (and (and (<= (first1 a) a_first1) (<= a_first1 (last1 a)))
     (bvule (bvudiv i ((_ int2bv 64) 32)) ((_ int2bv 64) (- (last1 a) a_first1)))))
     (= (= (bit_set a a_first1 i) true)
     (not
     (= (bvand (to_rep1
               (select (to_array a) (+ a_first1 (bv2nat (bvudiv i ((_ int2bv 64) 32))))))
     (let ((temp___456 (bv2nat (bvurem i ((_ int2bv 64) 32)))))
     (ite (< temp___456 4294967296)
     (bvshl ((_ int2bv 32) 1) ((_ int2bv 32) temp___456)) ((_ int2bv 32) 0)))) ((_ int2bv 32) 0))))) :pattern (
  (bit_set a a_first1 i)) )))))

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes () ((t79b__ref (mk_t79b__ref (t79b__content integer)))))
(define-fun t79b__ref___projection ((a t79b__ref)) integer (t79b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const r94b Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (integer integer) Bool)

(declare-const dummy8 integer)

(declare-datatypes () ((t95b__ref (mk_t95b__ref (t95b__content integer)))))
(define-fun t95b__ref___projection ((a t95b__ref)) integer (t95b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

(define-fun dynamic_invariant5 ((temp___expr_283 Int)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)) Bool (=>
                                      (or (= temp___is_init_280 true)
                                      (<= 0 2147483646)) (in_range3
                                      temp___expr_283)))

;; inverse__post_axiom
  (assert true)

(declare-const a (Array Int word32))

(declare-const j Int)

(declare-const l Int)

(declare-const s Int)

(declare-const i (_ BitVec 64))

(declare-const h Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const temp___638 Int)

(declare-const temp___636 Int)

(declare-const temp___633 (Array Int word32))

(declare-const temp___631 (Array Int word32))

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 (_ BitVec 64))

(declare-const o5 (_ BitVec 64))

(declare-const o6 (_ BitVec 64))

(declare-const o7 (_ BitVec 64))

(declare-const o8 us_rep)

(declare-const o9 Int)

(declare-const o10 us_rep)

(declare-const o11 Int)

(declare-const o12 us_rep)

(declare-const o13 Int)

(declare-const o14 us_rep)

(declare-const o15 us_rep)

(declare-const o16 us_rep)

(declare-const o17 Int)

(declare-const o18 us_rep)

(declare-const o19 us_rep)

(declare-const o20 Int)

(declare-const o21 us_rep)

(declare-const o22 us_rep)

(declare-const o23 Bool)

(declare-const o24 Int)

(declare-const o25 us_rep)

(declare-const o26 Int)

(declare-const o27 us_rep)

(declare-const o28 Int)

(declare-const o29 Int)

(declare-const o30 Int)

(declare-const o31 Int)

(declare-const o32 us_rep)

(declare-const o33 us_rep)

(declare-const o34 us_rep)

(declare-const o35 us_rep)

(declare-const o36 us_rep)

(declare-const o37 us_rep)

(declare-const o38 us_rep)

(declare-const o39 us_rep)

(declare-const o40 us_rep)

(declare-const o41 Int)

(declare-const o42 us_rep)

(declare-const o43 us_rep)

(declare-const o44 Int)

(declare-const o45 us_rep)

(declare-const o46 us_rep)

(declare-const o47 Bool)

(declare-const n Int)

(declare-const o48 Int)

(declare-const o49 Int)

(declare-const o50 Int)

(declare-const o51 Bool)

(declare-const o52 Bool)

(declare-const o53 us_rep)

(declare-const o54 us_rep)

(declare-const o55 Int)

(declare-const o56 Int)

(declare-const o57 Int)

(declare-const o58 Int)

(declare-const o59 us_rep)

(declare-const o60 us_rep)

(declare-const o61 Int)

(declare-const o62 Int)

(declare-const o63 Int)

(declare-const o64 Int)

(declare-const o65 us_rep)

(declare-const o66 us_rep)

(declare-const o67 us_rep)

(declare-const o68 us_rep)

(declare-const o69 us_rep)

(declare-const o70 us_rep)

(declare-const o71 us_rep)

(declare-const o72 us_rep)

(declare-const o73 us_rep)

(declare-const o74 us_rep)

(declare-const o75 us_rep)

(declare-const o76 us_rep)

(declare-const o77 Bool)

(declare-const o78 Int)

(declare-const o79 Bool)

(declare-const o80 us_rep)

(declare-const o81 us_rep)

(declare-const o82 us_rep)

(declare-const o83 us_rep)

(declare-const o84 Bool)

(declare-const o85 Int)

(declare-const o86 Int)

(declare-const o87 (_ BitVec 64))

(declare-const o88 (_ BitVec 64))

(declare-const o89 (_ BitVec 64))

(declare-const o90 Bool)

(declare-const a1 (Array Int word32))

(declare-const l1 Int)

(declare-const aux1 (Array Int word32))

(declare-const aux3 (Array Int word32))

(declare-const aux4 (Array Int word32))

(declare-const aux2 (Array Int word32))

(declare-const result Int)

(declare-const h1 Int)

(declare-const aux41 (Array Int word32))

(declare-const h2 Int)

(declare-const a2 (Array Int word32))

(declare-const aux42 (Array Int word32))

(declare-const a3 (Array Int word32))

(declare-const aux43 (Array Int word32))

(declare-const h3 int__ref)

(declare-const a4 (Array Int word32))

(declare-const aux44 (Array Int word32))

(declare-const h4 Int)

(declare-const a5 map__ref)

(declare-const aux45 map__ref)

(declare-const h5 int__ref)

(declare-const a6 (Array Int word32))

(declare-const aux46 (Array Int word32))

(declare-const h6 Int)

(declare-const result1 t__ref1)

(declare-const i1 (_ BitVec 64))

(declare-const aux31 (Array Int word32))

(declare-const j1 Int)

(declare-const s1 Int)

(declare-const i2 (_ BitVec 64))

(declare-const w (_ BitVec 32))

(declare-const result2 Bool)

(declare-const result3 t__ref)

(declare-const w1 (_ BitVec 32))

(declare-const result4 int__ref)

(declare-const s2 Int)

(declare-const result5 int__ref)

(declare-const j2 Int)

(declare-const j3 Int)

(declare-const s3 Int)

(declare-const w2 (_ BitVec 32))

(declare-const result6 Bool)

;; H
  (assert (dynamic_property 0 2147483646 (to_rep a__first) (to_rep a__last)))

;; H
  (assert (in_range2 a_first))

;; H
  (assert (in_range2 a_last))

;; H
  (assert (dynamic_invariant4 x true false true))

;; H
  (assert (in_range2 x_first))

;; H
  (assert (dynamic_invariant4 e true false true))

;; H
  (assert (in_range2 e_first))

;; H
  (assert (in_range2 e_last))

;; H
  (assert (dynamic_invariant4 m true false true))

;; H
  (assert (in_range2 m_first))

;; H
  (assert (in_range2 k))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux1__first)
  (to_rep aux1__last)))

;; H
  (assert (in_range2 aux1_first))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux2__first)
  (to_rep aux2__last)))

;; H
  (assert (in_range2 aux2_first))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux3__first)
  (to_rep aux3__last)))

;; H
  (assert (in_range2 aux3_first))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux4__first)
  (to_rep aux4__last)))

;; H
  (assert (in_range2 aux4_first))

;; H
  (assert (dynamic_invariant4 r true false true))

;; H
  (assert (in_range2 r_first))

;; H
  (assert
  (and (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last)))
  (and (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last)))
  (and (< a_first a_last)
  (and
  (and (<= (to_rep (first (rt x))) x_first)
  (<= x_first (to_rep (last (rt x)))))
  (and
  (and (<= (to_rep (first (rt x))) (+ x_first (- a_last a_first)))
  (<= (+ x_first (- a_last a_first)) (to_rep (last (rt x)))))
  (and
  (and (<= (to_rep (first (rt e))) e_first)
  (<= e_first (to_rep (last (rt e)))))
  (and
  (and (<= (to_rep (first (rt e))) e_last)
  (<= e_last (to_rep (last (rt e)))))
  (and (<= e_first e_last)
  (and
  (and (<= (to_rep (first (rt m))) m_first)
  (<= m_first (to_rep (last (rt m)))))
  (and
  (and (<= (to_rep (first (rt m))) (+ m_first (- a_last a_first)))
  (<= (+ m_first (- a_last a_first)) (to_rep (last (rt m)))))
  (and
  (and (<= (to_rep aux1__first) aux1_first)
  (<= aux1_first (to_rep aux1__last)))
  (and
  (and (<= (to_rep aux1__first) (+ aux1_first (- a_last a_first)))
  (<= (+ aux1_first (- a_last a_first)) (to_rep aux1__last)))
  (and
  (and (<= (to_rep aux2__first) aux2_first)
  (<= aux2_first (to_rep aux2__last)))
  (and
  (and (<= (to_rep aux2__first) (+ aux2_first (- a_last a_first)))
  (<= (+ aux2_first (- a_last a_first)) (to_rep aux2__last)))
  (and
  (and (<= (to_rep aux3__first) aux3_first)
  (<= aux3_first (to_rep aux3__last)))
  (and
  (and (<= (to_rep aux3__first) (+ aux3_first (- a_last a_first)))
  (<= (+ aux3_first (- a_last a_first)) (to_rep aux3__last)))
  (and
  (and (<= (to_rep aux4__first) aux4_first)
  (<= aux4_first (to_rep aux4__last)))
  (and
  (and
  (<= (to_rep aux4__first) (+ aux4_first (- (* (power 2 k) (+ (- a_last
  a_first) 1)) 1)))
  (<= (+ aux4_first (- (* (power 2 k) (+ (- a_last a_first) 1)) 1)) (to_rep
                                                                    aux4__last)))
  (and (<= k 30)
  (and
  (and (<= (to_rep (first (rt r))) r_first)
  (<= r_first (to_rep (last (rt r)))))
  (and
  (and (<= (to_rep (first (rt r))) (+ r_first (- a_last a_first)))
  (<= (+ r_first (- a_last a_first)) (to_rep (last (rt r)))))
  (and
  (= (oeq (num_of_big_int r r_first (+ (- a_last a_first) 1))
     (omod
     (oexpon__2 (base Tuple0)
     (omultiply (from_integer 2) (from_integer (+ (- a_last a_first) 1))))
     (num_of_big_int m m_first (+ (- a_last a_first) 1)))) true)
  (and
  (= (olt (from_word32 ((_ int2bv 32) 1))
     (num_of_big_int m m_first (+ (- a_last a_first) 1))) true)
  (= (bvadd ((_ int2bv 32) 1) (bvmul m_inv (to_rep1
                                           (select (elts m) m_first)))) ((_ int2bv 32) 0))))))))))))))))))))))))))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 j)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 l)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 s)))

;; H
  (assert
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux1 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux3 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod (oexpon (base Tuple0) (+ l1 1))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux4 (mk (to_rep aux4__first) (to_rep aux4__last))) aux4_first
     (+ l1 1))
     (omod
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 l1)))

;; H
  (assert (and (= o (power 2 k)) (in_range1 (power 2 k))))

;; H
  (assert (= o1 (- o 1)))

;; H
  (assert (and (= temp___638 o1) (in_range1 o1)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref h)))

;; H
  (assert (= h1 1))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= temp___636 h1)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= temp___633 a)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= temp___631 aux4)))

;; H
  (assert
  (=> (and (<= 1 h1) (<= h1 temp___638))
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux1 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux3 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod (oexpon (base Tuple0) (+ l1 1))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n1 Int))
  (=> (and (<= 0 n1) (<= n1 (- h2 1)))
  (= (oeq
     (num_of_big_int
     (mk___t aux41 (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n1 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n1) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))))

;; H
  (assert
  (=> (and (<= 1 h1) (<= h1 temp___638))
  (and
  (=> (<= 1 (- (power 2 k) 1)) (dynamic_property1 1 (- (power 2 k) 1) h2))
  (and (<= 1 h2) (<= h2 (- (power 2 k) 1))))))

;; H
  (assert
  (=> (and (<= 1 h1) (<= h1 temp___638))
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux1 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux3 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod (oexpon (base Tuple0) (+ l1 1))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n1 Int))
  (=> (and (<= 0 n1) (<= n1 h2))
  (= (oeq
     (num_of_big_int
     (mk___t aux42 (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n1 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n1) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))))

;; H
  (assert
  (=> (and (<= 1 h1) (<= h1 temp___638))
  (=> (<= 0 2147483647) (in_range2 l1))))

;; H
  (assert
  (=> (and (<= 1 h1) (<= h1 temp___638))
  (=> (<= 1 (- (power 2 k) 1)) (dynamic_property1 1 (- (power 2 k) 1) h2))))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= h2 temp___638)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= h3 (mk_int__ref h2))))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= aux42 aux43)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= a2 a3)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= h4 h2)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= aux44 aux42)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= a4 a2)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= h5 h3)))

;; H
  (assert
  (=> (and (<= 1 h1) (<= h1 temp___638)) (= aux45 (mk_map__ref aux43))))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= a5 (mk_map__ref a3))))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= h6 h4)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= aux46 aux44)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= a6 a4)))

;; H
  (assert
  (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= h5 (mk_int__ref h1))))

;; H
  (assert
  (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= aux45 (mk_map__ref aux4))))

;; H
  (assert
  (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= a5 (mk_map__ref a))))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= h6 h1)))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= aux46 aux4)))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= a6 a1)))

;; H
  (assert (and (= o2 (- e_last e_first)) (in_range1 (- e_last e_first))))

;; H
  (assert (and (= o3 o2) (uint_in_range1 o2)))

;; H
  (assert (= o4 ((_ int2bv 64) o3)))

;; H
  (assert (= o5 (bvadd o4 ((_ int2bv 64) 1))))

;; H
  (assert (= o6 (bvmul o5 ((_ int2bv 64) 32))))

;; H
  (assert (= o7 (bvsub o6 ((_ int2bv 64) 1))))

;; H
  (assert (= result1 (mk_t__ref1 i)))

;; H
  (assert (= i1 o7))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux1 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux31 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod
     (omultiply
     (oexpon__2 (num_of_big_int x x_first (+ l1 1))
     (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1))
     (oexpon__2 (from_word32 ((_ int2bv 32) 2))
     (oadd (from_word64 i2) (from_word32 ((_ int2bv 32) 1))))))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n1 Int))
  (=> (and (<= 0 n1) (<= n1 (- (power 2 k) 1)))
  (= (oeq
     (num_of_big_int
     (mk___t (map__content aux45)
     (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n1 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n1) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))
  (bvult i2 (bvmul (bvadd ((_ int2bv 64) (- e_last e_first)) ((_ int2bv 64) 1)) ((_ int2bv 64) 32)))))

;; H
  (assert
  (and (=> (<= 0 2147483647) (in_range2 j1))
  (=> (<= 0 2147483647) (in_range2 s1))))

;; H
  (assert
  (and (= result2 (bit_set e e_first i2))
  (= (= result2 true)
  (not
  (= (bvand (to_rep1
            (select (elts e) (+ e_first (bv2nat (bvudiv i2 ((_ int2bv 64) 32))))))
  (let ((temp___455 (bv2nat (bvurem i2 ((_ int2bv 64) 32)))))
  (ite (< temp___455 4294967296)
  (bvshl ((_ int2bv 32) 1) ((_ int2bv 32) temp___455)) ((_ int2bv 32) 0)))) ((_ int2bv 32) 0))))))

;; H
  (assert (= result2 true))

;; H
  (assert (= result3 (mk_t__ref w)))

;; H
  (assert (= w1 ((_ int2bv 32) 1)))

;; H
  (assert (= result4 (mk_int__ref s1)))

;; H
  (assert (= s2 0))

;; H
  (assert (= result5 (mk_int__ref j1)))

;; H
  (assert (= j2 1))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux1 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux31 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod
     (omultiply
     (oexpon__2 (num_of_big_int x x_first (+ l1 1))
     (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1))
     (oexpon__2 (from_word32 ((_ int2bv 32) 2))
     (oadd (from_word64 i2) (from_word32 ((_ int2bv 32) 1))))))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n1 Int))
  (=> (and (<= 0 n1) (<= n1 (- (power 2 k) 1)))
  (= (oeq
     (num_of_big_int
     (mk___t (map__content aux45)
     (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n1 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n1) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))
  (= (oeq
     (omultiply (from_word32 w2)
     (oexpon (from_word32 ((_ int2bv 32) 2)) (- (- j3 s3) 1)))
     (omod
     (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1))
     (oexpon__2 (from_word32 ((_ int2bv 32) 2))
     (osubtract (from_word64 i2)
     (osubtract (from_integer j3) (from_word32 ((_ int2bv 32) 1))))))
     (oexpon (from_word32 ((_ int2bv 32) 2)) j3))) true))
  (= (bvurem w2 ((_ int2bv 32) 2)) ((_ int2bv 32) 1))) (<= 0 s3)) (<
  s3 j3)) (<= j3 (+ k 1)))
  (= (ole (from_integer j3)
     (oadd (from_word64 i2) (from_word32 ((_ int2bv 32) 1)))) true))
  (bvult i2 (bvmul (bvadd ((_ int2bv 64) (- e_last e_first)) ((_ int2bv 64) 1)) ((_ int2bv 64) 32)))))

;; H
  (assert
  (and (=> (<= 0 2147483647) (in_range2 j3))
  (=> (<= 0 2147483647) (in_range2 s3))))

;; H
  (assert (and (= o85 (- e_last e_first)) (in_range1 (- e_last e_first))))

;; H
  (assert (and (= o86 o85) (uint_in_range1 o85)))

;; H
  (assert (= o87 ((_ int2bv 64) o86)))

;; H
  (assert (= o88 (bvadd o87 ((_ int2bv 64) 1))))

;; H
  (assert (= o89 (bvmul o88 ((_ int2bv 64) 32))))

;; H
  (assert (= o90 (ite (bvult i2 o89) true false)))

;; H
  (assert (= o82 (from_word32 ((_ int2bv 32) 1))))

;; H
  (assert (= o81 (from_word64 i2)))

;; H
  (assert (= o83 (oadd o81 o82)))

;; H
  (assert (= o80 (from_integer j3)))

;; H
  (assert (= o84 (ole o80 o83)))

;; H
  (assert (and (= o78 (+ k 1)) (in_range1 (+ k 1))))

;; H
  (assert (= o79 (ite (<= j3 o78) true false)))

;; H
  (assert (= o74 (from_word32 ((_ int2bv 32) 2))))

;; H
  (assert (= o75 (oexpon o74 j3)))

;; H
  (assert (= o69 (from_word32 ((_ int2bv 32) 1))))

;; H
  (assert (= o68 (from_integer j3)))

;; H
  (assert (= o70 (osubtract o68 o69)))

;; H
  (assert (= o67 (from_word64 i2)))

;; H
  (assert (= o71 (osubtract o67 o70)))

;; H
  (assert (= o66 (from_word32 ((_ int2bv 32) 2))))

;; H
  (assert (= o72 (oexpon__2 o66 o71)))

;; H
  (assert (and (= o61 (- e_last e_first)) (in_range1 (- e_last e_first))))

;; H
  (assert (= o62 (+ o61 1)))

;; H
  (assert (and (= o63 o62) (in_range1 o62)))

;; H
  (assert (and (= o64 o63) (in_range2 o63)))

;; H
  (assert (= o65 (num_of_big_int e e_first o64)))

;; H
  (assert (= o73 (odivide o65 o72)))

;; H
  (assert (= o76 (omod o73 o75)))

;; H
  (assert (and (= o55 (- j3 s3)) (in_range1 (- j3 s3))))

;; H
  (assert (= o56 (- o55 1)))

;; H
  (assert (and (= o57 o56) (in_range1 o56)))

;; H
  (assert (and (= o58 o57) (in_range2 o57)))

;; H
  (assert (= o54 (from_word32 ((_ int2bv 32) 2))))

;; H
  (assert (= o59 (oexpon o54 o58)))

;; H
  (assert (= o53 (from_word32 w2)))

;; H
  (assert (= o60 (omultiply o53 o59)))

;; H
  (assert (= o77 (oeq o60 o76)))

;; H
  (assert (and (= o48 (power 2 k)) (in_range1 (power 2 k))))

;; H
  (assert (= o49 (- o48 1)))

;; H
  (assert (and (= o50 o49) (in_range1 o49)))

;; H
  (assert (= o51 (ite (<= n o50) true false)))

;; H
  (assert (= result6 (ite (<= 0 n) o51 false)))

;; H
  (assert
  (= (= o52 true)
  (forall ((n1 Int))
  (=> (and (<= 0 n1) (<= n1 (- (power 2 k) 1)))
  (= (oeq
     (num_of_big_int
     (mk___t (map__content aux45)
     (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n1 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n1) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)))))

;; H
  (assert (and (= o44 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o45 (num_of_big_int m m_first o44)))

;; H
  (assert (and (= o41 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert
  (and (= o40 (base Tuple0))
  (= o40 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))

;; H
  (assert (= o42 (oexpon o40 o41)))

;; H
  (assert (= o35 (from_word32 ((_ int2bv 32) 1))))

;; H
  (assert (= o34 (from_word64 i2)))

;; H
  (assert (= o36 (oadd o34 o35)))

;; H
  (assert (= o33 (from_word32 ((_ int2bv 32) 2))))

;; H
  (assert (= o37 (oexpon__2 o33 o36)))

;; H
  (assert (and (= o28 (- e_last e_first)) (in_range1 (- e_last e_first))))

;; H
  (assert (= o29 (+ o28 1)))

;; H
  (assert (and (= o30 o29) (in_range1 o29)))

;; H
  (assert (and (= o31 o30) (in_range2 o30)))

;; H
  (assert (= o32 (num_of_big_int e e_first o31)))

;; H
  (assert (= o38 (odivide o32 o37)))

;; H
  (assert (and (= o26 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o27 (num_of_big_int x x_first o26)))

;; H
  (assert (= o39 (oexpon__2 o27 o38)))

;; H
  (assert (= o43 (omultiply o39 o42)))

;; H
  (assert (= o46 (omod o43 o45)))

;; H
  (assert (and (= o24 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert
  (= o25 (num_of_big_int
         (mk___t aux31 (mk (to_rep aux3__first) (to_rep aux3__last)))
         aux3_first o24)))

;; H
  (assert (= o47 (oeq o25 o46)))

;; H
  (assert (and (= o20 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o21 (num_of_big_int m m_first o20)))

;; H
  (assert (and (= o17 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert
  (and (= o16 (base Tuple0))
  (= o16 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))

;; H
  (assert (= o18 (oexpon o16 o17)))

;; H
  (assert (and (= o13 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o14 (num_of_big_int x x_first o13)))

;; H
  (assert (and (= o11 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o12 (num_of_big_int x x_first o11)))

;; H
  (assert (= o15 (omultiply o12 o14)))

;; H
  (assert (= o19 (omultiply o15 o18)))

;; H
  (assert (= o22 (omod o19 o21)))

;; H
  (assert (and (= o9 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert
  (= o10 (num_of_big_int
         (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last)))
         aux2_first o9)))

;; H
  (assert (= o23 (oeq o10 o22)))

;; H
  (assert (= o8 (from_word32 ((_ int2bv 32) 1))))

(assert
;; WP_parameter_def
 ;; File "lsc-bignum.ads", line 141, characters 0-0
  (not (in_range1 (+ l1 1))))
(check-sat)
(exit)
