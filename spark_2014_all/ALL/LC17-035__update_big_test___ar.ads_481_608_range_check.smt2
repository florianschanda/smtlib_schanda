;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort it1 0)

(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (it1 it1) Bool)

(declare-const dummy it1)

(declare-datatypes ((it1__ref 0)) (((mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 1 10)) (in_range temp___expr_152)))

(declare-sort it2 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (it2 it2) Bool)

(declare-const dummy1 it2)

(declare-datatypes ((it2__ref 0)) (((mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))

(define-fun dynamic_invariant1 ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 5 50)) (in_range1 temp___expr_158)))

(declare-sort it3 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (it3 it3) Bool)

(declare-const dummy2 it3)

(declare-datatypes ((it3__ref 0)) (((mk_it3__ref (it3__content it3)))))
(define-fun it3__ref___projection ((a it3__ref)) it3 (it3__content a))

(define-fun dynamic_invariant2 ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= 1 16)) (in_range2 temp___expr_164)))

(declare-sort et1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (et1 et1) Bool)

(declare-const dummy3 et1)

(declare-datatypes ((et1__ref 0)) (((mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(define-fun dynamic_invariant3 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range3 temp___expr_176)))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))

;; slide_eq
  (assert
  (forall ((a (Array Int et1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int et1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int
  Int) (Array Int et1))

;; concat_def
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (et1 Int) (Array Int et1))

;; singleton_def
  (assert
  (forall ((v et1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int)
  (b (Array Int et1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy4 (Array Int et1))

(declare-const value__size Int)

(declare-fun object__size ((Array Int et1)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int et1)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int et1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))

(declare-fun user_eq4 ((Array Int et1) (Array Int et1)) Bool)

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int
  Int) (Array Int (Array Int et1)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int et1)) Int Int
  (Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int et1) Int) (Array Int (Array Int et1)))

;; singleton_def
  (assert
  (forall ((v (Array Int et1)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int et1))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq (select a temp___idx_133) 1 10
                              (select b (+ (- b__first a__first) temp___idx_133))
                              1 10) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq (select a temp___idx_133) 1 10
     (select b (+ (- b__first a__first) temp___idx_133)) 1 10) true))))))))

(declare-const dummy5 (Array Int (Array Int et1)))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int (Array Int et1))) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int (Array Int et1))) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int (Array Int et1))) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert
  (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 ((Array Int (Array Int et1))
  (Array Int (Array Int et1))) Bool)

(declare-datatypes ((map__ref2 0))
(((mk_map__ref2 (map__content2 (Array Int (Array Int (Array Int et1))))))))
(declare-fun slide2 ((Array Int (Array Int (Array Int et1))) Int
  Int) (Array Int (Array Int (Array Int et1))))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1)))))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1)))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int (Array Int (Array Int et1))) Int Int
  (Array Int (Array Int (Array Int et1))) Int
  Int) (Array Int (Array Int (Array Int et1))))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1))))
  (b (Array Int (Array Int (Array Int et1)))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 ((Array Int (Array Int et1))
  Int) (Array Int (Array Int (Array Int et1))))

;; singleton_def
  (assert
  (forall ((v (Array Int (Array Int et1))))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int (Array Int (Array Int et1))))
  (a__first Int) (a__last Int) (b (Array Int (Array Int (Array Int et1))))
  (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (bool_eq1 (select a temp___idx_134) 5 50
                              (select b (+ (- b__first a__first) temp___idx_134))
                              5 50) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1))))
  (b (Array Int (Array Int (Array Int et1)))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (bool_eq1 (select a temp___idx_134) 5 50
     (select b (+ (- b__first a__first) temp___idx_134)) 5 50) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const j Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const k Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-fun temp___1645 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1)) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___1647 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___1648 Int) (temp___1650 Int))
  (forall ((temp___1649 (Array Int (Array Int et1)))
  (temp___1651 (Array Int (Array Int et1))))
  (let ((temp___1646 (temp___1645 temp___1647 temp___1648 temp___1649
                     temp___1650 temp___1651)))
  (forall ((temp___1652 Int))
  (ite (= temp___1652 temp___1650)
  (= (select temp___1646 temp___1652) temp___1651)
  (ite (= temp___1652 temp___1648)
  (= (select temp___1646 temp___1652) temp___1649)
  (= (select temp___1646 temp___1652) (select temp___1647 temp___1652))))))))))

(declare-fun temp___1653 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1655 (Array Int (Array Int et1))))
  (forall ((temp___1656 Int))
  (forall ((temp___1657 (Array Int et1)))
  (let ((temp___1654 (temp___1653 temp___1655 temp___1656 temp___1657)))
  (forall ((temp___1658 Int))
  (ite (= temp___1658 temp___1656)
  (= (select temp___1654 temp___1658) temp___1657)
  (= (select temp___1654 temp___1658) (select temp___1655 temp___1658)))))))))

(declare-fun temp___1660 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1662 (Array Int et1)))
  (forall ((temp___1663 Int) (temp___1664 Int))
  (let ((temp___1661 (temp___1660 temp___1662 temp___1663 temp___1664)))
  (forall ((temp___1665 Int))
  (ite (= temp___1665 temp___1663)
  (= (select temp___1661 temp___1665) (of_rep temp___1664))
  (= (select temp___1661 temp___1665) (select temp___1662 temp___1665))))))))

(declare-fun temp___1668 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1670 (Array Int (Array Int et1))))
  (forall ((temp___1671 Int))
  (forall ((temp___1672 (Array Int et1)))
  (let ((temp___1669 (temp___1668 temp___1670 temp___1671 temp___1672)))
  (forall ((temp___1673 Int))
  (ite (= temp___1673 temp___1671)
  (= (select temp___1669 temp___1673) temp___1672)
  (= (select temp___1669 temp___1673) (select temp___1670 temp___1673)))))))))

(declare-fun temp___1675 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1677 (Array Int et1)))
  (forall ((temp___1678 Int) (temp___1679 Int))
  (let ((temp___1676 (temp___1675 temp___1677 temp___1678 temp___1679)))
  (forall ((temp___1680 Int))
  (ite (= temp___1680 temp___1678)
  (= (select temp___1676 temp___1680) (of_rep temp___1679))
  (= (select temp___1676 temp___1680) (select temp___1677 temp___1680))))))))

(declare-fun temp___1684 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1)) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___1686 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___1687 Int) (temp___1689 Int))
  (forall ((temp___1688 (Array Int (Array Int et1)))
  (temp___1690 (Array Int (Array Int et1))))
  (let ((temp___1685 (temp___1684 temp___1686 temp___1687 temp___1688
                     temp___1689 temp___1690)))
  (forall ((temp___1691 Int))
  (ite (= temp___1691 temp___1689)
  (= (select temp___1685 temp___1691) temp___1690)
  (ite (= temp___1691 temp___1687)
  (= (select temp___1685 temp___1691) temp___1688)
  (= (select temp___1685 temp___1691) (select temp___1686 temp___1691))))))))))

(declare-fun temp___1692 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1694 (Array Int (Array Int et1))))
  (forall ((temp___1695 Int))
  (forall ((temp___1696 (Array Int et1)))
  (let ((temp___1693 (temp___1692 temp___1694 temp___1695 temp___1696)))
  (forall ((temp___1697 Int))
  (ite (= temp___1697 temp___1695)
  (= (select temp___1693 temp___1697) temp___1696)
  (= (select temp___1693 temp___1697) (select temp___1694 temp___1697)))))))))

(declare-fun temp___1699 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1701 (Array Int et1)))
  (forall ((temp___1702 Int) (temp___1703 Int))
  (let ((temp___1700 (temp___1699 temp___1701 temp___1702 temp___1703)))
  (forall ((temp___1704 Int))
  (ite (= temp___1704 temp___1702)
  (= (select temp___1700 temp___1704) (of_rep temp___1703))
  (= (select temp___1700 temp___1704) (select temp___1701 temp___1704))))))))

(declare-fun temp___1707 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1709 (Array Int (Array Int et1))))
  (forall ((temp___1710 Int))
  (forall ((temp___1711 (Array Int et1)))
  (let ((temp___1708 (temp___1707 temp___1709 temp___1710 temp___1711)))
  (forall ((temp___1712 Int))
  (ite (= temp___1712 temp___1710)
  (= (select temp___1708 temp___1712) temp___1711)
  (= (select temp___1708 temp___1712) (select temp___1709 temp___1712)))))))))

(declare-fun temp___1714 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1716 (Array Int et1)))
  (forall ((temp___1717 Int) (temp___1718 Int))
  (let ((temp___1715 (temp___1714 temp___1716 temp___1717 temp___1718)))
  (forall ((temp___1719 Int))
  (ite (= temp___1719 temp___1717)
  (= (select temp___1715 temp___1719) (of_rep temp___1718))
  (= (select temp___1715 temp___1719) (select temp___1716 temp___1719))))))))

(declare-fun temp___1723 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1)) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___1725 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___1726 Int) (temp___1728 Int))
  (forall ((temp___1727 (Array Int (Array Int et1)))
  (temp___1729 (Array Int (Array Int et1))))
  (let ((temp___1724 (temp___1723 temp___1725 temp___1726 temp___1727
                     temp___1728 temp___1729)))
  (forall ((temp___1730 Int))
  (ite (= temp___1730 temp___1728)
  (= (select temp___1724 temp___1730) temp___1729)
  (ite (= temp___1730 temp___1726)
  (= (select temp___1724 temp___1730) temp___1727)
  (= (select temp___1724 temp___1730) (select temp___1725 temp___1730))))))))))

(declare-fun temp___1731 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1733 (Array Int (Array Int et1))))
  (forall ((temp___1734 Int))
  (forall ((temp___1735 (Array Int et1)))
  (let ((temp___1732 (temp___1731 temp___1733 temp___1734 temp___1735)))
  (forall ((temp___1736 Int))
  (ite (= temp___1736 temp___1734)
  (= (select temp___1732 temp___1736) temp___1735)
  (= (select temp___1732 temp___1736) (select temp___1733 temp___1736)))))))))

(declare-fun temp___1738 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1740 (Array Int et1)))
  (forall ((temp___1741 Int) (temp___1742 Int))
  (let ((temp___1739 (temp___1738 temp___1740 temp___1741 temp___1742)))
  (forall ((temp___1743 Int))
  (ite (= temp___1743 temp___1741)
  (= (select temp___1739 temp___1743) (of_rep temp___1742))
  (= (select temp___1739 temp___1743) (select temp___1740 temp___1743))))))))

(declare-fun temp___1746 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1748 (Array Int (Array Int et1))))
  (forall ((temp___1749 Int))
  (forall ((temp___1750 (Array Int et1)))
  (let ((temp___1747 (temp___1746 temp___1748 temp___1749 temp___1750)))
  (forall ((temp___1751 Int))
  (ite (= temp___1751 temp___1749)
  (= (select temp___1747 temp___1751) temp___1750)
  (= (select temp___1747 temp___1751) (select temp___1748 temp___1751)))))))))

(declare-fun temp___1753 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1755 (Array Int et1)))
  (forall ((temp___1756 Int) (temp___1757 Int))
  (let ((temp___1754 (temp___1753 temp___1755 temp___1756 temp___1757)))
  (forall ((temp___1758 Int))
  (ite (= temp___1758 temp___1756)
  (= (select temp___1754 temp___1758) (of_rep temp___1757))
  (= (select temp___1754 temp___1758) (select temp___1755 temp___1758))))))))

(declare-fun temp___1762 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1)) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___1764 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___1765 Int) (temp___1767 Int))
  (forall ((temp___1766 (Array Int (Array Int et1)))
  (temp___1768 (Array Int (Array Int et1))))
  (let ((temp___1763 (temp___1762 temp___1764 temp___1765 temp___1766
                     temp___1767 temp___1768)))
  (forall ((temp___1769 Int))
  (ite (= temp___1769 temp___1767)
  (= (select temp___1763 temp___1769) temp___1768)
  (ite (= temp___1769 temp___1765)
  (= (select temp___1763 temp___1769) temp___1766)
  (= (select temp___1763 temp___1769) (select temp___1764 temp___1769))))))))))

(declare-fun temp___1770 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1772 (Array Int (Array Int et1))))
  (forall ((temp___1773 Int))
  (forall ((temp___1774 (Array Int et1)))
  (let ((temp___1771 (temp___1770 temp___1772 temp___1773 temp___1774)))
  (forall ((temp___1775 Int))
  (ite (= temp___1775 temp___1773)
  (= (select temp___1771 temp___1775) temp___1774)
  (= (select temp___1771 temp___1775) (select temp___1772 temp___1775)))))))))

(declare-fun temp___1777 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1779 (Array Int et1)))
  (forall ((temp___1780 Int) (temp___1781 Int))
  (let ((temp___1778 (temp___1777 temp___1779 temp___1780 temp___1781)))
  (forall ((temp___1782 Int))
  (ite (= temp___1782 temp___1780)
  (= (select temp___1778 temp___1782) (of_rep temp___1781))
  (= (select temp___1778 temp___1782) (select temp___1779 temp___1782))))))))

(declare-fun temp___1785 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1787 (Array Int (Array Int et1))))
  (forall ((temp___1788 Int))
  (forall ((temp___1789 (Array Int et1)))
  (let ((temp___1786 (temp___1785 temp___1787 temp___1788 temp___1789)))
  (forall ((temp___1790 Int))
  (ite (= temp___1790 temp___1788)
  (= (select temp___1786 temp___1790) temp___1789)
  (= (select temp___1786 temp___1790) (select temp___1787 temp___1790)))))))))

(declare-fun temp___1792 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1794 (Array Int et1)))
  (forall ((temp___1795 Int) (temp___1796 Int))
  (let ((temp___1793 (temp___1792 temp___1794 temp___1795 temp___1796)))
  (forall ((temp___1797 Int))
  (ite (= temp___1797 temp___1795)
  (= (select temp___1793 temp___1797) (of_rep temp___1796))
  (= (select temp___1793 temp___1797) (select temp___1794 temp___1797))))))))

(declare-fun temp___5321 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___5323 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___5324 Int))
  (forall ((temp___5325 (Array Int (Array Int et1))))
  (let ((temp___5322 (temp___5321 temp___5323 temp___5324 temp___5325)))
  (forall ((temp___5326 Int))
  (ite (= temp___5326 temp___5324)
  (= (select temp___5322 temp___5326) temp___5325)
  (= (select temp___5322 temp___5326) (select temp___5323 temp___5326)))))))))

(declare-fun temp___5327 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___5329 (Array Int (Array Int et1))))
  (forall ((temp___5330 Int))
  (forall ((temp___5331 (Array Int et1)))
  (let ((temp___5328 (temp___5327 temp___5329 temp___5330 temp___5331)))
  (forall ((temp___5332 Int))
  (ite (= temp___5332 temp___5330)
  (= (select temp___5328 temp___5332) temp___5331)
  (= (select temp___5328 temp___5332) (select temp___5329 temp___5332)))))))))

(declare-fun temp___5333 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___5335 (Array Int et1)))
  (forall ((temp___5336 Int) (temp___5337 Int))
  (let ((temp___5334 (temp___5333 temp___5335 temp___5336 temp___5337)))
  (forall ((temp___5338 Int))
  (ite (= temp___5338 temp___5336)
  (= (select temp___5334 temp___5338) (of_rep temp___5337))
  (= (select temp___5334 temp___5338) (select temp___5335 temp___5338))))))))

(declare-const a (Array Int (Array Int (Array Int et1))))

(declare-const k_next Int)

(declare-const f Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 et1)

(declare-const o3 (Array Int et1))

(declare-const o4 (Array Int (Array Int et1)))

(declare-const o5 (Array Int (Array Int (Array Int et1))))

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const temp___5371 (Array Int (Array Int et1)))

(declare-const o8 (Array Int et1))

(declare-const o9 (Array Int et1))

(declare-const o10 (Array Int (Array Int et1)))

(declare-const o11 (Array Int (Array Int et1)))

(declare-const o12 Int)

(declare-const temp___5372 (Array Int (Array Int (Array Int et1))))

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const temp___5361 (Array Int (Array Int et1)))

(declare-const o15 Int)

(declare-const o16 (Array Int et1))

(declare-const o17 (Array Int et1))

(declare-const o18 (Array Int (Array Int et1)))

(declare-const o19 (Array Int (Array Int et1)))

(declare-const o20 Int)

(declare-const temp___5362 (Array Int (Array Int (Array Int et1))))

(declare-const t (Array Int (Array Int (Array Int et1))))

(declare-const a1 (Array Int (Array Int (Array Int et1))))

(declare-const result Int)

(declare-const k_next1 Int)

(declare-const result1 Int)

(declare-const k_next2 Int)

(declare-const result2 Int)

(declare-const f1 Int)

(declare-const result3 Int)

(declare-const f2 Int)

(declare-const result4 (Array Int (Array Int (Array Int et1))))

(declare-const a2 (Array Int (Array Int (Array Int et1))))

(declare-const a3 (Array Int (Array Int (Array Int et1))))

(declare-const k_next3 Int)

(declare-const f3 Int)

(declare-const t1 (Array Int (Array Int (Array Int et1))))

(declare-const a4 (Array Int (Array Int (Array Int et1))))

(declare-const k_next4 Int)

(declare-const f4 Int)

(declare-const t2 (Array Int (Array Int (Array Int et1))))

(declare-const result5 Bool)

(declare-const result6 Bool)

(define-fun f5 () int__ref (mk_int__ref f))

(define-fun k_next5 () int__ref (mk_int__ref k_next))

;; H
  (assert (in_range i))

;; H
  (assert (in_range1 j))

;; H
  (assert (in_range2 k))

;; H
  (assert (in_range3 e))

;; H
  (assert (=> (<= 1 16) (in_range2 k_next)))

;; H
  (assert (=> (<= 0 99) (in_range3 f)))

;; H
  (assert
  (= (bool_eq2 a1 1 16
     (temp___5321 t k
     (temp___5327 (select t k) j (temp___5333 (select (select t k) j) i e)))
     1 16) true))

;; H
  (assert (=> (= k 16) (= (mk_int__ref result) k_next5)))

;; H
  (assert (=> (= k 16) (= k_next1 1)))

;; H
  (assert (=> (not (= k 16)) (and (= o (+ k 1)) (in_range2 (+ k 1)))))

;; H
  (assert (=> (not (= k 16)) (= (mk_int__ref result1) k_next5)))

;; H
  (assert (=> (not (= k 16)) (= k_next2 o)))

;; H
  (assert (=> (not (= k 16)) (= k_next1 k_next2)))

;; H
  (assert (=> (= e 0) (= (mk_int__ref result2) f5)))

;; H
  (assert (=> (= e 0) (= f1 99)))

;; H
  (assert (=> (not (= e 0)) (and (= o1 (- e 1)) (in_range3 (- e 1)))))

;; H
  (assert (=> (not (= e 0)) (= (mk_int__ref result3) f5)))

;; H
  (assert (=> (not (= e 0)) (= f2 o1)))

;; H
  (assert (=> (not (= e 0)) (= f1 f2)))

;; H
  (assert (= (to_rep o2) f1))

;; H
  (assert (= o3 (store (select (select a1 k_next1) j) i o2)))

;; H
  (assert (= o4 (store (select a1 k_next1) j o3)))

;; H
  (assert (= o5 (store a1 k_next1 o4)))

;; H
  (assert (= a1 result4))

;; H
  (assert (= a2 o5))

;; H
  (assert (= t t1))

;; H
  (assert (= f1 f3))

;; H
  (assert (= k_next1 k_next3))

;; H
  (assert (= a2 a3))

;; H
  (assert (= t2 t))

;; H
  (assert (= f4 f1))

;; H
  (assert (= k_next4 k_next1))

;; H
  (assert (= a4 a2))

;; H
  (assert
  (=> (< k 16) (=> (< 0 e) (and (= o15 (- e 1)) (in_range3 (- e 1))))))

;; H
  (assert (=> (< k 16) (=> (< 0 e) (and (<= 1 (+ k 1)) (<= (+ k 1) 16)))))

;; H
  (assert (=> (< k 16) (=> (< 0 e) (= o14 (+ k 1)))))

;; H
  (assert (=> (< k 16) (=> (< 0 e) (= temp___5361 (select a o14)))))

;; H
  (assert (=> (< k 16) (=> (< 0 e) (= o16 (select temp___5361 j)))))

;; H
  (assert (=> (< k 16) (=> (< 0 e) (= o17 (temp___1675 o16 i o15)))))

;; H
  (assert (=> (< k 16) (=> (< 0 e) (and (<= 1 (+ k 1)) (<= (+ k 1) 16)))))

;; H
  (assert (=> (< k 16) (=> (< 0 e) (= o13 (+ k 1)))))

;; H
  (assert (=> (< k 16) (=> (< 0 e) (= o18 (select a o13)))))

;; H
  (assert (=> (< k 16) (=> (< 0 e) (= o19 (temp___1668 o18 j o17)))))

;; H
  (assert
  (=> (< k 16) (=> (< 0 e) (and (= o20 (+ k 1)) (in_range2 (+ k 1))))))

;; H
  (assert
  (=> (< k 16)
  (=> (< 0 e)
  (= temp___5362 (temp___1645 a k
                 (temp___1653 (select a k) j
                 (temp___1660 (select (select a k) j) i e)) o20 o19)))))

;; H
  (assert
  (=> (< k 16) (=> (< 0 e) (= result6 (bool_eq2 a3 1 16 temp___5362 1 16)))))

;; H
  (assert (=> (< k 16) (=> (not (< 0 e)) (= result6 false))))

;; H
  (assert (=> (< k 16) (=> (= result6 true) (= result5 true))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true))
  (=> (= e 0) (and (<= 1 (+ k 1)) (<= (+ k 1) 16))))))

;; H
  (assert
  (=> (< k 16) (=> (not (= result6 true)) (=> (= e 0) (= o7 (+ k 1))))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true)) (=> (= e 0) (= temp___5371 (select a o7))))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true)) (=> (= e 0) (= o8 (select temp___5371 j))))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true)) (=> (= e 0) (= o9 (temp___1714 o8 i 99))))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true))
  (=> (= e 0) (and (<= 1 (+ k 1)) (<= (+ k 1) 16))))))

;; H
  (assert
  (=> (< k 16) (=> (not (= result6 true)) (=> (= e 0) (= o6 (+ k 1))))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true)) (=> (= e 0) (= o10 (select a o6))))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true)) (=> (= e 0) (= o11 (temp___1707 o10 j o9))))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true))
  (=> (= e 0) (and (= o12 (+ k 1)) (in_range2 (+ k 1)))))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true))
  (=> (= e 0)
  (= temp___5372 (temp___1684 a k
                 (temp___1692 (select a k) j
                 (temp___1699 (select (select a k) j) i e)) o12 o11))))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true))
  (=> (= e 0) (= result5 (bool_eq2 a3 1 16 temp___5372 1 16))))))

;; H
  (assert
  (=> (< k 16)
  (=> (not (= result6 true)) (=> (not (= e 0)) (= result5 false)))))

;; H
  (assert (=> (not (< k 16)) (= result5 false)))

;; H
  (assert (not (= result5 true)))

;; H
  (assert (= k 16))

;; H
  (assert (< 0 e))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 476, characters 0-0
  (not (in_range3 (- e 1))))
(check-sat)
(exit)
