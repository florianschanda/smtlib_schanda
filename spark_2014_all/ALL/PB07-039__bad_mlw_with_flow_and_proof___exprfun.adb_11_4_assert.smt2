;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort t1 0)

(declare-fun user_eq (t1 t1) Bool)

(declare-const value__size Int)

(declare-fun object__size (t1) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (t1) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a t1)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a t1)) (<= 0 (object__alignment a))))

(declare-const dummy t1)

(declare-datatypes ((t1__ref 0)) (((mk_t1__ref (t1__content t1)))))
(define-fun t1__ref___projection ((a t1__ref)) t1 (t1__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun prim_func (t1) t1)

(declare-fun prim_func__function_guard (t1 t1) Bool)

;; prim_func__post_axiom
  (assert true)

;; prim_func__def_axiom
  (assert
  (forall ((exprfun__t1_var t1))
  (! (= (prim_func exprfun__t1_var) exprfun__t1_var) :pattern ((prim_func
                                                               exprfun__t1_var)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const t1_var t1)

(declare-const x t1)

(declare-const o t1)

(declare-const result t1)

(declare-const x1 t1)

(assert
;; WP_parameter_def
 ;; File "exprfun.adb", line 5, characters 0-0
  (not
  (not
  (and (and (= o (prim_func t1_var)) (= o t1_var))
  (and (= result x) (= x1 o))))))
(check-sat)
(exit)
