;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq2 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun dummy4 () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun endoffile (us_rep) Bool)

(declare-fun endoffile__function_guard (Bool us_rep) Bool)

(declare-fun endofline (us_rep) Bool)

(declare-fun endofline__function_guard (Bool us_rep) Bool)

(declare-fun privatekeypresent (us_private) Bool)

(declare-fun privatekeypresent__function_guard (Bool us_private) Bool)

;; privatekeypresent__post_axiom
  (assert true)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun makedescription (us_t Int) (Array Int character))

(declare-fun makedescription__function_guard ((Array Int character) us_t
  Int) Bool)

;; makedescription__post_axiom
  (assert true)

(declare-fun temp___String_Literal_1046 (tuple0) (Array Int character))

;; temp___String_Literal_1046__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 6)) 110))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 7)) 114))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 8)) 111))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 9)) 108))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 10)) 109))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 11)) 101))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 12)) 110))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 13)) 116))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 15)) 102))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 16)) 105))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 17)) 108))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 18)) 101))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 20)) 105))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 21)) 115))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 23)) 99))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 24)) 111))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 25)) 114))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 26)) 114))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 27)) 117))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 28)) 112))
     (= (to_rep (select (temp___String_Literal_1046 us_void_param) 29)) 116)) :pattern (
  (temp___String_Literal_1046 us_void_param)) )))

(declare-fun temp___String_Literal_1051 (tuple0) (Array Int character))

;; temp___String_Literal_1051__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 6)) 110))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 7)) 114))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 8)) 111))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 9)) 108))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 10)) 109))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 11)) 101))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 12)) 110))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 13)) 116))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 15)) 102))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 16)) 105))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 17)) 108))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 18)) 101))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 20)) 105))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 21)) 115))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 23)) 99))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 24)) 111))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 25)) 114))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 26)) 114))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 27)) 117))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 28)) 112))
     (= (to_rep (select (temp___String_Literal_1051 us_void_param) 29)) 116)) :pattern (
  (temp___String_Literal_1051 us_void_param)) )))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun filestate () us_private)

(declare-fun state () us_private)

(declare-fun state1 () us_private)

(declare-fun store1 () us_private)

(declare-fun description () (Array Int character))

(declare-fun certno () Int)

(declare-fun o () (Array Int character))

(declare-fun o1 () Int)

(declare-fun o2 () Bool)

(declare-fun o3 () Bool)

(declare-fun temp___1050 () Int)

(declare-fun temp___1049 () (Array Int character))

(declare-fun temp___1048 () Bool)

(declare-fun temp___1047 () us_rep)

(declare-fun o4 () Bool)

(declare-fun o5 () Int)

(declare-fun o6 () Bool)

(declare-fun o7 () Bool)

(declare-fun o8 () Bool)

(declare-fun o9 () (Array Int character))

(declare-fun filestate1 () us_private)

(declare-fun state2 () us_private)

(declare-fun state3 () us_private)

(declare-fun store2 () us_private)

(declare-fun result () Int)

(declare-fun certno1 () Int)

(declare-fun thefile () us_rep)

(declare-fun dataok () Bool)

(declare-fun filestate2 () us_private)

(declare-fun state4 () us_private)

(declare-fun state5 () us_private)

(declare-fun store3 () us_private)

(declare-fun thefile1 () us_rep)

(declare-fun dataok1 () Bool)

(declare-fun description1 () (Array Int character))

(declare-fun result1 () (Array Int character))

(declare-fun description2 () (Array Int character))

(declare-fun result2 () Int)

(declare-fun certno2 () Int)

(declare-fun filestate3 () us_private)

(declare-fun state6 () us_private)

(declare-fun state7 () us_private)

(declare-fun store4 () us_private)

(declare-fun thefile2 () us_rep)

(declare-fun dataok2 () Bool)

(declare-fun description3 () (Array Int character))

(declare-fun result3 () Bool)

(declare-fun filestate4 () us_private)

(declare-fun state8 () us_private)

(declare-fun state9 () us_private)

(declare-fun store5 () us_private)

(declare-fun thefile3 () us_rep)

(declare-fun dataok3 () Bool)

(declare-fun description4 () (Array Int character))

(declare-fun certno3 () Int)

(declare-fun result4 () Bool)

(declare-fun result5 () Int)

(declare-fun certno4 () Int)

(declare-fun filestate5 () us_private)

(declare-fun state10 () us_private)

(declare-fun state11 () us_private)

(declare-fun store6 () us_private)

(declare-fun thefile4 () us_rep)

(declare-fun dataok4 () Bool)

(declare-fun description5 () (Array Int character))

(declare-fun thefile5 () us_rep)

(declare-fun result6 () Bool)

(declare-fun filestate6 () us_private__ref)

(declare-fun state12 () us_private__ref)

(declare-fun state13 () us_private__ref)

(declare-fun store7 () us_private__ref)

(declare-fun thefile6 () t__ref)

(declare-fun dataok5 () bool__ref)

(declare-fun description6 () map__ref)

(declare-fun certno5 () int__ref)

(declare-fun filestate7 () us_private)

(declare-fun state14 () us_private)

(declare-fun state15 () us_private)

(declare-fun store8 () us_private)

(declare-fun thefile7 () us_rep)

(declare-fun dataok6 () Bool)

(declare-fun description7 () (Array Int character))

(declare-fun certno6 () Int)

(declare-fun filestate8 () us_private__ref)

(declare-fun state16 () us_private__ref)

(declare-fun state17 () us_private__ref)

(declare-fun store9 () us_private__ref)

(declare-fun thefile8 () t__ref)

(declare-fun dataok7 () bool__ref)

(declare-fun description8 () map__ref)

(declare-fun certno7 () int__ref)

(declare-fun filestate9 () us_private)

(declare-fun state18 () us_private)

(declare-fun state19 () us_private)

(declare-fun store10 () us_private)

(declare-fun thefile9 () us_rep)

(declare-fun dataok8 () Bool)

(declare-fun description9 () (Array Int character))

(declare-fun certno8 () Int)

(declare-fun thefile10 () us_rep)

(declare-fun closedok () Bool)

(declare-fun result7 () map__ref)

(declare-fun description10 () (Array Int character))

(declare-fun result8 () bool__ref)

(declare-fun dataok9 () Bool)

(declare-fun dataok10 () bool__ref)

(declare-fun description11 () map__ref)

(declare-fun dataok11 () Bool)

(declare-fun description12 () (Array Int character))

(declare-fun state20 () us_private)

(declare-fun store11 () us_private)

(declare-fun state21 () us_private__ref)

(declare-fun store12 () us_private__ref)

(declare-fun state22 () us_private)

(declare-fun store13 () us_private)

(declare-fun filestate10 () us_private__ref)

(declare-fun state23 () us_private__ref)

(declare-fun state24 () us_private__ref)

(declare-fun store14 () us_private__ref)

(declare-fun thefile11 () t__ref)

(declare-fun dataok12 () bool__ref)

(declare-fun description13 () map__ref)

(declare-fun certno9 () int__ref)

(declare-fun closedok1 () bool__ref)

(declare-fun filestate11 () us_private)

(declare-fun state25 () us_private)

(declare-fun state26 () us_private)

(declare-fun store15 () us_private)

(declare-fun thefile12 () us_rep)

(declare-fun dataok13 () Bool)

(declare-fun description14 () (Array Int character))

(declare-fun certno10 () Int)

(declare-fun closedok2 () Bool)

;; H
  (assert (not (= (privatekeypresent state1) true)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref certno)))

;; H
  (assert (= certno1 1))

;; H
  (assert (in_range2 certno1))

;; H
  (assert
  (=> (= dataok true)
  (and
  (<= (to_int1 (ite (= (of_int 0) true) dataok1 false)) (to_int1
                                                        (privatekeypresent
                                                        state5)))
  (<= (to_int1
      (ite (= (ite (= (of_int 0) true) dataok1 false) false) true false))
  (to_int1
  (= (to_int1 (privatekeypresent state5)) (to_int1
                                          (privatekeypresent state1))))))))

;; H
  (assert
  (=> (not (= dataok true))
  (= o (makedescription
       (mk___t (temp___String_Literal_1046 Tuple0) (mk 1 29)) certno1))))

;; H
  (assert
  (=> (not (= dataok true))
  (= (mk_map__ref result1) (mk_map__ref description))))

;; H
  (assert (=> (not (= dataok true)) (= description2 o)))

;; H
  (assert (=> (not (= dataok true)) (= description1 description2)))

;; H
  (assert (=> (not (= dataok true)) (= dataok1 dataok)))

;; H
  (assert (=> (not (= dataok true)) (= thefile1 thefile)))

;; H
  (assert (=> (not (= dataok true)) (= store3 store1)))

;; H
  (assert (=> (not (= dataok true)) (= state5 state1)))

;; H
  (assert (=> (not (= dataok true)) (= state4 state)))

;; H
  (assert (=> (not (= dataok true)) (= filestate2 filestate)))

;; H
  (assert (=> (not (= dataok true)) (= description1 description2)))

;; H
  (assert (=> (not (= dataok true)) (= dataok1 dataok)))

;; H
  (assert (=> (not (= dataok true)) (= thefile1 thefile)))

;; H
  (assert (=> (not (= dataok true)) (= store3 store2)))

;; H
  (assert (=> (not (= dataok true)) (= state5 state3)))

;; H
  (assert (=> (not (= dataok true)) (= state4 state2)))

;; H
  (assert (=> (not (= dataok true)) (= filestate2 filestate1)))

;; H
  (assert
  (=> (= dataok1 true) (and (= o1 (+ certno1 1)) (in_range1 (+ certno1 1)))))

;; H
  (assert (=> (= dataok1 true) (= certno1 result2)))

;; H
  (assert (=> (= dataok1 true) (= certno2 o1)))

;; H
  (assert
  (=> (= dataok1 true)
  (and
  (<= (to_int1 (ite (= (of_int 1) true) dataok2 false)) (to_int1
                                                        (privatekeypresent
                                                        state7)))
  (<= (to_int1
      (ite (= (ite (= (of_int 1) true) dataok2 false) false) true false))
  (to_int1
  (= (to_int1 (privatekeypresent state7)) (to_int1
                                          (privatekeypresent state5))))))))

;; H
  (assert (=> (not (= dataok1 true)) (= certno2 certno1)))

;; H
  (assert (=> (not (= dataok1 true)) (= description3 description1)))

;; H
  (assert (=> (not (= dataok1 true)) (= dataok2 dataok1)))

;; H
  (assert (=> (not (= dataok1 true)) (= thefile2 thefile1)))

;; H
  (assert (=> (not (= dataok1 true)) (= store4 store3)))

;; H
  (assert (=> (not (= dataok1 true)) (= state7 state5)))

;; H
  (assert (=> (not (= dataok1 true)) (= state6 state4)))

;; H
  (assert (=> (not (= dataok1 true)) (= filestate3 filestate2)))

;; H
  (assert (= o2 (endoffile thefile2)))

;; H
  (assert (= o3 (ite (not (= o2 true)) true false)))

;; H
  (assert (= result3 (ite (= o3 true) dataok2 false)))

;; H
  (assert (=> (= result3 true) (= temp___1050 certno2)))

;; H
  (assert (=> (= result3 true) (= temp___1049 description3)))

;; H
  (assert (=> (= result3 true) (= temp___1048 dataok2)))

;; H
  (assert (=> (= result3 true) (= temp___1047 thefile2)))

;; H
  (assert
  (=> (= result3 true)
  (and (=> (<= 1 2147483647) (in_range2 certno3))
  (and (not (= (endoffile thefile3) true)) (= dataok3 true)))))

;; H
  (assert (=> (= result3 true) (= o4 (endofline thefile3))))

;; H
  (assert
  (=> (= result3 true) (= result4 (ite (not (= o4 true)) true false))))

;; H
  (assert
  (=> (= result3 true)
  (=> (= result4 true) (and (= o5 (+ certno3 1)) (in_range1 (+ certno3 1))))))

;; H
  (assert (=> (= result3 true) (=> (= result4 true) (= result5 certno3))))

;; H
  (assert (=> (= result3 true) (=> (= result4 true) (= certno4 o5))))

;; H
  (assert
  (=> (= result3 true)
  (=> (= result4 true)
  (and
  (<= (to_int1 (ite (= (of_int 0) true) dataok4 false)) (to_int1
                                                        (privatekeypresent
                                                        state11)))
  (<= (to_int1
      (ite (= (ite (= (of_int 0) true) dataok4 false) false) true false))
  (to_int1
  (= (to_int1 (privatekeypresent state11)) (to_int1
                                           (privatekeypresent state9)))))))))

;; H
  (assert
  (=> (= result3 true) (=> (not (= result4 true)) (= certno4 certno3))))

;; H
  (assert
  (=> (= result3 true)
  (=> (not (= result4 true)) (= description5 description4))))

;; H
  (assert
  (=> (= result3 true) (=> (not (= result4 true)) (= dataok4 dataok3))))

;; H
  (assert
  (=> (= result3 true) (=> (not (= result4 true)) (= thefile4 thefile5))))

;; H
  (assert
  (=> (= result3 true) (=> (not (= result4 true)) (= store6 store5))))

;; H
  (assert
  (=> (= result3 true) (=> (not (= result4 true)) (= state11 state9))))

;; H
  (assert
  (=> (= result3 true) (=> (not (= result4 true)) (= state10 state8))))

;; H
  (assert
  (=> (= result3 true) (=> (not (= result4 true)) (= filestate5 filestate4))))

;; H
  (assert (=> (= result3 true) (= o6 (endoffile thefile4))))

;; H
  (assert (=> (= result3 true) (= o7 (ite (not (= o6 true)) true false))))

;; H
  (assert (=> (= result3 true) (= o8 (ite (= o7 true) dataok4 false))))

;; H
  (assert
  (=> (= result3 true) (= result6 (ite (not (= o8 true)) true false))))

;; H
  (assert (=> (= result3 true) (= result6 true)))

;; H
  (assert (=> (= result3 true) (= certno5 (mk_int__ref certno4))))

;; H
  (assert (=> (= result3 true) (= description6 (mk_map__ref description5))))

;; H
  (assert (=> (= result3 true) (= dataok5 (mk_bool__ref dataok4))))

;; H
  (assert (=> (= result3 true) (= thefile6 (mk_t__ref thefile4))))

;; H
  (assert (=> (= result3 true) (= store7 (mk___private__ref store6))))

;; H
  (assert (=> (= result3 true) (= state13 (mk___private__ref state11))))

;; H
  (assert (=> (= result3 true) (= state12 (mk___private__ref state10))))

;; H
  (assert
  (=> (= result3 true) (= filestate6 (mk___private__ref filestate5))))

;; H
  (assert (=> (= result3 true) (= certno6 certno4)))

;; H
  (assert (=> (= result3 true) (= description7 description5)))

;; H
  (assert (=> (= result3 true) (= dataok6 dataok4)))

;; H
  (assert (=> (= result3 true) (= thefile7 thefile4)))

;; H
  (assert (=> (= result3 true) (= store8 store6)))

;; H
  (assert (=> (= result3 true) (= state15 state11)))

;; H
  (assert (=> (= result3 true) (= state14 state10)))

;; H
  (assert (=> (= result3 true) (= filestate7 filestate5)))

;; H
  (assert (=> (= result3 true) (= certno7 certno5)))

;; H
  (assert (=> (= result3 true) (= description8 description6)))

;; H
  (assert (=> (= result3 true) (= dataok7 dataok5)))

;; H
  (assert (=> (= result3 true) (= thefile8 thefile6)))

;; H
  (assert (=> (= result3 true) (= store9 store7)))

;; H
  (assert (=> (= result3 true) (= state17 state13)))

;; H
  (assert (=> (= result3 true) (= state16 state12)))

;; H
  (assert (=> (= result3 true) (= filestate8 filestate6)))

;; H
  (assert (=> (= result3 true) (= certno8 certno6)))

;; H
  (assert (=> (= result3 true) (= description9 description7)))

;; H
  (assert (=> (= result3 true) (= dataok8 dataok6)))

;; H
  (assert (=> (= result3 true) (= thefile9 thefile7)))

;; H
  (assert (=> (= result3 true) (= store10 store8)))

;; H
  (assert (=> (= result3 true) (= state19 state15)))

;; H
  (assert (=> (= result3 true) (= state18 state14)))

;; H
  (assert (=> (= result3 true) (= filestate9 filestate7)))

;; H
  (assert (=> (not (= result3 true)) (= certno7 (mk_int__ref certno2))))

;; H
  (assert
  (=> (not (= result3 true)) (= description8 (mk_map__ref description3))))

;; H
  (assert (=> (not (= result3 true)) (= dataok7 (mk_bool__ref dataok2))))

;; H
  (assert (=> (not (= result3 true)) (= thefile8 (mk_t__ref thefile2))))

;; H
  (assert (=> (not (= result3 true)) (= store9 (mk___private__ref store4))))

;; H
  (assert (=> (not (= result3 true)) (= state17 (mk___private__ref state7))))

;; H
  (assert (=> (not (= result3 true)) (= state16 (mk___private__ref state6))))

;; H
  (assert
  (=> (not (= result3 true)) (= filestate8 (mk___private__ref filestate3))))

;; H
  (assert (=> (not (= result3 true)) (= certno8 certno2)))

;; H
  (assert (=> (not (= result3 true)) (= description9 description3)))

;; H
  (assert (=> (not (= result3 true)) (= dataok8 dataok2)))

;; H
  (assert (=> (not (= result3 true)) (= thefile9 thefile2)))

;; H
  (assert (=> (not (= result3 true)) (= store10 store4)))

;; H
  (assert (=> (not (= result3 true)) (= state19 state7)))

;; H
  (assert (=> (not (= result3 true)) (= state18 state6)))

;; H
  (assert (=> (not (= result3 true)) (= filestate9 filestate3)))

;; H
  (assert
  (=> (not (= closedok true))
  (= o9 (makedescription
        (mk___t (temp___String_Literal_1051 Tuple0) (mk 1 29))
        (int__content certno7)))))

;; H
  (assert (=> (not (= closedok true)) (= result7 description8)))

;; H
  (assert (=> (not (= closedok true)) (= description10 o9)))

;; H
  (assert (=> (not (= closedok true)) (= result8 dataok7)))

;; H
  (assert (=> (not (= closedok true)) (= dataok9 (of_int 0))))

;; H
  (assert
  (=> (not (= closedok true)) (= description11 (mk_map__ref description10))))

;; H
  (assert (=> (not (= closedok true)) (= dataok10 (mk_bool__ref dataok9))))

;; H
  (assert (=> (not (= closedok true)) (= description12 description10)))

;; H
  (assert (=> (not (= closedok true)) (= dataok11 dataok9)))

;; H
  (assert (=> (not (not (= closedok true))) (= description11 description8)))

;; H
  (assert (=> (not (not (= closedok true))) (= dataok10 dataok7)))

;; H
  (assert (=> (not (not (= closedok true))) (= description12 description9)))

;; H
  (assert (=> (not (not (= closedok true))) (= dataok11 dataok8)))

;; H
  (assert
  (=> (not (= (bool__content dataok10) true))
  (not (= (privatekeypresent state20) true))))

;; H
  (assert
  (=> (not (= (bool__content dataok10) true))
  (= store12 (mk___private__ref store11))))

;; H
  (assert
  (=> (not (= (bool__content dataok10) true))
  (= state21 (mk___private__ref state20))))

;; H
  (assert (=> (not (= (bool__content dataok10) true)) (= store13 store11)))

;; H
  (assert (=> (not (= (bool__content dataok10) true)) (= state22 state20)))

;; H
  (assert
  (=> (not (not (= (bool__content dataok10) true))) (= store12 store9)))

;; H
  (assert
  (=> (not (not (= (bool__content dataok10) true))) (= state21 state17)))

;; H
  (assert
  (=> (not (not (= (bool__content dataok10) true))) (= store13 store10)))

;; H
  (assert
  (=> (not (not (= (bool__content dataok10) true))) (= state22 state19)))

;; H
  (assert (= closedok1 (mk_bool__ref closedok)))

;; H
  (assert (= certno9 certno7))

;; H
  (assert (= description13 description11))

;; H
  (assert (= dataok12 dataok10))

;; H
  (assert (= thefile11 (mk_t__ref thefile10)))

;; H
  (assert (= store14 store12))

;; H
  (assert (= state24 state21))

;; H
  (assert (= state23 state16))

;; H
  (assert (= filestate10 filestate8))

;; H
  (assert (= closedok2 closedok))

;; H
  (assert (= certno10 certno8))

;; H
  (assert (= description14 description12))

;; H
  (assert (= dataok13 dataok11))

;; H
  (assert (= thefile12 thefile10))

;; H
  (assert (= store15 store13))

;; H
  (assert (= state26 state22))

;; H
  (assert (= state25 state18))

;; H
  (assert (= filestate11 filestate9))

;; H
  (assert (= (bool__content dataok12) true))

(assert
;; WP_parameter_def
 ;; File "enrolment.adb", line 94, characters 0-0
  (not (= (privatekeypresent (us_private__content state24)) true)))
(check-sat)
(exit)
