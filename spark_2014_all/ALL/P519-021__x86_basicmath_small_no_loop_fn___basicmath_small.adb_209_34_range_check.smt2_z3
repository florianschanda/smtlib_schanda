;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2int x)
                                            (- (- 65536 (bv2int x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2int x)
                                            (- (- 4294967296 (bv2int x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned16 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (unsigned16 unsigned16) Bool)

(declare-const dummy1 unsigned16)

(declare-datatypes ()
((unsigned16__ref (mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16
  (unsigned16__content a))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 16))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (unsigned8 unsigned8) Bool)

(declare-const dummy2 unsigned8)

(declare-datatypes ()
((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int6 ((x unsigned8)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-sort unsigned32 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (unsigned32 unsigned32) Bool)

(declare-const dummy3 unsigned32)

(declare-datatypes ()
((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32
  (unsigned32__content a))

(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))

(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; eax__post_axiom
  (assert
  (forall ((x86__rax (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rax true true true)
     (let ((result (eax x86__rax)))
     (and
     (= result ((_ extract 31 0) (bvand x86__rax ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true)))) :pattern ((eax x86__rax)) )))

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-fun ecx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ecx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ecx__post_axiom
  (assert
  (forall ((x86__rcx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rcx true true true)
     (let ((result (ecx x86__rcx)))
     (and (= result (readreg32 x86__rcx)) (dynamic_invariant2 result true
     false true)))) :pattern ((ecx x86__rcx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edx__post_axiom
  (assert
  (forall ((x86__rdx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdx true true true)
     (let ((result (edx x86__rdx)))
     (and (= result (readreg32 x86__rdx)) (dynamic_invariant2 result true
     false true)))) :pattern ((edx x86__rdx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-fun writereg16post ((_ BitVec 64) (_ BitVec 64) (_ BitVec 16)) Bool)

(declare-fun writereg16post__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 16)) Bool)

(declare-fun ebx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ebx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ebx__post_axiom
  (assert
  (forall ((x86__rbx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rbx true true true)
     (let ((result (ebx x86__rbx)))
     (and (= result (readreg32 x86__rbx)) (dynamic_invariant2 result true
     false true)))) :pattern ((ebx x86__rbx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-fun esp ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esp__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esp__post_axiom
  (assert
  (forall ((x86__rsp (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsp true true true)
     (let ((result (esp x86__rsp)))
     (and (= result (readreg32 x86__rsp)) (dynamic_invariant2 result true
     false true)))) :pattern ((esp x86__rsp)) )))

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-fun esi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esi__post_axiom
  (assert
  (forall ((x86__rsi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsi true true true)
     (let ((result (esi x86__rsi)))
     (and (= result (readreg32 x86__rsi)) (dynamic_invariant2 result true
     false true)))) :pattern ((esi x86__rsi)) )))

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edi__post_axiom
  (assert
  (forall ((x86__rdi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdi true true true)
     (let ((result (edi x86__rdi)))
     (and (= result (readreg32 x86__rdi)) (dynamic_invariant2 result true
     false true)))) :pattern ((edi x86__rdi)) )))

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

(declare-const attr__ATTRIBUTE_ADDRESS30 Int)

(declare-const attr__ATTRIBUTE_ADDRESS31 Int)

(declare-const attr__ATTRIBUTE_ADDRESS32 Int)

(declare-const attr__ATTRIBUTE_ADDRESS33 Int)

(define-fun dynamic_invariant3 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-fun readmem8 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 8))

(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem8__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem8 addr x86__memory)))
     (and (= result (to_rep (select x86__memory addr))) (dynamic_invariant3
     result true false true)))) :pattern ((readmem8 addr x86__memory)) ))))

(declare-fun readmem32 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))

(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem32__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem32 addr x86__memory)))
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
     (= (bvand result ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
     (= (bvand result ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))
     (dynamic_invariant2 result true false true)))) :pattern ((readmem32 addr
                                                              x86__memory)) ))))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned641 unsigned641) Bool)

(declare-const dummy4 unsigned641)

(declare-datatypes ()
((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref___2__projection ((a unsigned64__ref1)) unsigned641
  (unsigned64__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_274 (_ BitVec 64))
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool true)

(declare-sort unsigned81 0)

(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq5 (unsigned81 unsigned81) Bool)

(declare-const dummy5 unsigned81)

(declare-datatypes ()
((unsigned8__ref1 (mk_unsigned8__ref1 (unsigned8__content1 unsigned81)))))
(define-fun unsigned8__ref___2__projection ((a unsigned8__ref1)) unsigned81
  (unsigned8__content1 a))

(define-fun dynamic_invariant5 ((temp___expr_292 (_ BitVec 8))
  (temp___is_init_289 Bool) (temp___skip_constant_290 Bool)
  (temp___do_toplevel_291 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_ADDRESS34 Int)

(declare-const attr__ATTRIBUTE_ADDRESS35 Int)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS36 Int)

(declare-const attr__ATTRIBUTE_ADDRESS37 Int)

(declare-const attr__ATTRIBUTE_ADDRESS38 Int)

(declare-const attr__ATTRIBUTE_ADDRESS39 Int)

(declare-const attr__ATTRIBUTE_ADDRESS40 Int)

(declare-const attr__ATTRIBUTE_ADDRESS41 Int)

(declare-const attr__ATTRIBUTE_ADDRESS42 Int)

(declare-const attr__ATTRIBUTE_ADDRESS43 Int)

(declare-const attr__ATTRIBUTE_ADDRESS44 Int)

(declare-const attr__ATTRIBUTE_ADDRESS45 Int)

(declare-const attr__ATTRIBUTE_ADDRESS46 Int)

(declare-const attr__ATTRIBUTE_ADDRESS47 Int)

(declare-const attr__ATTRIBUTE_ADDRESS48 Int)

(declare-const attr__ATTRIBUTE_ADDRESS49 Int)

(declare-const attr__ATTRIBUTE_ADDRESS50 Int)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (= (= (inrange64 var bottom range_size) true)
     (ite (bvule bottom (bvadd (bvsub ((_ int2bv 64) 18446744073709551615) range_size) ((_ int2bv 64) 1)))
     (and (bvule bottom var)
     (bvule var (bvadd bottom (bvsub range_size ((_ int2bv 64) 1)))))
     (or
     (and (bvule bottom var)
     (bvule var ((_ int2bv 64) 18446744073709551615)))
     (bvule var (bvsub (bvsub range_size (bvsub ((_ int2bv 64) 18446744073709551615) bottom)) ((_ int2bv 64) 2))))))) :pattern (
  (inrange64 var bottom range_size)) )))

(declare-fun readreg16 ((_ BitVec 64)) (_ BitVec 16))

(declare-fun readreg16__function_guard ((_ BitVec 16) (_ BitVec 64)) Bool)

;; readreg16__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg16 reg)))
     (and (= result ((_ extract 15 0) (bvand reg ((_ int2bv 64) 65535))))
     (dynamic_invariant1 result true false true)))) :pattern ((readreg16 reg)) )))

;; writereg16post__post_axiom
  (assert
  (forall ((regold (_ BitVec 64)) (regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 16)))
  (! (=>
     (and
     (and (dynamic_invariant regold true true true) (dynamic_invariant regnew
     true true true)) (dynamic_invariant1 val__ true true true))
     (= (= (writereg16post regold regnew val__) true)
     (and (= (readreg16 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744073709486080)) (bvand regold ((_ int2bv 64) 18446744073709486080)))))) :pattern (
  (writereg16post regold regnew val__)) ))))

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg32 reg)))
     (and
     (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true)))) :pattern ((readreg32 reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true) (dynamic_invariant2 val__
     true true true))
     (= (= (writereg32post regnew val__) true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern (
  (writereg32post regnew val__)) ))))

(declare-const ds (_ BitVec 64))

(declare-const fs (_ BitVec 64))

(declare-const gs (_ BitVec 64))

(declare-const ss (_ BitVec 64))

(declare-const stackaddresssize (_ BitVec 16))

(declare-const zeroflag Bool)

(declare-const carryflag Bool)

(declare-const signflag Bool)

(declare-const overflowflag Bool)

(declare-const xmm0 (_ BitVec 64))

(declare-const xmm1 (_ BitVec 64))

(declare-const xmm2 (_ BitVec 64))

(declare-const xmm3 (_ BitVec 64))

(declare-const xmm4 (_ BitVec 64))

(declare-const xmm5 (_ BitVec 64))

(declare-const xmm6 (_ BitVec 64))

(declare-const xmm7 (_ BitVec 64))

(declare-const rax (_ BitVec 64))

(declare-const rcx (_ BitVec 64))

(declare-const rdx (_ BitVec 64))

(declare-const rbx t__ref3)

(declare-const rsp t__ref3)

(declare-const rbp t__ref3)

(declare-const rsi t__ref3)

(declare-const rdi t__ref3)

(declare-const r8 t__ref3)

(declare-const r9 t__ref3)

(declare-const r10 t__ref3)

(declare-const r11 t__ref3)

(declare-const r12 t__ref3)

(declare-const r13 t__ref3)

(declare-const r14 t__ref3)

(declare-const r15 t__ref3)

(declare-const memory map__ref)

(declare-const dummy_var t__ref3)

(declare-const savestackptr t__ref3)

(declare-const ra0 t__ref)

(declare-const ra1 t__ref)

(declare-const ra2 t__ref)

(declare-const ra3 t__ref)

(declare-const ra4 t__ref)

(declare-const ra5 t__ref)

(declare-const ra6 t__ref)

(declare-const ra7 t__ref)

(declare-const saverbx t__ref3)

(declare-const saverbp t__ref3)

(declare-const saver12 t__ref3)

(declare-const saver13 t__ref3)

(declare-const saver14 t__ref3)

(declare-const saver15 t__ref3)

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 8))

(declare-const o2 (_ BitVec 8))

(declare-const o3 (_ BitVec 8))

(declare-const o4 (_ BitVec 8))

(declare-const o5 (_ BitVec 8))

(declare-const o6 (_ BitVec 8))

(declare-const o7 (_ BitVec 8))

(declare-const o8 (_ BitVec 8))

(declare-const o9 (_ BitVec 8))

(declare-const o10 (_ BitVec 8))

(declare-const o11 (_ BitVec 8))

(declare-const o12 (_ BitVec 8))

(declare-const o13 (_ BitVec 8))

(declare-const o14 (_ BitVec 8))

(declare-const o15 (_ BitVec 8))

(declare-const o16 (_ BitVec 8))

(declare-const o17 (_ BitVec 64))

(declare-const o18 (_ BitVec 64))

(declare-const o19 (_ BitVec 64))

(declare-const o20 (_ BitVec 64))

(declare-const o21 (_ BitVec 64))

(declare-const o22 (_ BitVec 64))

(declare-const o23 (_ BitVec 64))

(declare-const o24 (_ BitVec 64))

(declare-const o25 (_ BitVec 64))

(declare-const o26 (_ BitVec 64))

(declare-const o27 (_ BitVec 32))

(declare-const o28 (_ BitVec 32))

(declare-const o29 (_ BitVec 64))

(declare-const o30 (_ BitVec 32))

(declare-const o31 (_ BitVec 32))

(declare-const o32 (_ BitVec 32))

(declare-const o33 (_ BitVec 32))

(declare-const o34 Bool)

(declare-const o35 (_ BitVec 32))

(declare-const o36 (_ BitVec 32))

(declare-const o37 (_ BitVec 32))

(declare-const o38 Bool)

(declare-const temp___393 (_ BitVec 64))

(declare-const temp___394 (_ BitVec 64))

(declare-const temp___392 (_ BitVec 64))

(declare-const temp___391 Bool)

(declare-const temp___390 Bool)

(declare-const temp___389 (_ BitVec 64))

(declare-const temp___387 Bool)

(declare-const temp___388 (_ BitVec 64))

(declare-const temp___386 (_ BitVec 64))

(declare-const temp___385 (_ BitVec 64))

(declare-const temp___384 Bool)

(declare-const o39 (_ BitVec 64))

(declare-const o40 (_ BitVec 32))

(declare-const o41 (_ BitVec 32))

(declare-const o42 (_ BitVec 32))

(declare-const o43 (_ BitVec 32))

(declare-const o44 (_ BitVec 32))

(declare-const o45 Bool)

(declare-const o46 (_ BitVec 32))

(declare-const o47 (_ BitVec 32))

(declare-const o48 (_ BitVec 32))

(declare-const o49 Bool)

(declare-const o50 (_ BitVec 32))

(declare-const o51 (_ BitVec 32))

(declare-const o52 Bool)

(declare-const o53 (_ BitVec 32))

(declare-const o54 (_ BitVec 32))

(declare-const o55 (_ BitVec 32))

(declare-const o56 (_ BitVec 32))

(declare-const o57 Bool)

(declare-const o58 Bool)

(declare-const o59 Bool)

(declare-const o60 (_ BitVec 64))

(declare-const o61 (_ BitVec 64))

(declare-const o62 (_ BitVec 64))

(declare-const o63 (_ BitVec 64))

(declare-const o64 (_ BitVec 32))

(declare-const o65 (_ BitVec 32))

(declare-const o66 (_ BitVec 64))

(declare-const o67 (_ BitVec 32))

(declare-const o68 (_ BitVec 32))

(declare-const o69 (_ BitVec 32))

(declare-const o70 (_ BitVec 32))

(declare-const o71 Bool)

(declare-const o72 (_ BitVec 32))

(declare-const o73 (_ BitVec 32))

(declare-const o74 (_ BitVec 32))

(declare-const o75 Bool)

(declare-const temp___404 (_ BitVec 64))

(declare-const temp___403 (_ BitVec 64))

(declare-const temp___402 Bool)

(declare-const temp___401 Bool)

(declare-const temp___400 (_ BitVec 64))

(declare-const temp___398 Bool)

(declare-const temp___399 (_ BitVec 64))

(declare-const temp___397 (_ BitVec 64))

(declare-const temp___396 (_ BitVec 64))

(declare-const temp___395 Bool)

(declare-const temp___405 (_ BitVec 64))

(declare-const o76 (_ BitVec 64))

(declare-const o77 (_ BitVec 32))

(declare-const o78 (_ BitVec 32))

(declare-const o79 (_ BitVec 32))

(declare-const o80 (_ BitVec 32))

(declare-const o81 (_ BitVec 32))

(declare-const o82 Bool)

(declare-const o83 (_ BitVec 32))

(declare-const o84 (_ BitVec 32))

(declare-const o85 (_ BitVec 32))

(declare-const o86 Bool)

(declare-const o87 (_ BitVec 32))

(declare-const o88 (_ BitVec 32))

(declare-const o89 Bool)

(declare-const o90 (_ BitVec 32))

(declare-const o91 (_ BitVec 32))

(declare-const o92 (_ BitVec 32))

(declare-const o93 (_ BitVec 32))

(declare-const o94 Bool)

(declare-const o95 Bool)

(declare-const o96 Bool)

(declare-const o97 (_ BitVec 64))

(declare-const o98 (_ BitVec 64))

(declare-const o99 (_ BitVec 64))

(declare-const o100 (_ BitVec 64))

(declare-const o101 (_ BitVec 32))

(declare-const o102 (_ BitVec 32))

(declare-const o103 (_ BitVec 64))

(declare-const o104 (_ BitVec 32))

(declare-const o105 (_ BitVec 32))

(declare-const o106 (_ BitVec 32))

(declare-const o107 (_ BitVec 32))

(declare-const o108 Bool)

(declare-const o109 (_ BitVec 32))

(declare-const o110 (_ BitVec 32))

(declare-const o111 (_ BitVec 32))

(declare-const o112 Bool)

(declare-const temp___415 (_ BitVec 64))

(declare-const temp___414 (_ BitVec 64))

(declare-const temp___413 Bool)

(declare-const temp___412 Bool)

(declare-const temp___411 (_ BitVec 64))

(declare-const temp___409 Bool)

(declare-const temp___410 (_ BitVec 64))

(declare-const temp___408 (_ BitVec 64))

(declare-const temp___407 (_ BitVec 64))

(declare-const temp___416 (_ BitVec 64))

(declare-const temp___406 Bool)

(declare-const o113 (_ BitVec 64))

(declare-const o114 (_ BitVec 32))

(declare-const o115 (_ BitVec 32))

(declare-const o116 (_ BitVec 32))

(declare-const o117 (_ BitVec 32))

(declare-const o118 (_ BitVec 32))

(declare-const o119 Bool)

(declare-const o120 (_ BitVec 32))

(declare-const o121 (_ BitVec 32))

(declare-const o122 (_ BitVec 32))

(declare-const o123 Bool)

(declare-const o124 (_ BitVec 32))

(declare-const o125 (_ BitVec 32))

(declare-const o126 Bool)

(declare-const o127 (_ BitVec 32))

(declare-const o128 (_ BitVec 32))

(declare-const o129 (_ BitVec 32))

(declare-const o130 (_ BitVec 32))

(declare-const o131 Bool)

(declare-const o132 Bool)

(declare-const o133 Bool)

(declare-const o134 (_ BitVec 64))

(declare-const o135 (_ BitVec 64))

(declare-const o136 (_ BitVec 64))

(declare-const o137 (_ BitVec 32))

(declare-const o138 (_ BitVec 32))

(declare-const o139 (_ BitVec 64))

(declare-const o140 (_ BitVec 32))

(declare-const o141 (_ BitVec 32))

(declare-const o142 (_ BitVec 32))

(declare-const o143 (_ BitVec 32))

(declare-const o144 Bool)

(declare-const o145 (_ BitVec 32))

(declare-const o146 (_ BitVec 32))

(declare-const o147 (_ BitVec 32))

(declare-const o148 Bool)

(declare-const temp___426 (_ BitVec 64))

(declare-const temp___425 (_ BitVec 64))

(declare-const temp___424 Bool)

(declare-const temp___423 Bool)

(declare-const temp___422 (_ BitVec 64))

(declare-const temp___427 (_ BitVec 64))

(declare-const temp___420 Bool)

(declare-const temp___421 (_ BitVec 64))

(declare-const temp___419 (_ BitVec 64))

(declare-const temp___418 (_ BitVec 64))

(declare-const temp___417 Bool)

(declare-const o149 (_ BitVec 64))

(declare-const o150 (_ BitVec 32))

(declare-const o151 (_ BitVec 32))

(declare-const o152 (_ BitVec 32))

(declare-const o153 (_ BitVec 32))

(declare-const o154 (_ BitVec 32))

(declare-const o155 Bool)

(declare-const o156 (_ BitVec 32))

(declare-const o157 (_ BitVec 32))

(declare-const o158 (_ BitVec 32))

(declare-const o159 Bool)

(declare-const o160 (_ BitVec 32))

(declare-const o161 (_ BitVec 32))

(declare-const o162 Bool)

(declare-const o163 (_ BitVec 32))

(declare-const o164 (_ BitVec 32))

(declare-const o165 (_ BitVec 32))

(declare-const o166 (_ BitVec 32))

(declare-const o167 Bool)

(declare-const o168 Bool)

(declare-const o169 Bool)

(declare-const o170 (_ BitVec 64))

(declare-const o171 (_ BitVec 32))

(declare-const o172 (_ BitVec 32))

(declare-const o173 (_ BitVec 64))

(declare-const temp___526 (_ BitVec 64))

(declare-const temp___525 (_ BitVec 64))

(declare-const temp___527 (_ BitVec 64))

(declare-const temp___524 (_ BitVec 64))

(declare-const temp___522 (_ BitVec 64))

(declare-const temp___523 (Array (_ BitVec 64) unsigned8))

(declare-const temp___520 Bool)

(declare-const temp___521 (_ BitVec 64))

(declare-const temp___518 (_ BitVec 64))

(declare-const temp___519 (_ BitVec 64))

(declare-const temp___516 Bool)

(declare-const temp___517 (_ BitVec 64))

(declare-const temp___515 (_ BitVec 64))

(declare-const temp___514 (_ BitVec 64))

(declare-const temp___513 (_ BitVec 64))

(declare-const temp___511 Bool)

(declare-const temp___512 (_ BitVec 64))

(declare-const temp___510 (_ BitVec 64))

(declare-const temp___507 (_ BitVec 64))

(declare-const temp___508 (_ BitVec 64))

(declare-const temp___509 (_ BitVec 64))

(declare-const temp___506 Bool)

(declare-const temp___505 (_ BitVec 64))

(declare-const temp___528 (Array (_ BitVec 64) unsigned8))

(declare-const temp___504 (_ BitVec 64))

(declare-const o174 (_ BitVec 64))

(declare-const temp___501 (_ BitVec 64))

(declare-const temp___503 (Array (_ BitVec 64) unsigned8))

(declare-const temp___502 (_ BitVec 64))

(declare-const temp___500 (_ BitVec 64))

(declare-const temp___499 (_ BitVec 64))

(declare-const temp___497 (_ BitVec 64))

(declare-const temp___498 (Array (_ BitVec 64) unsigned8))

(declare-const temp___495 Bool)

(declare-const temp___496 (_ BitVec 64))

(declare-const temp___493 (_ BitVec 64))

(declare-const temp___494 (_ BitVec 64))

(declare-const temp___491 Bool)

(declare-const temp___492 (_ BitVec 64))

(declare-const temp___490 (_ BitVec 64))

(declare-const temp___489 (_ BitVec 64))

(declare-const temp___487 Bool)

(declare-const temp___488 (_ BitVec 64))

(declare-const temp___486 (_ BitVec 64))

(declare-const temp___483 (_ BitVec 64))

(declare-const temp___484 (_ BitVec 64))

(declare-const temp___485 (_ BitVec 64))

(declare-const temp___482 Bool)

(declare-const temp___481 (_ BitVec 64))

(declare-const temp___480 (_ BitVec 64))

(declare-const o175 (_ BitVec 64))

(declare-const temp___477 (_ BitVec 64))

(declare-const temp___476 (_ BitVec 64))

(declare-const temp___478 (_ BitVec 64))

(declare-const temp___475 (_ BitVec 64))

(declare-const temp___473 (_ BitVec 64))

(declare-const temp___474 (Array (_ BitVec 64) unsigned8))

(declare-const temp___471 Bool)

(declare-const temp___472 (_ BitVec 64))

(declare-const temp___479 (Array (_ BitVec 64) unsigned8))

(declare-const temp___469 (_ BitVec 64))

(declare-const temp___470 (_ BitVec 64))

(declare-const temp___467 Bool)

(declare-const temp___468 (_ BitVec 64))

(declare-const temp___466 (_ BitVec 64))

(declare-const temp___464 Bool)

(declare-const temp___465 (_ BitVec 64))

(declare-const temp___463 (_ BitVec 64))

(declare-const temp___460 (_ BitVec 64))

(declare-const temp___461 (_ BitVec 64))

(declare-const temp___462 (_ BitVec 64))

(declare-const temp___459 Bool)

(declare-const temp___458 (_ BitVec 64))

(declare-const o176 (_ BitVec 64))

(declare-const temp___455 (_ BitVec 64))

(declare-const temp___454 (_ BitVec 64))

(declare-const temp___453 (_ BitVec 64))

(declare-const temp___451 (Array (_ BitVec 64) unsigned8))

(declare-const temp___452 (_ BitVec 64))

(declare-const temp___449 Bool)

(declare-const temp___450 (_ BitVec 64))

(declare-const temp___447 Bool)

(declare-const temp___448 (_ BitVec 64))

(declare-const temp___456 (_ BitVec 64))

(declare-const temp___446 (_ BitVec 64))

(declare-const temp___444 Bool)

(declare-const temp___445 (_ BitVec 64))

(declare-const temp___443 (_ BitVec 64))

(declare-const temp___441 (_ BitVec 64))

(declare-const temp___442 (_ BitVec 64))

(declare-const temp___440 Bool)

(declare-const temp___439 (_ BitVec 64))

(declare-const temp___457 (Array (_ BitVec 64) unsigned8))

(declare-const o177 (_ BitVec 64))

(declare-const o178 (_ BitVec 64))

(declare-const o179 (_ BitVec 64))

(declare-const o180 (_ BitVec 64))

(declare-const o181 (_ BitVec 32))

(declare-const o182 (_ BitVec 32))

(declare-const o183 Bool)

(declare-const o184 (_ BitVec 32))

(declare-const o185 Bool)

(declare-const temp___437 (_ BitVec 64))

(declare-const temp___438 (_ BitVec 64))

(declare-const temp___436 (_ BitVec 64))

(declare-const temp___435 Bool)

(declare-const temp___434 Bool)

(declare-const temp___433 (_ BitVec 64))

(declare-const temp___431 Bool)

(declare-const temp___432 (_ BitVec 64))

(declare-const temp___430 (_ BitVec 64))

(declare-const temp___429 (_ BitVec 64))

(declare-const temp___428 Bool)

(declare-const o186 (_ BitVec 64))

(declare-const o187 (_ BitVec 32))

(declare-const o188 (_ BitVec 32))

(declare-const o189 (_ BitVec 32))

(declare-const o190 (_ BitVec 32))

(declare-const o191 (_ BitVec 32))

(declare-const o192 Bool)

(declare-const o193 (_ BitVec 32))

(declare-const o194 (_ BitVec 32))

(declare-const o195 (_ BitVec 32))

(declare-const o196 Bool)

(declare-const o197 (_ BitVec 32))

(declare-const o198 (_ BitVec 32))

(declare-const o199 Bool)

(declare-const o200 (_ BitVec 32))

(declare-const o201 (_ BitVec 32))

(declare-const o202 (_ BitVec 32))

(declare-const o203 (_ BitVec 32))

(declare-const o204 Bool)

(declare-const o205 Bool)

(declare-const o206 Bool)

(declare-const o207 (_ BitVec 64))

(declare-const o208 (_ BitVec 64))

(declare-const o209 (_ BitVec 64))

(declare-const o210 (_ BitVec 64))

(declare-const o211 (_ BitVec 64))

(declare-const o212 (_ BitVec 64))

(declare-const o213 (_ BitVec 64))

(declare-const o214 (_ BitVec 64))

(declare-const o215 (_ BitVec 64))

(declare-const o216 (_ BitVec 64))

(declare-const o217 (_ BitVec 64))

(declare-const o218 (_ BitVec 64))

(declare-const o219 (_ BitVec 32))

(declare-const o220 (_ BitVec 32))

(declare-const o221 (_ BitVec 64))

(declare-const o222 (_ BitVec 32))

(declare-const o223 (_ BitVec 64))

(declare-const o224 (_ BitVec 64))

(declare-const o225 (_ BitVec 64))

(declare-const o226 (_ BitVec 64))

(declare-const o227 (_ BitVec 64))

(declare-const o228 (_ BitVec 64))

(declare-const result t__ref3)

(declare-const savestackptr1 (_ BitVec 64))

(declare-const result1 t__ref)

(declare-const ra01 (_ BitVec 8))

(declare-const result2 t__ref)

(declare-const ra11 (_ BitVec 8))

(declare-const result3 t__ref)

(declare-const ra21 (_ BitVec 8))

(declare-const result4 t__ref)

(declare-const ra31 (_ BitVec 8))

(declare-const result5 t__ref)

(declare-const ra41 (_ BitVec 8))

(declare-const result6 t__ref)

(declare-const ra51 (_ BitVec 8))

(declare-const result7 t__ref)

(declare-const ra61 (_ BitVec 8))

(declare-const result8 t__ref)

(declare-const ra71 (_ BitVec 8))

(declare-const result9 t__ref3)

(declare-const saverbx1 (_ BitVec 64))

(declare-const result10 t__ref3)

(declare-const saverbp1 (_ BitVec 64))

(declare-const result11 t__ref3)

(declare-const saver121 (_ BitVec 64))

(declare-const result12 t__ref3)

(declare-const saver131 (_ BitVec 64))

(declare-const result13 t__ref3)

(declare-const saver141 (_ BitVec 64))

(declare-const result14 t__ref3)

(declare-const saver151 (_ BitVec 64))

(declare-const memory1 (Array (_ BitVec 64) unsigned8))

(declare-const result15 t__ref3)

(declare-const rsp1 (_ BitVec 64))

(declare-const memory2 (Array (_ BitVec 64) unsigned8))

(declare-const result16 t__ref3)

(declare-const rsp2 (_ BitVec 64))

(declare-const rdi1 (_ BitVec 64))

(declare-const memory3 (Array (_ BitVec 64) unsigned8))

(declare-const result17 t__ref3)

(declare-const rsp3 (_ BitVec 64))

(declare-const memory4 (Array (_ BitVec 64) unsigned8))

(declare-const result18 t__ref3)

(declare-const rsp4 (_ BitVec 64))

(declare-const memory5 (Array (_ BitVec 64) unsigned8))

(declare-const result19 t__ref3)

(declare-const rsp5 (_ BitVec 64))

(declare-const memory6 (Array (_ BitVec 64) unsigned8))

(declare-const result20 t__ref3)

(declare-const rsp6 (_ BitVec 64))

(declare-const rbx1 (_ BitVec 64))

(declare-const result21 t__ref3)

(declare-const rsp7 (_ BitVec 64))

(declare-const result22 t__ref3)

(declare-const rsp8 (_ BitVec 64))

(declare-const rsp9 (_ BitVec 64))

(declare-const result23 t__ref3)

(declare-const rsi1 (_ BitVec 64))

(declare-const result24 t__ref3)

(declare-const rdi2 (_ BitVec 64))

(declare-const result25 t__ref3)

(declare-const rbp1 (_ BitVec 64))

(declare-const result26 t__ref3)

(declare-const xmm31 (_ BitVec 64))

(declare-const result27 t__ref3)

(declare-const xmm21 (_ BitVec 64))

(declare-const result28 t__ref3)

(declare-const xmm11 (_ BitVec 64))

(declare-const result29 t__ref3)

(declare-const xmm01 (_ BitVec 64))

(declare-const result30 t__ref3)

(declare-const rsp10 (_ BitVec 64))

(declare-const rsp11 (_ BitVec 64))

(declare-const rdi3 (_ BitVec 64))

(declare-const rax1 (_ BitVec 64))

(declare-const result31 t__ref3)

(declare-const rsp12 (_ BitVec 64))

(declare-const rsp13 (_ BitVec 64))

(declare-const rdi4 (_ BitVec 64))

(declare-const result32 bool__ref)

(declare-const zeroflag1 Bool)

(declare-const result33 bool__ref)

(declare-const signflag1 Bool)

(declare-const result34 bool__ref)

(declare-const carryflag1 Bool)

(declare-const result35 bool__ref)

(declare-const overflowflag1 Bool)

(declare-const zeroflag2 Bool)

(declare-const carryflag2 Bool)

(declare-const signflag2 Bool)

(declare-const overflowflag2 Bool)

(declare-const xmm02 (_ BitVec 64))

(declare-const rax2 (_ BitVec 64))

(declare-const rbx2 (_ BitVec 64))

(declare-const rsp14 (_ BitVec 64))

(declare-const rbp2 (_ BitVec 64))

(declare-const rdi5 (_ BitVec 64))

(declare-const result36 t__ref3)

(declare-const xmm03 (_ BitVec 64))

(declare-const rdi6 (_ BitVec 64))

(declare-const rax3 (_ BitVec 64))

(declare-const rbx3 (_ BitVec 64))

(declare-const result37 t__ref3)

(declare-const rbp3 (_ BitVec 64))

(declare-const result38 t__ref3)

(declare-const rsp15 (_ BitVec 64))

(declare-const rsp16 (_ BitVec 64))

(declare-const result39 bool__ref)

(declare-const zeroflag3 Bool)

(declare-const result40 bool__ref)

(declare-const signflag3 Bool)

(declare-const result41 bool__ref)

(declare-const carryflag3 Bool)

(declare-const result42 Bool)

(declare-const result43 Bool)

(declare-const result44 bool__ref)

(declare-const overflowflag3 Bool)

(declare-const zeroflag4 bool__ref)

(declare-const carryflag4 bool__ref)

(declare-const signflag4 bool__ref)

(declare-const overflowflag4 bool__ref)

(declare-const xmm04 t__ref3)

(declare-const rax4 t__ref3)

(declare-const rbx4 t__ref3)

(declare-const rsp17 t__ref3)

(declare-const rbp4 t__ref3)

(declare-const rdi7 t__ref3)

(declare-const zeroflag5 Bool)

(declare-const carryflag5 Bool)

(declare-const signflag5 Bool)

(declare-const overflowflag5 Bool)

(declare-const xmm05 (_ BitVec 64))

(declare-const rax5 (_ BitVec 64))

(declare-const rbx5 (_ BitVec 64))

(declare-const rsp18 (_ BitVec 64))

(declare-const rbp5 (_ BitVec 64))

(declare-const rdi8 (_ BitVec 64))

(declare-const zeroflag6 bool__ref)

(declare-const carryflag6 bool__ref)

(declare-const signflag6 bool__ref)

(declare-const overflowflag6 bool__ref)

(declare-const xmm06 t__ref3)

(declare-const rax6 t__ref3)

(declare-const rbx6 t__ref3)

(declare-const rsp19 t__ref3)

(declare-const rbp6 t__ref3)

(declare-const rdi9 t__ref3)

(declare-const zeroflag7 Bool)

(declare-const carryflag7 Bool)

(declare-const signflag7 Bool)

(declare-const overflowflag7 Bool)

(declare-const xmm07 (_ BitVec 64))

(declare-const rax7 (_ BitVec 64))

(declare-const rbx7 (_ BitVec 64))

(declare-const rsp20 (_ BitVec 64))

(declare-const rbp7 (_ BitVec 64))

(declare-const rdi10 (_ BitVec 64))

(declare-const zeroflag8 bool__ref)

(declare-const carryflag8 bool__ref)

(declare-const signflag8 bool__ref)

(declare-const overflowflag8 bool__ref)

(declare-const xmm08 t__ref3)

(declare-const rax8 t__ref3)

(declare-const rbx8 t__ref3)

(declare-const rsp21 t__ref3)

(declare-const rbp8 t__ref3)

(declare-const rdi11 t__ref3)

(declare-const zeroflag9 Bool)

(declare-const carryflag9 Bool)

(declare-const signflag9 Bool)

(declare-const overflowflag9 Bool)

(declare-const xmm09 (_ BitVec 64))

(declare-const rax9 (_ BitVec 64))

(declare-const rbx9 (_ BitVec 64))

(declare-const rsp22 (_ BitVec 64))

(declare-const rbp9 (_ BitVec 64))

(declare-const rdi12 (_ BitVec 64))

(declare-const rdi13 (_ BitVec 64))

(declare-const rbx10 (_ BitVec 64))

(declare-const result45 t__ref3)

(declare-const rbp10 (_ BitVec 64))

(declare-const result46 t__ref3)

(declare-const rsp23 (_ BitVec 64))

(declare-const rsp24 (_ BitVec 64))

(declare-const result47 t__ref3)

(declare-const rsi2 (_ BitVec 64))

(declare-const result48 t__ref3)

(declare-const rdi14 (_ BitVec 64))

(declare-const result49 t__ref3)

(declare-const xmm32 (_ BitVec 64))

(declare-const result50 t__ref3)

(declare-const xmm22 (_ BitVec 64))

(declare-const result51 t__ref3)

(declare-const xmm12 (_ BitVec 64))

(declare-const result52 t__ref3)

(declare-const xmm010 (_ BitVec 64))

(declare-const result53 t__ref3)

(declare-const rsp25 (_ BitVec 64))

(declare-const rsp26 (_ BitVec 64))

(declare-const rax10 (_ BitVec 64))

(declare-const rdi15 (_ BitVec 64))

(declare-const result54 t__ref3)

(declare-const rsp27 (_ BitVec 64))

(declare-const rsp28 (_ BitVec 64))

(declare-const rsi3 (_ BitVec 64))

(declare-const result55 bool__ref)

(declare-const zeroflag10 Bool)

(declare-const result56 bool__ref)

(declare-const signflag10 Bool)

(declare-const result57 bool__ref)

(declare-const carryflag10 Bool)

(declare-const result58 bool__ref)

(declare-const overflowflag10 Bool)

(declare-const zeroflag11 Bool)

(declare-const carryflag11 Bool)

(declare-const signflag11 Bool)

(declare-const overflowflag11 Bool)

(declare-const xmm011 (_ BitVec 64))

(declare-const rax11 (_ BitVec 64))

(declare-const rbx11 (_ BitVec 64))

(declare-const rsp29 (_ BitVec 64))

(declare-const rbp11 (_ BitVec 64))

(declare-const rdi16 (_ BitVec 64))

(declare-const result59 t__ref3)

(declare-const xmm012 (_ BitVec 64))

(declare-const rdi17 (_ BitVec 64))

(declare-const rax12 (_ BitVec 64))

(declare-const rbx12 (_ BitVec 64))

(declare-const result60 t__ref3)

(declare-const rbp12 (_ BitVec 64))

(declare-const result61 t__ref3)

(declare-const rsp30 (_ BitVec 64))

(declare-const rsp31 (_ BitVec 64))

(declare-const result62 bool__ref)

(declare-const zeroflag12 Bool)

(declare-const result63 bool__ref)

(declare-const signflag12 Bool)

(declare-const result64 bool__ref)

(declare-const carryflag12 Bool)

(declare-const result65 Bool)

(declare-const result66 Bool)

(declare-const result67 bool__ref)

(declare-const overflowflag12 Bool)

(declare-const zeroflag13 bool__ref)

(declare-const carryflag13 bool__ref)

(declare-const signflag13 bool__ref)

(declare-const overflowflag13 bool__ref)

(declare-const xmm013 t__ref3)

(declare-const rax13 t__ref3)

(declare-const rbx13 t__ref3)

(declare-const rsp32 t__ref3)

(declare-const rbp13 t__ref3)

(declare-const rdi18 t__ref3)

(declare-const zeroflag14 Bool)

(declare-const carryflag14 Bool)

(declare-const signflag14 Bool)

(declare-const overflowflag14 Bool)

(declare-const xmm014 (_ BitVec 64))

(declare-const rax14 (_ BitVec 64))

(declare-const rbx14 (_ BitVec 64))

(declare-const rsp33 (_ BitVec 64))

(declare-const rbp14 (_ BitVec 64))

(declare-const rdi19 (_ BitVec 64))

(declare-const zeroflag15 bool__ref)

(declare-const carryflag15 bool__ref)

(declare-const signflag15 bool__ref)

(declare-const overflowflag15 bool__ref)

(declare-const xmm015 t__ref3)

(declare-const rax15 t__ref3)

(declare-const rbx15 t__ref3)

(declare-const rsp34 t__ref3)

(declare-const rbp15 t__ref3)

(declare-const rdi20 t__ref3)

(declare-const zeroflag16 Bool)

(declare-const carryflag16 Bool)

(declare-const signflag16 Bool)

(declare-const overflowflag16 Bool)

(declare-const xmm016 (_ BitVec 64))

(declare-const rax16 (_ BitVec 64))

(declare-const rbx16 (_ BitVec 64))

(declare-const rsp35 (_ BitVec 64))

(declare-const rbp16 (_ BitVec 64))

(declare-const rdi21 (_ BitVec 64))

(declare-const zeroflag17 bool__ref)

(declare-const carryflag17 bool__ref)

(declare-const signflag17 bool__ref)

(declare-const overflowflag17 bool__ref)

(declare-const xmm017 t__ref3)

(declare-const rax17 t__ref3)

(declare-const rbx17 t__ref3)

(declare-const rsp36 t__ref3)

(declare-const rbp17 t__ref3)

(declare-const rdi22 t__ref3)

(declare-const zeroflag18 Bool)

(declare-const carryflag18 Bool)

(declare-const signflag18 Bool)

(declare-const overflowflag18 Bool)

(declare-const xmm018 (_ BitVec 64))

(declare-const rax18 (_ BitVec 64))

(declare-const rbx18 (_ BitVec 64))

(declare-const rsp37 (_ BitVec 64))

(declare-const rbp18 (_ BitVec 64))

(declare-const rdi23 (_ BitVec 64))

(declare-const zeroflag19 bool__ref)

(declare-const carryflag19 bool__ref)

(declare-const signflag19 bool__ref)

(declare-const overflowflag19 bool__ref)

(declare-const xmm019 t__ref3)

(declare-const rax19 t__ref3)

(declare-const rbx19 t__ref3)

(declare-const rsp38 t__ref3)

(declare-const rbp19 t__ref3)

(declare-const rdi24 t__ref3)

(declare-const zeroflag20 Bool)

(declare-const carryflag20 Bool)

(declare-const signflag20 Bool)

(declare-const overflowflag20 Bool)

(declare-const xmm020 (_ BitVec 64))

(declare-const rax20 (_ BitVec 64))

(declare-const rbx20 (_ BitVec 64))

(declare-const rsp39 (_ BitVec 64))

(declare-const rbp20 (_ BitVec 64))

(declare-const rdi25 (_ BitVec 64))

(declare-const rdi26 (_ BitVec 64))

(declare-const rbx21 (_ BitVec 64))

(declare-const result68 t__ref3)

(declare-const rbp21 (_ BitVec 64))

(declare-const result69 t__ref3)

(declare-const rsp40 (_ BitVec 64))

(declare-const rsp41 (_ BitVec 64))

(declare-const result70 t__ref3)

(declare-const rsi4 (_ BitVec 64))

(declare-const result71 t__ref3)

(declare-const rdi27 (_ BitVec 64))

(declare-const result72 t__ref3)

(declare-const xmm33 (_ BitVec 64))

(declare-const result73 t__ref3)

(declare-const xmm23 (_ BitVec 64))

(declare-const result74 t__ref3)

(declare-const xmm13 (_ BitVec 64))

(declare-const result75 t__ref3)

(declare-const xmm021 (_ BitVec 64))

(declare-const result76 t__ref3)

(declare-const rsp42 (_ BitVec 64))

(declare-const rsp43 (_ BitVec 64))

(declare-const rax21 (_ BitVec 64))

(declare-const rdi28 (_ BitVec 64))

(declare-const result77 t__ref3)

(declare-const rsp44 (_ BitVec 64))

(declare-const rsp45 (_ BitVec 64))

(declare-const rcx1 (_ BitVec 64))

(declare-const result78 bool__ref)

(declare-const zeroflag21 Bool)

(declare-const result79 bool__ref)

(declare-const signflag21 Bool)

(declare-const result80 bool__ref)

(declare-const carryflag21 Bool)

(declare-const result81 bool__ref)

(declare-const overflowflag21 Bool)

(declare-const zeroflag22 Bool)

(declare-const carryflag22 Bool)

(declare-const signflag22 Bool)

(declare-const overflowflag22 Bool)

(declare-const xmm022 (_ BitVec 64))

(declare-const rax22 (_ BitVec 64))

(declare-const rbx22 (_ BitVec 64))

(declare-const rsp46 (_ BitVec 64))

(declare-const rbp22 (_ BitVec 64))

(declare-const rdi29 (_ BitVec 64))

(declare-const result82 t__ref3)

(declare-const xmm023 (_ BitVec 64))

(declare-const rdi30 (_ BitVec 64))

(declare-const rax23 (_ BitVec 64))

(declare-const rbx23 (_ BitVec 64))

(declare-const result83 t__ref3)

(declare-const rbp23 (_ BitVec 64))

(declare-const result84 t__ref3)

(declare-const rsp47 (_ BitVec 64))

(declare-const rsp48 (_ BitVec 64))

(declare-const result85 bool__ref)

(declare-const zeroflag23 Bool)

(declare-const result86 bool__ref)

(declare-const signflag23 Bool)

(declare-const result87 bool__ref)

(declare-const carryflag23 Bool)

(declare-const result88 Bool)

(declare-const result89 Bool)

(declare-const result90 bool__ref)

(declare-const overflowflag23 Bool)

(declare-const zeroflag24 bool__ref)

(declare-const carryflag24 bool__ref)

(declare-const signflag24 bool__ref)

(declare-const overflowflag24 bool__ref)

(declare-const xmm024 t__ref3)

(declare-const rax24 t__ref3)

(declare-const rbx24 t__ref3)

(declare-const rsp49 t__ref3)

(declare-const rbp24 t__ref3)

(declare-const rdi31 t__ref3)

(declare-const zeroflag25 Bool)

(declare-const carryflag25 Bool)

(declare-const signflag25 Bool)

(declare-const overflowflag25 Bool)

(declare-const xmm025 (_ BitVec 64))

(declare-const rax25 (_ BitVec 64))

(declare-const rbx25 (_ BitVec 64))

(declare-const rsp50 (_ BitVec 64))

(declare-const rbp25 (_ BitVec 64))

(declare-const rdi32 (_ BitVec 64))

(declare-const zeroflag26 bool__ref)

(declare-const carryflag26 bool__ref)

(declare-const signflag26 bool__ref)

(declare-const overflowflag26 bool__ref)

(declare-const xmm026 t__ref3)

(declare-const rax26 t__ref3)

(declare-const rbx26 t__ref3)

(declare-const rsp51 t__ref3)

(declare-const rbp26 t__ref3)

(declare-const rdi33 t__ref3)

(declare-const zeroflag27 Bool)

(declare-const carryflag27 Bool)

(declare-const signflag27 Bool)

(declare-const overflowflag27 Bool)

(declare-const xmm027 (_ BitVec 64))

(declare-const rax27 (_ BitVec 64))

(declare-const rbx27 (_ BitVec 64))

(declare-const rsp52 (_ BitVec 64))

(declare-const rbp27 (_ BitVec 64))

(declare-const rdi34 (_ BitVec 64))

(declare-const zeroflag28 bool__ref)

(declare-const carryflag28 bool__ref)

(declare-const signflag28 bool__ref)

(declare-const overflowflag28 bool__ref)

(declare-const xmm028 t__ref3)

(declare-const rax28 t__ref3)

(declare-const rbx28 t__ref3)

(declare-const rsp53 t__ref3)

(declare-const rbp28 t__ref3)

(declare-const rdi35 t__ref3)

(declare-const zeroflag29 Bool)

(declare-const carryflag29 Bool)

(declare-const signflag29 Bool)

(declare-const overflowflag29 Bool)

(declare-const xmm029 (_ BitVec 64))

(declare-const rax29 (_ BitVec 64))

(declare-const rbx29 (_ BitVec 64))

(declare-const rsp54 (_ BitVec 64))

(declare-const rbp29 (_ BitVec 64))

(declare-const rdi36 (_ BitVec 64))

(declare-const zeroflag30 bool__ref)

(declare-const carryflag30 bool__ref)

(declare-const signflag30 bool__ref)

(declare-const overflowflag30 bool__ref)

(declare-const xmm030 t__ref3)

(declare-const rax30 t__ref3)

(declare-const rbx30 t__ref3)

(declare-const rsp55 t__ref3)

(declare-const rbp30 t__ref3)

(declare-const rdi37 t__ref3)

(declare-const zeroflag31 Bool)

(declare-const carryflag31 Bool)

(declare-const signflag31 Bool)

(declare-const overflowflag31 Bool)

(declare-const xmm031 (_ BitVec 64))

(declare-const rax31 (_ BitVec 64))

(declare-const rbx31 (_ BitVec 64))

(declare-const rsp56 (_ BitVec 64))

(declare-const rbp31 (_ BitVec 64))

(declare-const rdi38 (_ BitVec 64))

(declare-const rdi39 (_ BitVec 64))

(declare-const rbx32 (_ BitVec 64))

(declare-const result91 t__ref3)

(declare-const rbp32 (_ BitVec 64))

(declare-const result92 t__ref3)

(declare-const rsp57 (_ BitVec 64))

(declare-const rsp58 (_ BitVec 64))

(declare-const result93 t__ref3)

(declare-const xmm24 (_ BitVec 64))

(declare-const result94 t__ref3)

(declare-const rsi5 (_ BitVec 64))

(declare-const result95 t__ref3)

(declare-const rdi40 (_ BitVec 64))

(declare-const result96 t__ref3)

(declare-const xmm34 (_ BitVec 64))

(declare-const result97 t__ref3)

(declare-const xmm14 (_ BitVec 64))

(declare-const result98 t__ref3)

(declare-const xmm032 (_ BitVec 64))

(declare-const result99 t__ref3)

(declare-const rsp59 (_ BitVec 64))

(declare-const rsp60 (_ BitVec 64))

(declare-const rax32 (_ BitVec 64))

(declare-const rdi41 (_ BitVec 64))

(declare-const result100 t__ref3)

(declare-const rsp61 (_ BitVec 64))

(declare-const rsp62 (_ BitVec 64))

(declare-const rdx1 (_ BitVec 64))

(declare-const result101 bool__ref)

(declare-const zeroflag32 Bool)

(declare-const result102 bool__ref)

(declare-const signflag32 Bool)

(declare-const result103 bool__ref)

(declare-const carryflag32 Bool)

(declare-const result104 bool__ref)

(declare-const overflowflag32 Bool)

(declare-const zeroflag33 Bool)

(declare-const carryflag33 Bool)

(declare-const signflag33 Bool)

(declare-const overflowflag33 Bool)

(declare-const xmm033 (_ BitVec 64))

(declare-const rax33 (_ BitVec 64))

(declare-const rbx33 (_ BitVec 64))

(declare-const rsp63 (_ BitVec 64))

(declare-const rbp33 (_ BitVec 64))

(declare-const rdi42 (_ BitVec 64))

(declare-const result105 t__ref3)

(declare-const xmm034 (_ BitVec 64))

(declare-const rdi43 (_ BitVec 64))

(declare-const rax34 (_ BitVec 64))

(declare-const rbx34 (_ BitVec 64))

(declare-const result106 t__ref3)

(declare-const rbp34 (_ BitVec 64))

(declare-const result107 t__ref3)

(declare-const rsp64 (_ BitVec 64))

(declare-const rsp65 (_ BitVec 64))

(declare-const result108 bool__ref)

(declare-const zeroflag34 Bool)

(declare-const result109 bool__ref)

(declare-const signflag34 Bool)

(declare-const result110 bool__ref)

(declare-const carryflag34 Bool)

(declare-const result111 Bool)

(declare-const result112 Bool)

(declare-const result113 bool__ref)

(declare-const overflowflag34 Bool)

(declare-const zeroflag35 bool__ref)

(declare-const carryflag35 bool__ref)

(declare-const signflag35 bool__ref)

(declare-const overflowflag35 bool__ref)

(declare-const xmm035 t__ref3)

(declare-const rax35 t__ref3)

(declare-const rbx35 t__ref3)

(declare-const rsp66 t__ref3)

(declare-const rbp35 t__ref3)

(declare-const rdi44 t__ref3)

(declare-const zeroflag36 Bool)

(declare-const carryflag36 Bool)

(declare-const signflag36 Bool)

(declare-const overflowflag36 Bool)

(declare-const xmm036 (_ BitVec 64))

(declare-const rax36 (_ BitVec 64))

(declare-const rbx36 (_ BitVec 64))

(declare-const rsp67 (_ BitVec 64))

(declare-const rbp36 (_ BitVec 64))

(declare-const rdi45 (_ BitVec 64))

(declare-const zeroflag37 bool__ref)

(declare-const carryflag37 bool__ref)

(declare-const signflag37 bool__ref)

(declare-const overflowflag37 bool__ref)

(declare-const xmm037 t__ref3)

(declare-const rax37 t__ref3)

(declare-const rbx37 t__ref3)

(declare-const rsp68 t__ref3)

(declare-const rbp37 t__ref3)

(declare-const rdi46 t__ref3)

(declare-const zeroflag38 Bool)

(declare-const carryflag38 Bool)

(declare-const signflag38 Bool)

(declare-const overflowflag38 Bool)

(declare-const xmm038 (_ BitVec 64))

(declare-const rax38 (_ BitVec 64))

(declare-const rbx38 (_ BitVec 64))

(declare-const rsp69 (_ BitVec 64))

(declare-const rbp38 (_ BitVec 64))

(declare-const rdi47 (_ BitVec 64))

(declare-const zeroflag39 bool__ref)

(declare-const carryflag39 bool__ref)

(declare-const signflag39 bool__ref)

(declare-const overflowflag39 bool__ref)

(declare-const xmm039 t__ref3)

(declare-const rax39 t__ref3)

(declare-const rbx39 t__ref3)

(declare-const rsp70 t__ref3)

(declare-const rbp39 t__ref3)

(declare-const rdi48 t__ref3)

(declare-const zeroflag40 Bool)

(declare-const carryflag40 Bool)

(declare-const signflag40 Bool)

(declare-const overflowflag40 Bool)

(declare-const xmm040 (_ BitVec 64))

(declare-const rax40 (_ BitVec 64))

(declare-const rbx40 (_ BitVec 64))

(declare-const rsp71 (_ BitVec 64))

(declare-const rbp40 (_ BitVec 64))

(declare-const rdi49 (_ BitVec 64))

(declare-const zeroflag41 bool__ref)

(declare-const carryflag41 bool__ref)

(declare-const signflag41 bool__ref)

(declare-const overflowflag41 bool__ref)

(declare-const xmm041 t__ref3)

(declare-const rax41 t__ref3)

(declare-const rbx41 t__ref3)

(declare-const rsp72 t__ref3)

(declare-const rbp41 t__ref3)

(declare-const rdi50 t__ref3)

(declare-const zeroflag42 Bool)

(declare-const carryflag42 Bool)

(declare-const signflag42 Bool)

(declare-const overflowflag42 Bool)

(declare-const xmm042 (_ BitVec 64))

(declare-const rax42 (_ BitVec 64))

(declare-const rbx42 (_ BitVec 64))

(declare-const rsp73 (_ BitVec 64))

(declare-const rbp42 (_ BitVec 64))

(declare-const rdi51 (_ BitVec 64))

(declare-const rdi52 (_ BitVec 64))

(declare-const result114 t__ref3)

(declare-const r151 (_ BitVec 64))

(declare-const result115 t__ref3)

(declare-const rsp74 (_ BitVec 64))

(declare-const rsp75 (_ BitVec 64))

(declare-const result116 t__ref3)

(declare-const xmm61 (_ BitVec 64))

(declare-const memory7 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag43 Bool)

(declare-const carryflag43 Bool)

(declare-const signflag43 Bool)

(declare-const overflowflag43 Bool)

(declare-const xmm043 (_ BitVec 64))

(declare-const xmm15 (_ BitVec 64))

(declare-const xmm25 (_ BitVec 64))

(declare-const xmm35 (_ BitVec 64))

(declare-const xmm41 (_ BitVec 64))

(declare-const xmm51 (_ BitVec 64))

(declare-const xmm62 (_ BitVec 64))

(declare-const xmm71 (_ BitVec 64))

(declare-const rax43 (_ BitVec 64))

(declare-const rbx43 (_ BitVec 64))

(declare-const rsp76 (_ BitVec 64))

(declare-const rbp43 (_ BitVec 64))

(declare-const rsi6 (_ BitVec 64))

(declare-const rdi53 (_ BitVec 64))

(declare-const r121 (_ BitVec 64))

(declare-const r131 (_ BitVec 64))

(declare-const r141 (_ BitVec 64))

(declare-const r152 (_ BitVec 64))

(declare-const memory8 (Array (_ BitVec 64) unsigned8))

(declare-const result117 t__ref3)

(declare-const xmm72 (_ BitVec 64))

(declare-const result118 t__ref3)

(declare-const r142 (_ BitVec 64))

(declare-const memory9 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag44 Bool)

(declare-const carryflag44 Bool)

(declare-const signflag44 Bool)

(declare-const overflowflag44 Bool)

(declare-const xmm044 (_ BitVec 64))

(declare-const xmm16 (_ BitVec 64))

(declare-const xmm26 (_ BitVec 64))

(declare-const xmm36 (_ BitVec 64))

(declare-const xmm42 (_ BitVec 64))

(declare-const xmm52 (_ BitVec 64))

(declare-const xmm63 (_ BitVec 64))

(declare-const xmm73 (_ BitVec 64))

(declare-const rax44 (_ BitVec 64))

(declare-const rbx44 (_ BitVec 64))

(declare-const rsp77 (_ BitVec 64))

(declare-const rbp44 (_ BitVec 64))

(declare-const rsi7 (_ BitVec 64))

(declare-const rdi54 (_ BitVec 64))

(declare-const r122 (_ BitVec 64))

(declare-const r132 (_ BitVec 64))

(declare-const r143 (_ BitVec 64))

(declare-const memory10 (Array (_ BitVec 64) unsigned8))

(declare-const result119 t__ref3)

(declare-const xmm74 (_ BitVec 64))

(declare-const result120 t__ref3)

(declare-const r133 (_ BitVec 64))

(declare-const memory11 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag45 Bool)

(declare-const carryflag45 Bool)

(declare-const signflag45 Bool)

(declare-const overflowflag45 Bool)

(declare-const xmm045 (_ BitVec 64))

(declare-const xmm17 (_ BitVec 64))

(declare-const xmm27 (_ BitVec 64))

(declare-const xmm37 (_ BitVec 64))

(declare-const xmm43 (_ BitVec 64))

(declare-const xmm53 (_ BitVec 64))

(declare-const xmm75 (_ BitVec 64))

(declare-const rax45 (_ BitVec 64))

(declare-const rbx45 (_ BitVec 64))

(declare-const rsp78 (_ BitVec 64))

(declare-const rbp45 (_ BitVec 64))

(declare-const rsi8 (_ BitVec 64))

(declare-const rdi55 (_ BitVec 64))

(declare-const r123 (_ BitVec 64))

(declare-const r134 (_ BitVec 64))

(declare-const memory12 (Array (_ BitVec 64) unsigned8))

(declare-const result121 t__ref3)

(declare-const xmm76 (_ BitVec 64))

(declare-const result122 t__ref3)

(declare-const r124 (_ BitVec 64))

(declare-const memory13 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag46 Bool)

(declare-const carryflag46 Bool)

(declare-const signflag46 Bool)

(declare-const overflowflag46 Bool)

(declare-const xmm046 (_ BitVec 64))

(declare-const xmm18 (_ BitVec 64))

(declare-const xmm28 (_ BitVec 64))

(declare-const xmm38 (_ BitVec 64))

(declare-const xmm44 (_ BitVec 64))

(declare-const rax46 (_ BitVec 64))

(declare-const rbx46 (_ BitVec 64))

(declare-const rsp79 (_ BitVec 64))

(declare-const rbp46 (_ BitVec 64))

(declare-const rsi9 (_ BitVec 64))

(declare-const rdi56 (_ BitVec 64))

(declare-const r125 (_ BitVec 64))

(declare-const memory14 (Array (_ BitVec 64) unsigned8))

(declare-const result123 t__ref3)

(declare-const rsi10 (_ BitVec 64))

(declare-const result124 t__ref3)

(declare-const rdi57 (_ BitVec 64))

(declare-const rbx47 (_ BitVec 64))

(declare-const result125 t__ref3)

(declare-const xmm39 (_ BitVec 64))

(declare-const result126 t__ref3)

(declare-const rbp47 (_ BitVec 64))

(declare-const result127 t__ref3)

(declare-const xmm29 (_ BitVec 64))

(declare-const result128 t__ref3)

(declare-const xmm19 (_ BitVec 64))

(declare-const result129 t__ref3)

(declare-const xmm047 (_ BitVec 64))

(declare-const result130 t__ref3)

(declare-const rsp80 (_ BitVec 64))

(declare-const rsp81 (_ BitVec 64))

(declare-const rax47 (_ BitVec 64))

(declare-const rdi58 (_ BitVec 64))

(declare-const result131 t__ref3)

(declare-const rsp82 (_ BitVec 64))

(declare-const rsp83 (_ BitVec 64))

(declare-const rax48 (_ BitVec 64))

(declare-const result132 bool__ref)

(declare-const zeroflag47 Bool)

(declare-const result133 bool__ref)

(declare-const signflag47 Bool)

(declare-const result134 bool__ref)

(declare-const carryflag47 Bool)

(declare-const result135 bool__ref)

(declare-const overflowflag47 Bool)

(declare-const zeroflag48 Bool)

(declare-const carryflag48 Bool)

(declare-const signflag48 Bool)

(declare-const overflowflag48 Bool)

(declare-const xmm048 (_ BitVec 64))

(declare-const rax49 (_ BitVec 64))

(declare-const rbx48 (_ BitVec 64))

(declare-const rsp84 (_ BitVec 64))

(declare-const rbp48 (_ BitVec 64))

(declare-const rdi59 (_ BitVec 64))

(declare-const result136 t__ref3)

(declare-const xmm049 (_ BitVec 64))

(declare-const rdi60 (_ BitVec 64))

(declare-const rax50 (_ BitVec 64))

(declare-const rbx49 (_ BitVec 64))

(declare-const result137 t__ref3)

(declare-const rbp49 (_ BitVec 64))

(declare-const result138 t__ref3)

(declare-const rsp85 (_ BitVec 64))

(declare-const rsp86 (_ BitVec 64))

(declare-const result139 bool__ref)

(declare-const zeroflag49 Bool)

(declare-const result140 bool__ref)

(declare-const signflag49 Bool)

(declare-const result141 bool__ref)

(declare-const carryflag49 Bool)

(declare-const result142 Bool)

(declare-const result143 Bool)

(declare-const result144 bool__ref)

(declare-const overflowflag49 Bool)

(declare-const zeroflag50 bool__ref)

(declare-const carryflag50 bool__ref)

(declare-const signflag50 bool__ref)

(declare-const overflowflag50 bool__ref)

(declare-const xmm050 t__ref3)

(declare-const rax51 t__ref3)

(declare-const rbx50 t__ref3)

(declare-const rsp87 t__ref3)

(declare-const rbp50 t__ref3)

(declare-const rdi61 t__ref3)

(declare-const zeroflag51 Bool)

(declare-const carryflag51 Bool)

(declare-const signflag51 Bool)

(declare-const overflowflag51 Bool)

(declare-const xmm051 (_ BitVec 64))

(declare-const rax52 (_ BitVec 64))

(declare-const rbx51 (_ BitVec 64))

(declare-const rsp88 (_ BitVec 64))

(declare-const rbp51 (_ BitVec 64))

(declare-const rdi62 (_ BitVec 64))

(declare-const zeroflag52 bool__ref)

(declare-const carryflag52 bool__ref)

(declare-const signflag52 bool__ref)

(declare-const overflowflag52 bool__ref)

(declare-const xmm052 t__ref3)

(declare-const rax53 t__ref3)

(declare-const rbx52 t__ref3)

(declare-const rsp89 t__ref3)

(declare-const rbp52 t__ref3)

(declare-const rdi63 t__ref3)

(declare-const zeroflag53 Bool)

(declare-const carryflag53 Bool)

(declare-const signflag53 Bool)

(declare-const overflowflag53 Bool)

(declare-const xmm053 (_ BitVec 64))

(declare-const rax54 (_ BitVec 64))

(declare-const rbx53 (_ BitVec 64))

(declare-const rsp90 (_ BitVec 64))

(declare-const rbp53 (_ BitVec 64))

(declare-const rdi64 (_ BitVec 64))

(declare-const zeroflag54 bool__ref)

(declare-const carryflag54 bool__ref)

(declare-const signflag54 bool__ref)

(declare-const overflowflag54 bool__ref)

(declare-const xmm054 t__ref3)

(declare-const rax55 t__ref3)

(declare-const rbx54 t__ref3)

(declare-const rsp91 t__ref3)

(declare-const rbp54 t__ref3)

(declare-const rdi65 t__ref3)

(declare-const zeroflag55 Bool)

(declare-const carryflag55 Bool)

(declare-const signflag55 Bool)

(declare-const overflowflag55 Bool)

(declare-const xmm055 (_ BitVec 64))

(declare-const rax56 (_ BitVec 64))

(declare-const rbx55 (_ BitVec 64))

(declare-const rsp92 (_ BitVec 64))

(declare-const rbp55 (_ BitVec 64))

(declare-const rdi66 (_ BitVec 64))

(declare-const zeroflag56 bool__ref)

(declare-const carryflag56 bool__ref)

(declare-const signflag56 bool__ref)

(declare-const overflowflag56 bool__ref)

(declare-const xmm056 t__ref3)

(declare-const rax57 t__ref3)

(declare-const rbx56 t__ref3)

(declare-const rsp93 t__ref3)

(declare-const rbp56 t__ref3)

(declare-const rdi67 t__ref3)

(declare-const zeroflag57 Bool)

(declare-const carryflag57 Bool)

(declare-const signflag57 Bool)

(declare-const overflowflag57 Bool)

(declare-const xmm057 (_ BitVec 64))

(declare-const rax58 (_ BitVec 64))

(declare-const rbx57 (_ BitVec 64))

(declare-const rsp94 (_ BitVec 64))

(declare-const rbp57 (_ BitVec 64))

(declare-const rdi68 (_ BitVec 64))

(declare-const rdi69 (_ BitVec 64))

(declare-const result145 t__ref3)

(declare-const rsp95 (_ BitVec 64))

(declare-const rsp96 (_ BitVec 64))

(declare-const result146 t__ref3)

(declare-const xmm45 (_ BitVec 64))

(declare-const result147 t__ref3)

(declare-const r126 (_ BitVec 64))

(declare-const result148 bool__ref)

(declare-const zeroflag58 Bool)

(declare-const result149 t__ref3)

(declare-const xmm46 (_ BitVec 64))

(declare-const memory15 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag59 bool__ref)

(declare-const carryflag58 bool__ref)

(declare-const signflag58 bool__ref)

(declare-const overflowflag58 bool__ref)

(declare-const xmm058 t__ref3)

(declare-const xmm110 t__ref3)

(declare-const xmm210 t__ref3)

(declare-const xmm310 t__ref3)

(declare-const xmm47 t__ref3)

(declare-const rax59 t__ref3)

(declare-const rbx58 t__ref3)

(declare-const rsp97 t__ref3)

(declare-const rbp58 t__ref3)

(declare-const rsi11 t__ref3)

(declare-const rdi70 t__ref3)

(declare-const r127 t__ref3)

(declare-const memory16 map__ref)

(declare-const zeroflag60 Bool)

(declare-const carryflag59 Bool)

(declare-const signflag59 Bool)

(declare-const overflowflag59 Bool)

(declare-const xmm059 (_ BitVec 64))

(declare-const xmm111 (_ BitVec 64))

(declare-const xmm211 (_ BitVec 64))

(declare-const xmm311 (_ BitVec 64))

(declare-const xmm48 (_ BitVec 64))

(declare-const rax60 (_ BitVec 64))

(declare-const rbx59 (_ BitVec 64))

(declare-const rsp98 (_ BitVec 64))

(declare-const rbp59 (_ BitVec 64))

(declare-const rsi12 (_ BitVec 64))

(declare-const rdi71 (_ BitVec 64))

(declare-const r128 (_ BitVec 64))

(declare-const memory17 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag61 bool__ref)

(declare-const carryflag60 bool__ref)

(declare-const signflag60 bool__ref)

(declare-const overflowflag60 bool__ref)

(declare-const xmm060 t__ref3)

(declare-const xmm112 t__ref3)

(declare-const xmm212 t__ref3)

(declare-const xmm312 t__ref3)

(declare-const xmm49 t__ref3)

(declare-const rax61 t__ref3)

(declare-const rbx60 t__ref3)

(declare-const rsp99 t__ref3)

(declare-const rbp60 t__ref3)

(declare-const rsi13 t__ref3)

(declare-const rdi72 t__ref3)

(declare-const r129 t__ref3)

(declare-const memory18 map__ref)

(declare-const zeroflag62 Bool)

(declare-const carryflag61 Bool)

(declare-const signflag61 Bool)

(declare-const overflowflag61 Bool)

(declare-const xmm061 (_ BitVec 64))

(declare-const xmm113 (_ BitVec 64))

(declare-const xmm213 (_ BitVec 64))

(declare-const xmm313 (_ BitVec 64))

(declare-const xmm410 (_ BitVec 64))

(declare-const rax62 (_ BitVec 64))

(declare-const rbx61 (_ BitVec 64))

(declare-const rsp100 (_ BitVec 64))

(declare-const rbp61 (_ BitVec 64))

(declare-const rsi14 (_ BitVec 64))

(declare-const rdi73 (_ BitVec 64))

(declare-const r1210 (_ BitVec 64))

(declare-const memory19 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag63 bool__ref)

(declare-const carryflag62 bool__ref)

(declare-const signflag62 bool__ref)

(declare-const overflowflag62 bool__ref)

(declare-const xmm062 t__ref3)

(declare-const xmm114 t__ref3)

(declare-const xmm214 t__ref3)

(declare-const xmm314 t__ref3)

(declare-const xmm411 t__ref3)

(declare-const rax63 t__ref3)

(declare-const rbx62 t__ref3)

(declare-const rsp101 t__ref3)

(declare-const rbp62 t__ref3)

(declare-const rsi15 t__ref3)

(declare-const rdi74 t__ref3)

(declare-const r1211 t__ref3)

(declare-const memory20 map__ref)

(declare-const zeroflag64 Bool)

(declare-const carryflag63 Bool)

(declare-const signflag63 Bool)

(declare-const overflowflag63 Bool)

(declare-const xmm063 (_ BitVec 64))

(declare-const xmm115 (_ BitVec 64))

(declare-const xmm215 (_ BitVec 64))

(declare-const xmm315 (_ BitVec 64))

(declare-const xmm412 (_ BitVec 64))

(declare-const rax64 (_ BitVec 64))

(declare-const rbx63 (_ BitVec 64))

(declare-const rsp102 (_ BitVec 64))

(declare-const rbp63 (_ BitVec 64))

(declare-const rsi16 (_ BitVec 64))

(declare-const rdi75 (_ BitVec 64))

(declare-const r1212 (_ BitVec 64))

(declare-const memory21 (Array (_ BitVec 64) unsigned8))

(declare-const result150 t__ref3)

(declare-const xmm54 (_ BitVec 64))

(declare-const result151 t__ref3)

(declare-const r135 (_ BitVec 64))

(declare-const result152 bool__ref)

(declare-const zeroflag65 Bool)

(declare-const result153 t__ref3)

(declare-const xmm55 (_ BitVec 64))

(declare-const memory22 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag66 bool__ref)

(declare-const carryflag64 bool__ref)

(declare-const signflag64 bool__ref)

(declare-const overflowflag64 bool__ref)

(declare-const xmm064 t__ref3)

(declare-const xmm116 t__ref3)

(declare-const xmm216 t__ref3)

(declare-const xmm316 t__ref3)

(declare-const xmm413 t__ref3)

(declare-const xmm56 t__ref3)

(declare-const xmm77 t__ref3)

(declare-const rax65 t__ref3)

(declare-const rbx64 t__ref3)

(declare-const rsp103 t__ref3)

(declare-const rbp64 t__ref3)

(declare-const rsi17 t__ref3)

(declare-const rdi76 t__ref3)

(declare-const r1213 t__ref3)

(declare-const r136 t__ref3)

(declare-const memory23 map__ref)

(declare-const zeroflag67 Bool)

(declare-const carryflag65 Bool)

(declare-const signflag65 Bool)

(declare-const overflowflag65 Bool)

(declare-const xmm065 (_ BitVec 64))

(declare-const xmm117 (_ BitVec 64))

(declare-const xmm217 (_ BitVec 64))

(declare-const xmm317 (_ BitVec 64))

(declare-const xmm414 (_ BitVec 64))

(declare-const xmm57 (_ BitVec 64))

(declare-const xmm78 (_ BitVec 64))

(declare-const rax66 (_ BitVec 64))

(declare-const rbx65 (_ BitVec 64))

(declare-const rsp104 (_ BitVec 64))

(declare-const rbp65 (_ BitVec 64))

(declare-const rsi18 (_ BitVec 64))

(declare-const rdi77 (_ BitVec 64))

(declare-const r1214 (_ BitVec 64))

(declare-const r137 (_ BitVec 64))

(declare-const memory24 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag68 bool__ref)

(declare-const carryflag66 bool__ref)

(declare-const signflag66 bool__ref)

(declare-const overflowflag66 bool__ref)

(declare-const xmm066 t__ref3)

(declare-const xmm118 t__ref3)

(declare-const xmm218 t__ref3)

(declare-const xmm318 t__ref3)

(declare-const xmm415 t__ref3)

(declare-const xmm58 t__ref3)

(declare-const xmm79 t__ref3)

(declare-const rax67 t__ref3)

(declare-const rbx66 t__ref3)

(declare-const rsp105 t__ref3)

(declare-const rbp66 t__ref3)

(declare-const rsi19 t__ref3)

(declare-const rdi78 t__ref3)

(declare-const r1215 t__ref3)

(declare-const r138 t__ref3)

(declare-const memory25 map__ref)

(declare-const zeroflag69 Bool)

(declare-const carryflag67 Bool)

(declare-const signflag67 Bool)

(declare-const overflowflag67 Bool)

(declare-const xmm067 (_ BitVec 64))

(declare-const xmm119 (_ BitVec 64))

(declare-const xmm219 (_ BitVec 64))

(declare-const xmm319 (_ BitVec 64))

(declare-const xmm416 (_ BitVec 64))

(declare-const xmm59 (_ BitVec 64))

(declare-const xmm710 (_ BitVec 64))

(declare-const rax68 (_ BitVec 64))

(declare-const rbx67 (_ BitVec 64))

(declare-const rsp106 (_ BitVec 64))

(declare-const rbp67 (_ BitVec 64))

(declare-const rsi20 (_ BitVec 64))

(declare-const rdi79 (_ BitVec 64))

(declare-const r1216 (_ BitVec 64))

(declare-const r139 (_ BitVec 64))

(declare-const memory26 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag70 bool__ref)

(declare-const carryflag68 bool__ref)

(declare-const signflag68 bool__ref)

(declare-const overflowflag68 bool__ref)

(declare-const xmm068 t__ref3)

(declare-const xmm120 t__ref3)

(declare-const xmm220 t__ref3)

(declare-const xmm320 t__ref3)

(declare-const xmm417 t__ref3)

(declare-const xmm510 t__ref3)

(declare-const xmm711 t__ref3)

(declare-const rax69 t__ref3)

(declare-const rbx68 t__ref3)

(declare-const rsp107 t__ref3)

(declare-const rbp68 t__ref3)

(declare-const rsi21 t__ref3)

(declare-const rdi80 t__ref3)

(declare-const r1217 t__ref3)

(declare-const r1310 t__ref3)

(declare-const memory27 map__ref)

(declare-const zeroflag71 Bool)

(declare-const carryflag69 Bool)

(declare-const signflag69 Bool)

(declare-const overflowflag69 Bool)

(declare-const xmm069 (_ BitVec 64))

(declare-const xmm121 (_ BitVec 64))

(declare-const xmm221 (_ BitVec 64))

(declare-const xmm321 (_ BitVec 64))

(declare-const xmm418 (_ BitVec 64))

(declare-const xmm511 (_ BitVec 64))

(declare-const xmm712 (_ BitVec 64))

(declare-const rax70 (_ BitVec 64))

(declare-const rbx69 (_ BitVec 64))

(declare-const rsp108 (_ BitVec 64))

(declare-const rbp69 (_ BitVec 64))

(declare-const rsi22 (_ BitVec 64))

(declare-const rdi81 (_ BitVec 64))

(declare-const r1218 (_ BitVec 64))

(declare-const r1311 (_ BitVec 64))

(declare-const memory28 (Array (_ BitVec 64) unsigned8))

(declare-const result154 t__ref3)

(declare-const xmm64 (_ BitVec 64))

(declare-const result155 t__ref3)

(declare-const r144 (_ BitVec 64))

(declare-const result156 bool__ref)

(declare-const zeroflag72 Bool)

(declare-const result157 t__ref3)

(declare-const xmm65 (_ BitVec 64))

(declare-const memory29 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag73 bool__ref)

(declare-const carryflag70 bool__ref)

(declare-const signflag70 bool__ref)

(declare-const overflowflag70 bool__ref)

(declare-const xmm070 t__ref3)

(declare-const xmm122 t__ref3)

(declare-const xmm222 t__ref3)

(declare-const xmm322 t__ref3)

(declare-const xmm419 t__ref3)

(declare-const xmm512 t__ref3)

(declare-const xmm66 t__ref3)

(declare-const xmm713 t__ref3)

(declare-const rax71 t__ref3)

(declare-const rbx70 t__ref3)

(declare-const rsp109 t__ref3)

(declare-const rbp70 t__ref3)

(declare-const rsi23 t__ref3)

(declare-const rdi82 t__ref3)

(declare-const r1219 t__ref3)

(declare-const r1312 t__ref3)

(declare-const r145 t__ref3)

(declare-const memory30 map__ref)

(declare-const zeroflag74 Bool)

(declare-const carryflag71 Bool)

(declare-const signflag71 Bool)

(declare-const overflowflag71 Bool)

(declare-const xmm071 (_ BitVec 64))

(declare-const xmm123 (_ BitVec 64))

(declare-const xmm223 (_ BitVec 64))

(declare-const xmm323 (_ BitVec 64))

(declare-const xmm420 (_ BitVec 64))

(declare-const xmm513 (_ BitVec 64))

(declare-const xmm67 (_ BitVec 64))

(declare-const xmm714 (_ BitVec 64))

(declare-const rax72 (_ BitVec 64))

(declare-const rbx71 (_ BitVec 64))

(declare-const rsp110 (_ BitVec 64))

(declare-const rbp71 (_ BitVec 64))

(declare-const rsi24 (_ BitVec 64))

(declare-const rdi83 (_ BitVec 64))

(declare-const r1220 (_ BitVec 64))

(declare-const r1313 (_ BitVec 64))

(declare-const r146 (_ BitVec 64))

(declare-const memory31 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag75 bool__ref)

(declare-const carryflag72 bool__ref)

(declare-const signflag72 bool__ref)

(declare-const overflowflag72 bool__ref)

(declare-const xmm072 t__ref3)

(declare-const xmm124 t__ref3)

(declare-const xmm224 t__ref3)

(declare-const xmm324 t__ref3)

(declare-const xmm421 t__ref3)

(declare-const xmm514 t__ref3)

(declare-const xmm68 t__ref3)

(declare-const xmm715 t__ref3)

(declare-const rax73 t__ref3)

(declare-const rbx72 t__ref3)

(declare-const rsp111 t__ref3)

(declare-const rbp72 t__ref3)

(declare-const rsi25 t__ref3)

(declare-const rdi84 t__ref3)

(declare-const r1221 t__ref3)

(declare-const r1314 t__ref3)

(declare-const r147 t__ref3)

(declare-const memory32 map__ref)

(declare-const zeroflag76 Bool)

(declare-const carryflag73 Bool)

(declare-const signflag73 Bool)

(declare-const overflowflag73 Bool)

(declare-const xmm073 (_ BitVec 64))

(declare-const xmm125 (_ BitVec 64))

(declare-const xmm225 (_ BitVec 64))

(declare-const xmm325 (_ BitVec 64))

(declare-const xmm422 (_ BitVec 64))

(declare-const xmm515 (_ BitVec 64))

(declare-const xmm69 (_ BitVec 64))

(declare-const xmm716 (_ BitVec 64))

(declare-const rax74 (_ BitVec 64))

(declare-const rbx73 (_ BitVec 64))

(declare-const rsp112 (_ BitVec 64))

(declare-const rbp73 (_ BitVec 64))

(declare-const rsi26 (_ BitVec 64))

(declare-const rdi85 (_ BitVec 64))

(declare-const r1222 (_ BitVec 64))

(declare-const r1315 (_ BitVec 64))

(declare-const r148 (_ BitVec 64))

(declare-const memory33 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag77 bool__ref)

(declare-const carryflag74 bool__ref)

(declare-const signflag74 bool__ref)

(declare-const overflowflag74 bool__ref)

(declare-const xmm074 t__ref3)

(declare-const xmm126 t__ref3)

(declare-const xmm226 t__ref3)

(declare-const xmm326 t__ref3)

(declare-const xmm423 t__ref3)

(declare-const xmm516 t__ref3)

(declare-const xmm610 t__ref3)

(declare-const xmm717 t__ref3)

(declare-const rax75 t__ref3)

(declare-const rbx74 t__ref3)

(declare-const rsp113 t__ref3)

(declare-const rbp74 t__ref3)

(declare-const rsi27 t__ref3)

(declare-const rdi86 t__ref3)

(declare-const r1223 t__ref3)

(declare-const r1316 t__ref3)

(declare-const r149 t__ref3)

(declare-const memory34 map__ref)

(declare-const zeroflag78 Bool)

(declare-const carryflag75 Bool)

(declare-const signflag75 Bool)

(declare-const overflowflag75 Bool)

(declare-const xmm075 (_ BitVec 64))

(declare-const xmm127 (_ BitVec 64))

(declare-const xmm227 (_ BitVec 64))

(declare-const xmm327 (_ BitVec 64))

(declare-const xmm424 (_ BitVec 64))

(declare-const xmm517 (_ BitVec 64))

(declare-const xmm611 (_ BitVec 64))

(declare-const xmm718 (_ BitVec 64))

(declare-const rax76 (_ BitVec 64))

(declare-const rbx75 (_ BitVec 64))

(declare-const rsp114 (_ BitVec 64))

(declare-const rbp75 (_ BitVec 64))

(declare-const rsi28 (_ BitVec 64))

(declare-const rdi87 (_ BitVec 64))

(declare-const r1224 (_ BitVec 64))

(declare-const r1317 (_ BitVec 64))

(declare-const r1410 (_ BitVec 64))

(declare-const memory35 (Array (_ BitVec 64) unsigned8))

(declare-const result158 t__ref3)

(declare-const xmm719 (_ BitVec 64))

(declare-const result159 t__ref3)

(declare-const r153 (_ BitVec 64))

(declare-const result160 bool__ref)

(declare-const zeroflag79 Bool)

(declare-const result161 t__ref3)

(declare-const xmm720 (_ BitVec 64))

(declare-const memory36 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag80 bool__ref)

(declare-const carryflag76 bool__ref)

(declare-const signflag76 bool__ref)

(declare-const overflowflag76 bool__ref)

(declare-const xmm076 t__ref3)

(declare-const xmm128 t__ref3)

(declare-const xmm228 t__ref3)

(declare-const xmm328 t__ref3)

(declare-const xmm425 t__ref3)

(declare-const xmm518 t__ref3)

(declare-const xmm612 t__ref3)

(declare-const xmm721 t__ref3)

(declare-const rax77 t__ref3)

(declare-const rbx76 t__ref3)

(declare-const rsp115 t__ref3)

(declare-const rbp76 t__ref3)

(declare-const rsi29 t__ref3)

(declare-const rdi88 t__ref3)

(declare-const r1225 t__ref3)

(declare-const r1318 t__ref3)

(declare-const r1411 t__ref3)

(declare-const r154 t__ref3)

(declare-const memory37 map__ref)

(declare-const zeroflag81 Bool)

(declare-const carryflag77 Bool)

(declare-const signflag77 Bool)

(declare-const overflowflag77 Bool)

(declare-const xmm077 (_ BitVec 64))

(declare-const xmm129 (_ BitVec 64))

(declare-const xmm229 (_ BitVec 64))

(declare-const xmm329 (_ BitVec 64))

(declare-const xmm426 (_ BitVec 64))

(declare-const xmm519 (_ BitVec 64))

(declare-const xmm613 (_ BitVec 64))

(declare-const xmm722 (_ BitVec 64))

(declare-const rax78 (_ BitVec 64))

(declare-const rbx77 (_ BitVec 64))

(declare-const rsp116 (_ BitVec 64))

(declare-const rbp77 (_ BitVec 64))

(declare-const rsi30 (_ BitVec 64))

(declare-const rdi89 (_ BitVec 64))

(declare-const r1226 (_ BitVec 64))

(declare-const r1319 (_ BitVec 64))

(declare-const r1412 (_ BitVec 64))

(declare-const r155 (_ BitVec 64))

(declare-const memory38 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag82 bool__ref)

(declare-const carryflag78 bool__ref)

(declare-const signflag78 bool__ref)

(declare-const overflowflag78 bool__ref)

(declare-const xmm078 t__ref3)

(declare-const xmm130 t__ref3)

(declare-const xmm230 t__ref3)

(declare-const xmm330 t__ref3)

(declare-const xmm427 t__ref3)

(declare-const xmm520 t__ref3)

(declare-const xmm614 t__ref3)

(declare-const xmm723 t__ref3)

(declare-const rax79 t__ref3)

(declare-const rbx78 t__ref3)

(declare-const rsp117 t__ref3)

(declare-const rbp78 t__ref3)

(declare-const rsi31 t__ref3)

(declare-const rdi90 t__ref3)

(declare-const r1227 t__ref3)

(declare-const r1320 t__ref3)

(declare-const r1413 t__ref3)

(declare-const r156 t__ref3)

(declare-const memory39 map__ref)

(declare-const zeroflag83 Bool)

(declare-const carryflag79 Bool)

(declare-const signflag79 Bool)

(declare-const overflowflag79 Bool)

(declare-const xmm079 (_ BitVec 64))

(declare-const xmm131 (_ BitVec 64))

(declare-const xmm231 (_ BitVec 64))

(declare-const xmm331 (_ BitVec 64))

(declare-const xmm428 (_ BitVec 64))

(declare-const xmm521 (_ BitVec 64))

(declare-const xmm615 (_ BitVec 64))

(declare-const xmm724 (_ BitVec 64))

(declare-const rax80 (_ BitVec 64))

(declare-const rbx79 (_ BitVec 64))

(declare-const rsp118 (_ BitVec 64))

(declare-const rbp79 (_ BitVec 64))

(declare-const rsi32 (_ BitVec 64))

(declare-const rdi91 (_ BitVec 64))

(declare-const r1228 (_ BitVec 64))

(declare-const r1321 (_ BitVec 64))

(declare-const r1414 (_ BitVec 64))

(declare-const r157 (_ BitVec 64))

(declare-const memory40 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag84 bool__ref)

(declare-const carryflag80 bool__ref)

(declare-const signflag80 bool__ref)

(declare-const overflowflag80 bool__ref)

(declare-const xmm080 t__ref3)

(declare-const xmm132 t__ref3)

(declare-const xmm232 t__ref3)

(declare-const xmm332 t__ref3)

(declare-const xmm429 t__ref3)

(declare-const xmm522 t__ref3)

(declare-const xmm616 t__ref3)

(declare-const xmm725 t__ref3)

(declare-const rax81 t__ref3)

(declare-const rbx80 t__ref3)

(declare-const rsp119 t__ref3)

(declare-const rbp80 t__ref3)

(declare-const rsi33 t__ref3)

(declare-const rdi92 t__ref3)

(declare-const r1229 t__ref3)

(declare-const r1322 t__ref3)

(declare-const r1415 t__ref3)

(declare-const r158 t__ref3)

(declare-const memory41 map__ref)

(declare-const zeroflag85 Bool)

(declare-const carryflag81 Bool)

(declare-const signflag81 Bool)

(declare-const overflowflag81 Bool)

(declare-const xmm081 (_ BitVec 64))

(declare-const xmm133 (_ BitVec 64))

(declare-const xmm233 (_ BitVec 64))

(declare-const xmm333 (_ BitVec 64))

(declare-const xmm430 (_ BitVec 64))

(declare-const xmm523 (_ BitVec 64))

(declare-const xmm617 (_ BitVec 64))

(declare-const xmm726 (_ BitVec 64))

(declare-const rax82 (_ BitVec 64))

(declare-const rbx81 (_ BitVec 64))

(declare-const rsp120 (_ BitVec 64))

(declare-const rbp81 (_ BitVec 64))

(declare-const rsi34 (_ BitVec 64))

(declare-const rdi93 (_ BitVec 64))

(declare-const r1230 (_ BitVec 64))

(declare-const r1323 (_ BitVec 64))

(declare-const r1416 (_ BitVec 64))

(declare-const r159 (_ BitVec 64))

(declare-const memory42 (Array (_ BitVec 64) unsigned8))

(declare-const rdi94 (_ BitVec 64))

(declare-const rbx82 (_ BitVec 64))

(declare-const rax83 (_ BitVec 64))

(declare-const rcx2 (_ BitVec 64))

(declare-const rdx2 (_ BitVec 64))

(declare-const rbx83 (_ BitVec 64))

(declare-const rsp121 (_ BitVec 64))

(declare-const rbp82 (_ BitVec 64))

(declare-const rsi35 (_ BitVec 64))

(declare-const rdi95 (_ BitVec 64))

(declare-const r81 (_ BitVec 64))

(declare-const memory43 (Array (_ BitVec 64) unsigned8))

(declare-const result162 t__ref3)

(declare-const rsi36 (_ BitVec 64))

(declare-const rdi96 (_ BitVec 64))

(declare-const rbx84 (_ BitVec 64))

(declare-const result163 t__ref3)

(declare-const rsp122 (_ BitVec 64))

(declare-const exit_called Bool)

(declare-const carryflag82 Bool)

(declare-const signflag82 Bool)

(declare-const overflowflag82 Bool)

(declare-const rax84 (_ BitVec 64))

(declare-const rcx3 (_ BitVec 64))

(declare-const rdx3 (_ BitVec 64))

(declare-const rsp123 (_ BitVec 64))

(declare-const rdi97 (_ BitVec 64))

(declare-const r82 (_ BitVec 64))

(declare-const memory44 (Array (_ BitVec 64) unsigned8))

(declare-const rdx4 (_ BitVec 64))

(declare-const rsi37 (_ BitVec 64))

(declare-const rdi98 (_ BitVec 64))

(declare-const rax85 (_ BitVec 64))

(declare-const result164 t__ref3)

(declare-const rsp124 (_ BitVec 64))

(declare-const rsp125 (_ BitVec 64))

(declare-const rdi99 (_ BitVec 64))

(declare-const result165 t__ref3)

(declare-const rsp126 (_ BitVec 64))

(declare-const rsp127 (_ BitVec 64))

(declare-const result166 t__ref3)

(declare-const xmm234 (_ BitVec 64))

(declare-const xmm082 (_ BitVec 64))

(declare-const xmm134 (_ BitVec 64))

(declare-const xmm235 (_ BitVec 64))

(declare-const rax86 (_ BitVec 64))

(declare-const rbx85 (_ BitVec 64))

(declare-const rsp128 (_ BitVec 64))

(declare-const rbp83 (_ BitVec 64))

(declare-const rdi100 (_ BitVec 64))

(declare-const memory45 (Array (_ BitVec 64) unsigned8))

(declare-const rdi101 (_ BitVec 64))

(declare-const rbx86 (_ BitVec 64))

(declare-const result167 t__ref3)

(declare-const rsp129 (_ BitVec 64))

(declare-const rsp130 (_ BitVec 64))

(declare-const result168 t__ref3)

(declare-const xmm236 (_ BitVec 64))

(declare-const zeroflag86 Bool)

(declare-const xmm083 (_ BitVec 64))

(declare-const xmm135 (_ BitVec 64))

(declare-const xmm237 (_ BitVec 64))

(declare-const rax87 (_ BitVec 64))

(declare-const rbx87 (_ BitVec 64))

(declare-const rsp131 (_ BitVec 64))

(declare-const rbp84 (_ BitVec 64))

(declare-const rdi102 (_ BitVec 64))

(declare-const memory46 (Array (_ BitVec 64) unsigned8))

(declare-const result169 t__ref3)

(declare-const rsp132 (_ BitVec 64))

(declare-const rax88 (_ BitVec 64))

(declare-const result170 t__ref3)

(declare-const rbx88 (_ BitVec 64))

(declare-const result171 t__ref3)

(declare-const rsp133 (_ BitVec 64))

(declare-const result172 t__ref3)

(declare-const rbp85 (_ BitVec 64))

(declare-const result173 t__ref3)

(declare-const rsp134 (_ BitVec 64))

(declare-const result174 t__ref3)

(declare-const r1231 (_ BitVec 64))

(declare-const result175 t__ref3)

(declare-const rsp135 (_ BitVec 64))

(declare-const result176 t__ref3)

(declare-const r1324 (_ BitVec 64))

(declare-const result177 t__ref3)

(declare-const rsp136 (_ BitVec 64))

(declare-const result178 t__ref3)

(declare-const r1417 (_ BitVec 64))

(declare-const result179 t__ref3)

(declare-const rsp137 (_ BitVec 64))

(declare-const result180 t__ref3)

(declare-const r1510 (_ BitVec 64))

(declare-const result181 t__ref3)

(declare-const rsp138 (_ BitVec 64))

(declare-const result182 t__ref3)

(declare-const rsp139 (_ BitVec 64))

(declare-const exit_called1 bool__ref)

(declare-const zeroflag87 bool__ref)

(declare-const carryflag83 bool__ref)

(declare-const signflag83 bool__ref)

(declare-const overflowflag83 bool__ref)

(declare-const xmm084 t__ref3)

(declare-const xmm136 t__ref3)

(declare-const xmm238 t__ref3)

(declare-const xmm334 t__ref3)

(declare-const xmm431 t__ref3)

(declare-const xmm524 t__ref3)

(declare-const xmm618 t__ref3)

(declare-const xmm727 t__ref3)

(declare-const rax89 t__ref3)

(declare-const rcx4 t__ref3)

(declare-const rdx5 t__ref3)

(declare-const rbx89 t__ref3)

(declare-const rsp140 t__ref3)

(declare-const rbp86 t__ref3)

(declare-const rsi38 t__ref3)

(declare-const rdi103 t__ref3)

(declare-const r83 t__ref3)

(declare-const r1232 t__ref3)

(declare-const r1325 t__ref3)

(declare-const r1418 t__ref3)

(declare-const r1511 t__ref3)

(declare-const memory47 map__ref)

(declare-const savestackptr2 t__ref3)

(declare-const ra02 t__ref)

(declare-const ra12 t__ref)

(declare-const ra22 t__ref)

(declare-const ra32 t__ref)

(declare-const ra42 t__ref)

(declare-const ra52 t__ref)

(declare-const ra62 t__ref)

(declare-const ra72 t__ref)

(declare-const saverbx2 t__ref3)

(declare-const saverbp2 t__ref3)

(declare-const saver122 t__ref3)

(declare-const saver132 t__ref3)

(declare-const saver142 t__ref3)

(declare-const saver152 t__ref3)

(declare-const exit_called2 Bool)

(declare-const zeroflag88 Bool)

(declare-const carryflag84 Bool)

(declare-const signflag84 Bool)

(declare-const overflowflag84 Bool)

(declare-const xmm085 (_ BitVec 64))

(declare-const xmm137 (_ BitVec 64))

(declare-const xmm239 (_ BitVec 64))

(declare-const xmm335 (_ BitVec 64))

(declare-const xmm432 (_ BitVec 64))

(declare-const xmm525 (_ BitVec 64))

(declare-const xmm619 (_ BitVec 64))

(declare-const xmm728 (_ BitVec 64))

(declare-const rax90 (_ BitVec 64))

(declare-const rcx5 (_ BitVec 64))

(declare-const rdx6 (_ BitVec 64))

(declare-const rbx90 (_ BitVec 64))

(declare-const rsp141 (_ BitVec 64))

(declare-const rbp87 (_ BitVec 64))

(declare-const rsi39 (_ BitVec 64))

(declare-const rdi104 (_ BitVec 64))

(declare-const r84 (_ BitVec 64))

(declare-const r1233 (_ BitVec 64))

(declare-const r1326 (_ BitVec 64))

(declare-const r1419 (_ BitVec 64))

(declare-const r1512 (_ BitVec 64))

(declare-const memory48 (Array (_ BitVec 64) unsigned8))

(declare-const savestackptr3 (_ BitVec 64))

(declare-const ra03 (_ BitVec 8))

(declare-const ra13 (_ BitVec 8))

(declare-const ra23 (_ BitVec 8))

(declare-const ra33 (_ BitVec 8))

(declare-const ra43 (_ BitVec 8))

(declare-const ra53 (_ BitVec 8))

(declare-const ra63 (_ BitVec 8))

(declare-const ra73 (_ BitVec 8))

(declare-const saverbx3 (_ BitVec 64))

(declare-const saverbp3 (_ BitVec 64))

(declare-const saver123 (_ BitVec 64))

(declare-const saver133 (_ BitVec 64))

(declare-const saver143 (_ BitVec 64))

(declare-const saver153 (_ BitVec 64))

(define-fun xmm620 () t__ref3 (mk_t__ref3 xmm6))

(define-fun xmm336 () t__ref3 (mk_t__ref3 xmm3))

(define-fun xmm240 () t__ref3 (mk_t__ref3 xmm2))

(define-fun xmm138 () t__ref3 (mk_t__ref3 xmm1))

(define-fun xmm086 () t__ref3 (mk_t__ref3 xmm0))

(define-fun overflowflag85 () bool__ref (mk_bool__ref overflowflag))

(define-fun signflag85 () bool__ref (mk_bool__ref signflag))

(define-fun carryflag85 () bool__ref (mk_bool__ref carryflag))

(define-fun zeroflag89 () bool__ref (mk_bool__ref zeroflag))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (= o (t__content3 rsp)))

;; H
  (assert (= result savestackptr))

;; H
  (assert (= (let ((subject savestackptr)) savestackptr1) o))

;; H
  (assert true)

;; H
  (assert
  (and (= o1 (readmem8 (t__content3 rsp) (map__content memory)))
  (= o1 (to_rep (select (map__content memory) (t__content3 rsp))))))

;; H
  (assert (= o2 o1))

;; H
  (assert (= result1 ra0))

;; H
  (assert (= (let ((subject ra0)) ra01) o2))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o3 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 1))
        (map__content memory)))
  (= o3 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 1)))))))

;; H
  (assert (= o4 o3))

;; H
  (assert (= result2 ra1))

;; H
  (assert (= (let ((subject ra1)) ra11) o4))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o5 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 2))
        (map__content memory)))
  (= o5 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 2)))))))

;; H
  (assert (= o6 o5))

;; H
  (assert (= result3 ra2))

;; H
  (assert (= (let ((subject ra2)) ra21) o6))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o7 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 3))
        (map__content memory)))
  (= o7 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 3)))))))

;; H
  (assert (= o8 o7))

;; H
  (assert (= result4 ra3))

;; H
  (assert (= (let ((subject ra3)) ra31) o8))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o9 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 4))
        (map__content memory)))
  (= o9 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 4)))))))

;; H
  (assert (= o10 o9))

;; H
  (assert (= result5 ra4))

;; H
  (assert (= (let ((subject ra4)) ra41) o10))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o11 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 5))
         (map__content memory)))
  (= o11 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 5)))))))

;; H
  (assert (= o12 o11))

;; H
  (assert (= result6 ra5))

;; H
  (assert (= (let ((subject ra5)) ra51) o12))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o13 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 6))
         (map__content memory)))
  (= o13 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 6)))))))

;; H
  (assert (= o14 o13))

;; H
  (assert (= result7 ra6))

;; H
  (assert (= (let ((subject ra6)) ra61) o14))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o15 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 7))
         (map__content memory)))
  (= o15 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 7)))))))

;; H
  (assert (= o16 o15))

;; H
  (assert (= result8 ra7))

;; H
  (assert (= (let ((subject ra7)) ra71) o16))

;; H
  (assert true)

;; H
  (assert (= o17 (t__content3 rbx)))

;; H
  (assert (= result9 saverbx))

;; H
  (assert (= (let ((subject saverbx)) saverbx1) o17))

;; H
  (assert true)

;; H
  (assert (= o18 (t__content3 rbp)))

;; H
  (assert (= result10 saverbp))

;; H
  (assert (= (let ((subject saverbp)) saverbp1) o18))

;; H
  (assert true)

;; H
  (assert (= o19 (t__content3 r12)))

;; H
  (assert (= result11 saver12))

;; H
  (assert (= (let ((subject saver12)) saver121) o19))

;; H
  (assert true)

;; H
  (assert (= o20 (t__content3 r13)))

;; H
  (assert (= result12 saver13))

;; H
  (assert (= (let ((subject saver13)) saver131) o20))

;; H
  (assert true)

;; H
  (assert (= o21 (t__content3 r14)))

;; H
  (assert (= result13 saver14))

;; H
  (assert (= (let ((subject saver14)) saver141) o21))

;; H
  (assert true)

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 334, characters 0-0
  (not true))
(check-sat)
(exit)
