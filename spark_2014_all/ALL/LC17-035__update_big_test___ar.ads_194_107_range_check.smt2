;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort it1 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (it1 it1) Bool)

(declare-fun dummy () it1)

(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 1 10)) (in_range1 temp___expr_152)))

(declare-sort et1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (et1 et1) Bool)

(declare-fun dummy1 () et1)

(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(define-fun dynamic_invariant1 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range2 temp___expr_176)))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))

;; slide_eq
  (assert
  (forall ((a (Array Int et1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int et1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int
  Int) (Array Int et1))

;; concat_def
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (et1 Int) (Array Int et1))

;; singleton_def
  (assert
  (forall ((v et1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int)
  (b (Array Int et1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun e () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun temp___681 ((Array Int et1) Int Int Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___683 (Array Int et1)))
  (forall ((temp___684 Int) (temp___685 Int) (temp___686 Int)
  (temp___687 Int))
  (let ((temp___682 (temp___681 temp___683 temp___684 temp___685 temp___686
                    temp___687)))
  (forall ((temp___688 Int))
  (ite (= temp___688 temp___686)
  (= (select temp___682 temp___688) (of_rep temp___687))
  (ite (= temp___688 temp___684)
  (= (select temp___682 temp___688) (of_rep temp___685))
  (= (select temp___682 temp___688) (select temp___683 temp___688)))))))))

(declare-fun temp___690 ((Array Int et1) Int Int Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___692 (Array Int et1)))
  (forall ((temp___693 Int) (temp___694 Int) (temp___695 Int)
  (temp___696 Int))
  (let ((temp___691 (temp___690 temp___692 temp___693 temp___694 temp___695
                    temp___696)))
  (forall ((temp___697 Int))
  (ite (= temp___697 temp___695)
  (= (select temp___691 temp___697) (of_rep temp___696))
  (ite (= temp___697 temp___693)
  (= (select temp___691 temp___697) (of_rep temp___694))
  (= (select temp___691 temp___697) (select temp___692 temp___697)))))))))

(declare-fun temp___699 ((Array Int et1) Int Int Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___701 (Array Int et1)))
  (forall ((temp___702 Int) (temp___703 Int) (temp___704 Int)
  (temp___705 Int))
  (let ((temp___700 (temp___699 temp___701 temp___702 temp___703 temp___704
                    temp___705)))
  (forall ((temp___706 Int))
  (ite (= temp___706 temp___704)
  (= (select temp___700 temp___706) (of_rep temp___705))
  (ite (= temp___706 temp___702)
  (= (select temp___700 temp___706) (of_rep temp___703))
  (= (select temp___700 temp___706) (select temp___701 temp___706)))))))))

(declare-fun temp___708 ((Array Int et1) Int Int Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___710 (Array Int et1)))
  (forall ((temp___711 Int) (temp___712 Int) (temp___713 Int)
  (temp___714 Int))
  (let ((temp___709 (temp___708 temp___710 temp___711 temp___712 temp___713
                    temp___714)))
  (forall ((temp___715 Int))
  (ite (= temp___715 temp___713)
  (= (select temp___709 temp___715) (of_rep temp___714))
  (ite (= temp___715 temp___711)
  (= (select temp___709 temp___715) (of_rep temp___712))
  (= (select temp___709 temp___715) (select temp___710 temp___715)))))))))

(declare-fun temp___4401 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___4403 (Array Int et1)))
  (forall ((temp___4404 Int) (temp___4405 Int))
  (let ((temp___4402 (temp___4401 temp___4403 temp___4404 temp___4405)))
  (forall ((temp___4406 Int))
  (ite (= temp___4406 temp___4404)
  (= (select temp___4402 temp___4406) (of_rep temp___4405))
  (= (select temp___4402 temp___4406) (select temp___4403 temp___4406))))))))

(declare-fun j () Int)

(declare-fun f () Int)

(declare-fun o () Int)

(declare-fun o1 () et1)

(declare-fun o2 () (Array Int et1))

(declare-fun t () (Array Int et1))

(declare-fun a () (Array Int et1))

(declare-fun j1 () Int)

(declare-fun result () Int)

(declare-fun f1 () Int)

(declare-fun result1 () Int)

(declare-fun f2 () Int)

(declare-fun result2 () (Array Int et1))

(declare-fun a1 () (Array Int et1))

(declare-fun a2 () (Array Int et1))

(declare-fun j2 () Int)

(declare-fun f3 () Int)

(declare-fun t1 () (Array Int et1))

(declare-fun a3 () (Array Int et1))

(declare-fun j3 () Int)

(declare-fun f4 () Int)

(declare-fun t2 () (Array Int et1))

(define-fun f5 () int__ref (mk_int__ref f))

;; H
  (assert (in_range1 i))

;; H
  (assert (in_range2 e))

;; H
  (assert (=> (<= 1 10) (in_range1 j)))

;; H
  (assert (=> (<= 0 99) (in_range2 f)))

;; H
  (assert
  (and
  (and (= (bool_eq a 1 10 (temp___4401 t i e) 1 10) true)
  (or (and (= i 10) (= j1 1)) (and (< i 10) (= j1 (+ i 1))))) (in_range1
  j1)))

;; H
  (assert (=> (<= 1 10) (in_range1 j1)))

;; H
  (assert (=> (= e 0) (= (mk_int__ref result) f5)))

;; H
  (assert (=> (= e 0) (= f1 99)))

;; H
  (assert (=> (not (= e 0)) (and (= o (- e 1)) (in_range2 (- e 1)))))

;; H
  (assert (=> (not (= e 0)) (= (mk_int__ref result1) f5)))

;; H
  (assert (=> (not (= e 0)) (= f2 o)))

;; H
  (assert (=> (not (= e 0)) (= f1 f2)))

;; H
  (assert (= (to_rep o1) f1))

;; H
  (assert (= o2 (store a j1 o1)))

;; H
  (assert (= a result2))

;; H
  (assert (= a1 o2))

;; H
  (assert (= t t1))

;; H
  (assert (= f1 f3))

;; H
  (assert (= j1 j2))

;; H
  (assert (= a1 a2))

;; H
  (assert (= t2 t))

;; H
  (assert (= f4 f1))

;; H
  (assert (= j3 j1))

;; H
  (assert (= a3 a1))

;; H
  (assert (< i 10))

;; H
  (assert (< 0 e))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 62, characters 0-0
  (not (in_range2 (- e 1))))
(check-sat)
(exit)
