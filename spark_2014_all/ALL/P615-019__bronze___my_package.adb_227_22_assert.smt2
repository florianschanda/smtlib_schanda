;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__my_package__t__f1 integer)(rec__my_package__t__f2 integer)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) integer
  (rec__my_package__t__f1 a))

(define-fun us_split_fields_F2__projection ((a us_split_fields)) integer
  (rec__my_package__t__f2 a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__my_package__t__f1 (us_split_fields1 a)))
                        (to_rep
                        (rec__my_package__t__f1 (us_split_fields1 b))))
                        (= (to_rep
                           (rec__my_package__t__f2 (us_split_fields1 a)))
                        (to_rep
                        (rec__my_package__t__f2 (us_split_fields1 b)))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun my_package__t__f1__first__bit () Int)

(declare-fun my_package__t__f1__last__bit () Int)

(declare-fun my_package__t__f1__position () Int)

;; my_package__t__f1__first__bit_axiom
  (assert (<= 0 my_package__t__f1__first__bit))

;; my_package__t__f1__last__bit_axiom
  (assert (< my_package__t__f1__first__bit my_package__t__f1__last__bit))

;; my_package__t__f1__position_axiom
  (assert (<= 0 my_package__t__f1__position))

(declare-fun my_package__t__f2__first__bit () Int)

(declare-fun my_package__t__f2__last__bit () Int)

(declare-fun my_package__t__f2__position () Int)

;; my_package__t__f2__first__bit_axiom
  (assert (<= 0 my_package__t__f2__first__bit))

;; my_package__t__f2__last__bit_axiom
  (assert (< my_package__t__f2__first__bit my_package__t__f2__last__bit))

;; my_package__t__f2__position_axiom
  (assert (<= 0 my_package__t__f2__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun dummy2 () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-sort tTaSP1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (tTaSP1 tTaSP1) Bool)

(declare-fun dummy3 () tTaSP1)

(declare-datatypes ()
((tTaSP1__ref (mk_tTaSP1__ref (tTaSP1__content tTaSP1)))))
(define-fun tTaSP1__ref_2__projection ((a tTaSP1__ref)) tTaSP1 (tTaSP1__content
                                                               a))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun my_package__bad_aliasing__a__aggregate_def (Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___193 Int))
  (forall ((temp___194 Int))
  (= (select (my_package__bad_aliasing__a__aggregate_def temp___193) temp___194)
  (of_rep1 temp___193)))))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-fun x () Int)

(declare-fun y () Int)

(declare-fun xx__split_fields () integer)

(declare-fun xx__split_fields1 () integer)

(declare-fun z__split_fields () integer)

(declare-fun z__split_fields1 () integer)

(declare-fun a () (Array Int natural))

(declare-fun i () Int)

(declare-fun o () integer)

(declare-fun o1 () integer)

(declare-fun o2 () integer)

(declare-fun o3 () integer)

(declare-fun my_package__bad_aliasing__z__assume () integer)

(declare-fun my_package__bad_aliasing__z__assume1 () integer)

(declare-fun o4 () integer)

(declare-fun o5 () integer)

(declare-fun o6 () integer)

(declare-fun temp___198 () integer)

(declare-fun temp___1981 () integer)

(declare-fun result () integer)

(declare-fun result1 () integer)

(declare-fun z__split_fields2 () integer)

(declare-fun z__split_fields3 () integer)

(declare-fun result2 () map__ref)

(declare-fun a1 () (Array Int natural))

(declare-fun result3 () int__ref)

(declare-fun i1 () Int)

(declare-fun y1 () Int)

(declare-fun my_package__swap_with_y__x () Int)

(declare-fun result4 () int__ref)

(declare-fun y2 () Int)

(declare-fun my_package__move_x_to_y__y__fields () us_split_fields)

(declare-fun result5 () us_split_fields__ref)

(declare-fun z__split_fields4 () us_split_fields)

(declare-fun y3 () Int)

(declare-fun y4 () Int)

(declare-fun my_package__move_x_to_y2__y__fields () us_split_fields)

(declare-fun result6 () us_split_fields__ref)

(declare-fun xx__split_fields2 () us_split_fields)

(declare-fun my_package__move_x_to_y2__2__y () Int)

(declare-fun result7 () int__ref)

(declare-fun x1 () Int)

(declare-fun my_package__only_read_f2_of_x__y () Int)

(declare-fun result8 () us_split_fields__ref)

(declare-fun xx__split_fields3 () us_split_fields)

;; H
  (assert (in_range x))

;; H
  (assert (in_range y))

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= (to_rep o1) 0))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= my_package__bad_aliasing__z__assume o2))

;; H
  (assert (= my_package__bad_aliasing__z__assume1 o3))

;; H
  (assert (= result z__split_fields))

;; H
  (assert (= result1 z__split_fields1))

;; H
  (assert (= my_package__bad_aliasing__z__assume z__split_fields2))

;; H
  (assert (= my_package__bad_aliasing__z__assume1 z__split_fields3))

;; H
  (assert (= result2 (mk_map__ref a)))

;; H
  (assert (= a1 (my_package__bad_aliasing__a__aggregate_def 0)))

;; H
  (assert (= result3 (mk_int__ref i)))

;; H
  (assert (= i1 2))

;; H
  (assert (in_range i1))

;; H
  (assert (and (in_range my_package__swap_with_y__x) (in_range y1)))

;; H
  (assert (= result4 (mk_int__ref y1)))

;; H
  (assert (= y2 my_package__swap_with_y__x))

;; H
  (assert
  (= result5 (mk___split_fields__ref
             (mk___split_fields z__split_fields2 z__split_fields3))))

;; H
  (assert (= z__split_fields4 my_package__move_x_to_y__y__fields))

;; H
  (assert (in_range y3))

;; H
  (assert (in_range y4))

;; H
  (assert
  (= result6 (mk___split_fields__ref
             (mk___split_fields xx__split_fields xx__split_fields1))))

;; H
  (assert (= xx__split_fields2 my_package__move_x_to_y2__y__fields))

;; H
  (assert (in_range my_package__move_x_to_y2__2__y))

;; H
  (assert (= result7 (mk_int__ref x)))

;; H
  (assert (= x1 my_package__move_x_to_y2__2__y))

;; H
  (assert (in_range my_package__only_read_f2_of_x__y))

;; H
  (assert (= (to_rep o4) my_package__only_read_f2_of_x__y))

;; H
  (assert (= o4 o5))

;; H
  (assert (= (rec__my_package__t__f2 xx__split_fields2) o6))

;; H
  (assert (= temp___198 o5))

;; H
  (assert (= temp___1981 o6))

;; H
  (assert (= result8 (mk___split_fields__ref xx__split_fields2)))

;; H
  (assert (= xx__split_fields3 (mk___split_fields temp___198 temp___1981)))

(assert
;; WP_parameter_def
 ;; File "my_package.adb", line 195, characters 0-0
  (not (= i1 2)))
(check-sat)
(exit)
