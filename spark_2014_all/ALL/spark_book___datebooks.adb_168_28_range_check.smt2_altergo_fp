(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type year_type

predicate in_range1(x: int) = ((2000 <= x) and (x <= 2099))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : year_type, year_type -> bool

logic dummy : year_type

type year_type__ref = { year_type__content : year_type
}

function year_type__ref___projection(a: year_type__ref) : year_type =
  (a).year_type__content

logic to_rep : year_type -> int

logic of_rep : int -> year_type

axiom inversion_axiom :
  (forall x:year_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:year_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type month_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : month_type, month_type -> bool

logic dummy1 : month_type

type month_type__ref = { month_type__content : month_type
}

function month_type__ref___projection(a: month_type__ref) : month_type =
  (a).month_type__content

logic to_rep1 : month_type -> int

logic of_rep1 : int -> month_type

axiom inversion_axiom1 :
  (forall x:month_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:month_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type day_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : day_type, day_type -> bool

logic dummy2 : day_type

type day_type__ref = { day_type__content : day_type
}

function day_type__ref___projection(a: day_type__ref) : day_type =
  (a).day_type__content

logic to_rep2 : day_type -> int

logic of_rep2 : int -> day_type

axiom inversion_axiom2 :
  (forall x:day_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:day_type [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__dates__date__day : day_type;
rec__dates__date__month : month_type; rec__dates__date__year : year_type
}

function us_split_fields_Day__projection(a: us_split_fields) : day_type =
  (a).rec__dates__date__day

function us_split_fields_Month__projection(a: us_split_fields) : month_type =
  (a).rec__dates__date__month

function us_split_fields_Year__projection(a: us_split_fields) : year_type =
  (a).rec__dates__date__year

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((to_rep2(((a).us_split_fields1).rec__dates__date__day) = to_rep2(((b).us_split_fields1).rec__dates__date__day)) and
  (to_rep1(((a).us_split_fields1).rec__dates__date__month) = to_rep1(((b).us_split_fields1).rec__dates__date__month))) and
  (to_rep(((a).us_split_fields1).rec__dates__date__year) = to_rep(((b).us_split_fields1).rec__dates__date__year))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields1).rec__dates__date__day) = to_rep2(((b).us_split_fields1).rec__dates__date__day)) and
  (to_rep1(((a).us_split_fields1).rec__dates__date__month) = to_rep1(((b).us_split_fields1).rec__dates__date__month))) and
  (to_rep(((a).us_split_fields1).rec__dates__date__year) = to_rep(((b).us_split_fields1).rec__dates__date__year)))) ->
  (bool_eq5(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:day_type. forall a1:month_type. forall a2:year_type.
  (0 <= object__size({ us_split_fields1 = { rec__dates__date__day = a;
  rec__dates__date__month = a1; rec__dates__date__year = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:day_type. forall a1:month_type. forall a2:year_type.
  (0 <= object__alignment({ us_split_fields1 = { rec__dates__date__day = a;
  rec__dates__date__month = a1; rec__dates__date__year = a2 } })))

logic dates__date__day__first__bit : int

logic dates__date__day__last__bit : int

logic dates__date__day__position : int

axiom dates__date__day__first__bit_axiom :
  (0 <= dates__date__day__first__bit)

axiom dates__date__day__last__bit_axiom :
  (dates__date__day__first__bit <  dates__date__day__last__bit)

axiom dates__date__day__position_axiom : (0 <= dates__date__day__position)

logic dates__date__month__first__bit : int

logic dates__date__month__last__bit : int

logic dates__date__month__position : int

axiom dates__date__month__first__bit_axiom :
  (0 <= dates__date__month__first__bit)

axiom dates__date__month__last__bit_axiom :
  (dates__date__month__first__bit <  dates__date__month__last__bit)

axiom dates__date__month__position_axiom :
  (0 <= dates__date__month__position)

logic dates__date__year__first__bit : int

logic dates__date__year__last__bit : int

logic dates__date__year__position : int

axiom dates__date__year__first__bit_axiom :
  (0 <= dates__date__year__first__bit)

axiom dates__date__year__last__bit_axiom :
  (dates__date__year__first__bit <  dates__date__year__last__bit)

axiom dates__date__year__position_axiom : (0 <= dates__date__year__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : day_type

logic dummy4 : month_type

logic dummy5 : year_type

type date__ref = { date__content : us_rep
}

function date__ref___projection(a: date__ref) : us_rep = (a).date__content

type hour_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 23))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : hour_type, hour_type -> bool

logic dummy6 : hour_type

type hour_type__ref = { hour_type__content : hour_type
}

function hour_type__ref___projection(a: hour_type__ref) : hour_type =
  (a).hour_type__content

logic to_rep3 : hour_type -> int

logic of_rep3 : int -> hour_type

axiom inversion_axiom3 :
  (forall x:hour_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:hour_type [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type minute_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 59))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : minute_type, minute_type -> bool

logic dummy7 : minute_type

type minute_type__ref = { minute_type__content : minute_type
}

function minute_type__ref___projection(a: minute_type__ref) : minute_type =
  (a).minute_type__content

logic to_rep4 : minute_type -> int

logic of_rep4 : int -> minute_type

axiom inversion_axiom4 :
  (forall x:minute_type [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:minute_type [to_rep4(x)]. in_range5(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range5(x) ->
  (to_rep4(of_rep4(x)) = x)))

type second_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 59))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : second_type, second_type -> bool

logic dummy8 : second_type

type second_type__ref = { second_type__content : second_type
}

function second_type__ref___projection(a: second_type__ref) : second_type =
  (a).second_type__content

logic to_rep5 : second_type -> int

logic of_rep5 : int -> second_type

axiom inversion_axiom5 :
  (forall x:second_type [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:second_type [to_rep5(x)]. in_range6(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range6(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields2 = { rec__dates__time__hour : hour_type;
rec__dates__time__minute : minute_type; rec__dates__time__second :
second_type
}

function us_split_fields_Hour__projection(a: us_split_fields2) : hour_type =
  (a).rec__dates__time__hour

function us_split_fields_Minute__projection(a: us_split_fields2) : minute_type =
  (a).rec__dates__time__minute

function us_split_fields_Second__projection(a: us_split_fields2) : second_type =
  (a).rec__dates__time__second

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq9 : us_rep1, us_rep1 -> bool

axiom bool_eq_def8 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq9(a, b)].
  (((((to_rep3(((a).us_split_fields3).rec__dates__time__hour) = to_rep3(((b).us_split_fields3).rec__dates__time__hour)) and
  (to_rep4(((a).us_split_fields3).rec__dates__time__minute) = to_rep4(((b).us_split_fields3).rec__dates__time__minute))) and
  (to_rep5(((a).us_split_fields3).rec__dates__time__second) = to_rep5(((b).us_split_fields3).rec__dates__time__second))) ->
  (bool_eq9(a, b) = true)) and
  ((not (((to_rep3(((a).us_split_fields3).rec__dates__time__hour) = to_rep3(((b).us_split_fields3).rec__dates__time__hour)) and
  (to_rep4(((a).us_split_fields3).rec__dates__time__minute) = to_rep4(((b).us_split_fields3).rec__dates__time__minute))) and
  (to_rep5(((a).us_split_fields3).rec__dates__time__second) = to_rep5(((b).us_split_fields3).rec__dates__time__second)))) ->
  (bool_eq9(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:hour_type. forall a1:minute_type. forall a2:second_type.
  (0 <= object__size1({ us_split_fields3 = { rec__dates__time__hour = a;
  rec__dates__time__minute = a1; rec__dates__time__second = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:hour_type. forall a1:minute_type. forall a2:second_type.
  (0 <= object__alignment1({ us_split_fields3 = { rec__dates__time__hour = a;
  rec__dates__time__minute = a1; rec__dates__time__second = a2 } })))

logic dates__time__hour__first__bit : int

logic dates__time__hour__last__bit : int

logic dates__time__hour__position : int

axiom dates__time__hour__first__bit_axiom :
  (0 <= dates__time__hour__first__bit)

axiom dates__time__hour__last__bit_axiom :
  (dates__time__hour__first__bit <  dates__time__hour__last__bit)

axiom dates__time__hour__position_axiom : (0 <= dates__time__hour__position)

logic dates__time__minute__first__bit : int

logic dates__time__minute__last__bit : int

logic dates__time__minute__position : int

axiom dates__time__minute__first__bit_axiom :
  (0 <= dates__time__minute__first__bit)

axiom dates__time__minute__last__bit_axiom :
  (dates__time__minute__first__bit <  dates__time__minute__last__bit)

axiom dates__time__minute__position_axiom :
  (0 <= dates__time__minute__position)

logic dates__time__second__first__bit : int

logic dates__time__second__last__bit : int

logic dates__time__second__position : int

axiom dates__time__second__first__bit_axiom :
  (0 <= dates__time__second__first__bit)

axiom dates__time__second__last__bit_axiom :
  (dates__time__second__first__bit <  dates__time__second__last__bit)

axiom dates__time__second__position_axiom :
  (0 <= dates__time__second__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy9 : hour_type

logic dummy10 : minute_type

logic dummy11 : second_type

type time__ref = { time__content : us_rep1
}

function time__ref___projection(a: time__ref) : us_rep1 = (a).time__content

type us_split_fields4 = { rec__dates__datetime__date_part : us_rep;
rec__dates__datetime__time_part : us_rep1
}

function us_split_fields_Date_Part__projection(a: us_split_fields4) : us_rep =
  (a).rec__dates__datetime__date_part

function us_split_fields_Time_Part__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__dates__datetime__time_part

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq10 : us_rep2, us_rep2 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq10(a, b)].
  ((((bool_eq5(((a).us_split_fields5).rec__dates__datetime__date_part,
  ((b).us_split_fields5).rec__dates__datetime__date_part) = true) and
  (bool_eq9(((a).us_split_fields5).rec__dates__datetime__time_part,
  ((b).us_split_fields5).rec__dates__datetime__time_part) = true)) ->
  (bool_eq10(a, b) = true)) and
  ((not ((bool_eq5(((a).us_split_fields5).rec__dates__datetime__date_part,
  ((b).us_split_fields5).rec__dates__datetime__date_part) = true) and
  (bool_eq9(((a).us_split_fields5).rec__dates__datetime__time_part,
  ((b).us_split_fields5).rec__dates__datetime__time_part) = true))) ->
  (bool_eq10(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:day_type. forall a1:month_type. forall a2:year_type.
  forall a3:hour_type. forall a4:minute_type. forall a5:second_type.
  (0 <= object__size2({ us_split_fields5 = {
  rec__dates__datetime__date_part = { us_split_fields1 = {
  rec__dates__date__day = a; rec__dates__date__month = a1;
  rec__dates__date__year = a2 } }; rec__dates__datetime__time_part = {
  us_split_fields3 = { rec__dates__time__hour = a3;
  rec__dates__time__minute = a4; rec__dates__time__second = a5 } } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:day_type. forall a1:month_type. forall a2:year_type.
  forall a3:hour_type. forall a4:minute_type. forall a5:second_type.
  (0 <= object__alignment2({ us_split_fields5 = {
  rec__dates__datetime__date_part = { us_split_fields1 = {
  rec__dates__date__day = a; rec__dates__date__month = a1;
  rec__dates__date__year = a2 } }; rec__dates__datetime__time_part = {
  us_split_fields3 = { rec__dates__time__hour = a3;
  rec__dates__time__minute = a4; rec__dates__time__second = a5 } } } })))

logic dates__datetime__date_part__first__bit : int

logic dates__datetime__date_part__last__bit : int

logic dates__datetime__date_part__position : int

axiom dates__datetime__date_part__first__bit_axiom :
  (0 <= dates__datetime__date_part__first__bit)

axiom dates__datetime__date_part__last__bit_axiom :
  (dates__datetime__date_part__first__bit <  dates__datetime__date_part__last__bit)

axiom dates__datetime__date_part__position_axiom :
  (0 <= dates__datetime__date_part__position)

logic dates__datetime__time_part__first__bit : int

logic dates__datetime__time_part__last__bit : int

logic dates__datetime__time_part__position : int

axiom dates__datetime__time_part__first__bit_axiom :
  (0 <= dates__datetime__time_part__first__bit)

axiom dates__datetime__time_part__last__bit_axiom :
  (dates__datetime__time_part__first__bit <  dates__datetime__time_part__last__bit)

axiom dates__datetime__time_part__position_axiom :
  (0 <= dates__datetime__time_part__position)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy12 : day_type

logic dummy13 : month_type

logic dummy14 : year_type

logic dummy15 : hour_type

logic dummy16 : minute_type

logic dummy17 : second_type

type datetime__ref = { datetime__content : us_rep2
}

function datetime__ref___projection(a: datetime__ref) : us_rep2 =
  (a).datetime__content

type character

predicate in_range7(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : character, character -> bool

logic dummy18 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep6 : character -> int

logic of_rep6 : int -> character

axiom inversion_axiom6 :
  (forall x:character [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 : (forall x:character [to_rep6(x)]. in_range7(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range7(x) ->
  (to_rep6(of_rep6(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq12 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def11 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep6((a[temp___idx_78])) = to_rep6((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep6((a[temp___idx_78])) = to_rep6((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep6((a[temp___idx_78])) = to_rep6((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq12(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq12(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep6((a[(i + 1)])) <  to_rep6((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq12(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep6((b[(i + 1)])) <  to_rep6((a[(j + 1)]))))))))))))

logic dummy19 : (int,character) farray

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

logic user_eq10 : (int,character) farray, (int,character) farray -> bool

type description_count_type

predicate in_range8(x: int) = ((0 <= x) and (x <= 128))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : description_count_type, description_count_type -> bool

logic dummy20 : description_count_type

type description_count_type__ref = { description_count_type__content :
description_count_type
}

function description_count_type__ref___projection(a: description_count_type__ref) : description_count_type =
  (a).description_count_type__content

logic to_rep7 : description_count_type -> int

logic of_rep7 : int -> description_count_type

axiom inversion_axiom7 :
  (forall x:description_count_type [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:description_count_type [to_rep7(x)]. in_range8(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range8(x) ->
  (to_rep7(of_rep7(x)) = x)))

type us_split_fields6 = { rec__datebooks__event_record__description_text :
(int,character) farray; rec__datebooks__event_record__description_size :
description_count_type; rec__datebooks__event_record__date : us_rep2;
rec__datebooks__event_record__is_used : bool
}

function us_split_fields_Description_Text__projection(a: us_split_fields6) : (int,character) farray =
  (a).rec__datebooks__event_record__description_text

function us_split_fields_Description_Size__projection(a: us_split_fields6) : description_count_type =
  (a).rec__datebooks__event_record__description_size

function us_split_fields_Date__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__datebooks__event_record__date

function us_split_fields_Is_Used__projection(a: us_split_fields6) : bool =
  (a).rec__datebooks__event_record__is_used

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq14 : us_rep3, us_rep3 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq14(a, b)].
  ((((((bool_eq12(((a).us_split_fields7).rec__datebooks__event_record__description_text,
  1, 128,
  ((b).us_split_fields7).rec__datebooks__event_record__description_text, 1,
  128) = true) and
  (to_rep7(((a).us_split_fields7).rec__datebooks__event_record__description_size) = to_rep7(((b).us_split_fields7).rec__datebooks__event_record__description_size))) and
  (bool_eq10(((a).us_split_fields7).rec__datebooks__event_record__date,
  ((b).us_split_fields7).rec__datebooks__event_record__date) = true)) and
  (((a).us_split_fields7).rec__datebooks__event_record__is_used = ((b).us_split_fields7).rec__datebooks__event_record__is_used)) ->
  (bool_eq14(a, b) = true)) and
  ((not ((((bool_eq12(((a).us_split_fields7).rec__datebooks__event_record__description_text,
  1, 128,
  ((b).us_split_fields7).rec__datebooks__event_record__description_text, 1,
  128) = true) and
  (to_rep7(((a).us_split_fields7).rec__datebooks__event_record__description_size) = to_rep7(((b).us_split_fields7).rec__datebooks__event_record__description_size))) and
  (bool_eq10(((a).us_split_fields7).rec__datebooks__event_record__date,
  ((b).us_split_fields7).rec__datebooks__event_record__date) = true)) and
  (((a).us_split_fields7).rec__datebooks__event_record__is_used = ((b).us_split_fields7).rec__datebooks__event_record__is_used))) ->
  (bool_eq14(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. forall a1:description_count_type.
  forall a2:day_type. forall a3:month_type. forall a4:year_type.
  forall a5:hour_type. forall a6:minute_type. forall a7:second_type.
  forall a8:bool. (0 <= object__size4({ us_split_fields7 = {
  rec__datebooks__event_record__description_text = a;
  rec__datebooks__event_record__description_size = a1;
  rec__datebooks__event_record__date = { us_split_fields5 = {
  rec__dates__datetime__date_part = { us_split_fields1 = {
  rec__dates__date__day = a2; rec__dates__date__month = a3;
  rec__dates__date__year = a4 } }; rec__dates__datetime__time_part = {
  us_split_fields3 = { rec__dates__time__hour = a5;
  rec__dates__time__minute = a6; rec__dates__time__second = a7 } } } };
  rec__datebooks__event_record__is_used = a8 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. forall a1:description_count_type.
  forall a2:day_type. forall a3:month_type. forall a4:year_type.
  forall a5:hour_type. forall a6:minute_type. forall a7:second_type.
  forall a8:bool. (0 <= object__alignment4({ us_split_fields7 = {
  rec__datebooks__event_record__description_text = a;
  rec__datebooks__event_record__description_size = a1;
  rec__datebooks__event_record__date = { us_split_fields5 = {
  rec__dates__datetime__date_part = { us_split_fields1 = {
  rec__dates__date__day = a2; rec__dates__date__month = a3;
  rec__dates__date__year = a4 } }; rec__dates__datetime__time_part = {
  us_split_fields3 = { rec__dates__time__hour = a5;
  rec__dates__time__minute = a6; rec__dates__time__second = a7 } } } };
  rec__datebooks__event_record__is_used = a8 } })))

logic datebooks__event_record__description_text__first__bit : int

logic datebooks__event_record__description_text__last__bit : int

logic datebooks__event_record__description_text__position : int

axiom datebooks__event_record__description_text__first__bit_axiom :
  (0 <= datebooks__event_record__description_text__first__bit)

axiom datebooks__event_record__description_text__last__bit_axiom :
  (datebooks__event_record__description_text__first__bit <  datebooks__event_record__description_text__last__bit)

axiom datebooks__event_record__description_text__position_axiom :
  (0 <= datebooks__event_record__description_text__position)

logic datebooks__event_record__description_size__first__bit : int

logic datebooks__event_record__description_size__last__bit : int

logic datebooks__event_record__description_size__position : int

axiom datebooks__event_record__description_size__first__bit_axiom :
  (0 <= datebooks__event_record__description_size__first__bit)

axiom datebooks__event_record__description_size__last__bit_axiom :
  (datebooks__event_record__description_size__first__bit <  datebooks__event_record__description_size__last__bit)

axiom datebooks__event_record__description_size__position_axiom :
  (0 <= datebooks__event_record__description_size__position)

logic datebooks__event_record__date__first__bit : int

logic datebooks__event_record__date__last__bit : int

logic datebooks__event_record__date__position : int

axiom datebooks__event_record__date__first__bit_axiom :
  (0 <= datebooks__event_record__date__first__bit)

axiom datebooks__event_record__date__last__bit_axiom :
  (datebooks__event_record__date__first__bit <  datebooks__event_record__date__last__bit)

axiom datebooks__event_record__date__position_axiom :
  (0 <= datebooks__event_record__date__position)

logic datebooks__event_record__is_used__first__bit : int

logic datebooks__event_record__is_used__last__bit : int

logic datebooks__event_record__is_used__position : int

axiom datebooks__event_record__is_used__first__bit_axiom :
  (0 <= datebooks__event_record__is_used__first__bit)

axiom datebooks__event_record__is_used__last__bit_axiom :
  (datebooks__event_record__is_used__first__bit <  datebooks__event_record__is_used__last__bit)

axiom datebooks__event_record__is_used__position_axiom :
  (0 <= datebooks__event_record__is_used__position)

logic user_eq12 : us_rep3, us_rep3 -> bool

logic dummy21 : (int,character) farray

logic dummy22 : description_count_type

logic dummy23 : day_type

logic dummy24 : month_type

logic dummy25 : year_type

logic dummy26 : hour_type

logic dummy27 : minute_type

logic dummy28 : second_type

logic dummy29 : bool

type event_record__ref = { event_record__content : us_rep3
}

function event_record__ref___projection(a: event_record__ref) : us_rep3 =
  (a).event_record__content

type event_index_type

predicate in_range9(x: int) = ((1 <= x) and (x <= 64))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : event_index_type, event_index_type -> bool

logic dummy30 : event_index_type

type event_index_type__ref = { event_index_type__content : event_index_type
}

function event_index_type__ref___projection(a: event_index_type__ref) : event_index_type =
  (a).event_index_type__content

type map__ref1 = { map__content1 : (int,us_rep3) farray
}

logic slide1 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq1 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> (int,us_rep3) farray

axiom concat_def1 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep3, int -> (int,us_rep3) farray

axiom singleton_def1 :
  (forall v:(int,character) farray. forall v1:description_count_type.
  forall v2:day_type. forall v3:month_type. forall v4:year_type.
  forall v5:hour_type. forall v6:minute_type. forall v7:second_type.
  forall v8:bool.
  (forall i:int [(singleton1({ us_split_fields7 = {
  rec__datebooks__event_record__description_text = v;
  rec__datebooks__event_record__description_size = v1;
  rec__datebooks__event_record__date = { us_split_fields5 = {
  rec__dates__datetime__date_part = { us_split_fields1 = {
  rec__dates__date__day = v2; rec__dates__date__month = v3;
  rec__dates__date__year = v4 } }; rec__dates__datetime__time_part = {
  us_split_fields3 = { rec__dates__time__hour = v5;
  rec__dates__time__minute = v6; rec__dates__time__second = v7 } } } };
  rec__datebooks__event_record__is_used = v8 } }, i)[i])]. ((singleton1({
  us_split_fields7 = { rec__datebooks__event_record__description_text = v;
  rec__datebooks__event_record__description_size = v1;
  rec__datebooks__event_record__date = { us_split_fields5 = {
  rec__dates__datetime__date_part = { us_split_fields1 = {
  rec__dates__date__day = v2; rec__dates__date__month = v3;
  rec__dates__date__year = v4 } }; rec__dates__datetime__time_part = {
  us_split_fields3 = { rec__dates__time__hour = v5;
  rec__dates__time__minute = v6; rec__dates__time__second = v7 } } } };
  rec__datebooks__event_record__is_used = v8 } }, i)[i]) = {
  us_split_fields7 = { rec__datebooks__event_record__description_text = v;
  rec__datebooks__event_record__description_size = v1;
  rec__datebooks__event_record__date = { us_split_fields5 = {
  rec__dates__datetime__date_part = { us_split_fields1 = {
  rec__dates__date__day = v2; rec__dates__date__month = v3;
  rec__dates__date__year = v4 } }; rec__dates__datetime__time_part = {
  us_split_fields3 = { rec__dates__time__hour = v5;
  rec__dates__time__minute = v6; rec__dates__time__second = v7 } } } };
  rec__datebooks__event_record__is_used = v8 } })))

logic bool_eq16 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def15 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq16(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq14((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq14((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq16(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq14((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

type event_count_type

predicate in_range10(x: int) = ((0 <= x) and (x <= 64))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq14 : event_count_type, event_count_type -> bool

logic dummy31 : event_count_type

type event_count_type__ref = { event_count_type__content : event_count_type
}

function event_count_type__ref___projection(a: event_count_type__ref) : event_count_type =
  (a).event_count_type__content

logic book : (int,us_rep3) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "datebooks.ads", line 20, characters 0-0 *)
goal WP_parameter_def :
  (forall count:int. forall i:int. forall result:int. forall count1:int.
  forall result1:int. forall i1:int. forall count2:int. forall i2:int.
  (((result = count) and (count1 = 0)) -> (in_range10(count1) ->
  (((result1 = i) and (i1 = 1)) -> (((1 <= i1) and (i1 <= 64)) ->
  ((count2 <  i2) -> (((((0 <= 64) -> in_range10(count2)) and ((1 <= 64) ->
  in_range9(i2))) and ((1 <= i2) and (i2 <= 64))) ->
  (((((book[i2])).us_split_fields7).rec__datebooks__event_record__is_used = true) ->
  in_range10((count2 + 1))))))))))
