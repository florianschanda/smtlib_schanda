;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort mod_8 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (mod_8 mod_8) Bool)

(declare-fun dummy1 () mod_8)

(declare-datatypes () ((mod_8__ref (mk_mod_8__ref (mod_8__content mod_8)))))
(define-fun mod_8__ref___projection ((a mod_8__ref)) mod_8 (mod_8__content a))

(declare-fun to_rep (mod_8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) mod_8)

;; inversion_axiom
  (assert
  (forall ((x mod_8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int2 ((x mod_8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x mod_8)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort character 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep1 (character) Int)

(declare-fun of_rep1 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 8) character))))))
(declare-fun slide ((Array (_ BitVec 8) character) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) character))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) character)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) character)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 8) character) (_ BitVec 8)
  (_ BitVec 8) (Array (_ BitVec 8) character) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) character))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 8) character))
  (b (Array (_ BitVec 8) character)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character
  (_ BitVec 8)) (Array (_ BitVec 8) character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i (_ BitVec 8)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 8) character))
  (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b (Array (_ BitVec 8) character)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_132 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_132)
                                    (bvule temp___idx_132 a__last))
                                    (= (to_rep1 (select a temp___idx_132))
                                    (to_rep1
                                    (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) character))
  (b (Array (_ BitVec 8) character)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 8) character) (_ BitVec 8)
  (_ BitVec 8) (Array (_ BitVec 8) character) (_ BitVec 8) (_ BitVec 8)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 8) character))
  (b (Array (_ BitVec 8) character)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 8) character))
  (b (Array (_ BitVec 8) character)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 8)) (j (_ BitVec 8)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (< (to_rep1 (select a (bvadd i #x01))) (to_rep1
                                            (select b (bvadd j #x01))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 8) character))
  (b (Array (_ BitVec 8) character)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 8)) (j (_ BitVec 8)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (< (to_rep1 (select b (bvadd i #x01))) (to_rep1
                                            (select a (bvadd j #x01))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) mod_8)

(declare-fun last (t) mod_8)

(declare-fun mk ((_ BitVec 8) (_ BitVec 8)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 8)) (l (_ BitVec 8)))
  (! (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 8))
  (range_last (_ BitVec 8)) (low (_ BitVec 8))
  (high (_ BitVec 8))) Bool true)

(declare-datatypes ()
((us_t (mk___t (elts (Array (_ BitVec 8) character))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 8) character) (elts a))

(define-fun of_array ((a (Array (_ BitVec 8) character)) (f (_ BitVec 8))
  (l (_ BitVec 8))) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 8) (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 8) (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1)
                                  0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array (_ BitVec 8) character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array (_ BitVec 8) character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array (_ BitVec 8) character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 8) character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 8) character)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 8) character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-datatypes ()
((mod_string__ref (mk_mod_string__ref (mod_string__content us_t)))))
(define-fun mod_string__ref___projection ((a mod_string__ref)) us_t (mod_string__content
                                                                    a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun y__first () mod_8)

(declare-fun y__last () mod_8)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun z__first () mod_8)

(declare-fun z__last () mod_8)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun temp___String_Literal_162 (tuple0) (Array (_ BitVec 8) character))

;; temp___String_Literal_162__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep1
        (select (temp___String_Literal_162 us_void_param) ((_ int2bv 8) 1))) 49)
     (= (to_rep1
        (select (temp___String_Literal_162 us_void_param) ((_ int2bv 8) 2))) 50))
     (= (to_rep1
        (select (temp___String_Literal_162 us_void_param) ((_ int2bv 8) 3))) 51))
     (= (to_rep1
        (select (temp___String_Literal_162 us_void_param) ((_ int2bv 8) 4))) 52))
     (= (to_rep1
        (select (temp___String_Literal_162 us_void_param) ((_ int2bv 8) 5))) 53))
     (= (to_rep1
        (select (temp___String_Literal_162 us_void_param) ((_ int2bv 8) 6))) 54))
     (= (to_rep1
        (select (temp___String_Literal_162 us_void_param) ((_ int2bv 8) 7))) 55))
     (= (to_rep1
        (select (temp___String_Literal_162 us_void_param) ((_ int2bv 8) 8))) 56))
     (= (to_rep1
        (select (temp___String_Literal_162 us_void_param) ((_ int2bv 8) 9))) 57))
     (= (to_rep1
        (select (temp___String_Literal_162 us_void_param) ((_ int2bv 8) 10))) 48)) :pattern (
  (temp___String_Literal_162 us_void_param)) )))

(declare-fun temp___String_Literal_163 (tuple0) (Array (_ BitVec 8) character))

;; temp___String_Literal_163__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep1
        (select (temp___String_Literal_163 us_void_param) ((_ int2bv 8) 0))) 49)
     (= (to_rep1
        (select (temp___String_Literal_163 us_void_param) ((_ int2bv 8) 1))) 50))
     (= (to_rep1
        (select (temp___String_Literal_163 us_void_param) ((_ int2bv 8) 2))) 51))
     (= (to_rep1
        (select (temp___String_Literal_163 us_void_param) ((_ int2bv 8) 3))) 52))
     (= (to_rep1
        (select (temp___String_Literal_163 us_void_param) ((_ int2bv 8) 4))) 53))
     (= (to_rep1
        (select (temp___String_Literal_163 us_void_param) ((_ int2bv 8) 5))) 54))
     (= (to_rep1
        (select (temp___String_Literal_163 us_void_param) ((_ int2bv 8) 6))) 55))
     (= (to_rep1
        (select (temp___String_Literal_163 us_void_param) ((_ int2bv 8) 7))) 56))
     (= (to_rep1
        (select (temp___String_Literal_163 us_void_param) ((_ int2bv 8) 8))) 57))
     (= (to_rep1
        (select (temp___String_Literal_163 us_void_param) ((_ int2bv 8) 9))) 48)) :pattern (
  (temp___String_Literal_163 us_void_param)) )))

(declare-fun temp___String_Literal_165 (tuple0) (Array (_ BitVec 8) character))

;; temp___String_Literal_165__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep1
        (select (temp___String_Literal_165 us_void_param) ((_ int2bv 8) 0))) 49)
     (= (to_rep1
        (select (temp___String_Literal_165 us_void_param) ((_ int2bv 8) 1))) 50))
     (= (to_rep1
        (select (temp___String_Literal_165 us_void_param) ((_ int2bv 8) 2))) 51))
     (= (to_rep1
        (select (temp___String_Literal_165 us_void_param) ((_ int2bv 8) 3))) 52))
     (= (to_rep1
        (select (temp___String_Literal_165 us_void_param) ((_ int2bv 8) 4))) 53))
     (= (to_rep1
        (select (temp___String_Literal_165 us_void_param) ((_ int2bv 8) 5))) 54))
     (= (to_rep1
        (select (temp___String_Literal_165 us_void_param) ((_ int2bv 8) 6))) 55))
     (= (to_rep1
        (select (temp___String_Literal_165 us_void_param) ((_ int2bv 8) 7))) 56))
     (= (to_rep1
        (select (temp___String_Literal_165 us_void_param) ((_ int2bv 8) 8))) 57))
     (= (to_rep1
        (select (temp___String_Literal_165 us_void_param) ((_ int2bv 8) 9))) 97)) :pattern (
  (temp___String_Literal_165 us_void_param)) )))

(declare-fun temp___String_Literal_167 (tuple0) (Array (_ BitVec 8) character))

;; temp___String_Literal_167__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep1
        (select (temp___String_Literal_167 us_void_param) ((_ int2bv 8) 1))) 49)
     (= (to_rep1
        (select (temp___String_Literal_167 us_void_param) ((_ int2bv 8) 2))) 50))
     (= (to_rep1
        (select (temp___String_Literal_167 us_void_param) ((_ int2bv 8) 3))) 51))
     (= (to_rep1
        (select (temp___String_Literal_167 us_void_param) ((_ int2bv 8) 4))) 52))
     (= (to_rep1
        (select (temp___String_Literal_167 us_void_param) ((_ int2bv 8) 5))) 53)) :pattern (
  (temp___String_Literal_167 us_void_param)) )))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range1 temp___expr_63)))

(define-fun dynamic_invariant2 ((temp___expr_136 (_ BitVec 8))
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool true)

(define-fun dynamic_invariant3 ((temp___expr_142 us_t)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (not (= temp___skip_constant_140 true))
                                      (dynamic_property ((_ int2bv 8) 0)
                                      ((_ int2bv 8) 255)
                                      (first1 temp___expr_142)
                                      (last1 temp___expr_142))))

(declare-fun x () (Array (_ BitVec 8) character))

(declare-fun y () (Array (_ BitVec 8) character))

(declare-fun z () (Array (_ BitVec 8) character))

(declare-fun f () (Array (_ BitVec 8) character))

(declare-fun result () (Array (_ BitVec 8) character))

(declare-fun x1 () (Array (_ BitVec 8) character))

(declare-fun result1 () (Array (_ BitVec 8) character))

(declare-fun y1 () (Array (_ BitVec 8) character))

(declare-fun result2 () (Array (_ BitVec 8) character))

(declare-fun z1 () (Array (_ BitVec 8) character))

(declare-fun result3 () (Array (_ BitVec 8) character))

(declare-fun f1 () (Array (_ BitVec 8) character))

;; H
  (assert (= (mk_map__ref result) (mk_map__ref x)))

;; H
  (assert (= x1 (temp___String_Literal_162 Tuple0)))

;; H
  (assert (= (mk_map__ref result1) (mk_map__ref y)))

;; H
  (assert (= y1 (temp___String_Literal_163 Tuple0)))

;; H
  (assert
  (= (to_rep y__first) (to_rep
                       (first (mk ((_ int2bv 8) 0) ((_ int2bv 8) 9))))))

;; H
  (assert
  (= (to_rep y__last) (to_rep (last (mk ((_ int2bv 8) 0) ((_ int2bv 8) 9))))))

;; H
  (assert (dynamic_property ((_ int2bv 8) 0) ((_ int2bv 8) 255)
  (to_rep y__first) (to_rep y__last)))

;; H
  (assert (= (mk_map__ref result2) (mk_map__ref z)))

;; H
  (assert (= z1 (temp___String_Literal_165 Tuple0)))

;; H
  (assert
  (= (to_rep z__first) (to_rep
                       (first (mk ((_ int2bv 8) 0) ((_ int2bv 8) 9))))))

;; H
  (assert
  (= (to_rep z__last) (to_rep (last (mk ((_ int2bv 8) 0) ((_ int2bv 8) 9))))))

;; H
  (assert (dynamic_property ((_ int2bv 8) 0) ((_ int2bv 8) 255)
  (to_rep z__first) (to_rep z__last)))

;; H
  (assert (= (mk_map__ref result3) (mk_map__ref f)))

;; H
  (assert (= f1 (temp___String_Literal_167 Tuple0)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= (to_rep y__first) ((_ int2bv 8) 0))))
(check-sat)
(exit)
