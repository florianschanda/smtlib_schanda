(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type privileget

predicate in_range1(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : privileget, privileget -> bool

logic dummy : privileget

type privileget__ref = { privileget__content : privileget
}

function privileget__ref___projection(a: privileget__ref) : privileget =
  (a).privileget__content

logic to_rep : privileget -> int

logic of_rep : int -> privileget

axiom inversion_axiom :
  (forall x:privileget [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:privileget [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type opandnullt

predicate in_range2(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : opandnullt, opandnullt -> bool

logic dummy1 : opandnullt

type opandnullt__ref = { opandnullt__content : opandnullt
}

function opandnullt__ref___projection(a: opandnullt__ref) : opandnullt =
  (a).opandnullt__content

logic to_rep1 : opandnullt -> int

logic of_rep1 : int -> opandnullt

axiom inversion_axiom1 :
  (forall x:opandnullt [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:opandnullt [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__admin__t__rolepresent : privileget;
rec__admin__t__currentop : opandnullt
}

function us_split_fields_RolePresent__projection(a: us_split_fields) : privileget =
  (a).rec__admin__t__rolepresent

function us_split_fields_CurrentOp__projection(a: us_split_fields) : opandnullt =
  (a).rec__admin__t__currentop

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep_3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__admin__t__rolepresent) = to_rep(((b).us_split_fields1).rec__admin__t__rolepresent)) and
  (to_rep1(((a).us_split_fields1).rec__admin__t__currentop) = to_rep1(((b).us_split_fields1).rec__admin__t__currentop))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__admin__t__rolepresent) = to_rep(((b).us_split_fields1).rec__admin__t__rolepresent)) and
  (to_rep1(((a).us_split_fields1).rec__admin__t__currentop) = to_rep1(((b).us_split_fields1).rec__admin__t__currentop)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__size({
  us_split_fields1 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:privileget. forall a1:opandnullt. (0 <= object__alignment({
  us_split_fields1 = { rec__admin__t__rolepresent = a;
  rec__admin__t__currentop = a1 } })))

logic admin__t__rolepresent__first__bit : int

logic admin__t__rolepresent__last__bit : int

logic admin__t__rolepresent__position : int

axiom admin__t__rolepresent__first__bit_axiom :
  (0 <= admin__t__rolepresent__first__bit)

axiom admin__t__rolepresent__last__bit_axiom :
  (admin__t__rolepresent__first__bit <  admin__t__rolepresent__last__bit)

axiom admin__t__rolepresent__position_axiom :
  (0 <= admin__t__rolepresent__position)

logic admin__t__currentop__first__bit : int

logic admin__t__currentop__last__bit : int

logic admin__t__currentop__position : int

axiom admin__t__currentop__first__bit_axiom :
  (0 <= admin__t__currentop__first__bit)

axiom admin__t__currentop__last__bit_axiom :
  (admin__t__currentop__first__bit <  admin__t__currentop__last__bit)

axiom admin__t__currentop__position_axiom :
  (0 <= admin__t__currentop__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : privileget

logic dummy3 : opandnullt

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic rolepresent : us_rep -> int

logic rolepresent__function_guard : int, us_rep -> prop

axiom rolepresent__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. in_range1(rolepresent({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })))

logic isdoingop : us_rep -> bool

logic isdoingop__function_guard : bool, us_rep -> prop

axiom isdoingop__post_axiom : true

logic thecurrentop : us_rep -> int

logic thecurrentop__function_guard : int, us_rep -> prop

type opt

predicate in_range3(x: int) = ((1 <= x) and (x <= 4))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : opt, opt -> bool

logic dummy4 : opt

type opt__ref = { opt__content : opt
}

function opt__ref___projection(a: opt__ref) : opt = (a).opt__content

axiom thecurrentop__post_axiom :
  (forall theadmin:privileget. forall theadmin1:opandnullt [thecurrentop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } })]. ((isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin;
  rec__admin__t__currentop = theadmin1 } }) = true) ->
  in_range3(thecurrentop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin; rec__admin__t__currentop = theadmin1 } }))))

logic ispresent : us_rep -> bool

logic ispresent__function_guard : bool, us_rep -> prop

axiom ispresent__post_axiom : true

type yearst

predicate in_range4(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : yearst, yearst -> bool

logic dummy5 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep2 : yearst -> int

logic of_rep2 : int -> yearst

axiom inversion_axiom2 :
  (forall x:yearst [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:yearst [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type monthst

predicate in_range5(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : monthst, monthst -> bool

logic dummy6 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep3 : monthst -> int

logic of_rep3 : int -> monthst

axiom inversion_axiom3 :
  (forall x:monthst [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:monthst [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type dayst

predicate in_range6(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : dayst, dayst -> bool

logic dummy7 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep4 : dayst -> int

logic of_rep4 : int -> dayst

axiom inversion_axiom4 :
  (forall x:dayst [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:dayst [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type millisecst

predicate in_range7(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : millisecst, millisecst -> bool

logic dummy8 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep5 : millisecst -> int

logic of_rep5 : int -> millisecst

axiom inversion_axiom5 :
  (forall x:millisecst [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:millisecst [to_rep5(x)]. in_range7(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range7(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields2 = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields2) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields2) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields2) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields2) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_4__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq10 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq10(a, b)].
  ((((((to_rep2(((a).us_split_fields3).rec__clock__timet__year) = to_rep2(((b).us_split_fields3).rec__clock__timet__year)) and
  (to_rep3(((a).us_split_fields3).rec__clock__timet__month) = to_rep3(((b).us_split_fields3).rec__clock__timet__month))) and
  (to_rep4(((a).us_split_fields3).rec__clock__timet__day) = to_rep4(((b).us_split_fields3).rec__clock__timet__day))) and
  (to_rep5(((a).us_split_fields3).rec__clock__timet__millisec) = to_rep5(((b).us_split_fields3).rec__clock__timet__millisec))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((((to_rep2(((a).us_split_fields3).rec__clock__timet__year) = to_rep2(((b).us_split_fields3).rec__clock__timet__year)) and
  (to_rep3(((a).us_split_fields3).rec__clock__timet__month) = to_rep3(((b).us_split_fields3).rec__clock__timet__month))) and
  (to_rep4(((a).us_split_fields3).rec__clock__timet__day) = to_rep4(((b).us_split_fields3).rec__clock__timet__day))) and
  (to_rep5(((a).us_split_fields3).rec__clock__timet__millisec) = to_rep5(((b).us_split_fields3).rec__clock__timet__millisec)))) ->
  (bool_eq10(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size1({ us_split_fields3 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment1({ us_split_fields3 = { rec__clock__timet__year =
  a; rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy9 : yearst

logic dummy10 : monthst

logic dummy11 : dayst

logic dummy12 : millisecst

type timet__ref = { timet__content : us_rep1
}

function timet__ref___projection(a: timet__ref) : us_rep1 =
  (a).timet__content

logic thecurrenttime : us_private -> us_rep1

logic thecurrenttime__function_guard : us_rep1, us_private -> prop

axiom thecurrenttime__post_axiom : true

logic greaterthanorequal : us_rep1, us_rep1 -> bool

logic greaterthanorequal__function_guard : bool, us_rep1, us_rep1 -> prop

axiom greaterthanorequal__post_axiom : true

logic privatekeypresent : us_private -> bool

logic privatekeypresent__function_guard : bool, us_private -> prop

axiom privatekeypresent__post_axiom : true

logic theauthcertrole : us_private -> int

logic theauthcertrole__function_guard : int, us_private -> prop

axiom theauthcertrole__post_axiom :
  (forall admintoken__state:us_private [theauthcertrole(admintoken__state)].
  in_range1(theauthcertrole(admintoken__state)))

logic isgood : us_private -> bool

logic isgood__function_guard : bool, us_private -> prop

axiom isgood__post_axiom : true

logic authcertvalid : us_private -> bool

logic authcertvalid__function_guard : bool, us_private -> prop

axiom authcertvalid__post_axiom : true

logic islocked : us_private -> bool

logic islocked__function_guard : bool, us_private -> prop

axiom islocked__post_axiom : true

logic alarm_timeout : us_private -> us_rep1

logic alarm_timeout__function_guard : us_rep1, us_private -> prop

axiom alarm_timeout__post_axiom : true

logic thecurrentdoor : us_private -> int

logic thecurrentdoor__function_guard : int, us_private -> prop

type t

predicate in_range8(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : t, t -> bool

logic dummy13 : t

type t__ref1 = { t__content1 : t
}

function t__ref_4__projection(a: t__ref1) : t = (a).t__content1

axiom thecurrentdoor__post_axiom :
  (forall door__state:us_private [thecurrentdoor(door__state)].
  in_range8(thecurrentdoor(door__state)))

logic thedooralarm : us_private -> int

logic thedooralarm__function_guard : int, us_private -> prop

type statust

predicate in_range9(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : statust, statust -> bool

logic dummy14 : statust

type statust__ref = { statust__content : statust
}

function statust__ref___projection(a: statust__ref) : statust =
  (a).statust__content

axiom thedooralarm__post_axiom :
  (forall door__state:us_private [thedooralarm(door__state)].
  in_range9(thedooralarm(door__state)))

type statscount

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq11 : statscount, statscount -> bool

logic dummy15 : statscount

type statscount__ref = { statscount__content : statscount
}

function statscount__ref___projection(a: statscount__ref) : statscount =
  (a).statscount__content

logic to_rep6 : statscount -> int

logic of_rep6 : int -> statscount

axiom inversion_axiom6 :
  (forall x:statscount [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:statscount [to_rep6(x)]. in_range10(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range10(x) ->
  (to_rep6(of_rep6(x)) = x)))

type us_split_fields4 = { rec__stats__t__successentry : statscount;
rec__stats__t__failentry : statscount; rec__stats__t__successbio :
statscount; rec__stats__t__failbio : statscount
}

function us_split_fields_SuccessEntry__projection(a: us_split_fields4) : statscount =
  (a).rec__stats__t__successentry

function us_split_fields_FailEntry__projection(a: us_split_fields4) : statscount =
  (a).rec__stats__t__failentry

function us_split_fields_SuccessBio__projection(a: us_split_fields4) : statscount =
  (a).rec__stats__t__successbio

function us_split_fields_FailBio__projection(a: us_split_fields4) : statscount =
  (a).rec__stats__t__failbio

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_17__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep_18__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq14 : us_rep2, us_rep2 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq14(a, b)].
  ((((((to_rep6(((a).us_split_fields5).rec__stats__t__successentry) = to_rep6(((b).us_split_fields5).rec__stats__t__successentry)) and
  (to_rep6(((a).us_split_fields5).rec__stats__t__failentry) = to_rep6(((b).us_split_fields5).rec__stats__t__failentry))) and
  (to_rep6(((a).us_split_fields5).rec__stats__t__successbio) = to_rep6(((b).us_split_fields5).rec__stats__t__successbio))) and
  (to_rep6(((a).us_split_fields5).rec__stats__t__failbio) = to_rep6(((b).us_split_fields5).rec__stats__t__failbio))) ->
  (bool_eq14(a, b) = true)) and
  ((not ((((to_rep6(((a).us_split_fields5).rec__stats__t__successentry) = to_rep6(((b).us_split_fields5).rec__stats__t__successentry)) and
  (to_rep6(((a).us_split_fields5).rec__stats__t__failentry) = to_rep6(((b).us_split_fields5).rec__stats__t__failentry))) and
  (to_rep6(((a).us_split_fields5).rec__stats__t__successbio) = to_rep6(((b).us_split_fields5).rec__stats__t__successbio))) and
  (to_rep6(((a).us_split_fields5).rec__stats__t__failbio) = to_rep6(((b).us_split_fields5).rec__stats__t__failbio)))) ->
  (bool_eq14(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__size2({ us_split_fields5 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:statscount. forall a1:statscount. forall a2:statscount.
  forall a3:statscount. (0 <= object__alignment2({ us_split_fields5 = {
  rec__stats__t__successentry = a; rec__stats__t__failentry = a1;
  rec__stats__t__successbio = a2; rec__stats__t__failbio = a3 } })))

logic stats__t__successentry__first__bit : int

logic stats__t__successentry__last__bit : int

logic stats__t__successentry__position : int

axiom stats__t__successentry__first__bit_axiom :
  (0 <= stats__t__successentry__first__bit)

axiom stats__t__successentry__last__bit_axiom :
  (stats__t__successentry__first__bit <  stats__t__successentry__last__bit)

axiom stats__t__successentry__position_axiom :
  (0 <= stats__t__successentry__position)

logic stats__t__failentry__first__bit : int

logic stats__t__failentry__last__bit : int

logic stats__t__failentry__position : int

axiom stats__t__failentry__first__bit_axiom :
  (0 <= stats__t__failentry__first__bit)

axiom stats__t__failentry__last__bit_axiom :
  (stats__t__failentry__first__bit <  stats__t__failentry__last__bit)

axiom stats__t__failentry__position_axiom :
  (0 <= stats__t__failentry__position)

logic stats__t__successbio__first__bit : int

logic stats__t__successbio__last__bit : int

logic stats__t__successbio__position : int

axiom stats__t__successbio__first__bit_axiom :
  (0 <= stats__t__successbio__first__bit)

axiom stats__t__successbio__last__bit_axiom :
  (stats__t__successbio__first__bit <  stats__t__successbio__last__bit)

axiom stats__t__successbio__position_axiom :
  (0 <= stats__t__successbio__position)

logic stats__t__failbio__first__bit : int

logic stats__t__failbio__last__bit : int

logic stats__t__failbio__position : int

axiom stats__t__failbio__first__bit_axiom :
  (0 <= stats__t__failbio__first__bit)

axiom stats__t__failbio__last__bit_axiom :
  (stats__t__failbio__first__bit <  stats__t__failbio__last__bit)

axiom stats__t__failbio__position_axiom : (0 <= stats__t__failbio__position)

logic user_eq12 : us_rep2, us_rep2 -> bool

logic dummy16 : statscount

logic dummy17 : statscount

logic dummy18 : statscount

logic dummy19 : statscount

type t__ref2 = { t__content2 : us_rep2
}

function t__ref_5__projection(a: t__ref2) : us_rep2 = (a).t__content2

logic statusisgotadmintoken : us_private -> bool

logic statusisgotadmintoken__function_guard : bool, us_private -> prop

axiom statusisgotadmintoken__post_axiom : true

logic statusiswaitingremoveadmintokenfail : us_private -> bool

logic statusiswaitingremoveadmintokenfail__function_guard : bool,
  us_private -> prop

axiom statusiswaitingremoveadmintokenfail__post_axiom : true

logic statusiswaitingstartadminop : us_private -> bool

logic statusiswaitingstartadminop__function_guard : bool, us_private -> prop

axiom statusiswaitingstartadminop__post_axiom : true

logic statusiswaitingfinishadminop : us_private -> bool

logic statusiswaitingfinishadminop__function_guard : bool, us_private -> prop

axiom statusiswaitingfinishadminop__post_axiom : true

logic statusisenclavequiescent : us_private -> bool

logic statusisenclavequiescent__function_guard : bool, us_private -> prop

axiom statusisenclavequiescent__post_axiom : true

logic statusisshutdown : us_private -> bool

logic statusisshutdown__function_guard : bool, us_private -> prop

axiom statusisshutdown__post_axiom : true

logic enrolmentisinprogress : us_private -> bool

logic enrolmentisinprogress__function_guard : bool, us_private -> prop

axiom enrolmentisinprogress__post_axiom : true

logic adminmustlogout : us_rep, us_private, us_private, us_private -> bool

logic adminmustlogout__function_guard : bool, us_rep, us_private, us_private,
  us_private -> prop

axiom adminmustlogout__post_axiom : true

logic currentadminactivitypossible : us_private, us_private -> bool

logic currentadminactivitypossible__function_guard : bool, us_private,
  us_private -> prop

axiom currentadminactivitypossible__post_axiom : true

logic getstatus : us_private -> int

logic getstatus__function_guard : int, us_private -> prop

logic currentactivitypossible : us_private, us_private -> bool

logic currentactivitypossible__function_guard : bool, us_private,
  us_private -> prop

axiom currentactivitypossible__post_axiom : true

logic canstart : us_private, us_private -> bool

logic canstart__function_guard : bool, us_private, us_private -> prop

axiom canstart__post_axiom : true

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type statust1

predicate in_range11(x: int) = ((0 <= x) and (x <= 8))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq13 : statust1, statust1 -> bool

logic dummy20 : statust1

type statust__ref1 = { statust__content1 : statust1
}

function statust__ref_2__projection(a: statust__ref1) : statust1 =
  (a).statust__content1

axiom getstatus__post_axiom :
  (forall enclave__state:us_private [getstatus(enclave__state)].
  in_range11(getstatus(enclave__state)))

 (* File "admintoken.ads", line 40, characters 0-0 *)
goal WP_parameter_def :
  (forall state:us_private. forall theadmin__split_fields:privileget.
  forall theadmin__split_fields1:opandnullt. forall o:bool. forall o1:bool.
  forall o2:bool. forall o3:bool. forall o4:bool. forall o5:bool.
  forall o6:bool. forall o7:bool. forall o8:bool. forall o9:bool.
  forall o10:bool. forall o11:bool. forall o12:int. forall o13:bool.
  forall o14:bool. forall o15:bool. forall o16:bool. forall o17:bool.
  forall o18:bool. forall o19:bool. forall o20:bool. forall result:bool.
  forall result1:bool. forall result2:bool. forall result3:bool.
  forall result4:bool. (((result = enrolmentisinprogress(state)) and
  (((result = true) and (((o17 = isdoingop({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  (((not (o17 = true)) and (o18 = true)) or ((o17 = true) and
  (o18 = false)))) and (((o16 = ispresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  (((not (o16 = true)) and (o19 = true)) or ((o16 = true) and
  (o19 = false)))) and (o20 = match_bool(o19, o18, false))))) or
  ((not (result = true)) and (o20 = of_int(1))))) ->
  (((result1 = statusisshutdown(state)) and (((result1 = true) and
  ((((o12 = rolepresent({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } })) and in_range1(o12)) and (((o12 = 0) and (o13 = true)) or
  ((not (o12 = 0)) and (o13 = false)))) and (((o11 = isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  (((not (o11 = true)) and (o14 = true)) or ((o11 = true) and
  (o14 = false)))) and (o15 = match_bool(o14, o13, false))))) or
  ((not (result1 = true)) and (o15 = of_int(1))))) ->
  (((result2 = statusisenclavequiescent(state)) and (((result2 = true) and
  ((o9 = isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } })) and (((not (o9 = true)) and (o10 = true)) or ((o9 = true) and
  (o10 = false))))) or ((not (result2 = true)) and (o10 = of_int(1))))) ->
  ((((o4 = statusiswaitingfinishadminop(state)) and
  ((o5 = statusiswaitingstartadminop(state)) and (result3 = match_bool(o5,
  true, o4)))) and (((result3 = true) and ((o6 = isdoingop({
  us_split_fields1 = { rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  ((o7 = ispresent({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } })) and (o8 = match_bool(o7, o6, false))))) or
  ((not (result3 = true)) and (o8 = of_int(1))))) ->
  ((((o = statusiswaitingremoveadmintokenfail(state)) and
  ((o1 = statusisgotadmintoken(state)) and (result4 = match_bool(o1, true,
  o)))) and (((result4 = true) and ((o2 = ispresent({ us_split_fields1 = {
  rec__admin__t__rolepresent = theadmin__split_fields;
  rec__admin__t__currentop = theadmin__split_fields1 } })) and
  (((not (o2 = true)) and (o3 = true)) or ((o2 = true) and
  (o3 = false))))) or ((not (result4 = true)) and (o3 = of_int(1))))) ->
  (isdoingop({ us_split_fields1 = { rec__admin__t__rolepresent =
  theadmin__split_fields; rec__admin__t__currentop = theadmin__split_fields1
  } }) = true)))))))
