;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort pred 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (pred pred) Bool)

(declare-const dummy1 pred)

(declare-datatypes ((pred__ref 0)) (((mk_pred__ref (pred__content pred)))))
(define-fun pred__ref___projection ((a pred__ref)) pred (pred__content a))

(declare-fun to_rep1 (pred) Int)

(declare-fun of_rep1 (Int) pred)

;; inversion_axiom
  (assert
  (forall ((x pred)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x pred)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__a__rec__disc pred)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) pred (rec__a__rec__disc
                                                                    a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__a__rec__a integer)(rec__a__rec__b integer)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) integer
  (rec__a__rec__a a))

(define-fun us_split_fields_B__projection ((a us_split_fields)) integer
  (rec__a__rec__b a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun a__rec__a__pred ((a us_rep)) Bool (and
                                              (<= 1 (to_rep1
                                                    (rec__a__rec__disc
                                                    (us_split_discrs1 a))))
                                              (<= (to_rep1
                                                  (rec__a__rec__disc
                                                  (us_split_discrs1 a))) 4)))

(define-fun a__rec__b__pred ((a us_rep)) Bool (= (to_rep1
                                                 (rec__a__rec__disc
                                                 (us_split_discrs1 a))) 5))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1 (rec__a__rec__disc (us_split_discrs1 a)))
                        (to_rep1 (rec__a__rec__disc (us_split_discrs1 b))))
                        (=> (a__rec__a__pred a)
                        (= (to_rep (rec__a__rec__a (us_split_fields1 a)))
                        (to_rep (rec__a__rec__a (us_split_fields1 b))))))
                        (=> (a__rec__b__pred a)
                        (= (to_rep (rec__a__rec__b (us_split_fields1 a)))
                        (to_rep (rec__a__rec__b (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const a__rec__disc__first__bit Int)

(declare-const a__rec__disc__last__bit Int)

(declare-const a__rec__disc__position Int)

;; a__rec__disc__first__bit_axiom
  (assert (<= 0 a__rec__disc__first__bit))

;; a__rec__disc__last__bit_axiom
  (assert (< a__rec__disc__first__bit a__rec__disc__last__bit))

;; a__rec__disc__position_axiom
  (assert (<= 0 a__rec__disc__position))

(declare-const a__rec__a__first__bit Int)

(declare-const a__rec__a__last__bit Int)

(declare-const a__rec__a__position Int)

;; a__rec__a__first__bit_axiom
  (assert (<= 0 a__rec__a__first__bit))

;; a__rec__a__last__bit_axiom
  (assert (< a__rec__a__first__bit a__rec__a__last__bit))

;; a__rec__a__position_axiom
  (assert (<= 0 a__rec__a__position))

(declare-const a__rec__b__first__bit Int)

(declare-const a__rec__b__last__bit Int)

(declare-const a__rec__b__position Int)

;; a__rec__b__first__bit_axiom
  (assert (<= 0 a__rec__b__first__bit))

;; a__rec__b__last__bit_axiom
  (assert (< a__rec__b__first__bit a__rec__b__last__bit))

;; a__rec__b__position_axiom
  (assert (<= 0 a__rec__b__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((rec____ref 0))
(((mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_144 us_rep)
  (temp___is_init_141 Bool) (temp___skip_constant_142 Bool)
  (temp___do_toplevel_143 Bool)) Bool (let ((temp___147 (to_rep1
                                                        (rec__a__rec__disc
                                                        (us_split_discrs1
                                                        temp___expr_144)))))
                                      (and (<= 1 temp___147)
                                      (<= temp___147 5))))

(define-fun default_initial_assumption ((temp___expr_148 us_rep)
  (temp___skip_top_level_149 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_148) false)
                                         (= (to_rep1
                                            (rec__a__rec__disc
                                            (us_split_discrs1
                                            temp___expr_148))) 10)))

(declare-const a__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (and
                                      (=>
                                      (or (= temp___is_init_132 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range1 temp___expr_135))
                                      (=> (= temp___do_toplevel_134 true)
                                      (=> (= temp___is_init_132 true)
                                      (and (<= 1 temp___expr_135)
                                      (<= temp___expr_135 5))))))

(define-fun dynamic_predicate ((temp___139 Int)) Bool (and (<= 1 temp___139)
                                                      (<= temp___139 5)))

(assert
;; WP_parameter_def
 ;; File "a.ads", line 3, characters 0-0
  (not (<= 1 10)))
(check-sat)
(exit)
