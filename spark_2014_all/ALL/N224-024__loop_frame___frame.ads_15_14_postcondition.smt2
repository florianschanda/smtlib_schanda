;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index index) Bool)

(declare-const dummy1 index)

(declare-datatypes ((index__ref 0))
(((mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__frame__rec__c1 natural)(rec__frame__rec__c2 natural)))))
(define-fun us_split_fields_C1__projection ((a us_split_fields)) natural
  (rec__frame__rec__c1 a))

(define-fun us_split_fields_C2__projection ((a us_split_fields)) natural
  (rec__frame__rec__c2 a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__frame__rec__c1 (us_split_fields1 a)))
                        (to_rep (rec__frame__rec__c1 (us_split_fields1 b))))
                        (= (to_rep
                           (rec__frame__rec__c2 (us_split_fields1 a)))
                        (to_rep (rec__frame__rec__c2 (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const frame__rec__c1__first__bit Int)

(declare-const frame__rec__c1__last__bit Int)

(declare-const frame__rec__c1__position Int)

;; frame__rec__c1__first__bit_axiom
  (assert (<= 0 frame__rec__c1__first__bit))

;; frame__rec__c1__last__bit_axiom
  (assert (< frame__rec__c1__first__bit frame__rec__c1__last__bit))

;; frame__rec__c1__position_axiom
  (assert (<= 0 frame__rec__c1__position))

(declare-const frame__rec__c2__first__bit Int)

(declare-const frame__rec__c2__last__bit Int)

(declare-const frame__rec__c2__position Int)

;; frame__rec__c2__first__bit_axiom
  (assert (<= 0 frame__rec__c2__first__bit))

;; frame__rec__c2__last__bit_axiom
  (assert (< frame__rec__c2__first__bit frame__rec__c2__last__bit))

;; frame__rec__c2__position_axiom
  (assert (<= 0 frame__rec__c2__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((rec____ref 0))
(((mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content
                                                            a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq (select a temp___idx_133)
                              (select b (+ (- b__first a__first) temp___idx_133))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq (select a temp___idx_133)
     (select b (+ (- b__first a__first) temp___idx_133))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant1 ((temp___expr_137 Int)
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool (=>
                                      (or (= temp___is_init_134 true)
                                      (<= 1 10)) (in_range2 temp___expr_137)))

(declare-const a (Array Int us_rep))

(declare-const j Int)

(declare-const temp___190 (Array Int us_rep))

(declare-const temp___189 Int)

(declare-const temp___192 (Array Int us_rep))

(declare-const o natural)

(declare-const o1 natural)

(declare-const o2 natural)

(declare-const o3 natural)

(declare-const o4 natural)

(declare-const o5 (Array Int us_rep))

(declare-const a1 (Array Int us_rep))

(declare-const result Int)

(declare-const j1 Int)

(declare-const result1 (Array Int us_rep))

(declare-const a2 (Array Int us_rep))

(declare-const a3 (Array Int us_rep))

(declare-const j2 Int)

(declare-const a4 (Array Int us_rep))

(declare-const j3 Int)

(declare-const a5 (Array Int us_rep))

(declare-const j4 Int)

(declare-const a6 (Array Int us_rep))

(declare-const j5 Int)

(declare-const a7 (Array Int us_rep))

(declare-const j6 Int)

(declare-const a8 map__ref)

(declare-const j7 int__ref)

(declare-const a9 (Array Int us_rep))

(declare-const j8 Int)

(define-fun j9 () int__ref (mk_int__ref j5))

(define-fun a10 () map__ref (mk_map__ref a6))

(define-fun a11 () map__ref (mk_map__ref a))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref j)))

;; H
  (assert (= j1 1))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= temp___190 a)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= temp___189 j1)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= temp___192 a)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 10))
  (= (to_rep o) (to_rep
                (rec__frame__rec__c2 (us_split_fields1 (select a j1)))))))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= o o1)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 10))
  (= (rec__frame__rec__c2 (us_split_fields1 (select a j1))) o2)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= o3 o1)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= o4 o2)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 10))
  (= o5 (store a j1 (mk___rep (mk___split_fields o3 o4))))))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= (mk_map__ref result1) a11)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= a2 o5)))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 10))
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k j2))
  (= (to_rep (rec__frame__rec__c1 (us_split_fields1 (select a3 k))))
  (to_rep (rec__frame__rec__c2 (us_split_fields1 (select temp___192 k)))))))))

;; H
  (assert
  (=> (and (<= 1 j1) (<= j1 10))
  (and
  (and (=> (<= 1 10) (in_range2 j2))
  (forall ((temp___191 Int))
  (=> (and (<= 1 temp___191) (<= temp___191 10))
  (ite (< j2 temp___191)
  (= (select a3 temp___191) (select temp___190 temp___191))
  (= (rec__frame__rec__c2 (us_split_fields1 (select a3 temp___191)))
  (rec__frame__rec__c2 (us_split_fields1 (select temp___190 temp___191))))))))
  (and (<= 1 j2) (<= j2 10)))))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= j2 10)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= j2 j3)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= a3 a4)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= j4 j2)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= a5 a3)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= j9 (mk_int__ref j3))))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= a10 (mk_map__ref a4))))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= j6 j4)))

;; H
  (assert (=> (and (<= 1 j1) (<= j1 10)) (= a7 a5)))

;; H
  (assert (=> (not (and (<= 1 j1) (<= j1 10))) (= j1 j5)))

;; H
  (assert (=> (not (and (<= 1 j1) (<= j1 10))) (= a10 a11)))

;; H
  (assert (=> (not (and (<= 1 j1) (<= j1 10))) (= j6 j1)))

;; H
  (assert (=> (not (and (<= 1 j1) (<= j1 10))) (= a7 a1)))

;; H
  (assert (= j7 j9))

;; H
  (assert (= a8 a10))

;; H
  (assert (= j8 j6))

;; H
  (assert (= a9 a7))

(declare-const j10 Int)

;; H
  (assert (<= 1 j10))

;; H
  (assert (<= j10 10))

(assert
;; WP_parameter_def
 ;; File "frame.ads", line 10, characters 0-0
  (not
  (= (to_rep
     (rec__frame__rec__c1 (us_split_fields1 (select (map__content a8) j10))))
  (to_rep (rec__frame__rec__c2 (us_split_fields1 (select a j10)))))))
(check-sat)
(exit)
