;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__sc_status_type__duplicate_status_type__prime Bool)(rec__sc_status_type__duplicate_status_type__shadow Bool)))))
(define-fun us_split_fields_Prime__projection ((a us_split_fields)) Bool
  (rec__sc_status_type__duplicate_status_type__prime a))

(define-fun us_split_fields_Shadow__projection ((a us_split_fields)) Bool
  (rec__sc_status_type__duplicate_status_type__shadow a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__sc_status_type__duplicate_status_type__prime
                           (us_split_fields1 a)) (rec__sc_status_type__duplicate_status_type__prime
                                                 (us_split_fields1 b)))
                        (= (rec__sc_status_type__duplicate_status_type__shadow
                           (us_split_fields1 a)) (rec__sc_status_type__duplicate_status_type__shadow
                                                 (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const sc_status_type__duplicate_status_type__prime__first__bit Int)

(declare-const sc_status_type__duplicate_status_type__prime__last__bit Int)

(declare-const sc_status_type__duplicate_status_type__prime__position Int)

;; sc_status_type__duplicate_status_type__prime__first__bit_axiom
  (assert (<= 0 sc_status_type__duplicate_status_type__prime__first__bit))

;; sc_status_type__duplicate_status_type__prime__last__bit_axiom
  (assert
  (< sc_status_type__duplicate_status_type__prime__first__bit sc_status_type__duplicate_status_type__prime__last__bit))

;; sc_status_type__duplicate_status_type__prime__position_axiom
  (assert (<= 0 sc_status_type__duplicate_status_type__prime__position))

(declare-const sc_status_type__duplicate_status_type__shadow__first__bit Int)

(declare-const sc_status_type__duplicate_status_type__shadow__last__bit Int)

(declare-const sc_status_type__duplicate_status_type__shadow__position Int)

;; sc_status_type__duplicate_status_type__shadow__first__bit_axiom
  (assert (<= 0 sc_status_type__duplicate_status_type__shadow__first__bit))

;; sc_status_type__duplicate_status_type__shadow__last__bit_axiom
  (assert
  (< sc_status_type__duplicate_status_type__shadow__first__bit sc_status_type__duplicate_status_type__shadow__last__bit))

;; sc_status_type__duplicate_status_type__shadow__position_axiom
  (assert (<= 0 sc_status_type__duplicate_status_type__shadow__position))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ()
((duplicate_status_type__ref
 (mk_duplicate_status_type__ref (duplicate_status_type__content us_rep)))))
(define-fun duplicate_status_type__ref___projection ((a duplicate_status_type__ref)) us_rep
  (duplicate_status_type__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__sc_status_type__object_type__sc_state us_rep)))))
(define-fun us_split_fields_Sc_State__projection ((a us_split_fields2)) us_rep
  (rec__sc_status_type__object_type__sc_state a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (bool_eq
                            (rec__sc_status_type__object_type__sc_state
                            (us_split_fields3 a))
                            (rec__sc_status_type__object_type__sc_state
                            (us_split_fields3 b))) true)
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const sc_status_type__object_type__sc_state__first__bit Int)

(declare-const sc_status_type__object_type__sc_state__last__bit Int)

(declare-const sc_status_type__object_type__sc_state__position Int)

;; sc_status_type__object_type__sc_state__first__bit_axiom
  (assert (<= 0 sc_status_type__object_type__sc_state__first__bit))

;; sc_status_type__object_type__sc_state__last__bit_axiom
  (assert
  (< sc_status_type__object_type__sc_state__first__bit sc_status_type__object_type__sc_state__last__bit))

;; sc_status_type__object_type__sc_state__position_axiom
  (assert (<= 0 sc_status_type__object_type__sc_state__position))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy1 us_rep1)

(declare-datatypes ()
((object_type__ref (mk_object_type__ref (object_type__content us_rep1)))))
(define-fun object_type__ref___projection ((a object_type__ref)) us_rep1
  (object_type__content a))

(declare-fun read (us_rep1) Bool)

(declare-fun read__function_guard (Bool us_rep1) Bool)

;; read__post_axiom
  (assert true)

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int2 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort st_type 0)

(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 15))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 15)))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (st_type st_type) Bool)

(declare-const dummy2 st_type)

(declare-datatypes ()
((st_type__ref (mk_st_type__ref (st_type__content st_type)))))
(define-fun st_type__ref___projection ((a st_type__ref)) st_type (st_type__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_152 (_ BitVec 8))
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 15)))
                                      (in_range1 temp___expr_152)))

(declare-sort op_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (op_type op_type) Bool)

(declare-const dummy3 op_type)

(declare-datatypes ()
((op_type__ref (mk_op_type__ref (op_type__content op_type)))))
(define-fun op_type__ref___projection ((a op_type__ref)) op_type (op_type__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 0 3)) (in_range2 temp___expr_158)))

(declare-sort internal_state 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (internal_state internal_state) Bool)

(declare-const dummy4 internal_state)

(declare-datatypes ()
((internal_state__ref
 (mk_internal_state__ref (internal_state__content internal_state)))))
(define-fun internal_state__ref___projection ((a internal_state__ref)) internal_state
  (internal_state__content a))

(define-fun dynamic_invariant2 ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range3 temp___expr_164)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun get_internal_state (Int) Int)

(declare-fun get_internal_state__function_guard (Int Int) Bool)

;; get_internal_state__post_axiom
  (assert
  (forall ((achiever__my_internal_state Int))
  (! (=> (dynamic_invariant2 achiever__my_internal_state true true true)
     (dynamic_invariant2 (get_internal_state achiever__my_internal_state)
     true false true)) :pattern ((get_internal_state
                                 achiever__my_internal_state)) )))

;; get_internal_state__def_axiom
  (assert
  (forall ((achiever__my_internal_state Int))
  (! (=> (dynamic_invariant2 achiever__my_internal_state true true true)
     (= (get_internal_state achiever__my_internal_state) achiever__my_internal_state)) :pattern (
  (get_internal_state achiever__my_internal_state)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun get_state_item (us_split_fields2) us_rep1)

(declare-fun get_state_item__function_guard (us_rep1 us_split_fields2) Bool)

;; get_state_item__post_axiom
  (assert true)

;; get_state_item__def_axiom
  (assert
  (forall ((achiever__state_item__fields us_split_fields2))
  (! (= (get_state_item achiever__state_item__fields) (mk___rep1
                                                      achiever__state_item__fields)) :pattern (
  (get_state_item achiever__state_item__fields)) )))

(declare-fun prf_do_something ((_ BitVec 8) Int Int Int) Bool)

(declare-fun prf_do_something__function_guard (Bool (_ BitVec 8) Int Int
  Int) Bool)

;; prf_do_something__post_axiom
  (assert true)

;; prf_do_something__def_axiom
  (assert
  (forall ((st (_ BitVec 8)))
  (forall ((op Int) (before Int) (after Int))
  (! (= (prf_do_something st op before after) true) :pattern ((prf_do_something
                                                              st op before
                                                              after)) ))))

(declare-fun prf_do_stuff ((_ BitVec 8) Int Int) Bool)

(declare-fun prf_do_stuff__function_guard (Bool (_ BitVec 8) Int Int) Bool)

;; prf_do_stuff__post_axiom
  (assert true)

;; prf_do_stuff__def_axiom
  (assert
  (forall ((st (_ BitVec 8)))
  (forall ((before Int) (after Int))
  (! (= (prf_do_stuff st before after) true) :pattern ((prf_do_stuff st
                                                       before after)) ))))

(declare-const st (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c2b (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c3b Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const my_internal_state Int)

(declare-const state_item__split_fields Bool)

(declare-const state_item__split_fields1 Bool)

(declare-const o Bool)

(declare-const state_item__split_fields2 Bool)

(declare-const state_item__split_fields3 Bool)

(declare-const result Bool)

(declare-const state_item__split_fields4 Bool)

(declare-const state_item__split_fields5 Bool)

(declare-const state_item__split_fields6 Bool)

(declare-const state_item__split_fields7 Bool)

(declare-const state_item__split_fields8 Bool)

(declare-const state_item__split_fields9 Bool)

(define-fun state_item__split_fields10 () us_split_fields2 (mk___split_fields1
                                                           (mk___rep
                                                           (mk___split_fields
                                                           state_item__split_fields8
                                                           state_item__split_fields9))))

(define-fun state_item__split_fields11 () us_split_fields2 (mk___split_fields1
                                                           (mk___rep
                                                           (mk___split_fields
                                                           state_item__split_fields4
                                                           state_item__split_fields5))))

(define-fun state_item__split_fields12 () us_split_fields2 (mk___split_fields1
                                                           (mk___rep
                                                           (mk___split_fields
                                                           state_item__split_fields2
                                                           state_item__split_fields3))))

;; H
  (assert (in_range1 st))

;; H
  (assert (in_range3 my_internal_state))

;; H
  (assert
  (= o (read
       (mk___rep1
       (mk___split_fields1
       (mk___rep
       (mk___split_fields state_item__split_fields state_item__split_fields1)))))))

;; H
  (assert (= result (ite (not (= o true)) true false)))

;; H
  (assert (=> (= result true) (= st c2b)))

;; H
  (assert (=> (= result true) (in_range1 c2b)))

;; H
  (assert (=> (= result true) (in_range2 c3b)))

;; H
  (assert
  (=> (not (= result true))
  (= state_item__split_fields state_item__split_fields4)))

;; H
  (assert
  (=> (not (= result true))
  (= state_item__split_fields1 state_item__split_fields5)))

;; H
  (assert
  (=> (not (= result true))
  (= state_item__split_fields11 state_item__split_fields12)))

;; H
  (assert (= state_item__split_fields6 state_item__split_fields4))

;; H
  (assert (= state_item__split_fields7 state_item__split_fields5))

;; H
  (assert (= state_item__split_fields10 state_item__split_fields11))

;; H
  (assert
  (=>
  (ite (= (read
          (get_state_item
          (mk___split_fields1
          (mk___rep
          (mk___split_fields state_item__split_fields
          state_item__split_fields1))))) false) true false)
  (and
  (= (prf_do_something st 0 (get_internal_state my_internal_state)
     (get_internal_state my_internal_state)) true)
  (= (read
     (get_state_item
     (mk___split_fields1
     (mk___rep
     (mk___split_fields state_item__split_fields6 state_item__split_fields7))))) true))))

;; H
  (assert
  (=>
  (= (read
     (get_state_item
     (mk___split_fields1
     (mk___rep
     (mk___split_fields state_item__split_fields state_item__split_fields1))))) true)
  (= (bool_eq1
     (get_state_item
     (mk___split_fields1
     (mk___rep
     (mk___split_fields state_item__split_fields6 state_item__split_fields7))))
     (get_state_item
     (mk___split_fields1
     (mk___rep
     (mk___split_fields state_item__split_fields state_item__split_fields1))))) true)))

(assert
;; WP_parameter_def
 ;; File "achiever.ads", line 67, characters 0-0
  (not
  (= (prf_do_stuff st (get_internal_state my_internal_state)
     (get_internal_state my_internal_state)) true)))
(check-sat)
(exit)
