(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq : us_rep, us_rep -> bool

axiom bool_eq_def :
  (forall a:us_rep. forall b:us_rep [bool_eq(a, b)]. (bool_eq(a, b) = true))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:us_private. forall a1:int. (0 <= object__size({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_private. forall a1:int. (0 <= object__alignment({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_private

logic dummy1 : int

type derived__ref = { derived__content : us_rep
}

function derived__ref___projection(a: derived__ref) : us_rep =
  (a).derived__content

logic x__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_private. forall a1:int. (0 <= object__size1({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_private. forall a1:int. (0 <= object__alignment1({
  us_split_fields1 = { rec__ext__ = a }; attr__tag = a1 })))

logic user_eq1 : us_rep, us_rep -> bool

logic dummy2 : us_private

logic dummy3 : int

type root__ref = { root__content : us_rep
}

function root__ref___projection(a: root__ref) : us_rep = (a).root__content

logic test_mem : us_rep -> bool

logic test_mem__function_guard : bool, us_rep -> prop

axiom test_mem__post_axiom : true

axiom test_mem__def_axiom :
  (forall v:us_private. forall v1:int [test_mem({ us_split_fields1 = {
  rec__ext__ = v }; attr__tag = v1 })]. ((test_mem({ us_split_fields1 = {
  rec__ext__ = v }; attr__tag = v1 }) = true) <-> (v1 = us_tag)))

logic test_mem_class : us_rep -> bool

logic test_mem_class__function_guard : bool, us_rep -> prop

logic us_compatible_tags : int, int -> prop

axiom us_compatible_tags_refl :
  (forall tag:int. us_compatible_tags(tag, tag))

axiom test_mem_class__post_axiom : true

axiom test_mem_class__def_axiom :
  (forall v:us_private. forall v1:int [test_mem_class({ us_split_fields1 = {
  rec__ext__ = v }; attr__tag = v1 })]. ((test_mem_class({ us_split_fields1 =
  { rec__ext__ = v }; attr__tag = v1 }) = true) <-> us_compatible_tags(v1,
  us_tag)))

logic test_mem_class1 : us_rep -> bool

logic test_mem_class1__function_guard : bool, us_rep -> prop

axiom test_mem_class1__post_axiom : true

axiom test_mem_class1__def_axiom :
  (forall v:us_private. forall v1:int [test_mem_class1({ us_split_fields1 = {
  rec__ext__ = v }; attr__tag = v1 })]. ((test_mem_class1({
  us_split_fields1 = { rec__ext__ = v }; attr__tag = v1 }) = true) <->
  (us_compatible_tags(v1, us_tag) or (v1 = us_tag))))

logic test_mem_class2 : us_rep -> bool

logic test_mem_class2__function_guard : bool, us_rep -> prop

axiom test_mem_class2__post_axiom : true

axiom test_mem_class2__def_axiom :
  (forall v:us_private. forall v1:int [test_mem_class2({ us_split_fields1 = {
  rec__ext__ = v }; attr__tag = v1 })]. ((test_mem_class2({
  us_split_fields1 = { rec__ext__ = v }; attr__tag = v1 }) = true) <->
  ((v1 = us_tag) or us_compatible_tags(v1, us_tag))))

 (* File "mem.adb", line 12, characters 0-0 *)
goal WP_parameter_def :
  (forall x__split_fields:us_private. ((x__attr__tag = us_tag) ->
  ((test_mem({ us_split_fields1 = { rec__ext__ = x__split_fields };
  attr__tag = x__attr__tag }) = true) -> ((test_mem_class({
  us_split_fields1 = { rec__ext__ = x__split_fields }; attr__tag =
  x__attr__tag }) = true) -> ((test_mem_class1({ us_split_fields1 = {
  rec__ext__ = x__split_fields }; attr__tag = x__attr__tag }) = true) ->
  (test_mem_class2({ us_split_fields1 = { rec__ext__ = x__split_fields };
  attr__tag = x__attr__tag }) = true))))))
