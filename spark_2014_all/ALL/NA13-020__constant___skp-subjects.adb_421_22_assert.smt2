;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 64)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort word64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (word64 word64) Bool)

(declare-const dummy word64)

(declare-datatypes ((word64__ref 0))
(((mk_word64__ref (word64__content word64)))))
(define-fun word64__ref___projection ((a word64__ref)) word64 (word64__content
                                                              a))

(declare-fun to_rep (word64) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) word64)

;; inversion_axiom
  (assert
  (forall ((x word64)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x word64)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x word64)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort subject_id_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (subject_id_type subject_id_type) Bool)

(declare-const dummy1 subject_id_type)

(declare-datatypes ((subject_id_type__ref 0))
(((mk_subject_id_type__ref (subject_id_type__content subject_id_type)))))
(define-fun subject_id_type__ref___projection ((a subject_id_type__ref)) subject_id_type
  (subject_id_type__content a))

(define-fun dynamic_invariant ((temp___expr_326 Int)
  (temp___is_init_323 Bool) (temp___skip_constant_324 Bool)
  (temp___do_toplevel_325 Bool)) Bool (=>
                                      (or (= temp___is_init_323 true)
                                      (<= 0 6)) (in_range1 temp___expr_326)))

(declare-const subject_id Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun nth1 ((_ BitVec 32) Int) Bool)

(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int4 ((_ BitVec 32)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv1 x ((_ int2bv 32) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort word32 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (word32 word32) Bool)

(declare-const dummy2 word32)

(declare-datatypes ((word32__ref 0))
(((mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content
                                                              a))

(declare-fun to_rep1 (word32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int5 ((x word32)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range1
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort cpu_range 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (cpu_range cpu_range) Bool)

(declare-const dummy3 cpu_range)

(declare-datatypes ((cpu_range__ref 0))
(((mk_cpu_range__ref (cpu_range__content cpu_range)))))
(define-fun cpu_range__ref___projection ((a cpu_range__ref)) cpu_range
  (cpu_range__content a))

(declare-fun to_rep2 (cpu_range) Int)

(declare-fun of_rep2 (Int) cpu_range)

;; inversion_axiom
  (assert
  (forall ((x cpu_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x cpu_range)) (! (in_range2
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort profile_kind 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (profile_kind profile_kind) Bool)

(declare-const dummy4 profile_kind)

(declare-datatypes ((profile_kind__ref 0))
(((mk_profile_kind__ref (profile_kind__content profile_kind)))))
(define-fun profile_kind__ref___projection ((a profile_kind__ref)) profile_kind
  (profile_kind__content a))

(declare-fun to_rep3 (profile_kind) Int)

(declare-fun of_rep3 (Int) profile_kind)

;; inversion_axiom
  (assert
  (forall ((x profile_kind))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x profile_kind)) (! (in_range3
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__skp__subjects__vmx_controls_type__exec_pin word32)(rec__skp__subjects__vmx_controls_type__exec_proc word32)(rec__skp__subjects__vmx_controls_type__exec_proc2 word32)(rec__skp__subjects__vmx_controls_type__exit_ctrls word32)(rec__skp__subjects__vmx_controls_type__entry_ctrls word32)))))
(define-fun us_split_fields_Exec_Pin__projection ((a us_split_fields)) word32
  (rec__skp__subjects__vmx_controls_type__exec_pin a))

(define-fun us_split_fields_Exec_Proc__projection ((a us_split_fields)) word32
  (rec__skp__subjects__vmx_controls_type__exec_proc a))

(define-fun us_split_fields_Exec_Proc2__projection ((a us_split_fields)) word32
  (rec__skp__subjects__vmx_controls_type__exec_proc2 a))

(define-fun us_split_fields_Exit_Ctrls__projection ((a us_split_fields)) word32
  (rec__skp__subjects__vmx_controls_type__exit_ctrls a))

(define-fun us_split_fields_Entry_Ctrls__projection ((a us_split_fields)) word32
  (rec__skp__subjects__vmx_controls_type__entry_ctrls a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__skp__subjects__vmx_controls_type__exec_pin
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__skp__subjects__vmx_controls_type__exec_pin
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__skp__subjects__vmx_controls_type__exec_proc
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__skp__subjects__vmx_controls_type__exec_proc
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__skp__subjects__vmx_controls_type__exec_proc2
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__skp__subjects__vmx_controls_type__exec_proc2
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__skp__subjects__vmx_controls_type__exit_ctrls
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__skp__subjects__vmx_controls_type__exit_ctrls
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__skp__subjects__vmx_controls_type__entry_ctrls
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__skp__subjects__vmx_controls_type__entry_ctrls
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const skp__subjects__vmx_controls_type__exec_pin__first__bit Int)

(declare-const skp__subjects__vmx_controls_type__exec_pin__last__bit Int)

(declare-const skp__subjects__vmx_controls_type__exec_pin__position Int)

;; skp__subjects__vmx_controls_type__exec_pin__first__bit_axiom
  (assert (<= 0 skp__subjects__vmx_controls_type__exec_pin__first__bit))

;; skp__subjects__vmx_controls_type__exec_pin__last__bit_axiom
  (assert
  (< skp__subjects__vmx_controls_type__exec_pin__first__bit skp__subjects__vmx_controls_type__exec_pin__last__bit))

;; skp__subjects__vmx_controls_type__exec_pin__position_axiom
  (assert (<= 0 skp__subjects__vmx_controls_type__exec_pin__position))

(declare-const skp__subjects__vmx_controls_type__exec_proc__first__bit Int)

(declare-const skp__subjects__vmx_controls_type__exec_proc__last__bit Int)

(declare-const skp__subjects__vmx_controls_type__exec_proc__position Int)

;; skp__subjects__vmx_controls_type__exec_proc__first__bit_axiom
  (assert (<= 0 skp__subjects__vmx_controls_type__exec_proc__first__bit))

;; skp__subjects__vmx_controls_type__exec_proc__last__bit_axiom
  (assert
  (< skp__subjects__vmx_controls_type__exec_proc__first__bit skp__subjects__vmx_controls_type__exec_proc__last__bit))

;; skp__subjects__vmx_controls_type__exec_proc__position_axiom
  (assert (<= 0 skp__subjects__vmx_controls_type__exec_proc__position))

(declare-const skp__subjects__vmx_controls_type__exec_proc2__first__bit Int)

(declare-const skp__subjects__vmx_controls_type__exec_proc2__last__bit Int)

(declare-const skp__subjects__vmx_controls_type__exec_proc2__position Int)

;; skp__subjects__vmx_controls_type__exec_proc2__first__bit_axiom
  (assert (<= 0 skp__subjects__vmx_controls_type__exec_proc2__first__bit))

;; skp__subjects__vmx_controls_type__exec_proc2__last__bit_axiom
  (assert
  (< skp__subjects__vmx_controls_type__exec_proc2__first__bit skp__subjects__vmx_controls_type__exec_proc2__last__bit))

;; skp__subjects__vmx_controls_type__exec_proc2__position_axiom
  (assert (<= 0 skp__subjects__vmx_controls_type__exec_proc2__position))

(declare-const skp__subjects__vmx_controls_type__exit_ctrls__first__bit Int)

(declare-const skp__subjects__vmx_controls_type__exit_ctrls__last__bit Int)

(declare-const skp__subjects__vmx_controls_type__exit_ctrls__position Int)

;; skp__subjects__vmx_controls_type__exit_ctrls__first__bit_axiom
  (assert (<= 0 skp__subjects__vmx_controls_type__exit_ctrls__first__bit))

;; skp__subjects__vmx_controls_type__exit_ctrls__last__bit_axiom
  (assert
  (< skp__subjects__vmx_controls_type__exit_ctrls__first__bit skp__subjects__vmx_controls_type__exit_ctrls__last__bit))

;; skp__subjects__vmx_controls_type__exit_ctrls__position_axiom
  (assert (<= 0 skp__subjects__vmx_controls_type__exit_ctrls__position))

(declare-const skp__subjects__vmx_controls_type__entry_ctrls__first__bit Int)

(declare-const skp__subjects__vmx_controls_type__entry_ctrls__last__bit Int)

(declare-const skp__subjects__vmx_controls_type__entry_ctrls__position Int)

;; skp__subjects__vmx_controls_type__entry_ctrls__first__bit_axiom
  (assert (<= 0 skp__subjects__vmx_controls_type__entry_ctrls__first__bit))

;; skp__subjects__vmx_controls_type__entry_ctrls__last__bit_axiom
  (assert
  (< skp__subjects__vmx_controls_type__entry_ctrls__first__bit skp__subjects__vmx_controls_type__entry_ctrls__last__bit))

;; skp__subjects__vmx_controls_type__entry_ctrls__position_axiom
  (assert (<= 0 skp__subjects__vmx_controls_type__entry_ctrls__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((vmx_controls_type__ref 0))
(((mk_vmx_controls_type__ref (vmx_controls_type__content us_rep)))))
(define-fun vmx_controls_type__ref___projection ((a vmx_controls_type__ref)) us_rep
  (vmx_controls_type__content a))

(declare-sort dst_subject_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (dst_subject_type dst_subject_type) Bool)

(declare-const dummy6 dst_subject_type)

(declare-datatypes ((dst_subject_type__ref 0))
(((mk_dst_subject_type__ref (dst_subject_type__content dst_subject_type)))))
(define-fun dst_subject_type__ref___projection ((a dst_subject_type__ref)) dst_subject_type
  (dst_subject_type__content a))

(declare-fun to_rep4 (dst_subject_type) Int)

(declare-fun of_rep4 (Int) dst_subject_type)

;; inversion_axiom
  (assert
  (forall ((x dst_subject_type))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x dst_subject_type)) (! (in_range4
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort dst_vector_range 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 256)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (dst_vector_range dst_vector_range) Bool)

(declare-const dummy7 dst_vector_range)

(declare-datatypes ((dst_vector_range__ref 0))
(((mk_dst_vector_range__ref (dst_vector_range__content dst_vector_range)))))
(define-fun dst_vector_range__ref___projection ((a dst_vector_range__ref)) dst_vector_range
  (dst_vector_range__content a))

(declare-fun to_rep5 (dst_vector_range) Int)

(declare-fun of_rep5 (Int) dst_vector_range)

;; inversion_axiom
  (assert
  (forall ((x dst_vector_range))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x dst_vector_range)) (! (in_range5
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__skp__subjects__trap_entry_type__dst_subject dst_subject_type)(rec__skp__subjects__trap_entry_type__dst_vector dst_vector_range)))))
(define-fun us_split_fields_Dst_Subject__projection ((a us_split_fields2)) dst_subject_type
  (rec__skp__subjects__trap_entry_type__dst_subject a))

(define-fun us_split_fields_Dst_Vector__projection ((a us_split_fields2)) dst_vector_range
  (rec__skp__subjects__trap_entry_type__dst_vector a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                               a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep4
                            (rec__skp__subjects__trap_entry_type__dst_subject
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__skp__subjects__trap_entry_type__dst_subject
                                                   (us_split_fields3 b))))
                         (= (to_rep5
                            (rec__skp__subjects__trap_entry_type__dst_vector
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__skp__subjects__trap_entry_type__dst_vector
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const skp__subjects__trap_entry_type__dst_subject__first__bit Int)

(declare-const skp__subjects__trap_entry_type__dst_subject__last__bit Int)

(declare-const skp__subjects__trap_entry_type__dst_subject__position Int)

;; skp__subjects__trap_entry_type__dst_subject__first__bit_axiom
  (assert (<= 0 skp__subjects__trap_entry_type__dst_subject__first__bit))

;; skp__subjects__trap_entry_type__dst_subject__last__bit_axiom
  (assert
  (< skp__subjects__trap_entry_type__dst_subject__first__bit skp__subjects__trap_entry_type__dst_subject__last__bit))

;; skp__subjects__trap_entry_type__dst_subject__position_axiom
  (assert (<= 0 skp__subjects__trap_entry_type__dst_subject__position))

(declare-const skp__subjects__trap_entry_type__dst_vector__first__bit Int)

(declare-const skp__subjects__trap_entry_type__dst_vector__last__bit Int)

(declare-const skp__subjects__trap_entry_type__dst_vector__position Int)

;; skp__subjects__trap_entry_type__dst_vector__first__bit_axiom
  (assert (<= 0 skp__subjects__trap_entry_type__dst_vector__first__bit))

;; skp__subjects__trap_entry_type__dst_vector__last__bit_axiom
  (assert
  (< skp__subjects__trap_entry_type__dst_vector__first__bit skp__subjects__trap_entry_type__dst_vector__last__bit))

;; skp__subjects__trap_entry_type__dst_vector__position_axiom
  (assert (<= 0 skp__subjects__trap_entry_type__dst_vector__position))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes ((trap_entry_type__ref 0))
(((mk_trap_entry_type__ref (trap_entry_type__content us_rep1)))))
(define-fun trap_entry_type__ref___projection ((a trap_entry_type__ref)) us_rep1
  (trap_entry_type__content a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq1 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq1 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-const dummy9 (Array Int us_rep1))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int us_rep1)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int us_rep1)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int us_rep1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep1))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep1))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep1))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq9 ((Array Int us_rep1) (Array Int us_rep1)) Bool)

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__skp__subjects__event_entry_type__dst_subject dst_subject_type)(rec__skp__subjects__event_entry_type__dst_vector dst_vector_range)(rec__skp__subjects__event_entry_type__handover Bool)(rec__skp__subjects__event_entry_type__send_ipi Bool)))))
(define-fun us_split_fields_Dst_Subject2__projection ((a us_split_fields4)) dst_subject_type
  (rec__skp__subjects__event_entry_type__dst_subject a))

(define-fun us_split_fields_Dst_Vector2__projection ((a us_split_fields4)) dst_vector_range
  (rec__skp__subjects__event_entry_type__dst_vector a))

(define-fun us_split_fields_Handover__projection ((a us_split_fields4)) Bool
  (rec__skp__subjects__event_entry_type__handover a))

(define-fun us_split_fields_Send_IPI__projection ((a us_split_fields4)) Bool
  (rec__skp__subjects__event_entry_type__send_ipi a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_2__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep4
                            (rec__skp__subjects__event_entry_type__dst_subject
                            (us_split_fields5 a))) (to_rep4
                                                   (rec__skp__subjects__event_entry_type__dst_subject
                                                   (us_split_fields5 b))))
                         (= (to_rep5
                            (rec__skp__subjects__event_entry_type__dst_vector
                            (us_split_fields5 a))) (to_rep5
                                                   (rec__skp__subjects__event_entry_type__dst_vector
                                                   (us_split_fields5 b)))))
                         (= (rec__skp__subjects__event_entry_type__handover
                            (us_split_fields5 a)) (rec__skp__subjects__event_entry_type__handover
                                                  (us_split_fields5 b))))
                         (= (rec__skp__subjects__event_entry_type__send_ipi
                            (us_split_fields5 a)) (rec__skp__subjects__event_entry_type__send_ipi
                                                  (us_split_fields5 b))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-const skp__subjects__event_entry_type__dst_subject__first__bit Int)

(declare-const skp__subjects__event_entry_type__dst_subject__last__bit Int)

(declare-const skp__subjects__event_entry_type__dst_subject__position Int)

;; skp__subjects__event_entry_type__dst_subject__first__bit_axiom
  (assert (<= 0 skp__subjects__event_entry_type__dst_subject__first__bit))

;; skp__subjects__event_entry_type__dst_subject__last__bit_axiom
  (assert
  (< skp__subjects__event_entry_type__dst_subject__first__bit skp__subjects__event_entry_type__dst_subject__last__bit))

;; skp__subjects__event_entry_type__dst_subject__position_axiom
  (assert (<= 0 skp__subjects__event_entry_type__dst_subject__position))

(declare-const skp__subjects__event_entry_type__dst_vector__first__bit Int)

(declare-const skp__subjects__event_entry_type__dst_vector__last__bit Int)

(declare-const skp__subjects__event_entry_type__dst_vector__position Int)

;; skp__subjects__event_entry_type__dst_vector__first__bit_axiom
  (assert (<= 0 skp__subjects__event_entry_type__dst_vector__first__bit))

;; skp__subjects__event_entry_type__dst_vector__last__bit_axiom
  (assert
  (< skp__subjects__event_entry_type__dst_vector__first__bit skp__subjects__event_entry_type__dst_vector__last__bit))

;; skp__subjects__event_entry_type__dst_vector__position_axiom
  (assert (<= 0 skp__subjects__event_entry_type__dst_vector__position))

(declare-const skp__subjects__event_entry_type__handover__first__bit Int)

(declare-const skp__subjects__event_entry_type__handover__last__bit Int)

(declare-const skp__subjects__event_entry_type__handover__position Int)

;; skp__subjects__event_entry_type__handover__first__bit_axiom
  (assert (<= 0 skp__subjects__event_entry_type__handover__first__bit))

;; skp__subjects__event_entry_type__handover__last__bit_axiom
  (assert
  (< skp__subjects__event_entry_type__handover__first__bit skp__subjects__event_entry_type__handover__last__bit))

;; skp__subjects__event_entry_type__handover__position_axiom
  (assert (<= 0 skp__subjects__event_entry_type__handover__position))

(declare-const skp__subjects__event_entry_type__send_ipi__first__bit Int)

(declare-const skp__subjects__event_entry_type__send_ipi__last__bit Int)

(declare-const skp__subjects__event_entry_type__send_ipi__position Int)

;; skp__subjects__event_entry_type__send_ipi__first__bit_axiom
  (assert (<= 0 skp__subjects__event_entry_type__send_ipi__first__bit))

;; skp__subjects__event_entry_type__send_ipi__last__bit_axiom
  (assert
  (< skp__subjects__event_entry_type__send_ipi__first__bit skp__subjects__event_entry_type__send_ipi__last__bit))

;; skp__subjects__event_entry_type__send_ipi__position_axiom
  (assert (<= 0 skp__subjects__event_entry_type__send_ipi__position))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ((event_entry_type__ref 0))
(((mk_event_entry_type__ref (event_entry_type__content us_rep2)))))
(define-fun event_entry_type__ref___projection ((a event_entry_type__ref)) us_rep2
  (event_entry_type__content a))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int
  Int) (Array Int us_rep2))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep2 Int) (Array Int us_rep2))

;; singleton_def
  (assert
  (forall ((v us_rep2))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_136 Int))
                           (=>
                           (and (<= a__first temp___idx_136)
                           (<= temp___idx_136 a__last))
                           (= (bool_eq3 (select a temp___idx_136)
                              (select b (+ (- b__first a__first) temp___idx_136))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_136 Int))
  (=> (and (<= a__first temp___idx_136) (<= temp___idx_136 a__last))
  (= (bool_eq3 (select a temp___idx_136)
     (select b (+ (- b__first a__first) temp___idx_136))) true))))))))

(declare-const dummy11 (Array Int us_rep2))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int us_rep2)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int us_rep2)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int us_rep2)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep2))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep2))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq11 ((Array Int us_rep2) (Array Int us_rep2)) Bool)

(declare-datatypes ((us_split_fields6 0))
(((mk___split_fields3
  (rec__skp__subjects__subject_spec_type__cpu_id cpu_range)(rec__skp__subjects__subject_spec_type__profile profile_kind)(rec__skp__subjects__subject_spec_type__pml4_address word64)(rec__skp__subjects__subject_spec_type__ept_pointer word64)(rec__skp__subjects__subject_spec_type__vmcs_address word64)(rec__skp__subjects__subject_spec_type__io_bitmap_address word64)(rec__skp__subjects__subject_spec_type__msr_bitmap_address word64)(rec__skp__subjects__subject_spec_type__msr_store_address word64)(rec__skp__subjects__subject_spec_type__stack_address word64)(rec__skp__subjects__subject_spec_type__entry_point word64)(rec__skp__subjects__subject_spec_type__cr0_value word64)(rec__skp__subjects__subject_spec_type__cr0_mask word64)(rec__skp__subjects__subject_spec_type__cr4_value word64)(rec__skp__subjects__subject_spec_type__cr4_mask word64)(rec__skp__subjects__subject_spec_type__cs_access word32)(rec__skp__subjects__subject_spec_type__exception_bitmap word32)(rec__skp__subjects__subject_spec_type__msr_count word32)(rec__skp__subjects__subject_spec_type__vmx_controls us_rep)(rec__skp__subjects__subject_spec_type__trap_table (Array Int us_rep1))(rec__skp__subjects__subject_spec_type__event_table (Array Int us_rep2))))))
(define-fun us_split_fields_CPU_Id__projection ((a us_split_fields6)) cpu_range
  (rec__skp__subjects__subject_spec_type__cpu_id a))

(define-fun us_split_fields_Profile__projection ((a us_split_fields6)) profile_kind
  (rec__skp__subjects__subject_spec_type__profile a))

(define-fun us_split_fields_PML4_Address__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__pml4_address a))

(define-fun us_split_fields_EPT_Pointer__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__ept_pointer a))

(define-fun us_split_fields_VMCS_Address__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__vmcs_address a))

(define-fun us_split_fields_IO_Bitmap_Address__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__io_bitmap_address a))

(define-fun us_split_fields_MSR_Bitmap_Address__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__msr_bitmap_address a))

(define-fun us_split_fields_MSR_Store_Address__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__msr_store_address a))

(define-fun us_split_fields_Stack_Address__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__stack_address a))

(define-fun us_split_fields_Entry_Point__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__entry_point a))

(define-fun us_split_fields_CR0_Value__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__cr0_value a))

(define-fun us_split_fields_CR0_Mask__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__cr0_mask a))

(define-fun us_split_fields_CR4_Value__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__cr4_value a))

(define-fun us_split_fields_CR4_Mask__projection ((a us_split_fields6)) word64
  (rec__skp__subjects__subject_spec_type__cr4_mask a))

(define-fun us_split_fields_CS_Access__projection ((a us_split_fields6)) word32
  (rec__skp__subjects__subject_spec_type__cs_access a))

(define-fun us_split_fields_Exception_Bitmap__projection ((a us_split_fields6)) word32
  (rec__skp__subjects__subject_spec_type__exception_bitmap a))

(define-fun us_split_fields_MSR_Count__projection ((a us_split_fields6)) word32
  (rec__skp__subjects__subject_spec_type__msr_count a))

(define-fun us_split_fields_VMX_Controls__projection ((a us_split_fields6)) us_rep
  (rec__skp__subjects__subject_spec_type__vmx_controls a))

(define-fun us_split_fields_Trap_Table__projection ((a us_split_fields6)) (Array Int us_rep1)
  (rec__skp__subjects__subject_spec_type__trap_table a))

(define-fun us_split_fields_Event_Table__projection ((a us_split_fields6)) (Array Int us_rep2)
  (rec__skp__subjects__subject_spec_type__event_table a))

(declare-datatypes ((us_split_fields__ref3 0))
(((mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_4__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep2
                            (rec__skp__subjects__subject_spec_type__cpu_id
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__skp__subjects__subject_spec_type__cpu_id
                                                   (us_split_fields7 b))))
                         (= (to_rep3
                            (rec__skp__subjects__subject_spec_type__profile
                            (us_split_fields7 a))) (to_rep3
                                                   (rec__skp__subjects__subject_spec_type__profile
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__pml4_address
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__pml4_address
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__ept_pointer
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__ept_pointer
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__vmcs_address
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__vmcs_address
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__io_bitmap_address
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__io_bitmap_address
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__msr_bitmap_address
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__msr_bitmap_address
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__msr_store_address
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__msr_store_address
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__stack_address
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__stack_address
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__entry_point
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__entry_point
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__cr0_value
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__cr0_value
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__cr0_mask
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__cr0_mask
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__cr4_value
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__cr4_value
                                                   (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__skp__subjects__subject_spec_type__cr4_mask
                            (us_split_fields7 a))) (to_rep
                                                   (rec__skp__subjects__subject_spec_type__cr4_mask
                                                   (us_split_fields7 b)))))
                         (= (to_rep1
                            (rec__skp__subjects__subject_spec_type__cs_access
                            (us_split_fields7 a))) (to_rep1
                                                   (rec__skp__subjects__subject_spec_type__cs_access
                                                   (us_split_fields7 b)))))
                         (= (to_rep1
                            (rec__skp__subjects__subject_spec_type__exception_bitmap
                            (us_split_fields7 a))) (to_rep1
                                                   (rec__skp__subjects__subject_spec_type__exception_bitmap
                                                   (us_split_fields7 b)))))
                         (= (to_rep1
                            (rec__skp__subjects__subject_spec_type__msr_count
                            (us_split_fields7 a))) (to_rep1
                                                   (rec__skp__subjects__subject_spec_type__msr_count
                                                   (us_split_fields7 b)))))
                         (= (bool_eq
                            (rec__skp__subjects__subject_spec_type__vmx_controls
                            (us_split_fields7 a))
                            (rec__skp__subjects__subject_spec_type__vmx_controls
                            (us_split_fields7 b))) true))
                         (= (bool_eq2
                            (rec__skp__subjects__subject_spec_type__trap_table
                            (us_split_fields7 a)) 0 59
                            (rec__skp__subjects__subject_spec_type__trap_table
                            (us_split_fields7 b)) 0 59) true))
                         (= (bool_eq4
                            (rec__skp__subjects__subject_spec_type__event_table
                            (us_split_fields7 a)) 0 31
                            (rec__skp__subjects__subject_spec_type__event_table
                            (us_split_fields7 b)) 0 31) true))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-const skp__subjects__subject_spec_type__cpu_id__first__bit Int)

(declare-const skp__subjects__subject_spec_type__cpu_id__last__bit Int)

(declare-const skp__subjects__subject_spec_type__cpu_id__position Int)

;; skp__subjects__subject_spec_type__cpu_id__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cpu_id__first__bit))

;; skp__subjects__subject_spec_type__cpu_id__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__cpu_id__first__bit skp__subjects__subject_spec_type__cpu_id__last__bit))

;; skp__subjects__subject_spec_type__cpu_id__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cpu_id__position))

(declare-const skp__subjects__subject_spec_type__profile__first__bit Int)

(declare-const skp__subjects__subject_spec_type__profile__last__bit Int)

(declare-const skp__subjects__subject_spec_type__profile__position Int)

;; skp__subjects__subject_spec_type__profile__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__profile__first__bit))

;; skp__subjects__subject_spec_type__profile__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__profile__first__bit skp__subjects__subject_spec_type__profile__last__bit))

;; skp__subjects__subject_spec_type__profile__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__profile__position))

(declare-const skp__subjects__subject_spec_type__pml4_address__first__bit Int)

(declare-const skp__subjects__subject_spec_type__pml4_address__last__bit Int)

(declare-const skp__subjects__subject_spec_type__pml4_address__position Int)

;; skp__subjects__subject_spec_type__pml4_address__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__pml4_address__first__bit))

;; skp__subjects__subject_spec_type__pml4_address__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__pml4_address__first__bit skp__subjects__subject_spec_type__pml4_address__last__bit))

;; skp__subjects__subject_spec_type__pml4_address__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__pml4_address__position))

(declare-const skp__subjects__subject_spec_type__ept_pointer__first__bit Int)

(declare-const skp__subjects__subject_spec_type__ept_pointer__last__bit Int)

(declare-const skp__subjects__subject_spec_type__ept_pointer__position Int)

;; skp__subjects__subject_spec_type__ept_pointer__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__ept_pointer__first__bit))

;; skp__subjects__subject_spec_type__ept_pointer__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__ept_pointer__first__bit skp__subjects__subject_spec_type__ept_pointer__last__bit))

;; skp__subjects__subject_spec_type__ept_pointer__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__ept_pointer__position))

(declare-const skp__subjects__subject_spec_type__vmcs_address__first__bit Int)

(declare-const skp__subjects__subject_spec_type__vmcs_address__last__bit Int)

(declare-const skp__subjects__subject_spec_type__vmcs_address__position Int)

;; skp__subjects__subject_spec_type__vmcs_address__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__vmcs_address__first__bit))

;; skp__subjects__subject_spec_type__vmcs_address__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__vmcs_address__first__bit skp__subjects__subject_spec_type__vmcs_address__last__bit))

;; skp__subjects__subject_spec_type__vmcs_address__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__vmcs_address__position))

(declare-const skp__subjects__subject_spec_type__io_bitmap_address__first__bit Int)

(declare-const skp__subjects__subject_spec_type__io_bitmap_address__last__bit Int)

(declare-const skp__subjects__subject_spec_type__io_bitmap_address__position Int)

;; skp__subjects__subject_spec_type__io_bitmap_address__first__bit_axiom
  (assert
  (<= 0 skp__subjects__subject_spec_type__io_bitmap_address__first__bit))

;; skp__subjects__subject_spec_type__io_bitmap_address__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__io_bitmap_address__first__bit
  skp__subjects__subject_spec_type__io_bitmap_address__last__bit))

;; skp__subjects__subject_spec_type__io_bitmap_address__position_axiom
  (assert
  (<= 0 skp__subjects__subject_spec_type__io_bitmap_address__position))

(declare-const skp__subjects__subject_spec_type__msr_bitmap_address__first__bit Int)

(declare-const skp__subjects__subject_spec_type__msr_bitmap_address__last__bit Int)

(declare-const skp__subjects__subject_spec_type__msr_bitmap_address__position Int)

;; skp__subjects__subject_spec_type__msr_bitmap_address__first__bit_axiom
  (assert
  (<= 0 skp__subjects__subject_spec_type__msr_bitmap_address__first__bit))

;; skp__subjects__subject_spec_type__msr_bitmap_address__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__msr_bitmap_address__first__bit
  skp__subjects__subject_spec_type__msr_bitmap_address__last__bit))

;; skp__subjects__subject_spec_type__msr_bitmap_address__position_axiom
  (assert
  (<= 0 skp__subjects__subject_spec_type__msr_bitmap_address__position))

(declare-const skp__subjects__subject_spec_type__msr_store_address__first__bit Int)

(declare-const skp__subjects__subject_spec_type__msr_store_address__last__bit Int)

(declare-const skp__subjects__subject_spec_type__msr_store_address__position Int)

;; skp__subjects__subject_spec_type__msr_store_address__first__bit_axiom
  (assert
  (<= 0 skp__subjects__subject_spec_type__msr_store_address__first__bit))

;; skp__subjects__subject_spec_type__msr_store_address__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__msr_store_address__first__bit
  skp__subjects__subject_spec_type__msr_store_address__last__bit))

;; skp__subjects__subject_spec_type__msr_store_address__position_axiom
  (assert
  (<= 0 skp__subjects__subject_spec_type__msr_store_address__position))

(declare-const skp__subjects__subject_spec_type__stack_address__first__bit Int)

(declare-const skp__subjects__subject_spec_type__stack_address__last__bit Int)

(declare-const skp__subjects__subject_spec_type__stack_address__position Int)

;; skp__subjects__subject_spec_type__stack_address__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__stack_address__first__bit))

;; skp__subjects__subject_spec_type__stack_address__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__stack_address__first__bit skp__subjects__subject_spec_type__stack_address__last__bit))

;; skp__subjects__subject_spec_type__stack_address__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__stack_address__position))

(declare-const skp__subjects__subject_spec_type__entry_point__first__bit Int)

(declare-const skp__subjects__subject_spec_type__entry_point__last__bit Int)

(declare-const skp__subjects__subject_spec_type__entry_point__position Int)

;; skp__subjects__subject_spec_type__entry_point__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__entry_point__first__bit))

;; skp__subjects__subject_spec_type__entry_point__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__entry_point__first__bit skp__subjects__subject_spec_type__entry_point__last__bit))

;; skp__subjects__subject_spec_type__entry_point__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__entry_point__position))

(declare-const skp__subjects__subject_spec_type__cr0_value__first__bit Int)

(declare-const skp__subjects__subject_spec_type__cr0_value__last__bit Int)

(declare-const skp__subjects__subject_spec_type__cr0_value__position Int)

;; skp__subjects__subject_spec_type__cr0_value__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cr0_value__first__bit))

;; skp__subjects__subject_spec_type__cr0_value__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__cr0_value__first__bit skp__subjects__subject_spec_type__cr0_value__last__bit))

;; skp__subjects__subject_spec_type__cr0_value__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cr0_value__position))

(declare-const skp__subjects__subject_spec_type__cr0_mask__first__bit Int)

(declare-const skp__subjects__subject_spec_type__cr0_mask__last__bit Int)

(declare-const skp__subjects__subject_spec_type__cr0_mask__position Int)

;; skp__subjects__subject_spec_type__cr0_mask__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cr0_mask__first__bit))

;; skp__subjects__subject_spec_type__cr0_mask__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__cr0_mask__first__bit skp__subjects__subject_spec_type__cr0_mask__last__bit))

;; skp__subjects__subject_spec_type__cr0_mask__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cr0_mask__position))

(declare-const skp__subjects__subject_spec_type__cr4_value__first__bit Int)

(declare-const skp__subjects__subject_spec_type__cr4_value__last__bit Int)

(declare-const skp__subjects__subject_spec_type__cr4_value__position Int)

;; skp__subjects__subject_spec_type__cr4_value__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cr4_value__first__bit))

;; skp__subjects__subject_spec_type__cr4_value__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__cr4_value__first__bit skp__subjects__subject_spec_type__cr4_value__last__bit))

;; skp__subjects__subject_spec_type__cr4_value__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cr4_value__position))

(declare-const skp__subjects__subject_spec_type__cr4_mask__first__bit Int)

(declare-const skp__subjects__subject_spec_type__cr4_mask__last__bit Int)

(declare-const skp__subjects__subject_spec_type__cr4_mask__position Int)

;; skp__subjects__subject_spec_type__cr4_mask__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cr4_mask__first__bit))

;; skp__subjects__subject_spec_type__cr4_mask__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__cr4_mask__first__bit skp__subjects__subject_spec_type__cr4_mask__last__bit))

;; skp__subjects__subject_spec_type__cr4_mask__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cr4_mask__position))

(declare-const skp__subjects__subject_spec_type__cs_access__first__bit Int)

(declare-const skp__subjects__subject_spec_type__cs_access__last__bit Int)

(declare-const skp__subjects__subject_spec_type__cs_access__position Int)

;; skp__subjects__subject_spec_type__cs_access__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cs_access__first__bit))

;; skp__subjects__subject_spec_type__cs_access__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__cs_access__first__bit skp__subjects__subject_spec_type__cs_access__last__bit))

;; skp__subjects__subject_spec_type__cs_access__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__cs_access__position))

(declare-const skp__subjects__subject_spec_type__exception_bitmap__first__bit Int)

(declare-const skp__subjects__subject_spec_type__exception_bitmap__last__bit Int)

(declare-const skp__subjects__subject_spec_type__exception_bitmap__position Int)

;; skp__subjects__subject_spec_type__exception_bitmap__first__bit_axiom
  (assert
  (<= 0 skp__subjects__subject_spec_type__exception_bitmap__first__bit))

;; skp__subjects__subject_spec_type__exception_bitmap__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__exception_bitmap__first__bit skp__subjects__subject_spec_type__exception_bitmap__last__bit))

;; skp__subjects__subject_spec_type__exception_bitmap__position_axiom
  (assert
  (<= 0 skp__subjects__subject_spec_type__exception_bitmap__position))

(declare-const skp__subjects__subject_spec_type__msr_count__first__bit Int)

(declare-const skp__subjects__subject_spec_type__msr_count__last__bit Int)

(declare-const skp__subjects__subject_spec_type__msr_count__position Int)

;; skp__subjects__subject_spec_type__msr_count__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__msr_count__first__bit))

;; skp__subjects__subject_spec_type__msr_count__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__msr_count__first__bit skp__subjects__subject_spec_type__msr_count__last__bit))

;; skp__subjects__subject_spec_type__msr_count__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__msr_count__position))

(declare-const skp__subjects__subject_spec_type__vmx_controls__first__bit Int)

(declare-const skp__subjects__subject_spec_type__vmx_controls__last__bit Int)

(declare-const skp__subjects__subject_spec_type__vmx_controls__position Int)

;; skp__subjects__subject_spec_type__vmx_controls__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__vmx_controls__first__bit))

;; skp__subjects__subject_spec_type__vmx_controls__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__vmx_controls__first__bit skp__subjects__subject_spec_type__vmx_controls__last__bit))

;; skp__subjects__subject_spec_type__vmx_controls__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__vmx_controls__position))

(declare-const skp__subjects__subject_spec_type__trap_table__first__bit Int)

(declare-const skp__subjects__subject_spec_type__trap_table__last__bit Int)

(declare-const skp__subjects__subject_spec_type__trap_table__position Int)

;; skp__subjects__subject_spec_type__trap_table__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__trap_table__first__bit))

;; skp__subjects__subject_spec_type__trap_table__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__trap_table__first__bit skp__subjects__subject_spec_type__trap_table__last__bit))

;; skp__subjects__subject_spec_type__trap_table__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__trap_table__position))

(declare-const skp__subjects__subject_spec_type__event_table__first__bit Int)

(declare-const skp__subjects__subject_spec_type__event_table__last__bit Int)

(declare-const skp__subjects__subject_spec_type__event_table__position Int)

;; skp__subjects__subject_spec_type__event_table__first__bit_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__event_table__first__bit))

;; skp__subjects__subject_spec_type__event_table__last__bit_axiom
  (assert
  (< skp__subjects__subject_spec_type__event_table__first__bit skp__subjects__subject_spec_type__event_table__last__bit))

;; skp__subjects__subject_spec_type__event_table__position_axiom
  (assert (<= 0 skp__subjects__subject_spec_type__event_table__position))

(declare-fun user_eq12 (us_rep3 us_rep3) Bool)

(declare-const dummy12 us_rep3)

(declare-datatypes ((subject_spec_type__ref 0))
(((mk_subject_spec_type__ref (subject_spec_type__content us_rep3)))))
(define-fun subject_spec_type__ref___projection ((a subject_spec_type__ref)) us_rep3
  (subject_spec_type__content a))

(declare-datatypes ((map__ref2 0))
(((mk_map__ref2 (map__content2 (Array Int us_rep3))))))
(declare-fun slide2 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int
  Int) (Array Int us_rep3))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (us_rep3 Int) (Array Int us_rep3))

;; singleton_def
  (assert
  (forall ((v us_rep3))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_140 Int))
                           (=>
                           (and (<= a__first temp___idx_140)
                           (<= temp___idx_140 a__last))
                           (= (bool_eq5 (select a temp___idx_140)
                              (select b (+ (- b__first a__first) temp___idx_140))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_140 Int))
  (=> (and (<= a__first temp___idx_140) (<= temp___idx_140 a__last))
  (= (bool_eq5 (select a temp___idx_140)
     (select b (+ (- b__first a__first) temp___idx_140))) true))))))))

(declare-const subject_specs (Array Int us_rep3))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const null_trap us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const null_trap_table (Array Int us_rep1))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun skp__subjects__null_trap_table__aggregate_def (us_rep1) (Array Int us_rep1))

;; def_axiom
  (assert
  (forall ((temp___134 us_rep1))
  (forall ((temp___135 Int))
  (= (select (skp__subjects__null_trap_table__aggregate_def temp___134) temp___135) temp___134))))

;; null_trap_table__def_axiom
  (assert
  (= null_trap_table (skp__subjects__null_trap_table__aggregate_def
                     null_trap)))

(declare-const null_event us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const null_event_table (Array Int us_rep2))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun skp__subjects__null_event_table__aggregate_def (us_rep2) (Array Int us_rep2))

;; def_axiom
  (assert
  (forall ((temp___138 us_rep2))
  (forall ((temp___139 Int))
  (= (select (skp__subjects__null_event_table__aggregate_def temp___138) temp___139) temp___138))))

;; null_event_table__def_axiom
  (assert
  (= null_event_table (skp__subjects__null_event_table__aggregate_def
                      null_event)))

(declare-fun skp__subjects__subject_specs__aggregate_def (us_rep3 us_rep3
  us_rep3 us_rep3 us_rep3 us_rep3 us_rep3) (Array Int us_rep3))

;; def_axiom
  (assert
  (forall ((temp___142 us_rep3) (temp___143 us_rep3) (temp___144 us_rep3)
  (temp___145 us_rep3) (temp___146 us_rep3) (temp___147 us_rep3)
  (temp___148 us_rep3))
  (let ((temp___141 (skp__subjects__subject_specs__aggregate_def temp___142
                    temp___143 temp___144 temp___145 temp___146 temp___147
                    temp___148)))
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___141 0) temp___142)
  (= (select temp___141 1) temp___143)) (= (select temp___141 2) temp___144))
  (= (select temp___141 3) temp___145)) (= (select temp___141 4) temp___146))
  (= (select temp___141 5) temp___147)) (= (select temp___141 6) temp___148)))))

(declare-fun temp___150 (us_rep2 us_rep2 us_rep2) (Array Int us_rep2))

;; def_axiom
  (assert
  (forall ((temp___152 us_rep2) (temp___153 us_rep2) (temp___154 us_rep2))
  (let ((temp___151 (temp___150 temp___152 temp___153 temp___154)))
  (forall ((temp___155 Int))
  (ite (= temp___155 2) (= (select temp___151 temp___155) temp___153)
  (ite (= temp___155 1) (= (select temp___151 temp___155) temp___152)
  (= (select temp___151 temp___155) temp___154)))))))

(declare-fun temp___156 (us_rep2 us_rep2) (Array Int us_rep2))

;; def_axiom
  (assert
  (forall ((temp___158 us_rep2) (temp___159 us_rep2))
  (let ((temp___157 (temp___156 temp___158 temp___159)))
  (forall ((temp___160 Int))
  (ite (= temp___160 1) (= (select temp___157 temp___160) temp___158)
  (= (select temp___157 temp___160) temp___159))))))

(declare-fun temp___161 (us_rep2 us_rep2 us_rep2) (Array Int us_rep2))

;; def_axiom
  (assert
  (forall ((temp___163 us_rep2) (temp___164 us_rep2) (temp___165 us_rep2))
  (let ((temp___162 (temp___161 temp___163 temp___164 temp___165)))
  (forall ((temp___166 Int))
  (ite (= temp___166 1) (= (select temp___162 temp___166) temp___164)
  (ite (= temp___166 4) (= (select temp___162 temp___166) temp___163)
  (= (select temp___162 temp___166) temp___165)))))))

(declare-fun temp___167 (us_rep2 us_rep2 us_rep2) (Array Int us_rep2))

;; def_axiom
  (assert
  (forall ((temp___169 us_rep2) (temp___170 us_rep2) (temp___171 us_rep2))
  (let ((temp___168 (temp___167 temp___169 temp___170 temp___171)))
  (forall ((temp___172 Int))
  (ite (= temp___172 1) (= (select temp___168 temp___172) temp___170)
  (ite (= temp___172 4) (= (select temp___168 temp___172) temp___169)
  (= (select temp___168 temp___172) temp___171)))))))

(declare-fun temp___173 (us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1) (Array Int us_rep1))

;; def_axiom
  (assert
  (forall ((temp___175 us_rep1) (temp___176 us_rep1) (temp___177 us_rep1)
  (temp___178 us_rep1) (temp___179 us_rep1) (temp___180 us_rep1)
  (temp___181 us_rep1) (temp___182 us_rep1) (temp___183 us_rep1)
  (temp___184 us_rep1) (temp___185 us_rep1) (temp___186 us_rep1)
  (temp___187 us_rep1) (temp___188 us_rep1) (temp___189 us_rep1)
  (temp___190 us_rep1) (temp___191 us_rep1) (temp___192 us_rep1)
  (temp___193 us_rep1) (temp___194 us_rep1) (temp___195 us_rep1)
  (temp___196 us_rep1) (temp___197 us_rep1) (temp___198 us_rep1)
  (temp___199 us_rep1) (temp___200 us_rep1) (temp___201 us_rep1)
  (temp___202 us_rep1) (temp___203 us_rep1) (temp___204 us_rep1)
  (temp___205 us_rep1) (temp___206 us_rep1) (temp___207 us_rep1)
  (temp___208 us_rep1) (temp___209 us_rep1) (temp___210 us_rep1)
  (temp___211 us_rep1) (temp___212 us_rep1) (temp___213 us_rep1)
  (temp___214 us_rep1) (temp___215 us_rep1) (temp___216 us_rep1)
  (temp___217 us_rep1) (temp___218 us_rep1) (temp___219 us_rep1)
  (temp___220 us_rep1) (temp___221 us_rep1) (temp___222 us_rep1)
  (temp___223 us_rep1) (temp___224 us_rep1) (temp___225 us_rep1)
  (temp___226 us_rep1) (temp___227 us_rep1) (temp___228 us_rep1)
  (temp___229 us_rep1) (temp___230 us_rep1) (temp___231 us_rep1)
  (temp___232 us_rep1))
  (let ((temp___174 (temp___173 temp___175 temp___176 temp___177 temp___178
                    temp___179 temp___180 temp___181 temp___182 temp___183
                    temp___184 temp___185 temp___186 temp___187 temp___188
                    temp___189 temp___190 temp___191 temp___192 temp___193
                    temp___194 temp___195 temp___196 temp___197 temp___198
                    temp___199 temp___200 temp___201 temp___202 temp___203
                    temp___204 temp___205 temp___206 temp___207 temp___208
                    temp___209 temp___210 temp___211 temp___212 temp___213
                    temp___214 temp___215 temp___216 temp___217 temp___218
                    temp___219 temp___220 temp___221 temp___222 temp___223
                    temp___224 temp___225 temp___226 temp___227 temp___228
                    temp___229 temp___230 temp___231 temp___232)))
  (forall ((temp___233 Int))
  (ite (= temp___233 59) (= (select temp___174 temp___233) temp___231)
  (ite (= temp___233 58) (= (select temp___174 temp___233) temp___230)
  (ite (= temp___233 57) (= (select temp___174 temp___233) temp___229)
  (ite (= temp___233 56) (= (select temp___174 temp___233) temp___228)
  (ite (= temp___233 55) (= (select temp___174 temp___233) temp___227)
  (ite (= temp___233 54) (= (select temp___174 temp___233) temp___226)
  (ite (= temp___233 53) (= (select temp___174 temp___233) temp___225)
  (ite (= temp___233 52) (= (select temp___174 temp___233) temp___224)
  (ite (= temp___233 51) (= (select temp___174 temp___233) temp___223)
  (ite (= temp___233 50) (= (select temp___174 temp___233) temp___222)
  (ite (= temp___233 49) (= (select temp___174 temp___233) temp___221)
  (ite (= temp___233 48) (= (select temp___174 temp___233) temp___220)
  (ite (= temp___233 47) (= (select temp___174 temp___233) temp___219)
  (ite (= temp___233 46) (= (select temp___174 temp___233) temp___218)
  (ite (= temp___233 45) (= (select temp___174 temp___233) temp___217)
  (ite (= temp___233 44) (= (select temp___174 temp___233) temp___216)
  (ite (= temp___233 43) (= (select temp___174 temp___233) temp___215)
  (ite (= temp___233 41) (= (select temp___174 temp___233) temp___214)
  (ite (= temp___233 40) (= (select temp___174 temp___233) temp___213)
  (ite (= temp___233 39) (= (select temp___174 temp___233) temp___212)
  (ite (= temp___233 37) (= (select temp___174 temp___233) temp___211)
  (ite (= temp___233 36) (= (select temp___174 temp___233) temp___210)
  (ite (= temp___233 34) (= (select temp___174 temp___233) temp___209)
  (ite (= temp___233 33) (= (select temp___174 temp___233) temp___208)
  (ite (= temp___233 32) (= (select temp___174 temp___233) temp___207)
  (ite (= temp___233 31) (= (select temp___174 temp___233) temp___206)
  (ite (= temp___233 30) (= (select temp___174 temp___233) temp___205)
  (ite (= temp___233 29) (= (select temp___174 temp___233) temp___204)
  (ite (= temp___233 28) (= (select temp___174 temp___233) temp___203)
  (ite (= temp___233 27) (= (select temp___174 temp___233) temp___202)
  (ite (= temp___233 26) (= (select temp___174 temp___233) temp___201)
  (ite (= temp___233 25) (= (select temp___174 temp___233) temp___200)
  (ite (= temp___233 24) (= (select temp___174 temp___233) temp___199)
  (ite (= temp___233 23) (= (select temp___174 temp___233) temp___198)
  (ite (= temp___233 22) (= (select temp___174 temp___233) temp___197)
  (ite (= temp___233 21) (= (select temp___174 temp___233) temp___196)
  (ite (= temp___233 20) (= (select temp___174 temp___233) temp___195)
  (ite (= temp___233 19) (= (select temp___174 temp___233) temp___194)
  (ite (= temp___233 18) (= (select temp___174 temp___233) temp___193)
  (ite (= temp___233 17) (= (select temp___174 temp___233) temp___192)
  (ite (= temp___233 16) (= (select temp___174 temp___233) temp___191)
  (ite (= temp___233 15) (= (select temp___174 temp___233) temp___190)
  (ite (= temp___233 14) (= (select temp___174 temp___233) temp___189)
  (ite (= temp___233 13) (= (select temp___174 temp___233) temp___188)
  (ite (= temp___233 12) (= (select temp___174 temp___233) temp___187)
  (ite (= temp___233 11) (= (select temp___174 temp___233) temp___186)
  (ite (= temp___233 10) (= (select temp___174 temp___233) temp___185)
  (ite (= temp___233 9) (= (select temp___174 temp___233) temp___184)
  (ite (= temp___233 8) (= (select temp___174 temp___233) temp___183)
  (ite (= temp___233 7) (= (select temp___174 temp___233) temp___182)
  (ite (= temp___233 6) (= (select temp___174 temp___233) temp___181)
  (ite (= temp___233 5) (= (select temp___174 temp___233) temp___180)
  (ite (= temp___233 4) (= (select temp___174 temp___233) temp___179)
  (ite (= temp___233 3) (= (select temp___174 temp___233) temp___178)
  (ite (= temp___233 2) (= (select temp___174 temp___233) temp___177)
  (ite (= temp___233 1) (= (select temp___174 temp___233) temp___176)
  (ite (= temp___233 0) (= (select temp___174 temp___233) temp___175)
  (= (select temp___174 temp___233) temp___232))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(declare-fun temp___234 (us_rep2 us_rep2) (Array Int us_rep2))

;; def_axiom
  (assert
  (forall ((temp___236 us_rep2) (temp___237 us_rep2))
  (let ((temp___235 (temp___234 temp___236 temp___237)))
  (forall ((temp___238 Int))
  (ite (= temp___238 1) (= (select temp___235 temp___238) temp___236)
  (= (select temp___235 temp___238) temp___237))))))

(declare-fun temp___239 (us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1) (Array Int us_rep1))

;; def_axiom
  (assert
  (forall ((temp___241 us_rep1) (temp___242 us_rep1) (temp___243 us_rep1)
  (temp___244 us_rep1) (temp___245 us_rep1) (temp___246 us_rep1)
  (temp___247 us_rep1) (temp___248 us_rep1) (temp___249 us_rep1)
  (temp___250 us_rep1) (temp___251 us_rep1) (temp___252 us_rep1)
  (temp___253 us_rep1) (temp___254 us_rep1) (temp___255 us_rep1)
  (temp___256 us_rep1) (temp___257 us_rep1) (temp___258 us_rep1)
  (temp___259 us_rep1) (temp___260 us_rep1) (temp___261 us_rep1)
  (temp___262 us_rep1) (temp___263 us_rep1) (temp___264 us_rep1)
  (temp___265 us_rep1) (temp___266 us_rep1) (temp___267 us_rep1)
  (temp___268 us_rep1) (temp___269 us_rep1) (temp___270 us_rep1)
  (temp___271 us_rep1) (temp___272 us_rep1) (temp___273 us_rep1)
  (temp___274 us_rep1) (temp___275 us_rep1) (temp___276 us_rep1)
  (temp___277 us_rep1) (temp___278 us_rep1) (temp___279 us_rep1)
  (temp___280 us_rep1) (temp___281 us_rep1) (temp___282 us_rep1)
  (temp___283 us_rep1) (temp___284 us_rep1) (temp___285 us_rep1)
  (temp___286 us_rep1) (temp___287 us_rep1) (temp___288 us_rep1)
  (temp___289 us_rep1) (temp___290 us_rep1) (temp___291 us_rep1)
  (temp___292 us_rep1) (temp___293 us_rep1) (temp___294 us_rep1)
  (temp___295 us_rep1) (temp___296 us_rep1) (temp___297 us_rep1)
  (temp___298 us_rep1))
  (let ((temp___240 (temp___239 temp___241 temp___242 temp___243 temp___244
                    temp___245 temp___246 temp___247 temp___248 temp___249
                    temp___250 temp___251 temp___252 temp___253 temp___254
                    temp___255 temp___256 temp___257 temp___258 temp___259
                    temp___260 temp___261 temp___262 temp___263 temp___264
                    temp___265 temp___266 temp___267 temp___268 temp___269
                    temp___270 temp___271 temp___272 temp___273 temp___274
                    temp___275 temp___276 temp___277 temp___278 temp___279
                    temp___280 temp___281 temp___282 temp___283 temp___284
                    temp___285 temp___286 temp___287 temp___288 temp___289
                    temp___290 temp___291 temp___292 temp___293 temp___294
                    temp___295 temp___296 temp___297 temp___298)))
  (forall ((temp___299 Int))
  (ite (= temp___299 59) (= (select temp___240 temp___299) temp___297)
  (ite (= temp___299 58) (= (select temp___240 temp___299) temp___296)
  (ite (= temp___299 57) (= (select temp___240 temp___299) temp___295)
  (ite (= temp___299 56) (= (select temp___240 temp___299) temp___294)
  (ite (= temp___299 55) (= (select temp___240 temp___299) temp___293)
  (ite (= temp___299 54) (= (select temp___240 temp___299) temp___292)
  (ite (= temp___299 53) (= (select temp___240 temp___299) temp___291)
  (ite (= temp___299 52) (= (select temp___240 temp___299) temp___290)
  (ite (= temp___299 51) (= (select temp___240 temp___299) temp___289)
  (ite (= temp___299 50) (= (select temp___240 temp___299) temp___288)
  (ite (= temp___299 49) (= (select temp___240 temp___299) temp___287)
  (ite (= temp___299 48) (= (select temp___240 temp___299) temp___286)
  (ite (= temp___299 47) (= (select temp___240 temp___299) temp___285)
  (ite (= temp___299 46) (= (select temp___240 temp___299) temp___284)
  (ite (= temp___299 45) (= (select temp___240 temp___299) temp___283)
  (ite (= temp___299 44) (= (select temp___240 temp___299) temp___282)
  (ite (= temp___299 43) (= (select temp___240 temp___299) temp___281)
  (ite (= temp___299 41) (= (select temp___240 temp___299) temp___280)
  (ite (= temp___299 40) (= (select temp___240 temp___299) temp___279)
  (ite (= temp___299 39) (= (select temp___240 temp___299) temp___278)
  (ite (= temp___299 37) (= (select temp___240 temp___299) temp___277)
  (ite (= temp___299 36) (= (select temp___240 temp___299) temp___276)
  (ite (= temp___299 34) (= (select temp___240 temp___299) temp___275)
  (ite (= temp___299 33) (= (select temp___240 temp___299) temp___274)
  (ite (= temp___299 32) (= (select temp___240 temp___299) temp___273)
  (ite (= temp___299 31) (= (select temp___240 temp___299) temp___272)
  (ite (= temp___299 30) (= (select temp___240 temp___299) temp___271)
  (ite (= temp___299 29) (= (select temp___240 temp___299) temp___270)
  (ite (= temp___299 28) (= (select temp___240 temp___299) temp___269)
  (ite (= temp___299 27) (= (select temp___240 temp___299) temp___268)
  (ite (= temp___299 26) (= (select temp___240 temp___299) temp___267)
  (ite (= temp___299 25) (= (select temp___240 temp___299) temp___266)
  (ite (= temp___299 24) (= (select temp___240 temp___299) temp___265)
  (ite (= temp___299 23) (= (select temp___240 temp___299) temp___264)
  (ite (= temp___299 22) (= (select temp___240 temp___299) temp___263)
  (ite (= temp___299 21) (= (select temp___240 temp___299) temp___262)
  (ite (= temp___299 20) (= (select temp___240 temp___299) temp___261)
  (ite (= temp___299 19) (= (select temp___240 temp___299) temp___260)
  (ite (= temp___299 18) (= (select temp___240 temp___299) temp___259)
  (ite (= temp___299 17) (= (select temp___240 temp___299) temp___258)
  (ite (= temp___299 16) (= (select temp___240 temp___299) temp___257)
  (ite (= temp___299 15) (= (select temp___240 temp___299) temp___256)
  (ite (= temp___299 14) (= (select temp___240 temp___299) temp___255)
  (ite (= temp___299 13) (= (select temp___240 temp___299) temp___254)
  (ite (= temp___299 12) (= (select temp___240 temp___299) temp___253)
  (ite (= temp___299 11) (= (select temp___240 temp___299) temp___252)
  (ite (= temp___299 10) (= (select temp___240 temp___299) temp___251)
  (ite (= temp___299 9) (= (select temp___240 temp___299) temp___250)
  (ite (= temp___299 8) (= (select temp___240 temp___299) temp___249)
  (ite (= temp___299 7) (= (select temp___240 temp___299) temp___248)
  (ite (= temp___299 6) (= (select temp___240 temp___299) temp___247)
  (ite (= temp___299 5) (= (select temp___240 temp___299) temp___246)
  (ite (= temp___299 4) (= (select temp___240 temp___299) temp___245)
  (ite (= temp___299 3) (= (select temp___240 temp___299) temp___244)
  (ite (= temp___299 2) (= (select temp___240 temp___299) temp___243)
  (ite (= temp___299 1) (= (select temp___240 temp___299) temp___242)
  (ite (= temp___299 0) (= (select temp___240 temp___299) temp___241)
  (= (select temp___240 temp___299) temp___298))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

(declare-fun temp___300 (us_rep2 us_rep2) (Array Int us_rep2))

;; def_axiom
  (assert
  (forall ((temp___302 us_rep2) (temp___303 us_rep2))
  (let ((temp___301 (temp___300 temp___302 temp___303)))
  (forall ((temp___304 Int))
  (ite (= temp___304 1) (= (select temp___301 temp___304) temp___302)
  (= (select temp___301 temp___304) temp___303))))))

;; subject_specs__def_axiom
  (assert
  (= subject_specs (skp__subjects__subject_specs__aggregate_def
                   (mk___rep3
                   (mk___split_fields3 (of_rep2 0) (of_rep3 0)
                   (of_rep ((_ int2bv 64) 16031744))
                   (of_rep ((_ int2bv 64) 0)) (of_rep ((_ int2bv 64) 20480))
                   (of_rep ((_ int2bv 64) 16121856))
                   (of_rep ((_ int2bv 64) 16195584))
                   (of_rep ((_ int2bv 64) 0)) (of_rep ((_ int2bv 64) 12288))
                   (of_rep ((_ int2bv 64) 24576))
                   (of_rep ((_ int2bv 64) 2147549235))
                   (of_rep ((_ int2bv 64) 3758424127))
                   (of_rep ((_ int2bv 64) 8736))
                   (of_rep ((_ int2bv 64) 1533951))
                   (of_rep1 ((_ int2bv 32) 41115))
                   (of_rep1 ((_ int2bv 32) 4294967295))
                   (of_rep1 ((_ int2bv 32) 0))
                   (mk___rep
                   (mk___split_fields (of_rep1 ((_ int2bv 32) 73))
                   (of_rep1 ((_ int2bv 32) 2996411904))
                   (of_rep1 ((_ int2bv 32) 64))
                   (of_rep1 ((_ int2bv 32) 4227584))
                   (of_rep1 ((_ int2bv 32) 512)))) null_trap_table
                   null_event_table))
                   (mk___rep3
                   (mk___split_fields3 (of_rep2 0) (of_rep3 0)
                   (of_rep ((_ int2bv 64) 16080896))
                   (of_rep ((_ int2bv 64) 0)) (of_rep ((_ int2bv 64) 24576))
                   (of_rep ((_ int2bv 64) 16162816))
                   (of_rep ((_ int2bv 64) 16244736))
                   (of_rep ((_ int2bv 64) 0)) (of_rep ((_ int2bv 64) 12288))
                   (of_rep ((_ int2bv 64) 24576))
                   (of_rep ((_ int2bv 64) 2147549235))
                   (of_rep ((_ int2bv 64) 3758424127))
                   (of_rep ((_ int2bv 64) 8736))
                   (of_rep ((_ int2bv 64) 1533951))
                   (of_rep1 ((_ int2bv 32) 41115))
                   (of_rep1 ((_ int2bv 32) 4294967295))
                   (of_rep1 ((_ int2bv 32) 0))
                   (mk___rep
                   (mk___split_fields (of_rep1 ((_ int2bv 32) 73))
                   (of_rep1 ((_ int2bv 32) 2996411904))
                   (of_rep1 ((_ int2bv 32) 64))
                   (of_rep1 ((_ int2bv 32) 4227584))
                   (of_rep1 ((_ int2bv 32) 512)))) null_trap_table
                   (temp___150
                   (mk___rep2
                   (mk___split_fields2 (of_rep4 5) (of_rep5 49) (of_int 0)
                   (of_int 1)))
                   (mk___rep2
                   (mk___split_fields2 (of_rep4 6) (of_rep5 49) (of_int 0)
                   (of_int 1))) null_event)))
                   (mk___rep3
                   (mk___split_fields3 (of_rep2 2) (of_rep3 0)
                   (of_rep ((_ int2bv 64) 16048128))
                   (of_rep ((_ int2bv 64) 0)) (of_rep ((_ int2bv 64) 28672))
                   (of_rep ((_ int2bv 64) 16130048))
                   (of_rep ((_ int2bv 64) 16199680))
                   (of_rep ((_ int2bv 64) 0)) (of_rep ((_ int2bv 64) 12288))
                   (of_rep ((_ int2bv 64) 24576))
                   (of_rep ((_ int2bv 64) 2147549235))
                   (of_rep ((_ int2bv 64) 3758424127))
                   (of_rep ((_ int2bv 64) 8736))
                   (of_rep ((_ int2bv 64) 1533951))
                   (of_rep1 ((_ int2bv 32) 41115))
                   (of_rep1 ((_ int2bv 32) 4294967295))
                   (of_rep1 ((_ int2bv 32) 0))
                   (mk___rep
                   (mk___split_fields (of_rep1 ((_ int2bv 32) 73))
                   (of_rep1 ((_ int2bv 32) 2996411904))
                   (of_rep1 ((_ int2bv 32) 64))
                   (of_rep1 ((_ int2bv 32) 4227584))
                   (of_rep1 ((_ int2bv 32) 512)))) null_trap_table
                   (temp___156
                   (mk___rep2
                   (mk___split_fields2 (of_rep4 1) (of_rep5 38) (of_int 0)
                   (of_int 1))) null_event)))
                   (mk___rep3
                   (mk___split_fields3 (of_rep2 1) (of_rep3 0)
                   (of_rep ((_ int2bv 64) 16015360))
                   (of_rep ((_ int2bv 64) 0)) (of_rep ((_ int2bv 64) 32768))
                   (of_rep ((_ int2bv 64) 16113664))
                   (of_rep ((_ int2bv 64) 16191488))
                   (of_rep ((_ int2bv 64) 0)) (of_rep ((_ int2bv 64) 12288))
                   (of_rep ((_ int2bv 64) 24576))
                   (of_rep ((_ int2bv 64) 2147549235))
                   (of_rep ((_ int2bv 64) 3758424127))
                   (of_rep ((_ int2bv 64) 8736))
                   (of_rep ((_ int2bv 64) 1533951))
                   (of_rep1 ((_ int2bv 32) 41115))
                   (of_rep1 ((_ int2bv 32) 4294967295))
                   (of_rep1 ((_ int2bv 32) 0))
                   (mk___rep
                   (mk___split_fields (of_rep1 ((_ int2bv 32) 73))
                   (of_rep1 ((_ int2bv 32) 2996411904))
                   (of_rep1 ((_ int2bv 32) 64))
                   (of_rep1 ((_ int2bv 32) 4227584))
                   (of_rep1 ((_ int2bv 32) 512)))) null_trap_table
                   (temp___161
                   (mk___rep2
                   (mk___split_fields2 (of_rep4 5) (of_rep5 256) (of_int 1)
                   (of_int 0)))
                   (mk___rep2
                   (mk___split_fields2 (of_rep4 1) (of_rep5 36) (of_int 0)
                   (of_int 1))) null_event)))
                   (mk___rep3
                   (mk___split_fields3 (of_rep2 3) (of_rep3 0)
                   (of_rep ((_ int2bv 64) 16064512))
                   (of_rep ((_ int2bv 64) 0)) (of_rep ((_ int2bv 64) 36864))
                   (of_rep ((_ int2bv 64) 16154624))
                   (of_rep ((_ int2bv 64) 16228352))
                   (of_rep ((_ int2bv 64) 0)) (of_rep ((_ int2bv 64) 12288))
                   (of_rep ((_ int2bv 64) 24576))
                   (of_rep ((_ int2bv 64) 2147549235))
                   (of_rep ((_ int2bv 64) 3758424127))
                   (of_rep ((_ int2bv 64) 8736))
                   (of_rep ((_ int2bv 64) 1533951))
                   (of_rep1 ((_ int2bv 32) 41115))
                   (of_rep1 ((_ int2bv 32) 4294967295))
                   (of_rep1 ((_ int2bv 32) 0))
                   (mk___rep
                   (mk___split_fields (of_rep1 ((_ int2bv 32) 73))
                   (of_rep1 ((_ int2bv 32) 2996411904))
                   (of_rep1 ((_ int2bv 32) 64))
                   (of_rep1 ((_ int2bv 32) 4227584))
                   (of_rep1 ((_ int2bv 32) 512)))) null_trap_table
                   (temp___167
                   (mk___rep2
                   (mk___split_fields2 (of_rep4 6) (of_rep5 256) (of_int 1)
                   (of_int 0)))
                   (mk___rep2
                   (mk___split_fields2 (of_rep4 1) (of_rep5 37) (of_int 0)
                   (of_int 1))) null_event)))
                   (mk___rep3
                   (mk___split_fields3 (of_rep2 1) (of_rep3 1)
                   (of_rep ((_ int2bv 64) 0))
                   (of_rep ((_ int2bv 64) 14348318))
                   (of_rep ((_ int2bv 64) 40960))
                   (of_rep ((_ int2bv 64) 16097280))
                   (of_rep ((_ int2bv 64) 16183296))
                   (of_rep ((_ int2bv 64) 16187392))
                   (of_rep ((_ int2bv 64) 0))
                   (of_rep ((_ int2bv 64) 4194304))
                   (of_rep ((_ int2bv 64) 53)) (of_rep ((_ int2bv 64) 32))
                   (of_rep ((_ int2bv 64) 8224))
                   (of_rep ((_ int2bv 64) 8192))
                   (of_rep1 ((_ int2bv 32) 49307))
                   (of_rep1 ((_ int2bv 32) 4293951490))
                   (of_rep1 ((_ int2bv 32) 5))
                   (mk___rep
                   (mk___split_fields (of_rep1 ((_ int2bv 32) 73))
                   (of_rep1 ((_ int2bv 32) 2996313600))
                   (of_rep1 ((_ int2bv 32) 194))
                   (of_rep1 ((_ int2bv 32) 7373312))
                   (of_rep1 ((_ int2bv 32) 32768))))
                   (temp___173
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 3) (of_rep5 36)))
                   null_trap)
                   (temp___234
                   (mk___rep2
                   (mk___split_fields2 (of_rep4 1) (of_rep5 34) (of_int 0)
                   (of_int 1))) null_event)))
                   (mk___rep3
                   (mk___split_fields3 (of_rep2 3) (of_rep3 1)
                   (of_rep ((_ int2bv 64) 0))
                   (of_rep ((_ int2bv 64) 10092574))
                   (of_rep ((_ int2bv 64) 45056))
                   (of_rep ((_ int2bv 64) 16138240))
                   (of_rep ((_ int2bv 64) 16220160))
                   (of_rep ((_ int2bv 64) 16224256))
                   (of_rep ((_ int2bv 64) 0))
                   (of_rep ((_ int2bv 64) 4194304))
                   (of_rep ((_ int2bv 64) 53)) (of_rep ((_ int2bv 64) 32))
                   (of_rep ((_ int2bv 64) 8224))
                   (of_rep ((_ int2bv 64) 8192))
                   (of_rep1 ((_ int2bv 32) 49307))
                   (of_rep1 ((_ int2bv 32) 4293951490))
                   (of_rep1 ((_ int2bv 32) 5))
                   (mk___rep
                   (mk___split_fields (of_rep1 ((_ int2bv 32) 73))
                   (of_rep1 ((_ int2bv 32) 2996313600))
                   (of_rep1 ((_ int2bv 32) 194))
                   (of_rep1 ((_ int2bv 32) 7373312))
                   (of_rep1 ((_ int2bv 32) 32768))))
                   (temp___239
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   (mk___rep1 (mk___split_fields1 (of_rep4 4) (of_rep5 36)))
                   null_trap)
                   (temp___300
                   (mk___rep2
                   (mk___split_fields2 (of_rep4 1) (of_rep5 35) (of_int 0)
                   (of_int 1))) null_event))))))

(define-fun dynamic_invariant1 ((temp___expr_350 Int)
  (temp___is_init_347 Bool) (temp___skip_constant_348 Bool)
  (temp___do_toplevel_349 Bool)) Bool (=>
                                      (or (= temp___is_init_347 true)
                                      (<= 0 1)) (in_range3 temp___expr_350)))

;; null_trap__def_axiom
  (assert
  (= null_trap (mk___rep1 (mk___split_fields1 (of_rep4 7) (of_rep5 256)))))

;; null_event__def_axiom
  (assert
  (= null_event (mk___rep2
                (mk___split_fields2 (of_rep4 7) (of_rep5 256) (of_int 0)
                (of_int 0)))))

(define-fun dynamic_invariant2 ((temp___expr_320 Int)
  (temp___is_init_317 Bool) (temp___skip_constant_318 Bool)
  (temp___do_toplevel_319 Bool)) Bool (=>
                                      (or (= temp___is_init_317 true)
                                      (<= 0 3)) (in_range2 temp___expr_320)))

(define-fun dynamic_invariant3 ((temp___expr_332 Int)
  (temp___is_init_329 Bool) (temp___skip_constant_330 Bool)
  (temp___do_toplevel_331 Bool)) Bool (=>
                                      (or (= temp___is_init_329 true)
                                      (<= 0 7)) (in_range4 temp___expr_332)))

(define-fun dynamic_invariant4 ((temp___expr_344 Int)
  (temp___is_init_341 Bool) (temp___skip_constant_342 Bool)
  (temp___do_toplevel_343 Bool)) Bool (=>
                                      (or (= temp___is_init_341 true)
                                      (<= 0 256)) (in_range5
                                      temp___expr_344)))

(define-fun dynamic_invariant5 ((temp___expr_308 (_ BitVec 32))
  (temp___is_init_305 Bool) (temp___skip_constant_306 Bool)
  (temp___do_toplevel_307 Bool)) Bool true)

(define-fun dynamic_invariant6 ((temp___expr_314 (_ BitVec 64))
  (temp___is_init_311 Bool) (temp___skip_constant_312 Bool)
  (temp___do_toplevel_313 Bool)) Bool true)

;; H
  (assert (in_range1 subject_id))

;; H
  (assert
  (= (bvurem (to_rep
             (rec__skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 0)))) ((_ int2bv 64) 4096)) ((_ int2bv 64) 0)))

;; H
  (assert
  (= (bvurem (to_rep
             (rec__skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 1)))) ((_ int2bv 64) 4096)) ((_ int2bv 64) 0)))

;; H
  (assert
  (= (bvurem (to_rep
             (rec__skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 2)))) ((_ int2bv 64) 4096)) ((_ int2bv 64) 0)))

;; H
  (assert
  (= (bvurem (to_rep
             (rec__skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 3)))) ((_ int2bv 64) 4096)) ((_ int2bv 64) 0)))

;; H
  (assert
  (= (bvurem (to_rep
             (rec__skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 4)))) ((_ int2bv 64) 4096)) ((_ int2bv 64) 0)))

(assert
;; WP_parameter_def
 ;; File "sk.ads", line 23, characters 0-0
  (not
  (= (bvurem (to_rep
             (rec__skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 5)))) ((_ int2bv 64) 4096)) ((_ int2bv 64) 0))))
(check-sat)
(exit)
