;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields (mk___split_fields (rec__dic__pr_t__x integer)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer
  (rec__dic__pr_t__x a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep (rec__dic__pr_t__x (us_split_fields1 a)))
                   (to_rep (rec__dic__pr_t__x (us_split_fields1 b)))) true
                   false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dic__pr_t__x__first__bit () Int)

(declare-fun dic__pr_t__x__last__bit () Int)

(declare-fun dic__pr_t__x__position () Int)

;; dic__pr_t__x__first__bit_axiom
  (assert (<= 0 dic__pr_t__x__first__bit))

;; dic__pr_t__x__last__bit_axiom
  (assert (< dic__pr_t__x__first__bit dic__pr_t__x__last__bit))

;; dic__pr_t__x__position_axiom
  (assert (<= 0 dic__pr_t__x__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((pr_t__ref (mk_pr_t__ref (pr_t__content us_rep)))))
(define-fun pr_t__ref___projection ((a pr_t__ref)) us_rep (pr_t__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__dic__pr_record_t__x integer)(rec__dic__pr_record_t__y integer)))))
(define-fun us_split_fields_X2__projection ((a us_split_fields2)) integer
  (rec__dic__pr_record_t__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields2)) integer
  (rec__dic__pr_record_t__y a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__dic__pr_record_t__x (us_split_fields3 a)))
                         (to_rep
                         (rec__dic__pr_record_t__x (us_split_fields3 b))))
                         (= (to_rep
                            (rec__dic__pr_record_t__y (us_split_fields3 a)))
                         (to_rep
                         (rec__dic__pr_record_t__y (us_split_fields3 b)))))
                    true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun dic__pr_record_t__x__first__bit () Int)

(declare-fun dic__pr_record_t__x__last__bit () Int)

(declare-fun dic__pr_record_t__x__position () Int)

;; dic__pr_record_t__x__first__bit_axiom
  (assert (<= 0 dic__pr_record_t__x__first__bit))

;; dic__pr_record_t__x__last__bit_axiom
  (assert (< dic__pr_record_t__x__first__bit dic__pr_record_t__x__last__bit))

;; dic__pr_record_t__x__position_axiom
  (assert (<= 0 dic__pr_record_t__x__position))

(declare-fun dic__pr_record_t__y__first__bit () Int)

(declare-fun dic__pr_record_t__y__last__bit () Int)

(declare-fun dic__pr_record_t__y__position () Int)

;; dic__pr_record_t__y__first__bit_axiom
  (assert (<= 0 dic__pr_record_t__y__first__bit))

;; dic__pr_record_t__y__last__bit_axiom
  (assert (< dic__pr_record_t__y__first__bit dic__pr_record_t__y__last__bit))

;; dic__pr_record_t__y__position_axiom
  (assert (<= 0 dic__pr_record_t__y__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-fun dummy2 () us_rep1)

(declare-datatypes ()
((pr_record_t__ref (mk_pr_record_t__ref (pr_record_t__content us_rep1)))))
(define-fun pr_record_t__ref___projection ((a pr_record_t__ref)) us_rep1
  (pr_record_t__content a))

(define-fun default_initial_assumption ((temp___expr_143 us_rep1)
  (temp___skip_top_level_144 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__dic__pr_record_t__x
                                            (us_split_fields3
                                            temp___expr_143))) 0)
                                         (= (to_rep
                                            (rec__dic__pr_record_t__y
                                            (us_split_fields3
                                            temp___expr_143))) 0)))

(declare-fun evaluate (us_rep) Int)

(declare-fun evaluate__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

;; evaluate__post_axiom
  (assert
  (forall ((r us_rep)) (! (dynamic_invariant (evaluate r) true false
  true) :pattern ((evaluate r)) )))

(declare-fun add2 (us_rep1) Int)

(declare-fun add2__function_guard (Int us_rep1) Bool)

(declare-fun add (us_rep1) Int)

(declare-fun add__function_guard (Int us_rep1) Bool)

;; add2__post_axiom
  (assert
  (forall ((r us_rep1)) (! (dynamic_invariant (add2 r) true false
  true) :pattern ((add2 r)) )))

;; add2__def_axiom
  (assert
  (forall ((r us_rep1)) (! (= (add2 r) (add r)) :pattern ((add2 r)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

;; add__post_axiom
  (assert
  (forall ((r us_rep1)) (! (dynamic_invariant (add r) true false
  true) :pattern ((add r)) )))

(declare-fun i__split_fields () integer)

(declare-fun r__split_fields () integer)

(declare-fun r__split_fields1 () integer)

;; H
  (assert
  (and (= (to_rep r__split_fields) 0) (= (to_rep r__split_fields1) 0)))

;; H
  (assert (= (evaluate (mk___rep (mk___split_fields i__split_fields))) 0))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (= (add2 (mk___rep1 (mk___split_fields1 r__split_fields r__split_fields1))) 0)))
(check-sat)
(exit)
