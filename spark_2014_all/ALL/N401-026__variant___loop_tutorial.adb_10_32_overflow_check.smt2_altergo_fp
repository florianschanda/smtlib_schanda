(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic n : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic maximum_root : int

logic attr__ATTRIBUTE_ADDRESS4 : int

axiom maximum_root__def_axiom : (maximum_root = 46341)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall lower:int. forall upper:int. forall middle:int.
  forall loop_tutorial__isqrt__result:int. forall o:int.
  forall temp___134:int. forall temp___133:int. forall temp___132:int.
  forall temp___136:int. forall temp___135:int. forall o1:int. forall o2:int.
  forall o3:int. forall o4:int. forall o5:int. forall o6:bool.
  forall result:int. forall lower1:int. forall result1:int.
  forall upper1:int. forall result2:int. forall upper2:int.
  forall lower2:int. forall upper3:int. forall middle1:int.
  forall temp___1361:int. forall temp___1351:int. forall result3:int.
  forall temp___1362:int. forall result4:int. forall temp___1352:int.
  forall result5:bool. forall lower3:int. forall upper4:int.
  forall middle2:int. forall lower4:int. forall upper5:int.
  forall middle3:int. forall lower5:int. forall upper6:int.
  forall middle4:int. forall lower6:int. forall upper7:int.
  forall middle5:int. forall lower7:int. forall upper8:int.
  forall middle6:int. forall lower8:int. forall upper9:int.
  forall middle7:int. forall result6:int.
  forall loop_tutorial__isqrt__result1:int.
  forall loop_tutorial__isqrt__result2:int.
  forall loop_tutorial__isqrt__result3:int. forall lower9:int.
  forall upper10:int. forall middle8:int.
  forall loop_tutorial__isqrt__result4:int. forall lower10:int.
  forall upper11:int. forall middle9:int.
  forall loop_tutorial__isqrt__result5:int. (in_range2(n) ->
  (((((0 <= 2147483647) -> in_range2(lower)) and (((0 <= 2147483647) ->
  in_range2(upper)) and (((0 <= 2147483647) -> in_range2(middle)) and
  (in_range2(maximum_root) and ((({ int__content = result } = {
  int__content = lower }) and (lower1 = 0)) and ((((46341 <= n) and (({
  int__content = result1 } = { int__content = upper }) and
  (upper1 = 46341))) or ((not (46341 <= n)) and ((((o = (n + 1)) and
  in_range1((n + 1))) and (({ int__content = result2 } = { int__content =
  upper }) and (upper2 = o))) and (upper1 = upper2)))) and
  (((((temp___134 = upper1) and ((temp___133 = lower1) and
  ((temp___132 = middle) and ((0 = temp___136) and ((0 = temp___135) and
  ((((((0 <= lower2) and (upper3 <= 46341)) and (lower2 <  upper3)) and
  (n <  (upper3 * upper3))) and ((lower2 * lower2) <= n)) and
  (((((0 <= 2147483647) -> in_range2(middle1)) and ((0 <= 2147483647) ->
  in_range2(lower2))) and ((0 <= 2147483647) -> in_range2(upper3))) and
  (((temp___1361 = result3) and (temp___1362 = lower2)) and
  (((temp___1351 = result4) and (temp___1352 = upper3)) and
  ((((middle1 = middle2) and ((upper3 = upper4) and (lower2 = lower3))) and
  ((middle3 = middle1) and ((upper5 = upper3) and (lower4 = lower2)))) and
  ((((o1 = (lower2 + 1)) and in_range1((lower2 + 1))) and (((o1 = upper3) and
  (result5 = true)) or ((not (o1 = upper3)) and (result5 = false)))) and
  (result5 = true)))))))))))) and ((({ int__content = middle4 } = {
  int__content = middle2 }) and (({ int__content = upper6 } = {
  int__content = upper4 }) and ({ int__content = lower5 } = { int__content =
  lower3 }))) and ((middle5 = middle3) and ((upper7 = upper5) and
  (lower6 = lower4))))) and ((({ int__content = middle6 } = { int__content =
  middle4 }) and (({ int__content = upper8 } = { int__content = upper6 }) and
  ({ int__content = lower7 } = { int__content = lower5 }))) and
  ((middle7 = middle5) and ((upper9 = upper7) and (lower8 = lower6))))) and
  (((loop_tutorial__isqrt__result1 = loop_tutorial__isqrt__result2) and
  (loop_tutorial__isqrt__result3 = loop_tutorial__isqrt__result1)) and
  ((result6 = loop_tutorial__isqrt__result) and
  (loop_tutorial__isqrt__result1 = lower7)))))))))) and ((({ int__content =
  loop_tutorial__isqrt__result4 } = { int__content =
  loop_tutorial__isqrt__result2 }) and ((middle8 = middle6) and
  ((upper10 = upper8) and (lower9 = lower7)))) and
  ((loop_tutorial__isqrt__result5 = loop_tutorial__isqrt__result3) and
  ((middle9 = middle7) and ((upper11 = upper9) and (lower10 = lower8)))))) ->
  ((((((o2 = (loop_tutorial__isqrt__result4 + 1)) and
  in_range1((loop_tutorial__isqrt__result4 + 1))) and
  (((o3 = (loop_tutorial__isqrt__result4 + 1)) and
  in_range1((loop_tutorial__isqrt__result4 + 1))) and (o4 = (o3 * o2)))) and
  ((o5 = o4) and in_range1(o4))) and (((n <  o5) and (o6 = true)) or
  ((not (n <  o5)) and (o6 = false)))) ->
  in_range1((loop_tutorial__isqrt__result4 * loop_tutorial__isqrt__result4))))))
