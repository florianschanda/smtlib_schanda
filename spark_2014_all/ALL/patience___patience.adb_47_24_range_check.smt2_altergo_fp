(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type card

predicate in_range2(x: int) = ((1 <= x) and (x <= 52))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : card, card -> bool

logic dummy1 : card

type card__ref = { card__content : card
}

function card__ref___projection(a: card__ref) : card = (a).card__content

logic to_rep : card -> int

logic of_rep : int -> card

axiom inversion_axiom : (forall x:card [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:card [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,card) farray
}

logic slide : (int,card) farray, int, int -> (int,card) farray

axiom slide_eq :
  (forall a:(int,card) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,card) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,card) farray, int, int, (int,card) farray, int,
  int -> (int,card) farray

axiom concat_def :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : card, int -> (int,card) farray

axiom singleton_def :
  (forall v:card.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,card) farray, int, int, (int,card) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,card) farray. forall a__first:int. forall a__last:int.
  forall b:(int,card) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,card) farray, int, int, (int,card) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type cardindex

predicate in_range3(x: int) = (((-1) <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : cardindex, cardindex -> bool

logic dummy2 : cardindex

type cardindex__ref = { cardindex__content : cardindex
}

function cardindex__ref___projection(a: cardindex__ref) : cardindex =
  (a).cardindex__content

logic to_rep1 : cardindex -> int

logic of_rep1 : int -> cardindex

axiom inversion_axiom1 :
  (forall x:cardindex [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:cardindex [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type tcardarrayD1

predicate in_range4(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tcardarrayD1, tcardarrayD1 -> bool

logic dummy3 : tcardarrayD1

type tcardarrayD1__ref = { tcardarrayD1__content : tcardarrayD1
}

function tcardarrayD1__ref___projection(a: tcardarrayD1__ref) : tcardarrayD1 =
  (a).tcardarrayD1__content

type tindexarrayD1

predicate in_range5(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tindexarrayD1, tindexarrayD1 -> bool

logic dummy4 : tindexarrayD1

type tindexarrayD1__ref = { tindexarrayD1__content : tindexarrayD1
}

function tindexarrayD1__ref___projection(a: tindexarrayD1__ref) : tindexarrayD1 =
  (a).tindexarrayD1__content

type map__ref1 = { map__content1 : (int,cardindex) farray
}

logic slide1 : (int,cardindex) farray, int, int -> (int,cardindex) farray

axiom slide_eq1 :
  (forall a:(int,cardindex) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,cardindex) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,cardindex) farray, int, int, (int,cardindex) farray,
  int, int -> (int,cardindex) farray

axiom concat_def1 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : cardindex, int -> (int,cardindex) farray

axiom singleton_def1 :
  (forall v:cardindex.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq8 : (int,cardindex) farray, int, int, (int,cardindex) farray,
  int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,cardindex) farray. forall a__first:int. forall a__last:int.
  forall b:(int,cardindex) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep1((a[temp___idx_133])) = to_rep1((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep1((a[temp___idx_133])) = to_rep1((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep1((a[temp___idx_133])) = to_rep1((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare1 : (int,cardindex) farray, int, int, (int,cardindex) farray,
  int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq8(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq8(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq8(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

type tindexmatrixD1

predicate in_range6(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : tindexmatrixD1, tindexmatrixD1 -> bool

logic dummy5 : tindexmatrixD1

type tindexmatrixD1__ref = { tindexmatrixD1__content : tindexmatrixD1
}

function tindexmatrixD1__ref___projection(a: tindexmatrixD1__ref) : tindexmatrixD1 =
  (a).tindexmatrixD1__content

logic dummy6 : (int,cardindex) farray

logic value__size : int

logic object__size : (int,cardindex) farray -> int

logic value__component__size : int

logic object__component__size : (int,cardindex) farray -> int

logic value__alignment : int

logic object__alignment : (int,cardindex) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,cardindex) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,cardindex) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,cardindex) farray. (0 <= object__alignment(a)))

logic user_eq6 : (int,cardindex) farray, (int,cardindex) farray -> bool

type map__ref2 = { map__content2 : (int,(int,cardindex) farray) farray
}

logic slide2 : (int,(int,cardindex) farray) farray, int,
  int -> (int,(int,cardindex) farray) farray

axiom slide_eq2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,(int,cardindex) farray) farray, int, int,
  (int,(int,cardindex) farray) farray, int,
  int -> (int,(int,cardindex) farray) farray

axiom concat_def2 :
  (forall a:(int,(int,cardindex) farray) farray.
  forall b:(int,(int,cardindex) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : (int,cardindex) farray,
  int -> (int,(int,cardindex) farray) farray

axiom singleton_def2 :
  (forall v:(int,cardindex) farray.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq10 : (int,(int,cardindex) farray) farray, int, int,
  (int,(int,cardindex) farray) farray, int, int -> bool

axiom bool_eq_def9 :
  (forall a:(int,(int,cardindex) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,cardindex) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq10(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and (bool_eq8((a[temp___idx_134]), 0, 99,
  (b[((b__first - a__first) + temp___idx_134)]), 0, 99) = true)) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) -> (bool_eq8((a[temp___idx_134]), 0, 99,
  (b[((b__first - a__first) + temp___idx_134)]), 0, 99) = true))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,(int,cardindex) farray) farray.
  forall b:(int,(int,cardindex) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) -> (bool_eq8((a[temp___idx_134]), 0, 99,
  (b[((b__first - a__first) + temp___idx_134)]), 0, 99) = true)))))))

logic dummy7 : (int,card) farray

logic value__size1 : int

logic object__size1 : (int,card) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,card) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,card) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,card) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,card) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,card) farray. (0 <= object__alignment1(a)))

logic user_eq7 : (int,card) farray, (int,card) farray -> bool

logic dummy8 : (int,(int,cardindex) farray) farray

logic value__size2 : int

logic object__size2 : (int,(int,cardindex) farray) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,(int,cardindex) farray) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,(int,cardindex) farray) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,(int,cardindex) farray) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (0 <= object__alignment2(a)))

logic user_eq8 : (int,(int,cardindex) farray) farray,
  (int,(int,cardindex) farray) farray -> bool

type us_split_fields = { rec__patience__state__numelts : cardindex;
rec__patience__state__values : (int,card) farray;
rec__patience__state__numstacks : cardindex; rec__patience__state__stacksizes
: (int,cardindex) farray; rec__patience__state__stacks :
(int,(int,cardindex) farray) farray; rec__patience__state__posstack :
(int,cardindex) farray; rec__patience__state__posheight :
(int,cardindex) farray; rec__patience__state__preds : (int,cardindex) farray
}

function us_split_fields_NumElts__projection(a: us_split_fields) : cardindex =
  (a).rec__patience__state__numelts

function us_split_fields_Values__projection(a: us_split_fields) : (int,card) farray =
  (a).rec__patience__state__values

function us_split_fields_NumStacks__projection(a: us_split_fields) : cardindex =
  (a).rec__patience__state__numstacks

function us_split_fields_StackSizes__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__stacksizes

function us_split_fields_Stacks__projection(a: us_split_fields) : (int,(int,cardindex) farray) farray =
  (a).rec__patience__state__stacks

function us_split_fields_PosStack__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__posstack

function us_split_fields_PosHeight__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__posheight

function us_split_fields_Preds__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__preds

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def10 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  ((((((((((to_rep1(((a).us_split_fields1).rec__patience__state__numelts) = to_rep1(((b).us_split_fields1).rec__patience__state__numelts)) and
  (bool_eq4(((a).us_split_fields1).rec__patience__state__values, 0, 99,
  ((b).us_split_fields1).rec__patience__state__values, 0, 99) = true)) and
  (to_rep1(((a).us_split_fields1).rec__patience__state__numstacks) = to_rep1(((b).us_split_fields1).rec__patience__state__numstacks))) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__stacksizes, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacksizes, 0,
  99) = true)) and
  (bool_eq10(((a).us_split_fields1).rec__patience__state__stacks, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacks, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posstack, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posstack, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posheight, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posheight, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__preds, 0, 99,
  ((b).us_split_fields1).rec__patience__state__preds, 0, 99) = true)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((((((((to_rep1(((a).us_split_fields1).rec__patience__state__numelts) = to_rep1(((b).us_split_fields1).rec__patience__state__numelts)) and
  (bool_eq4(((a).us_split_fields1).rec__patience__state__values, 0, 99,
  ((b).us_split_fields1).rec__patience__state__values, 0, 99) = true)) and
  (to_rep1(((a).us_split_fields1).rec__patience__state__numstacks) = to_rep1(((b).us_split_fields1).rec__patience__state__numstacks))) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__stacksizes, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacksizes, 0,
  99) = true)) and
  (bool_eq10(((a).us_split_fields1).rec__patience__state__stacks, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacks, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posstack, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posstack, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__posheight, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posheight, 0, 99) = true)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__preds, 0, 99,
  ((b).us_split_fields1).rec__patience__state__preds, 0, 99) = true))) ->
  (bool_eq11(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:cardindex. forall a1:(int,card) farray. forall a2:cardindex.
  forall a3:(int,cardindex) farray.
  forall a4:(int,(int,cardindex) farray) farray.
  forall a5:(int,cardindex) farray. forall a6:(int,cardindex) farray.
  forall a7:(int,cardindex) farray. (0 <= object__size3({ us_split_fields1 =
  { rec__patience__state__numelts = a; rec__patience__state__values = a1;
  rec__patience__state__numstacks = a2; rec__patience__state__stacksizes =
  a3; rec__patience__state__stacks = a4; rec__patience__state__posstack = a5;
  rec__patience__state__posheight = a6; rec__patience__state__preds = a7 }
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:cardindex. forall a1:(int,card) farray. forall a2:cardindex.
  forall a3:(int,cardindex) farray.
  forall a4:(int,(int,cardindex) farray) farray.
  forall a5:(int,cardindex) farray. forall a6:(int,cardindex) farray.
  forall a7:(int,cardindex) farray. (0 <= object__alignment3({
  us_split_fields1 = { rec__patience__state__numelts = a;
  rec__patience__state__values = a1; rec__patience__state__numstacks = a2;
  rec__patience__state__stacksizes = a3; rec__patience__state__stacks = a4;
  rec__patience__state__posstack = a5; rec__patience__state__posheight = a6;
  rec__patience__state__preds = a7 } })))

logic patience__state__numelts__first__bit : int

logic patience__state__numelts__last__bit : int

logic patience__state__numelts__position : int

axiom patience__state__numelts__first__bit_axiom :
  (0 <= patience__state__numelts__first__bit)

axiom patience__state__numelts__last__bit_axiom :
  (patience__state__numelts__first__bit <  patience__state__numelts__last__bit)

axiom patience__state__numelts__position_axiom :
  (0 <= patience__state__numelts__position)

logic patience__state__values__first__bit : int

logic patience__state__values__last__bit : int

logic patience__state__values__position : int

axiom patience__state__values__first__bit_axiom :
  (0 <= patience__state__values__first__bit)

axiom patience__state__values__last__bit_axiom :
  (patience__state__values__first__bit <  patience__state__values__last__bit)

axiom patience__state__values__position_axiom :
  (0 <= patience__state__values__position)

logic patience__state__numstacks__first__bit : int

logic patience__state__numstacks__last__bit : int

logic patience__state__numstacks__position : int

axiom patience__state__numstacks__first__bit_axiom :
  (0 <= patience__state__numstacks__first__bit)

axiom patience__state__numstacks__last__bit_axiom :
  (patience__state__numstacks__first__bit <  patience__state__numstacks__last__bit)

axiom patience__state__numstacks__position_axiom :
  (0 <= patience__state__numstacks__position)

logic patience__state__stacksizes__first__bit : int

logic patience__state__stacksizes__last__bit : int

logic patience__state__stacksizes__position : int

axiom patience__state__stacksizes__first__bit_axiom :
  (0 <= patience__state__stacksizes__first__bit)

axiom patience__state__stacksizes__last__bit_axiom :
  (patience__state__stacksizes__first__bit <  patience__state__stacksizes__last__bit)

axiom patience__state__stacksizes__position_axiom :
  (0 <= patience__state__stacksizes__position)

logic patience__state__stacks__first__bit : int

logic patience__state__stacks__last__bit : int

logic patience__state__stacks__position : int

axiom patience__state__stacks__first__bit_axiom :
  (0 <= patience__state__stacks__first__bit)

axiom patience__state__stacks__last__bit_axiom :
  (patience__state__stacks__first__bit <  patience__state__stacks__last__bit)

axiom patience__state__stacks__position_axiom :
  (0 <= patience__state__stacks__position)

logic patience__state__posstack__first__bit : int

logic patience__state__posstack__last__bit : int

logic patience__state__posstack__position : int

axiom patience__state__posstack__first__bit_axiom :
  (0 <= patience__state__posstack__first__bit)

axiom patience__state__posstack__last__bit_axiom :
  (patience__state__posstack__first__bit <  patience__state__posstack__last__bit)

axiom patience__state__posstack__position_axiom :
  (0 <= patience__state__posstack__position)

logic patience__state__posheight__first__bit : int

logic patience__state__posheight__last__bit : int

logic patience__state__posheight__position : int

axiom patience__state__posheight__first__bit_axiom :
  (0 <= patience__state__posheight__first__bit)

axiom patience__state__posheight__last__bit_axiom :
  (patience__state__posheight__first__bit <  patience__state__posheight__last__bit)

axiom patience__state__posheight__position_axiom :
  (0 <= patience__state__posheight__position)

logic patience__state__preds__first__bit : int

logic patience__state__preds__last__bit : int

logic patience__state__preds__position : int

axiom patience__state__preds__first__bit_axiom :
  (0 <= patience__state__preds__first__bit)

axiom patience__state__preds__last__bit_axiom :
  (patience__state__preds__first__bit <  patience__state__preds__last__bit)

axiom patience__state__preds__position_axiom :
  (0 <= patience__state__preds__position)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy9 : cardindex

logic dummy10 : (int,card) farray

logic dummy11 : cardindex

logic dummy12 : (int,cardindex) farray

logic dummy13 : (int,(int,cardindex) farray) farray

logic dummy14 : (int,cardindex) farray

logic dummy15 : (int,cardindex) farray

logic dummy16 : (int,cardindex) farray

type state__ref = { state__content : us_rep
}

function state__ref___projection(a: state__ref) : us_rep = (a).state__content

logic inv : us_rep -> bool

logic inv__function_guard : bool, us_rep -> prop

axiom inv__post_axiom : true

axiom inv__def_axiom :
  (forall s:cardindex. forall s1:(int,card) farray. forall s2:cardindex.
  forall s3:(int,cardindex) farray.
  forall s4:(int,(int,cardindex) farray) farray.
  forall s5:(int,cardindex) farray. forall s6:(int,cardindex) farray.
  forall s7:(int,cardindex) farray [inv({ us_split_fields1 = {
  rec__patience__state__numelts = s; rec__patience__state__values = s1;
  rec__patience__state__numstacks = s2; rec__patience__state__stacksizes =
  s3; rec__patience__state__stacks = s4; rec__patience__state__posstack = s5;
  rec__patience__state__posheight = s6; rec__patience__state__preds = s7 }
  })]. (((inv({ us_split_fields1 = { rec__patience__state__numelts = s;
  rec__patience__state__values = s1; rec__patience__state__numstacks = s2;
  rec__patience__state__stacksizes = s3; rec__patience__state__stacks = s4;
  rec__patience__state__posstack = s5; rec__patience__state__posheight = s6;
  rec__patience__state__preds = s7 } }) = true) ->
  ((((((((((0 <= to_rep1(s2)) and (to_rep1(s2) <= to_rep1(s))) and
  (to_rep1(s) <= 100)) and ((to_rep1(s) = 0) or (0 <  to_rep1(s2)))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (((1 <= to_rep1((s3[i]))) and (to_rep1((s3[i])) <= to_rep1(s))) and
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 1))) ->
  ((0 <= to_rep1(((s4[i])[j]))) and (to_rep1(((s4[i])[j])) <  to_rep1(s))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s) - 1))) ->
  ((((0 <= to_rep1((s5[i]))) and (to_rep1((s5[i])) <= (to_rep1(s2) - 1))) and
  ((0 <= to_rep1((s6[i]))) and
  (to_rep1((s6[i])) <= (to_rep1((s3[to_rep1((s5[i]))])) - 1)))) and
  (to_rep1(((s4[to_rep1((s5[i]))])[to_rep1((s6[i]))])) = i))))) and
  (forall ist:int. (((0 <= ist) and (ist <= (to_rep1(s2) - 1))) ->
  (forall ip:int. (((0 <= ip) and (ip <= (to_rep1((s3[ist])) - 1))) ->
  ((ist = to_rep1((s5[to_rep1(((s4[ist])[ip]))]))) and
  (ip = to_rep1((s6[to_rep1(((s4[ist])[ip]))]))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep1((s3[i])) - 1))) ->
  (to_rep1(((s4[i])[j])) <  to_rep1(((s4[i])[k])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep1((s3[i])) - 1))) ->
  (to_rep((s1[to_rep1(((s4[i])[k]))])) <= to_rep((s1[to_rep1(((s4[i])[j]))])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s) - 1))) ->
  (((((-1) <= to_rep1((s7[i]))) and
  (to_rep1((s7[i])) <= (to_rep1(s) - 1))) and (to_rep1((s7[i])) <  i)) and
  (((to_rep1((s7[i])) <  0) -> (to_rep1((s5[i])) = 0)) and
  ((not (to_rep1((s7[i])) <  0)) ->
  (((to_rep((s1[to_rep1((s7[i]))])) <  to_rep((s1[i]))) and
  (0 <  to_rep1((s5[i])))) and
  (to_rep1((s5[to_rep1((s7[i]))])) = (to_rep1((s5[i])) - 1)))))))))) and
  (((((((((((0 <= to_rep1(s2)) and (to_rep1(s2) <= to_rep1(s))) and
  (to_rep1(s) <= 100)) and ((to_rep1(s) = 0) or (0 <  to_rep1(s2)))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (((1 <= to_rep1((s3[i]))) and (to_rep1((s3[i])) <= to_rep1(s))) and
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 1))) ->
  ((0 <= to_rep1(((s4[i])[j]))) and (to_rep1(((s4[i])[j])) <  to_rep1(s))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s) - 1))) ->
  ((((0 <= to_rep1((s5[i]))) and (to_rep1((s5[i])) <= (to_rep1(s2) - 1))) and
  ((0 <= to_rep1((s6[i]))) and
  (to_rep1((s6[i])) <= (to_rep1((s3[to_rep1((s5[i]))])) - 1)))) and
  (to_rep1(((s4[to_rep1((s5[i]))])[to_rep1((s6[i]))])) = i))))) and
  (forall ist:int. (((0 <= ist) and (ist <= (to_rep1(s2) - 1))) ->
  (forall ip:int. (((0 <= ip) and (ip <= (to_rep1((s3[ist])) - 1))) ->
  ((ist = to_rep1((s5[to_rep1(((s4[ist])[ip]))]))) and
  (ip = to_rep1((s6[to_rep1(((s4[ist])[ip]))]))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep1((s3[i])) - 1))) ->
  (to_rep1(((s4[i])[j])) <  to_rep1(((s4[i])[k])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep1((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep1((s3[i])) - 1))) ->
  (to_rep((s1[to_rep1(((s4[i])[k]))])) <= to_rep((s1[to_rep1(((s4[i])[j]))])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep1(s) - 1))) ->
  (((((-1) <= to_rep1((s7[i]))) and
  (to_rep1((s7[i])) <= (to_rep1(s) - 1))) and (to_rep1((s7[i])) <  i)) and
  (((to_rep1((s7[i])) <  0) and (to_rep1((s5[i])) = 0)) or
  ((not (to_rep1((s7[i])) <  0)) and
  (((to_rep((s1[to_rep1((s7[i]))])) <  to_rep((s1[i]))) and
  (0 <  to_rep1((s5[i])))) and
  (to_rep1((s5[to_rep1((s7[i]))])) = (to_rep1((s5[i])) - 1))))))))) -> (inv({
  us_split_fields1 = { rec__patience__state__numelts = s;
  rec__patience__state__values = s1; rec__patience__state__numstacks = s2;
  rec__patience__state__stacksizes = s3; rec__patience__state__stacks = s4;
  rec__patience__state__posstack = s5; rec__patience__state__posheight = s6;
  rec__patience__state__preds = s7 } }) = true))))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

 (* File "patience.ads", line 53, characters 0-0 *)
goal WP_parameter_def :
  (forall s__split_fields:cardindex.
  forall s__split_fields1:(int,card) farray.
  forall s__split_fields2:cardindex.
  forall s__split_fields3:(int,cardindex) farray.
  forall s__split_fields4:(int,(int,cardindex) farray) farray.
  forall s__split_fields5:(int,cardindex) farray.
  forall s__split_fields6:(int,cardindex) farray.
  forall s__split_fields7:(int,cardindex) farray. forall idx:int.
  forall pred:int. forall i:int. forall stackisize:int. forall topstacki:int.
  forall temp___568:int. forall temp___567:int. forall temp___566:int.
  forall temp___565:int. forall o:int. forall o1:cardindex. forall o2:int.
  forall o3:int. forall temp___535:(int,cardindex) farray. forall o4:int.
  forall o5:cardindex. forall o6:int. forall o7:int. forall o8:card.
  forall o9:int. forall o10:int. forall o11:card. forall o12:int.
  forall o13:(int,card) farray. forall o14:cardindex.
  forall o15:(int,card) farray. forall o16:cardindex.
  forall o17:(int,cardindex) farray.
  forall o18:(int,(int,cardindex) farray) farray.
  forall o19:(int,cardindex) farray. forall o20:(int,cardindex) farray.
  forall o21:(int,cardindex) farray. forall temp___584:cardindex.
  forall temp___5841:(int,card) farray. forall temp___5842:cardindex.
  forall temp___5843:(int,cardindex) farray.
  forall temp___5844:(int,(int,cardindex) farray) farray.
  forall temp___5845:(int,cardindex) farray.
  forall temp___5846:(int,cardindex) farray.
  forall temp___5847:(int,cardindex) farray. forall o22:int.
  forall stackisize1:int. forall topstacki1:int. forall result:int__ref.
  forall pred1:int. forall result1:int__ref. forall i1:int. forall pred2:int.
  forall i2:int. forall stackisize2:int. forall topstacki2:int.
  forall result2:int__ref. forall stackisize3:int. forall result3:int__ref.
  forall topstacki3:int. forall result4:bool. forall result5:int__ref.
  forall pred3:int. forall result6:int__ref. forall i3:int.
  forall pred4:int__ref. forall i4:int__ref. forall pred5:int. forall i5:int.
  forall pred6:int__ref. forall i6:int__ref. forall stackisize4:int__ref.
  forall topstacki4:int__ref. forall pred7:int. forall i7:int.
  forall stackisize5:int. forall topstacki5:int. forall pred8:int__ref.
  forall i8:int__ref. forall stackisize6:int__ref.
  forall topstacki6:int__ref. forall pred9:int. forall i9:int.
  forall stackisize7:int. forall topstacki7:int. forall result7:int__ref.
  forall idx1:int. forall result8:us_split_fields__ref.
  forall s__split_fields8:us_split_fields. (in_range2(c) -> (((inv({
  us_split_fields1 = { rec__patience__state__numelts = s__split_fields;
  rec__patience__state__values = s__split_fields1;
  rec__patience__state__numstacks = s__split_fields2;
  rec__patience__state__stacksizes = s__split_fields3;
  rec__patience__state__stacks = s__split_fields4;
  rec__patience__state__posstack = s__split_fields5;
  rec__patience__state__posheight = s__split_fields6;
  rec__patience__state__preds = s__split_fields7 } }) = true) and
  (to_rep1(s__split_fields) <  100)) -> ((((-2147483648) <= 2147483647) ->
  in_range1(idx)) -> ((((-2147483648) <= 2147483647) -> in_range1(pred)) ->
  ((((-2147483648) <= 2147483647) -> in_range1(i)) -> ((((-1) <= 100) ->
  in_range3(stackisize)) -> ((((-1) <= 100) -> in_range3(topstacki)) ->
  (((result = { int__content = pred }) and (pred1 = (-1))) -> (((result1 = {
  int__content = i }) and (i1 = 0)) ->
  ((((i1 <  to_rep1(s__split_fields2)) and ((((temp___568 = topstacki) and
  ((temp___567 = stackisize) and ((temp___566 = i1) and
  ((temp___565 = pred1) and ((((0 <= i2) and
  (i2 <= to_rep1(s__split_fields2))) and (((i2 = 0) and (pred2 = (-1))) or
  ((not (i2 = 0)) and (((((0 <= pred2) and
  (pred2 <= (to_rep1(s__split_fields) - 1))) and
  (pred2 = to_rep1(((s__split_fields4[(i2 - 1)])[(to_rep1((s__split_fields3[(i2 - 1)])) - 1)])))) and
  (to_rep((s__split_fields1[pred2])) <  c)) and
  (to_rep1((s__split_fields5[pred2])) = (i2 - 1)))))) and
  ((((((((-2147483648) <= 2147483647) -> in_range1(pred2)) and
  (((-2147483648) <= 2147483647) -> in_range1(i2))) and (((-1) <= 100) ->
  in_range3(stackisize2))) and (((-1) <= 100) -> in_range3(topstacki2))) and
  (i2 <  to_rep1(s__split_fields2))) and (((((((0 <= i2) and (i2 <= 99)) and
  (o = i2)) and (o1 = (s__split_fields3[o]))) and (o2 = to_rep1(o1))) and
  ((result2 = { int__content = stackisize2 }) and (stackisize3 = o2))) and
  ((((((((0 <= i2) and (i2 <= 99)) and (o3 = i2)) and
  (temp___535 = (s__split_fields4[o3]))) and ((((0 <= (stackisize3 - 1)) and
  ((stackisize3 - 1) <= 99)) and (o4 = (stackisize3 - 1))) and
  (o5 = (temp___535[o4])))) and (o6 = to_rep1(o5))) and ((result3 = {
  int__content = topstacki2 }) and (topstacki3 = o6))) and (((((i4 = {
  int__content = i2 }) and (pred4 = { int__content = pred2 })) and
  ((i5 = i2) and (pred5 = pred2))) and (((((((0 <= topstacki3) and
  (topstacki3 <= 99)) and (o7 = topstacki3)) and
  (o8 = (s__split_fields1[o7]))) and (o9 = to_rep(o8))) and (((c <= o9) and
  (result4 = true)) or ((not (c <= o9)) and (result4 = false)))) and
  (result4 = true))) or ((((((((0 <= topstacki3) and (topstacki3 <= 99)) and
  (o7 = topstacki3)) and (o8 = (s__split_fields1[o7]))) and
  (o9 = to_rep(o8))) and (((c <= o9) and (result4 = true)) or
  ((not (c <= o9)) and (result4 = false)))) and (not (result4 = true))) and
  ((((i4 = { int__content = i3 }) and (pred4 = { int__content = pred3 })) and
  ((i5 = i3) and (pred5 = pred3))) and (((0 <= topstacki3) and
  (topstacki3 <  to_rep1(s__split_fields))) and
  ((((((((0 <= to_rep1((s__split_fields5[topstacki3]))) and
  (to_rep1((s__split_fields5[topstacki3])) <  to_rep1(s__split_fields2))) and
  (0 <= to_rep1((s__split_fields6[topstacki3])))) and
  (to_rep1((s__split_fields6[topstacki3])) <  to_rep1((s__split_fields3[to_rep1((s__split_fields5[topstacki3]))])))) and
  (to_rep1(((s__split_fields4[to_rep1((s__split_fields5[topstacki3]))])[to_rep1((s__split_fields6[topstacki3]))])) = topstacki3)) and
  (to_rep1((s__split_fields5[topstacki3])) = i2)) and
  (to_rep1((s__split_fields6[topstacki3])) = (stackisize3 - 1))) and
  (((result5 = { int__content = pred2 }) and (pred3 = topstacki3)) and
  ((((o10 = (i2 + 1)) and in_range1((i2 + 1))) and ((result6 = {
  int__content = i2 }) and (i3 = o10))) and
  (not (i3 <  to_rep1(s__split_fields2)))))))))))))))))) and
  (((topstacki4 = { int__content = topstacki3 }) and ((stackisize4 = {
  int__content = stackisize3 }) and ((i6 = i4) and (pred6 = pred4)))) and
  ((topstacki5 = topstacki3) and ((stackisize5 = stackisize3) and
  ((i7 = i5) and (pred7 = pred5)))))) and (((topstacki6 = topstacki4) and
  ((stackisize6 = stackisize4) and ((i8 = i6) and (pred8 = pred6)))) and
  ((topstacki7 = topstacki5) and ((stackisize7 = stackisize5) and
  ((i9 = i7) and (pred9 = pred7))))))) or
  ((not (i1 <  to_rep1(s__split_fields2))) and (((topstacki6 = {
  int__content = topstacki }) and ((stackisize6 = { int__content = stackisize
  }) and ((i8 = { int__content = i1 }) and (pred8 = { int__content = pred1
  })))) and ((topstacki7 = topstacki1) and ((stackisize7 = stackisize1) and
  ((i9 = i1) and (pred9 = pred1))))))) -> (((result7 = { int__content = idx
  }) and (idx1 = to_rep1(s__split_fields))) -> ((((((to_rep(o11) = c) and
  ((((0 <= idx1) and (idx1 <= 99)) and (o12 = idx1)) and
  (o13 = (s__split_fields1[o12 <- o11])))) and ((s__split_fields = o14) and
  ((o13 = o15) and ((s__split_fields2 = o16) and
  ((s__split_fields3 = o17) and ((s__split_fields4 = o18) and
  ((s__split_fields5 = o19) and ((s__split_fields6 = o20) and
  (s__split_fields7 = o21))))))))) and ((temp___584 = o14) and
  ((temp___5841 = o15) and ((temp___5842 = o16) and ((temp___5843 = o17) and
  ((temp___5844 = o18) and ((temp___5845 = o19) and ((temp___5846 = o20) and
  (temp___5847 = o21))))))))) and ((result8 = { us_split_fields__content = {
  rec__patience__state__numelts = s__split_fields;
  rec__patience__state__values = s__split_fields1;
  rec__patience__state__numstacks = s__split_fields2;
  rec__patience__state__stacksizes = s__split_fields3;
  rec__patience__state__stacks = s__split_fields4;
  rec__patience__state__posstack = s__split_fields5;
  rec__patience__state__posheight = s__split_fields6;
  rec__patience__state__preds = s__split_fields7 } }) and
  (s__split_fields8 = { rec__patience__state__numelts = temp___584;
  rec__patience__state__values = temp___5841;
  rec__patience__state__numstacks = temp___5842;
  rec__patience__state__stacksizes = temp___5843;
  rec__patience__state__stacks = temp___5844;
  rec__patience__state__posstack = temp___5845;
  rec__patience__state__posheight = temp___5846;
  rec__patience__state__preds = temp___5847 }))) -> (((o22 = (idx1 + 1)) and
  in_range1((idx1 + 1))) -> in_range3(o22)))))))))))))))
