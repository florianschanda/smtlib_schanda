;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_33)))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-const dummy5 (Array Int character))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__fixed_string__object__width natural)(rec__fixed_string__object__name (Array Int character))(rec__ext__ us_private)))))
(define-fun us_split_fields_Width__projection ((a us_split_fields)) natural
  (rec__fixed_string__object__width a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__fixed_string__object__name a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__fixed_string__object__width
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__fixed_string__object__width
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__fixed_string__object__name
                           (us_split_fields1 a)) 1 20
                           (rec__fixed_string__object__name
                           (us_split_fields1 b)) 1 20) true))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const fixed_string__object__width__first__bit Int)

(declare-const fixed_string__object__width__last__bit Int)

(declare-const fixed_string__object__width__position Int)

;; fixed_string__object__width__first__bit_axiom
  (assert (<= 0 fixed_string__object__width__first__bit))

;; fixed_string__object__width__last__bit_axiom
  (assert
  (< fixed_string__object__width__first__bit fixed_string__object__width__last__bit))

;; fixed_string__object__width__position_axiom
  (assert (<= 0 fixed_string__object__width__position))

(declare-const fixed_string__object__name__first__bit Int)

(declare-const fixed_string__object__name__last__bit Int)

(declare-const fixed_string__object__name__position Int)

;; fixed_string__object__name__first__bit_axiom
  (assert (<= 0 fixed_string__object__name__first__bit))

;; fixed_string__object__name__last__bit_axiom
  (assert
  (< fixed_string__object__name__first__bit fixed_string__object__name__last__bit))

;; fixed_string__object__name__position_axiom
  (assert (<= 0 fixed_string__object__name__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((object__ref 0))
(((mk_object__ref (object__content us_rep)))))
(define-fun object__ref___projection ((a object__ref)) us_rep (object__content
                                                              a))

(declare-fun temp___139 (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___141 Int))
  (forall ((temp___142 Int))
  (= (select (temp___139 temp___141) temp___142) (of_rep temp___141)))))

(define-fun default_initial_assumption ((temp___expr_137 us_rep)
  (temp___skip_top_level_138 Bool)) Bool (and
                                         (= (attr__tag temp___expr_137)
                                         us_tag)
                                         (and
                                         (= (to_rep2
                                            (rec__fixed_string__object__width
                                            (us_split_fields1
                                            temp___expr_137))) 0)
                                         (= (rec__fixed_string__object__name
                                            (us_split_fields1
                                            temp___expr_137)) (temp___139 0)))))

(declare-fun elements (us_rep) Int)

(declare-fun elements__function_guard (Int us_rep) Bool)

(declare-fun elements1 (Int us_rep) Int)

(declare-fun elements__function_guard1 (Int Int us_rep) Bool)

;; elements__post_axiom
  (assert
  (forall ((this us_rep)) (! (dynamic_invariant (elements this) true false
  true) :pattern ((elements this)) )))

;; elements__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((this us_rep)) (! (dynamic_invariant (elements1 attr__tag1 this)
  true false true) :pattern ((elements1 attr__tag1 this)) ))))

;; fixed_string__object__compat_axiom
  (assert
  (forall ((this us_rep))
  (! (= (elements this) (elements1 us_tag this)) :pattern ((elements1
                                                           us_tag this)) )))

;; elements__def_axiom
  (assert
  (forall ((this us_rep))
  (! (= (elements this) (to_rep2
                        (rec__fixed_string__object__width
                        (us_split_fields1 this)))) :pattern ((elements this)) )))

(declare-fun null_string (us_rep) us_t)

(declare-fun null_string__function_guard (us_t us_rep) Bool)

(declare-fun null_string1 (Int us_rep) us_t)

(declare-fun null_string__function_guard1 (us_t Int us_rep) Bool)

;; null_string__post_axiom
  (assert
  (forall ((this us_rep))
  (! (let ((result (null_string this)))
     (and (= (length result) (elements this)) (dynamic_invariant2 result true
     false true))) :pattern ((null_string this)) )))

;; null_string__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((this us_rep)) (! (dynamic_invariant2
  (null_string1 attr__tag1 this) true false
  true) :pattern ((null_string1 attr__tag1 this)) ))))

;; fixed_string__object__compat_axiom
  (assert
  (forall ((this us_rep))
  (! (= (null_string this) (null_string1 us_tag this)) :pattern ((null_string1
                                                                 us_tag this)) )))

(declare-const this us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const in_string us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const out_string__first integer)

(declare-const out_string__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const r19b Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const r22b Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ((t20b__ref 0))
(((mk_t20b__ref (t20b__content integer)))))
(define-fun t20b__ref___projection ((a t20b__ref)) integer (t20b__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int character))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))

(define-fun of_array1 ((a (Array Int character)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int character)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int character)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq8 (us_t1 us_t1) Bool)

(declare-const dummy8 us_t1)

(declare-datatypes ((t21b__ref 0)) (((mk_t21b__ref (t21b__content us_t1)))))
(define-fun t21b__ref___projection ((a t21b__ref)) us_t1 (t21b__content a))

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (integer integer) Bool)

(declare-const dummy9 integer)

(declare-datatypes ((t23b__ref 0))
(((mk_t23b__ref (t23b__content integer)))))
(define-fun t23b__ref___projection ((a t23b__ref)) integer (t23b__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ((us_t2 0))
(((mk___t2 (elts2 (Array Int character))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int character) (elts2 a))

(define-fun of_array2 ((a (Array Int character)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int character)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array Int character)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq4 ((x us_t2)
  (y us_t2)) Bool (bool_eq (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq10 (us_t2 us_t2) Bool)

(declare-const dummy10 us_t2)

(declare-datatypes ((t24b__ref 0)) (((mk_t24b__ref (t24b__content us_t2)))))
(define-fun t24b__ref___projection ((a t24b__ref)) us_t2 (t24b__content a))

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(declare-const len Int)

(declare-const out_string (Array Int character))

(declare-const fixed_string__convert__result (Array Int character))

(declare-const fixed_string__convert__result1 t)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const fixed_string__convert__out_string__assume (Array Int character))

(declare-const fixed_string__convert__out_string__assume1 t)

(declare-const fixed_string__convert__R19b__assume Int)

(declare-const fixed_string__convert__R22b__assume Int)

(declare-const o3 (Array Int character))

(declare-const temp___233 (Array Int character))

(declare-const temp___2331 t2)

(declare-const temp___234 (Array Int character))

(declare-const temp___2341 t1)

(declare-const temp___237 (Array Int character))

(declare-const temp___2371 t1)

(declare-const o4 (Array Int character))

(declare-const o5 Int)

(declare-const result Int)

(declare-const len1 Int)

(declare-const result1 (Array Int character))

(declare-const out_string1 (Array Int character))

(declare-const result2 (Array Int character))

(declare-const out_string2 (Array Int character))

(declare-const result3 (Array Int character))

(declare-const result4 t)

(declare-const fixed_string__convert__result2 (Array Int character))

(declare-const fixed_string__convert__result3 t)

(declare-const fixed_string__convert__result4 (Array Int character))

(declare-const fixed_string__convert__result5 t)

(declare-const fixed_string__convert__result6 (Array Int character))

(declare-const fixed_string__convert__result7 t)

(declare-const len2 Int)

(declare-const out_string3 (Array Int character))

(declare-const fixed_string__convert__result8 (Array Int character))

(declare-const fixed_string__convert__result9 t)

(declare-const len3 Int)

(declare-const out_string4 (Array Int character))

(declare-const fixed_string__convert__result10 us_t)

(define-fun fixed_string__convert__result11 () us_t (mk___t
                                                    fixed_string__convert__result6
                                                    fixed_string__convert__result7))

(define-fun fixed_string__convert__out_string__assume2 () us_t (mk___t
                                                               fixed_string__convert__out_string__assume
                                                               fixed_string__convert__out_string__assume1))

;; H
  (assert (dynamic_invariant2 in_string true false true))

;; H
  (assert (and (= o (length in_string)) (in_range (length in_string))))

;; H
  (assert
  (= o1 (ite (< o (to_rep2
                  (rec__fixed_string__object__width (us_split_fields1 this))))
  o (to_rep2 (rec__fixed_string__object__width (us_split_fields1 this))))))

;; H
  (assert (and (= o2 o1) (in_range3 o1)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref len)))

;; H
  (assert (= len1 o2))

;; H
  (assert (in_range3 len1))

;; H
  (assert
  (and (= fixed_string__convert__out_string__assume2 (null_string this))
  (and (dynamic_invariant2 fixed_string__convert__out_string__assume2 true
  false true)
  (= (length fixed_string__convert__out_string__assume2) (elements this)))))

;; H
  (assert (= (mk_map__ref result1) (mk_map__ref out_string)))

;; H
  (assert (= out_string1 fixed_string__convert__out_string__assume))

;; H
  (assert
  (= (to_rep1 out_string__first) (to_rep1
                                 (first
                                 fixed_string__convert__out_string__assume1))))

;; H
  (assert
  (= (to_rep1 out_string__last) (to_rep1
                                (last
                                fixed_string__convert__out_string__assume1))))

;; H
  (assert (dynamic_property 1 2147483647 (to_rep1 out_string__first)
  (to_rep1 out_string__last)))

;; H
  (assert
  (and
  (= fixed_string__convert__R19b__assume (+ (to_rep1 out_string__first) (-
  len1 1))) (in_range (+ (to_rep1 out_string__first) (- len1 1)))))

;; H
  (assert (= fixed_string__convert__R19b__assume r19b))

;; H
  (assert (in_range r19b))

;; H
  (assert
  (and
  (= fixed_string__convert__R22b__assume (+ (to_rep1 (first (rt in_string))) (-
  len1 1))) (in_range (+ (to_rep1 (first (rt in_string))) (- len1 1)))))

;; H
  (assert (= fixed_string__convert__R22b__assume r22b))

;; H
  (assert (in_range r22b))

;; H
  (assert
  (=> (<= (to_rep1 (first (rt in_string))) r22b)
  (and
  (and (<= (to_rep1 (first (rt in_string))) (to_rep1 (first (rt in_string))))
  (<= (to_rep1 (first (rt in_string))) (to_rep1 (last (rt in_string)))))
  (and (<= (to_rep1 (first (rt in_string))) r22b)
  (<= r22b (to_rep1 (last (rt in_string))))))))

;; H
  (assert (= o3 (elts in_string)))

;; H
  (assert (= o3 temp___233))

;; H
  (assert (= (mk2 (to_rep1 (first (rt in_string))) r22b) temp___2331))

;; H
  (assert
  (= (ite (<= (to_rep1 (first4 temp___2331)) (to_rep1 (last4 temp___2331)))
     (+ (- (to_rep1 (last4 temp___2331)) (to_rep1 (first4 temp___2331))) 1)
     0) (ite (<= (to_rep1 out_string__first) r19b)
        (+ (- r19b (to_rep1 out_string__first)) 1) 0)))

;; H
  (assert
  (= (slide temp___233 (to_rep1 (first4 temp___2331))
     (to_rep1 out_string__first)) temp___234))

;; H
  (assert (= (mk1 (to_rep1 out_string__first) r19b) temp___2341))

;; H
  (assert
  (= (ite (<= (to_rep1 (first2 temp___2341)) (to_rep1 (last2 temp___2341)))
     (+ (- (to_rep1 (last2 temp___2341)) (to_rep1 (first2 temp___2341))) 1)
     0) (ite (<= (to_rep1 (first2 (mk1 (to_rep1 out_string__first) r19b)))
        (to_rep1 (last2 (mk1 (to_rep1 out_string__first) r19b))))
        (+ (- (to_rep1 (last2 (mk1 (to_rep1 out_string__first) r19b)))
        (to_rep1 (first2 (mk1 (to_rep1 out_string__first) r19b)))) 1) 0)))

;; H
  (assert
  (= (mk___t1 temp___237 temp___2371) (mk___t1 temp___234 temp___2341)))

;; H
  (assert
  (forall ((temp___238 Int))
  (ite (and (<= (to_rep1 out_string__first) temp___238) (<= temp___238 r19b))
  (= (select o4 temp___238) (select temp___237 temp___238))
  (= (select o4 temp___238) (select out_string1 temp___238)))))

;; H
  (assert (= out_string1 result2))

;; H
  (assert (= out_string2 o4))

;; H
  (assert (= fixed_string__convert__result4 fixed_string__convert__result2))

;; H
  (assert (= fixed_string__convert__result5 fixed_string__convert__result3))

;; H
  (assert
  (= fixed_string__convert__result11 (mk___t fixed_string__convert__result2
                                     fixed_string__convert__result3)))

;; H
  (assert
  (= (mk_string__ref (mk___t result3 result4)) (mk_string__ref
                                               (mk___t
                                               fixed_string__convert__result
                                               fixed_string__convert__result1))))

;; H
  (assert (= out_string2 fixed_string__convert__result2))

;; H
  (assert
  (= (mk (to_rep1 out_string__first) (to_rep1 out_string__last)) fixed_string__convert__result3))

;; H
  (assert
  (= (mk_string__ref
     (mk___t fixed_string__convert__result8 fixed_string__convert__result9))
  (mk_string__ref
  (mk___t fixed_string__convert__result4 fixed_string__convert__result5))))

;; H
  (assert (= out_string2 out_string3))

;; H
  (assert (= len1 len2))

;; H
  (assert
  (= fixed_string__convert__result10 fixed_string__convert__result11))

;; H
  (assert (= out_string4 out_string2))

;; H
  (assert (= len3 len1))

;; H
  (assert
  (and (= o5 (elements this))
  (and (in_range3 o5)
  (= o5 (to_rep2 (rec__fixed_string__object__width (us_split_fields1 this)))))))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (in_range
  (length
  (mk___t fixed_string__convert__result8 fixed_string__convert__result9)))))
(check-sat)
(exit)
