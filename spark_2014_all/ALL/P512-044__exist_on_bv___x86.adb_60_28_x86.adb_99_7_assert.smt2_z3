;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 64)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-fun dummy () unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_201 (_ BitVec 64))
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool true)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (= (= (inrange64 var bottom range_size) true)
     (exists ((n (_ BitVec 64)))
     (and (and (bvule ((_ int2bv 64) 0) n) (bvule n range_size))
     (= var (bvadd bottom n)))))) :pattern ((inrange64 var bottom range_size)) )))

(declare-fun var1 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun var1_range_size () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun var2 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun var2_range_size () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun res () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-sort unsigned_64 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy1 () unsigned_64)

(declare-datatypes ()
((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64
  (unsigned_64__content a))

(declare-fun to_rep (unsigned_64) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) unsigned_64)

;; inversion_axiom
  (assert
  (forall ((x unsigned_64))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x unsigned_64)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_64)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 64))

(define-fun dynamic_property ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy2 () unsigned_64)

(declare-datatypes ()
((t101b__ref (mk_t101b__ref (t101b__content unsigned_64)))))
(define-fun t101b__ref___projection ((a t101b__ref)) unsigned_64 (t101b__content
                                                                 a))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_MODULUS3 () (_ BitVec 64))

(define-fun dynamic_property1 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy3 () unsigned_64)

(declare-datatypes ()
((t122b__ref (mk_t122b__ref (t122b__content unsigned_64)))))
(define-fun t122b__ref___projection ((a t122b__ref)) unsigned_64 (t122b__content
                                                                 a))

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_MODULUS4 () (_ BitVec 64))

(define-fun dynamic_property2 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy4 () unsigned_64)

(declare-datatypes ()
((t131b__ref (mk_t131b__ref (t131b__content unsigned_64)))))
(define-fun t131b__ref___projection ((a t131b__ref)) unsigned_64 (t131b__content
                                                                 a))

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(define-fun dynamic_invariant1 ((temp___expr_183 (_ BitVec 64))
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)) Bool true)

(declare-fun n () (_ BitVec 64))

(declare-fun n1 () (_ BitVec 64))

(declare-fun n2 () (_ BitVec 64))

(declare-fun n11 () (_ BitVec 64))

(declare-fun n21 () (_ BitVec 64))

(declare-fun n3 () (_ BitVec 64))

(declare-fun x86__rangesintersect__result () Bool)

(declare-fun x86__rangesintersect__B100b__res__assume () Bool)

(declare-fun temp___211 () (_ BitVec 64))

(declare-fun temp___208 () (_ BitVec 64))

(declare-fun temp___205 () (_ BitVec 64))

(declare-fun temp___204 () (_ BitVec 64))

(declare-fun o () (_ BitVec 64))

(declare-fun o1 () (_ BitVec 64))

(declare-fun o2 () Bool)

(declare-fun n4 () (_ BitVec 64))

(declare-fun n12 () (_ BitVec 64))

(declare-fun n22 () (_ BitVec 64))

(declare-fun n13 () (_ BitVec 64))

(declare-fun n23 () (_ BitVec 64))

(declare-fun n5 () (_ BitVec 64))

(declare-fun result () (_ BitVec 64))

(declare-fun n6 () (_ BitVec 64))

(declare-fun result1 () (_ BitVec 64))

(declare-fun n14 () (_ BitVec 64))

(declare-fun result2 () (_ BitVec 64))

(declare-fun n24 () (_ BitVec 64))

(declare-fun result3 () (_ BitVec 64))

(declare-fun n15 () (_ BitVec 64))

(declare-fun result4 () (_ BitVec 64))

(declare-fun n25 () (_ BitVec 64))

(declare-fun result5 () (_ BitVec 64))

(declare-fun n16 () (_ BitVec 64))

(declare-fun result6 () (_ BitVec 64))

(declare-fun n26 () (_ BitVec 64))

(declare-fun n7 () (_ BitVec 64))

(declare-fun n17 () (_ BitVec 64))

(declare-fun n27 () (_ BitVec 64))

(declare-fun result7 () (_ BitVec 64))

(declare-fun n8 () (_ BitVec 64))

(declare-fun result8 () (_ BitVec 64))

(declare-fun n18 () (_ BitVec 64))

(declare-fun result9 () (_ BitVec 64))

(declare-fun n28 () (_ BitVec 64))

(declare-fun result10 () (_ BitVec 64))

(declare-fun n19 () (_ BitVec 64))

(declare-fun result11 () (_ BitVec 64))

(declare-fun n29 () (_ BitVec 64))

(declare-fun result12 () (_ BitVec 64))

(declare-fun n110 () (_ BitVec 64))

(declare-fun result13 () (_ BitVec 64))

(declare-fun n210 () (_ BitVec 64))

(declare-fun n9 () t__ref)

(declare-fun n111 () t__ref)

(declare-fun n211 () t__ref)

(declare-fun n10 () (_ BitVec 64))

(declare-fun n112 () (_ BitVec 64))

(declare-fun n212 () (_ BitVec 64))

(declare-fun n20 () t__ref)

(declare-fun n113 () t__ref)

(declare-fun n213 () t__ref)

(declare-fun n30 () (_ BitVec 64))

(declare-fun n114 () (_ BitVec 64))

(declare-fun n214 () (_ BitVec 64))

(declare-fun n31 () t__ref)

(declare-fun n115 () t__ref)

(declare-fun n215 () t__ref)

(declare-fun n32 () (_ BitVec 64))

(declare-fun n116 () (_ BitVec 64))

(declare-fun n216 () (_ BitVec 64))

(declare-fun result14 () t__ref)

(declare-fun n117 () (_ BitVec 64))

(declare-fun n118 () (_ BitVec 64))

(declare-fun n217 () (_ BitVec 64))

(declare-fun n33 () (_ BitVec 64))

(declare-fun result15 () t__ref)

(declare-fun n218 () (_ BitVec 64))

(declare-fun result16 () t__ref)

(declare-fun n34 () (_ BitVec 64))

(declare-fun n219 () (_ BitVec 64))

(declare-fun n35 () (_ BitVec 64))

(declare-fun result17 () t__ref)

(declare-fun n220 () (_ BitVec 64))

(declare-fun result18 () t__ref)

(declare-fun n36 () (_ BitVec 64))

(declare-fun n221 () t__ref)

(declare-fun n37 () t__ref)

(declare-fun n222 () (_ BitVec 64))

(declare-fun n38 () (_ BitVec 64))

(declare-fun n223 () t__ref)

(declare-fun n39 () t__ref)

(declare-fun n224 () (_ BitVec 64))

(declare-fun n40 () (_ BitVec 64))

(declare-fun n225 () t__ref)

(declare-fun n41 () t__ref)

(declare-fun n226 () (_ BitVec 64))

(declare-fun n42 () (_ BitVec 64))

(declare-fun result19 () t__ref)

(declare-fun n119 () (_ BitVec 64))

(declare-fun n120 () t__ref)

(declare-fun n227 () t__ref)

(declare-fun n43 () t__ref)

(declare-fun n121 () (_ BitVec 64))

(declare-fun n228 () (_ BitVec 64))

(declare-fun n44 () (_ BitVec 64))

(declare-fun n122 () t__ref)

(declare-fun n229 () t__ref)

(declare-fun n45 () t__ref)

(declare-fun n123 () (_ BitVec 64))

(declare-fun n230 () (_ BitVec 64))

(declare-fun n46 () (_ BitVec 64))

(declare-fun n124 () t__ref)

(declare-fun n231 () t__ref)

(declare-fun n47 () t__ref)

(declare-fun n125 () (_ BitVec 64))

(declare-fun n232 () (_ BitVec 64))

(declare-fun n48 () (_ BitVec 64))

(declare-fun n126 () t__ref)

(declare-fun n233 () t__ref)

(declare-fun n49 () t__ref)

(declare-fun n127 () (_ BitVec 64))

(declare-fun n234 () (_ BitVec 64))

(declare-fun n50 () (_ BitVec 64))

(declare-fun n51 () t__ref)

(declare-fun n128 () t__ref)

(declare-fun n235 () t__ref)

(declare-fun n129 () t__ref)

(declare-fun n236 () t__ref)

(declare-fun n52 () t__ref)

(declare-fun n53 () (_ BitVec 64))

(declare-fun n130 () (_ BitVec 64))

(declare-fun n237 () (_ BitVec 64))

(declare-fun n131 () (_ BitVec 64))

(declare-fun n238 () (_ BitVec 64))

(declare-fun n54 () (_ BitVec 64))

(declare-fun result20 () bool__ref)

(declare-fun x86__rangesintersect__result1 () Bool)

(declare-fun x86__rangesintersect__result2 () bool__ref)

(declare-fun x86__rangesintersect__result3 () Bool)

(declare-fun n55 () t__ref)

(declare-fun n132 () t__ref)

(declare-fun n239 () t__ref)

(declare-fun n133 () t__ref)

(declare-fun n240 () t__ref)

(declare-fun n56 () t__ref)

(declare-fun x86__rangesintersect__result4 () bool__ref)

(declare-fun n57 () (_ BitVec 64))

(declare-fun n134 () (_ BitVec 64))

(declare-fun n241 () (_ BitVec 64))

(declare-fun n135 () (_ BitVec 64))

(declare-fun n242 () (_ BitVec 64))

(declare-fun n58 () (_ BitVec 64))

(declare-fun x86__rangesintersect__result5 () Bool)

(define-fun result21 () t__ref (mk_t__ref result6))

(define-fun result22 () t__ref (mk_t__ref result5))

(define-fun result23 () t__ref (mk_t__ref result4))

(define-fun result24 () t__ref (mk_t__ref result3))

(define-fun result25 () t__ref (mk_t__ref result2))

(define-fun result26 () t__ref (mk_t__ref result1))

(define-fun result27 () t__ref (mk_t__ref result))

(define-fun n59 () t__ref (mk_t__ref n3))

(define-fun n243 () t__ref (mk_t__ref n21))

(define-fun n136 () t__ref (mk_t__ref n11))

(define-fun n244 () t__ref (mk_t__ref n2))

(define-fun n137 () t__ref (mk_t__ref n1))

(define-fun n60 () t__ref (mk_t__ref n))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (bvule var1_range_size (bvsub ((_ int2bv 64) 18446744073709551615)
  var2_range_size)))

;; H
  (assert
  (and
  (= x86__rangesintersect__B100b__res__assume (inrange64 var1
                                              (bvsub var2 var1_range_size)
                                              (bvadd var1_range_size
                                              var2_range_size)))
  (= (= x86__rangesintersect__B100b__res__assume true)
  (exists ((n61 (_ BitVec 64)))
  (and
  (and (bvule ((_ int2bv 64) 0) n61)
  (bvule n61 (bvadd var1_range_size var2_range_size)))
  (= var1 (bvadd (bvsub var2 var1_range_size) n61)))))))

;; H
  (assert (= x86__rangesintersect__B100b__res__assume res))

;; H
  (assert (= res true))

;; H
  (assert (= result27 n60))

;; H
  (assert (= n6 ((_ int2bv 64) 0)))

;; H
  (assert
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (and
  (and (= temp___211 n6)
  (and
  (ite (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (and
  (and
  (ite (bvugt n6 var1_range_size)
  (and (and (= result26 n137) (= n14 ((_ int2bv 64) 0)))
  (and (and (= result25 n244) (= n24 (bvsub n6 var1_range_size)))
  (bvule n24 var2_range_size)))
  (and
  (ite (bvult n6 var2_range_size)
  (and (and (= result24 n137) (= n15 var1_range_size))
  (and (= result23 n244) (= n25 n6)))
  (and
  (and (and (= result22 n137) (= n16 (bvsub var1_range_size n6)))
  (and (= result21 n244) (= n26 ((_ int2bv 64) 0))))
  (and (= n25 n26) (= n15 n16)))) (and (= n24 n25) (= n14 n15))))
  (and
  (and (and (bvule ((_ int2bv 64) 0) n14) (bvule n14 var1_range_size))
  (and (bvule ((_ int2bv 64) 0) n24) (bvule n24 var2_range_size)))
  (= (bvadd var1 n14) (bvadd var2 n24))))
  (exists ((i (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) i) (bvule i var1_range_size))
  (exists ((j (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (= (bvadd var1 i) (bvadd var2 j)))))))
  (and (and (= n24 n2) (= n14 n1)) (and (= n24 n22) (= n14 n12))))
  (and
  (or
  (forall ((m (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) m) (bvule m n7))
  (not (= var1 (bvadd (bvsub var2 var1_range_size) m)))))
  (exists ((i (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) i) (bvule i var1_range_size))
  (exists ((j (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (= (bvadd var1 i) (bvadd var2 j)))))))
  (and
  (and
  (=> (bvule ((_ int2bv 64) 0) (bvadd var1_range_size var2_range_size))
  (dynamic_property ((_ int2bv 64) 0) (bvadd var1_range_size var2_range_size)
  n7))
  (and (bvule ((_ int2bv 64) 0) n7)
  (bvule n7 (bvadd var1_range_size var2_range_size))))
  (= n7 (bvadd var1_range_size var2_range_size))))))
  (and
  (and (= n213 (mk_t__ref n27))
  (and (= n113 (mk_t__ref n17)) (= n20 (mk_t__ref n7))))
  (and (= n214 n27) (and (= n114 n17) (= n30 n7)))))))

;; H
  (assert
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n215 n213)))

;; H
  (assert
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n115 n113)))

;; H
  (assert
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n31 n20)))

;; H
  (assert
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n216 n214)))

;; H
  (assert
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n116 n114)))

;; H
  (assert
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n32 n30)))

;; H
  (assert
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))) (= n215 n244)))

;; H
  (assert
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))) (= n115 n137)))

;; H
  (assert
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))))
  (= n31 (mk_t__ref n6))))

;; H
  (assert
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))) (= n216 n22)))

;; H
  (assert
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))) (= n116 n12)))

;; H
  (assert
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))) (= n32 n6)))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 19, characters 0-0
  (not
  (exists ((i (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) i) (bvule i var1_range_size))
  (exists ((j (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (= (bvadd var1 i) (bvadd var2 j))))))))
(check-sat)
(exit)
