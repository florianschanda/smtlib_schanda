;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq (us_rep us_rep) Bool)

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun dummy () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun val__ () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 4294967296)) (= (bv2nat ((_ int2bv 32) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int2 ((_ BitVec 64)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; to_uint_of_int
  (assert
  (forall ((i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (bv2nat ((_ int2bv 64) i)) i))))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort word32 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(define-fun bool_eq1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 32))

(declare-fun user_eq1 (word32 word32) Bool)

(declare-fun dummy1 () word32)

(declare-datatypes ()
((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content
                                                              a))

(declare-fun to_rep (word32) (_ BitVec 32))

(declare-fun of_rep ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x word32)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort word64 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 64))

(define-fun bool_eq2 ((x (_ BitVec 64))
  (y (_ BitVec 64))) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (word64 word64) Bool)

(declare-fun dummy2 () word64)

(declare-datatypes ()
((word64__ref (mk_word64__ref (word64__content word64)))))
(define-fun word64__ref___projection ((a word64__ref)) word64 (word64__content
                                                              a))

(declare-fun to_rep1 (word64) (_ BitVec 64))

(declare-fun of_rep1 ((_ BitVec 64)) word64)

;; inversion_axiom
  (assert
  (forall ((x word64))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x word64)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x word64)) (! (uint_in_range1
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__sk__cpu_registers_type__cr2 word64)(rec__sk__cpu_registers_type__rax word64)(rec__sk__cpu_registers_type__rbx word64)(rec__sk__cpu_registers_type__rcx word64)(rec__sk__cpu_registers_type__rdx word64)(rec__sk__cpu_registers_type__rdi word64)(rec__sk__cpu_registers_type__rsi word64)(rec__sk__cpu_registers_type__rbp word64)(rec__sk__cpu_registers_type__r08 word64)(rec__sk__cpu_registers_type__r09 word64)(rec__sk__cpu_registers_type__r10 word64)(rec__sk__cpu_registers_type__r11 word64)(rec__sk__cpu_registers_type__r12 word64)(rec__sk__cpu_registers_type__r13 word64)(rec__sk__cpu_registers_type__r14 word64)(rec__sk__cpu_registers_type__r15 word64)))))
(define-fun us_split_fields_CR2__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__cr2 a))

(define-fun us_split_fields_RAX__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__rax a))

(define-fun us_split_fields_RBX__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__rbx a))

(define-fun us_split_fields_RCX__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__rcx a))

(define-fun us_split_fields_RDX__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__rdx a))

(define-fun us_split_fields_RDI__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__rdi a))

(define-fun us_split_fields_RSI__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__rsi a))

(define-fun us_split_fields_RBP__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__rbp a))

(define-fun us_split_fields_R08__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__r08 a))

(define-fun us_split_fields_R09__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__r09 a))

(define-fun us_split_fields_R10__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__r10 a))

(define-fun us_split_fields_R11__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__r11 a))

(define-fun us_split_fields_R12__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__r12 a))

(define-fun us_split_fields_R13__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__r13 a))

(define-fun us_split_fields_R14__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__r14 a))

(define-fun us_split_fields_R15__projection ((a us_split_fields)) word64 
  (rec__sk__cpu_registers_type__r15 a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__cr2
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__cr2
                                                   (us_split_fields1 b))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__rax
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__rax
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__rbx
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__rbx
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__rcx
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__rcx
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__rdx
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__rdx
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__rdi
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__rdi
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__rsi
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__rsi
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__rbp
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__rbp
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__r08
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__r08
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__r09
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__r09
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__r10
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__r10
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__r11
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__r11
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__r12
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__r12
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__r13
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__r13
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__r14
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__r14
                                                   (us_split_fields1 b)))))
                         (= (to_rep1
                            (rec__sk__cpu_registers_type__r15
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__sk__cpu_registers_type__r15
                                                   (us_split_fields1 b)))))
                    true false))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun sk__cpu_registers_type__cr2__first__bit () Int)

(declare-fun sk__cpu_registers_type__cr2__last__bit () Int)

(declare-fun sk__cpu_registers_type__cr2__position () Int)

;; sk__cpu_registers_type__cr2__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__cr2__first__bit))

;; sk__cpu_registers_type__cr2__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__cr2__first__bit sk__cpu_registers_type__cr2__last__bit))

;; sk__cpu_registers_type__cr2__position_axiom
  (assert (<= 0 sk__cpu_registers_type__cr2__position))

(declare-fun sk__cpu_registers_type__rax__first__bit () Int)

(declare-fun sk__cpu_registers_type__rax__last__bit () Int)

(declare-fun sk__cpu_registers_type__rax__position () Int)

;; sk__cpu_registers_type__rax__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__rax__first__bit))

;; sk__cpu_registers_type__rax__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__rax__first__bit sk__cpu_registers_type__rax__last__bit))

;; sk__cpu_registers_type__rax__position_axiom
  (assert (<= 0 sk__cpu_registers_type__rax__position))

(declare-fun sk__cpu_registers_type__rbx__first__bit () Int)

(declare-fun sk__cpu_registers_type__rbx__last__bit () Int)

(declare-fun sk__cpu_registers_type__rbx__position () Int)

;; sk__cpu_registers_type__rbx__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__rbx__first__bit))

;; sk__cpu_registers_type__rbx__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__rbx__first__bit sk__cpu_registers_type__rbx__last__bit))

;; sk__cpu_registers_type__rbx__position_axiom
  (assert (<= 0 sk__cpu_registers_type__rbx__position))

(declare-fun sk__cpu_registers_type__rcx__first__bit () Int)

(declare-fun sk__cpu_registers_type__rcx__last__bit () Int)

(declare-fun sk__cpu_registers_type__rcx__position () Int)

;; sk__cpu_registers_type__rcx__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__rcx__first__bit))

;; sk__cpu_registers_type__rcx__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__rcx__first__bit sk__cpu_registers_type__rcx__last__bit))

;; sk__cpu_registers_type__rcx__position_axiom
  (assert (<= 0 sk__cpu_registers_type__rcx__position))

(declare-fun sk__cpu_registers_type__rdx__first__bit () Int)

(declare-fun sk__cpu_registers_type__rdx__last__bit () Int)

(declare-fun sk__cpu_registers_type__rdx__position () Int)

;; sk__cpu_registers_type__rdx__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__rdx__first__bit))

;; sk__cpu_registers_type__rdx__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__rdx__first__bit sk__cpu_registers_type__rdx__last__bit))

;; sk__cpu_registers_type__rdx__position_axiom
  (assert (<= 0 sk__cpu_registers_type__rdx__position))

(declare-fun sk__cpu_registers_type__rdi__first__bit () Int)

(declare-fun sk__cpu_registers_type__rdi__last__bit () Int)

(declare-fun sk__cpu_registers_type__rdi__position () Int)

;; sk__cpu_registers_type__rdi__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__rdi__first__bit))

;; sk__cpu_registers_type__rdi__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__rdi__first__bit sk__cpu_registers_type__rdi__last__bit))

;; sk__cpu_registers_type__rdi__position_axiom
  (assert (<= 0 sk__cpu_registers_type__rdi__position))

(declare-fun sk__cpu_registers_type__rsi__first__bit () Int)

(declare-fun sk__cpu_registers_type__rsi__last__bit () Int)

(declare-fun sk__cpu_registers_type__rsi__position () Int)

;; sk__cpu_registers_type__rsi__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__rsi__first__bit))

;; sk__cpu_registers_type__rsi__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__rsi__first__bit sk__cpu_registers_type__rsi__last__bit))

;; sk__cpu_registers_type__rsi__position_axiom
  (assert (<= 0 sk__cpu_registers_type__rsi__position))

(declare-fun sk__cpu_registers_type__rbp__first__bit () Int)

(declare-fun sk__cpu_registers_type__rbp__last__bit () Int)

(declare-fun sk__cpu_registers_type__rbp__position () Int)

;; sk__cpu_registers_type__rbp__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__rbp__first__bit))

;; sk__cpu_registers_type__rbp__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__rbp__first__bit sk__cpu_registers_type__rbp__last__bit))

;; sk__cpu_registers_type__rbp__position_axiom
  (assert (<= 0 sk__cpu_registers_type__rbp__position))

(declare-fun sk__cpu_registers_type__r08__first__bit () Int)

(declare-fun sk__cpu_registers_type__r08__last__bit () Int)

(declare-fun sk__cpu_registers_type__r08__position () Int)

;; sk__cpu_registers_type__r08__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__r08__first__bit))

;; sk__cpu_registers_type__r08__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__r08__first__bit sk__cpu_registers_type__r08__last__bit))

;; sk__cpu_registers_type__r08__position_axiom
  (assert (<= 0 sk__cpu_registers_type__r08__position))

(declare-fun sk__cpu_registers_type__r09__first__bit () Int)

(declare-fun sk__cpu_registers_type__r09__last__bit () Int)

(declare-fun sk__cpu_registers_type__r09__position () Int)

;; sk__cpu_registers_type__r09__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__r09__first__bit))

;; sk__cpu_registers_type__r09__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__r09__first__bit sk__cpu_registers_type__r09__last__bit))

;; sk__cpu_registers_type__r09__position_axiom
  (assert (<= 0 sk__cpu_registers_type__r09__position))

(declare-fun sk__cpu_registers_type__r10__first__bit () Int)

(declare-fun sk__cpu_registers_type__r10__last__bit () Int)

(declare-fun sk__cpu_registers_type__r10__position () Int)

;; sk__cpu_registers_type__r10__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__r10__first__bit))

;; sk__cpu_registers_type__r10__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__r10__first__bit sk__cpu_registers_type__r10__last__bit))

;; sk__cpu_registers_type__r10__position_axiom
  (assert (<= 0 sk__cpu_registers_type__r10__position))

(declare-fun sk__cpu_registers_type__r11__first__bit () Int)

(declare-fun sk__cpu_registers_type__r11__last__bit () Int)

(declare-fun sk__cpu_registers_type__r11__position () Int)

;; sk__cpu_registers_type__r11__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__r11__first__bit))

;; sk__cpu_registers_type__r11__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__r11__first__bit sk__cpu_registers_type__r11__last__bit))

;; sk__cpu_registers_type__r11__position_axiom
  (assert (<= 0 sk__cpu_registers_type__r11__position))

(declare-fun sk__cpu_registers_type__r12__first__bit () Int)

(declare-fun sk__cpu_registers_type__r12__last__bit () Int)

(declare-fun sk__cpu_registers_type__r12__position () Int)

;; sk__cpu_registers_type__r12__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__r12__first__bit))

;; sk__cpu_registers_type__r12__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__r12__first__bit sk__cpu_registers_type__r12__last__bit))

;; sk__cpu_registers_type__r12__position_axiom
  (assert (<= 0 sk__cpu_registers_type__r12__position))

(declare-fun sk__cpu_registers_type__r13__first__bit () Int)

(declare-fun sk__cpu_registers_type__r13__last__bit () Int)

(declare-fun sk__cpu_registers_type__r13__position () Int)

;; sk__cpu_registers_type__r13__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__r13__first__bit))

;; sk__cpu_registers_type__r13__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__r13__first__bit sk__cpu_registers_type__r13__last__bit))

;; sk__cpu_registers_type__r13__position_axiom
  (assert (<= 0 sk__cpu_registers_type__r13__position))

(declare-fun sk__cpu_registers_type__r14__first__bit () Int)

(declare-fun sk__cpu_registers_type__r14__last__bit () Int)

(declare-fun sk__cpu_registers_type__r14__position () Int)

;; sk__cpu_registers_type__r14__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__r14__first__bit))

;; sk__cpu_registers_type__r14__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__r14__first__bit sk__cpu_registers_type__r14__last__bit))

;; sk__cpu_registers_type__r14__position_axiom
  (assert (<= 0 sk__cpu_registers_type__r14__position))

(declare-fun sk__cpu_registers_type__r15__first__bit () Int)

(declare-fun sk__cpu_registers_type__r15__last__bit () Int)

(declare-fun sk__cpu_registers_type__r15__position () Int)

;; sk__cpu_registers_type__r15__first__bit_axiom
  (assert (<= 0 sk__cpu_registers_type__r15__first__bit))

;; sk__cpu_registers_type__r15__last__bit_axiom
  (assert
  (< sk__cpu_registers_type__r15__first__bit sk__cpu_registers_type__r15__last__bit))

;; sk__cpu_registers_type__r15__position_axiom
  (assert (<= 0 sk__cpu_registers_type__r15__position))

(declare-fun dummy3 () us_rep1)

(declare-datatypes ()
((cpu_registers_type__ref
 (mk_cpu_registers_type__ref (cpu_registers_type__content us_rep1)))))
(define-fun cpu_registers_type__ref___projection ((a cpu_registers_type__ref)) us_rep1 
  (cpu_registers_type__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__sk__segment_type__selector word64)(rec__sk__segment_type__base word64)(rec__sk__segment_type__limit word32)(rec__sk__segment_type__access_rights word32)))))
(define-fun us_split_fields_Selector__projection ((a us_split_fields2)) word64 
  (rec__sk__segment_type__selector a))

(define-fun us_split_fields_Base__projection ((a us_split_fields2)) word64 
  (rec__sk__segment_type__base a))

(define-fun us_split_fields_Limit__projection ((a us_split_fields2)) word32 
  (rec__sk__segment_type__limit a))

(define-fun us_split_fields_Access_Rights__projection ((a us_split_fields2)) word32 
  (rec__sk__segment_type__access_rights a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep1
                            (rec__sk__segment_type__selector
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__sk__segment_type__selector
                                                   (us_split_fields3 b))))
                         (= (to_rep1
                            (rec__sk__segment_type__base
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__sk__segment_type__base
                                                   (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__sk__segment_type__limit
                            (us_split_fields3 a))) (to_rep
                                                   (rec__sk__segment_type__limit
                                                   (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__sk__segment_type__access_rights
                            (us_split_fields3 a))) (to_rep
                                                   (rec__sk__segment_type__access_rights
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun sk__segment_type__selector__first__bit () Int)

(declare-fun sk__segment_type__selector__last__bit () Int)

(declare-fun sk__segment_type__selector__position () Int)

;; sk__segment_type__selector__first__bit_axiom
  (assert (<= 0 sk__segment_type__selector__first__bit))

;; sk__segment_type__selector__last__bit_axiom
  (assert
  (< sk__segment_type__selector__first__bit sk__segment_type__selector__last__bit))

;; sk__segment_type__selector__position_axiom
  (assert (<= 0 sk__segment_type__selector__position))

(declare-fun sk__segment_type__base__first__bit () Int)

(declare-fun sk__segment_type__base__last__bit () Int)

(declare-fun sk__segment_type__base__position () Int)

;; sk__segment_type__base__first__bit_axiom
  (assert (<= 0 sk__segment_type__base__first__bit))

;; sk__segment_type__base__last__bit_axiom
  (assert
  (< sk__segment_type__base__first__bit sk__segment_type__base__last__bit))

;; sk__segment_type__base__position_axiom
  (assert (<= 0 sk__segment_type__base__position))

(declare-fun sk__segment_type__limit__first__bit () Int)

(declare-fun sk__segment_type__limit__last__bit () Int)

(declare-fun sk__segment_type__limit__position () Int)

;; sk__segment_type__limit__first__bit_axiom
  (assert (<= 0 sk__segment_type__limit__first__bit))

;; sk__segment_type__limit__last__bit_axiom
  (assert
  (< sk__segment_type__limit__first__bit sk__segment_type__limit__last__bit))

;; sk__segment_type__limit__position_axiom
  (assert (<= 0 sk__segment_type__limit__position))

(declare-fun sk__segment_type__access_rights__first__bit () Int)

(declare-fun sk__segment_type__access_rights__last__bit () Int)

(declare-fun sk__segment_type__access_rights__position () Int)

;; sk__segment_type__access_rights__first__bit_axiom
  (assert (<= 0 sk__segment_type__access_rights__first__bit))

;; sk__segment_type__access_rights__last__bit_axiom
  (assert
  (< sk__segment_type__access_rights__first__bit sk__segment_type__access_rights__last__bit))

;; sk__segment_type__access_rights__position_axiom
  (assert (<= 0 sk__segment_type__access_rights__position))

(declare-fun dummy4 () us_rep2)

(declare-datatypes ()
((segment_type__ref (mk_segment_type__ref (segment_type__content us_rep2)))))
(define-fun segment_type__ref___projection ((a segment_type__ref)) us_rep2 
  (segment_type__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__sk__subject_state_type__regs us_rep1)(rec__sk__subject_state_type__exit_reason word32)(rec__sk__subject_state_type__intr_state word32)(rec__sk__subject_state_type__sysenter_cs word32)(rec__sk__subject_state_type__exit_qualification word64)(rec__sk__subject_state_type__guest_phys_addr word64)(rec__sk__subject_state_type__instruction_len word64)(rec__sk__subject_state_type__rip word64)(rec__sk__subject_state_type__rsp word64)(rec__sk__subject_state_type__cr0 word64)(rec__sk__subject_state_type__shadow_cr0 word64)(rec__sk__subject_state_type__cr3 word64)(rec__sk__subject_state_type__cr4 word64)(rec__sk__subject_state_type__shadow_cr4 word64)(rec__sk__subject_state_type__rflags word64)(rec__sk__subject_state_type__ia32_efer word64)(rec__sk__subject_state_type__sysenter_esp word64)(rec__sk__subject_state_type__sysenter_eip word64)(rec__sk__subject_state_type__cs us_rep2)(rec__sk__subject_state_type__ss us_rep2)(rec__sk__subject_state_type__ds us_rep2)(rec__sk__subject_state_type__es us_rep2)(rec__sk__subject_state_type__fs us_rep2)(rec__sk__subject_state_type__gs us_rep2)(rec__sk__subject_state_type__tr us_rep2)(rec__sk__subject_state_type__ldtr us_rep2)(rec__sk__subject_state_type__gdtr us_rep2)(rec__sk__subject_state_type__idtr us_rep2)))))
(define-fun us_split_fields_Regs__projection ((a us_split_fields4)) us_rep1 
  (rec__sk__subject_state_type__regs a))

(define-fun us_split_fields_Exit_Reason__projection ((a us_split_fields4)) word32 
  (rec__sk__subject_state_type__exit_reason a))

(define-fun us_split_fields_Intr_State__projection ((a us_split_fields4)) word32 
  (rec__sk__subject_state_type__intr_state a))

(define-fun us_split_fields_SYSENTER_CS__projection ((a us_split_fields4)) word32 
  (rec__sk__subject_state_type__sysenter_cs a))

(define-fun us_split_fields_Exit_Qualification__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__exit_qualification a))

(define-fun us_split_fields_Guest_Phys_Addr__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__guest_phys_addr a))

(define-fun us_split_fields_Instruction_Len__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__instruction_len a))

(define-fun us_split_fields_RIP__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__rip a))

(define-fun us_split_fields_RSP__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__rsp a))

(define-fun us_split_fields_CR0__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__cr0 a))

(define-fun us_split_fields_SHADOW_CR0__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__shadow_cr0 a))

(define-fun us_split_fields_CR3__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__cr3 a))

(define-fun us_split_fields_CR4__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__cr4 a))

(define-fun us_split_fields_SHADOW_CR4__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__shadow_cr4 a))

(define-fun us_split_fields_RFLAGS__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__rflags a))

(define-fun us_split_fields_IA32_EFER__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__ia32_efer a))

(define-fun us_split_fields_SYSENTER_ESP__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__sysenter_esp a))

(define-fun us_split_fields_SYSENTER_EIP__projection ((a us_split_fields4)) word64 
  (rec__sk__subject_state_type__sysenter_eip a))

(define-fun us_split_fields_CS__projection ((a us_split_fields4)) us_rep2 
  (rec__sk__subject_state_type__cs a))

(define-fun us_split_fields_SS__projection ((a us_split_fields4)) us_rep2 
  (rec__sk__subject_state_type__ss a))

(define-fun us_split_fields_DS__projection ((a us_split_fields4)) us_rep2 
  (rec__sk__subject_state_type__ds a))

(define-fun us_split_fields_ES__projection ((a us_split_fields4)) us_rep2 
  (rec__sk__subject_state_type__es a))

(define-fun us_split_fields_FS__projection ((a us_split_fields4)) us_rep2 
  (rec__sk__subject_state_type__fs a))

(define-fun us_split_fields_GS__projection ((a us_split_fields4)) us_rep2 
  (rec__sk__subject_state_type__gs a))

(define-fun us_split_fields_TR__projection ((a us_split_fields4)) us_rep2 
  (rec__sk__subject_state_type__tr a))

(define-fun us_split_fields_LDTR__projection ((a us_split_fields4)) us_rep2 
  (rec__sk__subject_state_type__ldtr a))

(define-fun us_split_fields_GDTR__projection ((a us_split_fields4)) us_rep2 
  (rec__sk__subject_state_type__gdtr a))

(define-fun us_split_fields_IDTR__projection ((a us_split_fields4)) us_rep2 
  (rec__sk__subject_state_type__idtr a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep3)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (bool_eq3
                            (rec__sk__subject_state_type__regs
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__regs
                            (us_split_fields5 b))) true)
                         (= (to_rep
                            (rec__sk__subject_state_type__exit_reason
                            (us_split_fields5 a))) (to_rep
                                                   (rec__sk__subject_state_type__exit_reason
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__sk__subject_state_type__intr_state
                            (us_split_fields5 a))) (to_rep
                                                   (rec__sk__subject_state_type__intr_state
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__sk__subject_state_type__sysenter_cs
                            (us_split_fields5 a))) (to_rep
                                                   (rec__sk__subject_state_type__sysenter_cs
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__exit_qualification
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__exit_qualification
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__guest_phys_addr
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__guest_phys_addr
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__instruction_len
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__instruction_len
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__rip
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__rip
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__rsp
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__rsp
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__cr0
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__cr0
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__shadow_cr0
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__shadow_cr0
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__cr3
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__cr3
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__cr4
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__cr4
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__shadow_cr4
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__shadow_cr4
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__rflags
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__rflags
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__ia32_efer
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__ia32_efer
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__sysenter_esp
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__sysenter_esp
                                                   (us_split_fields5 b)))))
                         (= (to_rep1
                            (rec__sk__subject_state_type__sysenter_eip
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__sk__subject_state_type__sysenter_eip
                                                   (us_split_fields5 b)))))
                         (= (bool_eq4
                            (rec__sk__subject_state_type__cs
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__cs
                            (us_split_fields5 b))) true))
                         (= (bool_eq4
                            (rec__sk__subject_state_type__ss
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__ss
                            (us_split_fields5 b))) true))
                         (= (bool_eq4
                            (rec__sk__subject_state_type__ds
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__ds
                            (us_split_fields5 b))) true))
                         (= (bool_eq4
                            (rec__sk__subject_state_type__es
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__es
                            (us_split_fields5 b))) true))
                         (= (bool_eq4
                            (rec__sk__subject_state_type__fs
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__fs
                            (us_split_fields5 b))) true))
                         (= (bool_eq4
                            (rec__sk__subject_state_type__gs
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__gs
                            (us_split_fields5 b))) true))
                         (= (bool_eq4
                            (rec__sk__subject_state_type__tr
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__tr
                            (us_split_fields5 b))) true))
                         (= (bool_eq4
                            (rec__sk__subject_state_type__ldtr
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__ldtr
                            (us_split_fields5 b))) true))
                         (= (bool_eq4
                            (rec__sk__subject_state_type__gdtr
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__gdtr
                            (us_split_fields5 b))) true))
                         (= (bool_eq4
                            (rec__sk__subject_state_type__idtr
                            (us_split_fields5 a))
                            (rec__sk__subject_state_type__idtr
                            (us_split_fields5 b))) true))
                    true false))

(declare-fun user_eq5 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun sk__subject_state_type__regs__first__bit () Int)

(declare-fun sk__subject_state_type__regs__last__bit () Int)

(declare-fun sk__subject_state_type__regs__position () Int)

;; sk__subject_state_type__regs__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__regs__first__bit))

;; sk__subject_state_type__regs__last__bit_axiom
  (assert
  (< sk__subject_state_type__regs__first__bit sk__subject_state_type__regs__last__bit))

;; sk__subject_state_type__regs__position_axiom
  (assert (<= 0 sk__subject_state_type__regs__position))

(declare-fun sk__subject_state_type__exit_reason__first__bit () Int)

(declare-fun sk__subject_state_type__exit_reason__last__bit () Int)

(declare-fun sk__subject_state_type__exit_reason__position () Int)

;; sk__subject_state_type__exit_reason__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__exit_reason__first__bit))

;; sk__subject_state_type__exit_reason__last__bit_axiom
  (assert
  (< sk__subject_state_type__exit_reason__first__bit sk__subject_state_type__exit_reason__last__bit))

;; sk__subject_state_type__exit_reason__position_axiom
  (assert (<= 0 sk__subject_state_type__exit_reason__position))

(declare-fun sk__subject_state_type__intr_state__first__bit () Int)

(declare-fun sk__subject_state_type__intr_state__last__bit () Int)

(declare-fun sk__subject_state_type__intr_state__position () Int)

;; sk__subject_state_type__intr_state__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__intr_state__first__bit))

;; sk__subject_state_type__intr_state__last__bit_axiom
  (assert
  (< sk__subject_state_type__intr_state__first__bit sk__subject_state_type__intr_state__last__bit))

;; sk__subject_state_type__intr_state__position_axiom
  (assert (<= 0 sk__subject_state_type__intr_state__position))

(declare-fun sk__subject_state_type__sysenter_cs__first__bit () Int)

(declare-fun sk__subject_state_type__sysenter_cs__last__bit () Int)

(declare-fun sk__subject_state_type__sysenter_cs__position () Int)

;; sk__subject_state_type__sysenter_cs__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__sysenter_cs__first__bit))

;; sk__subject_state_type__sysenter_cs__last__bit_axiom
  (assert
  (< sk__subject_state_type__sysenter_cs__first__bit sk__subject_state_type__sysenter_cs__last__bit))

;; sk__subject_state_type__sysenter_cs__position_axiom
  (assert (<= 0 sk__subject_state_type__sysenter_cs__position))

(declare-fun sk__subject_state_type__exit_qualification__first__bit () Int)

(declare-fun sk__subject_state_type__exit_qualification__last__bit () Int)

(declare-fun sk__subject_state_type__exit_qualification__position () Int)

;; sk__subject_state_type__exit_qualification__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__exit_qualification__first__bit))

;; sk__subject_state_type__exit_qualification__last__bit_axiom
  (assert
  (< sk__subject_state_type__exit_qualification__first__bit sk__subject_state_type__exit_qualification__last__bit))

;; sk__subject_state_type__exit_qualification__position_axiom
  (assert (<= 0 sk__subject_state_type__exit_qualification__position))

(declare-fun sk__subject_state_type__guest_phys_addr__first__bit () Int)

(declare-fun sk__subject_state_type__guest_phys_addr__last__bit () Int)

(declare-fun sk__subject_state_type__guest_phys_addr__position () Int)

;; sk__subject_state_type__guest_phys_addr__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__guest_phys_addr__first__bit))

;; sk__subject_state_type__guest_phys_addr__last__bit_axiom
  (assert
  (< sk__subject_state_type__guest_phys_addr__first__bit sk__subject_state_type__guest_phys_addr__last__bit))

;; sk__subject_state_type__guest_phys_addr__position_axiom
  (assert (<= 0 sk__subject_state_type__guest_phys_addr__position))

(declare-fun sk__subject_state_type__instruction_len__first__bit () Int)

(declare-fun sk__subject_state_type__instruction_len__last__bit () Int)

(declare-fun sk__subject_state_type__instruction_len__position () Int)

;; sk__subject_state_type__instruction_len__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__instruction_len__first__bit))

;; sk__subject_state_type__instruction_len__last__bit_axiom
  (assert
  (< sk__subject_state_type__instruction_len__first__bit sk__subject_state_type__instruction_len__last__bit))

;; sk__subject_state_type__instruction_len__position_axiom
  (assert (<= 0 sk__subject_state_type__instruction_len__position))

(declare-fun sk__subject_state_type__rip__first__bit () Int)

(declare-fun sk__subject_state_type__rip__last__bit () Int)

(declare-fun sk__subject_state_type__rip__position () Int)

;; sk__subject_state_type__rip__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__rip__first__bit))

;; sk__subject_state_type__rip__last__bit_axiom
  (assert
  (< sk__subject_state_type__rip__first__bit sk__subject_state_type__rip__last__bit))

;; sk__subject_state_type__rip__position_axiom
  (assert (<= 0 sk__subject_state_type__rip__position))

(declare-fun sk__subject_state_type__rsp__first__bit () Int)

(declare-fun sk__subject_state_type__rsp__last__bit () Int)

(declare-fun sk__subject_state_type__rsp__position () Int)

;; sk__subject_state_type__rsp__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__rsp__first__bit))

;; sk__subject_state_type__rsp__last__bit_axiom
  (assert
  (< sk__subject_state_type__rsp__first__bit sk__subject_state_type__rsp__last__bit))

;; sk__subject_state_type__rsp__position_axiom
  (assert (<= 0 sk__subject_state_type__rsp__position))

(declare-fun sk__subject_state_type__cr0__first__bit () Int)

(declare-fun sk__subject_state_type__cr0__last__bit () Int)

(declare-fun sk__subject_state_type__cr0__position () Int)

;; sk__subject_state_type__cr0__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__cr0__first__bit))

;; sk__subject_state_type__cr0__last__bit_axiom
  (assert
  (< sk__subject_state_type__cr0__first__bit sk__subject_state_type__cr0__last__bit))

;; sk__subject_state_type__cr0__position_axiom
  (assert (<= 0 sk__subject_state_type__cr0__position))

(declare-fun sk__subject_state_type__shadow_cr0__first__bit () Int)

(declare-fun sk__subject_state_type__shadow_cr0__last__bit () Int)

(declare-fun sk__subject_state_type__shadow_cr0__position () Int)

;; sk__subject_state_type__shadow_cr0__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__shadow_cr0__first__bit))

;; sk__subject_state_type__shadow_cr0__last__bit_axiom
  (assert
  (< sk__subject_state_type__shadow_cr0__first__bit sk__subject_state_type__shadow_cr0__last__bit))

;; sk__subject_state_type__shadow_cr0__position_axiom
  (assert (<= 0 sk__subject_state_type__shadow_cr0__position))

(declare-fun sk__subject_state_type__cr3__first__bit () Int)

(declare-fun sk__subject_state_type__cr3__last__bit () Int)

(declare-fun sk__subject_state_type__cr3__position () Int)

;; sk__subject_state_type__cr3__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__cr3__first__bit))

;; sk__subject_state_type__cr3__last__bit_axiom
  (assert
  (< sk__subject_state_type__cr3__first__bit sk__subject_state_type__cr3__last__bit))

;; sk__subject_state_type__cr3__position_axiom
  (assert (<= 0 sk__subject_state_type__cr3__position))

(declare-fun sk__subject_state_type__cr4__first__bit () Int)

(declare-fun sk__subject_state_type__cr4__last__bit () Int)

(declare-fun sk__subject_state_type__cr4__position () Int)

;; sk__subject_state_type__cr4__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__cr4__first__bit))

;; sk__subject_state_type__cr4__last__bit_axiom
  (assert
  (< sk__subject_state_type__cr4__first__bit sk__subject_state_type__cr4__last__bit))

;; sk__subject_state_type__cr4__position_axiom
  (assert (<= 0 sk__subject_state_type__cr4__position))

(declare-fun sk__subject_state_type__shadow_cr4__first__bit () Int)

(declare-fun sk__subject_state_type__shadow_cr4__last__bit () Int)

(declare-fun sk__subject_state_type__shadow_cr4__position () Int)

;; sk__subject_state_type__shadow_cr4__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__shadow_cr4__first__bit))

;; sk__subject_state_type__shadow_cr4__last__bit_axiom
  (assert
  (< sk__subject_state_type__shadow_cr4__first__bit sk__subject_state_type__shadow_cr4__last__bit))

;; sk__subject_state_type__shadow_cr4__position_axiom
  (assert (<= 0 sk__subject_state_type__shadow_cr4__position))

(declare-fun sk__subject_state_type__rflags__first__bit () Int)

(declare-fun sk__subject_state_type__rflags__last__bit () Int)

(declare-fun sk__subject_state_type__rflags__position () Int)

;; sk__subject_state_type__rflags__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__rflags__first__bit))

;; sk__subject_state_type__rflags__last__bit_axiom
  (assert
  (< sk__subject_state_type__rflags__first__bit sk__subject_state_type__rflags__last__bit))

;; sk__subject_state_type__rflags__position_axiom
  (assert (<= 0 sk__subject_state_type__rflags__position))

(declare-fun sk__subject_state_type__ia32_efer__first__bit () Int)

(declare-fun sk__subject_state_type__ia32_efer__last__bit () Int)

(declare-fun sk__subject_state_type__ia32_efer__position () Int)

;; sk__subject_state_type__ia32_efer__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__ia32_efer__first__bit))

;; sk__subject_state_type__ia32_efer__last__bit_axiom
  (assert
  (< sk__subject_state_type__ia32_efer__first__bit sk__subject_state_type__ia32_efer__last__bit))

;; sk__subject_state_type__ia32_efer__position_axiom
  (assert (<= 0 sk__subject_state_type__ia32_efer__position))

(declare-fun sk__subject_state_type__sysenter_esp__first__bit () Int)

(declare-fun sk__subject_state_type__sysenter_esp__last__bit () Int)

(declare-fun sk__subject_state_type__sysenter_esp__position () Int)

;; sk__subject_state_type__sysenter_esp__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__sysenter_esp__first__bit))

;; sk__subject_state_type__sysenter_esp__last__bit_axiom
  (assert
  (< sk__subject_state_type__sysenter_esp__first__bit sk__subject_state_type__sysenter_esp__last__bit))

;; sk__subject_state_type__sysenter_esp__position_axiom
  (assert (<= 0 sk__subject_state_type__sysenter_esp__position))

(declare-fun sk__subject_state_type__sysenter_eip__first__bit () Int)

(declare-fun sk__subject_state_type__sysenter_eip__last__bit () Int)

(declare-fun sk__subject_state_type__sysenter_eip__position () Int)

;; sk__subject_state_type__sysenter_eip__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__sysenter_eip__first__bit))

;; sk__subject_state_type__sysenter_eip__last__bit_axiom
  (assert
  (< sk__subject_state_type__sysenter_eip__first__bit sk__subject_state_type__sysenter_eip__last__bit))

;; sk__subject_state_type__sysenter_eip__position_axiom
  (assert (<= 0 sk__subject_state_type__sysenter_eip__position))

(declare-fun sk__subject_state_type__cs__first__bit () Int)

(declare-fun sk__subject_state_type__cs__last__bit () Int)

(declare-fun sk__subject_state_type__cs__position () Int)

;; sk__subject_state_type__cs__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__cs__first__bit))

;; sk__subject_state_type__cs__last__bit_axiom
  (assert
  (< sk__subject_state_type__cs__first__bit sk__subject_state_type__cs__last__bit))

;; sk__subject_state_type__cs__position_axiom
  (assert (<= 0 sk__subject_state_type__cs__position))

(declare-fun sk__subject_state_type__ss__first__bit () Int)

(declare-fun sk__subject_state_type__ss__last__bit () Int)

(declare-fun sk__subject_state_type__ss__position () Int)

;; sk__subject_state_type__ss__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__ss__first__bit))

;; sk__subject_state_type__ss__last__bit_axiom
  (assert
  (< sk__subject_state_type__ss__first__bit sk__subject_state_type__ss__last__bit))

;; sk__subject_state_type__ss__position_axiom
  (assert (<= 0 sk__subject_state_type__ss__position))

(declare-fun sk__subject_state_type__ds__first__bit () Int)

(declare-fun sk__subject_state_type__ds__last__bit () Int)

(declare-fun sk__subject_state_type__ds__position () Int)

;; sk__subject_state_type__ds__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__ds__first__bit))

;; sk__subject_state_type__ds__last__bit_axiom
  (assert
  (< sk__subject_state_type__ds__first__bit sk__subject_state_type__ds__last__bit))

;; sk__subject_state_type__ds__position_axiom
  (assert (<= 0 sk__subject_state_type__ds__position))

(declare-fun sk__subject_state_type__es__first__bit () Int)

(declare-fun sk__subject_state_type__es__last__bit () Int)

(declare-fun sk__subject_state_type__es__position () Int)

;; sk__subject_state_type__es__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__es__first__bit))

;; sk__subject_state_type__es__last__bit_axiom
  (assert
  (< sk__subject_state_type__es__first__bit sk__subject_state_type__es__last__bit))

;; sk__subject_state_type__es__position_axiom
  (assert (<= 0 sk__subject_state_type__es__position))

(declare-fun sk__subject_state_type__fs__first__bit () Int)

(declare-fun sk__subject_state_type__fs__last__bit () Int)

(declare-fun sk__subject_state_type__fs__position () Int)

;; sk__subject_state_type__fs__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__fs__first__bit))

;; sk__subject_state_type__fs__last__bit_axiom
  (assert
  (< sk__subject_state_type__fs__first__bit sk__subject_state_type__fs__last__bit))

;; sk__subject_state_type__fs__position_axiom
  (assert (<= 0 sk__subject_state_type__fs__position))

(declare-fun sk__subject_state_type__gs__first__bit () Int)

(declare-fun sk__subject_state_type__gs__last__bit () Int)

(declare-fun sk__subject_state_type__gs__position () Int)

;; sk__subject_state_type__gs__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__gs__first__bit))

;; sk__subject_state_type__gs__last__bit_axiom
  (assert
  (< sk__subject_state_type__gs__first__bit sk__subject_state_type__gs__last__bit))

;; sk__subject_state_type__gs__position_axiom
  (assert (<= 0 sk__subject_state_type__gs__position))

(declare-fun sk__subject_state_type__tr__first__bit () Int)

(declare-fun sk__subject_state_type__tr__last__bit () Int)

(declare-fun sk__subject_state_type__tr__position () Int)

;; sk__subject_state_type__tr__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__tr__first__bit))

;; sk__subject_state_type__tr__last__bit_axiom
  (assert
  (< sk__subject_state_type__tr__first__bit sk__subject_state_type__tr__last__bit))

;; sk__subject_state_type__tr__position_axiom
  (assert (<= 0 sk__subject_state_type__tr__position))

(declare-fun sk__subject_state_type__ldtr__first__bit () Int)

(declare-fun sk__subject_state_type__ldtr__last__bit () Int)

(declare-fun sk__subject_state_type__ldtr__position () Int)

;; sk__subject_state_type__ldtr__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__ldtr__first__bit))

;; sk__subject_state_type__ldtr__last__bit_axiom
  (assert
  (< sk__subject_state_type__ldtr__first__bit sk__subject_state_type__ldtr__last__bit))

;; sk__subject_state_type__ldtr__position_axiom
  (assert (<= 0 sk__subject_state_type__ldtr__position))

(declare-fun sk__subject_state_type__gdtr__first__bit () Int)

(declare-fun sk__subject_state_type__gdtr__last__bit () Int)

(declare-fun sk__subject_state_type__gdtr__position () Int)

;; sk__subject_state_type__gdtr__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__gdtr__first__bit))

;; sk__subject_state_type__gdtr__last__bit_axiom
  (assert
  (< sk__subject_state_type__gdtr__first__bit sk__subject_state_type__gdtr__last__bit))

;; sk__subject_state_type__gdtr__position_axiom
  (assert (<= 0 sk__subject_state_type__gdtr__position))

(declare-fun sk__subject_state_type__idtr__first__bit () Int)

(declare-fun sk__subject_state_type__idtr__last__bit () Int)

(declare-fun sk__subject_state_type__idtr__position () Int)

;; sk__subject_state_type__idtr__first__bit_axiom
  (assert (<= 0 sk__subject_state_type__idtr__first__bit))

;; sk__subject_state_type__idtr__last__bit_axiom
  (assert
  (< sk__subject_state_type__idtr__first__bit sk__subject_state_type__idtr__last__bit))

;; sk__subject_state_type__idtr__position_axiom
  (assert (<= 0 sk__subject_state_type__idtr__position))

(declare-fun dummy5 () us_rep3)

(declare-datatypes ()
((subject_state_type__ref
 (mk_subject_state_type__ref (subject_state_type__content us_rep3)))))
(define-fun subject_state_type__ref___projection ((a subject_state_type__ref)) us_rep3 
  (subject_state_type__content a))

(declare-datatypes () ((elem__ref (mk_elem__ref (elem__content us_rep3)))))
(define-fun elem__ref___projection ((a elem__ref)) us_rep3 (elem__content a))

(declare-fun e () us_rep3)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun test__p__get_val__result () us_rep)

(declare-fun result () us_rep)

(declare-fun test__p__get_val__result1 () us_rep)

(declare-fun test__p__get_val__result2 () us_rep)

(declare-fun test__p__get_val__result3 () us_rep)

(declare-fun test__p__get_val__result4 () us_rep)

(declare-fun test__p__get_val__result5 () us_rep)

(declare-fun result1 () us_rep)

;; H
  (assert (= test__p__get_val__result1 test__p__get_val__result2))

;; H
  (assert (= test__p__get_val__result3 test__p__get_val__result1))

;; H
  (assert (= result test__p__get_val__result))

;; H
  (assert (= test__p__get_val__result1 val__))

;; H
  (assert
  (= (mk_t__ref test__p__get_val__result4) (mk_t__ref
                                           test__p__get_val__result2)))

;; H
  (assert (= test__p__get_val__result5 test__p__get_val__result3))

;; H
  (assert (= result1 test__p__get_val__result4))

(assert
;; WP_parameter_def
 ;; File "gen.ads", line 7, characters 0-0
  (not
  (= (bool_eq test__p__get_val__result4 test__p__get_val__result4) true)))
(check-sat)
