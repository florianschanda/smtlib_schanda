;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort word32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (word32 word32) Bool)

(declare-const dummy2 word32)

(declare-datatypes ()
((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_217 (_ BitVec 32))
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)) Bool true)

(declare-fun to_rep1 (word32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x word32)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))

;; slide_eq
  (assert
  (forall ((a (Array Int word32)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int word32)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int word32) Int Int (Array Int word32) Int
  Int) (Array Int word32))

;; concat_def
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (word32 Int) (Array Int word32))

;; singleton_def
  (assert
  (forall ((v word32))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int word32)) (a__first Int) (a__last Int)
  (b (Array Int word32)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int word32) Int Int (Array Int word32) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq1 (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ()
((math_int__ref (mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content
                                                                  a))

(declare-fun oadd (us_rep us_rep) us_rep)

(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)

;; oadd__post_axiom
  (assert true)

(declare-fun osubtract (us_rep us_rep) us_rep)

(declare-fun osubtract__function_guard (us_rep us_rep us_rep) Bool)

;; osubtract__post_axiom
  (assert true)

(declare-fun omultiply (us_rep us_rep) us_rep)

(declare-fun omultiply__function_guard (us_rep us_rep us_rep) Bool)

;; omultiply__post_axiom
  (assert true)

(declare-fun omod (us_rep us_rep) us_rep)

(declare-fun omod__function_guard (us_rep us_rep us_rep) Bool)

;; omod__post_axiom
  (assert true)

(declare-fun oexpon (us_rep Int) us_rep)

(declare-fun oexpon__function_guard (us_rep us_rep Int) Bool)

;; oexpon__post_axiom
  (assert true)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; oeq__post_axiom
  (assert true)

(declare-fun olt (us_rep us_rep) Bool)

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

;; olt__post_axiom
  (assert true)

(declare-fun from_word32 ((_ BitVec 32)) us_rep)

(declare-fun from_word32__function_guard (us_rep (_ BitVec 32)) Bool)

;; from_word32__post_axiom
  (assert true)

(declare-fun base (tuple0) us_rep)

(declare-fun base__function_guard (us_rep tuple0) Bool)

;; base__post_axiom
  (assert true)

;; base__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (base us_void_param) (oexpon (from_word32 ((_ int2bv 32) 2)) 32)) :pattern (
  (base us_void_param)) )))

(declare-sort big_int_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (big_int_range big_int_range) Bool)

(declare-const dummy4 big_int_range)

(declare-datatypes ()
((big_int_range__ref
 (mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range
  (big_int_range__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int word32))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))

(define-fun of_array ((a (Array Int word32)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int word32)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int word32)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int word32)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-const dummy5 us_t)

(declare-datatypes ()
((big_int__ref (mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content
                                                              a))

(define-fun dynamic_invariant2 ((temp___expr_289 us_t)
  (temp___is_init_286 Bool) (temp___skip_constant_287 Bool)
  (temp___do_toplevel_288 Bool)) Bool (=>
                                      (not (= temp___skip_constant_287 true))
                                      (dynamic_property 0 2147483646
                                      (first1 temp___expr_289)
                                      (last1 temp___expr_289))))

(declare-fun num_of_big_int (us_t Int Int) us_rep)

(declare-fun num_of_big_int__function_guard (us_rep us_t Int Int) Bool)

;; num_of_big_int__post_axiom
  (assert true)

(declare-fun inverse (us_rep us_rep) us_rep)

(declare-fun inverse__function_guard (us_rep us_rep us_rep) Bool)

;; inverse__post_axiom
  (assert true)

(declare-fun num_of_boolean (Bool) us_rep)

(declare-fun num_of_boolean__function_guard (us_rep Bool) Bool)

(declare-fun less (us_t Int Int us_t Int) Bool)

(declare-fun less__function_guard (Bool us_t Int Int us_t Int) Bool)

;; less__post_axiom
  (assert
  (forall ((a us_t) (b us_t))
  (forall ((a_first Int) (a_last Int) (b_first Int))
  (! (=>
     (and
     (and
     (and
     (and
     (and (dynamic_invariant2 a true true true) (dynamic_invariant a_first
     true true true)) (dynamic_invariant a_last true true true))
     (dynamic_invariant2 b true true true)) (dynamic_invariant b_first true
     true true))
     (and
     (and
     (and
     (and (and (<= (first1 a) a_first) (<= a_first (last1 a)))
     (and (<= (first1 a) a_last) (<= a_last (last1 a))))
     (and (<= (first1 b) b_first) (<= b_first (last1 b))))
     (and (<= (first1 b) (+ b_first (- a_last a_first)))
     (<= (+ b_first (- a_last a_first)) (last1 b)))) (<= a_first a_last)))
     (= (= (less a a_first a_last b b_first) true)
     (= (olt (num_of_big_int a a_first (+ (- a_last a_first) 1))
        (num_of_big_int b b_first (+ (- a_last a_first) 1))) true))) :pattern (
  (less a a_first a_last b b_first)) ))))

(declare-const a__first integer)

(declare-const a__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const a_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const a_last Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const b us_t)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const b_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const c us_t)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const c_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const m us_t)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const m_first Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const m_inv (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-fun word_of_boolean (Bool) (_ BitVec 32))

(declare-fun word_of_boolean__function_guard ((_ BitVec 32) Bool) Bool)

;; word_of_boolean__post_axiom
  (assert
  (forall ((b1 Bool))
  (! (let ((result (word_of_boolean b1)))
     (and (= (oeq (from_word32 result) (num_of_boolean b1)) true)
     (dynamic_invariant1 result true false true))) :pattern ((word_of_boolean
                                                             b1)) )))

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes () ((t62b__ref (mk_t62b__ref (t62b__content integer)))))
(define-fun t62b__ref___projection ((a t62b__ref)) integer (t62b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant4 ((temp___expr_283 Int)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)) Bool (=>
                                      (or (= temp___is_init_280 true)
                                      (<= 0 2147483646)) (in_range3
                                      temp___expr_283)))

;; num_of_boolean__post_axiom
  (assert true)

(declare-const a_msw (_ BitVec 32))

(declare-const i Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const temp___603 Int)

(declare-const o2 Int)

(declare-const o3 word32)

(declare-const o4 (_ BitVec 32))

(declare-const o5 Int)

(declare-const o6 word32)

(declare-const o7 Int)

(declare-const o8 word32)

(declare-const o9 (_ BitVec 32))

(declare-const o10 (_ BitVec 32))

(declare-const o11 (_ BitVec 32))

(declare-const o12 (_ BitVec 32))

(declare-const o13 (_ BitVec 32))

(declare-const o14 Int)

(declare-const o15 word32)

(declare-const o16 (_ BitVec 32))

(declare-const lsc__bignum__single_add_mult_mult__a (_ BitVec 32))

(declare-const o17 Int)

(declare-const o18 word32)

(declare-const o19 (_ BitVec 32))

(declare-const o20 Int)

(declare-const o21 word32)

(declare-const o22 (_ BitVec 32))

(declare-const o23 word32)

(declare-const o24 Int)

(declare-const o25 (Array Int word32))

(declare-const o26 Int)

(declare-const o27 Int)

(declare-const o28 Int)

(declare-const o29 word32)

(declare-const o30 Int)

(declare-const o31 (Array Int word32))

(declare-const o32 Int)

(declare-const o33 word32)

(declare-const o34 (_ BitVec 32))

(declare-const o35 Bool)

(declare-const o36 (_ BitVec 32))

(declare-const o37 (_ BitVec 32))

(declare-const o38 Int)

(declare-const o39 Int)

(declare-const o40 Int)

(declare-const o41 Int)

(declare-const o42 Int)

(declare-const o43 Int)

(declare-const o44 us_rep)

(declare-const o45 Int)

(declare-const o46 Int)

(declare-const o47 Int)

(declare-const o48 Int)

(declare-const o49 us_rep)

(declare-const o50 us_rep)

(declare-const o51 us_rep)

(declare-const o52 Int)

(declare-const o53 Int)

(declare-const o54 Int)

(declare-const o55 Int)

(declare-const o56 us_rep)

(declare-const o57 Int)

(declare-const o58 Int)

(declare-const o59 Int)

(declare-const o60 Int)

(declare-const o61 us_rep)

(declare-const o62 Int)

(declare-const o63 Int)

(declare-const o64 Int)

(declare-const o65 Int)

(declare-const o66 us_rep)

(declare-const o67 us_rep)

(declare-const o68 Int)

(declare-const o69 Int)

(declare-const o70 Int)

(declare-const o71 Int)

(declare-const o72 us_rep)

(declare-const o73 us_rep)

(declare-const o74 us_rep)

(declare-const o75 us_rep)

(declare-const o76 us_rep)

(declare-const o77 Int)

(declare-const o78 Int)

(declare-const o79 Int)

(declare-const o80 Int)

(declare-const o81 us_rep)

(declare-const o82 us_rep)

(declare-const o83 us_rep)

(declare-const o84 us_rep)

(declare-const o85 Bool)

(declare-const a (Array Int word32))

(declare-const result (_ BitVec 32))

(declare-const a_msw1 (_ BitVec 32))

(declare-const result1 Int)

(declare-const i1 Int)

(declare-const a1 (Array Int word32))

(declare-const carry1 (_ BitVec 32))

(declare-const carry2 (_ BitVec 32))

(declare-const a_msw2 (_ BitVec 32))

(declare-const bi (_ BitVec 32))

(declare-const u (_ BitVec 32))

(declare-const i2 Int)

(declare-const result2 (_ BitVec 32))

(declare-const carry11 (_ BitVec 32))

(declare-const result3 (_ BitVec 32))

(declare-const carry21 (_ BitVec 32))

(declare-const result4 (_ BitVec 32))

(declare-const bi1 (_ BitVec 32))

(declare-const result5 (_ BitVec 32))

(declare-const u1 (_ BitVec 32))

(declare-const carry12 (_ BitVec 32))

(declare-const carry22 (_ BitVec 32))

(declare-const lsc__bignum__single_add_mult_mult__a1 (_ BitVec 32))

(declare-const result6 (Array Int word32))

(declare-const a2 (Array Int word32))

(declare-const a3 (Array Int word32))

(declare-const carry13 (_ BitVec 32))

(declare-const carry23 (_ BitVec 32))

(declare-const result7 (Array Int word32))

(declare-const a4 (Array Int word32))

(declare-const result8 (_ BitVec 32))

(declare-const a_msw3 (_ BitVec 32))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep a__first) (to_rep a__last)))

;; H
  (assert (in_range2 a_first))

;; H
  (assert (in_range2 a_last))

;; H
  (assert (dynamic_invariant2 b true false true))

;; H
  (assert (in_range2 b_first))

;; H
  (assert (dynamic_invariant2 c true false true))

;; H
  (assert (in_range2 c_first))

;; H
  (assert (dynamic_invariant2 m true false true))

;; H
  (assert (in_range2 m_first))

;; H
  (assert
  (and (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last)))
  (and (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last)))
  (and (< a_first a_last)
  (and
  (and (<= (to_rep (first (rt b))) b_first)
  (<= b_first (to_rep (last (rt b)))))
  (and
  (and (<= (to_rep (first (rt b))) (+ b_first (- a_last a_first)))
  (<= (+ b_first (- a_last a_first)) (to_rep (last (rt b)))))
  (and
  (and (<= (to_rep (first (rt c))) c_first)
  (<= c_first (to_rep (last (rt c)))))
  (and
  (and (<= (to_rep (first (rt c))) (+ c_first (- a_last a_first)))
  (<= (+ c_first (- a_last a_first)) (to_rep (last (rt c)))))
  (and
  (and (<= (to_rep (first (rt m))) m_first)
  (<= m_first (to_rep (last (rt m)))))
  (and
  (and (<= (to_rep (first (rt m))) (+ m_first (- a_last a_first)))
  (<= (+ m_first (- a_last a_first)) (to_rep (last (rt m)))))
  (and
  (= (olt (num_of_big_int c c_first (+ (- a_last a_first) 1))
     (num_of_big_int m m_first (+ (- a_last a_first) 1))) true)
  (and
  (= (olt (from_word32 ((_ int2bv 32) 1))
     (num_of_big_int m m_first (+ (- a_last a_first) 1))) true)
  (= (bvadd ((_ int2bv 32) 1) (bvmul m_inv (to_rep1
                                           (select (elts m) m_first)))) ((_ int2bv 32) 0))))))))))))))

;; H
  (assert
  (forall ((k Int))
  (=> (and (<= a_first k) (<= k a_last))
  (= (to_rep1 (select a k)) ((_ int2bv 32) 0)))))

;; H
  (assert (= (mk_t__ref result) (mk_t__ref a_msw)))

;; H
  (assert (= a_msw1 ((_ int2bv 32) 0)))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref i)))

;; H
  (assert (= i1 a_first))

;; H
  (assert (<= a_first i1))

;; H
  (assert (<= i1 a_last))

;; H
  (assert
  (and
  (= (oeq
     (omod
     (oadd
     (num_of_big_int (mk___t a1 (mk (to_rep a__first) (to_rep a__last)))
     a_first (+ (- a_last a_first) 1))
     (omultiply (oexpon (base Tuple0) (+ (- a_last a_first) 1))
     (from_word32 a_msw2)))
     (num_of_big_int m m_first (+ (- a_last a_first) 1)))
     (omod
     (omultiply
     (omultiply (num_of_big_int b b_first (- i2 a_first))
     (num_of_big_int c c_first (+ (- a_last a_first) 1)))
     (oexpon
     (inverse (num_of_big_int m m_first (+ (- a_last a_first) 1))
     (base Tuple0)) (- i2 a_first)))
     (num_of_big_int m m_first (+ (- a_last a_first) 1)))) true)
  (= (olt
     (oadd
     (num_of_big_int (mk___t a1 (mk (to_rep a__first) (to_rep a__last)))
     a_first (+ (- a_last a_first) 1))
     (omultiply (oexpon (base Tuple0) (+ (- a_last a_first) 1))
     (from_word32 a_msw2)))
     (osubtract
     (omultiply (from_word32 ((_ int2bv 32) 2))
     (num_of_big_int m m_first (+ (- a_last a_first) 1)))
     (from_word32 ((_ int2bv 32) 1)))) true)))

;; H
  (assert
  (and (=> (<= a_first a_last) (dynamic_property1 a_first a_last i2))
  (and (<= a_first i2) (<= i2 a_last))))

;; H
  (assert (= carry1 result2))

;; H
  (assert (= carry11 ((_ int2bv 32) 0)))

;; H
  (assert (= carry2 result3))

;; H
  (assert (= carry21 ((_ int2bv 32) 0)))

;; H
  (assert (and (= o (- i2 a_first)) (in_range1 (- i2 a_first))))

;; H
  (assert (= o1 (+ b_first o)))

;; H
  (assert (and (= temp___603 o1) (in_range1 o1)))

;; H
  (assert
  (and (<= (to_rep (first (rt b))) temp___603)
  (<= temp___603 (to_rep (last (rt b))))))

;; H
  (assert (= o2 temp___603))

;; H
  (assert (= o3 (select (elts b) o2)))

;; H
  (assert (= o4 (to_rep1 o3)))

;; H
  (assert (= bi result4))

;; H
  (assert (= bi1 o4))

;; H
  (assert
  (and (<= (to_rep (first (rt c))) c_first)
  (<= c_first (to_rep (last (rt c))))))

;; H
  (assert (= o7 c_first))

;; H
  (assert (= o8 (select (elts c) o7)))

;; H
  (assert (= o9 (to_rep1 o8)))

;; H
  (assert (= o10 (bvmul bi1 o9)))

;; H
  (assert (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))))

;; H
  (assert (= o5 a_first))

;; H
  (assert (= o6 (select a1 o5)))

;; H
  (assert (= o11 (to_rep1 o6)))

;; H
  (assert (= o12 (bvadd o11 o10)))

;; H
  (assert (= o13 (bvmul o12 m_inv)))

;; H
  (assert (= u result5))

;; H
  (assert (= u1 o13))

;; H
  (assert (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))))

;; H
  (assert (= o14 a_first))

;; H
  (assert (= o15 (select a1 o14)))

;; H
  (assert (= o16 (to_rep1 o15)))

;; H
  (assert (= o16 lsc__bignum__single_add_mult_mult__a))

;; H
  (assert
  (and (<= (to_rep (first (rt m))) m_first)
  (<= m_first (to_rep (last (rt m))))))

;; H
  (assert (= o20 m_first))

;; H
  (assert (= o21 (select (elts m) o20)))

;; H
  (assert (= o22 (to_rep1 o21)))

;; H
  (assert
  (and (<= (to_rep (first (rt c))) c_first)
  (<= c_first (to_rep (last (rt c))))))

;; H
  (assert (= o17 c_first))

;; H
  (assert (= o18 (select (elts c) o17)))

;; H
  (assert (= o19 (to_rep1 o18)))

;; H
  (assert
  (= (oeq
     (oadd
     (oadd
     (oadd
     (oadd (from_word32 lsc__bignum__single_add_mult_mult__a)
     (omultiply (from_word32 bi1) (from_word32 o19)))
     (omultiply (from_word32 o22) (from_word32 u1))) (from_word32 carry11))
     (omultiply (base Tuple0) (from_word32 carry21)))
     (oadd (from_word32 lsc__bignum__single_add_mult_mult__a1)
     (omultiply (base Tuple0)
     (oadd (from_word32 carry12)
     (omultiply (base Tuple0) (from_word32 carry22)))))) true))

;; H
  (assert (= (to_rep1 o23) lsc__bignum__single_add_mult_mult__a1))

;; H
  (assert (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last))))

;; H
  (assert (= o24 a_first))

;; H
  (assert (= o25 (store a1 o24 o23)))

;; H
  (assert (= a1 result6))

;; H
  (assert (= a2 o25))

;; H
  (assert (and (= o28 (+ m_first 1)) (in_range1 (+ m_first 1))))

;; H
  (assert (and (= o27 (+ c_first 1)) (in_range1 (+ c_first 1))))

;; H
  (assert (and (= o26 (- a_last 1)) (in_range2 (- a_last 1))))

;; H
  (assert
  (= (oeq
     (oadd
     (oadd
     (oadd
     (oadd
     (num_of_big_int (mk___t a2 (mk (to_rep a__first) (to_rep a__last)))
     (+ a_first 1) (+ (- o26 a_first) 1))
     (omultiply (num_of_big_int c o27 (+ (- o26 a_first) 1))
     (from_word32 bi1)))
     (omultiply (num_of_big_int m o28 (+ (- o26 a_first) 1))
     (from_word32 u1))) (from_word32 carry12))
     (omultiply (base Tuple0) (from_word32 carry22)))
     (oadd
     (num_of_big_int (mk___t a3 (mk (to_rep a__first) (to_rep a__last)))
     a_first (+ (- o26 a_first) 1))
     (omultiply (oexpon (base Tuple0) (+ (- o26 a_first) 1))
     (oadd (from_word32 carry13)
     (omultiply (base Tuple0) (from_word32 carry23)))))) true))

;; H
  (assert (= (to_rep1 o29) (bvadd a_msw2 carry13)))

;; H
  (assert (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last))))

;; H
  (assert (= o30 a_last))

;; H
  (assert (= o31 (store a3 o30 o29)))

;; H
  (assert (= a3 result7))

;; H
  (assert (= a4 o31))

;; H
  (assert (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last))))

;; H
  (assert (= o32 a_last))

;; H
  (assert (= o33 (select a4 o32)))

;; H
  (assert (= o34 (to_rep1 o33)))

;; H
  (assert (= o35 (ite (bvult o34 carry13) true false)))

;; H
  (assert
  (and (= o36 (word_of_boolean o35))
  (= (oeq (from_word32 o36) (num_of_boolean o35)) true)))

;; H
  (assert (= o37 (bvadd carry23 o36)))

;; H
  (assert (= a_msw2 result8))

;; H
  (assert (= a_msw3 o37))

;; H
  (assert (= o83 (from_word32 ((_ int2bv 32) 1))))

;; H
  (assert (and (= o77 (- a_last a_first)) (in_range1 (- a_last a_first))))

;; H
  (assert (= o78 (+ o77 1)))

;; H
  (assert (and (= o79 o78) (in_range1 o78)))

;; H
  (assert (and (= o80 o79) (in_range2 o79)))

;; H
  (assert (= o81 (num_of_big_int m m_first o80)))

;; H
  (assert (= o76 (from_word32 ((_ int2bv 32) 2))))

;; H
  (assert (= o82 (omultiply o76 o81)))

;; H
  (assert (= o84 (osubtract o82 o83)))

;; H
  (assert (= o73 (from_word32 a_msw3)))

;; H
  (assert (and (= o68 (- a_last a_first)) (in_range1 (- a_last a_first))))

;; H
  (assert (= o69 (+ o68 1)))

;; H
  (assert (and (= o70 o69) (in_range1 o69)))

;; H
  (assert (and (= o71 o70) (in_range2 o70)))

;; H
  (assert
  (and (= o67 (base Tuple0))
  (= o67 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))

;; H
  (assert (= o72 (oexpon o67 o71)))

;; H
  (assert (= o74 (omultiply o72 o73)))

;; H
  (assert (and (= o62 (- a_last a_first)) (in_range1 (- a_last a_first))))

;; H
  (assert (= o63 (+ o62 1)))

;; H
  (assert (and (= o64 o63) (in_range1 o63)))

;; H
  (assert (and (= o65 o64) (in_range2 o64)))

;; H
  (assert
  (= o66 (num_of_big_int (mk___t a4 (mk (to_rep a__first) (to_rep a__last)))
         a_first o65)))

;; H
  (assert (= o75 (oadd o66 o74)))

;; H
  (assert (= o85 (olt o75 o84)))

;; H
  (assert (and (= o57 (- a_last a_first)) (in_range1 (- a_last a_first))))

;; H
  (assert (= o58 (+ o57 1)))

;; H
  (assert (and (= o59 o58) (in_range1 o58)))

;; H
  (assert (and (= o60 o59) (in_range2 o59)))

;; H
  (assert (= o61 (num_of_big_int m m_first o60)))

;; H
  (assert (and (= o52 (+ i2 1)) (in_range1 (+ i2 1))))

;; H
  (assert (= o53 (- o52 a_first)))

;; H
  (assert (and (= o54 o53) (in_range1 o53)))

;; H
  (assert (and (= o55 o54) (in_range2 o54)))

;; H
  (assert
  (and (= o50 (base Tuple0))
  (= o50 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))

;; H
  (assert (and (= o45 (- a_last a_first)) (in_range1 (- a_last a_first))))

;; H
  (assert (= o46 (+ o45 1)))

;; H
  (assert (and (= o47 o46) (in_range1 o46)))

;; H
  (assert (and (= o48 o47) (in_range2 o47)))

;; H
  (assert (= o49 (num_of_big_int m m_first o48)))

;; H
  (assert (= o51 (inverse o49 o50)))

;; H
  (assert (= o56 (oexpon o51 o55)))

;; H
  (assert (and (= o40 (- a_last a_first)) (in_range1 (- a_last a_first))))

;; H
  (assert (= o41 (+ o40 1)))

;; H
  (assert (and (= o42 o41) (in_range1 o41)))

;; H
  (assert (and (= o43 o42) (in_range2 o42)))

;; H
  (assert (= o44 (num_of_big_int c c_first o43)))

;; H
  (assert (and (= o38 (+ i2 1)) (in_range1 (+ i2 1))))

;; H
  (assert (= o39 (- o38 a_first)))

(assert
;; WP_parameter_def
 ;; File "lsc-bignum.adb", line 158, characters 0-0
  (not (in_range1 o39)))
(check-sat)
(exit)
