(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = {
rec__split_records__record_with_mutable_discrs__present : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__split_records__record_with_mutable_discrs__present

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__split_records__record_with_mutable_discrs__field : natural
}

function us_split_fields_Field__projection(a: us_split_fields) : natural =
  (a).rec__split_records__record_with_mutable_discrs__field

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

predicate split_records__record_with_mutable_discrs__field__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present) = 1)

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present = ((b).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present) and
  (split_records__record_with_mutable_discrs__field__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__split_records__record_with_mutable_discrs__field) = to_rep(((b).us_split_fields1).rec__split_records__record_with_mutable_discrs__field)))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present = ((b).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present) and
  (split_records__record_with_mutable_discrs__field__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__split_records__record_with_mutable_discrs__field) = to_rep(((b).us_split_fields1).rec__split_records__record_with_mutable_discrs__field))))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit : int

logic split_records__record_with_mutable_discrs__present__last__bit : int

logic split_records__record_with_mutable_discrs__present__position : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom :
  (split_records__record_with_mutable_discrs__present__first__bit <  split_records__record_with_mutable_discrs__present__last__bit)

axiom split_records__record_with_mutable_discrs__present__position_axiom :
  (0 <= split_records__record_with_mutable_discrs__present__position)

logic split_records__record_with_mutable_discrs__field__first__bit : int

logic split_records__record_with_mutable_discrs__field__last__bit : int

logic split_records__record_with_mutable_discrs__field__position : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom :
  (split_records__record_with_mutable_discrs__field__first__bit <  split_records__record_with_mutable_discrs__field__last__bit)

axiom split_records__record_with_mutable_discrs__field__position_axiom :
  (0 <= split_records__record_with_mutable_discrs__field__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : bool

logic dummy2 : natural

logic dummy3 : bool

type record_with_mutable_discrs__ref = { record_with_mutable_discrs__content
: us_rep
}

function record_with_mutable_discrs__ref___projection(a: record_with_mutable_discrs__ref) : us_rep =
  (a).record_with_mutable_discrs__content

logic r__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic new_field : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r2b : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range2(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:natural. forall a2:bool. (0 <= object__size1({
  us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:natural. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = a };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = a1 };
  attr__constrained = a2 })))

logic split_records__record_with_mutable_discrs__present__first__bit1 : int

logic split_records__record_with_mutable_discrs__present__last__bit1 : int

logic split_records__record_with_mutable_discrs__present__position1 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit1)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom1 :
  (split_records__record_with_mutable_discrs__present__first__bit1 <  split_records__record_with_mutable_discrs__present__last__bit1)

axiom split_records__record_with_mutable_discrs__present__position_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__present__position1)

logic split_records__record_with_mutable_discrs__field__first__bit1 : int

logic split_records__record_with_mutable_discrs__field__last__bit1 : int

logic split_records__record_with_mutable_discrs__field__position1 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit1)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom1 :
  (split_records__record_with_mutable_discrs__field__first__bit1 <  split_records__record_with_mutable_discrs__field__last__bit1)

axiom split_records__record_with_mutable_discrs__field__position_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__field__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy4 : bool

logic dummy5 : natural

logic dummy6 : bool

type t3b__ref = { t3b__content : us_rep
}

function t3b__ref___projection(a: t3b__ref) : us_rep = (a).t3b__content

 (* File "split_records.ads", line 16, characters 0-0 *)
goal WP_parameter_def :
  (forall r__split_fields:natural. forall r__split_discrs:bool.
  forall o:natural. forall o1:natural. forall temp___241:bool.
  forall temp___2411:natural. forall temp___2412:bool. forall o2:natural.
  forall o3:natural. forall temp___237:bool. forall temp___2371:natural.
  forall temp___2372:bool. forall usq_:bool. forall usq_1:natural.
  forall usq_2:bool. forall temp___239:bool. forall temp___2391:natural.
  forall temp___2392:bool. forall r__split_fields1:natural.
  forall r__split_discrs1:bool. forall result:natural.
  forall r__split_fields2:natural. forall result1:bool.
  forall r__split_discrs2:bool. forall result2:natural.
  forall r__split_fields3:natural. forall result3:bool.
  forall r__split_discrs3:bool. forall r__split_fields4:natural.
  forall r__split_discrs4:bool. forall r__split_fields5:natural.
  forall r__split_discrs5:bool. ((in_range1(new_field) and
  ((((r__split_discrs = true) and ((((to_rep(o) = new_field) and
  (o = o1)) and ((r__split_discrs = temp___241) and ((temp___2411 = o1) and
  (r__attr__constrained = temp___2412)))) and ((({ us_split_fields__content =
  { rec__split_records__record_with_mutable_discrs__field = result } } = {
  us_split_fields__content = {
  rec__split_records__record_with_mutable_discrs__field = r__split_fields }
  }) and (temp___2411 = r__split_fields2)) and
  ((result1 = r__split_discrs) and (temp___241 = r__split_discrs2))))) or
  ((not (r__split_discrs = true)) and
  ((((not (r__attr__constrained = true)) and ((r__split_discrs = r2b) and
  ((((((to_rep(o2) = new_field) and (o2 = o3)) and
  ((of_int(1) = temp___237) and ((temp___2371 = o3) and
  (true = temp___2372)))) and ((((r__attr__constrained = true) and
  (temp___237 = r__split_discrs)) or (not (r__attr__constrained = true))) and
  ({ us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = usq_ };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = usq_1 };
  attr__constrained = usq_2 } = { us_split_discrs1 = {
  rec__split_records__record_with_mutable_discrs__present = temp___237 };
  us_split_fields1 = {
  rec__split_records__record_with_mutable_discrs__field = temp___2371 };
  attr__constrained = temp___2372 }))) and ((usq_ = temp___239) and
  ((usq_1 = temp___2391) and (r__attr__constrained = temp___2392)))) and
  (((result2 = r__split_fields) and (temp___2391 = r__split_fields3)) and
  ((result3 = r__split_discrs) and (temp___239 = r__split_discrs3)))))) or
  ((r__attr__constrained = true) and
  (((r__split_discrs = r__split_discrs3) and
  (r__split_fields = r__split_fields3)) and (({
  rec__split_records__record_with_mutable_discrs__present = r__split_discrs3
  } = { rec__split_records__record_with_mutable_discrs__present =
  r__split_discrs1 }) and ({
  rec__split_records__record_with_mutable_discrs__field = r__split_fields3
  } = { rec__split_records__record_with_mutable_discrs__field =
  r__split_fields1 }))))) and (({
  rec__split_records__record_with_mutable_discrs__present = r__split_discrs2
  } = { rec__split_records__record_with_mutable_discrs__present =
  r__split_discrs3 }) and ({
  rec__split_records__record_with_mutable_discrs__field = r__split_fields2
  } = { rec__split_records__record_with_mutable_discrs__field =
  r__split_fields3 }))))) and (((r__split_discrs4 = r__split_discrs2) and
  (r__split_fields4 = r__split_fields2)) and
  ((r__split_discrs5 = r__split_discrs2) and
  (r__split_fields5 = r__split_fields2))))) -> ((r__split_discrs4 = true) ->
  (to_rep(r__split_fields4) = new_field))))
