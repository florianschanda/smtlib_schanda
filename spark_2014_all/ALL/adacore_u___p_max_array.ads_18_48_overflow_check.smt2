;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort index_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (index_range index_range) Bool)

(declare-const dummy2 index_range)

(declare-datatypes ((index_range__ref 0))
(((mk_index_range__ref (index_range__content index_range)))))
(define-fun index_range__ref___projection ((a index_range__ref)) index_range
  (index_range__content a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0)) (((mk___t (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int natural)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((nat_array__ref 0))
(((mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content
                                                                  a))

(define-fun dynamic_invariant1 ((temp___expr_142 us_t)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (not (= temp___skip_constant_140 true))
                                      (dynamic_property 1 100
                                      (first1 temp___expr_142)
                                      (last1 temp___expr_142))))

(declare-const a__first integer)

(declare-const a__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-const dummy4 integer)

(declare-datatypes ((t19b__ref 0))
(((mk_t19b__ref (t19b__content integer)))))
(define-fun t19b__ref___projection ((a t19b__ref)) integer (t19b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(define-fun dynamic_invariant3 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 1 100)) (in_range3
                                      temp___expr_136)))

(declare-const a (Array Int natural))

(declare-const j Int)

(declare-const i Int)

(declare-const temp___278 Int)

(declare-const temp___276 (Array Int natural))

(declare-const temp___279 (Array Int natural))

(declare-const temp___283 (Array Int natural))

(declare-const temp___274 Int)

(declare-const temp___281 (Array Int natural))

(declare-const o Int)

(declare-const o1 natural)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 natural)

(declare-const o5 Int)

(declare-const o6 natural)

(declare-const o7 (Array Int natural))

(declare-const o8 Int)

(declare-const k Int)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const a1 (Array Int natural))

(declare-const result Int)

(declare-const j1 Int)

(declare-const result1 Int)

(declare-const i1 Int)

(declare-const a2 (Array Int natural))

(declare-const j2 Int)

(declare-const i2 Int)

(declare-const result2 Bool)

(declare-const result3 (Array Int natural))

(declare-const a3 (Array Int natural))

(declare-const result4 Int)

(declare-const j3 Int)

(declare-const a4 (Array Int natural))

(declare-const j4 Int)

(declare-const i3 Int)

(declare-const a5 (Array Int natural))

(declare-const j5 Int)

(declare-const i4 Int)

(declare-const a6 (Array Int natural))

(declare-const j6 Int)

(declare-const i5 Int)

(declare-const a7 (Array Int natural))

(declare-const j7 Int)

(declare-const i6 Int)

(declare-const a8 (Array Int natural))

(declare-const j8 Int)

(declare-const i7 Int)

(declare-const a9 (Array Int natural))

(declare-const j9 Int)

(declare-const i8 Int)

(define-fun i9 () int__ref (mk_int__ref i5))

(define-fun j10 () int__ref (mk_int__ref j6))

(define-fun a10 () map__ref (mk_map__ref a6))

;; H
  (assert (dynamic_property 1 100 (to_rep1 a__first) (to_rep1 a__last)))

;; H
  (assert (dynamic_invariant1 b true false true))

;; H
  (assert
  (= (ite (<= (to_rep1 a__first) (to_rep1 a__last))
     (+ (- (to_rep1 a__last) (to_rep1 a__first)) 1) 0) (length b)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref j)))

;; H
  (assert (= j1 (to_rep1 (first (rt b)))))

;; H
  (assert (in_range1 j1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref i)))

;; H
  (assert (= i1 (to_rep1 a__first)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= temp___278 j1)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= temp___276 a)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= temp___279 a)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= temp___283 a)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= temp___274 i1)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= temp___281 a)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (and (<= (to_rep1 (first (rt b))) j2) (<= j2 (to_rep1 (last (rt b)))))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= j2 (+ (- i2 (to_rep1 a__first)) (to_rep1 (first (rt b)))))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (forall ((k1 Int))
  (=> (and (<= (to_rep1 a__first) k1) (<= k1 (- i2 1)))
  (ite (< (to_rep
          (select (elts b) (+ (- k1 (to_rep1 a__first)) (to_rep1
                                                        (first (rt b))))))
  (to_rep (select temp___281 k1)))
  (= (to_rep (select a2 k1)) (to_rep (select temp___279 k1)))
  (= (to_rep (select a2 k1)) (to_rep
                             (select (elts b) (+ (- k1 (to_rep1 a__first))
                             (to_rep1 (first (rt b))))))))))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (forall ((k1 Int))
  (=> (and (<= i2 k1) (<= k1 (to_rep1 a__last)))
  (= (to_rep (select a2 k1)) (to_rep (select temp___283 k1)))))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (and
  (and
  (and
  (=> (<= (to_rep1 a__first) (to_rep1 a__last)) (dynamic_property1
  (to_rep1 a__first) (to_rep1 a__last) i2))
  (forall ((temp___277 Int))
  (=>
  (and (<= (to_rep1 a__first) temp___277) (<= temp___277 (to_rep1 a__last)))
  (=> (<= i2 temp___277)
  (= (select a2 temp___277) (select temp___276 temp___277))))))
  (=> (<= (- 2147483648) 2147483647) (in_range1 j2)))
  (and (<= (to_rep1 a__first) i2) (<= i2 (to_rep1 a__last))))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (and (<= (to_rep1 (first (rt b))) j2) (<= j2 (to_rep1 (last (rt b)))))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= o j2)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= o1 (select (elts b) o))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= o2 (to_rep o1))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= result2 (ite (< (to_rep (select a2 i2)) o2) true false))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (=> (= result2 true)
  (and (<= (to_rep1 (first (rt b))) j2) (<= j2 (to_rep1 (last (rt b))))))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (=> (= result2 true) (= o3 j2))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (=> (= result2 true) (= o4 (select (elts b) o3)))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (=> (= result2 true) (= o5 (to_rep o4)))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (=> (= result2 true) (= (to_rep o6) o5))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (=> (= result2 true) (= o7 (store a2 i2 o6)))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (=> (= result2 true) (= a2 result3))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (=> (= result2 true) (= a3 o7))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (=> (not (= result2 true)) (= a3 a2))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (and (= o8 (+ j2 1)) (in_range1 (+ j2 1)))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= j2 result4)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= j3 o8)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= i2 (to_rep1 a__last))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= i2 i3)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= j3 j4)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= a3 a4)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= i4 i2)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= j5 j3)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= a5 a3)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= i9 (mk_int__ref i3))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= j10 (mk_int__ref j4))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last)))
  (= a10 (mk_map__ref a4))))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= i6 i4)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= j7 j5)))

;; H
  (assert
  (=> (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))) (= a7 a5)))

;; H
  (assert
  (=> (not (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))))
  (= i1 i5)))

;; H
  (assert
  (=> (not (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))))
  (= j1 j6)))

;; H
  (assert
  (=> (not (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))))
  (= a10 (mk_map__ref a))))

;; H
  (assert
  (=> (not (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))))
  (= i6 i1)))

;; H
  (assert
  (=> (not (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))))
  (= j7 j1)))

;; H
  (assert
  (=> (not (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))))
  (= a7 a1)))

;; H
  (assert (= (mk_int__ref i7) i9))

;; H
  (assert (= (mk_int__ref j8) j10))

;; H
  (assert (= (mk_map__ref a8) a10))

;; H
  (assert (= i8 i6))

;; H
  (assert (= j9 j7))

;; H
  (assert (= a9 a7))

;; H
  (assert (<= (to_rep1 a__first) k))

;; H
  (assert (<= k (to_rep1 a__last)))

;; H
  (assert
  (and (= o9 (- k (to_rep1 a__first))) (in_range1 (- k (to_rep1 a__first)))))

;; H
  (assert (= o10 (+ o9 (to_rep1 (first (rt b))))))

(assert
;; WP_parameter_def
 ;; File "p_max_array.ads", line 3, characters 0-0
  (not (in_range1 o10)))
(check-sat)
(exit)
