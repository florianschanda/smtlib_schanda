(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__tests__test_16__t__d : bool
}

function us_split_discrs_5__projection(a: us_split_discrs) : bool =
  (a).rec__tests__test_16__t__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref_5__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__tests__test_16__t__x : integer
}

function us_split_fields_X4__projection(a: us_split_fields) : integer =
  (a).rec__tests__test_16__t__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_12__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep_23__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_24__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_25__projection(a: us_rep) : bool = (a).attr__constrained

predicate tests__test_16__t__x__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__tests__test_16__t__d) = 1)

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((((a).us_split_discrs1).rec__tests__test_16__t__d = ((b).us_split_discrs1).rec__tests__test_16__t__d) and
  (tests__test_16__t__x__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__tests__test_16__t__x) = to_rep(((b).us_split_fields1).rec__tests__test_16__t__x)))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((((a).us_split_discrs1).rec__tests__test_16__t__d = ((b).us_split_discrs1).rec__tests__test_16__t__d) and
  (tests__test_16__t__x__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__tests__test_16__t__x) = to_rep(((b).us_split_fields1).rec__tests__test_16__t__x))))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:integer. forall a2:bool. (0 <= object__size({
  us_split_discrs1 = { rec__tests__test_16__t__d = a }; us_split_fields1 = {
  rec__tests__test_16__t__x = a1 }; attr__constrained = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:integer. forall a2:bool.
  (0 <= object__alignment({ us_split_discrs1 = { rec__tests__test_16__t__d =
  a }; us_split_fields1 = { rec__tests__test_16__t__x = a1 };
  attr__constrained = a2 })))

logic tests__test_16__t__d__first__bit : int

logic tests__test_16__t__d__last__bit : int

logic tests__test_16__t__d__position : int

axiom tests__test_16__t__d__first__bit_axiom :
  (0 <= tests__test_16__t__d__first__bit)

axiom tests__test_16__t__d__last__bit_axiom :
  (tests__test_16__t__d__first__bit <  tests__test_16__t__d__last__bit)

axiom tests__test_16__t__d__position_axiom :
  (0 <= tests__test_16__t__d__position)

logic tests__test_16__t__x__first__bit : int

logic tests__test_16__t__x__last__bit : int

logic tests__test_16__t__x__position : int

axiom tests__test_16__t__x__first__bit_axiom :
  (0 <= tests__test_16__t__x__first__bit)

axiom tests__test_16__t__x__last__bit_axiom :
  (tests__test_16__t__x__first__bit <  tests__test_16__t__x__last__bit)

axiom tests__test_16__t__x__position_axiom :
  (0 <= tests__test_16__t__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : bool

logic dummy2 : integer

logic dummy3 : bool

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic f : us_rep -> bool

logic f__function_guard : bool, us_rep -> prop

axiom f__post_axiom : true

axiom f__def_axiom :
  (forall x:bool. forall x1:integer. forall x2:bool [f({ us_split_discrs1 = {
  rec__tests__test_16__t__d = x }; us_split_fields1 = {
  rec__tests__test_16__t__x = x1 }; attr__constrained = x2 })]. ((f({
  us_split_discrs1 = { rec__tests__test_16__t__d = x }; us_split_fields1 = {
  rec__tests__test_16__t__x = x1 }; attr__constrained = x2 }) = true) <->
  (x = true)))

predicate in_range2(rec__tests__test_16__t__d1: bool, a: us_rep) =
  (rec__tests__test_16__t__d1 = ((a).us_split_discrs1).rec__tests__test_16__t__d)

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:integer. forall a2:bool. (0 <= object__size1({
  us_split_discrs1 = { rec__tests__test_16__t__d = a }; us_split_fields1 = {
  rec__tests__test_16__t__x = a1 }; attr__constrained = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:integer. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__tests__test_16__t__d =
  a }; us_split_fields1 = { rec__tests__test_16__t__x = a1 };
  attr__constrained = a2 })))

logic tests__test_16__t__d__first__bit1 : int

logic tests__test_16__t__d__last__bit1 : int

logic tests__test_16__t__d__position1 : int

axiom tests__test_16__t__d__first__bit_axiom1 :
  (0 <= tests__test_16__t__d__first__bit1)

axiom tests__test_16__t__d__last__bit_axiom1 :
  (tests__test_16__t__d__first__bit1 <  tests__test_16__t__d__last__bit1)

axiom tests__test_16__t__d__position_axiom1 :
  (0 <= tests__test_16__t__d__position1)

logic tests__test_16__t__x__first__bit1 : int

logic tests__test_16__t__x__last__bit1 : int

logic tests__test_16__t__x__position1 : int

axiom tests__test_16__t__x__first__bit_axiom1 :
  (0 <= tests__test_16__t__x__first__bit1)

axiom tests__test_16__t__x__last__bit_axiom1 :
  (tests__test_16__t__x__first__bit1 <  tests__test_16__t__x__last__bit1)

axiom tests__test_16__t__x__position_axiom1 :
  (0 <= tests__test_16__t__x__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy4 : bool

logic dummy5 : integer

logic dummy6 : bool

type taS__ref = { taS__content : us_rep
}

function taS__ref___projection(a: taS__ref) : us_rep = (a).taS__content

predicate in_range3(rec__tests__test_16__t__d1: bool, a: us_rep) =
  (rec__tests__test_16__t__d1 = ((a).us_split_discrs1).rec__tests__test_16__t__d)

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:integer. forall a2:bool. (0 <= object__size2({
  us_split_discrs1 = { rec__tests__test_16__t__d = a }; us_split_fields1 = {
  rec__tests__test_16__t__x = a1 }; attr__constrained = a2 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:integer. forall a2:bool.
  (0 <= object__alignment2({ us_split_discrs1 = { rec__tests__test_16__t__d =
  a }; us_split_fields1 = { rec__tests__test_16__t__x = a1 };
  attr__constrained = a2 })))

logic tests__test_16__t__d__first__bit2 : int

logic tests__test_16__t__d__last__bit2 : int

logic tests__test_16__t__d__position2 : int

axiom tests__test_16__t__d__first__bit_axiom2 :
  (0 <= tests__test_16__t__d__first__bit2)

axiom tests__test_16__t__d__last__bit_axiom2 :
  (tests__test_16__t__d__first__bit2 <  tests__test_16__t__d__last__bit2)

axiom tests__test_16__t__d__position_axiom2 :
  (0 <= tests__test_16__t__d__position2)

logic tests__test_16__t__x__first__bit2 : int

logic tests__test_16__t__x__last__bit2 : int

logic tests__test_16__t__x__position2 : int

axiom tests__test_16__t__x__first__bit_axiom2 :
  (0 <= tests__test_16__t__x__first__bit2)

axiom tests__test_16__t__x__last__bit_axiom2 :
  (tests__test_16__t__x__first__bit2 <  tests__test_16__t__x__last__bit2)

axiom tests__test_16__t__x__position_axiom2 :
  (0 <= tests__test_16__t__x__position2)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy7 : bool

logic dummy8 : integer

logic dummy9 : bool

type t19b__ref = { t19b__content : us_rep
}

function t19b__ref___projection(a: t19b__ref) : us_rep = (a).t19b__content

logic a__split_discrs : bool

logic a__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "tests.adb", line 330, characters 0-0 *)
goal WP_parameter_def :
  (forall a__split_fields:integer. forall b__split_discrs:bool.
  forall result:integer. forall a__split_fields1:integer.
  ((((result = a__split_fields) and (dummy = a__split_fields1)) and
  ((a__split_discrs = of_int(0)) and (a__attr__constrained = true))) ->
  (((of_int(0) = a__split_discrs) and (a__attr__constrained = true)) ->
  (((b__attr__constrained = false) and (b__split_discrs = of_int(0))) ->
  ((b__attr__constrained = true) -> (a__split_discrs = b__split_discrs))))))
