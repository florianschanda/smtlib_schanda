;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index index) Bool)

(declare-fun dummy1 () index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(define-fun dynamic_invariant1 ((temp___expr_320 Int)
  (temp___is_init_317 Bool) (temp___skip_constant_318 Bool)
  (temp___do_toplevel_319 Bool)) Bool (=>
                                      (or (= temp___is_init_317 true)
                                      (<= 1 100)) (in_range2
                                      temp___expr_320)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_164 Int))
                           (=>
                           (and (<= a__first temp___idx_164)
                           (<= temp___idx_164 a__last))
                           (= (to_rep (select a temp___idx_164)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_164)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_164 Int))
  (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last))
  (= (to_rep (select a temp___idx_164)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_164)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort integer 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-fun dummy2 () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range3 f)
     (=> (in_range3 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range3 low)
                   (and (in_range3 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int natural)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-datatypes ()
((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content
                                                                  a))

(define-fun dynamic_invariant2 ((temp___expr_326 us_t)
  (temp___is_init_323 Bool) (temp___skip_constant_324 Bool)
  (temp___do_toplevel_325 Bool)) Bool (=>
                                      (not (= temp___skip_constant_324 true))
                                      (dynamic_property 1 100
                                      (first1 temp___expr_326)
                                      (last1 temp___expr_326))))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int2 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort hash_type 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq4 (hash_type hash_type) Bool)

(declare-fun dummy4 () hash_type)

(declare-datatypes ()
((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type
  (hash_type__content a))

(declare-fun to_rep2 (hash_type) (_ BitVec 32))

(declare-fun of_rep2 ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int3 ((x hash_type)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort count_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (count_type count_type) Bool)

(declare-fun dummy5 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep3 (count_type) Int)

(declare-fun of_rep3 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range4
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__find_map__index_maps__map__capacity count_type)(rec__find_map__index_maps__map__modulus hash_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__find_map__index_maps__map__capacity a))

(define-fun us_split_discrs_2__projection ((a us_split_discrs)) hash_type
  (rec__find_map__index_maps__map__modulus a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__find_map__index_maps__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type
  (rec__find_map__index_maps__map a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep_7__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                              a))

(define-fun us_rep_8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep3
                           (rec__find_map__index_maps__map__capacity
                           (us_split_discrs1 a))) (to_rep3
                                                  (rec__find_map__index_maps__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (to_rep2
                           (rec__find_map__index_maps__map__modulus
                           (us_split_discrs1 a))) (to_rep2
                                                  (rec__find_map__index_maps__map__modulus
                                                  (us_split_discrs1 b)))))
                        (= (us_main_eq
                           (rec__find_map__index_maps__map
                           (us_split_fields1 a))
                           (rec__find_map__index_maps__map
                           (us_split_fields1 b))) true))
                   true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun find_map__index_maps__map__capacity__first__bit () Int)

(declare-fun find_map__index_maps__map__capacity__last__bit () Int)

(declare-fun find_map__index_maps__map__capacity__position () Int)

;; find_map__index_maps__map__capacity__first__bit_axiom
  (assert (<= 0 find_map__index_maps__map__capacity__first__bit))

;; find_map__index_maps__map__capacity__last__bit_axiom
  (assert
  (< find_map__index_maps__map__capacity__first__bit find_map__index_maps__map__capacity__last__bit))

;; find_map__index_maps__map__capacity__position_axiom
  (assert (<= 0 find_map__index_maps__map__capacity__position))

(declare-fun find_map__index_maps__map__modulus__first__bit () Int)

(declare-fun find_map__index_maps__map__modulus__last__bit () Int)

(declare-fun find_map__index_maps__map__modulus__position () Int)

;; find_map__index_maps__map__modulus__first__bit_axiom
  (assert (<= 0 find_map__index_maps__map__modulus__first__bit))

;; find_map__index_maps__map__modulus__last__bit_axiom
  (assert
  (< find_map__index_maps__map__modulus__first__bit find_map__index_maps__map__modulus__last__bit))

;; find_map__index_maps__map__modulus__position_axiom
  (assert (<= 0 find_map__index_maps__map__modulus__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun dummy6 () us_rep)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep)))))
(define-fun map__ref___projection ((a map__ref1)) us_rep (map__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq3 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-fun dummy7 () us_rep1)

(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep1)))))
(define-fun map__ref_2__projection ((a map__ref2)) us_rep1 (map__content2 a))

(declare-fun has_key (us_rep1 Int) Bool)

(declare-fun has_key__function_guard (Bool us_rep1 Int) Bool)

(declare-fun model__ (us_rep) us_rep1)

(declare-fun model____function_guard (us_rep1 us_rep) Bool)

(define-fun contains ((container us_rep)
  (key Int)) Bool (has_key (model__ container) key))

(declare-fun contains__function_guard (Bool us_rep Int) Bool)

(declare-fun contains1 (Int us_rep Int) Bool)

(declare-fun contains__function_guard1 (Bool Int us_rep Int) Bool)

(declare-sort key_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (key_type key_type) Bool)

(declare-fun dummy8 () key_type)

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref___projection ((a key_type__ref)) key_type (key_type__content
                                                                    a))

(define-fun dynamic_invariant3 ((temp___expr_331 Int)
  (temp___is_init_328 Bool) (temp___skip_constant_329 Bool)
  (temp___do_toplevel_330 Bool)) Bool (=>
                                      (or (= temp___is_init_328 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_331)))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq6 a b) (oeq a b)) :pattern ((user_eq6 a b)) )))

;; contains__post__dispatch_axiom
  (assert true)

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(define-fun element__2 ((container us_rep)
  (key Int)) Int (get (model__ container) key))

(declare-fun element__2__function_guard (Int us_rep Int) Bool)

(declare-fun element__21 (Int us_rep Int) Int)

(declare-fun element__2__function_guard1 (Int Int us_rep Int) Bool)

(declare-sort element_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (element_type element_type) Bool)

(declare-fun dummy9 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant4 ((temp___expr_337 Int)
  (temp___is_init_334 Bool) (temp___skip_constant_335 Bool)
  (temp___do_toplevel_336 Bool)) Bool (=>
                                      (or (= temp___is_init_334 true)
                                      (<= 1 100)) (in_range6
                                      temp___expr_337)))

;; element__2__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int) (key Int))
  (forall ((container us_rep))
  (! (=> (dynamic_invariant3 key true true true) (dynamic_invariant4
     (element__21 attr__tag container key) true false true)) :pattern (
  (element__21 attr__tag container key)) ))))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(declare-fun is_empty1 (Int us_rep) Bool)

(declare-fun is_empty__function_guard1 (Bool Int us_rep) Bool)

(declare-fun r258s () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(define-fun in_range7 ((rec__find_map__index_maps__map__capacity1 Int)
  (rec__find_map__index_maps__map__modulus1 (_ BitVec 32))
  (a us_rep)) Bool (and
                   (= rec__find_map__index_maps__map__capacity1 (to_rep3
                                                                (rec__find_map__index_maps__map__capacity
                                                                (us_split_discrs1
                                                                a))))
                   (= rec__find_map__index_maps__map__modulus1 (to_rep2
                                                               (rec__find_map__index_maps__map__modulus
                                                               (us_split_discrs1
                                                               a))))))

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-fun find_map__index_maps__map__capacity__first__bit1 () Int)

(declare-fun find_map__index_maps__map__capacity__last__bit1 () Int)

(declare-fun find_map__index_maps__map__capacity__position1 () Int)

;; find_map__index_maps__map__capacity__first__bit_axiom
  (assert (<= 0 find_map__index_maps__map__capacity__first__bit1))

;; find_map__index_maps__map__capacity__last__bit_axiom
  (assert
  (< find_map__index_maps__map__capacity__first__bit1 find_map__index_maps__map__capacity__last__bit1))

;; find_map__index_maps__map__capacity__position_axiom
  (assert (<= 0 find_map__index_maps__map__capacity__position1))

(declare-fun find_map__index_maps__map__modulus__first__bit1 () Int)

(declare-fun find_map__index_maps__map__modulus__last__bit1 () Int)

(declare-fun find_map__index_maps__map__modulus__position1 () Int)

;; find_map__index_maps__map__modulus__first__bit_axiom
  (assert (<= 0 find_map__index_maps__map__modulus__first__bit1))

;; find_map__index_maps__map__modulus__last__bit_axiom
  (assert
  (< find_map__index_maps__map__modulus__first__bit1 find_map__index_maps__map__modulus__last__bit1))

;; find_map__index_maps__map__modulus__position_axiom
  (assert (<= 0 find_map__index_maps__map__modulus__position1))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-fun dummy10 () us_rep)

(declare-datatypes ()
((index_map__ref (mk_index_map__ref (index_map__content us_rep)))))
(define-fun index_map__ref___projection ((a index_map__ref)) us_rep (index_map__content
                                                                    a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq10 a b) (oeq a b)) :pattern ((user_eq10 a b)) )))

(define-fun dynamic_invariant5 ((temp___expr_575 us_rep)
  (temp___is_init_572 Bool) (temp___skip_constant_573 Bool)
  (temp___do_toplevel_574 Bool)) Bool (=>
                                      (not (= temp___skip_constant_573 true))
                                      (in_range7 100 r258s temp___expr_575)))

(define-fun default_initial_assumption ((temp___expr_578 us_rep)
  (temp___skip_top_level_579 Bool)) Bool (and
                                         (and
                                         (= (to_rep3
                                            (rec__find_map__index_maps__map__capacity
                                            (us_split_discrs1
                                            temp___expr_578))) 100)
                                         (= (to_rep2
                                            (rec__find_map__index_maps__map__modulus
                                            (us_split_discrs1
                                            temp___expr_578))) r258s))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_579 true))
                                         (= (is_empty temp___expr_578) true))))

(declare-fun a () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun e () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun last2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun m () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_invariant6 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_15)))

(declare-fun equivalent_keys (Int Int) Bool)

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

;; equivalent_keys__post_axiom
  (assert true)

;; equivalent_keys__def_axiom
  (assert
  (forall ((e1 Int) (e2 Int))
  (! (= (= (equivalent_keys e1 e2) true) (= e1 e2)) :pattern ((equivalent_keys
                                                              e1 e2)) )))

(define-fun dynamic_invariant7 ((temp___expr_168 (_ BitVec 32))
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)) Bool true)

(define-fun dynamic_invariant8 ((temp___expr_174 Int)
  (temp___is_init_171 Bool) (temp___skip_constant_172 Bool)
  (temp___do_toplevel_173 Bool)) Bool (=>
                                      (or (= temp___is_init_171 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_174)))

(declare-fun length1 (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun length2 (Int us_rep) Int)

(declare-fun length__function_guard1 (Int Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length1 container)))
     (and
     (<= result (to_rep3
                (rec__find_map__index_maps__map__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant8 result true false true))) :pattern ((length1
                                                             container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant8
  (length2 attr__tag container) true false
  true) :pattern ((length2 attr__tag container)) ))))

(declare-fun length3 (us_rep1) Int)

(declare-fun length__function_guard2 (Int us_rep1) Bool)

(declare-fun is_empty2 (us_rep1) Bool)

(declare-fun is_empty__function_guard2 (Bool us_rep1) Bool)

(define-fun default_initial_assumption1 ((temp___expr_379 us_rep1)
  (temp___skip_top_level_380 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_380 true))
                                         (and
                                         (= (is_empty2 temp___expr_379) true)
                                         (= (length3 temp___expr_379) 0))))

;; model____post_axiom
  (assert true)

(declare-fun oeq2 (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep1 us_rep1) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq2 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length1 container) 0)) :pattern (
  (is_empty container)) )))

;; is_empty__post__dispatch_axiom
  (assert true)

(declare-sort key_type1 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (key_type1 key_type1) Bool)

(declare-fun dummy11 () key_type1)

(declare-datatypes ()
((key_type__ref1 (mk_key_type__ref1 (key_type__content1 key_type1)))))
(define-fun key_type__ref_2__projection ((a1 key_type__ref1)) key_type1
  (key_type__content1 a1))

(define-fun dynamic_invariant9 ((temp___expr_366 Int)
  (temp___is_init_363 Bool) (temp___skip_constant_364 Bool)
  (temp___do_toplevel_365 Bool)) Bool (=>
                                      (or (= temp___is_init_363 true)
                                      (<= 0 2147483647)) (in_range8
                                      temp___expr_366)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key Int))
  (! (=> (dynamic_invariant9 key true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((k Int))
     (and (and (in_range8 k) (= (has_key container k) true))
     (= (equivalent_keys k key) true))) (= (has_key container key) true)))) :pattern (
  (has_key container key)) ))))

(declare-sort element_type1 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (element_type1 element_type1) Bool)

(declare-fun dummy12 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_2__projection ((a1 element_type__ref1)) element_type1
  (element_type__content1 a1))

(define-fun dynamic_invariant10 ((temp___expr_372 Int)
  (temp___is_init_369 Bool) (temp___skip_constant_370 Bool)
  (temp___do_toplevel_371 Bool)) Bool (=>
                                      (or (= temp___is_init_369 true)
                                      (<= 1 100)) (in_range9
                                      temp___expr_372)))

(declare-fun witness (us_rep1 Int) Int)

(declare-fun witness__function_guard (Int us_rep1 Int) Bool)

(declare-fun w_get (us_rep1 Int) Int)

(declare-fun w_get__function_guard (Int us_rep1 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant9 key true true true)
     (= (has_key container key) true))
     (let ((result (get container key)))
     (and
     (=> (= (of_int 1) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k Int))
     (=> (and (in_range8 k) (= (has_key container k) true))
     (= (= (equivalent_keys k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant10 result true false true)))) :pattern ((get container
                                                               key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep1)) (! (dynamic_invariant8 (length3 container)
  true false true) :pattern ((length3 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq2 left right) true)
     (and
     (forall ((key Int))
     (=> (and (in_range8 key) (= (has_key left key) true))
     (and (= (has_key right key) true) (= (get right key) (get left key)))))
     (forall ((key Int))
     (=> (and (in_range8 key) (= (has_key right key) true))
     (= (has_key left key) true))))) :pattern ((oeq2 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty2 container) true)
     (forall ((key Int))
     (not (and (in_range8 key) (= (has_key container key) true))))) :pattern (
  (is_empty2 container)) )))

(declare-fun has_witness (us_rep1 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep1 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant9 key true true true)
     (= (has_key container key) true))
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant8 result
     true false true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant8 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant10
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(declare-fun i () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Bool)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Bool)

(declare-fun o6 () Bool)

(declare-fun result () Bool)

(declare-fun result1 () Bool)

(declare-fun result2 () Bool)

;; H
  (assert
  (and
  (= 100 (to_rep3
         (rec__find_map__index_maps__map__capacity (us_split_discrs1 m))))
  (= r258s (to_rep2
           (rec__find_map__index_maps__map__modulus (us_split_discrs1 m))))))

;; H
  (assert (dynamic_invariant2 a true false true))

;; H
  (assert (in_range1 e))

;; H
  (assert (in_range2 last2))

;; H
  (assert (< 0 (length a)))

;; H
  (assert
  (and (= result1 (has_key (model__ m) e))
  (= (= result1 true) (= (has_key (model__ m) e) true))))

;; H
  (assert
  (=> (= result1 true)
  (and (= o4 (get (model__ m) e))
  (and (in_range6 o4) (= o4 (get (model__ m) e))))))

;; H
  (assert
  (=> (= result1 true)
  (= o5 (ite (<= o4 (to_rep1 (last (rt a)))) true false))))

;; H
  (assert
  (=> (= result1 true)
  (and (= o3 (get (model__ m) e))
  (and (in_range6 o3) (= o3 (get (model__ m) e))))))

;; H
  (assert
  (=> (= result1 true)
  (= o6 (ite (<= (to_rep1 (first (rt a))) o3) true false))))

;; H
  (assert (=> (= result1 true) (= result (ite (= o6 true) o5 false))))

;; H
  (assert (=> (not (= result1 true)) (= result (of_int 1))))

;; H
  (assert (= result true))

;; H
  (assert
  (and (= o (get (model__ m) e))
  (and (in_range6 o) (= o (get (model__ m) e)))))

;; H
  (assert (= o1 (- o 1)))

;; H
  (assert (= o2 (ite (<= i o1) true false)))

;; H
  (assert (= result2 (ite (<= (to_rep1 (first (rt a))) i) o2 false)))

;; H
  (assert (= result2 true))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (<= (to_rep1 (first (rt a))) i)))
(check-sat)
(exit)
