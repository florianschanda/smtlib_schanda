(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type change_mode

predicate in_range2(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : change_mode, change_mode -> bool

logic dummy2 : change_mode

type change_mode__ref = { change_mode__content : change_mode
}

function change_mode__ref___projection(a: change_mode__ref) : change_mode =
  (a).change_mode__content

logic to_rep2 : change_mode -> int

logic of_rep2 : int -> change_mode

axiom inversion_axiom2 :
  (forall x:change_mode [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:change_mode [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_discrs = { rec__counters__counter__mode : change_mode;
rec__counters__counter__ticks : natural
}

function us_split_discrs___projection(a: us_split_discrs) : change_mode =
  (a).rec__counters__counter__mode

function us_split_discrs___2__projection(a: us_split_discrs) : natural =
  (a).rec__counters__counter__ticks

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__counters__counter__c : integer;
rec__counters__counter__t : natural
}

function us_split_fields_C__projection(a: us_split_fields) : integer =
  (a).rec__counters__counter__c

function us_split_fields_T__projection(a: us_split_fields) : natural =
  (a).rec__counters__counter__t

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((((to_rep2(((a).us_split_discrs1).rec__counters__counter__mode) = to_rep2(((b).us_split_discrs1).rec__counters__counter__mode)) and
  (to_rep1(((a).us_split_discrs1).rec__counters__counter__ticks) = to_rep1(((b).us_split_discrs1).rec__counters__counter__ticks))) and
  (to_rep(((a).us_split_fields1).rec__counters__counter__c) = to_rep(((b).us_split_fields1).rec__counters__counter__c))) and
  (to_rep1(((a).us_split_fields1).rec__counters__counter__t) = to_rep1(((b).us_split_fields1).rec__counters__counter__t))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((((to_rep2(((a).us_split_discrs1).rec__counters__counter__mode) = to_rep2(((b).us_split_discrs1).rec__counters__counter__mode)) and
  (to_rep1(((a).us_split_discrs1).rec__counters__counter__ticks) = to_rep1(((b).us_split_discrs1).rec__counters__counter__ticks))) and
  (to_rep(((a).us_split_fields1).rec__counters__counter__c) = to_rep(((b).us_split_fields1).rec__counters__counter__c))) and
  (to_rep1(((a).us_split_fields1).rec__counters__counter__t) = to_rep1(((b).us_split_fields1).rec__counters__counter__t)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:change_mode. forall a1:natural. forall a2:integer.
  forall a3:natural. (0 <= object__size({ us_split_discrs1 = {
  rec__counters__counter__mode = a; rec__counters__counter__ticks = a1 };
  us_split_fields1 = { rec__counters__counter__c = a2;
  rec__counters__counter__t = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:change_mode. forall a1:natural. forall a2:integer.
  forall a3:natural. (0 <= object__alignment({ us_split_discrs1 = {
  rec__counters__counter__mode = a; rec__counters__counter__ticks = a1 };
  us_split_fields1 = { rec__counters__counter__c = a2;
  rec__counters__counter__t = a3 } })))

logic counters__counter__mode__first__bit : int

logic counters__counter__mode__last__bit : int

logic counters__counter__mode__position : int

axiom counters__counter__mode__first__bit_axiom :
  (0 <= counters__counter__mode__first__bit)

axiom counters__counter__mode__last__bit_axiom :
  (counters__counter__mode__first__bit <  counters__counter__mode__last__bit)

axiom counters__counter__mode__position_axiom :
  (0 <= counters__counter__mode__position)

logic counters__counter__ticks__first__bit : int

logic counters__counter__ticks__last__bit : int

logic counters__counter__ticks__position : int

axiom counters__counter__ticks__first__bit_axiom :
  (0 <= counters__counter__ticks__first__bit)

axiom counters__counter__ticks__last__bit_axiom :
  (counters__counter__ticks__first__bit <  counters__counter__ticks__last__bit)

axiom counters__counter__ticks__position_axiom :
  (0 <= counters__counter__ticks__position)

logic counters__counter__c__first__bit : int

logic counters__counter__c__last__bit : int

logic counters__counter__c__position : int

axiom counters__counter__c__first__bit_axiom :
  (0 <= counters__counter__c__first__bit)

axiom counters__counter__c__last__bit_axiom :
  (counters__counter__c__first__bit <  counters__counter__c__last__bit)

axiom counters__counter__c__position_axiom :
  (0 <= counters__counter__c__position)

logic counters__counter__t__first__bit : int

logic counters__counter__t__last__bit : int

logic counters__counter__t__position : int

axiom counters__counter__t__first__bit_axiom :
  (0 <= counters__counter__t__first__bit)

axiom counters__counter__t__last__bit_axiom :
  (counters__counter__t__first__bit <  counters__counter__t__last__bit)

axiom counters__counter__t__position_axiom :
  (0 <= counters__counter__t__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : change_mode

logic dummy4 : natural

logic dummy5 : integer

logic dummy6 : natural

type counter__ref = { counter__content : us_rep
}

function counter__ref___projection(a: counter__ref) : us_rep =
  (a).counter__content

logic c__split_discrs : change_mode

logic c__split_discrs1 : natural

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall c__split_fields:integer. forall c__split_fields1:natural.
  forall o:int. forall o1:natural. forall o2:integer. forall o3:natural.
  forall temp___168:change_mode. forall temp___1681:natural.
  forall temp___1682:integer. forall temp___1683:natural.
  forall result:integer. forall result1:natural.
  forall c__split_fields2:integer. forall c__split_fields3:natural.
  (((((((o = (to_rep1(c__split_fields1) + 1)) and
  in_range((to_rep1(c__split_fields1) + 1))) and (to_rep1(o1) = o)) and
  ((c__split_fields = o2) and (o1 = o3))) and
  (((c__split_discrs = temp___168) and (c__split_discrs1 = temp___1681)) and
  ((temp___1682 = o2) and (temp___1683 = o3)))) and
  ((((result = c__split_fields) and (result1 = c__split_fields1)) and
  ((temp___1682 = c__split_fields2) and
  (temp___1683 = c__split_fields3))) and ((c__split_discrs = temp___168) and
  (c__split_discrs1 = temp___1681)))) ->
  ((not (to_rep2(c__split_discrs) = 0)) ->
  ((not (to_rep2(c__split_discrs) = 1)) ->
  ((not (to_rep2(c__split_discrs) = 3)) -> ((to_rep2(c__split_discrs) = 4) ->
  ((not (to_rep1(c__split_discrs1) <= to_rep1(c__split_fields3))) ->
  in_range((to_rep(c__split_fields2) - 1)))))))))
