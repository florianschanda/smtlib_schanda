;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-fun to_rep1 (positive) Int)

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int positive))))))
(declare-fun slide ((Array Int positive) Int Int) (Array Int positive))

;; slide_eq
  (assert
  (forall ((a (Array Int positive)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int positive)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int positive) Int Int (Array Int positive) Int
  Int) (Array Int positive))

;; concat_def
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (positive Int) (Array Int positive))

;; singleton_def
  (assert
  (forall ((v positive))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int positive)) (a__first Int) (a__last Int)
  (b (Array Int positive)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int positive) Int Int (Array Int positive) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0)) (((mk___t (elts (Array Int positive))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int positive) (elts a))

(define-fun of_array ((a (Array Int positive)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int positive)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int positive)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int positive)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int positive))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int positive))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int positive))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes ((array_of_positives__ref 0))
(((mk_array_of_positives__ref (array_of_positives__content us_t)))))
(define-fun array_of_positives__ref___projection ((a array_of_positives__ref)) us_t
  (array_of_positives__content a))

(define-fun dynamic_invariant1 ((temp___expr_136 us_t)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (not (= temp___skip_constant_134 true))
                                      (dynamic_property (- 2147483648)
                                      2147483647 (first1 temp___expr_136)
                                      (last1 temp___expr_136))))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__p__search_result__found Bool)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) Bool (rec__p__search_result__found
                                                                    a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__p__search_result__content integer)))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) integer
  (rec__p__search_result__content a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun us_rep_3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun p__search_result__content__pred ((a us_rep)) Bool (= (to_int1
                                                                 (rec__p__search_result__found
                                                                 (us_split_discrs1
                                                                 a))) 1))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__p__search_result__found
                           (us_split_discrs1 a)) (rec__p__search_result__found
                                                 (us_split_discrs1 b)))
                        (=> (p__search_result__content__pred a)
                        (= (to_rep
                           (rec__p__search_result__content
                           (us_split_fields1 a))) (to_rep
                                                  (rec__p__search_result__content
                                                  (us_split_fields1 b))))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const p__search_result__found__first__bit Int)

(declare-const p__search_result__found__last__bit Int)

(declare-const p__search_result__found__position Int)

;; p__search_result__found__first__bit_axiom
  (assert (<= 0 p__search_result__found__first__bit))

;; p__search_result__found__last__bit_axiom
  (assert
  (< p__search_result__found__first__bit p__search_result__found__last__bit))

;; p__search_result__found__position_axiom
  (assert (<= 0 p__search_result__found__position))

(declare-const p__search_result__content__first__bit Int)

(declare-const p__search_result__content__last__bit Int)

(declare-const p__search_result__content__position Int)

;; p__search_result__content__first__bit_axiom
  (assert (<= 0 p__search_result__content__first__bit))

;; p__search_result__content__last__bit_axiom
  (assert
  (< p__search_result__content__first__bit p__search_result__content__last__bit))

;; p__search_result__content__position_axiom
  (assert (<= 0 p__search_result__content__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((search_result__ref 0))
(((mk_search_result__ref (search_result__content us_rep)))))
(define-fun search_result__ref___projection ((a search_result__ref)) us_rep
  (search_result__content a))

(define-fun default_initial_assumption ((temp___expr_144 us_rep)
  (temp___skip_top_level_145 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_144) false)
                                         (= (rec__p__search_result__found
                                            (us_split_discrs1
                                            temp___expr_144)) (of_int 0))))

(declare-const a us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const result____attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const r17b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun in_range3 ((rec__p__search_result__found1 Bool)
  (a1 us_rep)) Bool (= rec__p__search_result__found1 (rec__p__search_result__found
                                                     (us_split_discrs1 a1))))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a1 us_rep)) (<= 0 (object__size2 a1))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a1 us_rep)) (<= 0 (object__alignment2 a1))))

(declare-const p__search_result__found__first__bit1 Int)

(declare-const p__search_result__found__last__bit1 Int)

(declare-const p__search_result__found__position1 Int)

;; p__search_result__found__first__bit_axiom
  (assert (<= 0 p__search_result__found__first__bit1))

;; p__search_result__found__last__bit_axiom
  (assert
  (< p__search_result__found__first__bit1 p__search_result__found__last__bit1))

;; p__search_result__found__position_axiom
  (assert (<= 0 p__search_result__found__position1))

(declare-const p__search_result__content__first__bit1 Int)

(declare-const p__search_result__content__last__bit1 Int)

(declare-const p__search_result__content__position1 Int)

;; p__search_result__content__first__bit_axiom
  (assert (<= 0 p__search_result__content__first__bit1))

;; p__search_result__content__last__bit_axiom
  (assert
  (< p__search_result__content__first__bit1 p__search_result__content__last__bit1))

;; p__search_result__content__position_axiom
  (assert (<= 0 p__search_result__content__position1))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((t18b__ref 0)) (((mk_t18b__ref (t18b__content us_rep)))))
(define-fun t18b__ref___projection ((a1 t18b__ref)) us_rep (t18b__content a1))

(declare-const r21b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun in_range4 ((rec__p__search_result__found1 Bool)
  (a1 us_rep)) Bool (= rec__p__search_result__found1 (rec__p__search_result__found
                                                     (us_split_discrs1 a1))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a1 us_rep)) (<= 0 (object__size3 a1))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a1 us_rep)) (<= 0 (object__alignment3 a1))))

(declare-const p__search_result__found__first__bit2 Int)

(declare-const p__search_result__found__last__bit2 Int)

(declare-const p__search_result__found__position2 Int)

;; p__search_result__found__first__bit_axiom
  (assert (<= 0 p__search_result__found__first__bit2))

;; p__search_result__found__last__bit_axiom
  (assert
  (< p__search_result__found__first__bit2 p__search_result__found__last__bit2))

;; p__search_result__found__position_axiom
  (assert (<= 0 p__search_result__found__position2))

(declare-const p__search_result__content__first__bit2 Int)

(declare-const p__search_result__content__last__bit2 Int)

(declare-const p__search_result__content__position2 Int)

;; p__search_result__content__first__bit_axiom
  (assert (<= 0 p__search_result__content__first__bit2))

;; p__search_result__content__last__bit_axiom
  (assert
  (< p__search_result__content__first__bit2 p__search_result__content__last__bit2))

;; p__search_result__content__position_axiom
  (assert (<= 0 p__search_result__content__position2))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((t22b__ref 0)) (((mk_t22b__ref (t22b__content us_rep)))))
(define-fun t22b__ref___projection ((a1 t22b__ref)) us_rep (t22b__content a1))

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const i Int)

(declare-const o integer)

(declare-const o1 integer)

(declare-const temp___249 Bool)

(declare-const temp___2491 integer)

(declare-const temp___2492 Bool)

(declare-const result Int)

(declare-const i1 Int)

(declare-const result____split_discrs Bool)

(declare-const i2 Int)

;; H
  (assert (dynamic_invariant1 a true false true))

;; H
  (assert (in_range2 e))

;; H
  (assert (not (= result____attr__constrained true)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i1 (to_rep (first (rt a)))))

;; H
  (assert (<= (to_rep (first (rt a))) i1))

;; H
  (assert (<= i1 (to_rep (last (rt a)))))

;; H
  (assert
  (and (<= (to_rep (first (rt a))) i2) (<= i2 (to_rep (last (rt a))))))

;; H
  (assert (= (to_rep1 (select (elts a) i2)) e))

;; H
  (assert (= result____split_discrs r17b))

;; H
  (assert (= (to_rep o) i2))

;; H
  (assert (= o o1))

;; H
  (assert (= (of_int 1) temp___249))

;; H
  (assert (= temp___2491 o1))

;; H
  (assert (= true temp___2492))

;; H
  (assert (= result____attr__constrained true))

(assert
;; WP_parameter_def
 ;; File "p.adb", line 28, characters 0-0
  (not (= temp___249 result____split_discrs)))
(check-sat)
(exit)
