;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort my_int 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (my_int my_int) Bool)

(declare-fun dummy2 () my_int)

(declare-datatypes ()
((my_int__ref (mk_my_int__ref (my_int__content my_int)))))
(define-fun my_int__ref___projection ((a my_int__ref)) my_int (my_int__content
                                                              a))

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 10000)) (in_range3
                                      temp___expr_136)))

(declare-fun add (Int Int) Int)

(declare-fun add__function_guard (Int Int Int) Bool)

;; add__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (! (=>
     (and (dynamic_invariant x true true true) (dynamic_invariant y true true
     true))
     (let ((result (add x y)))
     (and
     (ite (< (+ x y) 10000) (= result (+ x y))
     (=> (<= 10000 (+ x y)) (= result 10000))) (dynamic_invariant result true
     false true)))) :pattern ((add x y)) )))

(declare-fun to_rep (my_int) Int)

(declare-fun of_rep (Int) my_int)

;; inversion_axiom
  (assert
  (forall ((x my_int)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x my_int)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__pricing__item__price my_int)(rec__pricing__item__number my_int)))))
(define-fun us_split_fields_Price__projection ((a us_split_fields)) my_int
  (rec__pricing__item__price a))

(define-fun us_split_fields_Number__projection ((a us_split_fields)) my_int
  (rec__pricing__item__number a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__pricing__item__price (us_split_fields1 a)))
                        (to_rep
                        (rec__pricing__item__price (us_split_fields1 b))))
                        (= (to_rep
                           (rec__pricing__item__number (us_split_fields1 a)))
                        (to_rep
                        (rec__pricing__item__number (us_split_fields1 b)))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun pricing__item__price__first__bit () Int)

(declare-fun pricing__item__price__last__bit () Int)

(declare-fun pricing__item__price__position () Int)

;; pricing__item__price__first__bit_axiom
  (assert (<= 0 pricing__item__price__first__bit))

;; pricing__item__price__last__bit_axiom
  (assert
  (< pricing__item__price__first__bit pricing__item__price__last__bit))

;; pricing__item__price__position_axiom
  (assert (<= 0 pricing__item__price__position))

(declare-fun pricing__item__number__first__bit () Int)

(declare-fun pricing__item__number__last__bit () Int)

(declare-fun pricing__item__number__position () Int)

;; pricing__item__number__first__bit_axiom
  (assert (<= 0 pricing__item__number__first__bit))

;; pricing__item__number__last__bit_axiom
  (assert
  (< pricing__item__number__first__bit pricing__item__number__last__bit))

;; pricing__item__number__position_axiom
  (assert (<= 0 pricing__item__number__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun dummy3 () us_rep)

(declare-datatypes () ((item__ref (mk_item__ref (item__content us_rep)))))
(define-fun item__ref___projection ((a item__ref)) us_rep (item__content a))

(declare-fun price_of_item (us_rep) Int)

(declare-fun price_of_item__function_guard (Int us_rep) Bool)

(declare-fun mult (Int Int) Int)

(declare-fun mult__function_guard (Int Int Int) Bool)

;; price_of_item__post_axiom
  (assert
  (forall ((it us_rep))
  (! (let ((result (price_of_item it)))
     (and
     (= result (mult
               (to_rep (rec__pricing__item__price (us_split_fields1 it)))
               (to_rep (rec__pricing__item__number (us_split_fields1 it)))))
     (dynamic_invariant result true false true))) :pattern ((price_of_item
                                                            it)) )))

;; price_of_item__def_axiom
  (assert
  (forall ((it us_rep))
  (! (= (price_of_item it) (mult
                           (to_rep
                           (rec__pricing__item__price (us_split_fields1 it)))
                           (to_rep
                           (rec__pricing__item__number (us_split_fields1 it))))) :pattern (
  (price_of_item it)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int us_rep))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int us_rep) (elts a))

(define-fun of_array ((a (Array Int us_rep)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-fun dummy4 () us_t)

(declare-datatypes ()
((basket__ref (mk_basket__ref (basket__content us_t)))))
(define-fun basket__ref___projection ((a basket__ref)) us_t (basket__content
                                                            a))

(define-fun dynamic_invariant1 ((temp___expr_150 us_t)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=>
                                      (not (= temp___skip_constant_148 true))
                                      (dynamic_property 1 2147483647
                                      (first1 temp___expr_150)
                                      (last1 temp___expr_150))))

(declare-fun bk () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-fun dummy5 () integer)

(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content integer)))))
(define-fun t3b__ref___projection ((a t3b__ref)) integer (t3b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; mult__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (! (=>
     (and (dynamic_invariant x true true true) (dynamic_invariant y true true
     true))
     (let ((result (mult x y)))
     (and
     (ite (< (* x y) 10000) (= result (* x y))
     (=> (<= 10000 (* x y)) (= result 10000))) (dynamic_invariant result true
     false true)))) :pattern ((mult x y)) )))

(declare-fun total () Int)

(declare-fun it () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun result () Int)

(declare-fun total1 () Int)

(declare-fun result1 () Int)

(declare-fun it1 () Int)

(declare-fun total2 () Int)

(declare-fun it2 () Int)

(declare-fun result2 () Int)

(declare-fun total3 () Int)

(declare-fun result3 () Int)

(declare-fun it3 () Int)

;; H
  (assert (dynamic_invariant1 bk true false true))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref total)))

;; H
  (assert (= total1 0))

;; H
  (assert (in_range3 total1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref it)))

;; H
  (assert (= it1 (to_rep1 (first (rt bk)))))

;; H
  (assert (<= (to_rep1 (first (rt bk))) it1))

;; H
  (assert (<= it1 (to_rep1 (last (rt bk)))))

;; H
  (assert
  (forall ((k Int))
  (=> (and (<= (to_rep1 (first (rt bk))) k) (<= k (- it2 1)))
  (<= (price_of_item (select (elts bk) k)) total2))))

;; H
  (assert
  (and
  (and (=> (<= 0 10000) (in_range3 total2))
  (=> (<= (to_rep1 (first (rt bk))) (to_rep1 (last (rt bk))))
  (dynamic_property1 (to_rep1 (first (rt bk))) (to_rep1 (last (rt bk)))
  it2)))
  (and (<= (to_rep1 (first (rt bk))) it2) (<= it2 (to_rep1 (last (rt bk)))))))

;; H
  (assert
  (and (= o (price_of_item (select (elts bk) it2)))
  (and (in_range3 o)
  (= o (mult
       (to_rep
       (rec__pricing__item__price (us_split_fields1 (select (elts bk) it2))))
       (to_rep
       (rec__pricing__item__number (us_split_fields1 (select (elts bk) it2)))))))))

;; H
  (assert
  (and (= o1 (add total2 o))
  (and (in_range3 o1)
  (ite (= (< (+ total2 o) 10000) true) (= o1 (+ total2 o))
  (=> (= (>= (+ total2 o) 10000) true) (= o1 10000))))))

;; H
  (assert (= total2 result2))

;; H
  (assert (= total3 o1))

;; H
  (assert (not (= it2 (to_rep1 (last (rt bk))))))

;; H
  (assert (= result3 it2))

;; H
  (assert (= it3 (+ it2 1)))

(declare-fun k () Int)

;; H
  (assert (<= (to_rep1 (first (rt bk))) k))

;; H
  (assert (<= k (- it3 1)))

(assert
;; WP_parameter_def
 ;; File "sat.ads", line 12, characters 0-0
  (not (<= (price_of_item (select (elts bk) k)) total3)))
(check-sat)
(exit)
