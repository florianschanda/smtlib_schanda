;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort value 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (value value) Bool)

(declare-const dummy5 value)

(declare-datatypes ((value__ref 0))
(((mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))

(declare-fun to_rep3 (value) Int)

(declare-fun of_rep3 (Int) value)

;; inversion_axiom
  (assert
  (forall ((x value))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x value)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int value))))))
(declare-fun slide1 ((Array Int value) Int Int) (Array Int value))

;; slide_eq
  (assert
  (forall ((a (Array Int value)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int value)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int value) Int Int (Array Int value) Int
  Int) (Array Int value))

;; concat_def
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (value Int) (Array Int value))

;; singleton_def
  (assert
  (forall ((v value))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int value)) (a__first Int) (a__last Int)
  (b (Array Int value)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare1 ((Array Int value) Int Int (Array Int value) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep3 (select b (+ i 1))) (to_rep3 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes ((t3s__ref 0)) (((mk_t3s__ref (t3s__content integer)))))
(define-fun t3s__ref___projection ((a t3s__ref)) integer (t3s__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int value))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int value) (elts1 a))

(define-fun of_array1 ((a (Array Int value)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int value)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int value)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int value)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int value))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq7 (us_t1 us_t1) Bool)

(declare-const dummy7 us_t1)

(declare-datatypes ((t4s__ref 0)) (((mk_t4s__ref (t4s__content us_t1)))))
(define-fun t4s__ref___projection ((a t4s__ref)) us_t1 (t4s__content a))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__simple_unc_arrays__table__last natural)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) natural
  (rec__simple_unc_arrays__table__last a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__simple_unc_arrays__table__v us_t1)))))
(define-fun us_split_fields_V__projection ((a us_split_fields)) us_t1
  (rec__simple_unc_arrays__table__v a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__simple_unc_arrays__table__last
                           (us_split_discrs1 a))) (to_rep2
                                                  (rec__simple_unc_arrays__table__last
                                                  (us_split_discrs1 b))))
                        (= (bool_eq3
                           (rec__simple_unc_arrays__table__v
                           (us_split_fields1 a))
                           (rec__simple_unc_arrays__table__v
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const simple_unc_arrays__table__last__first__bit Int)

(declare-const simple_unc_arrays__table__last__last__bit Int)

(declare-const simple_unc_arrays__table__last__position Int)

;; simple_unc_arrays__table__last__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__last__first__bit))

;; simple_unc_arrays__table__last__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__last__first__bit simple_unc_arrays__table__last__last__bit))

;; simple_unc_arrays__table__last__position_axiom
  (assert (<= 0 simple_unc_arrays__table__last__position))

(declare-const simple_unc_arrays__table__v__first__bit Int)

(declare-const simple_unc_arrays__table__v__last__bit Int)

(declare-const simple_unc_arrays__table__v__position Int)

;; simple_unc_arrays__table__v__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__v__first__bit))

;; simple_unc_arrays__table__v__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__v__first__bit simple_unc_arrays__table__v__last__bit))

;; simple_unc_arrays__table__v__position_axiom
  (assert (<= 0 simple_unc_arrays__table__v__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((table__ref 0))
(((mk_table__ref (table__content us_rep)))))
(define-fun table__ref___projection ((a table__ref)) us_rep (table__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_150 us_rep)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (let ((temp___151 (rec__simple_unc_arrays__table__last
                                                        (us_split_discrs1
                                                        temp___expr_150))))
                                      (and (dynamic_property2 1
                                      (to_rep2 temp___151)
                                      (first3
                                      (rec__simple_unc_arrays__table__v
                                      (us_split_fields1 temp___expr_150)))
                                      (last3
                                      (rec__simple_unc_arrays__table__v
                                      (us_split_fields1 temp___expr_150))))
                                      (and
                                      (= (first3
                                         (rec__simple_unc_arrays__table__v
                                         (us_split_fields1 temp___expr_150))) 1)
                                      (= (last3
                                         (rec__simple_unc_arrays__table__v
                                         (us_split_fields1 temp___expr_150)))
                                      (to_rep2 temp___151))))))

(declare-fun same_range (us_rep us_rep) Bool)

(declare-fun same_range__function_guard (Bool us_rep us_rep) Bool)

(declare-fun add (us_rep us_rep) us_rep)

(declare-fun add__function_guard (us_rep us_rep us_rep) Bool)

;; add__post_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (=>
     (and
     (and (dynamic_invariant a true true true) (dynamic_invariant b true true
     true)) (= (same_range a b) true))
     (let ((result (add a b)))
     (and
     (and (= (same_range result a) true)
     (forall ((j Int))
     (=>
     (and (<= 1 j)
     (<= j (to_rep2
           (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
     (= (to_rep3
        (let ((temp___170 (rec__simple_unc_arrays__table__v
                          (us_split_fields1 result))))
        (select (to_array1 temp___170) j))) (+ (to_rep3
                                               (let ((temp___171 (rec__simple_unc_arrays__table__v
                                                                 (us_split_fields1
                                                                 a))))
                                               (select (to_array1 temp___171) j)))
     (to_rep3
     (let ((temp___172 (rec__simple_unc_arrays__table__v
                       (us_split_fields1 b))))
     (select (to_array1 temp___172) j)))))))) (dynamic_invariant result true
     false true)))) :pattern ((add a b)) )))

(define-fun dynamic_invariant1 ((temp___expr_139 Int)
  (temp___is_init_136 Bool) (temp___skip_constant_137 Bool)
  (temp___do_toplevel_138 Bool)) Bool (=>
                                      (or (= temp___is_init_136 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range5 temp___expr_139)))

(declare-fun empty (us_rep) Bool)

(declare-fun empty__function_guard (Bool us_rep) Bool)

(declare-fun min (us_rep) Int)

(declare-fun min__function_guard (Int us_rep) Bool)

;; min__post_axiom
  (assert
  (forall ((a us_rep))
  (! (=> (and (dynamic_invariant a true true true) (not (= (empty a) true)))
     (let ((result (min a)))
     (and
     (and
     (forall ((j Int))
     (=>
     (and (<= 1 j)
     (<= j (to_rep2
           (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
     (<= result (to_rep3
                (let ((temp___194 (rec__simple_unc_arrays__table__v
                                  (us_split_fields1 a))))
                (select (to_array1 temp___194) j))))))
     (exists ((j Int))
     (and
     (and (<= 1 j)
     (<= j (to_rep2
           (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
     (= result (to_rep3
               (let ((temp___193 (rec__simple_unc_arrays__table__v
                                 (us_split_fields1 a))))
               (select (to_array1 temp___193) j)))))))
     (dynamic_invariant1 result true false true)))) :pattern ((min a)) )))

(declare-fun max (us_rep) Int)

(declare-fun max__function_guard (Int us_rep) Bool)

;; max__post_axiom
  (assert
  (forall ((a us_rep))
  (! (=> (and (dynamic_invariant a true true true) (not (= (empty a) true)))
     (let ((result (max a)))
     (and
     (and
     (forall ((j Int))
     (=>
     (and (<= 1 j)
     (<= j (to_rep2
           (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
     (<= (to_rep3
         (let ((temp___202 (rec__simple_unc_arrays__table__v
                           (us_split_fields1 a))))
         (select (to_array1 temp___202) j))) result)))
     (exists ((j Int))
     (and
     (and (<= 1 j)
     (<= j (to_rep2
           (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
     (= result (to_rep3
               (let ((temp___201 (rec__simple_unc_arrays__table__v
                                 (us_split_fields1 a))))
               (select (to_array1 temp___201) j)))))))
     (dynamic_invariant1 result true false true)))) :pattern ((max a)) )))

(declare-fun average (us_rep) Int)

(declare-fun average__function_guard (Int us_rep) Bool)

;; average__post_axiom
  (assert
  (forall ((a us_rep))
  (! (=> (and (dynamic_invariant a true true true) (not (= (empty a) true)))
     (let ((result (average a)))
     (and (and (<= (min a) result) (<= result (max a))) (dynamic_invariant1
     result true false true)))) :pattern ((average a)) )))

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(declare-fun not_in (us_rep Int Int Int) Bool)

(declare-fun not_in__function_guard (Bool us_rep Int Int Int) Bool)

(declare-fun search (us_rep Int) Int)

(declare-fun search__function_guard (Int us_rep Int) Bool)

;; search__post_axiom
  (assert
  (forall ((a us_rep))
  (forall ((v Int))
  (! (=>
     (and (dynamic_invariant a true true true) (dynamic_invariant1 v true
     true true))
     (let ((result (search a v)))
     (and
     (or
     (and (= result 0)
     (= (not_in a v 1
        (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))) true))
     (and
     (= (to_rep3
        (let ((temp___218 (rec__simple_unc_arrays__table__v
                          (us_split_fields1 a))))
        (select (to_array1 temp___218) result))) v)
     (= (not_in a v 1 (- result 1)) true))) (dynamic_invariant2 result true
     false true)))) :pattern ((search a v)) ))))

(declare-fun bubble_sort (us_rep) us_rep)

(declare-fun bubble_sort__function_guard (us_rep us_rep) Bool)

(declare-sort tT2bP1 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (tT2bP1 tT2bP1) Bool)

(declare-const dummy9 tT2bP1)

(declare-datatypes ((tT2bP1__ref 0))
(((mk_tT2bP1__ref (tT2bP1__content tT2bP1)))))
(define-fun tT2bP1__ref___projection ((a tT2bP1__ref)) tT2bP1 (tT2bP1__content
                                                              a))

(declare-const dummy10 (Array Int value))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int value)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int value)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int value)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int value))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq10 ((Array Int value) (Array Int value)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__simple_unc_arrays__table__v1 (Array Int value))))))
(define-fun us_split_fields_V2__projection ((a us_split_fields2)) (Array Int value)
  (rec__simple_unc_arrays__table__v1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_discrs (us_split_discrs2
                                                               a))

(define-fun us_rep_4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a)
                                         (mk___split_fields
                                         (of_array1
                                         (rec__simple_unc_arrays__table__v1
                                         (us_split_fields3 a)) 1 10))))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r)
                                         (mk___split_fields1
                                         (let ((temp___133 (rec__simple_unc_arrays__table__v
                                                           (us_split_fields1
                                                           r))))
                                         (to_array1 temp___133)))))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep2
                            (rec__simple_unc_arrays__table__last
                            (us_split_discrs2 a))) (to_rep2
                                                   (rec__simple_unc_arrays__table__last
                                                   (us_split_discrs2 b))))
                         (= (bool_eq2
                            (rec__simple_unc_arrays__table__v1
                            (us_split_fields3 a)) 1 10
                            (rec__simple_unc_arrays__table__v1
                            (us_split_fields3 b)) 1 10) true))
                    true false))

(define-fun in_range7 ((rec__simple_unc_arrays__table__last1 Int)
  (a us_rep)) Bool (= rec__simple_unc_arrays__table__last1 (to_rep2
                                                           (rec__simple_unc_arrays__table__last
                                                           (us_split_discrs1
                                                           a)))))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep1) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))

(declare-const simple_unc_arrays__table__last__first__bit1 Int)

(declare-const simple_unc_arrays__table__last__last__bit1 Int)

(declare-const simple_unc_arrays__table__last__position1 Int)

;; simple_unc_arrays__table__last__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__last__first__bit1))

;; simple_unc_arrays__table__last__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__last__first__bit1 simple_unc_arrays__table__last__last__bit1))

;; simple_unc_arrays__table__last__position_axiom
  (assert (<= 0 simple_unc_arrays__table__last__position1))

(declare-const simple_unc_arrays__table__v__first__bit1 Int)

(declare-const simple_unc_arrays__table__v__last__bit1 Int)

(declare-const simple_unc_arrays__table__v__position1 Int)

;; simple_unc_arrays__table__v__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__v__first__bit1))

;; simple_unc_arrays__table__v__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__v__first__bit1 simple_unc_arrays__table__v__last__bit1))

;; simple_unc_arrays__table__v__position_axiom
  (assert (<= 0 simple_unc_arrays__table__v__position1))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-const dummy11 us_rep1)

(declare-datatypes ((t1b__ref 0)) (((mk_t1b__ref (t1b__content us_rep1)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep1 (t1b__content a))

(declare-const t1__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort tT6bP1 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (tT6bP1 tT6bP1) Bool)

(declare-const dummy12 tT6bP1)

(declare-datatypes ((tT6bP1__ref 0))
(((mk_tT6bP1__ref (tT6bP1__content tT6bP1)))))
(define-fun tT6bP1__ref___projection ((a tT6bP1__ref)) tT6bP1 (tT6bP1__content
                                                              a))

(declare-const dummy13 (Array Int value))

(declare-const value__size5 Int)

(declare-fun object__size5 ((Array Int value)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array Int value)) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 ((Array Int value)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int value))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__alignment5 a))))

(declare-fun user_eq13 ((Array Int value) (Array Int value)) Bool)

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2 (rec__simple_unc_arrays__table__v2 (Array Int value))))))
(define-fun us_split_fields_V3__projection ((a us_split_fields4)) (Array Int value)
  (rec__simple_unc_arrays__table__v2 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2
  (us_split_discrs3 us_split_discrs)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep_5__projection ((a us_rep2)) us_split_discrs (us_split_discrs3
                                                               a))

(define-fun us_rep_6__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (us_split_discrs3 a)
                                          (mk___split_fields
                                          (of_array1
                                          (rec__simple_unc_arrays__table__v2
                                          (us_split_fields5 a)) 1 10))))

(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (us_split_discrs1 r)
                                          (mk___split_fields2
                                          (let ((temp___134 (rec__simple_unc_arrays__table__v
                                                            (us_split_fields1
                                                            r))))
                                          (to_array1 temp___134)))))

(define-fun bool_eq6 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep2
                            (rec__simple_unc_arrays__table__last
                            (us_split_discrs3 a))) (to_rep2
                                                   (rec__simple_unc_arrays__table__last
                                                   (us_split_discrs3 b))))
                         (= (bool_eq2
                            (rec__simple_unc_arrays__table__v2
                            (us_split_fields5 a)) 1 10
                            (rec__simple_unc_arrays__table__v2
                            (us_split_fields5 b)) 1 10) true))
                    true false))

(define-fun in_range9 ((rec__simple_unc_arrays__table__last1 Int)
  (a us_rep)) Bool (= rec__simple_unc_arrays__table__last1 (to_rep2
                                                           (rec__simple_unc_arrays__table__last
                                                           (us_split_discrs1
                                                           a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep2) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))

(declare-const simple_unc_arrays__table__last__first__bit2 Int)

(declare-const simple_unc_arrays__table__last__last__bit2 Int)

(declare-const simple_unc_arrays__table__last__position2 Int)

;; simple_unc_arrays__table__last__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__last__first__bit2))

;; simple_unc_arrays__table__last__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__last__first__bit2 simple_unc_arrays__table__last__last__bit2))

;; simple_unc_arrays__table__last__position_axiom
  (assert (<= 0 simple_unc_arrays__table__last__position2))

(declare-const simple_unc_arrays__table__v__first__bit2 Int)

(declare-const simple_unc_arrays__table__v__last__bit2 Int)

(declare-const simple_unc_arrays__table__v__position2 Int)

;; simple_unc_arrays__table__v__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__v__first__bit2))

;; simple_unc_arrays__table__v__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__v__first__bit2 simple_unc_arrays__table__v__last__bit2))

;; simple_unc_arrays__table__v__position_axiom
  (assert (<= 0 simple_unc_arrays__table__v__position2))

(declare-fun user_eq14 (us_rep2 us_rep2) Bool)

(declare-const dummy14 us_rep2)

(declare-datatypes ((t5b__ref 0)) (((mk_t5b__ref (t5b__content us_rep2)))))
(define-fun t5b__ref___projection ((a t5b__ref)) us_rep2 (t5b__content a))

(declare-const t2__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort tT9bP1 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq15 (tT9bP1 tT9bP1) Bool)

(declare-const dummy15 tT9bP1)

(declare-datatypes ((tT9bP1__ref 0))
(((mk_tT9bP1__ref (tT9bP1__content tT9bP1)))))
(define-fun tT9bP1__ref___projection ((a tT9bP1__ref)) tT9bP1 (tT9bP1__content
                                                              a))

(declare-const dummy16 (Array Int value))

(declare-const value__size7 Int)

(declare-fun object__size7 ((Array Int value)) Int)

(declare-const value__component__size4 Int)

(declare-fun object__component__size4 ((Array Int value)) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 ((Array Int value)) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__size7 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size4))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int value))) (<= 0 (object__component__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a (Array Int value))) (<= 0 (object__alignment7 a))))

(declare-fun user_eq16 ((Array Int value) (Array Int value)) Bool)

(declare-datatypes ((us_split_fields6 0))
(((mk___split_fields3 (rec__simple_unc_arrays__table__v3 (Array Int value))))))
(define-fun us_split_fields_V4__projection ((a us_split_fields6)) (Array Int value)
  (rec__simple_unc_arrays__table__v3 a))

(declare-datatypes ((us_split_fields__ref3 0))
(((mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((mk___rep3
  (us_split_discrs4 us_split_discrs)(us_split_fields7 us_split_fields6)))))
(define-fun us_rep_7__projection ((a us_rep3)) us_split_discrs (us_split_discrs4
                                                               a))

(define-fun us_rep_8__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                a))

(define-fun to_base2 ((a us_rep3)) us_rep (mk___rep (us_split_discrs4 a)
                                          (mk___split_fields
                                          (of_array1
                                          (rec__simple_unc_arrays__table__v3
                                          (us_split_fields7 a)) 1 10))))

(define-fun of_base2 ((r us_rep)) us_rep3 (mk___rep3 (us_split_discrs1 r)
                                          (mk___split_fields3
                                          (let ((temp___135 (rec__simple_unc_arrays__table__v
                                                            (us_split_fields1
                                                            r))))
                                          (to_array1 temp___135)))))

(define-fun bool_eq7 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep2
                            (rec__simple_unc_arrays__table__last
                            (us_split_discrs4 a))) (to_rep2
                                                   (rec__simple_unc_arrays__table__last
                                                   (us_split_discrs4 b))))
                         (= (bool_eq2
                            (rec__simple_unc_arrays__table__v3
                            (us_split_fields7 a)) 1 10
                            (rec__simple_unc_arrays__table__v3
                            (us_split_fields7 b)) 1 10) true))
                    true false))

(define-fun in_range11 ((rec__simple_unc_arrays__table__last1 Int)
  (a us_rep)) Bool (= rec__simple_unc_arrays__table__last1 (to_rep2
                                                           (rec__simple_unc_arrays__table__last
                                                           (us_split_discrs1
                                                           a)))))

(declare-const value__size8 Int)

(declare-fun object__size8 (us_rep3) Int)

(declare-const value__alignment8 Int)

(declare-fun object__alignment8 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment8 a))))

(declare-const simple_unc_arrays__table__last__first__bit3 Int)

(declare-const simple_unc_arrays__table__last__last__bit3 Int)

(declare-const simple_unc_arrays__table__last__position3 Int)

;; simple_unc_arrays__table__last__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__last__first__bit3))

;; simple_unc_arrays__table__last__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__last__first__bit3 simple_unc_arrays__table__last__last__bit3))

;; simple_unc_arrays__table__last__position_axiom
  (assert (<= 0 simple_unc_arrays__table__last__position3))

(declare-const simple_unc_arrays__table__v__first__bit3 Int)

(declare-const simple_unc_arrays__table__v__last__bit3 Int)

(declare-const simple_unc_arrays__table__v__position3 Int)

;; simple_unc_arrays__table__v__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__v__first__bit3))

;; simple_unc_arrays__table__v__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__v__first__bit3 simple_unc_arrays__table__v__last__bit3))

;; simple_unc_arrays__table__v__position_axiom
  (assert (<= 0 simple_unc_arrays__table__v__position3))

(declare-fun user_eq17 (us_rep3 us_rep3) Bool)

(declare-const dummy17 us_rep3)

(declare-datatypes ((tt3S__ref 0))
(((mk_tt3S__ref (tt3S__content us_rep3)))))
(define-fun tt3S__ref___projection ((a tt3S__ref)) us_rep3 (tt3S__content a))

(define-fun dynamic_invariant3 ((temp___expr_283 us_rep3)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)) Bool (=>
                                      (not (= temp___skip_constant_281 true))
                                      (in_range11 10
                                      (to_base2 temp___expr_283))))

(define-fun default_initial_assumption ((temp___expr_286 us_rep3)
  (temp___skip_top_level_287 Bool)) Bool (= (to_rep2
                                            (rec__simple_unc_arrays__table__last
                                            (us_split_discrs4
                                            temp___expr_286))) 10))

(declare-const t3__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun temp___292 (Int Int Int Int Int Int Int Int Int
  Int) (Array Int value))

;; def_axiom
  (assert
  (forall ((temp___294 Int) (temp___295 Int) (temp___296 Int)
  (temp___297 Int) (temp___298 Int) (temp___299 Int) (temp___300 Int)
  (temp___301 Int) (temp___302 Int) (temp___303 Int))
  (let ((temp___293 (temp___292 temp___294 temp___295 temp___296 temp___297
                    temp___298 temp___299 temp___300 temp___301 temp___302
                    temp___303)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___293 1) (of_rep3 temp___294))
  (= (select temp___293 2) (of_rep3 temp___295)))
  (= (select temp___293 3) (of_rep3 temp___296)))
  (= (select temp___293 4) (of_rep3 temp___297)))
  (= (select temp___293 5) (of_rep3 temp___298)))
  (= (select temp___293 6) (of_rep3 temp___299)))
  (= (select temp___293 7) (of_rep3 temp___300)))
  (= (select temp___293 8) (of_rep3 temp___301)))
  (= (select temp___293 9) (of_rep3 temp___302)))
  (= (select temp___293 10) (of_rep3 temp___303))))))

(declare-fun temp___305 (Int Int Int Int Int Int Int Int Int
  Int) (Array Int value))

;; def_axiom
  (assert
  (forall ((temp___307 Int) (temp___308 Int) (temp___309 Int)
  (temp___310 Int) (temp___311 Int) (temp___312 Int) (temp___313 Int)
  (temp___314 Int) (temp___315 Int) (temp___316 Int))
  (let ((temp___306 (temp___305 temp___307 temp___308 temp___309 temp___310
                    temp___311 temp___312 temp___313 temp___314 temp___315
                    temp___316)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___306 1) (of_rep3 temp___307))
  (= (select temp___306 2) (of_rep3 temp___308)))
  (= (select temp___306 3) (of_rep3 temp___309)))
  (= (select temp___306 4) (of_rep3 temp___310)))
  (= (select temp___306 5) (of_rep3 temp___311)))
  (= (select temp___306 6) (of_rep3 temp___312)))
  (= (select temp___306 7) (of_rep3 temp___313)))
  (= (select temp___306 8) (of_rep3 temp___314)))
  (= (select temp___306 9) (of_rep3 temp___315)))
  (= (select temp___306 10) (of_rep3 temp___316))))))

(declare-fun temp___String_Literal_321 (tuple0) (Array Int character))

;; temp___String_Literal_321__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_321 us_void_param) 1)) 77)
     (= (to_rep (select (temp___String_Literal_321 us_void_param) 2)) 97))
     (= (to_rep (select (temp___String_Literal_321 us_void_param) 3)) 120))
     (= (to_rep (select (temp___String_Literal_321 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_321 us_void_param) 5)) 61))
     (= (to_rep (select (temp___String_Literal_321 us_void_param) 6)) 32)) :pattern (
  (temp___String_Literal_321 us_void_param)) )))

(declare-fun temp___String_Literal_322 (tuple0) (Array Int character))

;; temp___String_Literal_322__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_322 us_void_param) 1)) 77)
     (= (to_rep (select (temp___String_Literal_322 us_void_param) 2)) 105))
     (= (to_rep (select (temp___String_Literal_322 us_void_param) 3)) 110))
     (= (to_rep (select (temp___String_Literal_322 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_322 us_void_param) 5)) 61))
     (= (to_rep (select (temp___String_Literal_322 us_void_param) 6)) 32)) :pattern (
  (temp___String_Literal_322 us_void_param)) )))

(declare-fun temp___String_Literal_323 (tuple0) (Array Int character))

;; temp___String_Literal_323__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_323 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_323 us_void_param) 2)) 118))
     (= (to_rep (select (temp___String_Literal_323 us_void_param) 3)) 101))
     (= (to_rep (select (temp___String_Literal_323 us_void_param) 4)) 114))
     (= (to_rep (select (temp___String_Literal_323 us_void_param) 5)) 97))
     (= (to_rep (select (temp___String_Literal_323 us_void_param) 6)) 103))
     (= (to_rep (select (temp___String_Literal_323 us_void_param) 7)) 101))
     (= (to_rep (select (temp___String_Literal_323 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_323 us_void_param) 9)) 61))
     (= (to_rep (select (temp___String_Literal_323 us_void_param) 10)) 32)) :pattern (
  (temp___String_Literal_323 us_void_param)) )))

(declare-fun temp___String_Literal_324 (tuple0) (Array Int character))

;; temp___String_Literal_324__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 1)) 70)
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 2)) 105))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 3)) 110))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 4)) 100))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 6)) 48))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 8)) 105))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 9)) 110))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 11)) 84))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 12)) 49))
     (= (to_rep (select (temp___String_Literal_324 us_void_param) 13)) 32)) :pattern (
  (temp___String_Literal_324 us_void_param)) )))

(declare-fun temp___String_Literal_325 (tuple0) (Array Int character))

;; temp___String_Literal_325__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 1)) 70)
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 2)) 105))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 3)) 110))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 4)) 100))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 6)) 57))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 8)) 105))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 9)) 110))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 11)) 84))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 12)) 50))
     (= (to_rep (select (temp___String_Literal_325 us_void_param) 13)) 32)) :pattern (
  (temp___String_Literal_325 us_void_param)) )))

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant5 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant6 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant7 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; empty__post_axiom
  (assert true)

;; empty__def_axiom
  (assert
  (forall ((a us_rep))
  (! (= (= (empty a) true)
     (< (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) 1)) :pattern (
  (empty a)) )))

;; same_range__post_axiom
  (assert true)

;; same_range__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (= (same_range a b) true)
     (= (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))
     (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 b))))) :pattern (
  (same_range a b)) )))

;; not_in__post_axiom
  (assert true)

;; not_in__def_axiom
  (assert
  (forall ((a us_rep))
  (forall ((v Int) (low Int) (up Int))
  (! (= (= (not_in a v low up) true)
     (or
     (< (to_rep2 (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) up)
     (forall ((j Int))
     (=> (and (<= low j) (<= j up))
     (not
     (= (to_rep3
        (let ((temp___214 (rec__simple_unc_arrays__table__v
                          (us_split_fields1 a))))
        (select (to_array1 temp___214) j))) v)))))) :pattern ((not_in a v low
                                                              up)) ))))

(declare-const t1__split_fields (Array Int value))

(declare-const t1__split_fields1 t1)

(declare-const t2__split_fields (Array Int value))

(declare-const t2__split_fields1 t1)

(declare-const o natural)

(declare-const o1 natural)

(declare-const o2 natural)

(declare-const o3 (Array Int value))

(declare-const my_test__t1__assume natural)

(declare-const my_test__t1__assume1 (Array Int value))

(declare-const my_test__t1__assume2 t1)

(declare-const o4 natural)

(declare-const o5 natural)

(declare-const o6 natural)

(declare-const o7 (Array Int value))

(declare-const my_test__t2__assume natural)

(declare-const my_test__t2__assume1 (Array Int value))

(declare-const my_test__t2__assume2 t1)

(declare-const result us_split_fields__ref)

(declare-const t1__split_fields2 us_split_fields)

(declare-const result1 us_split_fields__ref)

(declare-const t2__split_fields2 us_split_fields)

;; H
  (assert (= (to_rep2 o) 10))

;; H
  (assert (= o o1))

;; H
  (assert (= o2 o1))

;; H
  (assert (= (temp___292 5 1 3 0 9 8 2 7 4 6) o3))

;; H
  (assert (= o2 my_test__t1__assume))

;; H
  (assert (= o3 my_test__t1__assume1))

;; H
  (assert (= (mk1 1 10) my_test__t1__assume2))

;; H
  (assert
  (= result (mk___split_fields__ref
            (mk___split_fields (mk___t1 t1__split_fields t1__split_fields1)))))

;; H
  (assert
  (= t1__split_fields2 (mk___split_fields
                       (mk___t1 my_test__t1__assume1 my_test__t1__assume2))))

;; H
  (assert (= t1__split_discrs (mk___split_discrs my_test__t1__assume)))

;; H
  (assert (dynamic_invariant (mk___rep t1__split_discrs t1__split_fields2)
  true false true))

;; H
  (assert (= (to_rep2 o4) 10))

;; H
  (assert (= o4 o5))

;; H
  (assert (= o6 o5))

;; H
  (assert (= (temp___305 4 8 6 9 0 1 7 2 5 3) o7))

;; H
  (assert (= o6 my_test__t2__assume))

;; H
  (assert (= o7 my_test__t2__assume1))

;; H
  (assert (= (mk1 1 10) my_test__t2__assume2))

;; H
  (assert
  (= result1 (mk___split_fields__ref
             (mk___split_fields (mk___t1 t2__split_fields t2__split_fields1)))))

;; H
  (assert
  (= t2__split_fields2 (mk___split_fields
                       (mk___t1 my_test__t2__assume1 my_test__t2__assume2))))

;; H
  (assert (= t2__split_discrs (mk___split_discrs my_test__t2__assume)))

;; H
  (assert (dynamic_invariant (mk___rep t2__split_discrs t2__split_fields2)
  true false true))

(assert
;; WP_parameter_def
 ;; File "my_test.adb", line 3, characters 0-0
  (not (in_range4 10)))
(check-sat)
(exit)
