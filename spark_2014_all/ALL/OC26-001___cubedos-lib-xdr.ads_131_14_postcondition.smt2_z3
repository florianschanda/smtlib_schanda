;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int2 ((_ BitVec 64)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort xdr_unsigned_hyper 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (xdr_unsigned_hyper xdr_unsigned_hyper) Bool)

(declare-fun dummy1 () xdr_unsigned_hyper)

(declare-datatypes ()
((xdr_unsigned_hyper__ref
 (mk_xdr_unsigned_hyper__ref
 (xdr_unsigned_hyper__content xdr_unsigned_hyper)))))
(define-fun xdr_unsigned_hyper__ref___projection ((a xdr_unsigned_hyper__ref)) xdr_unsigned_hyper
  (xdr_unsigned_hyper__content a))

(define-fun dynamic_invariant ((temp___expr_160 (_ BitVec 64))
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool true)

(declare-sort octet 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (octet octet) Bool)

(declare-fun dummy2 () octet)

(declare-datatypes () ((octet__ref (mk_octet__ref (octet__content octet)))))
(define-fun octet__ref___projection ((a octet__ref)) octet (octet__content a))

(declare-fun to_rep1 (octet) (_ BitVec 8))

(declare-fun of_rep1 ((_ BitVec 8)) octet)

;; inversion_axiom
  (assert
  (forall ((x octet))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x octet)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x octet)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort octet_array_index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 65535)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (octet_array_index octet_array_index) Bool)

(declare-fun dummy3 () octet_array_index)

(declare-datatypes ()
((octet_array_index__ref
 (mk_octet_array_index__ref (octet_array_index__content octet_array_index)))))
(define-fun octet_array_index__ref___projection ((a octet_array_index__ref)) octet_array_index
  (octet_array_index__content a))

(define-fun dynamic_invariant1 ((temp___expr_172 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (=>
                                      (or (= temp___is_init_169 true)
                                      (<= 0 65535)) (in_range2
                                      temp___expr_172)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int octet))))))
(declare-fun slide ((Array Int octet) Int Int) (Array Int octet))

;; slide_eq
  (assert
  (forall ((a (Array Int octet)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int octet)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int octet) Int Int (Array Int octet) Int
  Int) (Array Int octet))

;; concat_def
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (octet Int) (Array Int octet))

;; singleton_def
  (assert
  (forall ((v octet))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int octet)) (a__first Int) (a__last Int)
  (b (Array Int octet)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int octet) Int Int (Array Int octet) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int octet))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int octet) (elts a))

(define-fun of_array ((a (Array Int octet)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int octet)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int octet)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int octet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int octet))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-fun dummy4 () us_t)

(declare-datatypes ()
((octet_array__ref (mk_octet_array__ref (octet_array__content us_t)))))
(define-fun octet_array__ref___projection ((a octet_array__ref)) us_t
  (octet_array__content a))

(declare-fun value () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun data__first () integer)

(declare-fun data__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun position () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant3 ((temp___expr_166 (_ BitVec 8))
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_190 us_t)
  (temp___is_init_187 Bool) (temp___skip_constant_188 Bool)
  (temp___do_toplevel_189 Bool)) Bool (=>
                                      (not (= temp___skip_constant_188 true))
                                      (dynamic_property 0 65535
                                      (first1 temp___expr_190)
                                      (last1 temp___expr_190))))

(declare-fun data () (Array Int octet))

(declare-fun last2 () Int)

(declare-fun temporary_1 () (_ BitVec 64))

(declare-fun temporary_2 () (_ BitVec 64))

(declare-fun i () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Bool)

(declare-fun o3 () octet)

(declare-fun o4 () Int)

(declare-fun o5 () (Array Int octet))

(declare-fun o6 () octet)

(declare-fun o7 () Int)

(declare-fun o8 () (Array Int octet))

(declare-fun o9 () octet)

(declare-fun o10 () Int)

(declare-fun o11 () (Array Int octet))

(declare-fun o12 () octet)

(declare-fun o13 () Int)

(declare-fun o14 () (Array Int octet))

(declare-fun o15 () octet)

(declare-fun o16 () Int)

(declare-fun o17 () (Array Int octet))

(declare-fun o18 () octet)

(declare-fun o19 () Int)

(declare-fun o20 () (Array Int octet))

(declare-fun o21 () octet)

(declare-fun o22 () Int)

(declare-fun o23 () (Array Int octet))

(declare-fun o24 () octet)

(declare-fun o25 () Int)

(declare-fun o26 () (Array Int octet))

(declare-fun o27 () Int)

(declare-fun result () (_ BitVec 64))

(declare-fun temporary_11 () (_ BitVec 64))

(declare-fun result1 () Int)

(declare-fun i1 () Int)

(declare-fun result2 () (_ BitVec 64))

(declare-fun temporary_21 () (_ BitVec 64))

(declare-fun result3 () (Array Int octet))

(declare-fun data1 () (Array Int octet))

(declare-fun result4 () (_ BitVec 64))

(declare-fun temporary_12 () (_ BitVec 64))

(declare-fun result5 () Int)

(declare-fun i2 () Int)

(declare-fun result6 () (_ BitVec 64))

(declare-fun temporary_22 () (_ BitVec 64))

(declare-fun result7 () (Array Int octet))

(declare-fun data2 () (Array Int octet))

(declare-fun result8 () (_ BitVec 64))

(declare-fun temporary_13 () (_ BitVec 64))

(declare-fun result9 () Int)

(declare-fun i3 () Int)

(declare-fun result10 () (_ BitVec 64))

(declare-fun temporary_23 () (_ BitVec 64))

(declare-fun result11 () (Array Int octet))

(declare-fun data3 () (Array Int octet))

(declare-fun result12 () (_ BitVec 64))

(declare-fun temporary_14 () (_ BitVec 64))

(declare-fun result13 () Int)

(declare-fun i4 () Int)

(declare-fun result14 () (_ BitVec 64))

(declare-fun temporary_24 () (_ BitVec 64))

(declare-fun result15 () (Array Int octet))

(declare-fun data4 () (Array Int octet))

(declare-fun result16 () t__ref1)

(declare-fun temporary_15 () (_ BitVec 64))

(declare-fun result17 () int__ref)

(declare-fun i5 () Int)

(declare-fun result18 () t__ref1)

(declare-fun temporary_25 () (_ BitVec 64))

(declare-fun result19 () map__ref)

(declare-fun data5 () (Array Int octet))

(declare-fun result20 () t__ref1)

(declare-fun temporary_16 () (_ BitVec 64))

(declare-fun result21 () int__ref)

(declare-fun i6 () Int)

(declare-fun result22 () t__ref1)

(declare-fun temporary_26 () (_ BitVec 64))

(declare-fun result23 () map__ref)

(declare-fun data6 () (Array Int octet))

(declare-fun result24 () t__ref1)

(declare-fun temporary_17 () (_ BitVec 64))

(declare-fun result25 () int__ref)

(declare-fun i7 () Int)

(declare-fun result26 () t__ref1)

(declare-fun temporary_27 () (_ BitVec 64))

(declare-fun result27 () map__ref)

(declare-fun data7 () (Array Int octet))

(declare-fun result28 () t__ref1)

(declare-fun temporary_18 () (_ BitVec 64))

(declare-fun result29 () int__ref)

(declare-fun i8 () Int)

(declare-fun result30 () t__ref1)

(declare-fun temporary_28 () (_ BitVec 64))

(declare-fun result31 () map__ref)

(declare-fun data8 () (Array Int octet))

(declare-fun result32 () t__ref1)

(declare-fun temporary_19 () (_ BitVec 64))

(declare-fun result33 () int__ref)

(declare-fun last3 () Int)

(declare-fun data9 () map__ref)

(declare-fun last4 () int__ref)

(declare-fun temporary_110 () t__ref1)

(declare-fun temporary_29 () t__ref1)

(declare-fun i9 () int__ref)

(declare-fun data10 () (Array Int octet))

(declare-fun last5 () Int)

(declare-fun temporary_111 () (_ BitVec 64))

(declare-fun temporary_210 () (_ BitVec 64))

(declare-fun i10 () Int)

(define-fun result34 () map__ref (mk_map__ref result3))

(define-fun result35 () t__ref1 (mk_t__ref1 result2))

(define-fun result36 () int__ref (mk_int__ref result1))

(define-fun result37 () t__ref1 (mk_t__ref1 result))

(define-fun i11 () int__ref (mk_int__ref i))

(define-fun temporary_211 () t__ref1 (mk_t__ref1 temporary_2))

(define-fun temporary_112 () t__ref1 (mk_t__ref1 temporary_1))

(define-fun data11 () map__ref (mk_map__ref data))

;; H
  (assert true)

;; H
  (assert (dynamic_property 0 65535 (to_rep data__first)
  (to_rep data__last)))

;; H
  (assert (in_range2 position))

;; H
  (assert (=> (<= 0 65535) (in_range2 last2)))

;; H
  (assert
  (and
  (and
  (and (= (mod1 position 4) 0)
  (= (mod1
     (ite (<= (to_rep data__first) (to_rep data__last))
     (+ (- (to_rep data__last) (to_rep data__first)) 1) 0) 4) 0))
  (and (<= (to_rep data__first) position) (<= position (to_rep data__last))))
  (<= (+ position 7) (to_rep data__last))))

;; H
  (assert (= result37 temporary_112))

;; H
  (assert (= temporary_11 value))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (= result36 i11))

;; H
  (assert (= i1 1))

;; H
  (assert (= result35 temporary_211))

;; H
  (assert (= temporary_21 (bvurem temporary_11 ((_ int2bv 64) 256))))

;; H
  (assert (= (to_rep1 o3) ((_ extract 7 0) temporary_21)))

;; H
  (assert
  (and (<= (to_rep data__first) (+ position (- 8 i1)))
  (<= (+ position (- 8 i1)) (to_rep data__last))))

;; H
  (assert (= o4 (+ position (- 8 i1))))

;; H
  (assert (= o5 (store data o4 o3)))

;; H
  (assert (= result34 data11))

;; H
  (assert (= data1 o5))

;; H
  (assert (= temporary_11 result4))

;; H
  (assert (= temporary_12 (bvudiv temporary_11 ((_ int2bv 64) 256))))

;; H
  (assert (= i1 result5))

;; H
  (assert (= i2 2))

;; H
  (assert (= temporary_21 result6))

;; H
  (assert (= temporary_22 (bvurem temporary_12 ((_ int2bv 64) 256))))

;; H
  (assert (= (to_rep1 o6) ((_ extract 7 0) temporary_22)))

;; H
  (assert
  (and (<= (to_rep data__first) (+ position (- 8 i2)))
  (<= (+ position (- 8 i2)) (to_rep data__last))))

;; H
  (assert (= o7 (+ position (- 8 i2))))

;; H
  (assert (= o8 (store data1 o7 o6)))

;; H
  (assert (= data1 result7))

;; H
  (assert (= data2 o8))

;; H
  (assert (= temporary_12 result8))

;; H
  (assert (= temporary_13 (bvudiv temporary_12 ((_ int2bv 64) 256))))

;; H
  (assert (= i2 result9))

;; H
  (assert (= i3 3))

;; H
  (assert (= temporary_22 result10))

;; H
  (assert (= temporary_23 (bvurem temporary_13 ((_ int2bv 64) 256))))

;; H
  (assert (= (to_rep1 o9) ((_ extract 7 0) temporary_23)))

;; H
  (assert
  (and (<= (to_rep data__first) (+ position (- 8 i3)))
  (<= (+ position (- 8 i3)) (to_rep data__last))))

;; H
  (assert (= o10 (+ position (- 8 i3))))

;; H
  (assert (= o11 (store data2 o10 o9)))

;; H
  (assert (= data2 result11))

;; H
  (assert (= data3 o11))

;; H
  (assert (= temporary_13 result12))

;; H
  (assert (= temporary_14 (bvudiv temporary_13 ((_ int2bv 64) 256))))

;; H
  (assert (= i3 result13))

;; H
  (assert (= i4 4))

;; H
  (assert (= temporary_23 result14))

;; H
  (assert (= temporary_24 (bvurem temporary_14 ((_ int2bv 64) 256))))

;; H
  (assert (= (to_rep1 o12) ((_ extract 7 0) temporary_24)))

;; H
  (assert
  (and (<= (to_rep data__first) (+ position (- 8 i4)))
  (<= (+ position (- 8 i4)) (to_rep data__last))))

;; H
  (assert (= o13 (+ position (- 8 i4))))

;; H
  (assert (= o14 (store data3 o13 o12)))

;; H
  (assert (= data3 result15))

;; H
  (assert (= data4 o14))

;; H
  (assert (= result16 (mk_t__ref1 temporary_14)))

;; H
  (assert (= temporary_15 (bvudiv temporary_14 ((_ int2bv 64) 256))))

;; H
  (assert (= result17 (mk_int__ref i4)))

;; H
  (assert (= i5 5))

;; H
  (assert (= result18 (mk_t__ref1 temporary_24)))

;; H
  (assert (= temporary_25 (bvurem temporary_15 ((_ int2bv 64) 256))))

;; H
  (assert (= (to_rep1 o15) ((_ extract 7 0) temporary_25)))

;; H
  (assert
  (and (<= (to_rep data__first) (+ position (- 8 i5)))
  (<= (+ position (- 8 i5)) (to_rep data__last))))

;; H
  (assert (= o16 (+ position (- 8 i5))))

;; H
  (assert (= o17 (store data4 o16 o15)))

;; H
  (assert (= result19 (mk_map__ref data4)))

;; H
  (assert (= data5 o17))

;; H
  (assert (= result20 (mk_t__ref1 temporary_15)))

;; H
  (assert (= temporary_16 (bvudiv temporary_15 ((_ int2bv 64) 256))))

;; H
  (assert (= result21 (mk_int__ref i5)))

;; H
  (assert (= i6 6))

;; H
  (assert (= result22 (mk_t__ref1 temporary_25)))

;; H
  (assert (= temporary_26 (bvurem temporary_16 ((_ int2bv 64) 256))))

;; H
  (assert (= (to_rep1 o18) ((_ extract 7 0) temporary_26)))

;; H
  (assert
  (and (<= (to_rep data__first) (+ position (- 8 i6)))
  (<= (+ position (- 8 i6)) (to_rep data__last))))

;; H
  (assert (= o19 (+ position (- 8 i6))))

;; H
  (assert (= o20 (store data5 o19 o18)))

;; H
  (assert (= result23 (mk_map__ref data5)))

;; H
  (assert (= data6 o20))

;; H
  (assert (= result24 (mk_t__ref1 temporary_16)))

;; H
  (assert (= temporary_17 (bvudiv temporary_16 ((_ int2bv 64) 256))))

;; H
  (assert (= result25 (mk_int__ref i6)))

;; H
  (assert (= i7 7))

;; H
  (assert (= result26 (mk_t__ref1 temporary_26)))

;; H
  (assert (= temporary_27 (bvurem temporary_17 ((_ int2bv 64) 256))))

;; H
  (assert (= (to_rep1 o21) ((_ extract 7 0) temporary_27)))

;; H
  (assert
  (and (<= (to_rep data__first) (+ position (- 8 i7)))
  (<= (+ position (- 8 i7)) (to_rep data__last))))

;; H
  (assert (= o22 (+ position (- 8 i7))))

;; H
  (assert (= o23 (store data6 o22 o21)))

;; H
  (assert (= result27 (mk_map__ref data6)))

;; H
  (assert (= data7 o23))

;; H
  (assert (= result28 (mk_t__ref1 temporary_17)))

;; H
  (assert (= temporary_18 (bvudiv temporary_17 ((_ int2bv 64) 256))))

;; H
  (assert (= result29 (mk_int__ref i7)))

;; H
  (assert (= i8 8))

;; H
  (assert (= result30 (mk_t__ref1 temporary_27)))

;; H
  (assert (= temporary_28 (bvurem temporary_18 ((_ int2bv 64) 256))))

;; H
  (assert (= (to_rep1 o24) ((_ extract 7 0) temporary_28)))

;; H
  (assert
  (and (<= (to_rep data__first) (+ position (- 8 i8)))
  (<= (+ position (- 8 i8)) (to_rep data__last))))

;; H
  (assert (= o25 (+ position (- 8 i8))))

;; H
  (assert (= o26 (store data7 o25 o24)))

;; H
  (assert (= result31 (mk_map__ref data7)))

;; H
  (assert (= data8 o26))

;; H
  (assert (= result32 (mk_t__ref1 temporary_18)))

;; H
  (assert (= temporary_19 (bvudiv temporary_18 ((_ int2bv 64) 256))))

;; H
  (assert (and (= o27 (+ position 7)) (in_range2 (+ position 7))))

;; H
  (assert (= result33 (mk_int__ref last2)))

;; H
  (assert (= last3 o27))

;; H
  (assert (= i9 (mk_int__ref i8)))

;; H
  (assert (= temporary_29 (mk_t__ref1 temporary_28)))

;; H
  (assert (= temporary_110 (mk_t__ref1 temporary_19)))

;; H
  (assert (= last4 (mk_int__ref last3)))

;; H
  (assert (= data9 (mk_map__ref data8)))

;; H
  (assert (= i10 i8))

;; H
  (assert (= temporary_210 temporary_28))

;; H
  (assert (= temporary_111 temporary_19))

;; H
  (assert (= last5 last3))

;; H
  (assert (= data10 data8))

(assert
;; WP_parameter_def
 ;; File "cubedos-lib-xdr.ads", line 105, characters 0-0
  (not (= (int__content last4) (+ position 7))))
(check-sat)
(exit)
