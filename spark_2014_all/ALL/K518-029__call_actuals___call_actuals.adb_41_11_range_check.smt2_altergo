(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type t

predicate in_range2(x: int) = (((-20) <= x) and (x <= 20))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : t, t -> bool

logic dummy2 : t

type t__ref = { t__content : t
}

function t__ref___projection(a: t__ref) : t = (a).t__content

type s

predicate in_range3(x: int) = ((0 <= x) and (x <= 20))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : s, s -> bool

logic dummy3 : s

type s__ref = { s__content : s
}

function s__ref___projection(a: s__ref) : s = (a).s__content

logic attr__ATTRIBUTE_ADDRESS : int

type nt

predicate in_range4(x: int) = ((0 <= x) and (x <= 20))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : nt, nt -> bool

logic dummy4 : nt

type nt__ref = { nt__content : nt
}

function nt__ref___projection(a: nt__ref) : nt = (a).nt__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "call_actuals.ads", line 5, characters 0-0 *)
goal WP_parameter_def :
  (forall g:int. forall a1:int. forall a2:int. forall o:int.
  forall call_actuals__fn__y:int. forall o1:int.
  forall call_actuals__fn__x:int. forall o2:int. forall o3:int.
  forall o4:integer. forall o5:int. forall o6:integer. forall o7:int.
  forall o8:integer. forall o9:int. forall o10:integer. forall o11:int.
  forall o12:int. forall o13:int. forall call_actuals__fs__y:int.
  forall o14:int. forall o15:int. forall call_actuals__fs__x:int.
  forall a11:int. forall a21:int. forall call_actuals__fn__y1:int.
  forall call_actuals__fn__x1:int. forall result:int. forall a12:int.
  forall result1:int. forall a22:int. forall call_actuals__ft__y:int.
  forall call_actuals__ft__x:int. forall result2:int. forall a13:int.
  forall result3:int. forall a23:int. forall call_actuals__fnt__y:int.
  forall call_actuals__fnt__x:int. forall result4:int. forall a14:int.
  forall result5:int. forall a24:int. forall call_actuals__fs__y1:int.
  forall call_actuals__fs__x1:int. (in_range(g) -> (in_range(a1) ->
  (in_range(a2) -> (((a21 = (a11 + 1)) and (in_range(a11) and
  in_range(a21))) -> (((((o = a21) and in_range1(a21)) and
  (o = call_actuals__fn__y)) and ((((o1 = a11) and in_range1(a11)) and
  (o1 = call_actuals__fn__x)) and
  (((call_actuals__fn__y1 = (call_actuals__fn__x1 + 1)) and
  (in_range1(call_actuals__fn__x1) and in_range1(call_actuals__fn__y1))) and
  ((((o2 = call_actuals__fn__x1) and in_range(call_actuals__fn__x1)) and
  ((a11 = result) and (a12 = o2))) and (((o3 = call_actuals__fn__y1) and
  in_range(call_actuals__fn__y1)) and ((result1 = a21) and
  (a22 = o3))))))) ->
  ((((call_actuals__ft__y = (call_actuals__ft__x + 1)) and
  (in_range2(call_actuals__ft__x) and in_range2(call_actuals__ft__y))) and
  ((((to_rep(o4) = call_actuals__ft__x) and (o5 = to_rep(o4))) and
  ((result2 = a12) and (a13 = o5))) and
  (((to_rep(o6) = call_actuals__ft__y) and (o7 = to_rep(o6))) and
  ((result3 = a22) and (a23 = o7))))) ->
  ((((call_actuals__fnt__y = (call_actuals__fnt__x + 1)) and
  (in_range4(call_actuals__fnt__x) and in_range4(call_actuals__fnt__y))) and
  ((((to_rep(o8) = call_actuals__fnt__x) and (o9 = to_rep(o8))) and
  ((result4 = a13) and (a14 = o9))) and
  (((to_rep(o10) = call_actuals__fnt__y) and (o11 = to_rep(o10))) and
  ((result5 = a23) and (a24 = o11))))) -> (((((o12 = a24) and
  in_range2(a24)) and ((o13 = o12) and in_range3(o12))) and
  (o13 = call_actuals__fs__y)) -> (((((o14 = a14) and in_range2(a14)) and
  ((o15 = o14) and in_range3(o14))) and (o15 = call_actuals__fs__x)) ->
  (((call_actuals__fs__y1 = (call_actuals__fs__x1 + 1)) and
  (in_range3(call_actuals__fs__x1) and in_range3(call_actuals__fs__y1))) ->
  in_range(call_actuals__fs__x1))))))))))))
