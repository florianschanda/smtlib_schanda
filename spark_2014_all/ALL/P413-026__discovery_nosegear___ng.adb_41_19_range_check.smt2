;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 16) Int) Bool)

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 16)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort mod_time 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (mod_time mod_time) Bool)

(declare-fun dummy1 () mod_time)

(declare-datatypes ()
((mod_time__ref (mk_mod_time__ref (mod_time__content mod_time)))))
(define-fun mod_time__ref___projection ((a mod_time__ref)) mod_time (mod_time__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_201 (_ BitVec 16))
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool true)

(declare-sort mod_count 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 16))

(declare-fun user_eq2 (mod_count mod_count) Bool)

(declare-fun dummy2 () mod_count)

(declare-datatypes ()
((mod_count__ref (mk_mod_count__ref (mod_count__content mod_count)))))
(define-fun mod_count__ref___projection ((a mod_count__ref)) mod_count
  (mod_count__content a))

(define-fun dynamic_invariant1 ((temp___expr_213 (_ BitVec 16))
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)) Bool true)

(declare-sort time 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (time time) Bool)

(declare-fun dummy3 () time)

(declare-datatypes () ((time__ref (mk_time__ref (time__content time)))))
(define-fun time__ref___projection ((a time__ref)) time (time__content a))

(define-fun dynamic_invariant2 ((temp___expr_219 Int)
  (temp___is_init_216 Bool) (temp___skip_constant_217 Bool)
  (temp___do_toplevel_218 Bool)) Bool (=>
                                      (or (= temp___is_init_216 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_219)))

(declare-sort distance 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (distance distance) Bool)

(declare-fun dummy4 () distance)

(declare-datatypes ()
((distance__ref (mk_distance__ref (distance__content distance)))))
(define-fun distance__ref___projection ((a distance__ref)) distance (distance__content
                                                                    a))

(define-fun dynamic_invariant3 ((temp___expr_225 Int)
  (temp___is_init_222 Bool) (temp___skip_constant_223 Bool)
  (temp___do_toplevel_224 Bool)) Bool (=>
                                      (or (= temp___is_init_222 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_225)))

(declare-sort velocity 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (velocity velocity) Bool)

(declare-fun dummy5 () velocity)

(declare-datatypes ()
((velocity__ref (mk_velocity__ref (velocity__content velocity)))))
(define-fun velocity__ref___projection ((a velocity__ref)) velocity (velocity__content
                                                                    a))

(define-fun dynamic_invariant4 ((temp___expr_237 Int)
  (temp___is_init_234 Bool) (temp___skip_constant_235 Bool)
  (temp___do_toplevel_236 Bool)) Bool (=>
                                      (or (= temp___is_init_234 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_237)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun currtime () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun thistime () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun thiscount () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun prevtime () (_ BitVec 16))

(declare-fun prevcount () (_ BitVec 16))

(declare-fun success () Bool)

(declare-fun result__ () Int)

(declare-fun t1 () Int)

(declare-fun t2 () Int)

(declare-fun d1 () Int)

(declare-fun d2 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () Int)

(declare-fun o17 () Int)

(declare-fun o18 () Int)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun success1 () Bool)

(declare-fun result__1 () Int)

(declare-fun t11 () Int)

(declare-fun t21 () Int)

(declare-fun d11 () Int)

(declare-fun d21 () Int)

(declare-fun result () Bool)

(declare-fun success2 () Bool)

(declare-fun result1 () Int)

(declare-fun result__2 () Int)

(declare-fun result2 () Int)

(declare-fun t12 () Int)

(declare-fun result3 () Int)

(declare-fun t22 () Int)

(declare-fun result4 () Int)

(declare-fun d12 () Int)

(declare-fun result5 () Int)

(declare-fun d22 () Int)

(declare-fun result6 () Bool)

(declare-fun success3 () Bool)

(declare-fun result7 () Int)

(declare-fun result__3 () Int)

(declare-fun success4 () Bool)

(declare-fun result__4 () Int)

(declare-fun t13 () Int)

(declare-fun t23 () Int)

(declare-fun d13 () Int)

(declare-fun d23 () int__ref)

(declare-fun success5 () Bool)

(declare-fun result__5 () Int)

(declare-fun t14 () Int)

(declare-fun t24 () Int)

(declare-fun d14 () Int)

(declare-fun d24 () Int)

(declare-fun success6 () bool__ref)

(declare-fun result__6 () int__ref)

(declare-fun t15 () int__ref)

(declare-fun t25 () int__ref)

(declare-fun d15 () int__ref)

(declare-fun d25 () int__ref)

(declare-fun success7 () Bool)

(declare-fun result__7 () Int)

(declare-fun t16 () Int)

(declare-fun t26 () Int)

(declare-fun d16 () Int)

(declare-fun d26 () Int)

(define-fun d17 () int__ref (mk_int__ref d13))

(define-fun t27 () int__ref (mk_int__ref t23))

(define-fun t17 () int__ref (mk_int__ref t13))

(define-fun d27 () int__ref (mk_int__ref d2))

(define-fun d18 () int__ref (mk_int__ref d1))

(define-fun t28 () int__ref (mk_int__ref t2))

(define-fun t18 () int__ref (mk_int__ref t1))

;; H
  (assert (=> (<= 0 2147483647) (in_range4 result__)))

;; H
  (assert (and (not (= thistime prevtime)) (not (= thiscount prevcount))))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 t1)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 t2)))

;; H
  (assert (=> (<= 0 2147483647) (in_range3 d1)))

;; H
  (assert (=> (<= 0 2147483647) (in_range3 d2)))

;; H
  (assert
  (or
  (and
  (and
  (and (= d23 d27)
  (and (= d17 d18)
  (and (= t27 t28)
  (and (= t17 t18) (and (= result__2 result__4) (= success2 success4))))))
  (and (= d24 d21)
  (and (= d14 d11)
  (and (= t24 t21)
  (and (= t14 t11) (and (= result__5 result__2) (= success5 success2)))))))
  (and (bvult (bvsub thiscount prevcount) (bvsub thistime prevtime))
  (and
  (and (= (mk_bool__ref result) (mk_bool__ref success))
  (= success2 (of_int 0)))
  (and (= (mk_int__ref result1) (mk_int__ref result__)) (= result__2 0)))))
  (and
  (and (not (bvult (bvsub thiscount prevcount) (bvsub thistime prevtime)))
  (and (and (= result__2 result__) (= success2 success))
  (and (= result__2 result__1) (= success2 success1))))
  (and
  (and
  (and (= d23 (mk_int__ref d22))
  (and (= d12 d13)
  (and (= t22 t23)
  (and (= t12 t13) (and (= result__3 result__4) (= success3 success4))))))
  (and (= d24 d22)
  (and (= d14 d12)
  (and (= t24 t22)
  (and (= t14 t12) (and (= result__5 result__3) (= success5 success3)))))))
  (and
  (and (= (mk_int__ref result2) t18)
  (= t12 (bv2nat (bvsub thistime prevtime))))
  (and
  (and (= (mk_int__ref result3) t28)
  (= t22 (bv2nat (bvsub currtime thistime))))
  (and
  (and
  (and
  (and (= o (* 207 (bv2nat (bvsub thiscount prevcount)))) (in_range1
  (* 207 (bv2nat (bvsub thiscount prevcount)))))
  (and (= o1 o) (in_range3 o)))
  (and (= (mk_int__ref result4) d18) (= d12 o1)))
  (and
  (and
  (and
  (and (and (= o2 (* d12 t22)) (in_range1 (* d12 t22))) (= o3 (div1 o2 t12)))
  (and (= o4 o3) (in_range3 o3)))
  (and (= (mk_int__ref result5) d27) (= d22 o4)))
  (and (and (= success2 result6) (= success3 (of_int 1)))
  (and
  (and
  (and (and (= o8 (+ t12 t22)) (in_range1 (+ t12 t22)))
  (and
  (and
  (and (and (= o5 (+ d12 d22)) (in_range1 (+ d12 d22))) (= o6 (* o5 3600)))
  (and (= o7 o6) (in_range1 o6))) (= o9 (div1 o7 o8))))
  (and (= o10 o9) (in_range4 o9)))
  (and (= result__2 result7) (= result__3 o10))))))))))))

;; H
  (assert (= d25 d23))

;; H
  (assert (= d15 d17))

;; H
  (assert (= t25 t27))

;; H
  (assert (= t15 t17))

;; H
  (assert (= result__6 (mk_int__ref result__4)))

;; H
  (assert (= success6 (mk_bool__ref success4)))

;; H
  (assert (= d26 d24))

;; H
  (assert (= d16 d14))

;; H
  (assert (= t26 t24))

;; H
  (assert (= t16 t14))

;; H
  (assert (= result__7 result__5))

;; H
  (assert (= success7 success5))

;; H
  (assert (= (bool__content success6) true))

;; H
  (assert
  (and (= o11 (* 207 (bv2nat (bvsub thiscount prevcount)))) (in_range1
  (* 207 (bv2nat (bvsub thiscount prevcount))))))

;; H
  (assert (= o12 (* o11 (bv2nat (bvsub currtime thistime)))))

;; H
  (assert (and (= o13 o12) (in_range1 o12)))

;; H
  (assert (= o14 (div1 o13 (bv2nat (bvsub thistime prevtime)))))

;; H
  (assert
  (and (= o15 (* 207 (bv2nat (bvsub thiscount prevcount)))) (in_range1
  (* 207 (bv2nat (bvsub thiscount prevcount))))))

;; H
  (assert (= o16 (+ o15 o14)))

;; H
  (assert (and (= o17 o16) (in_range1 o16)))

;; H
  (assert (= o18 (* o17 3600)))

;; H
  (assert (and (= o19 o18) (in_range1 o18)))

;; H
  (assert (= o20 (div1 o19 (bv2nat (bvsub currtime prevtime)))))

(assert
;; WP_parameter_def
 ;; File "ng.adb", line 68, characters 0-0
  (not (in_range4 o20)))
(check-sat)
(exit)
