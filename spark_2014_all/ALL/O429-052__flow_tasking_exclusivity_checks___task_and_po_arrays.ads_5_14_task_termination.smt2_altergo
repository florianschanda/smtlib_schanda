(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type priority

predicate in_range(x: int) = ((0 <= x) and (x <= 97))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : priority, priority -> bool

logic dummy : priority

type priority__ref = { priority__content : priority
}

function priority__ref___projection(a: priority__ref) : priority =
  (a).priority__content

type task_id

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : task_id, task_id -> bool

logic dummy1 : task_id

type task_id__ref = { task_id__content : task_id
}

function task_id__ref___projection(a: task_id__ref) : task_id =
  (a).task_id__content

logic id : int

logic attr__ATTRIBUTE_ADDRESS : int

type pt

logic user_eq2 : pt, pt -> bool

logic value__size : int

logic object__size : pt -> int

logic value__alignment : int

logic object__alignment : pt -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:pt. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom : (forall a:pt. (0 <= object__alignment(a)))

type pt__ref = { pt__content : pt
}

function pt__ref___projection(a: pt__ref) : pt = (a).pt__content

type map__ref = { map__content : (int,pt) farray
}

logic slide : (int,pt) farray, int, int -> (int,pt) farray

axiom slide_eq :
  (forall a:(int,pt) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,pt) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,pt) farray, int, int, (int,pt) farray, int,
  int -> (int,pt) farray

axiom concat_def :
  (forall a:(int,pt) farray. forall b:(int,pt) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : pt, int -> (int,pt) farray

axiom singleton_def :
  (forall v:pt.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,pt) farray, int, int, (int,pt) farray, int, int -> bool

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "task_and_po_arrays.ads", line 12, characters 0-0 *)
goal WP_parameter_def :
  (forall temp___202:(int,pt) farray. forall o:pt. forall us_self__compl:pt.
  forall pos:(int,pt) farray. forall us_self__compl1:pt.
  forall result:(int,pt) farray. forall pos1:(int,pt) farray.
  (not (in_range1(id) and ((((temp___202 = pos) and
  (o = (temp___202[id]))) and (o = us_self__compl)) and ((result = pos) and
  (pos1 = (pos[id <- us_self__compl1])))))))
