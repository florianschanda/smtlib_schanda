;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-fun to_rep2 (positive) Int)

(declare-fun of_rep2 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort name_id 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (name_id name_id) Bool)

(declare-fun dummy4 () name_id)

(declare-datatypes ()
((name_id__ref (mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_180 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)) Bool (=>
                                      (or (= temp___is_init_177 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_180)))

(declare-fun invariant__ (tuple0) Bool)

(declare-fun invariant____function_guard (Bool tuple0) Bool)

;; invariant____post_axiom
  (assert true)

;; invariant____def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (invariant__ us_void_param) true) :pattern ((invariant__
                                                    us_void_param)) )))

(declare-sort capacity_range 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (capacity_range capacity_range) Bool)

(declare-fun dummy5 () capacity_range)

(declare-datatypes ()
((capacity_range__ref
 (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_2__projection ((a capacity_range__ref)) capacity_range
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__names__entry_tables__vector__capacity capacity_range)))))
(define-fun us_split_discrs_2__projection ((a us_split_discrs)) capacity_range
  (rec__names__entry_tables__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref_2__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__names__entry_tables__vector us_main_type)))))
(define-fun us_split_fields_Vector2__projection ((a us_split_fields)) us_main_type
  (rec__names__entry_tables__vector a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep_4__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                              a))

(define-fun us_rep_5__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun names__entry_tables__vector__capacity__first__bit () Int)

(declare-fun names__entry_tables__vector__capacity__last__bit () Int)

(declare-fun names__entry_tables__vector__capacity__position () Int)

;; names__entry_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__first__bit))

;; names__entry_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__entry_tables__vector__capacity__first__bit names__entry_tables__vector__capacity__last__bit))

;; names__entry_tables__vector__capacity__position_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun dummy6 () us_rep)

(declare-datatypes ()
((vector__ref (mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref_2__projection ((a vector__ref)) us_rep (vector__content
                                                               a))

(declare-fun to_rep3 (capacity_range) Int)

(declare-fun of_rep3 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun in_range6 ((rec__names__entry_tables__vector__capacity1 Int)
  (a us_rep)) Bool (= rec__names__entry_tables__vector__capacity1 (to_rep3
                                                                  (rec__names__entry_tables__vector__capacity
                                                                  (us_split_discrs1
                                                                  a)))))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-fun names__entry_tables__vector__capacity__first__bit1 () Int)

(declare-fun names__entry_tables__vector__capacity__last__bit1 () Int)

(declare-fun names__entry_tables__vector__capacity__position1 () Int)

;; names__entry_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__first__bit1))

;; names__entry_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__entry_tables__vector__capacity__first__bit1 names__entry_tables__vector__capacity__last__bit1))

;; names__entry_tables__vector__capacity__position_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__position1))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-fun dummy7 () us_rep)

(declare-datatypes ()
((tentry_tableS__ref (mk_tentry_tableS__ref (tentry_tableS__content us_rep)))))
(define-fun tentry_tableS__ref___projection ((a tentry_tableS__ref)) us_rep
  (tentry_tableS__content a))

(declare-fun entry_table__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(define-fun dynamic_invariant2 ((temp___expr_394 us_rep)
  (temp___is_init_391 Bool) (temp___skip_constant_392 Bool)
  (temp___do_toplevel_393 Bool)) Bool (=>
                                      (not (= temp___skip_constant_392 true))
                                      (in_range6 128 temp___expr_394)))

(define-fun default_initial_assumption ((temp___expr_396 us_rep)
  (temp___skip_top_level_397 Bool)) Bool (and
                                         (= (to_rep3
                                            (rec__names__entry_tables__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_396))) 128)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_397 true))
                                         (= (is_empty temp___expr_396) true))))

(declare-sort capacity_range1 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (capacity_range1 capacity_range1) Bool)

(declare-fun dummy8 () capacity_range1)

(declare-datatypes ()
((capacity_range__ref1
 (mk_capacity_range__ref1 (capacity_range__content1 capacity_range1)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref1)) capacity_range1
  (capacity_range__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ()
((us_split_discrs2
 (mk___split_discrs1
 (rec__names__char_tables__vector__capacity capacity_range1)))))
(define-fun us_split_discrs___projection ((a us_split_discrs2)) capacity_range1
  (rec__names__char_tables__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref1
 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref1)) us_split_discrs2
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__names__char_tables__vector us_main_type1)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type1
  (rec__names__char_tables__vector a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3
                                                               a))

(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-fun names__char_tables__vector__capacity__first__bit () Int)

(declare-fun names__char_tables__vector__capacity__last__bit () Int)

(declare-fun names__char_tables__vector__capacity__position () Int)

;; names__char_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__char_tables__vector__capacity__first__bit))

;; names__char_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__char_tables__vector__capacity__first__bit names__char_tables__vector__capacity__last__bit))

;; names__char_tables__vector__capacity__position_axiom
  (assert (<= 0 names__char_tables__vector__capacity__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-fun dummy9 () us_rep1)

(declare-datatypes ()
((vector__ref1 (mk_vector__ref1 (vector__content1 us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref1)) us_rep1 (vector__content1
                                                                a))

(declare-fun to_rep4 (capacity_range1) Int)

(declare-fun of_rep4 (Int) capacity_range1)

;; inversion_axiom
  (assert
  (forall ((x capacity_range1))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range1)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(define-fun in_range8 ((rec__names__char_tables__vector__capacity1 Int)
  (a us_rep1)) Bool (= rec__names__char_tables__vector__capacity1 (to_rep4
                                                                  (rec__names__char_tables__vector__capacity
                                                                  (us_split_discrs3
                                                                  a)))))

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep1) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))

(declare-fun names__char_tables__vector__capacity__first__bit1 () Int)

(declare-fun names__char_tables__vector__capacity__last__bit1 () Int)

(declare-fun names__char_tables__vector__capacity__position1 () Int)

;; names__char_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__char_tables__vector__capacity__first__bit1))

;; names__char_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__char_tables__vector__capacity__first__bit1 names__char_tables__vector__capacity__last__bit1))

;; names__char_tables__vector__capacity__position_axiom
  (assert (<= 0 names__char_tables__vector__capacity__position1))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-fun dummy10 () us_rep1)

(declare-datatypes ()
((tchar_tableS__ref (mk_tchar_tableS__ref (tchar_tableS__content us_rep1)))))
(define-fun tchar_tableS__ref___projection ((a tchar_tableS__ref)) us_rep1
  (tchar_tableS__content a))

(declare-fun char_table__split_discrs () us_split_discrs2)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun is_empty1 (us_rep1) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)

(define-fun dynamic_invariant3 ((temp___expr_316 us_rep1)
  (temp___is_init_313 Bool) (temp___skip_constant_314 Bool)
  (temp___do_toplevel_315 Bool)) Bool (=>
                                      (not (= temp___skip_constant_314 true))
                                      (in_range8 1024 temp___expr_316)))

(define-fun default_initial_assumption1 ((temp___expr_318 us_rep1)
  (temp___skip_top_level_319 Bool)) Bool (and
                                         (= (to_rep4
                                            (rec__names__char_tables__vector__capacity
                                            (us_split_discrs3
                                            temp___expr_318))) 1024)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_319 true))
                                         (= (is_empty1 temp___expr_318) true))))

(declare-fun n () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-sort tchar_table_indexB 0)

(define-fun in_range9 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (tchar_table_indexB tchar_table_indexB) Bool)

(declare-fun dummy11 () tchar_table_indexB)

(declare-datatypes ()
((tchar_table_indexB__ref
 (mk_tchar_table_indexB__ref
 (tchar_table_indexB__content tchar_table_indexB)))))
(define-fun tchar_table_indexB__ref___projection ((a tchar_table_indexB__ref)) tchar_table_indexB
  (tchar_table_indexB__content a))

(declare-sort char_table_index 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (char_table_index char_table_index) Bool)

(declare-fun dummy12 () char_table_index)

(declare-datatypes ()
((char_table_index__ref
 (mk_char_table_index__ref (char_table_index__content char_table_index)))))
(define-fun char_table_index__ref___projection ((a char_table_index__ref)) char_table_index
  (char_table_index__content a))

(declare-fun to_rep5 (char_table_index) Int)

(declare-fun of_rep5 (Int) char_table_index)

;; inversion_axiom
  (assert
  (forall ((x char_table_index))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x char_table_index)) (! (in_range10
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                               (of_rep5 x))) )))

(declare-sort index_type 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq13 (index_type index_type) Bool)

(declare-fun dummy13 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type
  (index_type__content a))

(declare-sort element_type 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq14 (element_type element_type) Bool)

(declare-fun dummy14 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant4 ((temp___expr_268 Int)
  (temp___is_init_265 Bool) (temp___skip_constant_266 Bool)
  (temp___do_toplevel_267 Bool)) Bool (=>
                                      (or (= temp___is_init_265 true)
                                      (<= 0 255)) (in_range12
                                      temp___expr_268)))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-fun user_eq15 (us_rep2 us_rep2) Bool)

(declare-fun dummy15 () us_rep2)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content
                                                                   a))

(declare-fun get (us_rep2 Int) Int)

(declare-fun get__function_guard (Int us_rep2 Int) Bool)

(declare-fun model__ (us_rep1) us_rep2)

(declare-fun model____function_guard (us_rep2 us_rep1) Bool)

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard (Int us_rep2) Bool)

(define-fun last2 ((container us_rep2)) Int (+ (- 1) (length1 container)))

(declare-fun last__function_guard (Int us_rep2) Bool)

(define-fun last_index ((container us_rep1)) Int (last2 (model__ container)))

(declare-fun last_index__function_guard (Int us_rep1) Bool)

(declare-fun first_index__function_guard (Int us_rep1) Bool)

(define-fun element ((container us_rep1)
  (index Int)) Int (get (model__ container) index))

(declare-fun element__function_guard (Int us_rep1 Int) Bool)

(declare-fun to_rep6 (name_id) Int)

(declare-fun of_rep6 (Int) name_id)

;; inversion_axiom
  (assert
  (forall ((x name_id))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x name_id)) (! (in_range4 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__names__name_entry__table_index char_table_index)(rec__names__name_entry__length positive)(rec__names__name_entry__next_hash name_id)))))
(define-fun us_split_fields_Table_Index__projection ((a us_split_fields4)) char_table_index
  (rec__names__name_entry__table_index a))

(define-fun us_split_fields_Length__projection ((a us_split_fields4)) positive
  (rec__names__name_entry__length a))

(define-fun us_split_fields_Next_Hash__projection ((a us_split_fields4)) name_id
  (rec__names__name_entry__next_hash a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep3 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep3)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq3 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (= (to_rep5
                            (rec__names__name_entry__table_index
                            (us_split_fields5 a))) (to_rep5
                                                   (rec__names__name_entry__table_index
                                                   (us_split_fields5 b))))
                         (= (to_rep2
                            (rec__names__name_entry__length
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__names__name_entry__length
                                                   (us_split_fields5 b)))))
                         (= (to_rep6
                            (rec__names__name_entry__next_hash
                            (us_split_fields5 a))) (to_rep6
                                                   (rec__names__name_entry__next_hash
                                                   (us_split_fields5 b)))))
                    true false))

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep3) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment6 a))))

(declare-fun names__name_entry__table_index__first__bit () Int)

(declare-fun names__name_entry__table_index__last__bit () Int)

(declare-fun names__name_entry__table_index__position () Int)

;; names__name_entry__table_index__first__bit_axiom
  (assert (<= 0 names__name_entry__table_index__first__bit))

;; names__name_entry__table_index__last__bit_axiom
  (assert
  (< names__name_entry__table_index__first__bit names__name_entry__table_index__last__bit))

;; names__name_entry__table_index__position_axiom
  (assert (<= 0 names__name_entry__table_index__position))

(declare-fun names__name_entry__length__first__bit () Int)

(declare-fun names__name_entry__length__last__bit () Int)

(declare-fun names__name_entry__length__position () Int)

;; names__name_entry__length__first__bit_axiom
  (assert (<= 0 names__name_entry__length__first__bit))

;; names__name_entry__length__last__bit_axiom
  (assert
  (< names__name_entry__length__first__bit names__name_entry__length__last__bit))

;; names__name_entry__length__position_axiom
  (assert (<= 0 names__name_entry__length__position))

(declare-fun names__name_entry__next_hash__first__bit () Int)

(declare-fun names__name_entry__next_hash__last__bit () Int)

(declare-fun names__name_entry__next_hash__position () Int)

;; names__name_entry__next_hash__first__bit_axiom
  (assert (<= 0 names__name_entry__next_hash__first__bit))

;; names__name_entry__next_hash__last__bit_axiom
  (assert
  (< names__name_entry__next_hash__first__bit names__name_entry__next_hash__last__bit))

;; names__name_entry__next_hash__position_axiom
  (assert (<= 0 names__name_entry__next_hash__position))

(declare-fun user_eq16 (us_rep3 us_rep3) Bool)

(declare-fun dummy16 () us_rep3)

(declare-datatypes ()
((name_entry__ref (mk_name_entry__ref (name_entry__content us_rep3)))))
(define-fun name_entry__ref___projection ((a name_entry__ref)) us_rep3
  (name_entry__content a))

(declare-sort index_type1 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq17 (index_type1 index_type1) Bool)

(declare-fun dummy17 () index_type1)

(declare-datatypes ()
((index_type__ref1 (mk_index_type__ref1 (index_type__content1 index_type1)))))
(define-fun index_type__ref_3__projection ((a index_type__ref1)) index_type1
  (index_type__content1 a))

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 us_rep3)))))
(define-fun element_type__ref_3__projection ((a element_type__ref1)) us_rep3
  (element_type__content1 a))

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 us_rep3)))))
(define-fun element_type__ref_4__projection ((a element_type__ref2)) us_rep3
  (element_type__content2 a))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-fun value__size7 () Int)

(declare-fun object__size7 (us_rep4) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment7 a))))

(declare-fun user_eq18 (us_rep4 us_rep4) Bool)

(declare-fun dummy18 () us_rep4)

(declare-datatypes ()
((sequence__ref1 (mk_sequence__ref1 (sequence__content1 us_rep4)))))
(define-fun sequence__ref_2__projection ((a sequence__ref1)) us_rep4
  (sequence__content1 a))

(declare-fun get1 (us_rep4 Int) us_rep3)

(declare-fun get__function_guard1 (us_rep3 us_rep4 Int) Bool)

(declare-fun model__1 (us_rep) us_rep4)

(declare-fun model____function_guard1 (us_rep4 us_rep) Bool)

(declare-fun length2 (us_rep4) Int)

(declare-fun length__function_guard1 (Int us_rep4) Bool)

(define-fun last3 ((container us_rep4)) Int (+ 0 (length2 container)))

(declare-fun last__function_guard1 (Int us_rep4) Bool)

(define-fun last_index1 ((container us_rep)) Int (last3 (model__1 container)))

(declare-fun last_index__function_guard1 (Int us_rep) Bool)

(declare-fun first_index__function_guard1 (Int us_rep) Bool)

(define-fun element1 ((container us_rep)
  (index Int)) us_rep3 (get1 (model__1 container) index))

(declare-fun element__function_guard1 (us_rep3 us_rep Int) Bool)

(declare-fun e () us_rep3)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun l () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq19 (integer integer) Bool)

(declare-fun dummy19 () integer)

(declare-datatypes ()
((tTsSP1__ref (mk_tTsSP1__ref (tTsSP1__content integer)))))
(define-fun tTsSP1__ref___projection ((a tTsSP1__ref)) integer (tTsSP1__content
                                                               a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last4 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l1 Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l1)
     (and (= (to_rep1 (first2 (mk1 f l1))) f)
     (= (to_rep1 (last4 (mk1 f l1))) l1)))) :pattern ((mk1 f l1)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int character))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))

(define-fun of_array1 ((a (Array Int character)) (f Int)
  (l1 Int)) us_t1 (mk___t1 a (mk1 f l1)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last5 ((a us_t1)) Int (to_rep1 (last4 (rt1 a))))

(define-fun length3 ((a us_t1)) Int (ite (<= (first3 a) (last5 a))
                                    (+ (- (last5 a) (first3 a)) 1) 0))

(declare-fun value__size8 () Int)

(declare-fun object__size8 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment8 () Int)

(declare-fun object__alignment8 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size8 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment8 a))))

(define-fun bool_eq5 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last4 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last4 (rt1 y)))))

(declare-fun user_eq20 (us_t1 us_t1) Bool)

(declare-fun dummy20 () us_t1)

(declare-datatypes () ((tsS__ref (mk_tsS__ref (tsS__content us_t1)))))
(define-fun tsS__ref___projection ((a tsS__ref)) us_t1 (tsS__content a))

(define-fun dynamic_invariant5 ((temp___expr_412 us_t1)
  (temp___is_init_409 Bool) (temp___skip_constant_410 Bool)
  (temp___do_toplevel_411 Bool)) Bool (=>
                                      (not (= temp___skip_constant_410 true))
                                      (and (dynamic_property2 1 l
                                      (first3 temp___expr_412)
                                      (last5 temp___expr_412))
                                      (and (= (first3 temp___expr_412) 1)
                                      (= (last5 temp___expr_412) l)))))

(declare-fun s__first () integer)

(declare-fun s__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun temp___String_Literal_445 (tuple0) (Array Int character))

;; temp___String_Literal_445__def_axiom
  (assert true)

(define-fun dynamic_invariant6 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant7 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant8 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant9 ((temp___expr_256 Int)
  (temp___is_init_253 Bool) (temp___skip_constant_254 Bool)
  (temp___do_toplevel_255 Bool)) Bool (=>
                                      (or (= temp___is_init_253 true)
                                      (<= 0 2147483646)) (in_range10
                                      temp___expr_256)))

;; l__def_axiom
  (assert
  (= l (to_rep2 (rec__names__name_entry__length (us_split_fields5 e)))))

(declare-sort count_type 0)

(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq21 (count_type count_type) Bool)

(declare-fun dummy21 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(define-fun dynamic_invariant10 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range14
                                      temp___expr_142)))

(declare-sort extended_index 0)

(define-fun in_range15 ((x Int)) Bool (and (<= (- 1) x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq22 (extended_index extended_index) Bool)

(declare-fun dummy22 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant11 ((temp___expr_274 Int)
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool (=>
                                      (or (= temp___is_init_271 true)
                                      (<= (- 1) 2147483647)) (in_range15
                                      temp___expr_274)))

(define-fun dynamic_invariant12 ((temp___expr_280 Int)
  (temp___is_init_277 Bool) (temp___skip_constant_278 Bool)
  (temp___do_toplevel_279 Bool)) Bool (=>
                                      (or (= temp___is_init_277 true)
                                      (<= 0 2147483647)) (in_range7
                                      temp___expr_280)))

(define-fun capacity ((container us_rep1)) Int (ite (= (of_int 0) true)
                                               (to_rep4
                                               (rec__names__char_tables__vector__capacity
                                               (us_split_discrs3 container)))
                                               2147483647))

(declare-fun capacity__function_guard (Int us_rep1) Bool)

(declare-fun length4 (us_rep1) Int)

(declare-fun length__function_guard2 (Int us_rep1) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length4 container)))
     (and (<= result (capacity container)) (dynamic_invariant12 result true
     false true))) :pattern ((length4 container)) )))

(define-fun oeq ((left us_rep2)
  (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n1 Int))
                                                                (=>
                                                                (and
                                                                (<= 0 n1)
                                                                (<= n1
                                                                (last2 left)))
                                                                (= (get left
                                                                   n1)
                                                                (get right
                                                                n1)))) true
                                                                false)))

(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq15 a b) (oeq a b)) :pattern ((user_eq15 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_310 us_rep2)
  (temp___skip_top_level_311 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_311 true))
                                         (= (length1 temp___expr_310) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length1 (model__ container)) (length4 container)) :pattern (
  (model__ container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty1 container) true) (= (length4 container) 0)) :pattern (
  (is_empty1 container)) )))

(define-fun dynamic_invariant13 ((temp___expr_262 Int)
  (temp___is_init_259 Bool) (temp___skip_constant_260 Bool)
  (temp___do_toplevel_261 Bool)) Bool (=>
                                      (or (= temp___is_init_259 true)
                                      (<= 0 2147483646)) (in_range11
                                      temp___expr_262)))

(declare-sort extended_index1 0)

(define-fun in_range16 ((x Int)) Bool (and (<= (- 1) x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq23 (extended_index1 extended_index1) Bool)

(declare-fun dummy23 () extended_index1)

(declare-datatypes ()
((extended_index__ref1
 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_2__projection ((a extended_index__ref1)) extended_index1
  (extended_index__content1 a))

(define-fun dynamic_invariant14 ((temp___expr_303 Int)
  (temp___is_init_300 Bool) (temp___skip_constant_301 Bool)
  (temp___do_toplevel_302 Bool)) Bool (=>
                                      (or (= temp___is_init_300 true)
                                      (<= (- 1) 2147483646)) (in_range16
                                      temp___expr_303)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length1 container)))
     (and (<= (+ (- 1) result) 2147483646) (dynamic_invariant10 result true
     false true))) :pattern ((length1 container)) )))

(declare-sort element_type1 0)

(define-fun in_range17 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)

(declare-fun user_eq24 (element_type1 element_type1) Bool)

(declare-fun dummy24 () element_type1)

(declare-datatypes ()
((element_type__ref3
 (mk_element_type__ref3 (element_type__content3 element_type1)))))
(define-fun element_type__ref_2__projection ((a element_type__ref3)) element_type1
  (element_type__content3 a))

(define-fun dynamic_invariant15 ((temp___expr_297 Int)
  (temp___is_init_294 Bool) (temp___skip_constant_295 Bool)
  (temp___do_toplevel_296 Bool)) Bool (=>
                                      (or (= temp___is_init_294 true)
                                      (<= 0 255)) (in_range17
                                      temp___expr_297)))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant14 position true true true)
     (and (<= 0 position) (<= position (last2 container))))
     (dynamic_invariant15 (get container position) true false true)) :pattern (
  (get container position)) ))))

(declare-sort extended_index2 0)

(define-fun in_range18 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE17 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check17 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE17 (us_image) Int)

(declare-fun user_eq25 (extended_index2 extended_index2) Bool)

(declare-fun dummy25 () extended_index2)

(declare-datatypes ()
((extended_index__ref2
 (mk_extended_index__ref2 (extended_index__content2 extended_index2)))))
(define-fun extended_index__ref_3__projection ((a extended_index__ref2)) extended_index2
  (extended_index__content2 a))

(define-fun dynamic_invariant16 ((temp___expr_349 Int)
  (temp___is_init_346 Bool) (temp___skip_constant_347 Bool)
  (temp___do_toplevel_348 Bool)) Bool (=>
                                      (or (= temp___is_init_346 true)
                                      (<= 0 2147483647)) (in_range18
                                      temp___expr_349)))

(define-fun dynamic_invariant17 ((temp___expr_355 Int)
  (temp___is_init_352 Bool) (temp___skip_constant_353 Bool)
  (temp___do_toplevel_354 Bool)) Bool (=>
                                      (or (= temp___is_init_352 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_355)))

(define-fun capacity1 ((container us_rep)) Int (ite (= (of_int 0) true)
                                               (to_rep3
                                               (rec__names__entry_tables__vector__capacity
                                               (us_split_discrs1 container)))
                                               2147483647))

(declare-fun capacity__function_guard1 (Int us_rep) Bool)

(declare-fun length5 (us_rep) Int)

(declare-fun length__function_guard3 (Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length5 container)))
     (and (<= result (capacity1 container)) (dynamic_invariant17 result true
     false true))) :pattern ((length5 container)) )))

(define-fun oeq1 ((left us_rep4)
  (right us_rep4)) Bool (and (= (length2 left) (length2 right)) (ite
                                                                (forall
                                                                ((n1 Int))
                                                                (=>
                                                                (and
                                                                (<= 1 n1)
                                                                (<= n1
                                                                (last3 left)))
                                                                (= (bool_eq3
                                                                   (get1 left
                                                                   n1)
                                                                   (get1
                                                                   right n1)) true)))
                                                                true false)))

(declare-fun oeq__function_guard1 (Bool us_rep4 us_rep4) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (= (user_eq18 a b) (oeq1 a b)) :pattern ((user_eq18 a b)) )))

(define-fun default_initial_assumption3 ((temp___expr_388 us_rep4)
  (temp___skip_top_level_389 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_389 true))
                                         (= (length2 temp___expr_388) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length2 (model__1 container)) (length5 container)) :pattern (
  (model__1 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length5 container) 0)) :pattern (
  (is_empty container)) )))

(define-fun dynamic_invariant18 ((temp___expr_334 Int)
  (temp___is_init_331 Bool) (temp___skip_constant_332 Bool)
  (temp___do_toplevel_333 Bool)) Bool (=>
                                      (or (= temp___is_init_331 true)
                                      (<= 1 2147483647)) (in_range13
                                      temp___expr_334)))

(declare-sort extended_index3 0)

(define-fun in_range19 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE18 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check18 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE18 (us_image) Int)

(declare-fun user_eq26 (extended_index3 extended_index3) Bool)

(declare-fun dummy26 () extended_index3)

(declare-datatypes ()
((extended_index__ref3
 (mk_extended_index__ref3 (extended_index__content3 extended_index3)))))
(define-fun extended_index__ref_4__projection ((a extended_index__ref3)) extended_index3
  (extended_index__content3 a))

(define-fun dynamic_invariant19 ((temp___expr_381 Int)
  (temp___is_init_378 Bool) (temp___skip_constant_379 Bool)
  (temp___do_toplevel_380 Bool)) Bool (=>
                                      (or (= temp___is_init_378 true)
                                      (<= 0 2147483647)) (in_range19
                                      temp___expr_381)))

;; length__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (length2 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant10 result true false
     true))) :pattern ((length2 container)) )))

;; get__post_axiom
  (assert true)

(declare-fun names__to_string__result () (Array Int character))

(declare-fun names__to_string__result1 () t)

(declare-fun o () Int)

(declare-fun names__to_string__result2 () (Array Int character))

(declare-fun names__to_string__result3 () t)

(declare-fun names__to_string__result4 () (Array Int character))

(declare-fun names__to_string__result5 () t)

;; H
  (assert
  (= 1024 (to_rep4
          (rec__names__char_tables__vector__capacity
          char_table__split_discrs))))

;; H
  (assert
  (= 128 (to_rep3
         (rec__names__entry_tables__vector__capacity
         entry_table__split_discrs))))

;; H
  (assert (in_range4 n))

;; H
  (assert (= (invariant__ Tuple0) true))

;; H
  (assert (not (= n 0)))

;; H
  (assert (= names__to_string__result names__to_string__result4))

;; H
  (assert (= names__to_string__result1 names__to_string__result5))

;; H
  (assert (= names__to_string__result2 names__to_string__result4))

;; H
  (assert (= names__to_string__result3 names__to_string__result5))

;; H
  (assert (and (= o n) (in_range13 n)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (<= 1 o)))
(check-sat)
(exit)
