;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ((string__ref 0))
(((mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort tokenidt 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (tokenidt tokenidt) Bool)

(declare-const dummy4 tokenidt)

(declare-datatypes ((tokenidt__ref 0))
(((mk_tokenidt__ref (tokenidt__content tokenidt)))))
(define-fun tokenidt__ref___projection ((a tokenidt__ref)) tokenidt (tokenidt__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_251 Int)
  (temp___is_init_248 Bool) (temp___skip_constant_249 Bool)
  (temp___do_toplevel_250 Bool)) Bool (=>
                                      (or (= temp___is_init_248 true)
                                      (<= 0 4294967295)) (in_range4
                                      temp___expr_251)))

(declare-sort serialnumbert 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (serialnumbert serialnumbert) Bool)

(declare-const dummy5 serialnumbert)

(declare-datatypes ((serialnumbert__ref 0))
(((mk_serialnumbert__ref (serialnumbert__content serialnumbert)))))
(define-fun serialnumbert__ref___projection ((a serialnumbert__ref)) serialnumbert
  (serialnumbert__content a))

(declare-fun to_rep2 (serialnumbert) Int)

(declare-fun of_rep2 (Int) serialnumbert)

;; inversion_axiom
  (assert
  (forall ((x serialnumbert))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x serialnumbert)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort namecountt 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 40)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (namecountt namecountt) Bool)

(declare-const dummy6 namecountt)

(declare-datatypes ((namecountt__ref 0))
(((mk_namecountt__ref (namecountt__content namecountt)))))
(define-fun namecountt__ref___projection ((a namecountt__ref)) namecountt
  (namecountt__content a))

(declare-fun to_rep3 (namecountt) Int)

(declare-fun of_rep3 (Int) namecountt)

;; inversion_axiom
  (assert
  (forall ((x namecountt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x namecountt)) (! (in_range6
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-const dummy7 (Array Int character))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int character) (Array Int character)) Bool)

(declare-sort issueridt 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (issueridt issueridt) Bool)

(declare-const dummy8 issueridt)

(declare-datatypes ((issueridt__ref 0))
(((mk_issueridt__ref (issueridt__content issueridt)))))
(define-fun issueridt__ref___projection ((a issueridt__ref)) issueridt
  (issueridt__content a))

(declare-fun to_rep4 (issueridt) Int)

(declare-fun of_rep4 (Int) issueridt)

;; inversion_axiom
  (assert
  (forall ((x issueridt))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x issueridt)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__cryptotypes__issuert__id issueridt)(rec__cryptotypes__issuert__namelength namecountt)(rec__cryptotypes__issuert__name (Array Int character))))))
(define-fun us_split_fields_ID__projection ((a us_split_fields)) issueridt
  (rec__cryptotypes__issuert__id a))

(define-fun us_split_fields_NameLength__projection ((a us_split_fields)) namecountt
  (rec__cryptotypes__issuert__namelength a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__cryptotypes__issuert__name a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep4
                           (rec__cryptotypes__issuert__id
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__cryptotypes__issuert__id
                                                  (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__cryptotypes__issuert__namelength
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__cryptotypes__issuert__namelength
                                                  (us_split_fields1 b)))))
                        (= (bool_eq
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 a)) 1 40
                           (rec__cryptotypes__issuert__name
                           (us_split_fields1 b)) 1 40) true))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const cryptotypes__issuert__id__first__bit Int)

(declare-const cryptotypes__issuert__id__last__bit Int)

(declare-const cryptotypes__issuert__id__position Int)

;; cryptotypes__issuert__id__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__id__first__bit))

;; cryptotypes__issuert__id__last__bit_axiom
  (assert
  (< cryptotypes__issuert__id__first__bit cryptotypes__issuert__id__last__bit))

;; cryptotypes__issuert__id__position_axiom
  (assert (<= 0 cryptotypes__issuert__id__position))

(declare-const cryptotypes__issuert__namelength__first__bit Int)

(declare-const cryptotypes__issuert__namelength__last__bit Int)

(declare-const cryptotypes__issuert__namelength__position Int)

;; cryptotypes__issuert__namelength__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__first__bit))

;; cryptotypes__issuert__namelength__last__bit_axiom
  (assert
  (< cryptotypes__issuert__namelength__first__bit cryptotypes__issuert__namelength__last__bit))

;; cryptotypes__issuert__namelength__position_axiom
  (assert (<= 0 cryptotypes__issuert__namelength__position))

(declare-const cryptotypes__issuert__name__first__bit Int)

(declare-const cryptotypes__issuert__name__last__bit Int)

(declare-const cryptotypes__issuert__name__position Int)

;; cryptotypes__issuert__name__first__bit_axiom
  (assert (<= 0 cryptotypes__issuert__name__first__bit))

;; cryptotypes__issuert__name__last__bit_axiom
  (assert
  (< cryptotypes__issuert__name__first__bit cryptotypes__issuert__name__last__bit))

;; cryptotypes__issuert__name__position_axiom
  (assert (<= 0 cryptotypes__issuert__name__position))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((issuert__ref 0))
(((mk_issuert__ref (issuert__content us_rep)))))
(define-fun issuert__ref___projection ((a issuert__ref)) us_rep (issuert__content
                                                                a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__certtypes__idt__issuer us_rep)(rec__certtypes__idt__serialnumber serialnumbert)))))
(define-fun us_split_fields_Issuer__projection ((a us_split_fields2)) us_rep
  (rec__certtypes__idt__issuer a))

(define-fun us_split_fields_SerialNumber__projection ((a us_split_fields2)) serialnumbert
  (rec__certtypes__idt__serialnumber a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq2
                            (rec__certtypes__idt__issuer
                            (us_split_fields3 a))
                            (rec__certtypes__idt__issuer
                            (us_split_fields3 b))) true)
                         (= (to_rep2
                            (rec__certtypes__idt__serialnumber
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__certtypes__idt__serialnumber
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const certtypes__idt__issuer__first__bit Int)

(declare-const certtypes__idt__issuer__last__bit Int)

(declare-const certtypes__idt__issuer__position Int)

;; certtypes__idt__issuer__first__bit_axiom
  (assert (<= 0 certtypes__idt__issuer__first__bit))

;; certtypes__idt__issuer__last__bit_axiom
  (assert
  (< certtypes__idt__issuer__first__bit certtypes__idt__issuer__last__bit))

;; certtypes__idt__issuer__position_axiom
  (assert (<= 0 certtypes__idt__issuer__position))

(declare-const certtypes__idt__serialnumber__first__bit Int)

(declare-const certtypes__idt__serialnumber__last__bit Int)

(declare-const certtypes__idt__serialnumber__position Int)

;; certtypes__idt__serialnumber__first__bit_axiom
  (assert (<= 0 certtypes__idt__serialnumber__first__bit))

;; certtypes__idt__serialnumber__last__bit_axiom
  (assert
  (< certtypes__idt__serialnumber__first__bit certtypes__idt__serialnumber__last__bit))

;; certtypes__idt__serialnumber__position_axiom
  (assert (<= 0 certtypes__idt__serialnumber__position))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-const dummy10 us_rep1)

(declare-datatypes ((idt__ref 0)) (((mk_idt__ref (idt__content us_rep1)))))
(define-fun idt__ref___projection ((a idt__ref)) us_rep1 (idt__content a))

(declare-const nodescription (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun audittypes__nodescription__aggregate_def (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___139 Int))
  (forall ((temp___140 Int))
  (= (select (audittypes__nodescription__aggregate_def temp___139) temp___140)
  (of_rep temp___139)))))

(declare-sort algorithmt 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (algorithmt algorithmt) Bool)

(declare-const dummy11 algorithmt)

(declare-datatypes ((algorithmt__ref 0))
(((mk_algorithmt__ref (algorithmt__content algorithmt)))))
(define-fun algorithmt__ref___projection ((a algorithmt__ref)) algorithmt
  (algorithmt__content a))

(declare-fun to_rep5 (algorithmt) Int)

(declare-fun of_rep5 (Int) algorithmt)

;; inversion_axiom
  (assert
  (forall ((x algorithmt))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x algorithmt)) (! (in_range8
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort yearst 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1901 x) (<= x 2099)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (yearst yearst) Bool)

(declare-const dummy12 yearst)

(declare-datatypes ((yearst__ref 0))
(((mk_yearst__ref (yearst__content yearst)))))
(define-fun yearst__ref___projection ((a yearst__ref)) yearst (yearst__content
                                                              a))

(declare-fun to_rep6 (yearst) Int)

(declare-fun of_rep6 (Int) yearst)

;; inversion_axiom
  (assert
  (forall ((x yearst))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x yearst)) (! (in_range9 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-sort monthst 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (monthst monthst) Bool)

(declare-const dummy13 monthst)

(declare-datatypes ((monthst__ref 0))
(((mk_monthst__ref (monthst__content monthst)))))
(define-fun monthst__ref___projection ((a monthst__ref)) monthst (monthst__content
                                                                 a))

(declare-fun to_rep7 (monthst) Int)

(declare-fun of_rep7 (Int) monthst)

;; inversion_axiom
  (assert
  (forall ((x monthst))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x monthst)) (! (in_range10 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(declare-sort dayst 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq14 (dayst dayst) Bool)

(declare-const dummy14 dayst)

(declare-datatypes ((dayst__ref 0))
(((mk_dayst__ref (dayst__content dayst)))))
(define-fun dayst__ref___projection ((a dayst__ref)) dayst (dayst__content a))

(declare-fun to_rep8 (dayst) Int)

(declare-fun of_rep8 (Int) dayst)

;; inversion_axiom
  (assert
  (forall ((x dayst))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x dayst)) (! (in_range11 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                               (of_rep8 x))) )))

(declare-sort millisecst 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 86399999)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq15 (millisecst millisecst) Bool)

(declare-const dummy15 millisecst)

(declare-datatypes ((millisecst__ref 0))
(((mk_millisecst__ref (millisecst__content millisecst)))))
(define-fun millisecst__ref___projection ((a millisecst__ref)) millisecst
  (millisecst__content a))

(declare-fun to_rep9 (millisecst) Int)

(declare-fun of_rep9 (Int) millisecst)

;; inversion_axiom
  (assert
  (forall ((x millisecst))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x millisecst)) (! (in_range12
  (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range12 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                               (of_rep9 x))) )))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__clock__timet__year yearst)(rec__clock__timet__month monthst)(rec__clock__timet__day dayst)(rec__clock__timet__millisec millisecst)))))
(define-fun us_split_fields_Year__projection ((a us_split_fields4)) yearst
  (rec__clock__timet__year a))

(define-fun us_split_fields_Month__projection ((a us_split_fields4)) monthst
  (rec__clock__timet__month a))

(define-fun us_split_fields_Day__projection ((a us_split_fields4)) dayst
  (rec__clock__timet__day a))

(define-fun us_split_fields_MilliSec__projection ((a us_split_fields4)) millisecst
  (rec__clock__timet__millisec a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_6__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep6
                            (rec__clock__timet__year (us_split_fields5 a)))
                         (to_rep6
                         (rec__clock__timet__year (us_split_fields5 b))))
                         (= (to_rep7
                            (rec__clock__timet__month (us_split_fields5 a)))
                         (to_rep7
                         (rec__clock__timet__month (us_split_fields5 b)))))
                         (= (to_rep8
                            (rec__clock__timet__day (us_split_fields5 a)))
                         (to_rep8
                         (rec__clock__timet__day (us_split_fields5 b)))))
                         (= (to_rep9
                            (rec__clock__timet__millisec
                            (us_split_fields5 a))) (to_rep9
                                                   (rec__clock__timet__millisec
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const clock__timet__year__first__bit Int)

(declare-const clock__timet__year__last__bit Int)

(declare-const clock__timet__year__position Int)

;; clock__timet__year__first__bit_axiom
  (assert (<= 0 clock__timet__year__first__bit))

;; clock__timet__year__last__bit_axiom
  (assert (< clock__timet__year__first__bit clock__timet__year__last__bit))

;; clock__timet__year__position_axiom
  (assert (<= 0 clock__timet__year__position))

(declare-const clock__timet__month__first__bit Int)

(declare-const clock__timet__month__last__bit Int)

(declare-const clock__timet__month__position Int)

;; clock__timet__month__first__bit_axiom
  (assert (<= 0 clock__timet__month__first__bit))

;; clock__timet__month__last__bit_axiom
  (assert (< clock__timet__month__first__bit clock__timet__month__last__bit))

;; clock__timet__month__position_axiom
  (assert (<= 0 clock__timet__month__position))

(declare-const clock__timet__day__first__bit Int)

(declare-const clock__timet__day__last__bit Int)

(declare-const clock__timet__day__position Int)

;; clock__timet__day__first__bit_axiom
  (assert (<= 0 clock__timet__day__first__bit))

;; clock__timet__day__last__bit_axiom
  (assert (< clock__timet__day__first__bit clock__timet__day__last__bit))

;; clock__timet__day__position_axiom
  (assert (<= 0 clock__timet__day__position))

(declare-const clock__timet__millisec__first__bit Int)

(declare-const clock__timet__millisec__last__bit Int)

(declare-const clock__timet__millisec__position Int)

;; clock__timet__millisec__first__bit_axiom
  (assert (<= 0 clock__timet__millisec__first__bit))

;; clock__timet__millisec__last__bit_axiom
  (assert
  (< clock__timet__millisec__first__bit clock__timet__millisec__last__bit))

;; clock__timet__millisec__position_axiom
  (assert (<= 0 clock__timet__millisec__position))

(declare-fun user_eq16 (us_rep2 us_rep2) Bool)

(declare-const dummy16 us_rep2)

(declare-datatypes ((timet__ref 0))
(((mk_timet__ref (timet__content us_rep2)))))
(define-fun timet__ref___projection ((a timet__ref)) us_rep2 (timet__content
                                                             a))

(declare-datatypes ((us_split_fields6 0))
(((mk___split_fields3
  (rec__cert__contentst__id us_rep1)(rec__cert__contentst__notbefore us_rep2)(rec__cert__contentst__notafter us_rep2)(rec__cert__contentst__mechanism algorithmt)))))
(define-fun us_split_fields_ID3__projection ((a us_split_fields6)) us_rep1
  (rec__cert__contentst__id a))

(define-fun us_split_fields_NotBefore__projection ((a us_split_fields6)) us_rep2
  (rec__cert__contentst__notbefore a))

(define-fun us_split_fields_NotAfter__projection ((a us_split_fields6)) us_rep2
  (rec__cert__contentst__notafter a))

(define-fun us_split_fields_Mechanism__projection ((a us_split_fields6)) algorithmt
  (rec__cert__contentst__mechanism a))

(declare-datatypes ((us_split_fields__ref3 0))
(((mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_10__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_11__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                 a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq3
                            (rec__cert__contentst__id (us_split_fields7 a))
                            (rec__cert__contentst__id (us_split_fields7 b))) true)
                         (= (bool_eq4
                            (rec__cert__contentst__notbefore
                            (us_split_fields7 a))
                            (rec__cert__contentst__notbefore
                            (us_split_fields7 b))) true))
                         (= (bool_eq4
                            (rec__cert__contentst__notafter
                            (us_split_fields7 a))
                            (rec__cert__contentst__notafter
                            (us_split_fields7 b))) true))
                         (= (to_rep5
                            (rec__cert__contentst__mechanism
                            (us_split_fields7 a))) (to_rep5
                                                   (rec__cert__contentst__mechanism
                                                   (us_split_fields7 b)))))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-const cert__contentst__id__first__bit Int)

(declare-const cert__contentst__id__last__bit Int)

(declare-const cert__contentst__id__position Int)

;; cert__contentst__id__first__bit_axiom
  (assert (<= 0 cert__contentst__id__first__bit))

;; cert__contentst__id__last__bit_axiom
  (assert (< cert__contentst__id__first__bit cert__contentst__id__last__bit))

;; cert__contentst__id__position_axiom
  (assert (<= 0 cert__contentst__id__position))

(declare-const cert__contentst__notbefore__first__bit Int)

(declare-const cert__contentst__notbefore__last__bit Int)

(declare-const cert__contentst__notbefore__position Int)

;; cert__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__contentst__notbefore__first__bit))

;; cert__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__contentst__notbefore__first__bit cert__contentst__notbefore__last__bit))

;; cert__contentst__notbefore__position_axiom
  (assert (<= 0 cert__contentst__notbefore__position))

(declare-const cert__contentst__notafter__first__bit Int)

(declare-const cert__contentst__notafter__last__bit Int)

(declare-const cert__contentst__notafter__position Int)

;; cert__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__contentst__notafter__first__bit))

;; cert__contentst__notafter__last__bit_axiom
  (assert
  (< cert__contentst__notafter__first__bit cert__contentst__notafter__last__bit))

;; cert__contentst__notafter__position_axiom
  (assert (<= 0 cert__contentst__notafter__position))

(declare-const cert__contentst__mechanism__first__bit Int)

(declare-const cert__contentst__mechanism__last__bit Int)

(declare-const cert__contentst__mechanism__position Int)

;; cert__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__contentst__mechanism__first__bit))

;; cert__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__contentst__mechanism__first__bit cert__contentst__mechanism__last__bit))

;; cert__contentst__mechanism__position_axiom
  (assert (<= 0 cert__contentst__mechanism__position))

(declare-fun user_eq17 (us_rep3 us_rep3) Bool)

(declare-const dummy17 us_rep3)

(declare-datatypes ((contentst__ref 0))
(((mk_contentst__ref (contentst__content us_rep3)))))
(define-fun contentst__ref___projection ((a contentst__ref)) us_rep3
  (contentst__content a))

(declare-fun theid (us_rep3) us_rep1)

(declare-fun theid__function_guard (us_rep1 us_rep3) Bool)

;; theid__post_axiom
  (assert true)

(declare-sort keyidt 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq18 (keyidt keyidt) Bool)

(declare-const dummy18 keyidt)

(declare-datatypes ((keyidt__ref 0))
(((mk_keyidt__ref (keyidt__content keyidt)))))
(define-fun keyidt__ref___projection ((a keyidt__ref)) keyidt (keyidt__content
                                                              a))

(declare-fun to_rep10 (keyidt) Int)

(declare-fun of_rep10 (Int) keyidt)

;; inversion_axiom
  (assert
  (forall ((x keyidt))
  (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; range_axiom
  (assert
  (forall ((x keyidt)) (! (in_range13
  (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range13 x) (= (to_rep10 (of_rep10 x)) x)) :pattern ((to_rep10
                                                                 (of_rep10 x))) )))

(declare-sort keylengtht 0)

(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq19 (keylengtht keylengtht) Bool)

(declare-const dummy19 keylengtht)

(declare-datatypes ((keylengtht__ref 0))
(((mk_keylengtht__ref (keylengtht__content keylengtht)))))
(define-fun keylengtht__ref___projection ((a keylengtht__ref)) keylengtht
  (keylengtht__content a))

(declare-fun to_rep11 (keylengtht) Int)

(declare-fun of_rep11 (Int) keylengtht)

;; inversion_axiom
  (assert
  (forall ((x keylengtht))
  (! (= (of_rep11 (to_rep11 x)) x) :pattern ((to_rep11 x)) )))

;; range_axiom
  (assert
  (forall ((x keylengtht)) (! (in_range14
  (to_rep11 x)) :pattern ((to_rep11 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range14 x) (= (to_rep11 (of_rep11 x)) x)) :pattern ((to_rep11
                                                                 (of_rep11 x))) )))

(declare-datatypes ((us_split_fields8 0))
(((mk___split_fields4
  (rec__cryptotypes__keypartt__algorithmid algorithmt)(rec__cryptotypes__keypartt__keyid keyidt)(rec__cryptotypes__keypartt__keylength keylengtht)))))
(define-fun us_split_fields_AlgorithmID__projection ((a us_split_fields8)) algorithmt
  (rec__cryptotypes__keypartt__algorithmid a))

(define-fun us_split_fields_KeyID__projection ((a us_split_fields8)) keyidt
  (rec__cryptotypes__keypartt__keyid a))

(define-fun us_split_fields_KeyLength__projection ((a us_split_fields8)) keylengtht
  (rec__cryptotypes__keypartt__keylength a))

(declare-datatypes ((us_split_fields__ref4 0))
(((mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep4 0))
(((mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep_2__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                a))

(define-fun bool_eq6 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (and
                         (= (to_rep5
                            (rec__cryptotypes__keypartt__algorithmid
                            (us_split_fields9 a))) (to_rep5
                                                   (rec__cryptotypes__keypartt__algorithmid
                                                   (us_split_fields9 b))))
                         (= (to_rep10
                            (rec__cryptotypes__keypartt__keyid
                            (us_split_fields9 a))) (to_rep10
                                                   (rec__cryptotypes__keypartt__keyid
                                                   (us_split_fields9 b)))))
                         (= (to_rep11
                            (rec__cryptotypes__keypartt__keylength
                            (us_split_fields9 a))) (to_rep11
                                                   (rec__cryptotypes__keypartt__keylength
                                                   (us_split_fields9 b)))))
                    true false))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep4) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))

(declare-const cryptotypes__keypartt__algorithmid__first__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__last__bit Int)

(declare-const cryptotypes__keypartt__algorithmid__position Int)

;; cryptotypes__keypartt__algorithmid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__first__bit))

;; cryptotypes__keypartt__algorithmid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__algorithmid__first__bit cryptotypes__keypartt__algorithmid__last__bit))

;; cryptotypes__keypartt__algorithmid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__algorithmid__position))

(declare-const cryptotypes__keypartt__keyid__first__bit Int)

(declare-const cryptotypes__keypartt__keyid__last__bit Int)

(declare-const cryptotypes__keypartt__keyid__position Int)

;; cryptotypes__keypartt__keyid__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__first__bit))

;; cryptotypes__keypartt__keyid__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keyid__first__bit cryptotypes__keypartt__keyid__last__bit))

;; cryptotypes__keypartt__keyid__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keyid__position))

(declare-const cryptotypes__keypartt__keylength__first__bit Int)

(declare-const cryptotypes__keypartt__keylength__last__bit Int)

(declare-const cryptotypes__keypartt__keylength__position Int)

;; cryptotypes__keypartt__keylength__first__bit_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__first__bit))

;; cryptotypes__keypartt__keylength__last__bit_axiom
  (assert
  (< cryptotypes__keypartt__keylength__first__bit cryptotypes__keypartt__keylength__last__bit))

;; cryptotypes__keypartt__keylength__position_axiom
  (assert (<= 0 cryptotypes__keypartt__keylength__position))

(declare-fun user_eq20 (us_rep4 us_rep4) Bool)

(declare-const dummy20 us_rep4)

(declare-datatypes ((keypartt__ref 0))
(((mk_keypartt__ref (keypartt__content us_rep4)))))
(define-fun keypartt__ref___projection ((a keypartt__ref)) us_rep4 (keypartt__content
                                                                   a))

(declare-datatypes ((us_split_fields10 0))
(((mk___split_fields5
  (rec__cert__id__contentst__id us_rep1)(rec__cert__id__contentst__notbefore us_rep2)(rec__cert__id__contentst__notafter us_rep2)(rec__cert__id__contentst__mechanism algorithmt)(rec__cert__id__contentst__subject us_rep)(rec__cert__id__contentst__subjectpublickey us_rep4)))))
(define-fun us_split_fields_ID6__projection ((a us_split_fields10)) us_rep1
  (rec__cert__id__contentst__id a))

(define-fun us_split_fields_NotBefore4__projection ((a us_split_fields10)) us_rep2
  (rec__cert__id__contentst__notbefore a))

(define-fun us_split_fields_NotAfter4__projection ((a us_split_fields10)) us_rep2
  (rec__cert__id__contentst__notafter a))

(define-fun us_split_fields_Mechanism4__projection ((a us_split_fields10)) algorithmt
  (rec__cert__id__contentst__mechanism a))

(define-fun us_split_fields_Subject__projection ((a us_split_fields10)) us_rep
  (rec__cert__id__contentst__subject a))

(define-fun us_split_fields_SubjectPublicKey__projection ((a us_split_fields10)) us_rep4
  (rec__cert__id__contentst__subjectpublickey a))

(declare-datatypes ((us_split_fields__ref5 0))
(((mk___split_fields__ref5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref_13__projection ((a us_split_fields__ref5)) us_split_fields10
  (us_split_fields__content5 a))

(declare-datatypes ((us_rep5 0))
(((mk___rep5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep_14__projection ((a us_rep5)) us_split_fields10 (us_split_fields11
                                                                  a))

(define-fun bool_eq7 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (= (bool_eq3
                            (rec__cert__id__contentst__id
                            (us_split_fields11 a))
                            (rec__cert__id__contentst__id
                            (us_split_fields11 b))) true)
                         (= (bool_eq4
                            (rec__cert__id__contentst__notbefore
                            (us_split_fields11 a))
                            (rec__cert__id__contentst__notbefore
                            (us_split_fields11 b))) true))
                         (= (bool_eq4
                            (rec__cert__id__contentst__notafter
                            (us_split_fields11 a))
                            (rec__cert__id__contentst__notafter
                            (us_split_fields11 b))) true))
                         (= (to_rep5
                            (rec__cert__id__contentst__mechanism
                            (us_split_fields11 a))) (to_rep5
                                                    (rec__cert__id__contentst__mechanism
                                                    (us_split_fields11 b)))))
                         (= (bool_eq2
                            (rec__cert__id__contentst__subject
                            (us_split_fields11 a))
                            (rec__cert__id__contentst__subject
                            (us_split_fields11 b))) true))
                         (= (bool_eq6
                            (rec__cert__id__contentst__subjectpublickey
                            (us_split_fields11 a))
                            (rec__cert__id__contentst__subjectpublickey
                            (us_split_fields11 b))) true))
                    true false))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep5) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment7 a))))

(declare-const cert__id__contentst__id__first__bit Int)

(declare-const cert__id__contentst__id__last__bit Int)

(declare-const cert__id__contentst__id__position Int)

;; cert__id__contentst__id__first__bit_axiom
  (assert (<= 0 cert__id__contentst__id__first__bit))

;; cert__id__contentst__id__last__bit_axiom
  (assert
  (< cert__id__contentst__id__first__bit cert__id__contentst__id__last__bit))

;; cert__id__contentst__id__position_axiom
  (assert (<= 0 cert__id__contentst__id__position))

(declare-const cert__id__contentst__notbefore__first__bit Int)

(declare-const cert__id__contentst__notbefore__last__bit Int)

(declare-const cert__id__contentst__notbefore__position Int)

;; cert__id__contentst__notbefore__first__bit_axiom
  (assert (<= 0 cert__id__contentst__notbefore__first__bit))

;; cert__id__contentst__notbefore__last__bit_axiom
  (assert
  (< cert__id__contentst__notbefore__first__bit cert__id__contentst__notbefore__last__bit))

;; cert__id__contentst__notbefore__position_axiom
  (assert (<= 0 cert__id__contentst__notbefore__position))

(declare-const cert__id__contentst__notafter__first__bit Int)

(declare-const cert__id__contentst__notafter__last__bit Int)

(declare-const cert__id__contentst__notafter__position Int)

;; cert__id__contentst__notafter__first__bit_axiom
  (assert (<= 0 cert__id__contentst__notafter__first__bit))

;; cert__id__contentst__notafter__last__bit_axiom
  (assert
  (< cert__id__contentst__notafter__first__bit cert__id__contentst__notafter__last__bit))

;; cert__id__contentst__notafter__position_axiom
  (assert (<= 0 cert__id__contentst__notafter__position))

(declare-const cert__id__contentst__mechanism__first__bit Int)

(declare-const cert__id__contentst__mechanism__last__bit Int)

(declare-const cert__id__contentst__mechanism__position Int)

;; cert__id__contentst__mechanism__first__bit_axiom
  (assert (<= 0 cert__id__contentst__mechanism__first__bit))

;; cert__id__contentst__mechanism__last__bit_axiom
  (assert
  (< cert__id__contentst__mechanism__first__bit cert__id__contentst__mechanism__last__bit))

;; cert__id__contentst__mechanism__position_axiom
  (assert (<= 0 cert__id__contentst__mechanism__position))

(declare-const cert__id__contentst__subject__first__bit Int)

(declare-const cert__id__contentst__subject__last__bit Int)

(declare-const cert__id__contentst__subject__position Int)

;; cert__id__contentst__subject__first__bit_axiom
  (assert (<= 0 cert__id__contentst__subject__first__bit))

;; cert__id__contentst__subject__last__bit_axiom
  (assert
  (< cert__id__contentst__subject__first__bit cert__id__contentst__subject__last__bit))

;; cert__id__contentst__subject__position_axiom
  (assert (<= 0 cert__id__contentst__subject__position))

(declare-const cert__id__contentst__subjectpublickey__first__bit Int)

(declare-const cert__id__contentst__subjectpublickey__last__bit Int)

(declare-const cert__id__contentst__subjectpublickey__position Int)

;; cert__id__contentst__subjectpublickey__first__bit_axiom
  (assert (<= 0 cert__id__contentst__subjectpublickey__first__bit))

;; cert__id__contentst__subjectpublickey__last__bit_axiom
  (assert
  (< cert__id__contentst__subjectpublickey__first__bit cert__id__contentst__subjectpublickey__last__bit))

;; cert__id__contentst__subjectpublickey__position_axiom
  (assert (<= 0 cert__id__contentst__subjectpublickey__position))

(declare-fun user_eq21 (us_rep5 us_rep5) Bool)

(declare-const dummy21 us_rep5)

(declare-datatypes ((contentst__ref1 0))
(((mk_contentst__ref1 (contentst__content1 us_rep5)))))
(define-fun contentst__ref_4__projection ((a contentst__ref1)) us_rep5
  (contentst__content1 a))

(declare-fun cert_id_to_cert (us_rep5) us_rep3)

(declare-fun cert_id_to_cert__function_guard (us_rep3 us_rep5) Bool)

;; cert_id_to_cert__post_axiom
  (assert true)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun makedescription (us_t) (Array Int character))

(declare-fun makedescription__function_guard ((Array Int character)
  us_t) Bool)

;; makedescription__post_axiom
  (assert true)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-fun temp___String_Literal_1383 (tuple0) (Array Int character))

;; temp___String_Literal_1383__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 1)) 73)
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 2)) 68))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 4)) 67))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 7)) 116))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 8)) 105))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 9)) 102))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 10)) 105))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 11)) 99))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 12)) 97))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 13)) 116))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 14)) 101))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 16)) 78))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 17)) 111))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 18)) 116))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 20)) 86))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 21)) 101))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 22)) 114))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 23)) 105))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 24)) 102))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 25)) 105))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 26)) 97))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 27)) 98))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 28)) 108))
     (= (to_rep (select (temp___String_Literal_1383 us_void_param) 29)) 101)) :pattern (
  (temp___String_Literal_1383 us_void_param)) )))

(declare-fun temp___String_Literal_1384 (tuple0) (Array Int character))

;; temp___String_Literal_1384__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 1)) 73)
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 2)) 68))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 4)) 67))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 7)) 116))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 8)) 105))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 9)) 102))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 10)) 105))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 11)) 99))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 12)) 97))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 13)) 116))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 14)) 101))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 16)) 66))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 17)) 97))
     (= (to_rep (select (temp___String_Literal_1384 us_void_param) 18)) 100)) :pattern (
  (temp___String_Literal_1384 us_void_param)) )))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; nodescription__def_axiom
  (assert (= nodescription (audittypes__nodescription__aggregate_def 32)))

(define-fun dynamic_invariant5 ((temp___expr_341 Int)
  (temp___is_init_338 Bool) (temp___skip_constant_339 Bool)
  (temp___do_toplevel_340 Bool)) Bool (=>
                                      (or (= temp___is_init_338 true)
                                      (<= 1901 2099)) (in_range9
                                      temp___expr_341)))

(define-fun dynamic_invariant6 ((temp___expr_347 Int)
  (temp___is_init_344 Bool) (temp___skip_constant_345 Bool)
  (temp___do_toplevel_346 Bool)) Bool (=>
                                      (or (= temp___is_init_344 true)
                                      (<= 1 12)) (in_range10
                                      temp___expr_347)))

(define-fun dynamic_invariant7 ((temp___expr_353 Int)
  (temp___is_init_350 Bool) (temp___skip_constant_351 Bool)
  (temp___do_toplevel_352 Bool)) Bool (=>
                                      (or (= temp___is_init_350 true)
                                      (<= 1 31)) (in_range11
                                      temp___expr_353)))

(define-fun dynamic_invariant8 ((temp___expr_377 Int)
  (temp___is_init_374 Bool) (temp___skip_constant_375 Bool)
  (temp___do_toplevel_376 Bool)) Bool (=>
                                      (or (= temp___is_init_374 true)
                                      (<= 0 86399999)) (in_range12
                                      temp___expr_377)))

(define-fun dynamic_invariant9 ((temp___expr_179 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)) Bool (=>
                                      (or (= temp___is_init_176 true)
                                      (<= 0 40)) (in_range6 temp___expr_179)))

(define-fun dynamic_invariant10 ((temp___expr_200 Int)
  (temp___is_init_197 Bool) (temp___skip_constant_198 Bool)
  (temp___do_toplevel_199 Bool)) Bool (=>
                                      (or (= temp___is_init_197 true)
                                      (<= 0 4294967295)) (in_range7
                                      temp___expr_200)))

(define-fun dynamic_invariant11 ((temp___expr_218 Int)
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)) Bool (=>
                                      (or (= temp___is_init_215 true)
                                      (<= 0 10)) (in_range8 temp___expr_218)))

(define-fun dynamic_invariant12 ((temp___expr_230 Int)
  (temp___is_init_227 Bool) (temp___skip_constant_228 Bool)
  (temp___do_toplevel_229 Bool)) Bool (=>
                                      (or (= temp___is_init_227 true)
                                      (<= 0 4294967295)) (in_range13
                                      temp___expr_230)))

(define-fun dynamic_invariant13 ((temp___expr_236 Int)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (=>
                                      (or (= temp___is_init_233 true)
                                      (<= 0 128)) (in_range14
                                      temp___expr_236)))

(define-fun dynamic_invariant14 ((temp___expr_321 Int)
  (temp___is_init_318 Bool) (temp___skip_constant_319 Bool)
  (temp___do_toplevel_320 Bool)) Bool (=>
                                      (or (= temp___is_init_318 true)
                                      (<= 0 4294967295)) (in_range5
                                      temp___expr_321)))

(declare-const filestate us_private)

(declare-const state us_private)

(declare-const tokenid Int)

(declare-const idvalid Bool)

(declare-const idcertcontents__split_fields us_split_fields__ref5)

(declare-const extractok Bool)

(declare-const verified Bool)

(declare-const tokenidmatches Bool)

(declare-const o us_rep3)

(declare-const o1 issueridt)

(declare-const o2 namecountt)

(declare-const o3 (Array Int character))

(declare-const o4 serialnumbert)

(declare-const o5 issueridt)

(declare-const o6 namecountt)

(declare-const o7 (Array Int character))

(declare-const o8 serialnumbert)

(declare-const o9 serialnumbert)

(declare-const o10 Int)

(declare-const o11 Bool)

(declare-const o12 us_rep3)

(declare-const filestate1 us_private)

(declare-const state1 us_private)

(declare-const idcertcontents__split_fields1 us_split_fields10)

(declare-const result Bool)

(declare-const extractok1 Bool)

(declare-const result1 Bool)

(declare-const verified1 Bool)

(declare-const result2 Bool)

(declare-const tokenidmatches1 Bool)

(declare-const certfound Bool)

(declare-const idcertcontents__split_fields2 us_split_fields10)

(declare-const extractok2 Bool)

(declare-const result3 Bool)

(declare-const tokenidmatches2 Bool)

(declare-const filestate2 us_private)

(declare-const state2 us_private)

(declare-const verified2 Bool)

(declare-const result4 bool__ref)

(declare-const idvalid1 Bool)

;; H
  (assert (= (audittypes__nodescription__aggregate_def 32) nodescription))

;; H
  (assert (in_range4 tokenid))

;; H
  (assert (= result extractok))

;; H
  (assert (= extractok1 (of_int 0)))

;; H
  (assert (= result1 verified))

;; H
  (assert (= verified1 (of_int 0)))

;; H
  (assert (= result2 tokenidmatches))

;; H
  (assert (= tokenidmatches1 (of_int 0)))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true)
  (= o (cert_id_to_cert
       (mk___rep5
       (let ((subject idcertcontents__split_fields))
       idcertcontents__split_fields2)))))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true)
  (= (mk___rep1
     (mk___split_fields1 (mk___rep (mk___split_fields o1 o2 o3)) o4))
  (theid o)))))

;; H
  (assert (=> (= certfound true) (=> (= extractok2 true) (= o1 o5))))

;; H
  (assert (=> (= certfound true) (=> (= extractok2 true) (= o2 o6))))

;; H
  (assert (=> (= certfound true) (=> (= extractok2 true) (= o3 o7))))

;; H
  (assert (=> (= certfound true) (=> (= extractok2 true) (= o4 o8))))

;; H
  (assert (=> (= certfound true) (=> (= extractok2 true) (= o9 o8))))

;; H
  (assert
  (=> (= certfound true) (=> (= extractok2 true) (= o10 (to_rep2 o9)))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true) (= o11 (ite (= tokenid o10) true false)))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true) (= result3 tokenidmatches1))))

;; H
  (assert
  (=> (= certfound true) (=> (= extractok2 true) (= tokenidmatches2 o11))))

;; H
  (assert
  (=> (= certfound true)
  (=> (= extractok2 true)
  (= o12 (cert_id_to_cert
         (mk___rep5
         (let ((subject idcertcontents__split_fields))
         idcertcontents__split_fields2)))))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= tokenidmatches2 tokenidmatches1))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= verified2 verified1))))

;; H
  (assert
  (=> (= certfound true) (=> (not (= extractok2 true)) (= state2 state))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= filestate2 filestate))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= tokenidmatches2 tokenidmatches1))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= verified2 verified1))))

;; H
  (assert
  (=> (= certfound true) (=> (not (= extractok2 true)) (= state2 state1))))

;; H
  (assert
  (=> (= certfound true)
  (=> (not (= extractok2 true)) (= filestate2 filestate1))))

;; H
  (assert (=> (not (= certfound true)) (= tokenidmatches2 tokenidmatches1)))

;; H
  (assert (=> (not (= certfound true)) (= verified2 verified1)))

;; H
  (assert (=> (not (= certfound true)) (= extractok2 extractok1)))

;; H
  (assert
  (=> (not (= certfound true))
  (= (let ((subject idcertcontents__split_fields))
     (mk___split_fields__ref5 idcertcontents__split_fields2)) idcertcontents__split_fields)))

;; H
  (assert (=> (not (= certfound true)) (= state2 state)))

;; H
  (assert (=> (not (= certfound true)) (= filestate2 filestate)))

;; H
  (assert (=> (not (= certfound true)) (= tokenidmatches2 tokenidmatches1)))

;; H
  (assert (=> (not (= certfound true)) (= verified2 verified1)))

;; H
  (assert (=> (not (= certfound true)) (= extractok2 extractok1)))

;; H
  (assert
  (=> (not (= certfound true))
  (= idcertcontents__split_fields2 idcertcontents__split_fields1)))

;; H
  (assert (=> (not (= certfound true)) (= state2 state1)))

;; H
  (assert (=> (not (= certfound true)) (= filestate2 filestate1)))

;; H
  (assert (= result4 (mk_bool__ref idvalid)))

;; H
  (assert
  (= idvalid1 (ite (= (ite (= (ite (= certfound true) extractok2 false) true)
                      tokenidmatches2 false) true) verified2 false)))

;; H
  (assert (not (not (= certfound true))))

;; H
  (assert (not (not (= extractok2 true))))

;; H
  (assert (not (not (= tokenidmatches2 true))))

;; H
  (assert (not (= verified2 true)))

(assert
;; WP_parameter_def
 ;; File "audittypes.ads", line 92, characters 0-0
  (not (= (to_rep1 (first (mk 1 29))) 1)))
(check-sat)
(exit)
