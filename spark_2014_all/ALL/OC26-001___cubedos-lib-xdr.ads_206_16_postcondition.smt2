;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 32) Int) Bool)

(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv1 x ((_ int2bv 32) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort xdr_unsigned 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))

(declare-fun user_eq (xdr_unsigned xdr_unsigned) Bool)

(declare-const dummy xdr_unsigned)

(declare-datatypes ()
((xdr_unsigned__ref
 (mk_xdr_unsigned__ref (xdr_unsigned__content xdr_unsigned)))))
(define-fun xdr_unsigned__ref___projection ((a xdr_unsigned__ref)) xdr_unsigned
  (xdr_unsigned__content a))

(define-fun dynamic_invariant ((temp___expr_142 (_ BitVec 32))
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool true)

(declare-sort octet 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (octet octet) Bool)

(declare-const dummy1 octet)

(declare-datatypes () ((octet__ref (mk_octet__ref (octet__content octet)))))
(define-fun octet__ref___projection ((a octet__ref)) octet (octet__content a))

(declare-fun to_rep (octet) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) octet)

;; inversion_axiom
  (assert
  (forall ((x octet)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x octet)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x octet)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort octet_array_index 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 65535)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (octet_array_index octet_array_index) Bool)

(declare-const dummy2 octet_array_index)

(declare-datatypes ()
((octet_array_index__ref
 (mk_octet_array_index__ref (octet_array_index__content octet_array_index)))))
(define-fun octet_array_index__ref___projection ((a octet_array_index__ref)) octet_array_index
  (octet_array_index__content a))

(define-fun dynamic_invariant1 ((temp___expr_172 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (=>
                                      (or (= temp___is_init_169 true)
                                      (<= 0 65535)) (in_range1
                                      temp___expr_172)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int octet))))))
(declare-fun slide ((Array Int octet) Int Int) (Array Int octet))

;; slide_eq
  (assert
  (forall ((a (Array Int octet)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int octet)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int octet) Int Int (Array Int octet) Int
  Int) (Array Int octet))

;; concat_def
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (octet Int) (Array Int octet))

;; singleton_def
  (assert
  (forall ((v octet))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int octet)) (a__first Int) (a__last Int)
  (b (Array Int octet)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int octet) Int Int (Array Int octet) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort integer 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int octet))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int octet) (elts a))

(define-fun of_array ((a (Array Int octet)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int octet)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int octet)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int octet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int octet))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ()
((octet_array__ref (mk_octet_array__ref (octet_array__content us_t)))))
(define-fun octet_array__ref___projection ((a octet_array__ref)) us_t
  (octet_array__content a))

(define-fun dynamic_invariant2 ((temp___expr_190 us_t)
  (temp___is_init_187 Bool) (temp___skip_constant_188 Bool)
  (temp___do_toplevel_189 Bool)) Bool (=>
                                      (not (= temp___skip_constant_188 true))
                                      (dynamic_property 0 65535
                                      (first1 temp___expr_190)
                                      (last1 temp___expr_190))))

(declare-const data us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const position Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(define-fun dynamic_invariant4 ((temp___expr_166 (_ BitVec 8))
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)) Bool true)

(declare-const value (_ BitVec 32))

(declare-const last2 Int)

(declare-const temporary_1 (_ BitVec 32))

(declare-const temporary_2 (_ BitVec 32))

(declare-const i Int)

(declare-const o Int)

(declare-const o1 octet)

(declare-const o2 (_ BitVec 8))

(declare-const o3 (_ BitVec 32))

(declare-const o4 Int)

(declare-const o5 octet)

(declare-const o6 (_ BitVec 8))

(declare-const o7 (_ BitVec 32))

(declare-const o8 (_ BitVec 32))

(declare-const o9 Int)

(declare-const o10 octet)

(declare-const o11 (_ BitVec 8))

(declare-const o12 (_ BitVec 32))

(declare-const o13 (_ BitVec 32))

(declare-const o14 Int)

(declare-const o15 octet)

(declare-const o16 (_ BitVec 8))

(declare-const o17 (_ BitVec 32))

(declare-const o18 (_ BitVec 32))

(declare-const o19 Int)

(declare-const result (_ BitVec 32))

(declare-const temporary_11 (_ BitVec 32))

(declare-const result1 Int)

(declare-const i1 Int)

(declare-const result2 (_ BitVec 32))

(declare-const temporary_21 (_ BitVec 32))

(declare-const result3 (_ BitVec 32))

(declare-const temporary_22 (_ BitVec 32))

(declare-const result4 (_ BitVec 32))

(declare-const value1 (_ BitVec 32))

(declare-const result5 (_ BitVec 32))

(declare-const temporary_12 (_ BitVec 32))

(declare-const result6 Int)

(declare-const i2 Int)

(declare-const result7 (_ BitVec 32))

(declare-const temporary_23 (_ BitVec 32))

(declare-const result8 (_ BitVec 32))

(declare-const temporary_24 (_ BitVec 32))

(declare-const result9 (_ BitVec 32))

(declare-const value2 (_ BitVec 32))

(declare-const result10 (_ BitVec 32))

(declare-const temporary_13 (_ BitVec 32))

(declare-const result11 Int)

(declare-const i3 Int)

(declare-const result12 (_ BitVec 32))

(declare-const temporary_25 (_ BitVec 32))

(declare-const result13 (_ BitVec 32))

(declare-const temporary_26 (_ BitVec 32))

(declare-const result14 (_ BitVec 32))

(declare-const value3 (_ BitVec 32))

(declare-const result15 (_ BitVec 32))

(declare-const temporary_14 (_ BitVec 32))

(declare-const result16 int__ref)

(declare-const last3 Int)

(declare-const value4 t__ref1)

(declare-const last4 int__ref)

(declare-const temporary_15 t__ref1)

(declare-const temporary_27 t__ref1)

(declare-const i4 int__ref)

(declare-const value5 (_ BitVec 32))

(declare-const last5 Int)

(declare-const temporary_16 (_ BitVec 32))

(declare-const temporary_28 (_ BitVec 32))

(declare-const i5 Int)

;; H
  (assert (dynamic_invariant2 data true false true))

;; H
  (assert (in_range1 position))

;; H
  (assert (=> (<= 0 65535) (in_range1 last2)))

;; H
  (assert
  (and
  (and (and (= (mod1 position 4) 0) (= (mod1 (length data) 4) 0))
  (and (<= (to_rep1 (first (rt data))) position)
  (<= position (to_rep1 (last (rt data))))))
  (<= (+ position 3) (to_rep1 (last (rt data))))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt data))) position)
  (<= position (to_rep1 (last (rt data))))))

;; H
  (assert (= o position))

;; H
  (assert (= o1 (select (elts data) o)))

;; H
  (assert (= o2 (to_rep o1)))

;; H
  (assert (= o3 ((_ zero_extend 24) o2)))

;; H
  (assert (= (mk_t__ref1 result) (mk_t__ref1 temporary_1)))

;; H
  (assert (= temporary_11 o3))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (= (mk_t__ref1 result2) (mk_t__ref1 temporary_2)))

;; H
  (assert (= temporary_21 (bvmul temporary_11 ((_ int2bv 32) 256))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt data))) (+ position i1))
  (<= (+ position i1) (to_rep1 (last (rt data))))))

;; H
  (assert (= o4 (+ position i1)))

;; H
  (assert (= o5 (select (elts data) o4)))

;; H
  (assert (= o6 (to_rep o5)))

;; H
  (assert (= o7 ((_ zero_extend 24) o6)))

;; H
  (assert (= o8 (bvadd temporary_21 o7)))

;; H
  (assert (= temporary_21 result3))

;; H
  (assert (= temporary_22 o8))

;; H
  (assert (= (mk_t__ref1 result4) (mk_t__ref1 value)))

;; H
  (assert (= value1 temporary_22))

;; H
  (assert (= temporary_11 result5))

;; H
  (assert (= temporary_12 value1))

;; H
  (assert (= i1 result6))

;; H
  (assert (= i2 2))

;; H
  (assert (= temporary_22 result7))

;; H
  (assert (= temporary_23 (bvmul temporary_12 ((_ int2bv 32) 256))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt data))) (+ position i2))
  (<= (+ position i2) (to_rep1 (last (rt data))))))

;; H
  (assert (= o9 (+ position i2)))

;; H
  (assert (= o10 (select (elts data) o9)))

;; H
  (assert (= o11 (to_rep o10)))

;; H
  (assert (= o12 ((_ zero_extend 24) o11)))

;; H
  (assert (= o13 (bvadd temporary_23 o12)))

;; H
  (assert (= temporary_23 result8))

;; H
  (assert (= temporary_24 o13))

;; H
  (assert (= value1 result9))

;; H
  (assert (= value2 temporary_24))

;; H
  (assert (= temporary_12 result10))

;; H
  (assert (= temporary_13 value2))

;; H
  (assert (= i2 result11))

;; H
  (assert (= i3 3))

;; H
  (assert (= temporary_24 result12))

;; H
  (assert (= temporary_25 (bvmul temporary_13 ((_ int2bv 32) 256))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt data))) (+ position i3))
  (<= (+ position i3) (to_rep1 (last (rt data))))))

;; H
  (assert (= o14 (+ position i3)))

;; H
  (assert (= o15 (select (elts data) o14)))

;; H
  (assert (= o16 (to_rep o15)))

;; H
  (assert (= o17 ((_ zero_extend 24) o16)))

;; H
  (assert (= o18 (bvadd temporary_25 o17)))

;; H
  (assert (= temporary_25 result13))

;; H
  (assert (= temporary_26 o18))

;; H
  (assert (= value2 result14))

;; H
  (assert (= value3 temporary_26))

;; H
  (assert (= temporary_13 result15))

;; H
  (assert (= temporary_14 value3))

;; H
  (assert (and (= o19 (+ position 3)) (in_range1 (+ position 3))))

;; H
  (assert (= result16 (mk_int__ref last2)))

;; H
  (assert (= last3 o19))

;; H
  (assert (= i4 (mk_int__ref i3)))

;; H
  (assert (= temporary_27 (mk_t__ref1 temporary_26)))

;; H
  (assert (= temporary_15 (mk_t__ref1 temporary_14)))

;; H
  (assert (= last4 (mk_int__ref last3)))

;; H
  (assert (= value4 (mk_t__ref1 value3)))

;; H
  (assert (= i5 i3))

;; H
  (assert (= temporary_28 temporary_26))

;; H
  (assert (= temporary_16 temporary_14))

;; H
  (assert (= last5 last3))

;; H
  (assert (= value5 value3))

(assert
;; WP_parameter_def
 ;; File "cubedos-lib-xdr.ads", line 179, characters 0-0
  (not (= (int__content last4) (+ position 3))))
(check-sat)
(exit)
