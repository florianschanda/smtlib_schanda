(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type log_count

predicate in_range(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : log_count, log_count -> bool

logic dummy : log_count

type log_count__ref = { log_count__content : log_count
}

function log_count__ref___projection(a: log_count__ref) : log_count =
  (a).log_count__content

logic to_rep : log_count -> int

logic of_rep : int -> log_count

axiom inversion_axiom :
  (forall x:log_count [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:log_count [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__logging__log_type__log_data :
(int,integer) farray; rec__logging__log_type__log_size : log_count;
rec__ext__ : us_private
}

function us_split_fields_Log_Data__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__logging__log_type__log_data

function us_split_fields_Log_Size__projection(a: us_split_fields) : log_count =
  (a).rec__logging__log_type__log_size

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((bool_eq3(((a).us_split_fields1).rec__logging__log_type__log_data, 1,
  10000, ((b).us_split_fields1).rec__logging__log_type__log_data, 1,
  10000) = true) and
  (to_rep(((a).us_split_fields1).rec__logging__log_type__log_size) = to_rep(((b).us_split_fields1).rec__logging__log_type__log_size))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((bool_eq3(((a).us_split_fields1).rec__logging__log_type__log_data,
  1, 10000, ((b).us_split_fields1).rec__logging__log_type__log_data, 1,
  10000) = true) and
  (to_rep(((a).us_split_fields1).rec__logging__log_type__log_size) = to_rep(((b).us_split_fields1).rec__logging__log_type__log_size)))) ->
  (bool_eq4(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. forall a1:log_count. forall a2:us_private.
  forall a3:int. (0 <= object__size1({ us_split_fields1 = {
  rec__logging__log_type__log_data = a; rec__logging__log_type__log_size =
  a1; rec__ext__ = a2 }; attr__tag = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. forall a1:log_count. forall a2:us_private.
  forall a3:int. (0 <= object__alignment1({ us_split_fields1 = {
  rec__logging__log_type__log_data = a; rec__logging__log_type__log_size =
  a1; rec__ext__ = a2 }; attr__tag = a3 })))

logic logging__log_type__log_data__first__bit : int

logic logging__log_type__log_data__last__bit : int

logic logging__log_type__log_data__position : int

axiom logging__log_type__log_data__first__bit_axiom :
  (0 <= logging__log_type__log_data__first__bit)

axiom logging__log_type__log_data__last__bit_axiom :
  (logging__log_type__log_data__first__bit <  logging__log_type__log_data__last__bit)

axiom logging__log_type__log_data__position_axiom :
  (0 <= logging__log_type__log_data__position)

logic logging__log_type__log_size__first__bit : int

logic logging__log_type__log_size__last__bit : int

logic logging__log_type__log_size__position : int

axiom logging__log_type__log_size__first__bit_axiom :
  (0 <= logging__log_type__log_size__first__bit)

axiom logging__log_type__log_size__last__bit_axiom :
  (logging__log_type__log_size__first__bit <  logging__log_type__log_size__last__bit)

axiom logging__log_type__log_size__position_axiom :
  (0 <= logging__log_type__log_size__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : (int,integer) farray

logic dummy4 : log_count

logic dummy5 : us_private

logic dummy6 : int

type log_type__ref = { log_type__content : us_rep
}

function log_type__ref___projection(a: log_type__ref) : us_rep =
  (a).log_type__content

logic log_size : us_rep -> int

logic log_size__function_guard : int, us_rep -> prop

logic log_size1 : int, us_rep -> int

logic log_size__function_guard1 : int, int, us_rep -> prop

logic init_log__specific_post : int, us_split_fields, int,
  us_split_fields -> prop

axiom logging__log_type__compat_axiom :
  (forall logging__init_log__log__fields:(int,integer) farray.
  forall logging__init_log__log__fields1:log_count.
  forall logging__init_log__log__fields2:us_private.
  forall logging__init_log__log__old__fields:(int,integer) farray.
  forall logging__init_log__log__old__fields1:log_count.
  forall logging__init_log__log__old__fields2:us_private.
  (forall log__attr__tag:int [init_log__specific_post(us_tag, {
  rec__logging__log_type__log_data = logging__init_log__log__fields;
  rec__logging__log_type__log_size = logging__init_log__log__fields1;
  rec__ext__ = logging__init_log__log__fields2 }, log__attr__tag, {
  rec__logging__log_type__log_data = logging__init_log__log__old__fields;
  rec__logging__log_type__log_size = logging__init_log__log__old__fields1;
  rec__ext__ = logging__init_log__log__old__fields2 })].
  (init_log__specific_post(us_tag, { rec__logging__log_type__log_data =
  logging__init_log__log__fields; rec__logging__log_type__log_size =
  logging__init_log__log__fields1; rec__ext__ =
  logging__init_log__log__fields2 }, log__attr__tag, {
  rec__logging__log_type__log_data = logging__init_log__log__old__fields;
  rec__logging__log_type__log_size = logging__init_log__log__old__fields1;
  rec__ext__ = logging__init_log__log__old__fields2 }) -> (log_size({
  us_split_fields1 = { rec__logging__log_type__log_data =
  logging__init_log__log__fields; rec__logging__log_type__log_size =
  logging__init_log__log__fields1; rec__ext__ =
  logging__init_log__log__fields2 }; attr__tag = log__attr__tag }) = 0))))

logic append_to_log__specific_post : int, us_split_fields, int, int,
  us_split_fields -> prop

axiom logging__log_type__compat_axiom1 :
  (forall logging__append_to_log__log__fields:(int,integer) farray.
  forall logging__append_to_log__log__fields1:log_count.
  forall logging__append_to_log__log__fields2:us_private.
  forall logging__append_to_log__log__old__fields:(int,integer) farray.
  forall logging__append_to_log__log__old__fields1:log_count.
  forall logging__append_to_log__log__old__fields2:us_private.
  (forall log__attr__tag:int. forall incr:int
  [append_to_log__specific_post(us_tag, { rec__logging__log_type__log_data =
  logging__append_to_log__log__fields; rec__logging__log_type__log_size =
  logging__append_to_log__log__fields1; rec__ext__ =
  logging__append_to_log__log__fields2 }, log__attr__tag, incr, {
  rec__logging__log_type__log_data =
  logging__append_to_log__log__old__fields;
  rec__logging__log_type__log_size =
  logging__append_to_log__log__old__fields1; rec__ext__ =
  logging__append_to_log__log__old__fields2 })].
  (append_to_log__specific_post(us_tag, { rec__logging__log_type__log_data =
  logging__append_to_log__log__fields; rec__logging__log_type__log_size =
  logging__append_to_log__log__fields1; rec__ext__ =
  logging__append_to_log__log__fields2 }, log__attr__tag, incr, {
  rec__logging__log_type__log_data =
  logging__append_to_log__log__old__fields;
  rec__logging__log_type__log_size =
  logging__append_to_log__log__old__fields1; rec__ext__ =
  logging__append_to_log__log__old__fields2 }) -> (log_size({
  us_split_fields1 = { rec__logging__log_type__log_data =
  logging__append_to_log__log__fields; rec__logging__log_type__log_size =
  logging__append_to_log__log__fields1; rec__ext__ =
  logging__append_to_log__log__fields2 }; attr__tag = log__attr__tag
  }) = (log_size({ us_split_fields1 = { rec__logging__log_type__log_data =
  logging__append_to_log__log__old__fields;
  rec__logging__log_type__log_size =
  logging__append_to_log__log__old__fields1; rec__ext__ =
  logging__append_to_log__log__old__fields2 }; attr__tag = log__attr__tag
  }) + 1)))))

logic log__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

axiom log_size__post_axiom :
  (forall log:(int,integer) farray. forall log1:log_count.
  forall log2:us_private. forall log3:int [log_size({ us_split_fields1 = {
  rec__logging__log_type__log_data = log; rec__logging__log_type__log_size =
  log1; rec__ext__ = log2 }; attr__tag = log3 })]. in_range(log_size({
  us_split_fields1 = { rec__logging__log_type__log_data = log;
  rec__logging__log_type__log_size = log1; rec__ext__ = log2 }; attr__tag =
  log3 })))

axiom log_size__post__dispatch_axiom :
  (forall attr__tag1:int.
  (forall log:(int,integer) farray. forall log1:log_count.
  forall log2:us_private. forall log3:int [log_size1(attr__tag1, {
  us_split_fields1 = { rec__logging__log_type__log_data = log;
  rec__logging__log_type__log_size = log1; rec__ext__ = log2 }; attr__tag =
  log3 })]. in_range(log_size1(attr__tag1, { us_split_fields1 = {
  rec__logging__log_type__log_data = log; rec__logging__log_type__log_size =
  log1; rec__ext__ = log2 }; attr__tag = log3 }))))

axiom logging__log_type__compat_axiom2 :
  (forall log:(int,integer) farray. forall log1:log_count.
  forall log2:us_private. forall log3:int [log_size1(us_tag, {
  us_split_fields1 = { rec__logging__log_type__log_data = log;
  rec__logging__log_type__log_size = log1; rec__ext__ = log2 }; attr__tag =
  log3 })]. (log_size({ us_split_fields1 = {
  rec__logging__log_type__log_data = log; rec__logging__log_type__log_size =
  log1; rec__ext__ = log2 }; attr__tag = log3 }) = log_size1(us_tag, {
  us_split_fields1 = { rec__logging__log_type__log_data = log;
  rec__logging__log_type__log_size = log1; rec__ext__ = log2 }; attr__tag =
  log3 })))

axiom log_size__def_axiom :
  (forall log:(int,integer) farray. forall log1:log_count.
  forall log2:us_private. forall log3:int [log_size({ us_split_fields1 = {
  rec__logging__log_type__log_data = log; rec__logging__log_type__log_size =
  log1; rec__ext__ = log2 }; attr__tag = log3 })]. (log_size({
  us_split_fields1 = { rec__logging__log_type__log_data = log;
  rec__logging__log_type__log_size = log1; rec__ext__ = log2 }; attr__tag =
  log3 }) = to_rep(log1)))

 (* File "use_logging.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall log__split_fields:(int,integer) farray.
  forall log__split_fields1:log_count. forall log__split_fields2:us_private.
  ((log_size({ us_split_fields1 = { rec__logging__log_type__log_data =
  log__split_fields; rec__logging__log_type__log_size = log__split_fields1;
  rec__ext__ = log__split_fields2 }; attr__tag = log__attr__tag }) = 0) ->
  (log_size({ us_split_fields1 = { rec__logging__log_type__log_data =
  log__split_fields; rec__logging__log_type__log_size = log__split_fields1;
  rec__ext__ = log__split_fields2 }; attr__tag = log__attr__tag
  }) <  10000)))
