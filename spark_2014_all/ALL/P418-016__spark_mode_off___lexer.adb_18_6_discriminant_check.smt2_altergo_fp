(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type name_id__ref = { name_id__content : us_rep
}

function name_id__ref___projection(a: name_id__ref) : us_rep =
  (a).name_id__content

type token_kind

predicate in_range(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq1 : token_kind, token_kind -> bool

logic dummy1 : token_kind

type token_kind__ref = { token_kind__content : token_kind
}

function token_kind__ref___projection(a: token_kind__ref) : token_kind =
  (a).token_kind__content

logic to_rep : token_kind -> int

logic of_rep : int -> token_kind

axiom inversion_axiom :
  (forall x:token_kind [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:token_kind [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__lexer__token__kind : token_kind
}

function us_split_discrs___projection(a: us_split_discrs) : token_kind =
  (a).rec__lexer__token__kind

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__lexer__token__name : us_rep
}

function us_split_fields_Name__projection(a: us_split_fields) : us_rep =
  (a).rec__lexer__token__name

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep1) : bool = (a).attr__constrained

predicate lexer__token__name__pred(a: us_rep1) =
  (to_rep(((a).us_split_discrs1).rec__lexer__token__kind) = 0)

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def1 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__lexer__token__kind) = to_rep(((b).us_split_discrs1).rec__lexer__token__kind)) and
  (lexer__token__name__pred(a) ->
  (bool_eq(((a).us_split_fields1).rec__lexer__token__name,
  ((b).us_split_fields1).rec__lexer__token__name) = true))) -> (bool_eq3(a,
  b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__lexer__token__kind) = to_rep(((b).us_split_discrs1).rec__lexer__token__kind)) and
  (lexer__token__name__pred(a) ->
  (bool_eq(((a).us_split_fields1).rec__lexer__token__name,
  ((b).us_split_fields1).rec__lexer__token__name) = true)))) -> (bool_eq3(a,
  b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:token_kind. forall a1:us_rep. forall a2:bool.
  (0 <= object__size1({ us_split_discrs1 = { rec__lexer__token__kind = a };
  us_split_fields1 = { rec__lexer__token__name = a1 }; attr__constrained = a2
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:token_kind. forall a1:us_rep. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__name = a1 }; attr__constrained =
  a2 })))

logic lexer__token__kind__first__bit : int

logic lexer__token__kind__last__bit : int

logic lexer__token__kind__position : int

axiom lexer__token__kind__first__bit_axiom :
  (0 <= lexer__token__kind__first__bit)

axiom lexer__token__kind__last__bit_axiom :
  (lexer__token__kind__first__bit <  lexer__token__kind__last__bit)

axiom lexer__token__kind__position_axiom :
  (0 <= lexer__token__kind__position)

logic lexer__token__name__first__bit : int

logic lexer__token__name__last__bit : int

logic lexer__token__name__position : int

axiom lexer__token__name__first__bit_axiom :
  (0 <= lexer__token__name__first__bit)

axiom lexer__token__name__last__bit_axiom :
  (lexer__token__name__first__bit <  lexer__token__name__last__bit)

axiom lexer__token__name__position_axiom :
  (0 <= lexer__token__name__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : token_kind

logic dummy3 : us_rep

logic dummy4 : bool

type token__ref = { token__content : us_rep1
}

function token__ref___projection(a: token__ref) : us_rep1 =
  (a).token__content

logic t__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range1(rec__lexer__token__kind1: int, a: us_rep1) =
  (rec__lexer__token__kind1 = to_rep(((a).us_split_discrs1).rec__lexer__token__kind))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:token_kind. forall a1:us_rep. forall a2:bool.
  (0 <= object__size2({ us_split_discrs1 = { rec__lexer__token__kind = a };
  us_split_fields1 = { rec__lexer__token__name = a1 }; attr__constrained = a2
  })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:token_kind. forall a1:us_rep. forall a2:bool.
  (0 <= object__alignment2({ us_split_discrs1 = { rec__lexer__token__kind = a
  }; us_split_fields1 = { rec__lexer__token__name = a1 }; attr__constrained =
  a2 })))

logic lexer__token__kind__first__bit1 : int

logic lexer__token__kind__last__bit1 : int

logic lexer__token__kind__position1 : int

axiom lexer__token__kind__first__bit_axiom1 :
  (0 <= lexer__token__kind__first__bit1)

axiom lexer__token__kind__last__bit_axiom1 :
  (lexer__token__kind__first__bit1 <  lexer__token__kind__last__bit1)

axiom lexer__token__kind__position_axiom1 :
  (0 <= lexer__token__kind__position1)

logic lexer__token__name__first__bit1 : int

logic lexer__token__name__last__bit1 : int

logic lexer__token__name__position1 : int

axiom lexer__token__name__first__bit_axiom1 :
  (0 <= lexer__token__name__first__bit1)

axiom lexer__token__name__last__bit_axiom1 :
  (lexer__token__name__first__bit1 <  lexer__token__name__last__bit1)

axiom lexer__token__name__position_axiom1 :
  (0 <= lexer__token__name__position1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy5 : token_kind

logic dummy6 : us_rep

logic dummy7 : bool

type t1b__ref = { t1b__content : us_rep1
}

function t1b__ref___projection(a: t1b__ref) : us_rep1 = (a).t1b__content

 (* File "lexer.adb", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall t__split_discrs:token_kind. forall o:token_kind.
  forall o1:token_kind. forall temp___194:token_kind.
  forall temp___1941:us_rep. forall temp___1942:bool.
  (((t__attr__constrained = false) and (to_rep(t__split_discrs) = 1)) ->
  ((((to_rep(o) = 1) and (o = o1)) and ((temp___194 = o1) and
  ((dummy = temp___1941) and (true = temp___1942)))) ->
  ((t__attr__constrained = true) -> (temp___194 = t__split_discrs)))))
