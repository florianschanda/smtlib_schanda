;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 64)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-sort unsigned_64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (unsigned_64 unsigned_64) Bool)

(declare-const dummy2 unsigned_64)

(declare-datatypes ((unsigned_64__ref 0))
(((mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64
  (unsigned_64__content a))

(define-fun dynamic_invariant1 ((temp___expr_184 (_ BitVec 64))
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)) Bool true)

(define-fun eq_sub__logic ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (ite (eq_sub a b i n) true false))

(define-fun eq_sub_bv__logic ((a (_ BitVec 64)) (b (_ BitVec 64))
  (i (_ BitVec 64))
  (n (_ BitVec 64))) Bool (ite (eq_sub_bv a b i n) true false))

(declare-fun maxvalue (Int) (_ BitVec 64))

(declare-fun maxvalue__function_guard ((_ BitVec 64) Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

;; maxvalue__post_axiom
  (assert
  (forall ((len Int))
  (! (=> (dynamic_invariant2 len true true true) (dynamic_invariant1
     (maxvalue len) true false true)) :pattern ((maxvalue len)) )))

;; maxvalue__def_axiom
  (assert
  (forall ((len Int))
  (! (=> (dynamic_invariant2 len true true true)
     (= (maxvalue len) (bvshl ((_ int2bv 64) 1) ((_ int2bv 64) len)))) :pattern (
  (maxvalue len)) )))

(declare-const x (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const len Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const len_bv (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

;; len_bv__def_axiom
  (assert (= len_bv ((_ int2bv 64) len)))

(declare-const bitwalker__lemmafunction2__result Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const bitwalker__lemmafunction2__len_bv__assume (_ BitVec 64))

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const us Bool)

(declare-const j Int)

(declare-const o5 Int)

(declare-const o6 Bool)

(declare-const o7 Int)

(declare-const o8 Bool)

(declare-const o9 Int)

(declare-const i Int)

(declare-const o10 Int)

(declare-const o11 Bool)

(declare-const result Int)

(declare-const bitwalker__lemmafunction2__result1 Int)

(declare-const bitwalker__lemmafunction2__result2 Int)

(declare-const bitwalker__lemmafunction2__result3 Int)

(declare-const bitwalker__lemmafunction2__result4 Int)

(declare-const bitwalker__lemmafunction2__result5 Int)

(define-fun bitwalker__lemmafunction2__result6 () int__ref (mk_int__ref
                                                           bitwalker__lemmafunction2__result4))

(define-fun bitwalker__lemmafunction2__result7 () int__ref (mk_int__ref
                                                           bitwalker__lemmafunction2__result2))

(define-fun result1 () int__ref (mk_int__ref result))

(define-fun bitwalker__lemmafunction2__result8 () int__ref (mk_int__ref
                                                           bitwalker__lemmafunction2__result))

;; H
  (assert true)

;; H
  (assert (in_range1 len))

;; H
  (assert (and (and (<= 0 len) (<= len 63)) (bvult x (maxvalue len))))

;; H
  (assert (and (= o1 len) (uint_in_range len)))

;; H
  (assert (= bitwalker__lemmafunction2__len_bv__assume ((_ int2bv 64) o1)))

;; H
  (assert (= bitwalker__lemmafunction2__len_bv__assume len_bv))

;; H
  (assert true)

;; H
  (assert (= (bvand x (bvsub (maxvalue len) ((_ int2bv 64) 1))) x))

;; H
  (assert
  (= (eq_sub_bv__logic x ((_ int2bv 64) 0) len_bv
     (bvsub ((_ int2bv 64) 64) len_bv)) true))

;; H
  (assert
  (and (= o4 (bv2int (bvsub ((_ int2bv 64) 64) len_bv))) (in_range2
  (bv2int (bvsub ((_ int2bv 64) 64) len_bv)))))

(assert
;; WP_parameter_def
 ;; File "bitspec.ads", line 16, characters 0-0
  (not (in_range2 (bv2int len_bv))))
(check-sat)
(exit)
