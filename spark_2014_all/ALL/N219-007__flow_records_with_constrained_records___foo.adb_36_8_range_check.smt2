;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort value_kind 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (value_kind value_kind) Bool)

(declare-const dummy value_kind)

(declare-datatypes ()
((value_kind__ref (mk_value_kind__ref (value_kind__content value_kind)))))
(define-fun value_kind__ref___projection ((a value_kind__ref)) value_kind
  (value_kind__content a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 2)) (in_range1 temp___expr_135)))

(declare-fun to_rep (value_kind) Int)

(declare-fun of_rep (Int) value_kind)

;; inversion_axiom
  (assert
  (forall ((x value_kind))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x value_kind)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort integer 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_discrs (mk___split_discrs (rec__foo__value__kind value_kind)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) value_kind
  (rec__foo__value__kind a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__foo__value__bool_field Bool)(rec__foo__value__int_field integer)))))
(define-fun us_split_fields_Bool_Field__projection ((a us_split_fields)) Bool
  (rec__foo__value__bool_field a))

(define-fun us_split_fields_Int_Field__projection ((a us_split_fields)) integer
  (rec__foo__value__int_field a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun foo__value__bool_field__pred ((a us_rep)) Bool (= (to_rep
                                                              (rec__foo__value__kind
                                                              (us_split_discrs1
                                                              a))) 1))

(define-fun foo__value__int_field__pred ((a us_rep)) Bool (= (to_rep
                                                             (rec__foo__value__kind
                                                             (us_split_discrs1
                                                             a))) 2))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__foo__value__kind (us_split_discrs1 a)))
                        (to_rep (rec__foo__value__kind (us_split_discrs1 b))))
                        (=> (foo__value__bool_field__pred a)
                        (= (rec__foo__value__bool_field (us_split_fields1 a))
                        (rec__foo__value__bool_field (us_split_fields1 b)))))
                        (=> (foo__value__int_field__pred a)
                        (= (to_rep1
                           (rec__foo__value__int_field (us_split_fields1 a)))
                        (to_rep1
                        (rec__foo__value__int_field (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const foo__value__kind__first__bit Int)

(declare-const foo__value__kind__last__bit Int)

(declare-const foo__value__kind__position Int)

;; foo__value__kind__first__bit_axiom
  (assert (<= 0 foo__value__kind__first__bit))

;; foo__value__kind__last__bit_axiom
  (assert (< foo__value__kind__first__bit foo__value__kind__last__bit))

;; foo__value__kind__position_axiom
  (assert (<= 0 foo__value__kind__position))

(declare-const foo__value__bool_field__first__bit Int)

(declare-const foo__value__bool_field__last__bit Int)

(declare-const foo__value__bool_field__position Int)

;; foo__value__bool_field__first__bit_axiom
  (assert (<= 0 foo__value__bool_field__first__bit))

;; foo__value__bool_field__last__bit_axiom
  (assert
  (< foo__value__bool_field__first__bit foo__value__bool_field__last__bit))

;; foo__value__bool_field__position_axiom
  (assert (<= 0 foo__value__bool_field__position))

(declare-const foo__value__int_field__first__bit Int)

(declare-const foo__value__int_field__last__bit Int)

(declare-const foo__value__int_field__position Int)

;; foo__value__int_field__first__bit_axiom
  (assert (<= 0 foo__value__int_field__first__bit))

;; foo__value__int_field__last__bit_axiom
  (assert
  (< foo__value__int_field__first__bit foo__value__int_field__last__bit))

;; foo__value__int_field__position_axiom
  (assert (<= 0 foo__value__int_field__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((value__ref (mk_value__ref (value__content us_rep)))))
(define-fun value__ref___projection ((a value__ref)) us_rep (value__content
                                                            a))

(define-fun in_range3 ((rec__foo__value__kind1 Int)
  (a us_rep)) Bool (= rec__foo__value__kind1 (to_rep
                                             (rec__foo__value__kind
                                             (us_split_discrs1 a)))))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const foo__value__kind__first__bit1 Int)

(declare-const foo__value__kind__last__bit1 Int)

(declare-const foo__value__kind__position1 Int)

;; foo__value__kind__first__bit_axiom
  (assert (<= 0 foo__value__kind__first__bit1))

;; foo__value__kind__last__bit_axiom
  (assert (< foo__value__kind__first__bit1 foo__value__kind__last__bit1))

;; foo__value__kind__position_axiom
  (assert (<= 0 foo__value__kind__position1))

(declare-const foo__value__bool_field__first__bit1 Int)

(declare-const foo__value__bool_field__last__bit1 Int)

(declare-const foo__value__bool_field__position1 Int)

;; foo__value__bool_field__first__bit_axiom
  (assert (<= 0 foo__value__bool_field__first__bit1))

;; foo__value__bool_field__last__bit_axiom
  (assert
  (< foo__value__bool_field__first__bit1 foo__value__bool_field__last__bit1))

;; foo__value__bool_field__position_axiom
  (assert (<= 0 foo__value__bool_field__position1))

(declare-const foo__value__int_field__first__bit1 Int)

(declare-const foo__value__int_field__last__bit1 Int)

(declare-const foo__value__int_field__position1 Int)

;; foo__value__int_field__first__bit_axiom
  (assert (<= 0 foo__value__int_field__first__bit1))

;; foo__value__int_field__last__bit_axiom
  (assert
  (< foo__value__int_field__first__bit1 foo__value__int_field__last__bit1))

;; foo__value__int_field__position_axiom
  (assert (<= 0 foo__value__int_field__position1))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content us_rep)))))
(define-fun t4b__ref___projection ((a t4b__ref)) us_rep (t4b__content a))

(declare-datatypes ()
((us_split_discrs2
 (mk___split_discrs1 (rec__foo__record_b__kind value_kind)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs2)) value_kind
  (rec__foo__record_b__kind a))

(declare-datatypes ()
((us_split_discrs__ref1
 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref1)) us_split_discrs2
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_split_fields2 (mk___split_fields1 (rec__foo__record_b__f us_rep)))))
(define-fun us_split_fields_F__projection ((a us_split_fields2)) us_rep
  (rec__foo__record_b__f a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3
                                                                  a))

(define-fun us_rep___6__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__foo__record_b__kind (us_split_discrs3 a)))
                         (to_rep
                         (rec__foo__record_b__kind (us_split_discrs3 b))))
                         (= (bool_eq
                            (rec__foo__record_b__f (us_split_fields3 a))
                            (rec__foo__record_b__f (us_split_fields3 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const foo__record_b__kind__first__bit Int)

(declare-const foo__record_b__kind__last__bit Int)

(declare-const foo__record_b__kind__position Int)

;; foo__record_b__kind__first__bit_axiom
  (assert (<= 0 foo__record_b__kind__first__bit))

;; foo__record_b__kind__last__bit_axiom
  (assert (< foo__record_b__kind__first__bit foo__record_b__kind__last__bit))

;; foo__record_b__kind__position_axiom
  (assert (<= 0 foo__record_b__kind__position))

(declare-const foo__record_b__f__first__bit Int)

(declare-const foo__record_b__f__last__bit Int)

(declare-const foo__record_b__f__position Int)

;; foo__record_b__f__first__bit_axiom
  (assert (<= 0 foo__record_b__f__first__bit))

;; foo__record_b__f__last__bit_axiom
  (assert (< foo__record_b__f__first__bit foo__record_b__f__last__bit))

;; foo__record_b__f__position_axiom
  (assert (<= 0 foo__record_b__f__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ()
((record_b__ref (mk_record_b__ref (record_b__content us_rep1)))))
(define-fun record_b__ref___projection ((a record_b__ref)) us_rep1 (record_b__content
                                                                   a))

(define-fun dynamic_invariant1 ((temp___expr_172 us_rep1)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (and
                                      (and (in_range3
                                      (to_rep
                                      (rec__foo__record_b__kind
                                      (us_split_discrs3 temp___expr_172)))
                                      (rec__foo__record_b__f
                                      (us_split_fields3 temp___expr_172)))
                                      (= (attr__constrained
                                         (rec__foo__record_b__f
                                         (us_split_fields3 temp___expr_172))) true))
                                      (= (attr__constrained
                                         (rec__foo__record_b__f
                                         (us_split_fields3 temp___expr_172))) true)))

(declare-const v__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const r6b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(define-fun default_initial_assumption ((temp___expr_143 us_rep)
  (temp___skip_top_level_144 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_143) false)
                                         (= (to_rep
                                            (rec__foo__value__kind
                                            (us_split_discrs1
                                            temp___expr_143))) 0)))

(declare-const v__split_fields value_kind)

(declare-const v__split_fields1 Bool)

(declare-const v__split_fields2 integer)

(declare-const v__split_fields3 Bool)

;; H
  (assert (dynamic_invariant1
  (mk___rep1 v__split_discrs
  (mk___split_fields1
  (mk___rep (mk___split_discrs v__split_fields)
  (mk___split_fields v__split_fields1 v__split_fields2) v__split_fields3)))
  true false true))

;; H
  (assert (= (to_rep (rec__foo__record_b__kind v__split_discrs)) r6b))

;; H
  (assert (in_range1 r6b))

(assert
;; WP_parameter_def
 ;; File "foo.adb", line 27, characters 0-0
  (not (in_range1 r6b)))
(check-sat)
(exit)
