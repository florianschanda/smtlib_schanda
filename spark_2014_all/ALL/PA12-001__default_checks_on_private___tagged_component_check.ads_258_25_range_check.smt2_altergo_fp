(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic hide : int -> int

logic hide__function_guard : int, int -> prop

axiom hide__post_axiom :
  (forall x:int [hide(x)]. (in_range1(x) -> in_range1(hide(x))))

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__tagged_component_check__s__p4__root__f :
natural; rec__ext__ : us_private
}

function us_split_fields_F__33__projection(a: us_split_fields) : natural =
  (a).rec__tagged_component_check__s__p4__root__f

function us_split_fields___37__projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___37__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___73__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___74__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((to_rep(((a).us_split_fields1).rec__tagged_component_check__s__p4__root__f) = to_rep(((b).us_split_fields1).rec__tagged_component_check__s__p4__root__f)) ->
  (bool_eq3(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__tagged_component_check__s__p4__root__f) = to_rep(((b).us_split_fields1).rec__tagged_component_check__s__p4__root__f))) ->
  (bool_eq3(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_fields1 = {
  rec__tagged_component_check__s__p4__root__f = a; rec__ext__ = a1 };
  attr__tag = a2 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__tagged_component_check__s__p4__root__f = a; rec__ext__ = a1 };
  attr__tag = a2 })))

logic tagged_component_check__s__p4__root__f__first__bit : int

logic tagged_component_check__s__p4__root__f__last__bit : int

logic tagged_component_check__s__p4__root__f__position : int

axiom tagged_component_check__s__p4__root__f__first__bit_axiom :
  (0 <= tagged_component_check__s__p4__root__f__first__bit)

axiom tagged_component_check__s__p4__root__f__last__bit_axiom :
  (tagged_component_check__s__p4__root__f__first__bit <  tagged_component_check__s__p4__root__f__last__bit)

axiom tagged_component_check__s__p4__root__f__position_axiom :
  (0 <= tagged_component_check__s__p4__root__f__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : natural

logic dummy3 : us_private

logic dummy4 : int

type root__ref = { root__content : us_rep
}

function root__ref___14__projection(a: root__ref) : us_rep =
  (a).root__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_fields2 = { rec__tagged_component_check__s__p4__c :
us_main_type; rec__tagged_component_check__s__p4__root__f1 : natural;
rec__ext__1 : us_private
}

function us_split_fields_C__9__projection(a: us_split_fields2) : us_main_type =
  (a).rec__tagged_component_check__s__p4__c

function us_split_fields_F__34__projection(a: us_split_fields2) : natural =
  (a).rec__tagged_component_check__s__p4__root__f1

function us_split_fields___38__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___38__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___75__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___76__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : us_main_type, us_private -> us_private

logic extract__c : us_private -> us_main_type

axiom extract__c__conv :
  (forall c:us_main_type.
  (forall rec__ext__2:us_private. (extract__c(hide_ext__(c,
  rec__ext__2)) = c)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__tagged_component_check__s__p4__root__f =
  ((a).us_split_fields3).rec__tagged_component_check__s__p4__root__f1;
  rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__tagged_component_check__s__p4__c,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__tagged_component_check__s__p4__c =
  extract__c(((r).us_split_fields1).rec__ext__);
  rec__tagged_component_check__s__p4__root__f1 =
  ((r).us_split_fields1).rec__tagged_component_check__s__p4__root__f;
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((us_main_eq(((a).us_split_fields3).rec__tagged_component_check__s__p4__c,
  ((b).us_split_fields3).rec__tagged_component_check__s__p4__c) = true) and
  (to_rep(((a).us_split_fields3).rec__tagged_component_check__s__p4__root__f1) = to_rep(((b).us_split_fields3).rec__tagged_component_check__s__p4__root__f1))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((us_main_eq(((a).us_split_fields3).rec__tagged_component_check__s__p4__c,
  ((b).us_split_fields3).rec__tagged_component_check__s__p4__c) = true) and
  (to_rep(((a).us_split_fields3).rec__tagged_component_check__s__p4__root__f1) = to_rep(((b).us_split_fields3).rec__tagged_component_check__s__p4__root__f1)))) ->
  (bool_eq4(a, b) = false))))

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_main_type. forall a1:natural. forall a2:us_private.
  forall a3:int. (0 <= object__size1({ us_split_fields3 = {
  rec__tagged_component_check__s__p4__c = a;
  rec__tagged_component_check__s__p4__root__f1 = a1; rec__ext__1 = a2 };
  attr__tag1 = a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_main_type. forall a1:natural. forall a2:us_private.
  forall a3:int. (0 <= object__alignment1({ us_split_fields3 = {
  rec__tagged_component_check__s__p4__c = a;
  rec__tagged_component_check__s__p4__root__f1 = a1; rec__ext__1 = a2 };
  attr__tag1 = a3 })))

logic tagged_component_check__s__p4__root__f__first__bit1 : int

logic tagged_component_check__s__p4__root__f__last__bit1 : int

logic tagged_component_check__s__p4__root__f__position1 : int

axiom tagged_component_check__s__p4__root__f__first__bit_axiom1 :
  (0 <= tagged_component_check__s__p4__root__f__first__bit1)

axiom tagged_component_check__s__p4__root__f__last__bit_axiom1 :
  (tagged_component_check__s__p4__root__f__first__bit1 <  tagged_component_check__s__p4__root__f__last__bit1)

axiom tagged_component_check__s__p4__root__f__position_axiom1 :
  (0 <= tagged_component_check__s__p4__root__f__position1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy5 : us_main_type

logic dummy6 : natural

logic dummy7 : us_private

logic dummy8 : int

type c__ref = { c__content : us_rep1
}

function c__ref___14__projection(a: c__ref) : us_rep1 = (a).c__content

type us_split_fields4 = { rec__tagged_component_check__s__p4__c1 :
us_main_type; rec__tagged_component_check__s__d4__h : natural;
rec__tagged_component_check__s__p4__root__f2 : natural; rec__ext__2 :
us_private
}

function us_split_fields_C__11__projection(a: us_split_fields4) : us_main_type =
  (a).rec__tagged_component_check__s__p4__c1

function us_split_fields_H__14__projection(a: us_split_fields4) : natural =
  (a).rec__tagged_component_check__s__d4__h

function us_split_fields_F__39__projection(a: us_split_fields4) : natural =
  (a).rec__tagged_component_check__s__p4__root__f2

function us_split_fields___44__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___44__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag2 : int
}

function us_rep___87__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep___88__projection(a: us_rep2) : int = (a).attr__tag2

logic hide_ext__1 : us_main_type, natural, us_private -> us_private

axiom extract__c__conv1 :
  (forall c:us_main_type.
  (forall h:natural.
  (forall rec__ext__3:us_private. (extract__c(hide_ext__1(c, h,
  rec__ext__3)) = c))))

logic extract__h : us_private -> natural

axiom extract__h__conv :
  (forall c:us_main_type.
  (forall h:natural.
  (forall rec__ext__3:us_private. (extract__h(hide_ext__1(c, h,
  rec__ext__3)) = h))))

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep2) : us_rep = { us_split_fields1 = {
  rec__tagged_component_check__s__p4__root__f =
  ((a).us_split_fields5).rec__tagged_component_check__s__p4__root__f2;
  rec__ext__ =
  hide_ext__1(((a).us_split_fields5).rec__tagged_component_check__s__p4__c1,
  ((a).us_split_fields5).rec__tagged_component_check__s__d4__h,
  ((a).us_split_fields5).rec__ext__2) }; attr__tag = (a).attr__tag2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_fields5 = {
  rec__tagged_component_check__s__p4__c1 =
  extract__c(((r).us_split_fields1).rec__ext__);
  rec__tagged_component_check__s__d4__h =
  extract__h(((r).us_split_fields1).rec__ext__);
  rec__tagged_component_check__s__p4__root__f2 =
  ((r).us_split_fields1).rec__tagged_component_check__s__p4__root__f;
  rec__ext__2 = extract__ext__1(((r).us_split_fields1).rec__ext__) };
  attr__tag2 = (r).attr__tag }

logic bool_eq5 : us_rep2, us_rep2 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq5(a, b)].
  (((((us_main_eq(((a).us_split_fields5).rec__tagged_component_check__s__p4__c1,
  ((b).us_split_fields5).rec__tagged_component_check__s__p4__c1) = true) and
  (to_rep(((a).us_split_fields5).rec__tagged_component_check__s__d4__h) = to_rep(((b).us_split_fields5).rec__tagged_component_check__s__d4__h))) and
  (to_rep(((a).us_split_fields5).rec__tagged_component_check__s__p4__root__f2) = to_rep(((b).us_split_fields5).rec__tagged_component_check__s__p4__root__f2))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((us_main_eq(((a).us_split_fields5).rec__tagged_component_check__s__p4__c1,
  ((b).us_split_fields5).rec__tagged_component_check__s__p4__c1) = true) and
  (to_rep(((a).us_split_fields5).rec__tagged_component_check__s__d4__h) = to_rep(((b).us_split_fields5).rec__tagged_component_check__s__d4__h))) and
  (to_rep(((a).us_split_fields5).rec__tagged_component_check__s__p4__root__f2) = to_rep(((b).us_split_fields5).rec__tagged_component_check__s__p4__root__f2)))) ->
  (bool_eq5(a, b) = false))))

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:us_main_type. forall a1:natural. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__size2({
  us_split_fields5 = { rec__tagged_component_check__s__p4__c1 = a;
  rec__tagged_component_check__s__d4__h = a1;
  rec__tagged_component_check__s__p4__root__f2 = a2; rec__ext__2 = a3 };
  attr__tag2 = a4 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_main_type. forall a1:natural. forall a2:natural.
  forall a3:us_private. forall a4:int. (0 <= object__alignment2({
  us_split_fields5 = { rec__tagged_component_check__s__p4__c1 = a;
  rec__tagged_component_check__s__d4__h = a1;
  rec__tagged_component_check__s__p4__root__f2 = a2; rec__ext__2 = a3 };
  attr__tag2 = a4 })))

logic tagged_component_check__s__d4__h__first__bit : int

logic tagged_component_check__s__d4__h__last__bit : int

logic tagged_component_check__s__d4__h__position : int

axiom tagged_component_check__s__d4__h__first__bit_axiom :
  (0 <= tagged_component_check__s__d4__h__first__bit)

axiom tagged_component_check__s__d4__h__last__bit_axiom :
  (tagged_component_check__s__d4__h__first__bit <  tagged_component_check__s__d4__h__last__bit)

axiom tagged_component_check__s__d4__h__position_axiom :
  (0 <= tagged_component_check__s__d4__h__position)

logic tagged_component_check__s__p4__root__f__first__bit2 : int

logic tagged_component_check__s__p4__root__f__last__bit2 : int

logic tagged_component_check__s__p4__root__f__position2 : int

axiom tagged_component_check__s__p4__root__f__first__bit_axiom2 :
  (0 <= tagged_component_check__s__p4__root__f__first__bit2)

axiom tagged_component_check__s__p4__root__f__last__bit_axiom2 :
  (tagged_component_check__s__p4__root__f__first__bit2 <  tagged_component_check__s__p4__root__f__last__bit2)

axiom tagged_component_check__s__p4__root__f__position_axiom2 :
  (0 <= tagged_component_check__s__p4__root__f__position2)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy9 : us_main_type

logic dummy10 : natural

logic dummy11 : natural

logic dummy12 : us_private

logic dummy13 : int

type d4__ref = { d4__content : us_rep2
}

function d4__ref___3__projection(a: d4__ref) : us_rep2 = (a).d4__content

 (* File "tagged_component_check.ads", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall o:int. (((o = hide(43)) and in_range1(o)) -> in_range(o)))
