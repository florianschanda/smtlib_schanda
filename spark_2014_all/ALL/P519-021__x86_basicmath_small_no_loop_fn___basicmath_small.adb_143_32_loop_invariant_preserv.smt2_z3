;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 32) Int) Bool)

(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int2 ((_ BitVec 32)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 64) Int) Bool)

(declare-fun lsr2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int3 ((_ BitVec 64)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv2 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 64))))))
(declare-fun power2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min2 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int4 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-fun dummy () unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned8 unsigned8) Bool)

(declare-fun dummy1 () unsigned8)

(declare-datatypes ()
((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int5 ((x unsigned8)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun safedivision64 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))

(declare-fun safedivision64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; safedivision64__post_axiom
  (assert
  (forall ((dividend (_ BitVec 64)) (divisor (_ BitVec 64)))
  (! (=>
     (and (dynamic_invariant dividend true true true) (dynamic_invariant
     divisor true true true))
     (let ((result (safedivision64 dividend divisor)))
     (and (= result (bvudiv dividend divisor)) (dynamic_invariant result true
     false true)))) :pattern ((safedivision64 dividend divisor)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-sort unsigned32 0)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (unsigned32 unsigned32) Bool)

(declare-fun dummy2 () unsigned32)

(declare-datatypes ()
((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32
  (unsigned32__content a))

(define-fun dynamic_invariant1 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-fun ebx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ebx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ebx__post_axiom
  (assert
  (forall ((x86__rbx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rbx true true true)
     (let ((result (ebx x86__rbx)))
     (and (= result (readreg32 x86__rbx)) (dynamic_invariant1 result true
     false true)))) :pattern ((ebx x86__rbx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(define-fun dynamic_invariant2 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg32 reg)))
     (and
     (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295))))
     (dynamic_invariant1 result true false true)))) :pattern ((readreg32 reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true) (dynamic_invariant1 val__
     true true true))
     (= (= (writereg32post regnew val__) true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern (
  (writereg32post regnew val__)) ))))

(declare-fun zeroflag () Bool)

(declare-fun xmm0 () (_ BitVec 64))

(declare-fun xmm1 () (_ BitVec 64))

(declare-fun xmm2 () (_ BitVec 64))

(declare-fun rax () (_ BitVec 64))

(declare-fun rbx () (_ BitVec 64))

(declare-fun rsp () (_ BitVec 64))

(declare-fun rbp () (_ BitVec 64))

(declare-fun rdi () (_ BitVec 64))

(declare-fun memory () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___376 () (_ BitVec 64))

(declare-fun temp___378 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___375 () (_ BitVec 64))

(declare-fun temp___374 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___373 () (_ BitVec 64))

(declare-fun temp___372 () (_ BitVec 64))

(declare-fun temp___371 () (_ BitVec 64))

(declare-fun temp___370 () (_ BitVec 64))

(declare-fun temp___369 () (_ BitVec 64))

(declare-fun temp___377 () (_ BitVec 64))

(declare-fun temp___368 () Bool)

(declare-fun o () (_ BitVec 64))

(declare-fun o1 () (_ BitVec 64))

(declare-fun o2 () (_ BitVec 64))

(declare-fun o3 () (_ BitVec 64))

(declare-fun o4 () (_ BitVec 32))

(declare-fun o5 () (_ BitVec 32))

(declare-fun o6 () (_ BitVec 32))

(declare-fun o7 () Bool)

(declare-fun o8 () (_ BitVec 64))

(declare-fun o9 () (_ BitVec 64))

(declare-fun zeroflag1 () Bool)

(declare-fun xmm01 () (_ BitVec 64))

(declare-fun xmm11 () (_ BitVec 64))

(declare-fun xmm21 () (_ BitVec 64))

(declare-fun rax1 () (_ BitVec 64))

(declare-fun rbx1 () (_ BitVec 64))

(declare-fun rsp1 () (_ BitVec 64))

(declare-fun rdi1 () (_ BitVec 64))

(declare-fun memory1 () (Array (_ BitVec 64) unsigned8))

(declare-fun result () (_ BitVec 64))

(declare-fun xmm12 () (_ BitVec 64))

(declare-fun result1 () (_ BitVec 64))

(declare-fun xmm02 () (_ BitVec 64))

(declare-fun rdi2 () (_ BitVec 64))

(declare-fun rax2 () (_ BitVec 64))

(declare-fun memory2 () (Array (_ BitVec 64) unsigned8))

(declare-fun result2 () (_ BitVec 64))

(declare-fun xmm13 () (_ BitVec 64))

(declare-fun result3 () (_ BitVec 64))

(declare-fun xmm14 () (_ BitVec 64))

(declare-fun result4 () (_ BitVec 64))

(declare-fun rsp2 () (_ BitVec 64))

(declare-fun rsp3 () (_ BitVec 64))

(declare-fun result5 () (_ BitVec 64))

(declare-fun xmm22 () (_ BitVec 64))

(declare-fun rbx2 () (_ BitVec 64))

(declare-fun result6 () Bool)

(declare-fun zeroflag2 () Bool)

(declare-fun result7 () (_ BitVec 64))

(declare-fun xmm23 () (_ BitVec 64))

(declare-fun zeroflag3 () bool__ref)

(declare-fun xmm03 () t__ref2)

(declare-fun xmm15 () t__ref2)

(declare-fun xmm24 () t__ref2)

(declare-fun rax3 () t__ref2)

(declare-fun rbx3 () t__ref2)

(declare-fun rsp4 () t__ref2)

(declare-fun rdi3 () t__ref2)

(declare-fun memory3 () map__ref)

(declare-fun zeroflag4 () Bool)

(declare-fun xmm04 () (_ BitVec 64))

(declare-fun xmm16 () (_ BitVec 64))

(declare-fun xmm25 () (_ BitVec 64))

(declare-fun rax4 () (_ BitVec 64))

(declare-fun rbx4 () (_ BitVec 64))

(declare-fun rsp5 () (_ BitVec 64))

(declare-fun rdi4 () (_ BitVec 64))

(declare-fun memory4 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag5 () bool__ref)

(declare-fun xmm05 () t__ref2)

(declare-fun xmm17 () t__ref2)

(declare-fun xmm26 () t__ref2)

(declare-fun rax5 () t__ref2)

(declare-fun rbx5 () t__ref2)

(declare-fun rsp6 () t__ref2)

(declare-fun rdi5 () t__ref2)

(declare-fun memory5 () map__ref)

(declare-fun zeroflag6 () Bool)

(declare-fun xmm06 () (_ BitVec 64))

(declare-fun xmm18 () (_ BitVec 64))

(declare-fun xmm27 () (_ BitVec 64))

(declare-fun rax6 () (_ BitVec 64))

(declare-fun rbx6 () (_ BitVec 64))

(declare-fun rsp7 () (_ BitVec 64))

(declare-fun rdi6 () (_ BitVec 64))

(declare-fun memory6 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag7 () bool__ref)

(declare-fun xmm07 () t__ref2)

(declare-fun xmm19 () t__ref2)

(declare-fun xmm28 () t__ref2)

(declare-fun rax7 () t__ref2)

(declare-fun rbx7 () t__ref2)

(declare-fun rsp8 () t__ref2)

(declare-fun rdi7 () t__ref2)

(declare-fun memory7 () map__ref)

(declare-fun zeroflag8 () Bool)

(declare-fun xmm08 () (_ BitVec 64))

(declare-fun xmm110 () (_ BitVec 64))

(declare-fun xmm29 () (_ BitVec 64))

(declare-fun rax8 () (_ BitVec 64))

(declare-fun rbx8 () (_ BitVec 64))

(declare-fun rsp9 () (_ BitVec 64))

(declare-fun rdi8 () (_ BitVec 64))

(declare-fun memory8 () (Array (_ BitVec 64) unsigned8))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (= rsp1 rsp))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i rsp1)) (not (= i (bvadd rsp1 ((_ int2bv 64) 1)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 2)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 3)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 4)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 5)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 6)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 7)))))
  (= (to_rep (select memory1 i)) (to_rep (select memory i)))))))

;; H
  (assert true)

;; H
  (assert
  (and (= o (readmem64 ((_ int2bv 64) 4198872) memory1))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                       (select memory1 ((_ int2bv 64) 4198872)))))
  (= (bvand o ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select
                                                                memory1 (bvadd ((_ int2bv 64) 4198872) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select
                                                                   memory1 (bvadd ((_ int2bv 64) 4198872) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd ((_ int2bv 64) 4198872) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd ((_ int2bv 64) 4198872) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd ((_ int2bv 64) 4198872) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd ((_ int2bv 64) 4198872) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory1 (bvadd ((_ int2bv 64) 4198872) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= xmm11 result))

;; H
  (assert (= xmm12 o))

;; H
  (assert (= xmm01 result1))

;; H
  (assert (= xmm02 xmm21))

;; H
  (assert (= (writereg32post rdi2 ((_ int2bv 32) 4198656)) true))

;; H
  (assert (= (writereg32post rax2 ((_ int2bv 32) 2)) true))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm21 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select memory2
                                                           rsp1))))
  (= (bvand xmm21 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory2 (bvadd
                                                                    rsp1 ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm21 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp1 ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm21 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp1 ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm21 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp1 ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm21 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp1 ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm21 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp1 ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm21 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp1 ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i rsp1)) (not (= i (bvadd rsp1 ((_ int2bv 64) 1)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 2)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 3)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 4)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 5)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 6)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 7)))))
  (= (to_rep (select memory2 i)) (to_rep (select memory1 i))))))))

;; H
  (assert (= xmm12 result2))

;; H
  (assert (= xmm13 (bvmul xmm12 xmm21)))

;; H
  (assert
  (and (= o1 (readmem64 ((_ int2bv 64) 4198864) memory2))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o1 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select memory2 ((_ int2bv 64) 4198864)))))
  (= (bvand o1 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 memory2 (bvadd ((_ int2bv 64) 4198864) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o1 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory2 (bvadd ((_ int2bv 64) 4198864) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o1 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd ((_ int2bv 64) 4198864) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o1 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd ((_ int2bv 64) 4198864) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o1 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd ((_ int2bv 64) 4198864) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o1 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd ((_ int2bv 64) 4198864) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o1 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd ((_ int2bv 64) 4198864) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (and (= o2 (safedivision64 xmm13 o1)) (= o2 (bvudiv xmm13 o1))))

;; H
  (assert (= xmm13 result3))

;; H
  (assert (= xmm14 o2))

;; H
  (assert (= rsp1 result4))

;; H
  (assert (= rsp2 (bvsub rsp1 ((_ int2bv 64) 8))))

;; H
  (assert (= rsp3 (bvadd rsp2 ((_ int2bv 64) 8))))

;; H
  (assert
  (and (= o3 (readmem64 rsp3 memory2))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o3 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select memory2
                                                        rsp3))))
  (= (bvand o3 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 memory2 (bvadd
                                                                 rsp3 ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o3 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory2 (bvadd
                                                                    rsp3 ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o3 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp3 ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o3 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp3 ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o3 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp3 ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o3 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp3 ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o3 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd rsp3 ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= xmm21 result5))

;; H
  (assert (= xmm22 o3))

;; H
  (assert (and (= o4 (ebx rbx1)) (= o4 (readreg32 rbx1))))

;; H
  (assert (= o5 (bvsub o4 ((_ int2bv 32) 1))))

;; H
  (assert (= (writereg32post rbx2 o5) true))

;; H
  (assert (and (= o6 (ebx rbx2)) (= o6 (readreg32 rbx2))))

;; H
  (assert (= o7 (ite (= o6 ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= zeroflag1 result6))

;; H
  (assert (= zeroflag2 o7))

;; H
  (assert
  (and (= o8 (readmem64 ((_ int2bv 64) 4198880) memory2))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o8 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select memory2 ((_ int2bv 64) 4198880)))))
  (= (bvand o8 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 memory2 (bvadd ((_ int2bv 64) 4198880) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o8 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory2 (bvadd ((_ int2bv 64) 4198880) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o8 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd ((_ int2bv 64) 4198880) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o8 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd ((_ int2bv 64) 4198880) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o8 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd ((_ int2bv 64) 4198880) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o8 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd ((_ int2bv 64) 4198880) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o8 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory2 (bvadd ((_ int2bv 64) 4198880) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o9 (bvadd xmm22 o8)))

;; H
  (assert (= xmm22 result7))

;; H
  (assert (= xmm23 o9))

;; H
  (assert (not (= zeroflag2 true)))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 334, characters 0-0
  (not (= rsp3 rsp)))
(check-sat)
(exit)
