(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type integer

predicate in_range3(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,natural) farray

logic dummy4 : t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref___projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic invariant__ : us_t -> bool

logic invariant____function_guard : bool, us_t -> prop

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall a:(int,natural) farray. forall a1:t [invariant__({ elts = a; rt =
  a1 })]. ((invariant__({ elts = a; rt = a1 }) = true) <->
  ((to_rep1(first(a1)) = 1) and (0 <= to_rep1(last(a1))))))

logic remove : us_t, int -> us_t

logic remove__function_guard : us_t, us_t, int -> prop

axiom remove__post_axiom :
  (forall a:(int,natural) farray. forall a1:t.
  (forall i:int [remove({ elts = a; rt = a1 }, i)]. ((in_range2(i) and
  ((invariant__({ elts = a; rt = a1 }) = true) and
  ((to_rep1(first(a1)) <= i) and (i <= to_rep1(last(a1)))))) ->
  (((invariant__(remove({ elts = a; rt = a1 }, i)) = true) and
  ((to_rep1(last((remove({ elts = a; rt = a1 },
  i)).rt)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (i - 1))) ->
   (to_rep((a[k])) = to_rep(((remove({ elts = a; rt = a1 }, i)).elts[k]))))) and
  ((forall k:int. ((((i + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep(((remove({ elts = a; rt = a1 },
   i)).elts[(k - 1)]))))) and
  (forall k:int. (((i <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep(((remove({ elts = a; rt = a1 },
  i)).elts[k]))))))))) and dynamic_property(1, 100, to_rep1(first((remove({
  elts = a; rt = a1 }, i)).rt)), to_rep1(last((remove({ elts = a; rt = a1 },
  i)).rt)))))))

logic is_perm : us_t, us_t -> bool

logic is_perm__function_guard : bool, us_t, us_t -> prop

axiom is_perm__def_axiom :
  (forall a:(int,natural) farray. forall a1:t. forall b:(int,natural) farray.
  forall b1:t [is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  ((is_perm({ elts = a; rt = a1 }, { elts = b; rt = b1 }) = true) <->
  (((length({ elts = a; rt = a1 }) = 0) and (length({ elts = b; rt = b1
  }) = 0)) or
  (exists ia:int. (((to_rep1(first(a1)) <= ia) and
  (ia <= to_rep1(last(a1)))) and
  (exists ib:int. (((to_rep1(first(b1)) <= ib) and
  (ib <= to_rep1(last(b1)))) and ((to_rep((a[ia])) = to_rep((b[ib]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia), remove({ elts = b; rt = b1 },
  ib)) = true)))))))))

logic a : (int,natural) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic b : (int,natural) farray

logic b1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic ia : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type t18b__ref = { t18b__content : integer
}

function t18b__ref___projection(a2: t18b__ref) : integer = (a2).t18b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "perm.ads", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall ib:int. forall perm__get_witness__result:int.
  forall temp___584:int. forall temp___585:int. forall temp___583:int.
  forall o:(int,natural) farray. forall o1:t. forall o2:int.
  forall o3:(int,natural) farray. forall o4:t. forall o5:int.
  forall o6:natural. forall o7:int. forall o8:int.
  forall o9:(int,natural) farray. forall o10:t. forall o11:int.
  forall o12:(int,natural) farray. forall o13:t. forall o14:int.
  forall o15:natural. forall o16:int. forall o17:int. forall o18:int.
  forall o19:natural. forall o20:int. forall perm__get_witness__result1:int.
  forall result:int. forall ib1:int. forall result1:bool.
  forall result2:bool. forall result3:int.
  forall perm__get_witness__result2:int. forall ib2:int.
  forall perm__get_witness__result3:int. forall result4:int. forall ib3:int.
  forall result5:bool. forall result6:bool. forall result7:int.
  forall perm__get_witness__result4:int. forall ib4:int.
  forall perm__get_witness__result5:int. forall ib5:int.
  forall perm__get_witness__result6:int. forall ib6:int.
  forall perm__get_witness__result7:int. forall ib7:int.
  forall perm__get_witness__result8:int. forall ib8:int.
  forall perm__get_witness__result9:int. forall ib9:int.
  forall perm__get_witness__result10:int. (dynamic_property(1, 100,
  to_rep1(first(a1)), to_rep1(last(a1))) -> (dynamic_property(1, 100,
  to_rep1(first(b1)), to_rep1(last(b1))) -> (in_range2(ia) ->
  (((invariant__({ elts = a; rt = a1 }) = true) and ((invariant__({ elts = b;
  rt = b1 }) = true) and (((to_rep1(first(a1)) <= ia) and
  (ia <= to_rep1(last(a1)))) and
  (exists ib10:int. (((to_rep1(first(b1)) <= ib10) and
  (ib10 <= to_rep1(last(b1)))) and ((to_rep((a[ia])) = to_rep((b[ib10]))) and
  (is_perm(remove({ elts = a; rt = a1 }, ia), remove({ elts = b; rt = b1 },
  ib10)) = true))))))) -> (((((({ int__content = perm__get_witness__result7
  } = { int__content = perm__get_witness__result5 }) and ({ int__content =
  ib6 } = { int__content = ib4 })) and
  ((perm__get_witness__result8 = perm__get_witness__result6) and
  (ib7 = ib5))) and ((temp___584 = to_rep1(first(b1))) and
  ((temp___585 = to_rep1(last(b1))) and ((({ int__content = result } = {
  int__content = ib }) and (ib1 = temp___584)) and (((temp___584 <= ib1) and
  (ib1 <= temp___585)) and ((temp___583 = ib1) and
  (((((perm__get_witness__result2 = perm__get_witness__result5) and
  (ib1 = ib4)) and
  ((perm__get_witness__result6 = perm__get_witness__result2) and
  (ib5 = ib1))) and ((((((((to_rep1(first(a1)) <= ia) and
  (ia <= to_rep1(last(a1)))) and (o5 = ia)) and (o6 = (a[o5]))) and
  (o7 = to_rep(o6))) and (((o7 = to_rep((b[ib1]))) and (result2 = true)) or
  ((not (o7 = to_rep((b[ib1])))) and (result2 = false)))) and
  (((result2 = true) and ((((o2 = ib1) and in_range2(ib1)) and (({ elts = o3;
  rt = o4 } = remove({ elts = b; rt = b1 }, o2)) and (dynamic_property(1,
  100, to_rep1(first(o4)), to_rep1(last(o4))) and ((invariant__({ elts = o3;
  rt = o4 }) = true) and ((to_rep1(last(o4)) = (to_rep1(last(b1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (o2 - 1))) ->
   (to_rep((b[k])) = to_rep((o3[k]))))) and
  ((forall k:int. ((((o2 + 1) <= k) and (k <= to_rep1(last(b1)))) ->
   (to_rep((b[k])) = to_rep((o3[(k - 1)]))))) and
  (forall k:int. (((o2 <= k) and (k <= (to_rep1(last(b1)) - 1))) ->
  (to_rep((b[(k + 1)])) = to_rep((o3[k])))))))))))) and ((({ elts = o; rt =
  o1 } = remove({ elts = a; rt = a1 }, ia)) and (dynamic_property(1, 100,
  to_rep1(first(o1)), to_rep1(last(o1))) and ((invariant__({ elts = o; rt =
  o1 }) = true) and ((to_rep1(last(o1)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (ia - 1))) ->
   (to_rep((a[k])) = to_rep((o[k]))))) and
  ((forall k:int. ((((ia + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep((o[(k - 1)]))))) and
  (forall k:int. (((ia <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep((o[k]))))))))))) and ((result1 = is_perm({
  elts = o; rt = o1 }, { elts = o3; rt = o4 })) and ((result1 = true) <->
  (((length({ elts = o; rt = o1 }) = 0) and (length({ elts = o3; rt = o4
  }) = 0)) or
  (exists ia1:int. (((to_rep1(first(o1)) <= ia1) and
  (ia1 <= to_rep1(last(o1)))) and
  (exists ib10:int. (((to_rep1(first(o4)) <= ib10) and
  (ib10 <= to_rep1(last(o4)))) and
  ((to_rep((o[ia1])) = to_rep((o3[ib10]))) and (is_perm(remove({ elts = o;
  rt = o1 }, ia1), remove({ elts = o3; rt = o4 }, ib10)) = true)))))))))))) or
  ((not (result2 = true)) and (result1 = false)))) and ((result1 = true) and
  (((o8 = ib1) and in_range2(ib1)) and (({ int__content = result3 } = {
  int__content = perm__get_witness__result }) and
  (perm__get_witness__result2 = o8)))))) or
  (((((((((to_rep1(first(a1)) <= ia) and (ia <= to_rep1(last(a1)))) and
  (o5 = ia)) and (o6 = (a[o5]))) and (o7 = to_rep(o6))) and
  (((o7 = to_rep((b[ib1]))) and (result2 = true)) or
  ((not (o7 = to_rep((b[ib1])))) and (result2 = false)))) and
  (((result2 = true) and ((((o2 = ib1) and in_range2(ib1)) and (({ elts = o3;
  rt = o4 } = remove({ elts = b; rt = b1 }, o2)) and (dynamic_property(1,
  100, to_rep1(first(o4)), to_rep1(last(o4))) and ((invariant__({ elts = o3;
  rt = o4 }) = true) and ((to_rep1(last(o4)) = (to_rep1(last(b1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (o2 - 1))) ->
   (to_rep((b[k])) = to_rep((o3[k]))))) and
  ((forall k:int. ((((o2 + 1) <= k) and (k <= to_rep1(last(b1)))) ->
   (to_rep((b[k])) = to_rep((o3[(k - 1)]))))) and
  (forall k:int. (((o2 <= k) and (k <= (to_rep1(last(b1)) - 1))) ->
  (to_rep((b[(k + 1)])) = to_rep((o3[k])))))))))))) and ((({ elts = o; rt =
  o1 } = remove({ elts = a; rt = a1 }, ia)) and (dynamic_property(1, 100,
  to_rep1(first(o1)), to_rep1(last(o1))) and ((invariant__({ elts = o; rt =
  o1 }) = true) and ((to_rep1(last(o1)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (ia - 1))) ->
   (to_rep((a[k])) = to_rep((o[k]))))) and
  ((forall k:int. ((((ia + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep((o[(k - 1)]))))) and
  (forall k:int. (((ia <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep((o[k]))))))))))) and ((result1 = is_perm({
  elts = o; rt = o1 }, { elts = o3; rt = o4 })) and ((result1 = true) <->
  (((length({ elts = o; rt = o1 }) = 0) and (length({ elts = o3; rt = o4
  }) = 0)) or
  (exists ia1:int. (((to_rep1(first(o1)) <= ia1) and
  (ia1 <= to_rep1(last(o1)))) and
  (exists ib10:int. (((to_rep1(first(o4)) <= ib10) and
  (ib10 <= to_rep1(last(o4)))) and
  ((to_rep((o[ia1])) = to_rep((o3[ib10]))) and (is_perm(remove({ elts = o;
  rt = o1 }, ia1), remove({ elts = o3; rt = o4 }, ib10)) = true)))))))))))) or
  ((not (result2 = true)) and (result1 = false)))) and
  ((not (result1 = true)) and
  ((perm__get_witness__result2 = perm__get_witness__result) and
  (perm__get_witness__result2 = perm__get_witness__result1)))) and
  ((((perm__get_witness__result4 = perm__get_witness__result5) and
  (ib3 = ib4)) and
  ((perm__get_witness__result6 = perm__get_witness__result4) and
  (ib5 = ib3))) and
  ((forall kb:int. (((1 <= kb) and (kb <= ib2)) ->
   (not ((to_rep((a[ia])) = to_rep((b[kb]))) and (is_perm(remove({ elts = a;
   rt = a1 }, ia), remove({ elts = b; rt = b1 }, kb)) = true))))) and
  ((((to_rep1(first(b1)) <= to_rep1(last(b1))) ->
  dynamic_property1(to_rep1(first(b1)), to_rep1(last(b1)), ib2)) and
  ((to_rep1(first(b1)) <= ib2) and (ib2 <= to_rep1(last(b1))))) and
  ((not (ib2 = temp___585)) and (((ib2 = result4) and (ib3 = (ib2 + 1))) and
  ((((((((to_rep1(first(a1)) <= ia) and (ia <= to_rep1(last(a1)))) and
  (o14 = ia)) and (o15 = (a[o14]))) and (o16 = to_rep(o15))) and
  (((o16 = to_rep((b[ib3]))) and (result6 = true)) or
  ((not (o16 = to_rep((b[ib3])))) and (result6 = false)))) and
  (((result6 = true) and ((((o11 = ib3) and in_range2(ib3)) and (({ elts =
  o12; rt = o13 } = remove({ elts = b; rt = b1 }, o11)) and
  (dynamic_property(1, 100, to_rep1(first(o13)), to_rep1(last(o13))) and
  ((invariant__({ elts = o12; rt = o13 }) = true) and
  ((to_rep1(last(o13)) = (to_rep1(last(b1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (o11 - 1))) ->
   (to_rep((b[k])) = to_rep((o12[k]))))) and
  ((forall k:int. ((((o11 + 1) <= k) and (k <= to_rep1(last(b1)))) ->
   (to_rep((b[k])) = to_rep((o12[(k - 1)]))))) and
  (forall k:int. (((o11 <= k) and (k <= (to_rep1(last(b1)) - 1))) ->
  (to_rep((b[(k + 1)])) = to_rep((o12[k])))))))))))) and ((({ elts = o9; rt =
  o10 } = remove({ elts = a; rt = a1 }, ia)) and (dynamic_property(1, 100,
  to_rep1(first(o10)), to_rep1(last(o10))) and ((invariant__({ elts = o9;
  rt = o10 }) = true) and ((to_rep1(last(o10)) = (to_rep1(last(a1)) - 1)) and
  ((forall k:int. (((1 <= k) and (k <= (ia - 1))) ->
   (to_rep((a[k])) = to_rep((o9[k]))))) and
  ((forall k:int. ((((ia + 1) <= k) and (k <= to_rep1(last(a1)))) ->
   (to_rep((a[k])) = to_rep((o9[(k - 1)]))))) and
  (forall k:int. (((ia <= k) and (k <= (to_rep1(last(a1)) - 1))) ->
  (to_rep((a[(k + 1)])) = to_rep((o9[k]))))))))))) and ((result5 = is_perm({
  elts = o9; rt = o10 }, { elts = o12; rt = o13 })) and ((result5 = true) <->
  (((length({ elts = o9; rt = o10 }) = 0) and (length({ elts = o12; rt = o13
  }) = 0)) or
  (exists ia1:int. (((to_rep1(first(o10)) <= ia1) and
  (ia1 <= to_rep1(last(o10)))) and
  (exists ib10:int. (((to_rep1(first(o13)) <= ib10) and
  (ib10 <= to_rep1(last(o13)))) and
  ((to_rep((o9[ia1])) = to_rep((o12[ib10]))) and (is_perm(remove({ elts = o9;
  rt = o10 }, ia1), remove({ elts = o12; rt = o13 }, ib10)) = true)))))))))))) or
  ((not (result6 = true)) and (result5 = false)))) and ((result5 = true) and
  (((o17 = ib3) and in_range2(ib3)) and
  ((perm__get_witness__result3 = result7) and
  (perm__get_witness__result4 = o17)))))))))))))))))) and ((({ int__content =
  perm__get_witness__result9 } = { int__content = perm__get_witness__result7
  }) and (ib8 = ib6)) and
  ((perm__get_witness__result10 = perm__get_witness__result8) and
  (ib9 = ib7)))) -> (((to_rep1(first(b1)) <= perm__get_witness__result9) and
  (perm__get_witness__result9 <= to_rep1(last(b1)))) ->
  ((((((to_rep1(first(b1)) <= perm__get_witness__result9) and
  (perm__get_witness__result9 <= to_rep1(last(b1)))) and
  (o18 = perm__get_witness__result9)) and (o19 = (b[o18]))) and
  (o20 = to_rep(o19))) -> (to_rep1(first(a1)) <= ia)))))))))
