(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type index

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483646))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,integer) farray

logic dummy3 : t

type arr__ref = { arr__content : us_t
}

function arr__ref___projection(a: arr__ref) : us_t = (a).arr__content

logic remove_last : us_t -> us_t

logic remove_last__function_guard : us_t, us_t -> prop

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy4 : integer

type t17s__ref = { t17s__content : integer
}

function t17s__ref___projection(a: t17s__ref) : integer = (a).t17s__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy5 : (int,integer) farray

logic dummy6 : t1

type t18s__ref = { t18s__content : us_t1
}

function t18s__ref___projection(a: t18s__ref) : us_t1 = (a).t18s__content

axiom remove_last__post_axiom :
  (forall a:(int,integer) farray. forall a1:t [remove_last({ elts = a; rt =
  a1 })]. (((to_rep(first(a1)) = 0) and (0 <  length({ elts = a; rt = a1
  }))) -> (dynamic_property(0, 2147483646, to_rep(first((remove_last({ elts =
  a; rt = a1 })).rt)), to_rep(last((remove_last({ elts = a; rt = a1
  })).rt))) and (to_rep(first((remove_last({ elts = a; rt = a1
  })).rt)) = 0))))

axiom remove_last__def_axiom :
  (forall a:(int,integer) farray. forall a1:t [remove_last({ elts = a; rt =
  a1 })]. ((to_rep(first(a1)) = 0) -> (remove_last({ elts = a; rt = a1 }) = {
  elts = a; rt = mk(to_rep(first2(mk1(to_rep(first(a1)),
  (to_rep(last(a1)) - 1)))), to_rep(last2(mk1(to_rep(first(a1)),
  (to_rep(last(a1)) - 1))))) })))

logic occ : us_t, int -> int

logic occ__function_guard : int, us_t, int -> prop

type nb_occ

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : nb_occ, nb_occ -> bool

logic dummy7 : nb_occ

type nb_occ__ref = { nb_occ__content : nb_occ
}

function nb_occ__ref___projection(a: nb_occ__ref) : nb_occ =
  (a).nb_occ__content

logic occ_def : us_t, int -> int

logic occ_def__function_guard : int, us_t, int -> prop

axiom occ__post_axiom :
  (forall a:(int,integer) farray. forall a1:t.
  (forall e:int [occ({ elts = a; rt = a1 }, e)].
  (((to_rep(first(a1)) = 0) and in_range1(e)) -> ((occ({ elts = a; rt = a1 },
  e) <= length({ elts = a; rt = a1 })) and in_range3(occ({ elts = a; rt = a1
  }, e))))))

axiom occ__def_axiom :
  (forall a:(int,integer) farray. forall a1:t.
  (forall e:int [occ({ elts = a; rt = a1 }, e)].
  (((to_rep(first(a1)) = 0) and in_range1(e)) -> (occ({ elts = a; rt = a1 },
  e) = occ_def({ elts = a; rt = a1 }, e)))))

logic is_set : us_t, int, int, us_t -> bool

logic is_set__function_guard : bool, us_t, int, int, us_t -> prop

axiom is_set__post_axiom : true

axiom is_set__def_axiom :
  (forall a:(int,integer) farray. forall a1:t. forall r:(int,integer) farray.
  forall r1:t.
  (forall i:int. forall v:int [is_set({ elts = a; rt = a1 }, i, v, { elts =
  r; rt = r1 })]. ((is_set({ elts = a; rt = a1 }, i, v, { elts = r; rt = r1
  }) = true) <-> ((((to_rep(first(r1)) = to_rep(first(a1))) and
  (to_rep(last(r1)) = to_rep(last(a1)))) and (to_rep((r[i])) = v)) and
  (forall j:int. (((to_rep(first(a1)) <= j) and (j <= to_rep(last(a1)))) ->
  ((not (i = j)) -> (to_rep((r[j])) = to_rep((a[j]))))))))))

logic a : (int,integer) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic v : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r : (int,integer) farray

logic r1 : t

logic attr__ATTRIBUTE_ADDRESS4 : int

logic b__first : integer

logic b__last : integer

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom occ_def__def_axiom :
  (forall a2:(int,integer) farray. forall a3:t.
  (forall e1:int [occ_def({ elts = a2; rt = a3 }, e1)].
  (((to_rep(first(a3)) = 0) and in_range1(e1)) -> (((length({ elts = a2; rt =
  a3 }) = 0) -> (occ_def({ elts = a2; rt = a3 }, e1) = 0)) and
  ((not (length({ elts = a2; rt = a3 }) = 0)) ->
  (((to_rep((a2[to_rep(last(a3))])) = e1) -> (occ_def({ elts = a2; rt = a3 },
  e1) = (occ_def(remove_last({ elts = a2; rt = a3 }), e1) + 1))) and
  ((not (to_rep((a2[to_rep(last(a3))])) = e1)) -> (occ_def({ elts = a2; rt =
  a3 }, e1) = occ_def(remove_last({ elts = a2; rt = a3 }), e1)))))))))

 (* File "perm.ads", line 26, characters 0-0 *)
goal WP_parameter_def :
  (forall b:(int,integer) farray.
  forall perm__occ_set__b__assume:(int,integer) farray.
  forall perm__occ_set__b__assume1:t. forall o:(int,integer) farray.
  forall o1:t. forall o2:integer. forall o3:int.
  forall temp___238:(int,integer) farray. forall o4:(int,integer) farray.
  forall o5:(int,integer) farray. forall o6:t.
  forall o7:(int,integer) farray. forall o8:t.
  forall result:(int,integer) farray. forall b1:(int,integer) farray.
  forall result1:(int,integer) farray. forall b2:(int,integer) farray.
  forall b3:(int,integer) farray. forall b4:(int,integer) farray.
  forall b5:(int,integer) farray. forall b6:(int,integer) farray.
  (((dynamic_property(0, 2147483646, to_rep(first(a1)), to_rep(last(a1))) and
  (to_rep(first(a1)) = 0)) and (in_range2(i) and (in_range1(v) and
  (in_range1(e) and ((dynamic_property(0, 2147483646, to_rep(first(r1)),
  to_rep(last(r1))) and (to_rep(first(r1)) = 0)) and
  ((((to_rep(first(a1)) <= i) and (i <= to_rep(last(a1)))) and (is_set({
  elts = a; rt = a1 }, i, v, { elts = r; rt = r1 }) = true)) and ((((({
  elts = perm__occ_set__b__assume; rt = perm__occ_set__b__assume1
  } = remove_last({ elts = a; rt = a1 })) and ((dynamic_property(0,
  2147483646, to_rep(first(perm__occ_set__b__assume1)),
  to_rep(last(perm__occ_set__b__assume1))) and
  (to_rep(first(perm__occ_set__b__assume1)) = 0)) and
  ((a = perm__occ_set__b__assume) and
  (mk(to_rep(first2(mk1(to_rep(first(a1)), (to_rep(last(a1)) - 1)))),
  to_rep(last2(mk1(to_rep(first(a1)),
  (to_rep(last(a1)) - 1))))) = perm__occ_set__b__assume1)))) and ((({
  map__content = result } = { map__content = b }) and
  (b1 = perm__occ_set__b__assume)) and
  ((to_rep(b__first) = to_rep(first(perm__occ_set__b__assume1))) and
  (to_rep(b__last) = to_rep(last(perm__occ_set__b__assume1)))))) and
  ((dynamic_property(0, 2147483646, to_rep(b__first), to_rep(b__last)) and
  (to_rep(b__first) = 0)) and ((((b1 = b3) and (b4 = b1)) and (length({
  elts = a; rt = a1 }) = 0)) or ((not (length({ elts = a; rt = a1
  }) = 0)) and (((b2 = b3) and (b4 = b2)) and (((i = to_rep(last(a1))) and
  (((({ elts = o; rt = o1 } = remove_last({ elts = r; rt = r1 })) and
  ((dynamic_property(0, 2147483646, to_rep(first(o1)), to_rep(last(o1))) and
  (to_rep(first(o1)) = 0)) and ((r = o) and
  (mk(to_rep(first2(mk1(to_rep(first(r1)), (to_rep(last(r1)) - 1)))),
  to_rep(last2(mk1(to_rep(first(r1)), (to_rep(last(r1)) - 1))))) = o1)))) and
  (occ({ elts = b1; rt = mk(to_rep(b__first), to_rep(b__last)) }, e) = occ({
  elts = o; rt = o1 }, e))) and (b2 = b1))) or
  ((not (i = to_rep(last(a1)))) and (((((to_rep(o2) = v) and
  ((((to_rep(b__first) <= i) and (i <= to_rep(b__last))) and (o3 = i)) and
  (temp___238 = (b1[o3 <- o2])))) and ((to_rep(b__first) = 0) and
  (o4 = temp___238))) and ((b1 = result1) and (b2 = o4))) and (((({ elts =
  o5; rt = o6 } = remove_last({ elts = r; rt = r1 })) and
  ((dynamic_property(0, 2147483646, to_rep(first(o6)), to_rep(last(o6))) and
  (to_rep(first(o6)) = 0)) and ((r = o5) and
  (mk(to_rep(first2(mk1(to_rep(first(r1)), (to_rep(last(r1)) - 1)))),
  to_rep(last2(mk1(to_rep(first(r1)), (to_rep(last(r1)) - 1))))) = o6)))) and
  (occ({ elts = o5; rt = o6 }, e) = occ({ elts = b2; rt =
  mk(to_rep(b__first), to_rep(b__last)) }, e))) and ((({ elts = o7; rt = o8
  } = remove_last({ elts = a; rt = a1 })) and ((dynamic_property(0,
  2147483646, to_rep(first(o8)), to_rep(last(o8))) and
  (to_rep(first(o8)) = 0)) and ((a = o7) and
  (mk(to_rep(first2(mk1(to_rep(first(a1)), (to_rep(last(a1)) - 1)))),
  to_rep(last2(mk1(to_rep(first(a1)), (to_rep(last(a1)) - 1))))) = o8)))) and
  (((v = to_rep((o7[i]))) and (occ({ elts = b2; rt = mk(to_rep(b__first),
  to_rep(b__last)) }, e) = occ({ elts = o7; rt = o8 }, e))) or
  ((not (v = to_rep((o7[i])))) and (((v = e) and (occ({ elts = b2; rt =
  mk(to_rep(b__first), to_rep(b__last)) }, e) = (occ({ elts = o7; rt = o8 },
  e) + 1))) or ((not (v = e)) and (((to_rep((o7[i])) = e) and (occ({ elts =
  b2; rt = mk(to_rep(b__first), to_rep(b__last)) }, e) = (occ({ elts = o7;
  rt = o8 }, e) - 1))) or ((not (to_rep((o7[i])) = e)) and (occ({ elts = b2;
  rt = mk(to_rep(b__first), to_rep(b__last)) }, e) = occ({ elts = o7; rt = o8
  }, e)))))))))))))))))) and (({ map__content = b5 } = { map__content = b3
  }) and (b6 = b4))))))))) -> ((v = to_rep((a[i]))) -> (occ({ elts = r; rt =
  r1 }, e) = occ({ elts = a; rt = a1 }, e)))))
