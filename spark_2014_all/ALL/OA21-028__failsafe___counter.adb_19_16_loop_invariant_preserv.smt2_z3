;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort time_slot_length 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 10))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (time_slot_length time_slot_length) Bool)

(declare-fun dummy () time_slot_length)

(declare-datatypes ()
((time_slot_length__ref
 (mk_time_slot_length__ref (time_slot_length__content time_slot_length)))))
(define-fun time_slot_length__ref___projection ((a time_slot_length__ref)) time_slot_length
  (time_slot_length__content a))

(declare-sort time_slot 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 8))

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 1) x)
                                              (bvule x ((_ int2bv 8) 10))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (time_slot time_slot) Bool)

(declare-fun dummy1 () time_slot)

(declare-datatypes ()
((time_slot__ref (mk_time_slot__ref (time_slot__content time_slot)))))
(define-fun time_slot__ref___projection ((a time_slot__ref)) time_slot
  (time_slot__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 8) Bool))))))
(declare-fun slide ((Array (_ BitVec 8) Bool) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) Bool))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)
  (Array (_ BitVec 8) Bool) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) Bool))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (Bool (_ BitVec 8)) (Array (_ BitVec 8) Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i (_ BitVec 8)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 8) Bool)) (a__first (_ BitVec 8))
  (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) Bool))
  (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_132 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_132)
                                    (bvule temp___idx_132 a__last))
                                    (= (select a temp___idx_132) (select b (bvadd (bvsub b__first a__first) temp___idx_132))))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (select a temp___idx_132) (select b (bvadd (bvsub b__first a__first) temp___idx_132))))))))))

(declare-fun compare ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)
  (Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 8)) (j (_ BitVec 8)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (< (to_int2 (select a (bvadd i #x01))) (to_int2
                                            (select b (bvadd j #x01))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 8)) (j (_ BitVec 8)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (< (to_int2 (select b (bvadd i #x01))) (to_int2
                                            (select a (bvadd j #x01))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)
  (Array (_ BitVec 8) Bool) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) Bool))

(declare-fun andb ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)
  (Array (_ BitVec 8) Bool) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) Bool))

(declare-fun orb ((Array (_ BitVec 8) Bool) (_ BitVec 8) (_ BitVec 8)
  (Array (_ BitVec 8) Bool) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) Bool))

(declare-fun notb ((Array (_ BitVec 8) Bool) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) Bool))

;; op_def
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (bvadd (bvsub i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (bvadd (bvsub i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)) (b (Array (_ BitVec 8) Bool)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (bvadd (bvsub i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array (_ BitVec 8) Bool)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun input () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort t6b 0)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 8))

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 1) x)
                                              (bvule x ((_ int2bv 8) 9))))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 1 x) (<= x 9)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (t6b t6b) Bool)

(declare-fun dummy2 () t6b)

(declare-datatypes () ((t6b__ref (mk_t6b__ref (t6b__content t6b)))))
(define-fun t6b__ref___projection ((a t6b__ref)) t6b (t6b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 8))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool (=>
                                      (or (= temp___is_init_199 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 10)))
                                      (in_range1 temp___expr_202)))

(define-fun dynamic_invariant1 ((temp___expr_208 (_ BitVec 8))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (bvule ((_ int2bv 8) 1) ((_ int2bv 8) 10)))
                                      (in_range2 temp___expr_208)))

(declare-fun inputs () (Array (_ BitVec 8) Bool))

(declare-fun i () (_ BitVec 8))

(declare-fun temp___237 () (_ BitVec 8))

(declare-fun temp___238 () (Array (_ BitVec 8) Bool))

(declare-fun temp___240 () (Array (_ BitVec 8) Bool))

(declare-fun temp___235 () (Array (_ BitVec 8) Bool))

(declare-fun k () (_ BitVec 8))

(declare-fun o () (_ BitVec 8))

(declare-fun o1 () Bool)

(declare-fun o2 () Int)

(declare-fun k1 () (_ BitVec 8))

(declare-fun o3 () (_ BitVec 8))

(declare-fun o4 () Bool)

(declare-fun o5 () Int)

(declare-fun inputs1 () (Array (_ BitVec 8) Bool))

(declare-fun result () (_ BitVec 8))

(declare-fun i1 () (_ BitVec 8))

(declare-fun inputs2 () (Array (_ BitVec 8) Bool))

(declare-fun i2 () (_ BitVec 8))

(declare-fun result1 () Bool)

(declare-fun result2 () (Array (_ BitVec 8) Bool))

(declare-fun inputs3 () (Array (_ BitVec 8) Bool))

(declare-fun result3 () (_ BitVec 8))

(declare-fun i3 () (_ BitVec 8))

(declare-fun inputs4 () (Array (_ BitVec 8) Bool))

(declare-fun i4 () (_ BitVec 8))

(declare-fun inputs5 () (Array (_ BitVec 8) Bool))

(declare-fun i5 () (_ BitVec 8))

(declare-fun inputs6 () (Array (_ BitVec 8) Bool))

(declare-fun i6 () (_ BitVec 8))

(declare-fun inputs7 () (Array (_ BitVec 8) Bool))

(declare-fun i7 () (_ BitVec 8))

(declare-fun inputs8 () (Array (_ BitVec 8) Bool))

(declare-fun i8 () (_ BitVec 8))

(declare-fun inputs9 () (Array (_ BitVec 8) Bool))

(declare-fun i9 () (_ BitVec 8))

(declare-fun result4 () (Array (_ BitVec 8) Bool))

(declare-fun inputs10 () (Array (_ BitVec 8) Bool))

(declare-fun inputs11 () (Array (_ BitVec 8) Bool))

(declare-fun i10 () (_ BitVec 8))

(declare-fun inputs12 () (Array (_ BitVec 8) Bool))

(declare-fun i11 () (_ BitVec 8))

(define-fun inputs13 () map__ref (mk_map__ref inputs8))

(define-fun i12 () t__ref (mk_t__ref i6))

(define-fun inputs14 () map__ref (mk_map__ref inputs6))

(define-fun result5 () t__ref (mk_t__ref result))

(define-fun i13 () t__ref (mk_t__ref i))

;; H
  (assert (= result5 i13))

;; H
  (assert (= i1 ((_ int2bv 8) 1)))

;; H
  (assert (bvule ((_ int2bv 8) 1) i1))

;; H
  (assert (bvule i1 ((_ int2bv 8) 9)))

;; H
  (assert
  (and
  (forall ((k2 (_ BitVec 8)))
  (=>
  (and (bvule ((_ int2bv 8) 1) k2) (bvule k2 (bvsub i2 ((_ int2bv 8) 1))))
  (= (= (select inputs2 k2) true)
  (= (select inputs (bvadd k2 ((_ int2bv 8) 1))) true))))
  (forall ((k2 (_ BitVec 8)))
  (=> (and (bvule i2 k2) (bvule k2 ((_ int2bv 8) 10)))
  (= (= (select inputs2 k2) true) (= (select inputs k2) true))))))

;; H
  (assert
  (and
  (and
  (forall ((temp___236 (_ BitVec 8)))
  (=>
  (and (bvule ((_ int2bv 8) 1) temp___236)
  (bvule temp___236 ((_ int2bv 8) 10)))
  (=> (bvule i2 temp___236)
  (= (select inputs2 temp___236) (select inputs temp___236)))))
  (=> (bvule ((_ int2bv 8) 1) ((_ int2bv 8) 9)) (in_range3 i2)))
  (and (bvule ((_ int2bv 8) 1) i2) (bvule i2 ((_ int2bv 8) 9)))))

;; H
  (assert (= inputs2 result2))

;; H
  (assert
  (= inputs3 (store inputs2 i2 (select inputs2 (bvadd i2 ((_ int2bv 8) 1))))))

;; H
  (assert (not (= i2 ((_ int2bv 8) 9))))

;; H
  (assert (= result3 i2))

;; H
  (assert (= i3 (bvadd i2 ((_ int2bv 8) 1))))

(declare-fun k2 () (_ BitVec 8))

;; H
  (assert (bvule ((_ int2bv 8) 1) k2))

;; H
  (assert (bvule k2 (bvsub i3 ((_ int2bv 8) 1))))

;; H
  (assert (= (select inputs3 k2) true))

(assert
;; WP_parameter_def
 ;; File "counter.ads", line 9, characters 0-0
  (not (= (select inputs (bvadd k2 ((_ int2bv 8) 1))) true)))
(check-sat)
(exit)
