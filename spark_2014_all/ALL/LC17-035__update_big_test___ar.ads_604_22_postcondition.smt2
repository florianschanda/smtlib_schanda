;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort it1 0)

(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (it1 it1) Bool)

(declare-const dummy it1)

(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 1 10)) (in_range temp___expr_152)))

(declare-sort it2 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (it2 it2) Bool)

(declare-const dummy1 it2)

(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))

(define-fun dynamic_invariant1 ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 5 50)) (in_range1 temp___expr_158)))

(declare-sort it3 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (it3 it3) Bool)

(declare-const dummy2 it3)

(declare-datatypes () ((it3__ref (mk_it3__ref (it3__content it3)))))
(define-fun it3__ref___projection ((a it3__ref)) it3 (it3__content a))

(define-fun dynamic_invariant2 ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= 1 16)) (in_range2 temp___expr_164)))

(declare-sort it4 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 90 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (it4 it4) Bool)

(declare-const dummy3 it4)

(declare-datatypes () ((it4__ref (mk_it4__ref (it4__content it4)))))
(define-fun it4__ref___projection ((a it4__ref)) it4 (it4__content a))

(define-fun dynamic_invariant3 ((temp___expr_170 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)) Bool (=>
                                      (or (= temp___is_init_167 true)
                                      (<= 90 99)) (in_range3
                                      temp___expr_170)))

(declare-sort et1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (et1 et1) Bool)

(declare-const dummy4 et1)

(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(define-fun dynamic_invariant4 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range4 temp___expr_176)))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))

;; slide_eq
  (assert
  (forall ((a (Array Int et1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int et1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int
  Int) (Array Int et1))

;; concat_def
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (et1 Int) (Array Int et1))

;; singleton_def
  (assert
  (forall ((v et1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int)
  (b (Array Int et1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy5 (Array Int et1))

(declare-const value__size Int)

(declare-fun object__size ((Array Int et1)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int et1)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int et1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))

(declare-fun user_eq5 ((Array Int et1) (Array Int et1)) Bool)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int
  Int) (Array Int (Array Int et1)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int et1)) Int Int
  (Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int et1) Int) (Array Int (Array Int et1)))

;; singleton_def
  (assert
  (forall ((v (Array Int et1)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int et1))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq (select a temp___idx_133) 1 10
                              (select b (+ (- b__first a__first) temp___idx_133))
                              1 10) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq (select a temp___idx_133) 1 10
     (select b (+ (- b__first a__first) temp___idx_133)) 1 10) true))))))))

(declare-const dummy6 (Array Int (Array Int et1)))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int (Array Int et1))) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int (Array Int et1))) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int (Array Int et1))) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert
  (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq6 ((Array Int (Array Int et1))
  (Array Int (Array Int et1))) Bool)

(declare-datatypes ()
((map__ref2
 (mk_map__ref2 (map__content2 (Array Int (Array Int (Array Int et1))))))))
(declare-fun slide2 ((Array Int (Array Int (Array Int et1))) Int
  Int) (Array Int (Array Int (Array Int et1))))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1)))))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1)))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int (Array Int (Array Int et1))) Int Int
  (Array Int (Array Int (Array Int et1))) Int
  Int) (Array Int (Array Int (Array Int et1))))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1))))
  (b (Array Int (Array Int (Array Int et1)))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 ((Array Int (Array Int et1))
  Int) (Array Int (Array Int (Array Int et1))))

;; singleton_def
  (assert
  (forall ((v (Array Int (Array Int et1))))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int (Array Int (Array Int et1))))
  (a__first Int) (a__last Int) (b (Array Int (Array Int (Array Int et1))))
  (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (bool_eq1 (select a temp___idx_134) 5 50
                              (select b (+ (- b__first a__first) temp___idx_134))
                              5 50) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1))))
  (b (Array Int (Array Int (Array Int et1)))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (bool_eq1 (select a temp___idx_134) 5 50
     (select b (+ (- b__first a__first) temp___idx_134)) 5 50) true))))))))

(declare-const dummy7 (Array Int (Array Int (Array Int et1))))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int (Array Int (Array Int et1)))) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int (Array Int (Array Int et1)))) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int (Array Int (Array Int et1)))) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1)))))
  (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1)))))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1)))))
  (<= 0 (object__alignment2 a))))

(declare-fun user_eq7 ((Array Int (Array Int (Array Int et1)))
  (Array Int (Array Int (Array Int et1)))) Bool)

(declare-datatypes ()
((map__ref3
 (mk_map__ref3
 (map__content3 (Array Int (Array Int (Array Int (Array Int et1)))))))))
(declare-fun slide3 ((Array Int (Array Int (Array Int (Array Int et1)))) Int
  Int) (Array Int (Array Int (Array Int (Array Int et1)))))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int (Array Int (Array Int et1))))))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int (Array Int (Array Int et1))))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat4 ((Array Int (Array Int (Array Int (Array Int et1)))) Int
  Int (Array Int (Array Int (Array Int (Array Int et1)))) Int
  Int) (Array Int (Array Int (Array Int (Array Int et1)))))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int (Array Int (Array Int et1)))))
  (b (Array Int (Array Int (Array Int (Array Int et1))))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat4 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton4 ((Array Int (Array Int (Array Int et1)))
  Int) (Array Int (Array Int (Array Int (Array Int et1)))))

;; singleton_def
  (assert
  (forall ((v (Array Int (Array Int (Array Int et1)))))
  (forall ((i Int))
  (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int (Array Int (Array Int (Array Int et1)))))
  (a__first Int) (a__last Int)
  (b (Array Int (Array Int (Array Int (Array Int et1))))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_135 Int))
                           (=>
                           (and (<= a__first temp___idx_135)
                           (<= temp___idx_135 a__last))
                           (= (bool_eq2 (select a temp___idx_135) 1 16
                              (select b (+ (- b__first a__first) temp___idx_135))
                              1 16) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int (Array Int (Array Int et1)))))
  (b (Array Int (Array Int (Array Int (Array Int et1))))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_135 Int))
  (=> (and (<= a__first temp___idx_135) (<= temp___idx_135 a__last))
  (= (bool_eq2 (select a temp___idx_135) 1 16
     (select b (+ (- b__first a__first) temp___idx_135)) 1 16) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const i2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const j1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const j2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const k1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const k2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const l1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const l2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const f Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-fun temp___2306 ((Array Int (Array Int (Array Int (Array Int et1))))
  Int (Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int (Array Int et1)))) (Array Int (Array Int (Array Int (Array Int et1)))))

;; def_axiom
  (assert
  (forall ((temp___2308 (Array Int (Array Int (Array Int (Array Int et1))))))
  (forall ((temp___2309 Int) (temp___2311 Int))
  (forall ((temp___2310 (Array Int (Array Int (Array Int et1))))
  (temp___2312 (Array Int (Array Int (Array Int et1)))))
  (let ((temp___2307 (temp___2306 temp___2308 temp___2309 temp___2310
                     temp___2311 temp___2312)))
  (forall ((temp___2313 Int))
  (ite (= temp___2313 temp___2311)
  (= (select temp___2307 temp___2313) temp___2312)
  (ite (= temp___2313 temp___2309)
  (= (select temp___2307 temp___2313) temp___2310)
  (= (select temp___2307 temp___2313) (select temp___2308 temp___2313))))))))))

(declare-fun temp___2314 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___2316 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___2317 Int))
  (forall ((temp___2318 (Array Int (Array Int et1))))
  (let ((temp___2315 (temp___2314 temp___2316 temp___2317 temp___2318)))
  (forall ((temp___2319 Int))
  (ite (= temp___2319 temp___2317)
  (= (select temp___2315 temp___2319) temp___2318)
  (= (select temp___2315 temp___2319) (select temp___2316 temp___2319)))))))))

(declare-fun temp___2321 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___2323 (Array Int (Array Int et1))))
  (forall ((temp___2324 Int))
  (forall ((temp___2325 (Array Int et1)))
  (let ((temp___2322 (temp___2321 temp___2323 temp___2324 temp___2325)))
  (forall ((temp___2326 Int))
  (ite (= temp___2326 temp___2324)
  (= (select temp___2322 temp___2326) temp___2325)
  (= (select temp___2322 temp___2326) (select temp___2323 temp___2326)))))))))

(declare-fun temp___2329 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___2331 (Array Int et1)))
  (forall ((temp___2332 Int) (temp___2333 Int))
  (let ((temp___2330 (temp___2329 temp___2331 temp___2332 temp___2333)))
  (forall ((temp___2334 Int))
  (ite (= temp___2334 temp___2332)
  (= (select temp___2330 temp___2334) (of_rep temp___2333))
  (= (select temp___2330 temp___2334) (select temp___2331 temp___2334))))))))

(declare-fun temp___2338 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___2340 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___2341 Int))
  (forall ((temp___2342 (Array Int (Array Int et1))))
  (let ((temp___2339 (temp___2338 temp___2340 temp___2341 temp___2342)))
  (forall ((temp___2343 Int))
  (ite (= temp___2343 temp___2341)
  (= (select temp___2339 temp___2343) temp___2342)
  (= (select temp___2339 temp___2343) (select temp___2340 temp___2343)))))))))

(declare-fun temp___2345 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___2347 (Array Int (Array Int et1))))
  (forall ((temp___2348 Int))
  (forall ((temp___2349 (Array Int et1)))
  (let ((temp___2346 (temp___2345 temp___2347 temp___2348 temp___2349)))
  (forall ((temp___2350 Int))
  (ite (= temp___2350 temp___2348)
  (= (select temp___2346 temp___2350) temp___2349)
  (= (select temp___2346 temp___2350) (select temp___2347 temp___2350)))))))))

(declare-fun temp___2353 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___2355 (Array Int et1)))
  (forall ((temp___2356 Int) (temp___2357 Int))
  (let ((temp___2354 (temp___2353 temp___2355 temp___2356 temp___2357)))
  (forall ((temp___2358 Int))
  (ite (= temp___2358 temp___2356)
  (= (select temp___2354 temp___2358) (of_rep temp___2357))
  (= (select temp___2354 temp___2358) (select temp___2355 temp___2358))))))))

(declare-const a (Array Int (Array Int (Array Int (Array Int et1)))))

(declare-const o et1)

(declare-const o1 (Array Int et1))

(declare-const o2 (Array Int (Array Int et1)))

(declare-const o3 (Array Int (Array Int (Array Int et1))))

(declare-const o4 (Array Int (Array Int (Array Int (Array Int et1)))))

(declare-const o5 et1)

(declare-const o6 (Array Int et1))

(declare-const o7 (Array Int (Array Int et1)))

(declare-const o8 (Array Int (Array Int (Array Int et1))))

(declare-const o9 (Array Int (Array Int (Array Int (Array Int et1)))))

(declare-const result (Array Int (Array Int (Array Int (Array Int et1)))))

(declare-const a1 (Array Int (Array Int (Array Int (Array Int et1)))))

(declare-const result1 (Array Int (Array Int (Array Int (Array Int et1)))))

(declare-const a2 (Array Int (Array Int (Array Int (Array Int et1)))))

(declare-const a3 (Array Int (Array Int (Array Int (Array Int et1)))))

(declare-const a4 (Array Int (Array Int (Array Int (Array Int et1)))))

;; H
  (assert (in_range i1))

;; H
  (assert (in_range i2))

;; H
  (assert (in_range1 j1))

;; H
  (assert (in_range1 j2))

;; H
  (assert (in_range2 k1))

;; H
  (assert (in_range2 k2))

;; H
  (assert (in_range3 l1))

;; H
  (assert (in_range3 l2))

;; H
  (assert (in_range4 e))

;; H
  (assert (in_range4 f))

;; H
  (assert
  (and (not (= i1 i2))
  (and (not (= j1 j2)) (and (not (= k1 k2)) (not (= l1 l2))))))

;; H
  (assert (= (to_rep o) e))

;; H
  (assert (= o1 (store (select (select (select a l1) k1) j1) i1 o)))

;; H
  (assert (= o2 (store (select (select a l1) k1) j1 o1)))

;; H
  (assert (= o3 (store (select a l1) k1 o2)))

;; H
  (assert (= o4 (store a l1 o3)))

;; H
  (assert (= result a))

;; H
  (assert (= a1 o4))

;; H
  (assert (= (to_rep o5) f))

;; H
  (assert (= o6 (store (select (select (select a1 l2) k2) j2) i2 o5)))

;; H
  (assert (= o7 (store (select (select a1 l2) k2) j2 o6)))

;; H
  (assert (= o8 (store (select a1 l2) k2 o7)))

;; H
  (assert (= o9 (store a1 l2 o8)))

;; H
  (assert (= result1 a1))

;; H
  (assert (= a2 o9))

;; H
  (assert (= a2 a3))

;; H
  (assert (= a4 a2))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 594, characters 0-0
  (not
  (= (bool_eq3 a3 90 99
     (temp___2306 a l1
     (temp___2314 (select a l1) k1
     (temp___2321 (select (select a l1) k1) j1
     (temp___2329 (select (select (select a l1) k1) j1) i1 e))) l2
     (temp___2338 (select a l2) k2
     (temp___2345 (select (select a l2) k2) j2
     (temp___2353 (select (select (select a l2) k2) j2) i2 f)))) 90 99) true)))
(check-sat)
(exit)
