(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type enum_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : enum_type, enum_type -> bool

logic dummy1 : enum_type

type enum_type__ref = { enum_type__content : enum_type
}

function enum_type__ref___projection(a: enum_type__ref) : enum_type =
  (a).enum_type__content

logic to_rep1 : enum_type -> int

logic of_rep1 : int -> enum_type

axiom inversion_axiom1 :
  (forall x:enum_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:enum_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__my_package_2__variant_type__m_v : enum_type
}

function us_split_discrs___projection(a: us_split_discrs) : enum_type =
  (a).rec__my_package_2__variant_type__m_v

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__my_package_2__variant_type__m_c : integer;
rec__my_package_2__variant_type__m_a : integer;
rec__my_package_2__variant_type__m_b : integer
}

function us_split_fields_M_C__projection(a: us_split_fields) : integer =
  (a).rec__my_package_2__variant_type__m_c

function us_split_fields_M_A__projection(a: us_split_fields) : integer =
  (a).rec__my_package_2__variant_type__m_a

function us_split_fields_M_B__projection(a: us_split_fields) : integer =
  (a).rec__my_package_2__variant_type__m_b

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate my_package_2__variant_type__m_a__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__my_package_2__variant_type__m_v) = 0)

predicate my_package_2__variant_type__m_b__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__my_package_2__variant_type__m_v) = 1)

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((((to_rep1(((a).us_split_discrs1).rec__my_package_2__variant_type__m_v) = to_rep1(((b).us_split_discrs1).rec__my_package_2__variant_type__m_v)) and
  (to_rep(((a).us_split_fields1).rec__my_package_2__variant_type__m_c) = to_rep(((b).us_split_fields1).rec__my_package_2__variant_type__m_c))) and
  (my_package_2__variant_type__m_a__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__my_package_2__variant_type__m_a) = to_rep(((b).us_split_fields1).rec__my_package_2__variant_type__m_a)))) and
  (my_package_2__variant_type__m_b__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__my_package_2__variant_type__m_b) = to_rep(((b).us_split_fields1).rec__my_package_2__variant_type__m_b)))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((((to_rep1(((a).us_split_discrs1).rec__my_package_2__variant_type__m_v) = to_rep1(((b).us_split_discrs1).rec__my_package_2__variant_type__m_v)) and
  (to_rep(((a).us_split_fields1).rec__my_package_2__variant_type__m_c) = to_rep(((b).us_split_fields1).rec__my_package_2__variant_type__m_c))) and
  (my_package_2__variant_type__m_a__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__my_package_2__variant_type__m_a) = to_rep(((b).us_split_fields1).rec__my_package_2__variant_type__m_a)))) and
  (my_package_2__variant_type__m_b__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__my_package_2__variant_type__m_b) = to_rep(((b).us_split_fields1).rec__my_package_2__variant_type__m_b))))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:enum_type. forall a1:integer. forall a2:integer.
  forall a3:integer. (0 <= object__size({ us_split_discrs1 = {
  rec__my_package_2__variant_type__m_v = a }; us_split_fields1 = {
  rec__my_package_2__variant_type__m_c = a1;
  rec__my_package_2__variant_type__m_a = a2;
  rec__my_package_2__variant_type__m_b = a3 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:enum_type. forall a1:integer. forall a2:integer.
  forall a3:integer. (0 <= object__alignment({ us_split_discrs1 = {
  rec__my_package_2__variant_type__m_v = a }; us_split_fields1 = {
  rec__my_package_2__variant_type__m_c = a1;
  rec__my_package_2__variant_type__m_a = a2;
  rec__my_package_2__variant_type__m_b = a3 } })))

logic my_package_2__variant_type__m_v__first__bit : int

logic my_package_2__variant_type__m_v__last__bit : int

logic my_package_2__variant_type__m_v__position : int

axiom my_package_2__variant_type__m_v__first__bit_axiom :
  (0 <= my_package_2__variant_type__m_v__first__bit)

axiom my_package_2__variant_type__m_v__last__bit_axiom :
  (my_package_2__variant_type__m_v__first__bit <  my_package_2__variant_type__m_v__last__bit)

axiom my_package_2__variant_type__m_v__position_axiom :
  (0 <= my_package_2__variant_type__m_v__position)

logic my_package_2__variant_type__m_c__first__bit : int

logic my_package_2__variant_type__m_c__last__bit : int

logic my_package_2__variant_type__m_c__position : int

axiom my_package_2__variant_type__m_c__first__bit_axiom :
  (0 <= my_package_2__variant_type__m_c__first__bit)

axiom my_package_2__variant_type__m_c__last__bit_axiom :
  (my_package_2__variant_type__m_c__first__bit <  my_package_2__variant_type__m_c__last__bit)

axiom my_package_2__variant_type__m_c__position_axiom :
  (0 <= my_package_2__variant_type__m_c__position)

logic my_package_2__variant_type__m_a__first__bit : int

logic my_package_2__variant_type__m_a__last__bit : int

logic my_package_2__variant_type__m_a__position : int

axiom my_package_2__variant_type__m_a__first__bit_axiom :
  (0 <= my_package_2__variant_type__m_a__first__bit)

axiom my_package_2__variant_type__m_a__last__bit_axiom :
  (my_package_2__variant_type__m_a__first__bit <  my_package_2__variant_type__m_a__last__bit)

axiom my_package_2__variant_type__m_a__position_axiom :
  (0 <= my_package_2__variant_type__m_a__position)

logic my_package_2__variant_type__m_b__first__bit : int

logic my_package_2__variant_type__m_b__last__bit : int

logic my_package_2__variant_type__m_b__position : int

axiom my_package_2__variant_type__m_b__first__bit_axiom :
  (0 <= my_package_2__variant_type__m_b__first__bit)

axiom my_package_2__variant_type__m_b__last__bit_axiom :
  (my_package_2__variant_type__m_b__first__bit <  my_package_2__variant_type__m_b__last__bit)

axiom my_package_2__variant_type__m_b__position_axiom :
  (0 <= my_package_2__variant_type__m_b__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : enum_type

logic dummy3 : integer

logic dummy4 : integer

logic dummy5 : integer

type variant_type__ref = { variant_type__content : us_rep
}

function variant_type__ref___projection(a: variant_type__ref) : us_rep =
  (a).variant_type__content

logic ci : int

logic attr__ATTRIBUTE_ADDRESS : int

logic xi : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic v__split_discrs : enum_type

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "my_package_2.ads", line 21, characters 0-0 *)
goal WP_parameter_def :
  (forall v__split_fields:integer. forall v__split_fields1:integer.
  forall v__split_fields2:integer. forall o:integer. forall o1:integer.
  forall o2:integer. forall o3:integer. forall temp___146:enum_type.
  forall temp___1461:integer. forall temp___1462:integer.
  forall temp___1463:integer. forall result:integer. forall result1:integer.
  forall result2:integer. forall v__split_fields3:integer.
  forall v__split_fields4:integer. forall v__split_fields5:integer.
  (in_range(ci) -> (in_range(xi) -> ((not (ci = 0)) ->
  (((((to_rep(o) = ci) and ((o = o1) and ((v__split_fields1 = o2) and
  (v__split_fields2 = o3)))) and ((v__split_discrs = temp___146) and
  ((temp___1461 = o1) and ((temp___1462 = o2) and (temp___1463 = o3))))) and
  ((((result = v__split_fields) and ((result1 = v__split_fields1) and
  (result2 = v__split_fields2))) and ((temp___1461 = v__split_fields3) and
  ((temp___1462 = v__split_fields4) and
  (temp___1463 = v__split_fields5)))) and (v__split_discrs = temp___146))) ->
  ((not (to_rep1(v__split_discrs) = 0)) ->
  (to_rep1(v__split_discrs) = 1)))))))
