;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__wrong_lsp__root__f1 natural)(rec__ext__ us_private)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) natural
  (rec__wrong_lsp__root__f1 a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__wrong_lsp__root__f1 (us_split_fields1 a)))
                   (to_rep (rec__wrong_lsp__root__f1 (us_split_fields1 b))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-fun us_tag () Int)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun wrong_lsp__root__f1__first__bit () Int)

(declare-fun wrong_lsp__root__f1__last__bit () Int)

(declare-fun wrong_lsp__root__f1__position () Int)

;; wrong_lsp__root__f1__first__bit_axiom
  (assert (<= 0 wrong_lsp__root__f1__first__bit))

;; wrong_lsp__root__f1__last__bit_axiom
  (assert (< wrong_lsp__root__f1__first__bit wrong_lsp__root__f1__last__bit))

;; wrong_lsp__root__f1__position_axiom
  (assert (<= 0 wrong_lsp__root__f1__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((root__ref (mk_root__ref (root__content us_rep)))))
(define-fun root__ref___projection ((a root__ref)) us_rep (root__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__wrong_lsp__child__f2 natural)(rec__wrong_lsp__root__f11 natural)(rec__ext__1 us_private)))))
(define-fun us_split_fields_F2__projection ((a us_split_fields2)) natural
  (rec__wrong_lsp__child__f2 a))

(define-fun us_split_fields_F12__projection ((a us_split_fields2)) natural
  (rec__wrong_lsp__root__f11 a))

(define-fun us_split_fields_2__projection ((a us_split_fields2)) us_private
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun us_rep_4__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (natural us_private) us_private)

(declare-fun extract__f2 (us_private) natural)

;; extract__f2__conv
  (assert
  (forall ((f2 natural))
  (forall ((rec__ext__2 us_private))
  (= (extract__f2 (hide_ext__ f2 rec__ext__2)) f2))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (mk___rep
                                         (mk___split_fields
                                         (rec__wrong_lsp__root__f11
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__wrong_lsp__child__f2
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1
                                         (mk___split_fields1
                                         (extract__f2
                                         (rec__ext__ (us_split_fields1 r)))
                                         (rec__wrong_lsp__root__f1
                                         (us_split_fields1 r))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__wrong_lsp__child__f2 (us_split_fields3 a)))
                         (to_rep
                         (rec__wrong_lsp__child__f2 (us_split_fields3 b))))
                         (= (to_rep
                            (rec__wrong_lsp__root__f11 (us_split_fields3 a)))
                         (to_rep
                         (rec__wrong_lsp__root__f11 (us_split_fields3 b)))))
                    true false))

(declare-fun us_tag1 () Int)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun wrong_lsp__child__f2__first__bit () Int)

(declare-fun wrong_lsp__child__f2__last__bit () Int)

(declare-fun wrong_lsp__child__f2__position () Int)

;; wrong_lsp__child__f2__first__bit_axiom
  (assert (<= 0 wrong_lsp__child__f2__first__bit))

;; wrong_lsp__child__f2__last__bit_axiom
  (assert
  (< wrong_lsp__child__f2__first__bit wrong_lsp__child__f2__last__bit))

;; wrong_lsp__child__f2__position_axiom
  (assert (<= 0 wrong_lsp__child__f2__position))

(declare-fun wrong_lsp__root__f1__first__bit1 () Int)

(declare-fun wrong_lsp__root__f1__last__bit1 () Int)

(declare-fun wrong_lsp__root__f1__position1 () Int)

;; wrong_lsp__root__f1__first__bit_axiom
  (assert (<= 0 wrong_lsp__root__f1__first__bit1))

;; wrong_lsp__root__f1__last__bit_axiom
  (assert
  (< wrong_lsp__root__f1__first__bit1 wrong_lsp__root__f1__last__bit1))

;; wrong_lsp__root__f1__position_axiom
  (assert (<= 0 wrong_lsp__root__f1__position1))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-fun dummy2 () us_rep1)

(declare-datatypes ()
((child__ref (mk_child__ref (child__content us_rep1)))))
(define-fun child__ref___projection ((a child__ref)) us_rep1 (child__content
                                                             a))

(define-fun default_initial_assumption ((temp___expr_151 us_rep1)
  (temp___skip_top_level_152 Bool)) Bool (= (attr__tag1 temp___expr_151)
  us_tag1))

(declare-fun r__attr__tag () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(define-fun default_initial_assumption1 ((temp___expr_136 us_rep)
  (temp___skip_top_level_137 Bool)) Bool (= (attr__tag temp___expr_136)
  us_tag))

(declare-fun r__split_fields () natural)

(declare-fun r__split_fields1 () natural)

(declare-fun r__split_fields2 () us_private)

(declare-fun o () natural)

(declare-fun o1 () natural)

(declare-fun o2 () natural)

(declare-fun o3 () us_private)

(declare-fun temp___163 () natural)

(declare-fun temp___1631 () natural)

(declare-fun temp___1632 () us_private)

(declare-fun temp___1633 () Int)

(declare-fun result () natural)

(declare-fun result1 () natural)

(declare-fun result2 () us_private)

(declare-fun r__split_fields3 () natural)

(declare-fun r__split_fields4 () natural)

(declare-fun r__split_fields5 () us_private)

(declare-fun r__split_fields6 () natural)

(declare-fun r__split_fields7 () natural)

(declare-fun r__split_fields8 () us_private)

(declare-fun r__split_fields9 () natural)

(declare-fun r__split_fields10 () natural)

(declare-fun r__split_fields11 () us_private)

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= r__split_fields o1))

;; H
  (assert (= o o2))

;; H
  (assert (= r__split_fields2 o3))

;; H
  (assert (= temp___163 o1))

;; H
  (assert (= temp___1631 o2))

;; H
  (assert (= temp___1632 o3))

;; H
  (assert (= r__attr__tag temp___1633))

;; H
  (assert (= result r__split_fields))

;; H
  (assert (= result1 r__split_fields1))

;; H
  (assert (= result2 r__split_fields2))

;; H
  (assert (= temp___163 r__split_fields3))

;; H
  (assert (= temp___1631 r__split_fields4))

;; H
  (assert (= temp___1632 r__split_fields5))

;; H
  (assert (= r__split_fields6 r__split_fields3))

;; H
  (assert (= r__split_fields7 r__split_fields4))

;; H
  (assert (= r__split_fields8 r__split_fields5))

;; H
  (assert (= r__split_fields9 r__split_fields3))

;; H
  (assert (= r__split_fields10 r__split_fields4))

;; H
  (assert (= r__split_fields11 r__split_fields5))

(assert
;; WP_parameter_def
 ;; File "wrong_lsp.ads", line 6, characters 0-0
  (not (= (to_rep r__split_fields6) (to_rep r__split_fields))))
(check-sat)
(exit)
