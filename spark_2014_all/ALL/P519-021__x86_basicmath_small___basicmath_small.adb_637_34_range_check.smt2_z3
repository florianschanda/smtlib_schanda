;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int3 ((_ BitVec 32)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes ((t__ref2 0))
(((mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int4 ((_ BitVec 64)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes ((t__ref3 0))
(((mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ((unsigned64__ref 0))
(((mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned16 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (unsigned16 unsigned16) Bool)

(declare-const dummy1 unsigned16)

(declare-datatypes ((unsigned16__ref 0))
(((mk_unsigned16__ref (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref___projection ((a unsigned16__ref)) unsigned16
  (unsigned16__content a))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 16))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (unsigned8 unsigned8) Bool)

(declare-const dummy2 unsigned8)

(declare-datatypes ((unsigned8__ref 0))
(((mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int6 ((x unsigned8)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-sort unsigned32 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (unsigned32 unsigned32) Bool)

(declare-const dummy3 unsigned32)

(declare-datatypes ((unsigned32__ref 0))
(((mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32
  (unsigned32__content a))

(define-fun dynamic_invariant2 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-fun ecx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun ecx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; ecx__post_axiom
  (assert
  (forall ((x86__rcx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rcx true true true)
     (let ((result (ecx x86__rcx)))
     (and (= result (readreg32 x86__rcx)) (dynamic_invariant2 result true
     false true)))) :pattern ((ecx x86__rcx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edx__post_axiom
  (assert
  (forall ((x86__rdx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdx true true true)
     (let ((result (edx x86__rdx)))
     (and (= result (readreg32 x86__rdx)) (dynamic_invariant2 result true
     false true)))) :pattern ((edx x86__rdx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-fun writereg16post ((_ BitVec 64) (_ BitVec 64) (_ BitVec 16)) Bool)

(declare-fun writereg16post__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 16)) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-fun esp ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esp__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esp__post_axiom
  (assert
  (forall ((x86__rsp (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsp true true true)
     (let ((result (esp x86__rsp)))
     (and (= result (readreg32 x86__rsp)) (dynamic_invariant2 result true
     false true)))) :pattern ((esp x86__rsp)) )))

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-fun esi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun esi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; esi__post_axiom
  (assert
  (forall ((x86__rsi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rsi true true true)
     (let ((result (esi x86__rsi)))
     (and (= result (readreg32 x86__rsi)) (dynamic_invariant2 result true
     false true)))) :pattern ((esi x86__rsi)) )))

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edi__post_axiom
  (assert
  (forall ((x86__rdi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdi true true true)
     (let ((result (edi x86__rdi)))
     (and (= result (readreg32 x86__rdi)) (dynamic_invariant2 result true
     false true)))) :pattern ((edi x86__rdi)) )))

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

(declare-const attr__ATTRIBUTE_ADDRESS30 Int)

(declare-const attr__ATTRIBUTE_ADDRESS31 Int)

(declare-const attr__ATTRIBUTE_ADDRESS32 Int)

(declare-const attr__ATTRIBUTE_ADDRESS33 Int)

(define-fun dynamic_invariant3 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-fun readmem8 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 8))

(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem8__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem8 addr x86__memory)))
     (and (= result (to_rep (select x86__memory addr))) (dynamic_invariant3
     result true false true)))) :pattern ((readmem8 addr x86__memory)) ))))

(declare-fun readmem32 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))

(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem32__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem32 addr x86__memory)))
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 32) 255)) ((_ zero_extend 24) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 32) 65280)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 32) 256))))
     (= (bvand result ((_ int2bv 32) 16711680)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 32) 65536))))
     (= (bvand result ((_ int2bv 32) 4278190080)) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 32) 16777216))))
     (dynamic_invariant2 result true false true)))) :pattern ((readmem32 addr
                                                              x86__memory)) ))))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned641 unsigned641) Bool)

(declare-const dummy4 unsigned641)

(declare-datatypes ((unsigned64__ref1 0))
(((mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref___2__projection ((a unsigned64__ref1)) unsigned641
  (unsigned64__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_274 (_ BitVec 64))
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool true)

(declare-sort unsigned81 0)

(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq5 (unsigned81 unsigned81) Bool)

(declare-const dummy5 unsigned81)

(declare-datatypes ((unsigned8__ref1 0))
(((mk_unsigned8__ref1 (unsigned8__content1 unsigned81)))))
(define-fun unsigned8__ref___2__projection ((a unsigned8__ref1)) unsigned81
  (unsigned8__content1 a))

(define-fun dynamic_invariant5 ((temp___expr_292 (_ BitVec 8))
  (temp___is_init_289 Bool) (temp___skip_constant_290 Bool)
  (temp___do_toplevel_291 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_ADDRESS34 Int)

(declare-const attr__ATTRIBUTE_ADDRESS35 Int)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS36 Int)

(declare-const attr__ATTRIBUTE_ADDRESS37 Int)

(declare-const attr__ATTRIBUTE_ADDRESS38 Int)

(declare-const attr__ATTRIBUTE_ADDRESS39 Int)

(declare-const attr__ATTRIBUTE_ADDRESS40 Int)

(declare-const attr__ATTRIBUTE_ADDRESS41 Int)

(declare-const attr__ATTRIBUTE_ADDRESS42 Int)

(declare-const attr__ATTRIBUTE_ADDRESS43 Int)

(declare-const attr__ATTRIBUTE_ADDRESS44 Int)

(declare-const attr__ATTRIBUTE_ADDRESS45 Int)

(declare-const attr__ATTRIBUTE_ADDRESS46 Int)

(declare-const attr__ATTRIBUTE_ADDRESS47 Int)

(declare-const attr__ATTRIBUTE_ADDRESS48 Int)

(declare-const attr__ATTRIBUTE_ADDRESS49 Int)

(declare-const attr__ATTRIBUTE_ADDRESS50 Int)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (= (= (inrange64 var bottom range_size) true)
     (ite (bvule bottom (bvadd (bvsub ((_ int2bv 64) 18446744073709551615) range_size) ((_ int2bv 64) 1)))
     (and (bvule bottom var)
     (bvule var (bvadd bottom (bvsub range_size ((_ int2bv 64) 1)))))
     (or
     (and (bvule bottom var)
     (bvule var ((_ int2bv 64) 18446744073709551615)))
     (bvule var (bvsub (bvsub range_size (bvsub ((_ int2bv 64) 18446744073709551615) bottom)) ((_ int2bv 64) 2))))))) :pattern (
  (inrange64 var bottom range_size)) )))

(declare-fun readreg16 ((_ BitVec 64)) (_ BitVec 16))

(declare-fun readreg16__function_guard ((_ BitVec 16) (_ BitVec 64)) Bool)

;; readreg16__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg16 reg)))
     (and (= result ((_ extract 15 0) (bvand reg ((_ int2bv 64) 65535))))
     (dynamic_invariant1 result true false true)))) :pattern ((readreg16 reg)) )))

;; writereg16post__post_axiom
  (assert
  (forall ((regold (_ BitVec 64)) (regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 16)))
  (! (=>
     (and
     (and (dynamic_invariant regold true true true) (dynamic_invariant regnew
     true true true)) (dynamic_invariant1 val__ true true true))
     (= (= (writereg16post regold regnew val__) true)
     (and (= (readreg16 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744073709486080)) (bvand regold ((_ int2bv 64) 18446744073709486080)))))) :pattern (
  (writereg16post regold regnew val__)) ))))

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg32 reg)))
     (and
     (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295))))
     (dynamic_invariant2 result true false true)))) :pattern ((readreg32 reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true) (dynamic_invariant2 val__
     true true true))
     (= (= (writereg32post regnew val__) true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern (
  (writereg32post regnew val__)) ))))

(declare-const ds (_ BitVec 64))

(declare-const fs (_ BitVec 64))

(declare-const gs (_ BitVec 64))

(declare-const ss (_ BitVec 64))

(declare-const stackaddresssize (_ BitVec 16))

(declare-const zeroflag Bool)

(declare-const carryflag Bool)

(declare-const signflag Bool)

(declare-const overflowflag Bool)

(declare-const xmm0 (_ BitVec 64))

(declare-const xmm1 (_ BitVec 64))

(declare-const xmm2 (_ BitVec 64))

(declare-const xmm3 (_ BitVec 64))

(declare-const xmm4 (_ BitVec 64))

(declare-const xmm5 (_ BitVec 64))

(declare-const xmm6 (_ BitVec 64))

(declare-const xmm7 (_ BitVec 64))

(declare-const rax (_ BitVec 64))

(declare-const rcx (_ BitVec 64))

(declare-const rdx (_ BitVec 64))

(declare-const rbx t__ref3)

(declare-const rsp t__ref3)

(declare-const rbp t__ref3)

(declare-const rsi t__ref3)

(declare-const rdi t__ref3)

(declare-const r8 t__ref3)

(declare-const r9 t__ref3)

(declare-const r10 t__ref3)

(declare-const r11 t__ref3)

(declare-const r12 t__ref3)

(declare-const r13 t__ref3)

(declare-const r14 t__ref3)

(declare-const r15 t__ref3)

(declare-const memory map__ref)

(declare-const dummy_var t__ref3)

(declare-const savestackptr t__ref3)

(declare-const ra0 t__ref)

(declare-const ra1 t__ref)

(declare-const ra2 t__ref)

(declare-const ra3 t__ref)

(declare-const ra4 t__ref)

(declare-const ra5 t__ref)

(declare-const ra6 t__ref)

(declare-const ra7 t__ref)

(declare-const saverbx t__ref3)

(declare-const saverbp t__ref3)

(declare-const saver12 t__ref3)

(declare-const saver13 t__ref3)

(declare-const saver14 t__ref3)

(declare-const saver15 t__ref3)

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 8))

(declare-const o2 (_ BitVec 8))

(declare-const o3 (_ BitVec 8))

(declare-const o4 (_ BitVec 8))

(declare-const o5 (_ BitVec 8))

(declare-const o6 (_ BitVec 8))

(declare-const o7 (_ BitVec 8))

(declare-const o8 (_ BitVec 8))

(declare-const o9 (_ BitVec 8))

(declare-const o10 (_ BitVec 8))

(declare-const o11 (_ BitVec 8))

(declare-const o12 (_ BitVec 8))

(declare-const o13 (_ BitVec 8))

(declare-const o14 (_ BitVec 8))

(declare-const o15 (_ BitVec 8))

(declare-const o16 (_ BitVec 8))

(declare-const o17 (_ BitVec 64))

(declare-const o18 (_ BitVec 64))

(declare-const o19 (_ BitVec 64))

(declare-const o20 (_ BitVec 64))

(declare-const o21 (_ BitVec 64))

(declare-const o22 (_ BitVec 64))

(declare-const o23 (_ BitVec 64))

(declare-const o24 (_ BitVec 64))

(declare-const o25 (_ BitVec 64))

(declare-const o26 (_ BitVec 64))

(declare-const o27 (_ BitVec 32))

(declare-const o28 (_ BitVec 32))

(declare-const o29 (_ BitVec 64))

(declare-const o30 (_ BitVec 32))

(declare-const o31 (_ BitVec 32))

(declare-const o32 (_ BitVec 32))

(declare-const o33 (_ BitVec 32))

(declare-const o34 Bool)

(declare-const o35 (_ BitVec 32))

(declare-const o36 (_ BitVec 32))

(declare-const o37 (_ BitVec 32))

(declare-const o38 Bool)

(declare-const o39 (_ BitVec 64))

(declare-const o40 (_ BitVec 64))

(declare-const o41 (_ BitVec 64))

(declare-const o42 (_ BitVec 64))

(declare-const o43 (_ BitVec 32))

(declare-const o44 (_ BitVec 32))

(declare-const o45 (_ BitVec 64))

(declare-const o46 (_ BitVec 32))

(declare-const o47 (_ BitVec 32))

(declare-const o48 (_ BitVec 32))

(declare-const o49 (_ BitVec 32))

(declare-const o50 Bool)

(declare-const o51 (_ BitVec 32))

(declare-const o52 (_ BitVec 32))

(declare-const o53 (_ BitVec 32))

(declare-const o54 Bool)

(declare-const o55 (_ BitVec 64))

(declare-const o56 (_ BitVec 64))

(declare-const o57 (_ BitVec 64))

(declare-const o58 (_ BitVec 64))

(declare-const o59 (_ BitVec 32))

(declare-const o60 (_ BitVec 32))

(declare-const o61 (_ BitVec 64))

(declare-const o62 (_ BitVec 32))

(declare-const o63 (_ BitVec 32))

(declare-const o64 (_ BitVec 32))

(declare-const o65 (_ BitVec 32))

(declare-const o66 Bool)

(declare-const o67 (_ BitVec 32))

(declare-const o68 (_ BitVec 32))

(declare-const o69 (_ BitVec 32))

(declare-const o70 Bool)

(declare-const o71 (_ BitVec 64))

(declare-const o72 (_ BitVec 64))

(declare-const o73 (_ BitVec 64))

(declare-const o74 (_ BitVec 32))

(declare-const o75 (_ BitVec 32))

(declare-const o76 (_ BitVec 64))

(declare-const o77 (_ BitVec 32))

(declare-const o78 (_ BitVec 32))

(declare-const o79 (_ BitVec 32))

(declare-const o80 (_ BitVec 32))

(declare-const o81 Bool)

(declare-const o82 (_ BitVec 32))

(declare-const o83 (_ BitVec 32))

(declare-const o84 (_ BitVec 32))

(declare-const o85 Bool)

(declare-const o86 (_ BitVec 64))

(declare-const o87 (_ BitVec 32))

(declare-const o88 (_ BitVec 32))

(declare-const o89 (_ BitVec 64))

(declare-const o90 (_ BitVec 32))

(declare-const o91 (_ BitVec 32))

(declare-const o92 (_ BitVec 64))

(declare-const o93 (_ BitVec 32))

(declare-const o94 (_ BitVec 64))

(declare-const o95 (_ BitVec 64))

(declare-const o96 (_ BitVec 64))

(declare-const o97 (_ BitVec 64))

(declare-const o98 (_ BitVec 64))

(declare-const o99 (_ BitVec 64))

(declare-const result t__ref3)

(declare-const savestackptr1 (_ BitVec 64))

(declare-const result1 t__ref)

(declare-const ra01 (_ BitVec 8))

(declare-const result2 t__ref)

(declare-const ra11 (_ BitVec 8))

(declare-const result3 t__ref)

(declare-const ra21 (_ BitVec 8))

(declare-const result4 t__ref)

(declare-const ra31 (_ BitVec 8))

(declare-const result5 t__ref)

(declare-const ra41 (_ BitVec 8))

(declare-const result6 t__ref)

(declare-const ra51 (_ BitVec 8))

(declare-const result7 t__ref)

(declare-const ra61 (_ BitVec 8))

(declare-const result8 t__ref)

(declare-const ra71 (_ BitVec 8))

(declare-const result9 t__ref3)

(declare-const saverbx1 (_ BitVec 64))

(declare-const result10 t__ref3)

(declare-const saverbp1 (_ BitVec 64))

(declare-const result11 t__ref3)

(declare-const saver121 (_ BitVec 64))

(declare-const result12 t__ref3)

(declare-const saver131 (_ BitVec 64))

(declare-const result13 t__ref3)

(declare-const saver141 (_ BitVec 64))

(declare-const result14 t__ref3)

(declare-const saver151 (_ BitVec 64))

(declare-const memory1 (Array (_ BitVec 64) unsigned8))

(declare-const result15 t__ref3)

(declare-const rsp1 (_ BitVec 64))

(declare-const memory2 (Array (_ BitVec 64) unsigned8))

(declare-const result16 t__ref3)

(declare-const rsp2 (_ BitVec 64))

(declare-const rdi1 (_ BitVec 64))

(declare-const memory3 (Array (_ BitVec 64) unsigned8))

(declare-const result17 t__ref3)

(declare-const rsp3 (_ BitVec 64))

(declare-const memory4 (Array (_ BitVec 64) unsigned8))

(declare-const result18 t__ref3)

(declare-const rsp4 (_ BitVec 64))

(declare-const memory5 (Array (_ BitVec 64) unsigned8))

(declare-const result19 t__ref3)

(declare-const rsp5 (_ BitVec 64))

(declare-const memory6 (Array (_ BitVec 64) unsigned8))

(declare-const result20 t__ref3)

(declare-const rsp6 (_ BitVec 64))

(declare-const rbx1 (_ BitVec 64))

(declare-const result21 t__ref3)

(declare-const rsp7 (_ BitVec 64))

(declare-const result22 t__ref3)

(declare-const rsp8 (_ BitVec 64))

(declare-const rsp9 (_ BitVec 64))

(declare-const result23 t__ref3)

(declare-const rsi1 (_ BitVec 64))

(declare-const result24 t__ref3)

(declare-const rdi2 (_ BitVec 64))

(declare-const result25 t__ref3)

(declare-const rbp1 (_ BitVec 64))

(declare-const result26 t__ref3)

(declare-const xmm31 (_ BitVec 64))

(declare-const result27 t__ref3)

(declare-const xmm21 (_ BitVec 64))

(declare-const result28 t__ref3)

(declare-const xmm11 (_ BitVec 64))

(declare-const result29 t__ref3)

(declare-const xmm01 (_ BitVec 64))

(declare-const result30 t__ref3)

(declare-const rsp10 (_ BitVec 64))

(declare-const rsp11 (_ BitVec 64))

(declare-const rdi3 (_ BitVec 64))

(declare-const rax1 (_ BitVec 64))

(declare-const result31 t__ref3)

(declare-const rsp12 (_ BitVec 64))

(declare-const rsp13 (_ BitVec 64))

(declare-const rdi4 (_ BitVec 64))

(declare-const result32 bool__ref)

(declare-const zeroflag1 Bool)

(declare-const result33 bool__ref)

(declare-const signflag1 Bool)

(declare-const result34 bool__ref)

(declare-const carryflag1 Bool)

(declare-const result35 bool__ref)

(declare-const overflowflag1 Bool)

(declare-const zeroflag2 Bool)

(declare-const carryflag2 Bool)

(declare-const signflag2 Bool)

(declare-const overflowflag2 Bool)

(declare-const xmm02 (_ BitVec 64))

(declare-const rax2 (_ BitVec 64))

(declare-const rbx2 (_ BitVec 64))

(declare-const rsp14 (_ BitVec 64))

(declare-const rbp2 (_ BitVec 64))

(declare-const rdi5 (_ BitVec 64))

(declare-const rdi6 (_ BitVec 64))

(declare-const rbx3 (_ BitVec 64))

(declare-const result36 t__ref3)

(declare-const rbp3 (_ BitVec 64))

(declare-const result37 t__ref3)

(declare-const rsp15 (_ BitVec 64))

(declare-const rsp16 (_ BitVec 64))

(declare-const result38 t__ref3)

(declare-const rsi2 (_ BitVec 64))

(declare-const result39 t__ref3)

(declare-const rdi7 (_ BitVec 64))

(declare-const result40 t__ref3)

(declare-const xmm32 (_ BitVec 64))

(declare-const result41 t__ref3)

(declare-const xmm22 (_ BitVec 64))

(declare-const result42 t__ref3)

(declare-const xmm12 (_ BitVec 64))

(declare-const result43 t__ref3)

(declare-const xmm03 (_ BitVec 64))

(declare-const result44 t__ref3)

(declare-const rsp17 (_ BitVec 64))

(declare-const rsp18 (_ BitVec 64))

(declare-const rax3 (_ BitVec 64))

(declare-const rdi8 (_ BitVec 64))

(declare-const result45 t__ref3)

(declare-const rsp19 (_ BitVec 64))

(declare-const rsp20 (_ BitVec 64))

(declare-const rsi3 (_ BitVec 64))

(declare-const result46 bool__ref)

(declare-const zeroflag3 Bool)

(declare-const result47 bool__ref)

(declare-const signflag3 Bool)

(declare-const result48 bool__ref)

(declare-const carryflag3 Bool)

(declare-const result49 bool__ref)

(declare-const overflowflag3 Bool)

(declare-const zeroflag4 Bool)

(declare-const carryflag4 Bool)

(declare-const signflag4 Bool)

(declare-const overflowflag4 Bool)

(declare-const xmm04 (_ BitVec 64))

(declare-const rax4 (_ BitVec 64))

(declare-const rbx4 (_ BitVec 64))

(declare-const rsp21 (_ BitVec 64))

(declare-const rbp4 (_ BitVec 64))

(declare-const rdi9 (_ BitVec 64))

(declare-const rdi10 (_ BitVec 64))

(declare-const rbx5 (_ BitVec 64))

(declare-const result50 t__ref3)

(declare-const rbp5 (_ BitVec 64))

(declare-const result51 t__ref3)

(declare-const rsp22 (_ BitVec 64))

(declare-const rsp23 (_ BitVec 64))

(declare-const result52 t__ref3)

(declare-const rsi4 (_ BitVec 64))

(declare-const result53 t__ref3)

(declare-const rdi11 (_ BitVec 64))

(declare-const result54 t__ref3)

(declare-const xmm33 (_ BitVec 64))

(declare-const result55 t__ref3)

(declare-const xmm23 (_ BitVec 64))

(declare-const result56 t__ref3)

(declare-const xmm13 (_ BitVec 64))

(declare-const result57 t__ref3)

(declare-const xmm05 (_ BitVec 64))

(declare-const result58 t__ref3)

(declare-const rsp24 (_ BitVec 64))

(declare-const rsp25 (_ BitVec 64))

(declare-const rax5 (_ BitVec 64))

(declare-const rdi12 (_ BitVec 64))

(declare-const result59 t__ref3)

(declare-const rsp26 (_ BitVec 64))

(declare-const rsp27 (_ BitVec 64))

(declare-const rcx1 (_ BitVec 64))

(declare-const result60 bool__ref)

(declare-const zeroflag5 Bool)

(declare-const result61 bool__ref)

(declare-const signflag5 Bool)

(declare-const result62 bool__ref)

(declare-const carryflag5 Bool)

(declare-const result63 bool__ref)

(declare-const overflowflag5 Bool)

(declare-const zeroflag6 Bool)

(declare-const carryflag6 Bool)

(declare-const signflag6 Bool)

(declare-const overflowflag6 Bool)

(declare-const xmm06 (_ BitVec 64))

(declare-const rax6 (_ BitVec 64))

(declare-const rbx6 (_ BitVec 64))

(declare-const rsp28 (_ BitVec 64))

(declare-const rbp6 (_ BitVec 64))

(declare-const rdi13 (_ BitVec 64))

(declare-const rdi14 (_ BitVec 64))

(declare-const rbx7 (_ BitVec 64))

(declare-const result64 t__ref3)

(declare-const rbp7 (_ BitVec 64))

(declare-const result65 t__ref3)

(declare-const rsp29 (_ BitVec 64))

(declare-const rsp30 (_ BitVec 64))

(declare-const result66 t__ref3)

(declare-const xmm24 (_ BitVec 64))

(declare-const result67 t__ref3)

(declare-const rsi5 (_ BitVec 64))

(declare-const result68 t__ref3)

(declare-const rdi15 (_ BitVec 64))

(declare-const result69 t__ref3)

(declare-const xmm34 (_ BitVec 64))

(declare-const result70 t__ref3)

(declare-const xmm14 (_ BitVec 64))

(declare-const result71 t__ref3)

(declare-const xmm07 (_ BitVec 64))

(declare-const result72 t__ref3)

(declare-const rsp31 (_ BitVec 64))

(declare-const rsp32 (_ BitVec 64))

(declare-const rax7 (_ BitVec 64))

(declare-const rdi16 (_ BitVec 64))

(declare-const result73 t__ref3)

(declare-const rsp33 (_ BitVec 64))

(declare-const rsp34 (_ BitVec 64))

(declare-const rdx1 (_ BitVec 64))

(declare-const result74 bool__ref)

(declare-const zeroflag7 Bool)

(declare-const result75 bool__ref)

(declare-const signflag7 Bool)

(declare-const result76 bool__ref)

(declare-const carryflag7 Bool)

(declare-const result77 bool__ref)

(declare-const overflowflag7 Bool)

(declare-const xmm08 (_ BitVec 64))

(declare-const rax8 (_ BitVec 64))

(declare-const rbx8 (_ BitVec 64))

(declare-const rsp35 (_ BitVec 64))

(declare-const rbp8 (_ BitVec 64))

(declare-const rdi17 (_ BitVec 64))

(declare-const rdi18 (_ BitVec 64))

(declare-const result78 t__ref3)

(declare-const r151 (_ BitVec 64))

(declare-const result79 t__ref3)

(declare-const rsp36 (_ BitVec 64))

(declare-const rsp37 (_ BitVec 64))

(declare-const result80 t__ref3)

(declare-const xmm61 (_ BitVec 64))

(declare-const memory7 (Array (_ BitVec 64) unsigned8))

(declare-const xmm09 (_ BitVec 64))

(declare-const xmm15 (_ BitVec 64))

(declare-const xmm25 (_ BitVec 64))

(declare-const xmm35 (_ BitVec 64))

(declare-const xmm41 (_ BitVec 64))

(declare-const xmm51 (_ BitVec 64))

(declare-const xmm62 (_ BitVec 64))

(declare-const xmm71 (_ BitVec 64))

(declare-const rax9 (_ BitVec 64))

(declare-const rbx9 (_ BitVec 64))

(declare-const rsp38 (_ BitVec 64))

(declare-const rbp9 (_ BitVec 64))

(declare-const rsi6 (_ BitVec 64))

(declare-const rdi19 (_ BitVec 64))

(declare-const r121 (_ BitVec 64))

(declare-const r131 (_ BitVec 64))

(declare-const r141 (_ BitVec 64))

(declare-const r152 (_ BitVec 64))

(declare-const memory8 (Array (_ BitVec 64) unsigned8))

(declare-const rdi20 (_ BitVec 64))

(declare-const rbx10 (_ BitVec 64))

(declare-const rax10 (_ BitVec 64))

(declare-const rcx2 (_ BitVec 64))

(declare-const rdx2 (_ BitVec 64))

(declare-const rbx11 (_ BitVec 64))

(declare-const rsp39 (_ BitVec 64))

(declare-const rbp10 (_ BitVec 64))

(declare-const rsi7 (_ BitVec 64))

(declare-const rdi21 (_ BitVec 64))

(declare-const r81 (_ BitVec 64))

(declare-const memory9 (Array (_ BitVec 64) unsigned8))

(declare-const result81 t__ref3)

(declare-const rsi8 (_ BitVec 64))

(declare-const rdi22 (_ BitVec 64))

(declare-const rbx12 (_ BitVec 64))

(declare-const result82 t__ref3)

(declare-const rsp40 (_ BitVec 64))

(declare-const exit_called Bool)

(declare-const carryflag8 Bool)

(declare-const signflag8 Bool)

(declare-const overflowflag8 Bool)

(declare-const rax11 (_ BitVec 64))

(declare-const rcx3 (_ BitVec 64))

(declare-const rdx3 (_ BitVec 64))

(declare-const rsp41 (_ BitVec 64))

(declare-const rdi23 (_ BitVec 64))

(declare-const r82 (_ BitVec 64))

(declare-const memory10 (Array (_ BitVec 64) unsigned8))

(declare-const rdx4 (_ BitVec 64))

(declare-const rsi9 (_ BitVec 64))

(declare-const rdi24 (_ BitVec 64))

(declare-const rax12 (_ BitVec 64))

(declare-const result83 t__ref3)

(declare-const rsp42 (_ BitVec 64))

(declare-const rsp43 (_ BitVec 64))

(declare-const rdi25 (_ BitVec 64))

(declare-const result84 t__ref3)

(declare-const rsp44 (_ BitVec 64))

(declare-const rsp45 (_ BitVec 64))

(declare-const result85 t__ref3)

(declare-const xmm26 (_ BitVec 64))

(declare-const xmm010 (_ BitVec 64))

(declare-const xmm16 (_ BitVec 64))

(declare-const xmm27 (_ BitVec 64))

(declare-const rax13 (_ BitVec 64))

(declare-const rbx13 (_ BitVec 64))

(declare-const rsp46 (_ BitVec 64))

(declare-const rbp11 (_ BitVec 64))

(declare-const rdi26 (_ BitVec 64))

(declare-const memory11 (Array (_ BitVec 64) unsigned8))

(declare-const rdi27 (_ BitVec 64))

(declare-const rbx14 (_ BitVec 64))

(declare-const result86 t__ref3)

(declare-const rsp47 (_ BitVec 64))

(declare-const rsp48 (_ BitVec 64))

(declare-const result87 t__ref3)

(declare-const xmm28 (_ BitVec 64))

(declare-const zeroflag8 Bool)

(declare-const xmm011 (_ BitVec 64))

(declare-const xmm17 (_ BitVec 64))

(declare-const xmm29 (_ BitVec 64))

(declare-const rax14 (_ BitVec 64))

(declare-const rbx15 (_ BitVec 64))

(declare-const rsp49 (_ BitVec 64))

(declare-const rbp12 (_ BitVec 64))

(declare-const rdi28 (_ BitVec 64))

(declare-const memory12 (Array (_ BitVec 64) unsigned8))

(declare-const result88 t__ref3)

(declare-const rsp50 (_ BitVec 64))

(declare-const rax15 (_ BitVec 64))

(declare-const result89 t__ref3)

(declare-const rbx16 (_ BitVec 64))

(declare-const result90 t__ref3)

(declare-const rsp51 (_ BitVec 64))

(declare-const result91 t__ref3)

(declare-const rbp13 (_ BitVec 64))

(declare-const result92 t__ref3)

(declare-const rsp52 (_ BitVec 64))

(declare-const result93 t__ref3)

(declare-const r122 (_ BitVec 64))

(declare-const result94 t__ref3)

(declare-const rsp53 (_ BitVec 64))

(declare-const result95 t__ref3)

(declare-const r132 (_ BitVec 64))

(declare-const result96 t__ref3)

(declare-const rsp54 (_ BitVec 64))

(declare-const result97 t__ref3)

(declare-const r142 (_ BitVec 64))

(declare-const result98 t__ref3)

(declare-const rsp55 (_ BitVec 64))

(declare-const result99 t__ref3)

(declare-const r153 (_ BitVec 64))

(declare-const result100 t__ref3)

(declare-const rsp56 (_ BitVec 64))

(declare-const result101 t__ref3)

(declare-const rsp57 (_ BitVec 64))

(declare-const exit_called1 bool__ref)

(declare-const zeroflag9 bool__ref)

(declare-const carryflag9 bool__ref)

(declare-const signflag9 bool__ref)

(declare-const overflowflag9 bool__ref)

(declare-const xmm012 t__ref3)

(declare-const xmm18 t__ref3)

(declare-const xmm210 t__ref3)

(declare-const xmm36 t__ref3)

(declare-const xmm42 t__ref3)

(declare-const xmm52 t__ref3)

(declare-const xmm63 t__ref3)

(declare-const xmm72 t__ref3)

(declare-const rax16 t__ref3)

(declare-const rcx4 t__ref3)

(declare-const rdx5 t__ref3)

(declare-const rbx17 t__ref3)

(declare-const rsp58 t__ref3)

(declare-const rbp14 t__ref3)

(declare-const rsi10 t__ref3)

(declare-const rdi29 t__ref3)

(declare-const r83 t__ref3)

(declare-const r123 t__ref3)

(declare-const r133 t__ref3)

(declare-const r143 t__ref3)

(declare-const r154 t__ref3)

(declare-const memory13 map__ref)

(declare-const savestackptr2 t__ref3)

(declare-const ra02 t__ref)

(declare-const ra12 t__ref)

(declare-const ra22 t__ref)

(declare-const ra32 t__ref)

(declare-const ra42 t__ref)

(declare-const ra52 t__ref)

(declare-const ra62 t__ref)

(declare-const ra72 t__ref)

(declare-const saverbx2 t__ref3)

(declare-const saverbp2 t__ref3)

(declare-const saver122 t__ref3)

(declare-const saver132 t__ref3)

(declare-const saver142 t__ref3)

(declare-const saver152 t__ref3)

(declare-const exit_called2 Bool)

(declare-const zeroflag10 Bool)

(declare-const carryflag10 Bool)

(declare-const signflag10 Bool)

(declare-const overflowflag10 Bool)

(declare-const xmm013 (_ BitVec 64))

(declare-const xmm19 (_ BitVec 64))

(declare-const xmm211 (_ BitVec 64))

(declare-const xmm37 (_ BitVec 64))

(declare-const xmm43 (_ BitVec 64))

(declare-const xmm53 (_ BitVec 64))

(declare-const xmm64 (_ BitVec 64))

(declare-const xmm73 (_ BitVec 64))

(declare-const rax17 (_ BitVec 64))

(declare-const rcx5 (_ BitVec 64))

(declare-const rdx6 (_ BitVec 64))

(declare-const rbx18 (_ BitVec 64))

(declare-const rsp59 (_ BitVec 64))

(declare-const rbp15 (_ BitVec 64))

(declare-const rsi11 (_ BitVec 64))

(declare-const rdi30 (_ BitVec 64))

(declare-const r84 (_ BitVec 64))

(declare-const r124 (_ BitVec 64))

(declare-const r134 (_ BitVec 64))

(declare-const r144 (_ BitVec 64))

(declare-const r155 (_ BitVec 64))

(declare-const memory14 (Array (_ BitVec 64) unsigned8))

(declare-const savestackptr3 (_ BitVec 64))

(declare-const ra03 (_ BitVec 8))

(declare-const ra13 (_ BitVec 8))

(declare-const ra23 (_ BitVec 8))

(declare-const ra33 (_ BitVec 8))

(declare-const ra43 (_ BitVec 8))

(declare-const ra53 (_ BitVec 8))

(declare-const ra63 (_ BitVec 8))

(declare-const ra73 (_ BitVec 8))

(declare-const saverbx3 (_ BitVec 64))

(declare-const saverbp3 (_ BitVec 64))

(declare-const saver123 (_ BitVec 64))

(declare-const saver133 (_ BitVec 64))

(declare-const saver143 (_ BitVec 64))

(declare-const saver153 (_ BitVec 64))

(define-fun xmm65 () t__ref3 (mk_t__ref3 xmm6))

(define-fun xmm38 () t__ref3 (mk_t__ref3 xmm3))

(define-fun xmm212 () t__ref3 (mk_t__ref3 xmm2))

(define-fun xmm110 () t__ref3 (mk_t__ref3 xmm1))

(define-fun xmm014 () t__ref3 (mk_t__ref3 xmm0))

(define-fun overflowflag11 () bool__ref (mk_bool__ref overflowflag))

(define-fun signflag11 () bool__ref (mk_bool__ref signflag))

(define-fun carryflag11 () bool__ref (mk_bool__ref carryflag))

(define-fun zeroflag11 () bool__ref (mk_bool__ref zeroflag))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (= o (t__content3 rsp)))

;; H
  (assert (= result savestackptr))

;; H
  (assert (= (let ((subject savestackptr)) savestackptr1) o))

;; H
  (assert true)

;; H
  (assert
  (and (= o1 (readmem8 (t__content3 rsp) (map__content memory)))
  (= o1 (to_rep (select (map__content memory) (t__content3 rsp))))))

;; H
  (assert (= o2 o1))

;; H
  (assert (= result1 ra0))

;; H
  (assert (= (let ((subject ra0)) ra01) o2))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o3 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 1))
        (map__content memory)))
  (= o3 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 1)))))))

;; H
  (assert (= o4 o3))

;; H
  (assert (= result2 ra1))

;; H
  (assert (= (let ((subject ra1)) ra11) o4))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o5 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 2))
        (map__content memory)))
  (= o5 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 2)))))))

;; H
  (assert (= o6 o5))

;; H
  (assert (= result3 ra2))

;; H
  (assert (= (let ((subject ra2)) ra21) o6))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o7 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 3))
        (map__content memory)))
  (= o7 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 3)))))))

;; H
  (assert (= o8 o7))

;; H
  (assert (= result4 ra3))

;; H
  (assert (= (let ((subject ra3)) ra31) o8))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o9 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 4))
        (map__content memory)))
  (= o9 (to_rep
        (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 4)))))))

;; H
  (assert (= o10 o9))

;; H
  (assert (= result5 ra4))

;; H
  (assert (= (let ((subject ra4)) ra41) o10))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o11 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 5))
         (map__content memory)))
  (= o11 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 5)))))))

;; H
  (assert (= o12 o11))

;; H
  (assert (= result6 ra5))

;; H
  (assert (= (let ((subject ra5)) ra51) o12))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o13 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 6))
         (map__content memory)))
  (= o13 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 6)))))))

;; H
  (assert (= o14 o13))

;; H
  (assert (= result7 ra6))

;; H
  (assert (= (let ((subject ra6)) ra61) o14))

;; H
  (assert true)

;; H
  (assert
  (and
  (= o15 (readmem8 (bvadd (t__content3 rsp) ((_ int2bv 64) 7))
         (map__content memory)))
  (= o15 (to_rep
         (select (map__content memory) (bvadd (t__content3 rsp) ((_ int2bv 64) 7)))))))

;; H
  (assert (= o16 o15))

;; H
  (assert (= result8 ra7))

;; H
  (assert (= (let ((subject ra7)) ra71) o16))

;; H
  (assert true)

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 334, characters 0-0
  (not true))
(check-sat)
(exit)
