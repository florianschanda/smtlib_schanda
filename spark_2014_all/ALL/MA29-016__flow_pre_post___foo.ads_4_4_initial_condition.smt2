;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun f3 (Int) Bool)

(declare-fun f3__function_guard (Bool Int) Bool)

;; f3__post_axiom
  (assert true)

;; f3__def_axiom
  (assert
  (forall ((foo__c Int))
  (! (= (= (f3 foo__c) true) (< 0 foo__c)) :pattern ((f3 foo__c)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun f4 (Int Int) Bool)

(declare-fun f4__function_guard (Bool Int Int) Bool)

(declare-fun get_a (Int) Int)

(declare-fun get_a__function_guard (Int Int) Bool)

;; f4__post_axiom
  (assert true)

;; f4__def_axiom
  (assert
  (forall ((foo__c Int) (foo__a Int))
  (! (= (= (f4 foo__c foo__a) true) (= foo__c (get_a foo__a))) :pattern (
  (f4 foo__c foo__a)) )))

;; get_a__post_axiom
  (assert
  (forall ((foo__a Int))
  (! (=> (dynamic_invariant foo__a true true true) (dynamic_invariant
     (get_a foo__a) true false true)) :pattern ((get_a foo__a)) )))

;; get_a__def_axiom
  (assert
  (forall ((foo__a Int))
  (! (=> (dynamic_invariant foo__a true true true) (= (get_a foo__a) foo__a)) :pattern (
  (get_a foo__a)) )))

(declare-fun f1 (Int) Bool)

(declare-fun f1__function_guard (Bool Int) Bool)

;; f1__post_axiom
  (assert true)

;; f1__def_axiom
  (assert
  (forall ((foo__c Int))
  (! (= (= (f1 foo__c) true) (< 0 foo__c)) :pattern ((f1 foo__c)) )))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c Int)

(declare-const a Int)

(declare-const b Int)

(declare-const o Bool)

(declare-const o1 Bool)

(declare-const o2 Bool)

(declare-const o3 Bool)

(declare-const o4 Int)

(declare-const o5 Bool)

(declare-const o6 Bool)

(declare-const result Int)

(declare-const a1 Int)

(declare-const result1 Int)

(declare-const b1 Int)

(declare-const result2 Int)

(declare-const c1 Int)

(declare-const result3 Bool)

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 c)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 a)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 b)))

;; H
  (assert (= result a))

;; H
  (assert (= a1 1))

;; H
  (assert (= result1 b))

;; H
  (assert (= b1 2))

;; H
  (assert (= result2 c))

;; H
  (assert (= c1 3))

;; H
  (assert (and (= o4 (get_a a1)) (and (in_range1 o4) (= o4 a1))))

;; H
  (assert (= o5 (ite (= o4 c1) true false)))

;; H
  (assert (and (= o2 (f4 c1 a1)) (= (= o2 true) (= c1 (get_a a1)))))

;; H
  (assert (and (= o (f3 c1)) (= (= o true) (< 0 c1))))

;; H
  (assert (and (= o1 (f1 c1)) (= (= o1 true) (< 0 c1))))

;; H
  (assert (= o3 (ite (= o1 true) o false)))

;; H
  (assert (= o6 (ite (= o3 true) o2 false)))

;; H
  (assert (= result3 (ite (= o6 true) o5 false)))

(assert
;; WP_parameter_def
 ;; File "foo.ads", line 19, characters 0-0
  (not (= (f1 c1) true)))
(check-sat)
(exit)
