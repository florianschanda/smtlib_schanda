(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type character

predicate in_range(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq2 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def1 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq2(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq2(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq2(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq2(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type num

predicate in_range1(x: int) = ((0 <= x) and (x <= 999))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : num, num -> bool

logic dummy1 : num

type num__ref = { num__content : num
}

function num__ref___projection(a: num__ref) : num = (a).num__content

logic to_rep1 : num -> int

logic of_rep1 : int -> num

axiom inversion_axiom1 :
  (forall x:num [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:num [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref1 = { map__content1 : (int,num) farray
}

logic slide1 : (int,num) farray, int, int -> (int,num) farray

axiom slide_eq1 :
  (forall a:(int,num) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,num) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,num) farray, int, int, (int,num) farray, int,
  int -> (int,num) farray

axiom concat_def1 :
  (forall a:(int,num) farray. forall b:(int,num) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : num, int -> (int,num) farray

axiom singleton_def1 :
  (forall v:num.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq4 : (int,num) farray, int, int, (int,num) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,num) farray. forall a__first:int. forall a__last:int.
  forall b:(int,num) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_135:int. ((((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) and
  (to_rep1((a[temp___idx_135])) = to_rep1((b[((b__first - a__first) + temp___idx_135)])))) or
  (not ((a__first <= temp___idx_135) and (temp___idx_135 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep1((a[temp___idx_135])) = to_rep1((b[((b__first - a__first) + temp___idx_135)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,num) farray. forall b:(int,num) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep1((a[temp___idx_135])) = to_rep1((b[((b__first - a__first) + temp___idx_135)])))))))))

logic compare1 : (int,num) farray, int, int, (int,num) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,num) farray. forall b:(int,num) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,num) farray. forall b:(int,num) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,num) farray. forall b:(int,num) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

type cur

predicate in_range2(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : cur, cur -> bool

logic dummy2 : cur

type cur__ref = { cur__content : cur
}

function cur__ref___projection(a: cur__ref) : cur = (a).cur__content

logic to_rep2 : cur -> int

logic of_rep2 : int -> cur

axiom inversion_axiom2 :
  (forall x:cur [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:cur [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type raw_amount

predicate in_range3(x: int) = ((0 <= x) and (x <= 1000000))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : raw_amount, raw_amount -> bool

logic dummy3 : raw_amount

type raw_amount__ref = { raw_amount__content : raw_amount
}

function raw_amount__ref___projection(a: raw_amount__ref) : raw_amount =
  (a).raw_amount__content

logic to_rep3 : raw_amount -> int

logic of_rep3 : int -> raw_amount

axiom inversion_axiom3 :
  (forall x:raw_amount [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:raw_amount [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__money__amount__currency : cur;
rec__money__amount__raw : raw_amount
}

function us_split_fields_Currency__projection(a: us_split_fields) : cur =
  (a).rec__money__amount__currency

function us_split_fields_Raw__projection(a: us_split_fields) : raw_amount =
  (a).rec__money__amount__raw

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  ((((to_rep2(((a).us_split_fields1).rec__money__amount__currency) = to_rep2(((b).us_split_fields1).rec__money__amount__currency)) and
  (to_rep3(((a).us_split_fields1).rec__money__amount__raw) = to_rep3(((b).us_split_fields1).rec__money__amount__raw))) ->
  (bool_eq7(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_fields1).rec__money__amount__currency) = to_rep2(((b).us_split_fields1).rec__money__amount__currency)) and
  (to_rep3(((a).us_split_fields1).rec__money__amount__raw) = to_rep3(((b).us_split_fields1).rec__money__amount__raw)))) ->
  (bool_eq7(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:cur. forall a1:raw_amount. (0 <= object__size({
  us_split_fields1 = { rec__money__amount__currency = a;
  rec__money__amount__raw = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:cur. forall a1:raw_amount. (0 <= object__alignment({
  us_split_fields1 = { rec__money__amount__currency = a;
  rec__money__amount__raw = a1 } })))

logic money__amount__currency__first__bit : int

logic money__amount__currency__last__bit : int

logic money__amount__currency__position : int

axiom money__amount__currency__first__bit_axiom :
  (0 <= money__amount__currency__first__bit)

axiom money__amount__currency__last__bit_axiom :
  (money__amount__currency__first__bit <  money__amount__currency__last__bit)

axiom money__amount__currency__position_axiom :
  (0 <= money__amount__currency__position)

logic money__amount__raw__first__bit : int

logic money__amount__raw__last__bit : int

logic money__amount__raw__position : int

axiom money__amount__raw__first__bit_axiom :
  (0 <= money__amount__raw__first__bit)

axiom money__amount__raw__last__bit_axiom :
  (money__amount__raw__first__bit <  money__amount__raw__last__bit)

axiom money__amount__raw__position_axiom :
  (0 <= money__amount__raw__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : cur

logic dummy5 : raw_amount

type amount__ref = { amount__content : us_rep
}

function amount__ref___projection(a: amount__ref) : us_rep =
  (a).amount__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom is_empty__post_axiom : true

axiom is_empty__def_axiom :
  (forall a:cur. forall a1:raw_amount [is_empty({ us_split_fields1 = {
  rec__money__amount__currency = a; rec__money__amount__raw = a1 } })].
  ((is_empty({ us_split_fields1 = { rec__money__amount__currency = a;
  rec__money__amount__raw = a1 } }) = true) <-> (to_rep3(a1) = 0)))

type ext_account_num

predicate in_range4(x: int) = ((0 <= x) and (x <= 200000))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : ext_account_num, ext_account_num -> bool

logic dummy6 : ext_account_num

type ext_account_num__ref = { ext_account_num__content : ext_account_num
}

function ext_account_num__ref___projection(a: ext_account_num__ref) : ext_account_num =
  (a).ext_account_num__content

logic to_rep4 : ext_account_num -> int

logic of_rep4 : int -> ext_account_num

axiom inversion_axiom4 :
  (forall x:ext_account_num [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:ext_account_num [to_rep4(x)]. in_range4(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range4(x) ->
  (to_rep4(of_rep4(x)) = x)))

type account_num

predicate in_range5(x: int) = ((1 <= x) and (x <= 200000))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : account_num, account_num -> bool

logic dummy7 : account_num

type account_num__ref = { account_num__content : account_num
}

function account_num__ref___projection(a: account_num__ref) : account_num =
  (a).account_num__content

type us_split_fields2 = {
rec__database__availability__account_link__available : bool;
rec__database__availability__account_link__prev : ext_account_num;
rec__database__availability__account_link__next : ext_account_num
}

function us_split_fields_Available__projection(a: us_split_fields2) : bool =
  (a).rec__database__availability__account_link__available

function us_split_fields_Prev__projection(a: us_split_fields2) : ext_account_num =
  (a).rec__database__availability__account_link__prev

function us_split_fields_Next__projection(a: us_split_fields2) : ext_account_num =
  (a).rec__database__availability__account_link__next

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq10 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq10(a, b)].
  (((((((a).us_split_fields3).rec__database__availability__account_link__available = ((b).us_split_fields3).rec__database__availability__account_link__available) and
  (to_rep4(((a).us_split_fields3).rec__database__availability__account_link__prev) = to_rep4(((b).us_split_fields3).rec__database__availability__account_link__prev))) and
  (to_rep4(((a).us_split_fields3).rec__database__availability__account_link__next) = to_rep4(((b).us_split_fields3).rec__database__availability__account_link__next))) ->
  (bool_eq10(a, b) = true)) and
  ((not (((((a).us_split_fields3).rec__database__availability__account_link__available = ((b).us_split_fields3).rec__database__availability__account_link__available) and
  (to_rep4(((a).us_split_fields3).rec__database__availability__account_link__prev) = to_rep4(((b).us_split_fields3).rec__database__availability__account_link__prev))) and
  (to_rep4(((a).us_split_fields3).rec__database__availability__account_link__next) = to_rep4(((b).us_split_fields3).rec__database__availability__account_link__next)))) ->
  (bool_eq10(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:ext_account_num. forall a2:ext_account_num.
  (0 <= object__size1({ us_split_fields3 = {
  rec__database__availability__account_link__available = a;
  rec__database__availability__account_link__prev = a1;
  rec__database__availability__account_link__next = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:ext_account_num. forall a2:ext_account_num.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__database__availability__account_link__available = a;
  rec__database__availability__account_link__prev = a1;
  rec__database__availability__account_link__next = a2 } })))

logic database__availability__account_link__available__first__bit : int

logic database__availability__account_link__available__last__bit : int

logic database__availability__account_link__available__position : int

axiom database__availability__account_link__available__first__bit_axiom :
  (0 <= database__availability__account_link__available__first__bit)

axiom database__availability__account_link__available__last__bit_axiom :
  (database__availability__account_link__available__first__bit <  database__availability__account_link__available__last__bit)

axiom database__availability__account_link__available__position_axiom :
  (0 <= database__availability__account_link__available__position)

logic database__availability__account_link__prev__first__bit : int

logic database__availability__account_link__prev__last__bit : int

logic database__availability__account_link__prev__position : int

axiom database__availability__account_link__prev__first__bit_axiom :
  (0 <= database__availability__account_link__prev__first__bit)

axiom database__availability__account_link__prev__last__bit_axiom :
  (database__availability__account_link__prev__first__bit <  database__availability__account_link__prev__last__bit)

axiom database__availability__account_link__prev__position_axiom :
  (0 <= database__availability__account_link__prev__position)

logic database__availability__account_link__next__first__bit : int

logic database__availability__account_link__next__last__bit : int

logic database__availability__account_link__next__position : int

axiom database__availability__account_link__next__first__bit_axiom :
  (0 <= database__availability__account_link__next__first__bit)

axiom database__availability__account_link__next__last__bit_axiom :
  (database__availability__account_link__next__first__bit <  database__availability__account_link__next__last__bit)

axiom database__availability__account_link__next__position_axiom :
  (0 <= database__availability__account_link__next__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy8 : bool

logic dummy9 : ext_account_num

logic dummy10 : ext_account_num

type account_link__ref = { account_link__content : us_rep1
}

function account_link__ref___projection(a: account_link__ref) : us_rep1 =
  (a).account_link__content

type map__ref2 = { map__content2 : (int,us_rep1) farray
}

logic slide2 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq2 :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def2 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def2 :
  (forall v:bool. forall v1:ext_account_num. forall v2:ext_account_num.
  (forall i:int [(singleton2({ us_split_fields3 = {
  rec__database__availability__account_link__available = v;
  rec__database__availability__account_link__prev = v1;
  rec__database__availability__account_link__next = v2 } }, i)[i])].
  ((singleton2({ us_split_fields3 = {
  rec__database__availability__account_link__available = v;
  rec__database__availability__account_link__prev = v1;
  rec__database__availability__account_link__next = v2 } }, i)[i]) = {
  us_split_fields3 = { rec__database__availability__account_link__available =
  v; rec__database__availability__account_link__prev = v1;
  rec__database__availability__account_link__next = v2 } })))

logic bool_eq11 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def10 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_141:int. ((((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) and (bool_eq10((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true)) or
  (not ((a__first <= temp___idx_141) and (temp___idx_141 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_141:int. (((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) -> (bool_eq10((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true))))) -> (bool_eq11(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_141:int. (((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) -> (bool_eq10((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic existing : int, (int,us_rep1) farray -> bool

logic existing__function_guard : bool, int, (int,us_rep1) farray -> prop

logic is_available : int, (int,us_rep1) farray -> bool

logic is_available__function_guard : bool, int, (int,us_rep1) farray -> prop

axiom existing__post_axiom : true

axiom existing__def_axiom :
  (forall account:int.
  (forall database__availability__links:(int,us_rep1) farray
  [existing(account, database__availability__links)]. ((existing(account,
  database__availability__links) = true) <-> (not (is_available(account,
  database__availability__links) = true)))))

logic dummy11 : (int,character) farray

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

logic user_eq8 : (int,character) farray, (int,character) farray -> bool

logic dummy12 : (int,num) farray

logic value__size3 : int

logic object__size3 : (int,num) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,num) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,num) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,num) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,num) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,num) farray. (0 <= object__alignment3(a)))

logic user_eq9 : (int,num) farray, (int,num) farray -> bool

type us_split_fields4 = { rec__database__account_rec__owner_name :
(int,character) farray; rec__database__account_rec__owner_id :
(int,num) farray; rec__database__account_rec__account : ext_account_num
}

function us_split_fields_Owner_Name__projection(a: us_split_fields4) : (int,character) farray =
  (a).rec__database__account_rec__owner_name

function us_split_fields_Owner_Id__projection(a: us_split_fields4) : (int,num) farray =
  (a).rec__database__account_rec__owner_id

function us_split_fields_Account__projection(a: us_split_fields4) : ext_account_num =
  (a).rec__database__account_rec__account

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep_3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq12 : us_rep2, us_rep2 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq12(a, b)].
  (((((bool_eq2(((a).us_split_fields5).rec__database__account_rec__owner_name,
  1, 255, ((b).us_split_fields5).rec__database__account_rec__owner_name, 1,
  255) = true) and
  (bool_eq4(((a).us_split_fields5).rec__database__account_rec__owner_id, 0,
  2, ((b).us_split_fields5).rec__database__account_rec__owner_id, 0,
  2) = true)) and
  (to_rep4(((a).us_split_fields5).rec__database__account_rec__account) = to_rep4(((b).us_split_fields5).rec__database__account_rec__account))) ->
  (bool_eq12(a, b) = true)) and
  ((not (((bool_eq2(((a).us_split_fields5).rec__database__account_rec__owner_name,
  1, 255, ((b).us_split_fields5).rec__database__account_rec__owner_name, 1,
  255) = true) and
  (bool_eq4(((a).us_split_fields5).rec__database__account_rec__owner_id, 0,
  2, ((b).us_split_fields5).rec__database__account_rec__owner_id, 0,
  2) = true)) and
  (to_rep4(((a).us_split_fields5).rec__database__account_rec__account) = to_rep4(((b).us_split_fields5).rec__database__account_rec__account)))) ->
  (bool_eq12(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. forall a1:(int,num) farray.
  forall a2:ext_account_num. (0 <= object__size4({ us_split_fields5 = {
  rec__database__account_rec__owner_name = a;
  rec__database__account_rec__owner_id = a1;
  rec__database__account_rec__account = a2 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. forall a1:(int,num) farray.
  forall a2:ext_account_num. (0 <= object__alignment4({ us_split_fields5 = {
  rec__database__account_rec__owner_name = a;
  rec__database__account_rec__owner_id = a1;
  rec__database__account_rec__account = a2 } })))

logic database__account_rec__owner_name__first__bit : int

logic database__account_rec__owner_name__last__bit : int

logic database__account_rec__owner_name__position : int

axiom database__account_rec__owner_name__first__bit_axiom :
  (0 <= database__account_rec__owner_name__first__bit)

axiom database__account_rec__owner_name__last__bit_axiom :
  (database__account_rec__owner_name__first__bit <  database__account_rec__owner_name__last__bit)

axiom database__account_rec__owner_name__position_axiom :
  (0 <= database__account_rec__owner_name__position)

logic database__account_rec__owner_id__first__bit : int

logic database__account_rec__owner_id__last__bit : int

logic database__account_rec__owner_id__position : int

axiom database__account_rec__owner_id__first__bit_axiom :
  (0 <= database__account_rec__owner_id__first__bit)

axiom database__account_rec__owner_id__last__bit_axiom :
  (database__account_rec__owner_id__first__bit <  database__account_rec__owner_id__last__bit)

axiom database__account_rec__owner_id__position_axiom :
  (0 <= database__account_rec__owner_id__position)

logic database__account_rec__account__first__bit : int

logic database__account_rec__account__last__bit : int

logic database__account_rec__account__position : int

axiom database__account_rec__account__first__bit_axiom :
  (0 <= database__account_rec__account__first__bit)

axiom database__account_rec__account__last__bit_axiom :
  (database__account_rec__account__first__bit <  database__account_rec__account__last__bit)

axiom database__account_rec__account__position_axiom :
  (0 <= database__account_rec__account__position)

logic user_eq10 : us_rep2, us_rep2 -> bool

logic dummy13 : (int,character) farray

logic dummy14 : (int,num) farray

logic dummy15 : ext_account_num

type account_rec__ref = { account_rec__content : us_rep2
}

function account_rec__ref___projection(a: account_rec__ref) : us_rep2 =
  (a).account_rec__content

type map__ref3 = { map__content3 : (int,us_rep2) farray
}

logic slide3 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq3 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def3 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def3 :
  (forall v:(int,character) farray. forall v1:(int,num) farray.
  forall v2:ext_account_num.
  (forall i:int [(singleton3({ us_split_fields5 = {
  rec__database__account_rec__owner_name = v;
  rec__database__account_rec__owner_id = v1;
  rec__database__account_rec__account = v2 } }, i)[i])]. ((singleton3({
  us_split_fields5 = { rec__database__account_rec__owner_name = v;
  rec__database__account_rec__owner_id = v1;
  rec__database__account_rec__account = v2 } }, i)[i]) = { us_split_fields5 =
  { rec__database__account_rec__owner_name = v;
  rec__database__account_rec__owner_id = v1;
  rec__database__account_rec__account = v2 } })))

logic bool_eq13 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def12 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq13(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_142:int. ((((a__first <= temp___idx_142) and
  (temp___idx_142 <= a__last)) and (bool_eq12((a[temp___idx_142]),
  (b[((b__first - a__first) + temp___idx_142)])) = true)) or
  (not ((a__first <= temp___idx_142) and (temp___idx_142 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_142:int. (((a__first <= temp___idx_142) and
  (temp___idx_142 <= a__last)) -> (bool_eq12((a[temp___idx_142]),
  (b[((b__first - a__first) + temp___idx_142)])) = true))))) -> (bool_eq13(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_142:int. (((a__first <= temp___idx_142) and
  (temp___idx_142 <= a__last)) -> (bool_eq12((a[temp___idx_142]),
  (b[((b__first - a__first) + temp___idx_142)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic belongs_to : int, (int,character) farray, (int,num) farray,
  (int,us_rep2) farray -> bool

logic belongs_to__function_guard : bool, int, (int,character) farray,
  (int,num) farray, (int,us_rep2) farray -> prop

axiom belongs_to__post_axiom : true

axiom belongs_to__def_axiom :
  (forall account:int.
  (forall customer:(int,character) farray.
  (forall id:(int,num) farray.
  (forall database__accounts:(int,us_rep2) farray [belongs_to(account,
  customer, id, database__accounts)]. ((belongs_to(account, customer, id,
  database__accounts) = true) <-> (bool_eq12((database__accounts[account]), {
  us_split_fields5 = { rec__database__account_rec__owner_name = customer;
  rec__database__account_rec__owner_id = id;
  rec__database__account_rec__account = of_rep4(account) } }) = true))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic max_account_reached : int -> bool

logic max_account_reached__function_guard : bool, int -> prop

logic some_available : int -> bool

logic some_available__function_guard : bool, int -> prop

axiom max_account_reached__post_axiom : true

axiom max_account_reached__def_axiom :
  (forall database__availability__first_available:int
  [max_account_reached(database__availability__first_available)].
  ((max_account_reached(database__availability__first_available) = true) <->
  (not (some_available(database__availability__first_available) = true))))

type us_split_fields6 = { rec__database__account_balance__value : us_rep;
rec__database__account_balance__account : ext_account_num
}

function us_split_fields_Value__projection(a: us_split_fields6) : us_rep =
  (a).rec__database__account_balance__value

function us_split_fields_Account2__projection(a: us_split_fields6) : ext_account_num =
  (a).rec__database__account_balance__account

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref_4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep_4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq14 : us_rep3, us_rep3 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq14(a, b)].
  ((((bool_eq7(((a).us_split_fields7).rec__database__account_balance__value,
  ((b).us_split_fields7).rec__database__account_balance__value) = true) and
  (to_rep4(((a).us_split_fields7).rec__database__account_balance__account) = to_rep4(((b).us_split_fields7).rec__database__account_balance__account))) ->
  (bool_eq14(a, b) = true)) and
  ((not ((bool_eq7(((a).us_split_fields7).rec__database__account_balance__value,
  ((b).us_split_fields7).rec__database__account_balance__value) = true) and
  (to_rep4(((a).us_split_fields7).rec__database__account_balance__account) = to_rep4(((b).us_split_fields7).rec__database__account_balance__account)))) ->
  (bool_eq14(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:cur. forall a1:raw_amount. forall a2:ext_account_num.
  (0 <= object__size5({ us_split_fields7 = {
  rec__database__account_balance__value = { us_split_fields1 = {
  rec__money__amount__currency = a; rec__money__amount__raw = a1 } };
  rec__database__account_balance__account = a2 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:cur. forall a1:raw_amount. forall a2:ext_account_num.
  (0 <= object__alignment5({ us_split_fields7 = {
  rec__database__account_balance__value = { us_split_fields1 = {
  rec__money__amount__currency = a; rec__money__amount__raw = a1 } };
  rec__database__account_balance__account = a2 } })))

logic database__account_balance__value__first__bit : int

logic database__account_balance__value__last__bit : int

logic database__account_balance__value__position : int

axiom database__account_balance__value__first__bit_axiom :
  (0 <= database__account_balance__value__first__bit)

axiom database__account_balance__value__last__bit_axiom :
  (database__account_balance__value__first__bit <  database__account_balance__value__last__bit)

axiom database__account_balance__value__position_axiom :
  (0 <= database__account_balance__value__position)

logic database__account_balance__account__first__bit : int

logic database__account_balance__account__last__bit : int

logic database__account_balance__account__position : int

axiom database__account_balance__account__first__bit_axiom :
  (0 <= database__account_balance__account__first__bit)

axiom database__account_balance__account__last__bit_axiom :
  (database__account_balance__account__first__bit <  database__account_balance__account__last__bit)

axiom database__account_balance__account__position_axiom :
  (0 <= database__account_balance__account__position)

logic user_eq11 : us_rep3, us_rep3 -> bool

logic dummy16 : cur

logic dummy17 : raw_amount

logic dummy18 : ext_account_num

type account_balance__ref = { account_balance__content : us_rep3
}

function account_balance__ref___projection(a: account_balance__ref) : us_rep3 =
  (a).account_balance__content

type map__ref4 = { map__content4 : (int,us_rep3) farray
}

logic slide4 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq4 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat4 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> (int,us_rep3) farray

axiom concat_def4 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat4(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat4(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat4(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton4 : us_rep3, int -> (int,us_rep3) farray

axiom singleton_def4 :
  (forall v:cur. forall v1:raw_amount. forall v2:ext_account_num.
  (forall i:int [(singleton4({ us_split_fields7 = {
  rec__database__account_balance__value = { us_split_fields1 = {
  rec__money__amount__currency = v; rec__money__amount__raw = v1 } };
  rec__database__account_balance__account = v2 } }, i)[i])]. ((singleton4({
  us_split_fields7 = { rec__database__account_balance__value = {
  us_split_fields1 = { rec__money__amount__currency = v;
  rec__money__amount__raw = v1 } }; rec__database__account_balance__account =
  v2 } }, i)[i]) = { us_split_fields7 = {
  rec__database__account_balance__value = { us_split_fields1 = {
  rec__money__amount__currency = v; rec__money__amount__raw = v1 } };
  rec__database__account_balance__account = v2 } })))

logic bool_eq15 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def14 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq15(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_143:int. ((((a__first <= temp___idx_143) and
  (temp___idx_143 <= a__last)) and (bool_eq14((a[temp___idx_143]),
  (b[((b__first - a__first) + temp___idx_143)])) = true)) or
  (not ((a__first <= temp___idx_143) and (temp___idx_143 <= a__last)))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_143:int. (((a__first <= temp___idx_143) and
  (temp___idx_143 <= a__last)) -> (bool_eq14((a[temp___idx_143]),
  (b[((b__first - a__first) + temp___idx_143)])) = true))))) -> (bool_eq15(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_143:int. (((a__first <= temp___idx_143) and
  (temp___idx_143 <= a__last)) -> (bool_eq14((a[temp___idx_143]),
  (b[((b__first - a__first) + temp___idx_143)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic balance : int, (int,us_rep1) farray, (int,us_rep3) farray -> us_rep

logic balance__function_guard : us_rep, int, (int,us_rep1) farray,
  (int,us_rep3) farray -> prop

axiom balance__post_axiom : true

axiom balance__def_axiom :
  (forall account:int.
  (forall database__availability__links:(int,us_rep1) farray.
  (forall database__accounts_balance:(int,us_rep3) farray [balance(account,
  database__availability__links, database__accounts_balance)].
  (in_range5(account) -> (balance(account, database__availability__links,
  database__accounts_balance) = (((database__accounts_balance[account])).us_split_fields7).rec__database__account_balance__value)))))

logic customer : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

logic id : (int,num) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

logic cur1 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

axiom some_available__post_axiom : true

axiom some_available__def_axiom :
  (forall database__availability__first_available:int
  [some_available(database__availability__first_available)].
  ((some_available(database__availability__first_available) = true) <->
  (not (database__availability__first_available = 0))))

axiom is_available__post_axiom : true

axiom is_available__def_axiom :
  (forall account:int.
  (forall database__availability__links:(int,us_rep1) farray
  [is_available(account, database__availability__links)].
  ((is_available(account, database__availability__links) = true) <->
  ((((database__availability__links[account])).us_split_fields3).rec__database__availability__account_link__available = true))))

 (* File "money.ads", line 17, characters 0-0 *)
goal WP_parameter_def :
  (forall account:int. forall links:(int,us_rep1) farray.
  forall first_available:int. forall accounts:(int,us_rep2) farray.
  forall accounts_balance:(int,us_rep3) farray. forall o:ext_account_num.
  forall o1:(int,character) farray. forall o2:(int,num) farray.
  forall o3:ext_account_num. forall o4:(int,character) farray.
  forall o5:(int,num) farray. forall o6:ext_account_num.
  forall o7:(int,us_rep2) farray. forall o8:raw_amount. forall o9:cur.
  forall o10:cur. forall o11:raw_amount. forall o12:ext_account_num.
  forall o13:cur. forall o14:raw_amount. forall o15:cur.
  forall o16:raw_amount. forall o17:ext_account_num. forall o18:cur.
  forall o19:raw_amount. forall o20:ext_account_num.
  forall o21:(int,us_rep3) farray. forall account1:int.
  forall links1:(int,us_rep1) farray. forall first_available1:int.
  forall accounts1:(int,us_rep2) farray.
  forall accounts_balance1:(int,us_rep3) farray. forall result:bool.
  forall result1:int. forall account2:int. forall account3:int.
  forall links2:(int,us_rep1) farray. forall first_available2:int.
  forall result2:(int,us_rep2) farray. forall accounts2:(int,us_rep2) farray.
  forall result3:(int,us_rep3) farray.
  forall accounts_balance2:(int,us_rep3) farray. forall account4:int.
  forall links3:(int,us_rep1) farray. forall first_available3:int.
  forall accounts3:(int,us_rep2) farray.
  forall accounts_balance3:(int,us_rep3) farray. forall account5:int.
  forall links4:(int,us_rep1) farray. forall first_available4:int.
  forall accounts4:(int,us_rep2) farray.
  forall accounts_balance4:(int,us_rep3) farray. forall account6:int.
  forall links5:(int,us_rep1) farray. forall first_available5:int.
  forall accounts5:(int,us_rep2) farray.
  forall accounts_balance5:(int,us_rep3) farray. forall account7:int.
  forall links6:(int,us_rep1) farray. forall first_available6:int.
  forall accounts6:(int,us_rep2) farray.
  forall accounts_balance6:(int,us_rep3) farray.
  ((in_range4(first_available) and (in_range2(cur1) and (((1 <= 200000) ->
  in_range5(account)) and
  ((not (max_account_reached(first_available) = true)) and (((((({
  map__content4 = accounts_balance3 } = { map__content4 = accounts_balance
  }) and (({ map__content3 = accounts3 } = { map__content3 = accounts }) and
  (({ int__content = first_available3 } = { int__content = first_available
  }) and (({ map__content2 = links3 } = { map__content2 = links }) and
  (account2 = account4))))) and ((accounts_balance4 = accounts_balance1) and
  ((accounts4 = accounts1) and ((first_available4 = first_available1) and
  ((links4 = links1) and (account5 = account2)))))) and
  (((result = max_account_reached(first_available)) and ((result = true) <->
  (not (some_available(first_available) = true)))) and ((result = true) and
  (({ int__content = result1 } = { int__content = account }) and
  (account2 = 200000))))) or
  ((((result = max_account_reached(first_available)) and ((result = true) <->
  (not (some_available(first_available) = true)))) and
  ((not (result = true)) and ((account2 = account) and
  (account2 = account1)))) and ((((accounts_balance2 = accounts_balance3) and
  ((accounts2 = accounts3) and ((first_available2 = first_available3) and
  ((links2 = links3) and (account3 = account4))))) and
  ((accounts_balance4 = accounts_balance2) and ((accounts4 = accounts2) and
  ((first_available4 = first_available2) and ((links4 = links2) and
  (account5 = account3)))))) and ((((not (is_available(account3,
  links2) = true)) and
  (forall act:int. (((1 <= act) and (act <= 200000)) ->
  ((not (act = account3)) ->
  (((((links2[act])).us_split_fields3).rec__database__availability__account_link__available = true) <->
  ((((links[act])).us_split_fields3).rec__database__availability__account_link__available = true)))))) and
  (in_range5(account3) and in_range4(first_available2))) and
  ((((((to_rep4(o) = account3) and ((customer = o1) and ((id = o2) and
  (o = o3)))) and ((o4 = o1) and ((o5 = o2) and (o6 = o3)))) and
  (o7 = (accounts[account3 <- { us_split_fields5 = {
  rec__database__account_rec__owner_name = o4;
  rec__database__account_rec__owner_id = o5;
  rec__database__account_rec__account = o6 } }]))) and
  ((result2 = accounts) and (accounts2 = o7))) and
  (((((to_rep4(o12) = account3) and ((((to_rep3(o8) = 0) and
  ((to_rep2(o9) = cur1) and ((o9 = o10) and (o8 = o11)))) and
  ((o13 = o10) and (o14 = o11))) and (((o15 = o13) and (o16 = o14)) and
  (o12 = o17)))) and (((o18 = o15) and (o19 = o16)) and (o20 = o17))) and
  (o21 = (accounts_balance[account3 <- { us_split_fields7 = {
  rec__database__account_balance__value = { us_split_fields1 = {
  rec__money__amount__currency = o18; rec__money__amount__raw = o19 } };
  rec__database__account_balance__account = o20 } }]))) and
  ((result3 = accounts_balance) and (accounts_balance2 = o21)))))))) and ((({
  map__content4 = accounts_balance5 } = { map__content4 = accounts_balance3
  }) and (({ map__content3 = accounts5 } = { map__content3 = accounts3 }) and
  (({ int__content = first_available5 } = { int__content = first_available3
  }) and (({ map__content2 = links5 } = { map__content2 = links3 }) and ({
  int__content = account6 } = { int__content = account4 }))))) and
  ((accounts_balance6 = accounts_balance4) and ((accounts6 = accounts4) and
  ((first_available6 = first_available4) and ((links6 = links4) and
  (account7 = account5))))))))))) -> (existing(account6, links5) = true)))
