;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort integer_subtype 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer_subtype integer_subtype) Bool)

(declare-fun dummy1 () integer_subtype)

(declare-datatypes ()
((integer_subtype__ref
 (mk_integer_subtype__ref (integer_subtype__content integer_subtype)))))
(define-fun integer_subtype__ref___projection ((a integer_subtype__ref)) integer_subtype
  (integer_subtype__content a))

(declare-fun to_rep1 (integer_subtype) Int)

(declare-fun of_rep1 (Int) integer_subtype)

;; inversion_axiom
  (assert
  (forall ((x integer_subtype))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer_subtype)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort tint_array1D1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tint_array1D1 tint_array1D1) Bool)

(declare-fun dummy2 () tint_array1D1)

(declare-datatypes ()
((tint_array1D1__ref
 (mk_tint_array1D1__ref (tint_array1D1__content tint_array1D1)))))
(define-fun tint_array1D1__ref___projection ((a tint_array1D1__ref)) tint_array1D1
  (tint_array1D1__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort tint_array2D1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (tint_array2D1 tint_array2D1) Bool)

(declare-fun dummy3 () tint_array2D1)

(declare-datatypes ()
((tint_array2D1__ref
 (mk_tint_array2D1__ref (tint_array2D1__content tint_array2D1)))))
(define-fun tint_array2D1__ref___projection ((a tint_array2D1__ref)) tint_array2D1
  (tint_array2D1__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int integer_subtype))))))
(declare-fun slide1 ((Array Int integer_subtype) Int
  Int) (Array Int integer_subtype))

;; slide_eq
  (assert
  (forall ((a (Array Int integer_subtype)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer_subtype)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int integer_subtype) Int Int
  (Array Int integer_subtype) Int Int) (Array Int integer_subtype))

;; concat_def
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (integer_subtype Int) (Array Int integer_subtype))

;; singleton_def
  (assert
  (forall ((v integer_subtype))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int integer_subtype)) (a__first Int)
  (a__last Int) (b (Array Int integer_subtype)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep1 (select a temp___idx_133)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep1 (select a temp___idx_133)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare1 ((Array Int integer_subtype) Int Int
  (Array Int integer_subtype) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun input_array () (Array Int integer))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort t1b 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (t1b t1b) Bool)

(declare-fun dummy4 () t1b)

(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content t1b)))))
(define-fun t1b__ref___projection ((a t1b__ref)) t1b (t1b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_137 Int)
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool (=>
                                      (or (= temp___is_init_134 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range2 temp___expr_137)))

(declare-fun result__ () (Array Int integer_subtype))

(declare-fun i () Int)

(declare-fun cast_array__cast__result () (Array Int integer_subtype))

(declare-fun temp___164 () Int)

(declare-fun temp___162 () (Array Int integer_subtype))

(declare-fun o () integer_subtype)

(declare-fun o1 () (Array Int integer_subtype))

(declare-fun result__1 () (Array Int integer_subtype))

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun result1 () (Array Int integer_subtype))

(declare-fun result__2 () (Array Int integer_subtype))

(declare-fun result__3 () (Array Int integer_subtype))

(declare-fun i2 () Int)

(declare-fun result__4 () (Array Int integer_subtype))

(declare-fun i3 () Int)

(declare-fun result__5 () (Array Int integer_subtype))

(declare-fun i4 () Int)

(declare-fun result__6 () (Array Int integer_subtype))

(declare-fun i5 () Int)

(declare-fun result__7 () (Array Int integer_subtype))

(declare-fun i6 () Int)

(declare-fun result2 () (Array Int integer_subtype))

(declare-fun cast_array__cast__result1 () (Array Int integer_subtype))

(declare-fun cast_array__cast__result2 () (Array Int integer_subtype))

(declare-fun cast_array__cast__result3 () (Array Int integer_subtype))

(declare-fun result__8 () (Array Int integer_subtype))

(declare-fun i7 () Int)

(declare-fun cast_array__cast__result4 () (Array Int integer_subtype))

(declare-fun result__9 () (Array Int integer_subtype))

(declare-fun i8 () Int)

(declare-fun cast_array__cast__result5 () (Array Int integer_subtype))

(define-fun result__10 () map__ref1 (mk_map__ref1 result__6))

(define-fun result__11 () map__ref1 (mk_map__ref1 result__))

(declare-fun result3 () (Array Int integer_subtype))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i1 0))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= temp___164 i1)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= temp___162 result__)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 2))
  (= (to_rep1 o) (to_rep (select input_array i1)))))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= o1 (store result__ i1 o))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 2)) (= (mk_map__ref1 result1) result__11)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= result__2 o1)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 2))
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k i2))
  (= (to_rep1 (select result__3 k)) (to_rep (select input_array k)))))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 2))
  (and
  (and
  (forall ((temp___163 Int))
  (=> (and (<= 0 temp___163) (<= temp___163 2))
  (=> (< i2 temp___163)
  (= (select result__3 temp___163) (select temp___162 temp___163)))))
  (=> (<= 0 2) (in_range5 i2))) (and (<= 0 i2) (<= i2 2)))))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= i2 2)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= i2 i3)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= result__3 result__4)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= i4 i2)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= result__5 result__3)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 2)) (= (mk_int__ref i5) (mk_int__ref i3))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 2)) (= result__10 (mk_map__ref1 result__4))))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= i6 i4)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 2)) (= result__7 result__5)))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 2))) (= i1 i5)))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 2))) (= result__10 result__11)))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 2))) (= i6 i1)))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 2))) (= result__7 result__1)))

;; H
  (assert (= cast_array__cast__result1 cast_array__cast__result2))

;; H
  (assert (= cast_array__cast__result3 cast_array__cast__result1))

;; H
  (assert (= result2 cast_array__cast__result))

;; H
  (assert (= cast_array__cast__result1 result__6))

;; H
  (assert
  (= (mk_map__ref1 cast_array__cast__result4) (mk_map__ref1
                                              cast_array__cast__result2)))

;; H
  (assert (= i7 i5))

;; H
  (assert (= result__8 result__6))

;; H
  (assert (= cast_array__cast__result5 cast_array__cast__result3))

;; H
  (assert (= i8 i6))

;; H
  (assert (= result__9 result__7))

;; H
  (assert (= result3 cast_array__cast__result4))

(declare-fun k () Int)

;; H
  (assert (<= 0 k))

;; H
  (assert (<= k 2))

(assert
;; WP_parameter_def
 ;; File "cast_array.ads", line 7, characters 0-0
  (not
  (= (to_rep1 (select cast_array__cast__result4 k)) (to_rep
                                                    (select input_array
                                                    k)))))
(check-sat)
(exit)
