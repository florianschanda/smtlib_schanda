;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort e 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (e e) Bool)

(declare-const dummy e)

(declare-datatypes ((e__ref 0)) (((mk_e__ref (e__content e)))))
(define-fun e__ref___projection ((a e__ref)) e (e__content a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 2)) (in_range1 temp___expr_135)))

(declare-sort u8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (u8 u8) Bool)

(declare-const dummy1 u8)

(declare-datatypes ((u8__ref 0)) (((mk_u8__ref (u8__content u8)))))
(define-fun u8__ref___projection ((a u8__ref)) u8 (u8__content a))

(define-fun dynamic_invariant1 ((temp___expr_147 (_ BitVec 8))
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool true)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort source 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (source source) Bool)

(declare-const dummy2 source)

(declare-datatypes ((source__ref 0))
(((mk_source__ref (source__content source)))))
(define-fun source__ref___3__projection ((a source__ref)) source (source__content
                                                                 a))

(define-fun dynamic_invariant2 ((temp___expr_177 (_ BitVec 8))
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)) Bool true)

(declare-sort target 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (target target) Bool)

(declare-const dummy3 target)

(declare-datatypes ((target__ref 0))
(((mk_target__ref (target__content target)))))
(define-fun target__ref___2__projection ((a target__ref)) target (target__content
                                                                 a))

(define-fun dynamic_invariant3 ((temp___expr_183 Int)
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)) Bool (=>
                                      (or (= temp___is_init_180 true)
                                      (<= 0 2)) (in_range2 temp___expr_183)))

(declare-fun c3 ((_ BitVec 8)) Int)

(declare-fun c3__function_guard (Int (_ BitVec 8)) Bool)

;; c3__post_axiom
  (assert
  (forall ((s (_ BitVec 8)))
  (! (=> (dynamic_invariant2 s true true true) (dynamic_invariant3 (c3 s)
     true false true)) :pattern ((c3 s)) )))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const veraw (_ BitVec 8))

(declare-const x Int)

(declare-const tmp (_ BitVec 8))

(declare-const o (_ BitVec 8))

(declare-const o1 Int)

(declare-const veraw1 (_ BitVec 8))

(declare-const result (_ BitVec 8))

(declare-const tmp1 (_ BitVec 8))

(declare-const result1 Int)

(declare-const x1 Int)

(declare-const veraw2 (_ BitVec 8))

(declare-const x2 Int)

(declare-const tmp2 (_ BitVec 8))

(declare-const veraw3 (_ BitVec 8))

(declare-const x3 Int)

(declare-const tmp3 (_ BitVec 8))

;; H
  (assert true)

;; H
  (assert (=> (<= 0 2) (in_range1 x)))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (= o veraw1))

;; H
  (assert (= result tmp))

;; H
  (assert (= tmp1 o))

;; H
  (assert (and (= o1 (c3 tmp1)) (in_range2 o1)))

;; H
  (assert (= result1 x))

;; H
  (assert (= x1 o1))

;; H
  (assert (= tmp2 tmp1))

;; H
  (assert (= x1 x2))

;; H
  (assert (= veraw2 veraw1))

;; H
  (assert (= tmp3 tmp1))

;; H
  (assert (= x3 x1))

;; H
  (assert (= veraw3 veraw1))

(assert
;; WP_parameter_def
 ;; File "port.ads", line 10, characters 0-0
  (not true))
(check-sat)
(exit)
