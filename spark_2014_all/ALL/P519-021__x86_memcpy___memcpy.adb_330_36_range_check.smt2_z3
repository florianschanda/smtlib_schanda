;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 32) Int) Bool)

(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int2 ((_ BitVec 32)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 64) Int) Bool)

(declare-fun lsr2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int3 ((_ BitVec 64)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv2 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 64))))))
(declare-fun power2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min2 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int4 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-fun dummy () unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned8 unsigned8) Bool)

(declare-fun dummy1 () unsigned8)

(declare-datatypes ()
((unsigned8__ref (mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int5 ((x unsigned8)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (= (= (inrange64 var bottom range_size) true)
     (ite (bvule bottom (bvadd (bvsub ((_ int2bv 64) 18446744073709551615) range_size) ((_ int2bv 64) 1)))
     (and (bvule bottom var)
     (bvule var (bvadd bottom (bvsub range_size ((_ int2bv 64) 1)))))
     (or
     (and (bvule bottom var)
     (bvule var ((_ int2bv 64) 18446744073709551615)))
     (bvule var (bvsub (bvsub range_size (bvsub ((_ int2bv 64) 18446744073709551615) bottom)) ((_ int2bv 64) 2))))))) :pattern (
  (inrange64 var bottom range_size)) )))

(declare-fun insaferegion64 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun insaferegion64__function_guard (Bool (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; insaferegion64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (rsp (_ BitVec 64)))
  (! (=>
     (and (dynamic_invariant var true true true) (dynamic_invariant rsp true
     true true))
     (= (= (insaferegion64 var rsp) true)
     (or
     (and (bvule var ((_ int2bv 64) 14987979559889010687))
     (bvuge var (bvadd rsp ((_ int2bv 64) 8))))
     (and (bvule var ((_ int2bv 64) 4611686018427387903))
     (bvuge var ((_ int2bv 64) 0)))))) :pattern ((insaferegion64 var rsp)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_invariant1 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-fun readreglow8 ((_ BitVec 64)) (_ BitVec 8))

(declare-fun readreglow8__function_guard ((_ BitVec 8) (_ BitVec 64)) Bool)

(declare-fun al ((_ BitVec 64)) (_ BitVec 8))

(declare-fun al__function_guard ((_ BitVec 8) (_ BitVec 64)) Bool)

;; al__post_axiom
  (assert
  (forall ((x86__rax (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rax true true true)
     (let ((result (al x86__rax)))
     (and (= result (readreglow8 x86__rax)) (dynamic_invariant1 result true
     false true)))) :pattern ((al x86__rax)) )))

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun readmem8 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 8))

(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem8__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem8 addr x86__memory)))
     (and (= result (to_rep (select x86__memory addr))) (dynamic_invariant1
     result true false true)))) :pattern ((readmem8 addr x86__memory)) ))))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(declare-fun readmem64ghost ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64ghost__function_guard ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64ghost__post_axiom
  (assert
  (forall ((mem (Array (_ BitVec 64) unsigned8))
  (x86__memory (Array (_ BitVec 64) unsigned8)))
  (forall ((addr (_ BitVec 64)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64ghost mem addr x86__memory)))
     (and
     (= result (bvor (bvor (bvor (bvor (bvor (bvor (bvor ((_ zero_extend 56)
     (to_rep (select mem addr))) (bvshl ((_ zero_extend 56) (to_rep
                                                            (select mem (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 8))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 16))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 24))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 32))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 40))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 48))) (bvshl ((_ zero_extend 56)
     (to_rep (select mem (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 56))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64ghost
                                                             mem addr
                                                             x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (unsigned641 unsigned641) Bool)

(declare-fun dummy2 () unsigned641)

(declare-datatypes ()
((unsigned64__ref1 (mk_unsigned64__ref1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref_2__projection ((a unsigned64__ref1)) unsigned641
  (unsigned64__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_274 (_ BitVec 64))
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool true)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-sort unsigned32 0)

(declare-fun attr__ATTRIBUTE_MODULUS3 () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 32))

(declare-fun user_eq3 (unsigned32 unsigned32) Bool)

(declare-fun dummy3 () unsigned32)

(declare-datatypes ()
((unsigned32__ref (mk_unsigned32__ref (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref___projection ((a unsigned32__ref)) unsigned32
  (unsigned32__content a))

(define-fun dynamic_invariant3 ((temp___expr_208 (_ BitVec 32))
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool true)

;; readreglow8__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreglow8 reg)))
     (and (= result ((_ extract 7 0) (bvand reg ((_ int2bv 64) 255))))
     (dynamic_invariant1 result true false true)))) :pattern ((readreglow8
                                                              reg)) )))

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true)
     (let ((result (readreg32 reg)))
     (and
     (= result ((_ extract 31 0) (bvand reg ((_ int2bv 64) 4294967295))))
     (dynamic_invariant3 result true false true)))) :pattern ((readreg32 reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true) (dynamic_invariant3 val__
     true true true))
     (= (= (writereg32post regnew val__) true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew ((_ int2bv 64) 18446744069414584320)) ((_ int2bv 64) 0))))) :pattern (
  (writereg32post regnew val__)) ))))

(declare-fun zeroflag () Bool)

(declare-fun carryflag () Bool)

(declare-fun signflag () Bool)

(declare-fun overflowflag () Bool)

(declare-fun rax () (_ BitVec 64))

(declare-fun rcx () (_ BitVec 64))

(declare-fun rdx () (_ BitVec 64))

(declare-fun rsp () (_ BitVec 64))

(declare-fun rbp () (_ BitVec 64))

(declare-fun memory () (Array (_ BitVec 64) unsigned8))

(declare-fun saved_32 () (_ BitVec 64))

(declare-fun saved_72 () (_ BitVec 64))

(declare-fun tmp_register () (_ BitVec 64))

(declare-fun saved_rbp () (_ BitVec 64))

(declare-fun saved_ra () (_ BitVec 64))

(declare-fun saved_mem () (Array (_ BitVec 64) unsigned8))

(declare-fun o () (_ BitVec 64))

(declare-fun o1 () (_ BitVec 64))

(declare-fun o2 () (_ BitVec 64))

(declare-fun o3 () (_ BitVec 64))

(declare-fun o4 () (_ BitVec 64))

(declare-fun o5 () (_ BitVec 64))

(declare-fun o6 () (_ BitVec 64))

(declare-fun o7 () (_ BitVec 64))

(declare-fun o8 () (_ BitVec 64))

(declare-fun o9 () (_ BitVec 64))

(declare-fun temp___581 () (_ BitVec 64))

(declare-fun temp___580 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___579 () Bool)

(declare-fun temp___578 () Bool)

(declare-fun temp___572 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___577 () (_ BitVec 64))

(declare-fun temp___576 () Bool)

(declare-fun temp___575 () (_ BitVec 64))

(declare-fun temp___582 () (Array (_ BitVec 64) unsigned8))

(declare-fun temp___573 () (_ BitVec 64))

(declare-fun temp___574 () Bool)

(declare-fun o10 () (_ BitVec 64))

(declare-fun o11 () (_ BitVec 64))

(declare-fun o12 () Bool)

(declare-fun o13 () (_ BitVec 64))

(declare-fun o14 () (_ BitVec 64))

(declare-fun o15 () Bool)

(declare-fun o16 () (_ BitVec 64))

(declare-fun o17 () Bool)

(declare-fun o18 () (_ BitVec 64))

(declare-fun o19 () Bool)

(declare-fun o20 () (_ BitVec 64))

(declare-fun o21 () Bool)

(declare-fun o22 () Bool)

(declare-fun o23 () Bool)

(declare-fun o24 () (_ BitVec 64))

(declare-fun o25 () (_ BitVec 64))

(declare-fun o26 () (_ BitVec 8))

(declare-fun o27 () (_ BitVec 32))

(declare-fun o28 () (_ BitVec 8))

(declare-fun o29 () (_ BitVec 64))

(declare-fun o30 () (_ BitVec 64))

(declare-fun o31 () Bool)

(declare-fun o32 () (_ BitVec 64))

(declare-fun o33 () (_ BitVec 64))

(declare-fun o34 () Bool)

(declare-fun o35 () (_ BitVec 64))

(declare-fun o36 () Bool)

(declare-fun o37 () (_ BitVec 64))

(declare-fun o38 () Bool)

(declare-fun o39 () (_ BitVec 64))

(declare-fun o40 () Bool)

(declare-fun o41 () Bool)

(declare-fun o42 () Bool)

(declare-fun o43 () (_ BitVec 64))

(declare-fun o44 () (_ BitVec 64))

(declare-fun rcx1 () (_ BitVec 64))

(declare-fun rdx1 () (_ BitVec 64))

(declare-fun memory1 () (Array (_ BitVec 64) unsigned8))

(declare-fun result () (_ BitVec 64))

(declare-fun saved_321 () (_ BitVec 64))

(declare-fun result1 () (_ BitVec 64))

(declare-fun saved_721 () (_ BitVec 64))

(declare-fun result2 () (_ BitVec 64))

(declare-fun tmp_register1 () (_ BitVec 64))

(declare-fun result3 () (_ BitVec 64))

(declare-fun saved_rbp1 () (_ BitVec 64))

(declare-fun result4 () (_ BitVec 64))

(declare-fun saved_ra1 () (_ BitVec 64))

(declare-fun result5 () map__ref)

(declare-fun saved_mem1 () (Array (_ BitVec 64) unsigned8))

(declare-fun result6 () t__ref2)

(declare-fun rax1 () (_ BitVec 64))

(declare-fun result7 () bool__ref)

(declare-fun zeroflag1 () Bool)

(declare-fun result8 () bool__ref)

(declare-fun signflag1 () Bool)

(declare-fun result9 () bool__ref)

(declare-fun carryflag1 () Bool)

(declare-fun result10 () bool__ref)

(declare-fun overflowflag1 () Bool)

(declare-fun zeroflag2 () Bool)

(declare-fun carryflag2 () Bool)

(declare-fun signflag2 () Bool)

(declare-fun overflowflag2 () Bool)

(declare-fun rax2 () (_ BitVec 64))

(declare-fun rcx2 () (_ BitVec 64))

(declare-fun rdx2 () (_ BitVec 64))

(declare-fun memory2 () (Array (_ BitVec 64) unsigned8))

(declare-fun tmp_register2 () (_ BitVec 64))

(declare-fun result11 () t__ref2)

(declare-fun rdx3 () (_ BitVec 64))

(declare-fun result12 () t__ref2)

(declare-fun rax3 () (_ BitVec 64))

(declare-fun result13 () bool__ref)

(declare-fun zeroflag3 () Bool)

(declare-fun result14 () bool__ref)

(declare-fun signflag3 () Bool)

(declare-fun result15 () t__ref2)

(declare-fun rdx4 () (_ BitVec 64))

(declare-fun result16 () t__ref2)

(declare-fun rcx3 () (_ BitVec 64))

(declare-fun result17 () t__ref2)

(declare-fun rax4 () (_ BitVec 64))

(declare-fun result18 () bool__ref)

(declare-fun zeroflag4 () Bool)

(declare-fun result19 () bool__ref)

(declare-fun signflag4 () Bool)

(declare-fun result20 () t__ref2)

(declare-fun rax5 () (_ BitVec 64))

(declare-fun rax6 () (_ BitVec 64))

(declare-fun memory3 () (Array (_ BitVec 64) unsigned8))

(declare-fun result21 () t__ref2)

(declare-fun tmp_register3 () (_ BitVec 64))

(declare-fun result22 () t__ref2)

(declare-fun rax7 () (_ BitVec 64))

(declare-fun result23 () bool__ref)

(declare-fun zeroflag5 () Bool)

(declare-fun result24 () bool__ref)

(declare-fun signflag5 () Bool)

(declare-fun result25 () bool__ref)

(declare-fun carryflag3 () Bool)

(declare-fun result26 () bool__ref)

(declare-fun overflowflag3 () Bool)

(declare-fun zeroflag6 () bool__ref)

(declare-fun carryflag4 () bool__ref)

(declare-fun signflag6 () bool__ref)

(declare-fun overflowflag4 () bool__ref)

(declare-fun rax8 () t__ref2)

(declare-fun zeroflag7 () Bool)

(declare-fun carryflag5 () Bool)

(declare-fun signflag7 () Bool)

(declare-fun overflowflag5 () Bool)

(declare-fun rax9 () (_ BitVec 64))

(declare-fun zeroflag8 () bool__ref)

(declare-fun carryflag6 () bool__ref)

(declare-fun signflag8 () bool__ref)

(declare-fun overflowflag6 () bool__ref)

(declare-fun rax10 () t__ref2)

(declare-fun rcx4 () t__ref2)

(declare-fun rdx5 () t__ref2)

(declare-fun memory4 () map__ref)

(declare-fun tmp_register4 () t__ref2)

(declare-fun zeroflag9 () Bool)

(declare-fun carryflag7 () Bool)

(declare-fun signflag9 () Bool)

(declare-fun overflowflag7 () Bool)

(declare-fun rax11 () (_ BitVec 64))

(declare-fun rcx5 () (_ BitVec 64))

(declare-fun rdx6 () (_ BitVec 64))

(declare-fun memory5 () (Array (_ BitVec 64) unsigned8))

(declare-fun tmp_register5 () (_ BitVec 64))

(declare-fun zeroflag10 () bool__ref)

(declare-fun carryflag8 () bool__ref)

(declare-fun signflag10 () bool__ref)

(declare-fun overflowflag8 () bool__ref)

(declare-fun rax12 () t__ref2)

(declare-fun rcx6 () t__ref2)

(declare-fun rdx7 () t__ref2)

(declare-fun memory6 () map__ref)

(declare-fun tmp_register6 () t__ref2)

(declare-fun zeroflag11 () Bool)

(declare-fun carryflag9 () Bool)

(declare-fun signflag11 () Bool)

(declare-fun overflowflag9 () Bool)

(declare-fun rax13 () (_ BitVec 64))

(declare-fun rcx7 () (_ BitVec 64))

(declare-fun rdx8 () (_ BitVec 64))

(declare-fun memory7 () (Array (_ BitVec 64) unsigned8))

(declare-fun tmp_register7 () (_ BitVec 64))

(declare-fun zeroflag12 () bool__ref)

(declare-fun carryflag10 () bool__ref)

(declare-fun signflag12 () bool__ref)

(declare-fun overflowflag10 () bool__ref)

(declare-fun rax14 () t__ref2)

(declare-fun rcx8 () t__ref2)

(declare-fun rdx9 () t__ref2)

(declare-fun memory8 () map__ref)

(declare-fun tmp_register8 () t__ref2)

(declare-fun zeroflag13 () Bool)

(declare-fun carryflag11 () Bool)

(declare-fun signflag13 () Bool)

(declare-fun overflowflag11 () Bool)

(declare-fun rax15 () (_ BitVec 64))

(declare-fun rcx9 () (_ BitVec 64))

(declare-fun rdx10 () (_ BitVec 64))

(declare-fun memory9 () (Array (_ BitVec 64) unsigned8))

(declare-fun tmp_register9 () (_ BitVec 64))

(declare-fun memory10 () (Array (_ BitVec 64) unsigned8))

(declare-fun zeroflag14 () bool__ref)

(declare-fun carryflag12 () bool__ref)

(declare-fun signflag14 () bool__ref)

(declare-fun overflowflag12 () bool__ref)

(declare-fun rax16 () t__ref2)

(declare-fun rcx10 () t__ref2)

(declare-fun rdx11 () t__ref2)

(declare-fun memory11 () map__ref)

(declare-fun saved_322 () t__ref2)

(declare-fun saved_722 () t__ref2)

(declare-fun tmp_register10 () t__ref2)

(declare-fun saved_rbp2 () t__ref2)

(declare-fun saved_ra2 () t__ref2)

(declare-fun saved_mem2 () map__ref)

(declare-fun zeroflag15 () Bool)

(declare-fun carryflag13 () Bool)

(declare-fun signflag15 () Bool)

(declare-fun overflowflag13 () Bool)

(declare-fun rax17 () (_ BitVec 64))

(declare-fun rcx11 () (_ BitVec 64))

(declare-fun rdx12 () (_ BitVec 64))

(declare-fun memory12 () (Array (_ BitVec 64) unsigned8))

(declare-fun saved_323 () (_ BitVec 64))

(declare-fun saved_723 () (_ BitVec 64))

(declare-fun tmp_register11 () (_ BitVec 64))

(declare-fun saved_rbp3 () (_ BitVec 64))

(declare-fun saved_ra3 () (_ BitVec 64))

(declare-fun saved_mem3 () (Array (_ BitVec 64) unsigned8))

(define-fun result27 () t__ref2 (mk_t__ref2 result4))

(define-fun result28 () t__ref2 (mk_t__ref2 result3))

(define-fun result29 () t__ref2 (mk_t__ref2 result2))

(define-fun result30 () t__ref2 (mk_t__ref2 result1))

(define-fun result31 () t__ref2 (mk_t__ref2 result))

(define-fun saved_mem4 () map__ref (mk_map__ref saved_mem))

(define-fun saved_ra4 () t__ref2 (mk_t__ref2 saved_ra))

(define-fun saved_rbp4 () t__ref2 (mk_t__ref2 saved_rbp))

(define-fun tmp_register12 () t__ref2 (mk_t__ref2 tmp_register))

(define-fun saved_724 () t__ref2 (mk_t__ref2 saved_72))

(define-fun saved_324 () t__ref2 (mk_t__ref2 saved_32))

(define-fun memory13 () map__ref (mk_map__ref memory))

(define-fun rdx13 () t__ref2 (mk_t__ref2 rdx))

(define-fun rcx12 () t__ref2 (mk_t__ref2 rcx))

(define-fun rax18 () t__ref2 (mk_t__ref2 rax))

(define-fun overflowflag14 () bool__ref (mk_bool__ref overflowflag))

(define-fun signflag16 () bool__ref (mk_bool__ref signflag))

(define-fun carryflag14 () bool__ref (mk_bool__ref carryflag))

(define-fun zeroflag16 () bool__ref (mk_bool__ref zeroflag))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (and
  (and (= rbp rsp)
  (= (readmem64 (bvsub rbp ((_ int2bv 64) 8)) memory) ((_ int2bv 64) 0)))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (= (inrange64 i (readmem64 (bvsub rbp ((_ int2bv 64) 32)) memory)
     (readmem64 (bvsub rbp ((_ int2bv 64) 72)) memory)) true)
  (= (insaferegion64 i (bvadd rsp ((_ int2bv 64) 8))) true))))))

;; H
  (assert
  (and (= o (readmem64 (bvsub rbp ((_ int2bv 64) 32)) memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                       (select memory (bvsub
                                                       rbp ((_ int2bv 64) 32))))))
  (= (bvand o ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select
                                                                memory (bvadd (bvsub
                                                                rbp ((_ int2bv 64) 32)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select
                                                                   memory (bvadd (bvsub
                                                                   rbp ((_ int2bv 64) 32)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 32)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 32)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 32)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 32)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 32)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o1 o))

;; H
  (assert (= result31 saved_324))

;; H
  (assert (= saved_321 o1))

;; H
  (assert true)

;; H
  (assert
  (and (= o2 (readmem64 (bvsub rbp ((_ int2bv 64) 72)) memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o2 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select memory (bvsub
                                                        rbp ((_ int2bv 64) 72))))))
  (= (bvand o2 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 memory (bvadd (bvsub
                                                                 rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o2 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory (bvadd (bvsub
                                                                    rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o2 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o2 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o2 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o2 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o2 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 72)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o3 o2))

;; H
  (assert (= result30 saved_724))

;; H
  (assert (= saved_721 o3))

;; H
  (assert true)

;; H
  (assert
  (and (= o4 (readmem64 (bvsub rbp ((_ int2bv 64) 8)) memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o4 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select memory (bvsub
                                                        rbp ((_ int2bv 64) 8))))))
  (= (bvand o4 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 memory (bvadd (bvsub
                                                                 rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o4 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory (bvadd (bvsub
                                                                    rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o4 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o4 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o4 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o4 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o4 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select memory (bvadd (bvsub rbp ((_ int2bv 64) 8)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o5 o4))

;; H
  (assert (= result29 tmp_register12))

;; H
  (assert (= tmp_register1 o5))

;; H
  (assert true)

;; H
  (assert
  (and (= o6 (readmem64 rbp memory))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o6 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select memory
                                                        rbp))))
  (= (bvand o6 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 memory (bvadd
                                                                 rbp ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o6 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    memory (bvadd
                                                                    rbp ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o6 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o6 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o6 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o6 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o6 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep (select memory (bvadd rbp ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 334, characters 0-0
  (not true))
(check-sat)
(exit)
