(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type length_t

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : length_t, length_t -> bool

logic dummy1 : length_t

type length_t__ref = { length_t__content : length_t
}

function length_t__ref___projection(a: length_t__ref) : length_t =
  (a).length_t__content

logic to_rep : length_t -> int

logic of_rep : int -> length_t

axiom inversion_axiom :
  (forall x:length_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:length_t [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__stack__t__len : length_t;
rec__stack__t__elements : (int,integer) farray
}

function us_split_fields_Len__projection(a: us_split_fields) : length_t =
  (a).rec__stack__t__len

function us_split_fields_Elements__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__stack__t__elements

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep_2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__stack__t__len) = to_rep(((b).us_split_fields1).rec__stack__t__len)) and
  (bool_eq4(((a).us_split_fields1).rec__stack__t__elements, 1, 100,
  ((b).us_split_fields1).rec__stack__t__elements, 1, 100) = true)) ->
  (bool_eq5(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__stack__t__len) = to_rep(((b).us_split_fields1).rec__stack__t__len)) and
  (bool_eq4(((a).us_split_fields1).rec__stack__t__elements, 1, 100,
  ((b).us_split_fields1).rec__stack__t__elements, 1, 100) = true))) ->
  (bool_eq5(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:length_t. forall a1:(int,integer) farray. (0 <= object__size1({
  us_split_fields1 = { rec__stack__t__len = a; rec__stack__t__elements = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:length_t. forall a1:(int,integer) farray.
  (0 <= object__alignment1({ us_split_fields1 = { rec__stack__t__len = a;
  rec__stack__t__elements = a1 } })))

logic stack__t__len__first__bit : int

logic stack__t__len__last__bit : int

logic stack__t__len__position : int

axiom stack__t__len__first__bit_axiom : (0 <= stack__t__len__first__bit)

axiom stack__t__len__last__bit_axiom :
  (stack__t__len__first__bit <  stack__t__len__last__bit)

axiom stack__t__len__position_axiom : (0 <= stack__t__len__position)

logic stack__t__elements__first__bit : int

logic stack__t__elements__last__bit : int

logic stack__t__elements__position : int

axiom stack__t__elements__first__bit_axiom :
  (0 <= stack__t__elements__first__bit)

axiom stack__t__elements__last__bit_axiom :
  (stack__t__elements__first__bit <  stack__t__elements__last__bit)

axiom stack__t__elements__position_axiom :
  (0 <= stack__t__elements__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : length_t

logic dummy4 : (int,integer) farray

type t__ref = { t__content : us_rep
}

function t__ref_2__projection(a: t__ref) : us_rep = (a).t__content

logic get_length : us_rep -> int

logic get_length__function_guard : int, us_rep -> prop

axiom get_length__post_axiom :
  (forall the_stack:length_t. forall the_stack1:(int,integer) farray
  [get_length({ us_split_fields1 = { rec__stack__t__len = the_stack;
  rec__stack__t__elements = the_stack1 } })]. in_range2(get_length({
  us_split_fields1 = { rec__stack__t__len = the_stack;
  rec__stack__t__elements = the_stack1 } })))

logic create_stack : unit -> us_rep

logic create_stack__function_guard : us_rep, unit -> prop

axiom create_stack__post_axiom : (get_length(create_stack(void)) = 0)

logic top : us_rep -> int

logic top__function_guard : int, us_rep -> prop

axiom top__post_axiom :
  (forall the_stack:length_t. forall the_stack1:(int,integer) farray [top({
  us_split_fields1 = { rec__stack__t__len = the_stack;
  rec__stack__t__elements = the_stack1 } })]. ((0 <  get_length({
  us_split_fields1 = { rec__stack__t__len = the_stack;
  rec__stack__t__elements = the_stack1 } })) -> in_range1(top({
  us_split_fields1 = { rec__stack__t__len = the_stack;
  rec__stack__t__elements = the_stack1 } }))))

type us_split_fields2 = { rec__private_a__optional_stack__exists : bool;
rec__private_a__optional_stack__the_stack : us_rep
}

function us_split_fields_Exists__projection(a: us_split_fields2) : bool =
  (a).rec__private_a__optional_stack__exists

function us_split_fields_The_Stack__projection(a: us_split_fields2) : us_rep =
  (a).rec__private_a__optional_stack__the_stack

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  ((((((a).us_split_fields3).rec__private_a__optional_stack__exists = ((b).us_split_fields3).rec__private_a__optional_stack__exists) and
  (bool_eq5(((a).us_split_fields3).rec__private_a__optional_stack__the_stack,
  ((b).us_split_fields3).rec__private_a__optional_stack__the_stack) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not ((((a).us_split_fields3).rec__private_a__optional_stack__exists = ((b).us_split_fields3).rec__private_a__optional_stack__exists) and
  (bool_eq5(((a).us_split_fields3).rec__private_a__optional_stack__the_stack,
  ((b).us_split_fields3).rec__private_a__optional_stack__the_stack) = true))) ->
  (bool_eq6(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:bool. forall a1:length_t. forall a2:(int,integer) farray.
  (0 <= object__size2({ us_split_fields3 = {
  rec__private_a__optional_stack__exists = a;
  rec__private_a__optional_stack__the_stack = { us_split_fields1 = {
  rec__stack__t__len = a1; rec__stack__t__elements = a2 } } } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:bool. forall a1:length_t. forall a2:(int,integer) farray.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__private_a__optional_stack__exists = a;
  rec__private_a__optional_stack__the_stack = { us_split_fields1 = {
  rec__stack__t__len = a1; rec__stack__t__elements = a2 } } } })))

logic private_a__optional_stack__exists__first__bit : int

logic private_a__optional_stack__exists__last__bit : int

logic private_a__optional_stack__exists__position : int

axiom private_a__optional_stack__exists__first__bit_axiom :
  (0 <= private_a__optional_stack__exists__first__bit)

axiom private_a__optional_stack__exists__last__bit_axiom :
  (private_a__optional_stack__exists__first__bit <  private_a__optional_stack__exists__last__bit)

axiom private_a__optional_stack__exists__position_axiom :
  (0 <= private_a__optional_stack__exists__position)

logic private_a__optional_stack__the_stack__first__bit : int

logic private_a__optional_stack__the_stack__last__bit : int

logic private_a__optional_stack__the_stack__position : int

axiom private_a__optional_stack__the_stack__first__bit_axiom :
  (0 <= private_a__optional_stack__the_stack__first__bit)

axiom private_a__optional_stack__the_stack__last__bit_axiom :
  (private_a__optional_stack__the_stack__first__bit <  private_a__optional_stack__the_stack__last__bit)

axiom private_a__optional_stack__the_stack__position_axiom :
  (0 <= private_a__optional_stack__the_stack__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : bool

logic dummy6 : length_t

logic dummy7 : (int,integer) farray

type optional_stack__ref = { optional_stack__content : us_rep1
}

function optional_stack__ref___projection(a: optional_stack__ref) : us_rep1 =
  (a).optional_stack__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "private_a.adb", line 49, characters 0-0 *)
goal WP_parameter_def :
  (forall n:int. forall s__split_fields:bool.
  forall s__split_fields1:length_t.
  forall s__split_fields2:(int,integer) farray. forall o:length_t.
  forall o1:(int,integer) farray. forall o2:bool. forall o3:length_t.
  forall o4:(int,integer) farray. forall temp___241:bool.
  forall temp___2411:length_t. forall temp___2412:(int,integer) farray.
  forall result:bool. forall result1:length_t.
  forall result2:(int,integer) farray. forall s__split_fields3:bool.
  forall s__split_fields4:length_t.
  forall s__split_fields5:(int,integer) farray. (in_range1(n) -> (((((({
  us_split_fields1 = { rec__stack__t__len = o; rec__stack__t__elements = o1 }
  } = create_stack(void)) and (get_length({ us_split_fields1 = {
  rec__stack__t__len = o; rec__stack__t__elements = o1 } }) = 0)) and
  ((of_int(1) = o2) and ((o3 = o) and (o4 = o1)))) and ((temp___241 = o2) and
  ((temp___2411 = o3) and (temp___2412 = o4)))) and (({
  us_split_fields__content1 = { rec__private_a__optional_stack__exists =
  result; rec__private_a__optional_stack__the_stack = { us_split_fields1 = {
  rec__stack__t__len = result1; rec__stack__t__elements = result2 } } } } = {
  us_split_fields__content1 = { rec__private_a__optional_stack__exists =
  s__split_fields; rec__private_a__optional_stack__the_stack = {
  us_split_fields1 = { rec__stack__t__len = s__split_fields1;
  rec__stack__t__elements = s__split_fields2 } } } }) and
  ((temp___241 = s__split_fields3) and ((temp___2411 = s__split_fields4) and
  (temp___2412 = s__split_fields5))))) -> (s__split_fields3 = true))))
