;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort uml_action_access 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (uml_action_access uml_action_access) Bool)

(declare-fun dummy () uml_action_access)

(declare-datatypes ()
((uml_action_access__ref
 (mk_uml_action_access__ref (uml_action_access__content uml_action_access)))))
(define-fun uml_action_access__ref___projection ((a uml_action_access__ref)) uml_action_access 
  (uml_action_access__content a))

(define-fun dynamic_invariant ((temp___expr_253 Int)
  (temp___is_init_250 Bool) (temp___skip_constant_251 Bool)
  (temp___do_toplevel_252 Bool)) Bool (=>
                                      (or (= temp___is_init_250 true)
                                      (<= 0 100)) (in_range1
                                      temp___expr_253)))

(declare-fun to_rep (uml_action_access) Int)

(declare-fun of_rep (Int) uml_action_access)

;; inversion_axiom
  (assert
  (forall ((x uml_action_access))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x uml_action_access)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__model__uml_control_flow__from_data uml_action_access)(rec__model__uml_control_flow__to_data uml_action_access)))))
(define-fun us_split_fields_From_Data2__projection ((a us_split_fields)) uml_action_access 
  (rec__model__uml_control_flow__from_data a))

(define-fun us_split_fields_To_Data2__projection ((a us_split_fields)) uml_action_access 
  (rec__model__uml_control_flow__to_data a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_5__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__model__uml_control_flow__from_data
                           (us_split_fields1 a))) (to_rep
                                                  (rec__model__uml_control_flow__from_data
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__model__uml_control_flow__to_data
                           (us_split_fields1 a))) (to_rep
                                                  (rec__model__uml_control_flow__to_data
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun model__uml_control_flow__from_data__first__bit () Int)

(declare-fun model__uml_control_flow__from_data__last__bit () Int)

(declare-fun model__uml_control_flow__from_data__position () Int)

;; model__uml_control_flow__from_data__first__bit_axiom
  (assert (<= 0 model__uml_control_flow__from_data__first__bit))

;; model__uml_control_flow__from_data__last__bit_axiom
  (assert
  (< model__uml_control_flow__from_data__first__bit model__uml_control_flow__from_data__last__bit))

;; model__uml_control_flow__from_data__position_axiom
  (assert (<= 0 model__uml_control_flow__from_data__position))

(declare-fun model__uml_control_flow__to_data__first__bit () Int)

(declare-fun model__uml_control_flow__to_data__last__bit () Int)

(declare-fun model__uml_control_flow__to_data__position () Int)

;; model__uml_control_flow__to_data__first__bit_axiom
  (assert (<= 0 model__uml_control_flow__to_data__first__bit))

;; model__uml_control_flow__to_data__last__bit_axiom
  (assert
  (< model__uml_control_flow__to_data__first__bit model__uml_control_flow__to_data__last__bit))

;; model__uml_control_flow__to_data__position_axiom
  (assert (<= 0 model__uml_control_flow__to_data__position))

(declare-fun dummy1 () us_rep)

(declare-datatypes ()
((uml_control_flow__ref
 (mk_uml_control_flow__ref (uml_control_flow__content us_rep)))))
(define-fun uml_control_flow__ref___projection ((a uml_control_flow__ref)) us_rep 
  (uml_control_flow__content a))

(declare-fun from__2 (us_rep) Int)

(declare-fun from__2__function_guard (Int us_rep) Bool)

;; from__2__post_axiom
  (assert
  (forall ((self us_rep)) (! (dynamic_invariant (from__2 self) true false
  true) :pattern ((from__2 self)) )))

;; from__2__def_axiom
  (assert
  (forall ((self us_rep))
  (! (= (from__2 self) (to_rep
                       (rec__model__uml_control_flow__from_data
                       (us_split_fields1 self)))) :pattern ((from__2 self)) )))

(declare-fun to__2 (us_rep) Int)

(declare-fun to__2__function_guard (Int us_rep) Bool)

;; to__2__post_axiom
  (assert
  (forall ((self us_rep)) (! (dynamic_invariant (to__2 self) true false
  true) :pattern ((to__2 self)) )))

;; to__2__def_axiom
  (assert
  (forall ((self us_rep))
  (! (= (to__2 self) (to_rep
                     (rec__model__uml_control_flow__to_data
                     (us_split_fields1 self)))) :pattern ((to__2 self)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun val__ () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun self__split_fields () uml_action_access)

(declare-fun self__split_fields1 () uml_action_access)

(declare-fun o () uml_action_access)

(declare-fun o1 () uml_action_access)

(declare-fun o2 () uml_action_access)

(declare-fun temp___398 () uml_action_access)

(declare-fun temp___3981 () uml_action_access)

(declare-fun result () uml_action_access)

(declare-fun result1 () uml_action_access)

(declare-fun self__split_fields2 () uml_action_access)

(declare-fun self__split_fields3 () uml_action_access)

(declare-fun self__split_fields4 () uml_action_access)

(declare-fun self__split_fields5 () uml_action_access)

(declare-fun self__split_fields6 () uml_action_access)

(declare-fun self__split_fields7 () uml_action_access)

;; H
  (assert (in_range1 val__))

;; H
  (assert (= (to_rep o) val__))

;; H
  (assert (= self__split_fields o1))

;; H
  (assert (= o o2))

;; H
  (assert (= temp___398 o1))

;; H
  (assert (= temp___3981 o2))

;; H
  (assert (= result self__split_fields))

;; H
  (assert (= result1 self__split_fields1))

;; H
  (assert (= temp___398 self__split_fields2))

;; H
  (assert (= temp___3981 self__split_fields3))

;; H
  (assert (= self__split_fields4 self__split_fields2))

;; H
  (assert (= self__split_fields5 self__split_fields3))

;; H
  (assert (= self__split_fields6 self__split_fields2))

;; H
  (assert (= self__split_fields7 self__split_fields3))

(assert
;; WP_parameter_def
 ;; File "model.ads", line 91, characters 0-0
  (not
  (= (to__2
     (mk___rep (mk___split_fields self__split_fields4 self__split_fields5))) 
  val__)))
(check-sat)
