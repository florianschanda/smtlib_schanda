;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort enum 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (enum enum) Bool)

(declare-const dummy enum)

(declare-datatypes ((enum__ref 0)) (((mk_enum__ref (enum__content enum)))))
(define-fun enum__ref___projection ((a enum__ref)) enum (enum__content a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 1)) (in_range1 temp___expr_135)))

(declare-fun to_rep (enum) Int)

(declare-fun of_rep (Int) enum)

;; inversion_axiom
  (assert
  (forall ((x enum)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x enum)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort integer 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__p__s__d enum)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) enum (rec__p__s__d
                                                                    a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__p__s__bool_field Bool)(rec__p__s__int_field integer)))))
(define-fun us_split_fields_Bool_Field__projection ((a us_split_fields)) Bool
  (rec__p__s__bool_field a))

(define-fun us_split_fields_Int_Field__projection ((a us_split_fields)) integer
  (rec__p__s__int_field a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun p__s__bool_field__pred ((a us_rep)) Bool (= (to_rep
                                                        (rec__p__s__d
                                                        (us_split_discrs1 a))) 0))

(define-fun p__s__int_field__pred ((a us_rep)) Bool (= (to_rep
                                                       (rec__p__s__d
                                                       (us_split_discrs1 a))) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep (rec__p__s__d (us_split_discrs1 a)))
                        (to_rep (rec__p__s__d (us_split_discrs1 b))))
                        (=> (p__s__bool_field__pred a)
                        (= (rec__p__s__bool_field (us_split_fields1 a))
                        (rec__p__s__bool_field (us_split_fields1 b)))))
                        (=> (p__s__int_field__pred a)
                        (= (to_rep1
                           (rec__p__s__int_field (us_split_fields1 a)))
                        (to_rep1 (rec__p__s__int_field (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const p__s__d__first__bit Int)

(declare-const p__s__d__last__bit Int)

(declare-const p__s__d__position Int)

;; p__s__d__first__bit_axiom
  (assert (<= 0 p__s__d__first__bit))

;; p__s__d__last__bit_axiom
  (assert (< p__s__d__first__bit p__s__d__last__bit))

;; p__s__d__position_axiom
  (assert (<= 0 p__s__d__position))

(declare-const p__s__bool_field__first__bit Int)

(declare-const p__s__bool_field__last__bit Int)

(declare-const p__s__bool_field__position Int)

;; p__s__bool_field__first__bit_axiom
  (assert (<= 0 p__s__bool_field__first__bit))

;; p__s__bool_field__last__bit_axiom
  (assert (< p__s__bool_field__first__bit p__s__bool_field__last__bit))

;; p__s__bool_field__position_axiom
  (assert (<= 0 p__s__bool_field__position))

(declare-const p__s__int_field__first__bit Int)

(declare-const p__s__int_field__last__bit Int)

(declare-const p__s__int_field__position Int)

;; p__s__int_field__first__bit_axiom
  (assert (<= 0 p__s__int_field__first__bit))

;; p__s__int_field__last__bit_axiom
  (assert (< p__s__int_field__first__bit p__s__int_field__last__bit))

;; p__s__int_field__position_axiom
  (assert (<= 0 p__s__int_field__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((s__ref 0)) (((mk_s__ref (s__content us_rep)))))
(define-fun s__ref___projection ((a s__ref)) us_rep (s__content a))

(define-fun in_range3 ((rec__p__s__d1 Int)
  (a us_rep)) Bool (= rec__p__s__d1 (to_rep
                                    (rec__p__s__d (us_split_discrs1 a)))))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const p__s__d__first__bit1 Int)

(declare-const p__s__d__last__bit1 Int)

(declare-const p__s__d__position1 Int)

;; p__s__d__first__bit_axiom
  (assert (<= 0 p__s__d__first__bit1))

;; p__s__d__last__bit_axiom
  (assert (< p__s__d__first__bit1 p__s__d__last__bit1))

;; p__s__d__position_axiom
  (assert (<= 0 p__s__d__position1))

(declare-const p__s__bool_field__first__bit1 Int)

(declare-const p__s__bool_field__last__bit1 Int)

(declare-const p__s__bool_field__position1 Int)

;; p__s__bool_field__first__bit_axiom
  (assert (<= 0 p__s__bool_field__first__bit1))

;; p__s__bool_field__last__bit_axiom
  (assert (< p__s__bool_field__first__bit1 p__s__bool_field__last__bit1))

;; p__s__bool_field__position_axiom
  (assert (<= 0 p__s__bool_field__position1))

(declare-const p__s__int_field__first__bit1 Int)

(declare-const p__s__int_field__last__bit1 Int)

(declare-const p__s__int_field__position1 Int)

;; p__s__int_field__first__bit_axiom
  (assert (<= 0 p__s__int_field__first__bit1))

;; p__s__int_field__last__bit_axiom
  (assert (< p__s__int_field__first__bit1 p__s__int_field__last__bit1))

;; p__s__int_field__position_axiom
  (assert (<= 0 p__s__int_field__position1))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((t1s__ref 0)) (((mk_t1s__ref (t1s__content us_rep)))))
(define-fun t1s__ref___projection ((a t1s__ref)) us_rep (t1s__content a))

(declare-datatypes ((us_split_discrs2 0))
(((mk___split_discrs1 (rec__p__t__z enum)))))
(define-fun us_split_discrs_2__projection ((a us_split_discrs2)) enum
  (rec__p__t__z a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref_2__projection ((a us_split_discrs__ref1)) us_split_discrs2
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__p__t__field us_rep)))))
(define-fun us_split_fields_Field__projection ((a us_split_fields2)) us_rep
  (rec__p__t__field a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3
                                                                a))

(define-fun us_rep_4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep (rec__p__t__z (us_split_discrs3 a)))
                         (to_rep (rec__p__t__z (us_split_discrs3 b))))
                         (= (bool_eq (rec__p__t__field (us_split_fields3 a))
                            (rec__p__t__field (us_split_fields3 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const p__t__z__first__bit Int)

(declare-const p__t__z__last__bit Int)

(declare-const p__t__z__position Int)

;; p__t__z__first__bit_axiom
  (assert (<= 0 p__t__z__first__bit))

;; p__t__z__last__bit_axiom
  (assert (< p__t__z__first__bit p__t__z__last__bit))

;; p__t__z__position_axiom
  (assert (<= 0 p__t__z__position))

(declare-const p__t__field__first__bit Int)

(declare-const p__t__field__last__bit Int)

(declare-const p__t__field__position Int)

;; p__t__field__first__bit_axiom
  (assert (<= 0 p__t__field__first__bit))

;; p__t__field__last__bit_axiom
  (assert (< p__t__field__first__bit p__t__field__last__bit))

;; p__t__field__position_axiom
  (assert (<= 0 p__t__field__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content us_rep1)))))
(define-fun t__ref___projection ((a t__ref)) us_rep1 (t__content a))

(define-fun dynamic_invariant1 ((temp___expr_146 us_rep1)
  (temp___is_init_143 Bool) (temp___skip_constant_144 Bool)
  (temp___do_toplevel_145 Bool)) Bool (in_range3
  (to_rep (rec__p__t__z (us_split_discrs3 temp___expr_146)))
  (rec__p__t__field (us_split_fields3 temp___expr_146))))

(declare-const v__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const r2b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_15)))

(declare-const v__split_fields enum)

(declare-const us Int)

;; H
  (assert
  (= (to_rep (rec__p__t__z v__split_discrs)) (to_rep v__split_fields)))

;; H
  (assert (= (to_rep (rec__p__t__z v__split_discrs)) r2b))

;; H
  (assert (in_range1 r2b))

;; H
  (assert (and (= us r2b) (in_range1 r2b)))

(assert
;; WP_parameter_def
 ;; File "p.ads", line 15, characters 0-0
  (not (= (to_rep v__split_fields) 0)))
(check-sat)
(exit)
