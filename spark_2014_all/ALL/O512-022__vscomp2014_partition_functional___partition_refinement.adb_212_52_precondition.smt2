;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort tcount_typeB 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (tcount_typeB tcount_typeB) Bool)

(declare-fun dummy () tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-sort count_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-fun dummy1 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_152)))

(declare-sort tindex_countB 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tindex_countB tindex_countB) Bool)

(declare-fun dummy2 () tindex_countB)

(declare-datatypes ()
((tindex_countB__ref
 (mk_tindex_countB__ref (tindex_countB__content tindex_countB)))))
(define-fun tindex_countB__ref___projection ((a tindex_countB__ref)) tindex_countB 
  (tindex_countB__content a))

(declare-sort index_count 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (index_count index_count) Bool)

(declare-fun dummy3 () index_count)

(declare-datatypes ()
((index_count__ref (mk_index_count__ref (index_count__content index_count)))))
(define-fun index_count__ref___projection ((a index_count__ref)) index_count 
  (index_count__content a))

(declare-fun to_rep (index_count) Int)

(declare-fun of_rep (Int) index_count)

;; inversion_axiom
  (assert
  (forall ((x index_count))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x index_count)) (! (in_range4
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (index index) Bool)

(declare-fun dummy4 () index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(define-fun dynamic_invariant1 ((temp___expr_305 Int)
  (temp___is_init_302 Bool) (temp___skip_constant_303 Bool)
  (temp___do_toplevel_304 Bool)) Bool (=>
                                      (or (= temp___is_init_302 true)
                                      (<= 0 5)) (in_range5 temp___expr_305)))

(declare-fun to_rep1 (index) Int)

(declare-fun of_rep1 (Int) index)

;; inversion_axiom
  (assert
  (forall ((x index))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x index)) (! (in_range5 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__partition_refinement__interval__first index)(rec__partition_refinement__interval__last index)(rec__partition_refinement__interval__count index_count)))))
(define-fun us_split_fields_First__projection ((a us_split_fields)) index 
  (rec__partition_refinement__interval__first a))

(define-fun us_split_fields_Last__projection ((a us_split_fields)) index 
  (rec__partition_refinement__interval__last a))

(define-fun us_split_fields_Count__projection ((a us_split_fields)) index_count 
  (rec__partition_refinement__interval__count a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_13__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                               a))

(define-fun bool_eq5 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__partition_refinement__interval__first
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__partition_refinement__interval__first
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__partition_refinement__interval__last
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__partition_refinement__interval__last
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__partition_refinement__interval__count
                           (us_split_fields1 a))) (to_rep
                                                  (rec__partition_refinement__interval__count
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun partition_refinement__interval__first__first__bit () Int)

(declare-fun partition_refinement__interval__first__last__bit () Int)

(declare-fun partition_refinement__interval__first__position () Int)

;; partition_refinement__interval__first__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__first__first__bit))

;; partition_refinement__interval__first__last__bit_axiom
  (assert
  (< partition_refinement__interval__first__first__bit partition_refinement__interval__first__last__bit))

;; partition_refinement__interval__first__position_axiom
  (assert (<= 0 partition_refinement__interval__first__position))

(declare-fun partition_refinement__interval__last__first__bit () Int)

(declare-fun partition_refinement__interval__last__last__bit () Int)

(declare-fun partition_refinement__interval__last__position () Int)

;; partition_refinement__interval__last__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__last__first__bit))

;; partition_refinement__interval__last__last__bit_axiom
  (assert
  (< partition_refinement__interval__last__first__bit partition_refinement__interval__last__last__bit))

;; partition_refinement__interval__last__position_axiom
  (assert (<= 0 partition_refinement__interval__last__position))

(declare-fun partition_refinement__interval__count__first__bit () Int)

(declare-fun partition_refinement__interval__count__last__bit () Int)

(declare-fun partition_refinement__interval__count__position () Int)

;; partition_refinement__interval__count__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__count__first__bit))

;; partition_refinement__interval__count__last__bit_axiom
  (assert
  (< partition_refinement__interval__count__first__bit partition_refinement__interval__count__last__bit))

;; partition_refinement__interval__count__position_axiom
  (assert (<= 0 partition_refinement__interval__count__position))

(declare-fun dummy5 () us_rep)

(declare-datatypes ()
((interval__ref (mk_interval__ref (interval__content us_rep)))))
(define-fun interval__ref___projection ((a interval__ref)) us_rep (interval__content
                                                                  a))

(declare-sort tpartition_indexB 0)

(define-fun in_range6 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (tpartition_indexB tpartition_indexB) Bool)

(declare-fun dummy6 () tpartition_indexB)

(declare-datatypes ()
((tpartition_indexB__ref
 (mk_tpartition_indexB__ref (tpartition_indexB__content tpartition_indexB)))))
(define-fun tpartition_indexB__ref___projection ((a tpartition_indexB__ref)) tpartition_indexB 
  (tpartition_indexB__content a))

(declare-sort partition_index 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (partition_index partition_index) Bool)

(declare-fun dummy7 () partition_index)

(declare-datatypes ()
((partition_index__ref
 (mk_partition_index__ref (partition_index__content partition_index)))))
(define-fun partition_index__ref___projection ((a partition_index__ref)) partition_index 
  (partition_index__content a))

(define-fun dynamic_invariant2 ((temp___expr_706 Int)
  (temp___is_init_703 Bool) (temp___skip_constant_704 Bool)
  (temp___do_toplevel_705 Bool)) Bool (=>
                                      (or (= temp___is_init_703 true)
                                      (<= 0 10000)) (in_range7
                                      temp___expr_706)))

(declare-fun to_rep2 (partition_index) Int)

(declare-fun of_rep2 (Int) partition_index)

;; inversion_axiom
  (assert
  (forall ((x partition_index))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x partition_index)) (! (in_range7
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort index_type 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (index_type index_type) Bool)

(declare-fun dummy8 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref_3__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(declare-datatypes ()
((element_type__ref (mk_element_type__ref (element_type__content us_rep)))))
(define-fun element_type__ref_8__projection ((a element_type__ref)) us_rep 
  (element_type__content a))

(declare-sort capacity_range 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 10001)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq9 (capacity_range capacity_range) Bool)

(declare-fun dummy9 () capacity_range)

(declare-datatypes ()
((capacity_range__ref
 (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__partition_refinement__partitions__vector__capacity capacity_range)))))
(define-fun us_split_discrs_3__projection ((a us_split_discrs)) capacity_range 
  (rec__partition_refinement__partitions__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref_3__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__partition_refinement__partitions__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type 
  (rec__partition_refinement__partitions__vector a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_10__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep_14__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep_15__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                 a))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun partition_refinement__partitions__vector__capacity__first__bit () Int)

(declare-fun partition_refinement__partitions__vector__capacity__last__bit () Int)

(declare-fun partition_refinement__partitions__vector__capacity__position () Int)

;; partition_refinement__partitions__vector__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__first__bit))

;; partition_refinement__partitions__vector__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitions__vector__capacity__first__bit partition_refinement__partitions__vector__capacity__last__bit))

;; partition_refinement__partitions__vector__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__position))

(declare-fun dummy10 () us_rep1)

(declare-datatypes ()
((vector__ref (mk_vector__ref (vector__content us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep1 (vector__content
                                                               a))

(declare-fun to_rep3 (capacity_range) Int)

(declare-fun of_rep3 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range9
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun capacity ((container us_rep1)) Int (ite (= (of_int 1) true)
                                               (to_rep3
                                               (rec__partition_refinement__partitions__vector__capacity
                                               (us_split_discrs1 container)))
                                               10001))

(declare-fun capacity__function_guard (Int us_rep1) Bool)

(define-fun dynamic_invariant3 ((temp___expr_733 Int)
  (temp___is_init_730 Bool) (temp___skip_constant_731 Bool)
  (temp___do_toplevel_732 Bool)) Bool (=>
                                      (or (= temp___is_init_730 true)
                                      (<= 0 10001)) (in_range9
                                      temp___expr_733)))

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant3 result true
     false true))) :pattern ((length container)) )))

(declare-datatypes ()
((element_type__ref1 (mk_element_type__ref1 (element_type__content1 us_rep)))))
(define-fun element_type__ref_9__projection ((a element_type__ref1)) us_rep 
  (element_type__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq10 (us_rep2 us_rep2) Bool)

(declare-fun user_eq11 (us_rep2 us_rep2) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun dummy11 () us_rep2)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref_3__projection ((a sequence__ref)) us_rep2 (sequence__content
                                                                    a))

(declare-fun get (us_rep2 Int) us_rep)

(declare-fun get__function_guard (us_rep us_rep2 Int) Bool)

(declare-fun model__ (us_rep1) us_rep2)

(declare-fun model____function_guard (us_rep2 us_rep1) Bool)

(define-fun element ((container us_rep1)
  (index1 Int)) us_rep (get (model__ container) index1))

(declare-fun element__function_guard (us_rep us_rep1 Int) Bool)

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(define-fun last ((container us_rep2)) Int (+ (- 1) (length1 container)))

(declare-fun last__function_guard (Int us_rep2) Bool)

(define-fun last_index ((container us_rep1)) Int (last (model__ container)))

(declare-fun last_index__function_guard (Int us_rep1) Bool)

(declare-fun first_index__function_guard (Int us_rep1) Bool)

(define-fun equal_except ((left us_rep2) (right us_rep2)
  (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (<= i 
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (= 
                                                                    (bool_eq5
                                                                    (get left
                                                                    i)
                                                                    (get
                                                                    right i)) true))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)

(define-fun olt ((left us_rep2)
  (right us_rep2)) Bool (and (< (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 0 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (bool_eq5
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun olt__function_guard (Bool us_rep2 us_rep2) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-fun partition_refinement__partitions__vector__capacity__first__bit1 () Int)

(declare-fun partition_refinement__partitions__vector__capacity__last__bit1 () Int)

(declare-fun partition_refinement__partitions__vector__capacity__position1 () Int)

;; partition_refinement__partitions__vector__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__first__bit1))

;; partition_refinement__partitions__vector__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitions__vector__capacity__first__bit1 
  partition_refinement__partitions__vector__capacity__last__bit1))

;; partition_refinement__partitions__vector__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__position1))

(declare-fun dummy12 () us_rep1)

(declare-datatypes ()
((partition__ref (mk_partition__ref (partition__content us_rep1)))))
(define-fun partition__ref___projection ((a partition__ref)) us_rep1 
  (partition__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int partition_index))))))
(declare-fun slide ((Array Int partition_index) Int
  Int) (Array Int partition_index))

;; slide_eq
  (assert
  (forall ((a (Array Int partition_index)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int partition_index)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int partition_index) Int Int
  (Array Int partition_index) Int Int) (Array Int partition_index))

;; concat_def
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (partition_index Int) (Array Int partition_index))

;; singleton_def
  (assert
  (forall ((v partition_index))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq11 ((a (Array Int partition_index)) (a__first Int)
  (a__last Int) (b (Array Int partition_index)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep2 (select a temp___idx_134)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq11 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep2 (select a temp___idx_134)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int partition_index) Int Int
  (Array Int partition_index) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq11 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq11 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq11 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun p__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun r50b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun save_length () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun f_loop_entry () (Array Int partition_index))

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun r54b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun r55b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun to_rep4 (tindex_countB) Int)

(declare-fun of_rep4 (Int) tindex_countB)

;; inversion_axiom
  (assert
  (forall ((x tindex_countB))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x tindex_countB)) (! (in_range3
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq12 (tindex_countB tindex_countB) Bool)

(declare-fun dummy13 () tindex_countB)

(declare-datatypes ()
((t56b__ref (mk_t56b__ref (t56b__content tindex_countB)))))
(define-fun t56b__ref___projection ((a t56b__ref)) tindex_countB (t56b__content
                                                                 a))

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(define-fun dynamic_invariant4 ((temp___expr_299 Int)
  (temp___is_init_296 Bool) (temp___skip_constant_297 Bool)
  (temp___do_toplevel_298 Bool)) Bool (=>
                                      (or (= temp___is_init_296 true)
                                      (<= 0 6)) (in_range4 temp___expr_299)))

(declare-sort extended_index 0)

(define-fun in_range10 ((x Int)) Bool (and (<= (- 1) x) (<= x 10001)))

(define-fun bool_eq13 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq13 (extended_index extended_index) Bool)

(declare-fun dummy14 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref_3__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant5 ((temp___expr_727 Int)
  (temp___is_init_724 Bool) (temp___skip_constant_725 Bool)
  (temp___do_toplevel_726 Bool)) Bool (=>
                                      (or (= temp___is_init_724 true)
                                      (<= (- 1) 10001)) (in_range10
                                      temp___expr_727)))

(define-fun oeq ((left us_rep2)
  (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 0 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (bool_eq5
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq11 a b) (oeq a b)) :pattern ((user_eq11 a b)) )))

(define-fun default_initial_assumption ((temp___expr_770 us_rep2)
  (temp___skip_top_level_771 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_771 true))
                                         (= (length1 temp___expr_770) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length1 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

(define-fun dynamic_invariant6 ((temp___expr_712 Int)
  (temp___is_init_709 Bool) (temp___skip_constant_710 Bool)
  (temp___do_toplevel_711 Bool)) Bool (=>
                                      (or (= temp___is_init_709 true)
                                      (<= 0 10000)) (in_range8
                                      temp___expr_712)))

(declare-sort extended_index1 0)

(define-fun in_range11 ((x Int)) Bool (and (<= (- 1) x) (<= x 10000)))

(define-fun bool_eq14 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq14 (extended_index1 extended_index1) Bool)

(declare-fun dummy15 () extended_index1)

(declare-datatypes ()
((extended_index__ref1
 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_4__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun dynamic_invariant7 ((temp___expr_763 Int)
  (temp___is_init_760 Bool) (temp___skip_constant_761 Bool)
  (temp___do_toplevel_762 Bool)) Bool (=>
                                      (or (= temp___is_init_760 true)
                                      (<= (- 1) 10000)) (in_range11
                                      temp___expr_763)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length1 container)))
     (and (<= (+ (- 1) result) 10000) (dynamic_invariant result true false
     true))) :pattern ((length1 container)) )))

;; get__post_axiom
  (assert true)

(declare-fun p__split_fields () us_main_type)

(declare-fun f () (Array Int partition_index))

(declare-fun p_prime_index () Int)

(declare-fun j () Int)

(declare-fun o () Int)

(declare-fun partition_refinement__make_new_partitions__L_1__R50b__assume () Int)

(declare-fun temp___1212 () us_rep)

(declare-fun o1 () Int)

(declare-fun o2 () index_count)

(declare-fun o3 () index)

(declare-fun o4 () us_split_fields)

(declare-fun temp___1213 () us_rep)

(declare-fun o5 () Int)

(declare-fun o6 () index)

(declare-fun o7 () us_split_fields)

(declare-fun temp___1215 () us_rep)

(declare-fun o8 () index_count)

(declare-fun o9 () us_split_fields)

(declare-fun temp___1217 () us_rep)

(declare-fun partition_refinement__make_new_partitions__B_2__save_length__assume () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun temp___1222 () Int)

(declare-fun temp___1220 () (Array Int partition_index))

(declare-fun o12 () partition_index)

(declare-fun o13 () (Array Int partition_index))

(declare-fun k () Int)

(declare-fun o14 () us_rep)

(declare-fun o15 () us_split_fields)

(declare-fun o16 () index)

(declare-fun o17 () Int)

(declare-fun o18 () Bool)

(declare-fun result () int__ref)

(declare-fun j1 () Int)

(declare-fun p__split_fields1 () us_split_fields2)

(declare-fun f1 () (Array Int partition_index))

(declare-fun p_elem__split_fields () us_split_fields)

(declare-fun p_prime__split_fields () us_split_fields)

(declare-fun p_prime_index1 () Int)

(declare-fun j2 () Int)

(declare-fun i () Int)

(declare-fun rho () us_split_fields2)

(declare-fun rho1 () us_split_fields2)

(declare-fun result1 () us_split_fields__ref)

(declare-fun p_elem__split_fields1 () us_split_fields)

(declare-fun result2 () us_split_fields__ref)

(declare-fun p_prime__split_fields1 () us_split_fields)

(declare-fun result3 () us_split_fields__ref)

(declare-fun p_elem__split_fields2 () us_split_fields)

(declare-fun result4 () us_split_fields__ref)

(declare-fun p_elem__split_fields3 () us_split_fields)

(declare-fun partition_refinement__partitions__replace_element__container__fields () us_split_fields2)

(declare-fun result5 () us_split_fields__ref1)

(declare-fun p__split_fields2 () us_split_fields2)

(declare-fun result6 () int__ref)

(declare-fun p_prime_index2 () Int)

(declare-fun partition_refinement__partitions__append__2__container__fields () us_split_fields2)

(declare-fun result7 () us_split_fields__ref1)

(declare-fun p__split_fields3 () us_split_fields2)

(declare-fun result8 () int__ref)

(declare-fun i1 () Int)

(declare-fun result9 () map__ref)

(declare-fun f2 () (Array Int partition_index))

(declare-fun f3 () (Array Int partition_index))

(declare-fun i2 () Int)

(declare-fun f4 () map__ref)

(declare-fun i3 () int__ref)

(declare-fun f5 () (Array Int partition_index))

(declare-fun i4 () Int)

(declare-fun f6 () map__ref)

(declare-fun i5 () int__ref)

(declare-fun f7 () (Array Int partition_index))

(declare-fun i6 () Int)

(declare-fun p__split_fields4 () us_split_fields__ref1)

(declare-fun f8 () map__ref)

(declare-fun p_elem__split_fields4 () us_split_fields__ref)

(declare-fun p_prime__split_fields2 () us_split_fields__ref)

(declare-fun p_prime_index3 () int__ref)

(declare-fun i7 () int__ref)

(declare-fun p__split_fields5 () us_split_fields2)

(declare-fun f9 () (Array Int partition_index))

(declare-fun p_elem__split_fields5 () us_split_fields)

(declare-fun p_prime__split_fields3 () us_split_fields)

(declare-fun p_prime_index4 () Int)

(declare-fun i8 () Int)

(declare-fun rho2 () us_split_fields2)

(declare-fun rho3 () us_split_fields2)

;; H
  (assert
  (and
  (<= (* 2 (length
           (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))) 
  (capacity (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))))
  (and
  (<= (length
      (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))) 5000)
  (and
  (forall ((j3 Int))
  (=> (and (<= 0 j3) (<= j3 5))
  (and (<= 0 (to_rep2 (select f j3)))
  (<= (to_rep2 (select f j3)) (- (length
                                 (mk___rep1 p__split_discrs
                                 (mk___split_fields1 p__split_fields))) 1)))))
  (and
  (forall ((j3 Int))
  (=> (and (<= 0 j3) (<= j3 5))
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first
      (us_split_fields1
      (get
      (model__
      (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))
      (to_rep2 (select f j3)))))) j3)
  (<= j3 (to_rep1
         (rec__partition_refinement__interval__last
         (us_split_fields1
         (get
         (model__
         (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))
         (to_rep2 (select f j3))))))))))
  (forall ((j3 Int))
  (=>
  (and (<= 0 j3)
  (<= j3 (- (length
            (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))) 1)))
  (forall ((k1 Int))
  (=>
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first
      (us_split_fields1
      (get
      (model__
      (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))) j3)))) k1)
  (<= k1 (to_rep1
         (rec__partition_refinement__interval__last
         (us_split_fields1
         (get
         (model__
         (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))
         j3))))))
  (= (to_rep2 (select f k1)) j3))))))))))

;; H
  (assert (=> (<= 0 10000) (in_range7 p_prime_index)))

;; H
  (assert
  (and
  (= o (length
       (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields))))
  (and (in_range9 o)
  (<= o (capacity
        (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))))))

;; H
  (assert
  (= partition_refinement__make_new_partitions__L_1__R50b__assume (- 
  o 1)))

;; H
  (assert
  (= partition_refinement__make_new_partitions__L_1__R50b__assume r50b))

;; H
  (assert (in_range6 r50b))

;; H
  (assert (= result (mk_int__ref j)))

;; H
  (assert (= j1 0))

;; H
  (assert (<= 0 j1))

;; H
  (assert (<= j1 r50b))

;; H
  (assert
  (and (=> (<= 0 10000) (in_range7 p_prime_index1))
  (and (<= 0 j2) (<= j2 r50b))))

;; H
  (assert
  (and
  (= temp___1212 (get (model__ (mk___rep1 p__split_discrs p__split_fields1))
                 j2))
  (= (bool_eq5 temp___1212
     (get (model__ (mk___rep1 p__split_discrs p__split_fields1)) j2)) true)))

;; H
  (assert (= result1 (mk___split_fields__ref p_elem__split_fields)))

;; H
  (assert (= p_elem__split_fields1 (us_split_fields1 temp___1212)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= (to_rep o2) 0)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (and
  (= o1 (+ (to_rep1
           (rec__partition_refinement__interval__first p_elem__split_fields1)) 
  (to_rep (rec__partition_refinement__interval__count p_elem__split_fields1))))
  (in_range5
  (+ (to_rep1
     (rec__partition_refinement__interval__first p_elem__split_fields1)) 
  (to_rep (rec__partition_refinement__interval__count p_elem__split_fields1)))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= (to_rep1 o3) o1)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= o4 (mk___split_fields o3
        (rec__partition_refinement__interval__last p_elem__split_fields1) 
        o2))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= temp___1213 (mk___rep o4))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= result2 (mk___split_fields__ref p_prime__split_fields))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_prime__split_fields1 (us_split_fields1 temp___1213))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (and
  (= o5 (- (+ (to_rep1
              (rec__partition_refinement__interval__first
              p_elem__split_fields1)) (to_rep
                                      (rec__partition_refinement__interval__count
                                      p_elem__split_fields1))) 1))
  (in_range5
  (- (+ (to_rep1
        (rec__partition_refinement__interval__first p_elem__split_fields1)) 
  (to_rep (rec__partition_refinement__interval__count p_elem__split_fields1))) 1)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= (to_rep1 o6) o5)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= o7 (mk___split_fields
        (rec__partition_refinement__interval__first p_elem__split_fields1) 
        o6
        (rec__partition_refinement__interval__count p_elem__split_fields1)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= temp___1215 (mk___rep o7))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= result3 (mk___split_fields__ref p_elem__split_fields1))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_elem__split_fields2 (us_split_fields1 temp___1215))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= (to_rep o8) 0)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= o9 (mk___split_fields
        (rec__partition_refinement__interval__first p_elem__split_fields2)
        (rec__partition_refinement__interval__last p_elem__split_fields2) 
        o8))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= temp___1217 (mk___rep o9))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= result4 (mk___split_fields__ref p_elem__split_fields2))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_elem__split_fields3 (us_split_fields1 temp___1217))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (and
  (and
  (= (length
     (mk___rep1 p__split_discrs
     partition_refinement__partitions__replace_element__container__fields)) 
  (length (mk___rep1 p__split_discrs p__split_fields1)))
  (= (bool_eq5
     (get
     (model__
     (mk___rep1 p__split_discrs
     partition_refinement__partitions__replace_element__container__fields))
     j2) (mk___rep p_elem__split_fields3)) true))
  (= (equal_except (model__ (mk___rep1 p__split_discrs p__split_fields1))
     (model__
     (mk___rep1 p__split_discrs
     partition_refinement__partitions__replace_element__container__fields))
     j2) true))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= result5 (mk___split_fields__ref1 p__split_fields1))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p__split_fields2 partition_refinement__partitions__replace_element__container__fields)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (and
  (= partition_refinement__make_new_partitions__B_2__save_length__assume 
  (length (mk___rep1 p__split_discrs p__split_fields2)))
  (and (in_range9
  partition_refinement__make_new_partitions__B_2__save_length__assume)
  (<= partition_refinement__make_new_partitions__B_2__save_length__assume 
  (capacity (mk___rep1 p__split_discrs p__split_fields2)))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= partition_refinement__make_new_partitions__B_2__save_length__assume 
  save_length)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (in_range2 save_length)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (and (= o10 (length (mk___rep1 p__split_discrs p__split_fields2)))
  (and (in_range9 o10)
  (<= o10 (capacity (mk___rep1 p__split_discrs p__split_fields2)))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (and (= o11 o10) (in_range7 o10))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= result6 (mk_int__ref p_prime_index1))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_prime_index2 o11)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (and
  (and
  (= (length
     (mk___rep1 p__split_discrs
     partition_refinement__partitions__append__2__container__fields)) (+ 
  (length (mk___rep1 p__split_discrs p__split_fields2)) 1))
  (= (olt (model__ (mk___rep1 p__split_discrs p__split_fields2))
     (model__
     (mk___rep1 p__split_discrs
     partition_refinement__partitions__append__2__container__fields))) true))
  (= (bool_eq5
     (get
     (model__
     (mk___rep1 p__split_discrs
     partition_refinement__partitions__append__2__container__fields))
     (+ (last (model__ (mk___rep1 p__split_discrs p__split_fields2))) 1))
     (mk___rep p_prime__split_fields1)) true))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= result7 (mk___split_fields__ref1 p__split_fields2))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p__split_fields3 partition_refinement__partitions__append__2__container__fields)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= (length (mk___rep1 p__split_discrs p__split_fields3)) (+ save_length 1))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_prime_index2 (- (length (mk___rep1 p__split_discrs p__split_fields3)) 1))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= (bool_eq5
     (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
     p_prime_index2) (mk___rep p_prime__split_fields1)) true)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= f1 f_loop_entry)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= (to_rep1
     (rec__partition_refinement__interval__first p_prime__split_fields1)) 
  r54b)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (in_range5 r54b)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= (to_rep1
     (rec__partition_refinement__interval__last p_prime__split_fields1)) 
  r55b)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (in_range5 r55b)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= result8 (mk_int__ref i))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= i1 r54b)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= temp___1222 i1))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= temp___1220 f1))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= (to_rep2 o12) p_prime_index2))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= o13 (store f1 i1 o12)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= result9 (mk_map__ref f1)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= f2 o13))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b))
  (forall ((k1 Int))
  (=>
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first p_prime__split_fields1)) k1)
  (<= k1 i2)) (= (to_rep2 (select f3 k1)) p_prime_index2))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b))
  (forall ((k1 Int))
  (=>
  (and (<= 0 k1)
  (<= k1 (- (to_rep1
            (rec__partition_refinement__interval__first
            p_prime__split_fields1)) 1)))
  (= (to_rep2 (select f3 k1)) (to_rep2 (select f_loop_entry k1))))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b))
  (forall ((k1 Int))
  (=> (and (<= (+ i2 1) k1) (<= k1 5))
  (= (to_rep2 (select f3 k1)) (to_rep2 (select f_loop_entry k1))))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b))
  (and
  (and
  (forall ((temp___1221 Int))
  (=> (and (<= 0 temp___1221) (<= temp___1221 5))
  (=> (< i2 temp___1221)
  (= (select f3 temp___1221) (select temp___1220 temp___1221)))))
  (=> (<= r54b r55b) (dynamic_property r54b r55b i2)))
  (and (<= r54b i2) (<= i2 r55b))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= i2 r55b))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= i3 (mk_int__ref i2)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= f4 (mk_map__ref f3)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= i4 i2))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= f5 f3))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= i5 i3))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= f6 f4))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= i6 i4))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (and (<= r54b i1) (<= i1 r55b)) (= f7 f5))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (not (and (<= r54b i1) (<= i1 r55b))) (= i5 (mk_int__ref i1)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (not (and (<= r54b i1) (<= i1 r55b))) (= f6 (mk_map__ref f1)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (not (and (<= r54b i1) (<= i1 r55b))) (= i6 i1))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (=> (not (and (<= r54b i1) (<= i1 r55b))) (= f7 f1))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=>
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first p_prime__split_fields1)) k1)
  (<= k1 (to_rep1
         (rec__partition_refinement__interval__last p_prime__split_fields1))))
  (= (to_rep2 (select (map__content f6) k1)) (- (length
                                                (mk___rep1 p__split_discrs
                                                p__split_fields3)) 1))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=>
  (and (<= 0 k1)
  (<= k1 (- (to_rep1
            (rec__partition_refinement__interval__first
            p_prime__split_fields1)) 1)))
  (and (<= 0 (to_rep2 (select (map__content f6) k1)))
  (<= (to_rep2 (select (map__content f6) k1)) (- (length
                                                 (mk___rep1 p__split_discrs
                                                 p__split_fields3)) 1)))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=>
  (and
  (<= (+ (to_rep1
         (rec__partition_refinement__interval__last p_prime__split_fields1)) 1) k1)
  (<= k1 5))
  (and (<= 0 (to_rep2 (select (map__content f6) k1)))
  (<= (to_rep2 (select (map__content f6) k1)) (- (length
                                                 (mk___rep1 p__split_discrs
                                                 p__split_fields3)) 1)))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=>
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first p_elem__split_fields3)) k1)
  (<= k1 (to_rep1
         (rec__partition_refinement__interval__last p_elem__split_fields3))))
  (= (bool_eq5
     (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
     (to_rep2 (select (map__content f6) k1)))
     (mk___rep p_elem__split_fields3)) true)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=>
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first p_elem__split_fields3)) k1)
  (<= k1 (to_rep1
         (rec__partition_refinement__interval__last p_elem__split_fields3))))
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first
      (us_split_fields1
      (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
      (to_rep2 (select (map__content f6) k1)))))) k1)
  (<= k1 (to_rep1
         (rec__partition_refinement__interval__last
         (us_split_fields1
         (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
         (to_rep2 (select (map__content f6) k1))))))))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=>
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first p_prime__split_fields1)) k1)
  (<= k1 (to_rep1
         (rec__partition_refinement__interval__last p_prime__split_fields1))))
  (= (bool_eq5
     (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
     (to_rep2 (select (map__content f6) k1)))
     (mk___rep p_prime__split_fields1)) true)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=>
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first p_prime__split_fields1)) k1)
  (<= k1 (to_rep1
         (rec__partition_refinement__interval__last p_prime__split_fields1))))
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first
      (us_split_fields1
      (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
      (to_rep2 (select (map__content f6) k1)))))) k1)
  (<= k1 (to_rep1
         (rec__partition_refinement__interval__last
         (us_split_fields1
         (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
         (to_rep2 (select (map__content f6) k1))))))))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=>
  (and (<= 0 k1)
  (<= k1 (- (to_rep1
            (rec__partition_refinement__interval__first
            p_elem__split_fields3)) 1)))
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first
      (us_split_fields1
      (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
      (to_rep2 (select (map__content f6) k1)))))) k1)
  (<= k1 (to_rep1
         (rec__partition_refinement__interval__last
         (us_split_fields1
         (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
         (to_rep2 (select (map__content f6) k1))))))))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=>
  (and
  (<= (+ (to_rep1
         (rec__partition_refinement__interval__last p_prime__split_fields1)) 1) k1)
  (<= k1 5))
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first
      (us_split_fields1
      (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
      (to_rep2 (select (map__content f6) k1)))))) k1)
  (<= k1 (to_rep1
         (rec__partition_refinement__interval__last
         (us_split_fields1
         (get (model__ (mk___rep1 p__split_discrs p__split_fields3))
         (to_rep2 (select (map__content f6) k1))))))))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=> (and (<= 0 k1) (<= k1 (- j2 1)))
  (forall ((l Int))
  (=>
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first
      (us_split_fields1
      (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) k1)))) l)
  (<= l (to_rep1
        (rec__partition_refinement__interval__last
        (us_split_fields1
        (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) k1))))))
  (= (to_rep2 (select (map__content f6) l)) k1)))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((l Int))
  (=>
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first
      (us_split_fields1
      (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) j2)))) l)
  (<= l (to_rep1
        (rec__partition_refinement__interval__last
        (us_split_fields1
        (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) j2))))))
  (= (to_rep2 (select (map__content f6) l)) j2)))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (forall ((k1 Int))
  (=>
  (and (<= (+ j2 1) k1)
  (<= k1 (- (length (mk___rep1 p__split_discrs p__split_fields3)) 1)))
  (forall ((l Int))
  (=>
  (and
  (<= (to_rep1
      (rec__partition_refinement__interval__first
      (us_split_fields1
      (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) k1)))) l)
  (<= l (to_rep1
        (rec__partition_refinement__interval__last
        (us_split_fields1
        (get (model__ (mk___rep1 p__split_discrs p__split_fields3)) k1))))))
  (= (to_rep2 (select (map__content f6) l)) k1)))))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= i7 i5)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_prime_index3 (mk_int__ref p_prime_index2))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_prime__split_fields2 (mk___split_fields__ref p_prime__split_fields1))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_elem__split_fields4 (mk___split_fields__ref p_elem__split_fields3))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= f8 f6)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p__split_fields4 (mk___split_fields__ref1 p__split_fields3))))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= rho3 partition_refinement__partitions__append__2__container__fields)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= rho2 partition_refinement__partitions__replace_element__container__fields)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= i8 i6)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_prime_index4 p_prime_index2)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_prime__split_fields3 p_prime__split_fields1)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p_elem__split_fields5 p_elem__split_fields3)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= f9 f7)))

;; H
  (assert
  (=>
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1)))))
  (= p__split_fields5 p__split_fields3)))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= i7 (mk_int__ref i))))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= p_prime_index3 (mk_int__ref p_prime_index1))))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= p_prime__split_fields2 (mk___split_fields__ref p_prime__split_fields))))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= p_elem__split_fields4 (mk___split_fields__ref p_elem__split_fields1))))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= f8 (mk_map__ref f1))))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= p__split_fields4 (mk___split_fields__ref1 p__split_fields1))))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= rho3 rho1)))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= rho2 rho)))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= i8 i)))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= p_prime_index4 p_prime_index1)))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= p_prime__split_fields3 p_prime__split_fields)))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= p_elem__split_fields5 p_elem__split_fields1)))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= f9 f1)))

;; H
  (assert
  (=>
  (not
  (and
  (<= 1 (to_rep
        (rec__partition_refinement__interval__count p_elem__split_fields1)))
  (<= (to_rep
      (rec__partition_refinement__interval__count p_elem__split_fields1)) (- 
  (to_rep1 (rec__partition_refinement__interval__last p_elem__split_fields1)) 
  (to_rep1
  (rec__partition_refinement__interval__first p_elem__split_fields1))))))
  (= p__split_fields5 p__split_fields1)))

;; H
  (assert
  (= (capacity
     (mk___rep1 p__split_discrs (us_split_fields__content1 p__split_fields4))) 
  (capacity (mk___rep1 p__split_discrs (mk___split_fields1 p__split_fields)))))

;; H
  (assert
  (and
  (<= 0 (- (length
           (mk___rep1 p__split_discrs
           (us_split_fields__content1 p__split_fields4))) (length
                                                          (mk___rep1
                                                          p__split_discrs
                                                          (mk___split_fields1
                                                          p__split_fields)))))
  (<= (- (length
         (mk___rep1 p__split_discrs
         (us_split_fields__content1 p__split_fields4))) (length
                                                        (mk___rep1
                                                        p__split_discrs
                                                        (mk___split_fields1
                                                        p__split_fields)))) (+ 
  j2 1))))

;; H
  (assert
  (forall ((k1 Int))
  (=> (and (<= 0 k1) (<= k1 5))
  (and (<= 0 (to_rep2 (select (map__content f8) k1)))
  (<= (to_rep2 (select (map__content f8) k1)) (- (length
                                                 (mk___rep1 p__split_discrs
                                                 (us_split_fields__content1
                                                 p__split_fields4))) 1))))))

;; H
  (assert (<= 0 k))

;; H
  (assert (<= k 5))

;; H
  (assert
  (and
  (= o14 (get
         (model__
         (mk___rep1 p__split_discrs
         (us_split_fields__content1 p__split_fields4)))
         (to_rep2 (select (map__content f8) k))))
  (= (bool_eq5 o14
     (get
     (model__
     (mk___rep1 p__split_discrs (us_split_fields__content1 p__split_fields4)))
     (to_rep2 (select (map__content f8) k)))) true)))

;; H
  (assert (= o15 (us_split_fields1 o14)))

;; H
  (assert (= o16 (rec__partition_refinement__interval__last o15)))

;; H
  (assert (= o17 (to_rep1 o16)))

;; H
  (assert (= o18 (ite (<= k o17) true false)))

(assert
;; WP_parameter_def
 ;; File "partition_refinement.adb", line 18, characters 0-0
  (not (<= 0 (to_rep2 (select (map__content f8) k)))))
(check-sat)
