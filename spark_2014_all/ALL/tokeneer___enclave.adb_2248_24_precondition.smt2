;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort presencet 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (presencet presencet) Bool)

(declare-const dummy4 presencet)

(declare-datatypes ()
((presencet__ref (mk_presencet__ref (presencet__content presencet)))))
(define-fun presencet__ref___projection ((a presencet__ref)) presencet
  (presencet__content a))

(define-fun dynamic_invariant ((temp___expr_222 Int)
  (temp___is_init_219 Bool) (temp___skip_constant_220 Bool)
  (temp___do_toplevel_221 Bool)) Bool (=>
                                      (or (= temp___is_init_219 true)
                                      (<= 0 1)) (in_range4 temp___expr_222)))

(declare-sort datai 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 78)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (datai datai) Bool)

(declare-const dummy5 datai)

(declare-datatypes () ((datai__ref (mk_datai__ref (datai__content datai)))))
(define-fun datai__ref___projection ((a datai__ref)) datai (datai__content a))

(declare-sort datalengtht 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 78)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (datalengtht datalengtht) Bool)

(declare-const dummy6 datalengtht)

(declare-datatypes ()
((datalengtht__ref (mk_datalengtht__ref (datalengtht__content datalengtht)))))
(define-fun datalengtht__ref___projection ((a datalengtht__ref)) datalengtht
  (datalengtht__content a))

(declare-fun to_rep2 (datalengtht) Int)

(declare-fun of_rep2 (Int) datalengtht)

;; inversion_axiom
  (assert
  (forall ((x datalengtht))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x datalengtht)) (! (in_range6
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-const dummy7 (Array Int character))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__keyboard__datat__length datalengtht)(rec__keyboard__datat__text (Array Int character))))))
(define-fun us_split_fields_Length__projection ((a us_split_fields)) datalengtht
  (rec__keyboard__datat__length a))

(define-fun us_split_fields_Text__projection ((a us_split_fields)) (Array Int character)
  (rec__keyboard__datat__text a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__keyboard__datat__length
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__keyboard__datat__length
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__keyboard__datat__text (us_split_fields1 a))
                           1 78
                           (rec__keyboard__datat__text (us_split_fields1 b))
                           1 78) true))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const keyboard__datat__length__first__bit Int)

(declare-const keyboard__datat__length__last__bit Int)

(declare-const keyboard__datat__length__position Int)

;; keyboard__datat__length__first__bit_axiom
  (assert (<= 0 keyboard__datat__length__first__bit))

;; keyboard__datat__length__last__bit_axiom
  (assert
  (< keyboard__datat__length__first__bit keyboard__datat__length__last__bit))

;; keyboard__datat__length__position_axiom
  (assert (<= 0 keyboard__datat__length__position))

(declare-const keyboard__datat__text__first__bit Int)

(declare-const keyboard__datat__text__last__bit Int)

(declare-const keyboard__datat__text__position Int)

;; keyboard__datat__text__first__bit_axiom
  (assert (<= 0 keyboard__datat__text__first__bit))

;; keyboard__datat__text__last__bit_axiom
  (assert
  (< keyboard__datat__text__first__bit keyboard__datat__text__last__bit))

;; keyboard__datat__text__position_axiom
  (assert (<= 0 keyboard__datat__text__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes () ((datat__ref (mk_datat__ref (datat__content us_rep)))))
(define-fun datat__ref___projection ((a datat__ref)) us_rep (datat__content
                                                            a))

(declare-sort opandnullt 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (opandnullt opandnullt) Bool)

(declare-const dummy9 opandnullt)

(declare-datatypes ()
((opandnullt__ref (mk_opandnullt__ref (opandnullt__content opandnullt)))))
(define-fun opandnullt__ref___projection ((a opandnullt__ref)) opandnullt
  (opandnullt__content a))

(define-fun dynamic_invariant1 ((temp___expr_261 Int)
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool)) Bool (=>
                                      (or (= temp___is_init_258 true)
                                      (<= 0 4)) (in_range7 temp___expr_261)))

(declare-sort opt 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (opt opt) Bool)

(declare-const dummy10 opt)

(declare-datatypes () ((opt__ref (mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))

(declare-sort privileget 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (privileget privileget) Bool)

(declare-const dummy11 privileget)

(declare-datatypes ()
((privileget__ref (mk_privileget__ref (privileget__content privileget)))))
(define-fun privileget__ref___projection ((a privileget__ref)) privileget
  (privileget__content a))

(declare-fun to_rep3 (privileget) Int)

(declare-fun of_rep3 (Int) privileget)

;; inversion_axiom
  (assert
  (forall ((x privileget))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x privileget)) (! (in_range9
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-fun to_rep4 (opandnullt) Int)

(declare-fun of_rep4 (Int) opandnullt)

;; inversion_axiom
  (assert
  (forall ((x opandnullt))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x opandnullt)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__admin__t__rolepresent privileget)(rec__admin__t__currentop opandnullt)))))
(define-fun us_split_fields_RolePresent__projection ((a us_split_fields2)) privileget
  (rec__admin__t__rolepresent a))

(define-fun us_split_fields_CurrentOp__projection ((a us_split_fields2)) opandnullt
  (rec__admin__t__currentop a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep3
                            (rec__admin__t__rolepresent (us_split_fields3 a)))
                         (to_rep3
                         (rec__admin__t__rolepresent (us_split_fields3 b))))
                         (= (to_rep4
                            (rec__admin__t__currentop (us_split_fields3 a)))
                         (to_rep4
                         (rec__admin__t__currentop (us_split_fields3 b)))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const admin__t__rolepresent__first__bit Int)

(declare-const admin__t__rolepresent__last__bit Int)

(declare-const admin__t__rolepresent__position Int)

;; admin__t__rolepresent__first__bit_axiom
  (assert (<= 0 admin__t__rolepresent__first__bit))

;; admin__t__rolepresent__last__bit_axiom
  (assert
  (< admin__t__rolepresent__first__bit admin__t__rolepresent__last__bit))

;; admin__t__rolepresent__position_axiom
  (assert (<= 0 admin__t__rolepresent__position))

(declare-const admin__t__currentop__first__bit Int)

(declare-const admin__t__currentop__last__bit Int)

(declare-const admin__t__currentop__position Int)

;; admin__t__currentop__first__bit_axiom
  (assert (<= 0 admin__t__currentop__first__bit))

;; admin__t__currentop__last__bit_axiom
  (assert (< admin__t__currentop__first__bit admin__t__currentop__last__bit))

;; admin__t__currentop__position_axiom
  (assert (<= 0 admin__t__currentop__position))

(declare-fun user_eq12 (us_rep1 us_rep1) Bool)

(declare-const dummy12 us_rep1)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep1)))))
(define-fun t__ref___projection ((a t__ref)) us_rep1 (t__content a))

(declare-fun rolepresent (us_rep1) Int)

(declare-fun rolepresent__function_guard (Int us_rep1) Bool)

(define-fun dynamic_invariant2 ((temp___expr_179 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)) Bool (=>
                                      (or (= temp___is_init_176 true)
                                      (<= 0 3)) (in_range9 temp___expr_179)))

;; rolepresent__post_axiom
  (assert
  (forall ((theadmin us_rep1)) (! (dynamic_invariant2 (rolepresent theadmin)
  true false true) :pattern ((rolepresent theadmin)) )))

(declare-fun isdoingop (us_rep1) Bool)

(declare-fun isdoingop__function_guard (Bool us_rep1) Bool)

;; isdoingop__post_axiom
  (assert true)

(declare-fun thecurrentop (us_rep1) Int)

(declare-fun thecurrentop__function_guard (Int us_rep1) Bool)

(define-fun dynamic_invariant3 ((temp___expr_267 Int)
  (temp___is_init_264 Bool) (temp___skip_constant_265 Bool)
  (temp___do_toplevel_266 Bool)) Bool (=>
                                      (or (= temp___is_init_264 true)
                                      (<= 1 4)) (in_range8 temp___expr_267)))

;; thecurrentop__post_axiom
  (assert
  (forall ((theadmin us_rep1))
  (! (=> (= (isdoingop theadmin) true) (dynamic_invariant3
     (thecurrentop theadmin) true false true)) :pattern ((thecurrentop
                                                         theadmin)) )))

(declare-fun ispresent (us_rep1) Bool)

(declare-fun ispresent__function_guard (Bool us_rep1) Bool)

;; ispresent__post_axiom
  (assert true)

(declare-fun str_comp (us_rep Int) Bool)

(declare-fun str_comp__function_guard (Bool us_rep Int) Bool)

(declare-fun allowedop (us_rep1 Int) Bool)

(declare-fun allowedop__function_guard (Bool us_rep1 Int) Bool)

(declare-fun opisavailable (us_rep1 us_rep) Int)

(declare-fun opisavailable__function_guard (Int us_rep1 us_rep) Bool)

;; opisavailable__post_axiom
  (assert
  (forall ((theadmin us_rep1))
  (forall ((keyedop us_rep))
  (! (=> (= (ispresent theadmin) true)
     (let ((result (opisavailable theadmin keyedop)))
     (and
     (= (and (or (ite (exists ((op Int))
                      (and (and (<= 1 op) (<= op 4))
                      (and
                      (and (= (str_comp keyedop op) true)
                      (= (allowedop theadmin op) true)) (= result op))))
                 true false) (= result 0)) (not (and (ite (exists ((op Int))
                                                          (and
                                                          (and (<= 1 op)
                                                          (<= op 4))
                                                          (and
                                                          (and
                                                          (= (str_comp
                                                             keyedop op) true)
                                                          (= (allowedop
                                                             theadmin op) true))
                                                          (= result op))))
                                                     true false) (= result 0)))) true)
     (dynamic_invariant1 result true false true)))) :pattern ((opisavailable
                                                              theadmin
                                                              keyedop)) ))))

(declare-fun valid_numberlogentries (us_private) Bool)

(declare-fun valid_numberlogentries__function_guard (Bool us_private) Bool)

(declare-fun theauthcertrole (us_private) Int)

(declare-fun theauthcertrole__function_guard (Int us_private) Bool)

;; theauthcertrole__post_axiom
  (assert
  (forall ((admintoken__state us_private)) (! (dynamic_invariant2
  (theauthcertrole admintoken__state) true false
  true) :pattern ((theauthcertrole admintoken__state)) )))

(declare-fun isgood (us_private) Bool)

(declare-fun isgood__function_guard (Bool us_private) Bool)

;; isgood__post_axiom
  (assert true)

(declare-fun authcertvalid (us_private) Bool)

(declare-fun authcertvalid__function_guard (Bool us_private) Bool)

;; authcertvalid__post_axiom
  (assert true)

(declare-fun extractuser (us_private) (Array Int character))

(declare-fun extractuser__function_guard ((Array Int character)
  us_private) Bool)

;; extractuser__post_axiom
  (assert true)

(declare-sort statust 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (statust statust) Bool)

(declare-const dummy13 statust)

(declare-datatypes ()
((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___2__projection ((a statust__ref)) statust (statust__content
                                                                    a))

(define-fun dynamic_invariant4 ((temp___expr_1792 Int)
  (temp___is_init_1789 Bool) (temp___skip_constant_1790 Bool)
  (temp___do_toplevel_1791 Bool)) Bool (=>
                                       (or (= temp___is_init_1789 true)
                                       (<= 0 8)) (in_range10
                                       temp___expr_1792)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun adminopcanstart (us_private us_split_fields2 Int) Bool)

(declare-fun adminopcanstart__function_guard (Bool us_private
  us_split_fields2 Int) Bool)

(declare-fun ispresent1 (us_private) Bool)

(declare-fun ispresent__function_guard1 (Bool us_private) Bool)

;; adminopcanstart__post_axiom
  (assert true)

;; adminopcanstart__def_axiom
  (assert
  (forall ((admintoken__state us_private))
  (forall ((enclave__startadminactivity__theadmin__fields us_split_fields2))
  (forall ((enclave__status Int))
  (! (=
     (= (adminopcanstart admintoken__state
        enclave__startadminactivity__theadmin__fields enclave__status) true)
     (and
     (and
     (= (ispresent (mk___rep1 enclave__startadminactivity__theadmin__fields)) true)
     (= enclave__status 3)) (= (ispresent1 admintoken__state) true))) :pattern (
  (adminopcanstart admintoken__state
  enclave__startadminactivity__theadmin__fields enclave__status)) )))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant6 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant7 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant8 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; str_comp__post_axiom
  (assert true)

;; allowedop__post_axiom
  (assert true)

(define-fun dynamic_invariant9 ((temp___expr_228 Int)
  (temp___is_init_225 Bool) (temp___skip_constant_226 Bool)
  (temp___do_toplevel_227 Bool)) Bool (=>
                                      (or (= temp___is_init_225 true)
                                      (<= 0 78)) (in_range6 temp___expr_228)))

(define-fun dynamic_invariant10 ((temp___expr_234 Int)
  (temp___is_init_231 Bool) (temp___skip_constant_232 Bool)
  (temp___do_toplevel_233 Bool)) Bool (=>
                                      (or (= temp___is_init_231 true)
                                      (<= 1 78)) (in_range5 temp___expr_234)))

;; ispresent__post_axiom
  (assert true)

;; valid_numberlogentries__post_axiom
  (assert true)

(declare-const state us_private)

(declare-const theadmin__split_fields privileget)

(declare-const theadmin__split_fields1 opandnullt)

(declare-const status Int)

(declare-const keyeddatapresence Int)

(declare-const theop Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 (Array Int character))

(declare-const keyeddatapresence1 Int)

(declare-const keyeddata__split_fields datalengtht)

(declare-const keyeddata__split_fields1 (Array Int character))

(declare-const result Int)

(declare-const theop1 Int)

(declare-const result1 Int)

(declare-const status1 Int)

(declare-const state1 us_private)

(declare-const theadmin__split_fields2 privileget)

(declare-const theadmin__split_fields3 opandnullt)

(define-fun theadmin__split_fields4 () us_split_fields2 (mk___split_fields1
                                                        theadmin__split_fields2
                                                        theadmin__split_fields3))

(define-fun keyeddata__split_fields2 () us_split_fields (mk___split_fields
                                                        keyeddata__split_fields
                                                        keyeddata__split_fields1))

;; H
  (assert (in_range10 status))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (= (adminopcanstart state
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1)
     status) true)
  (= status 3))
  (= (ispresent
     (mk___rep1
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))) true))
  (not
  (= (isdoingop
     (mk___rep1
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))) true)))
  (=>
  (= (rolepresent
     (mk___rep1
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))) 1)
  (and (and (= (isgood state) true) (= (authcertvalid state) true))
  (= (theauthcertrole state) 1))))
  (=>
  (and
  (= (isdoingop
     (mk___rep1
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep1
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))) 3))
  (= (rolepresent
     (mk___rep1
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))) 1)))
  (=>
  (= (rolepresent
     (mk___rep1
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))) 1)
  (or
  (and
  (= (isdoingop
     (mk___rep1
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))) true)
  (= (thecurrentop
     (mk___rep1
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))) 3))
  (not
  (= (isdoingop
     (mk___rep1
     (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))) true))))))

;; H
  (assert (=> (<= 0 1) (in_range4 keyeddatapresence)))

;; H
  (assert (=> (<= 0 4) (in_range7 theop)))

;; H
  (assert (in_range4 keyeddatapresence1))

;; H
  (assert (= keyeddatapresence1 0))

;; H
  (assert
  (and
  (= o (opisavailable
       (mk___rep1
       (mk___split_fields1 theadmin__split_fields theadmin__split_fields1))
       (mk___rep keyeddata__split_fields2)))
  (and (in_range7 o)
  (ite (= (ite (exists ((op Int))
               (and (and (<= 1 op) (<= op 4))
               (and
               (and
               (= (str_comp (mk___rep keyeddata__split_fields2) op) true)
               (= (allowedop
                  (mk___rep1
                  (mk___split_fields1 theadmin__split_fields
                  theadmin__split_fields1)) op) true))
               (= o op))))
          true (= o 0)) true) (ite (= (ite (exists ((op Int))
                                           (and (and (<= 1 op) (<= op 4))
                                           (and
                                           (and
                                           (= (str_comp
                                              (mk___rep
                                              keyeddata__split_fields2) op) true)
                                           (= (allowedop
                                              (mk___rep1
                                              (mk___split_fields1
                                              theadmin__split_fields
                                              theadmin__split_fields1)) op) true))
                                           (= o op))))
                                      (= o 0) false) false) true false) false))))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref theop)))

;; H
  (assert (= theop1 o))

;; H
  (assert (not (= theop1 0)))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref status)))

;; H
  (assert (= status1 6))

;; H
  (assert (and (= o1 theop1) (in_range8 theop1)))

;; H
  (assert
  (and
  (and
  (and
  (= (rolepresent (mk___rep1 theadmin__split_fields4)) (rolepresent
                                                       (mk___rep1
                                                       (mk___split_fields1
                                                       theadmin__split_fields
                                                       theadmin__split_fields1))))
  (= (ispresent (mk___rep1 theadmin__split_fields4)) true))
  (= (isdoingop (mk___rep1 theadmin__split_fields4)) true))
  (= (thecurrentop (mk___rep1 theadmin__split_fields4)) o1)))

;; H
  (assert (= o2 (extractuser state)))

(assert
;; WP_parameter_def
 ;; File "enclave.adb", line 2122, characters 0-0
  (not (= (valid_numberlogentries state1) true)))
(check-sat)
(exit)
