(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type namecountt

predicate in_range2(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : namecountt, namecountt -> bool

logic dummy1 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep1 : namecountt -> int

logic of_rep1 : int -> namecountt

axiom inversion_axiom1 :
  (forall x:namecountt [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:namecountt [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic dummy2 : (int,character) farray

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,character) farray, (int,character) farray -> bool

type issueridt

predicate in_range3(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : issueridt, issueridt -> bool

logic dummy3 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep2 : issueridt -> int

logic of_rep2 : int -> issueridt

axiom inversion_axiom2 :
  (forall x:issueridt [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:issueridt [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((to_rep2(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep2(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep1(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep1(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq3(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep2(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep1(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep1(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq3(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size1({ us_split_fields1 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment1({
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : issueridt

logic dummy5 : namecountt

logic dummy6 : (int,character) farray

type issuert__ref = { issuert__content : us_rep
}

function issuert__ref___projection(a: issuert__ref) : us_rep =
  (a).issuert__content

type serialnumbert

predicate in_range4(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : serialnumbert, serialnumbert -> bool

logic dummy7 : serialnumbert

type serialnumbert__ref = { serialnumbert__content : serialnumbert
}

function serialnumbert__ref___projection(a: serialnumbert__ref) : serialnumbert =
  (a).serialnumbert__content

logic to_rep3 : serialnumbert -> int

logic of_rep3 : int -> serialnumbert

axiom inversion_axiom3 :
  (forall x:serialnumbert [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:serialnumbert [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields2 = { rec__certtypes__idt__issuer : us_rep;
rec__certtypes__idt__serialnumber : serialnumbert
}

function us_split_fields_Issuer__projection(a: us_split_fields2) : us_rep =
  (a).rec__certtypes__idt__issuer

function us_split_fields_SerialNumber__projection(a: us_split_fields2) : serialnumbert =
  (a).rec__certtypes__idt__serialnumber

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((bool_eq6(((a).us_split_fields3).rec__certtypes__idt__issuer,
  ((b).us_split_fields3).rec__certtypes__idt__issuer) = true) and
  (to_rep3(((a).us_split_fields3).rec__certtypes__idt__serialnumber) = to_rep3(((b).us_split_fields3).rec__certtypes__idt__serialnumber))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((bool_eq6(((a).us_split_fields3).rec__certtypes__idt__issuer,
  ((b).us_split_fields3).rec__certtypes__idt__issuer) = true) and
  (to_rep3(((a).us_split_fields3).rec__certtypes__idt__serialnumber) = to_rep3(((b).us_split_fields3).rec__certtypes__idt__serialnumber)))) ->
  (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__size2({ us_split_fields3 = { rec__certtypes__idt__issuer = {
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__certtypes__idt__issuer = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a; rec__cryptotypes__issuert__namelength =
  a1; rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

logic certtypes__idt__issuer__first__bit : int

logic certtypes__idt__issuer__last__bit : int

logic certtypes__idt__issuer__position : int

axiom certtypes__idt__issuer__first__bit_axiom :
  (0 <= certtypes__idt__issuer__first__bit)

axiom certtypes__idt__issuer__last__bit_axiom :
  (certtypes__idt__issuer__first__bit <  certtypes__idt__issuer__last__bit)

axiom certtypes__idt__issuer__position_axiom :
  (0 <= certtypes__idt__issuer__position)

logic certtypes__idt__serialnumber__first__bit : int

logic certtypes__idt__serialnumber__last__bit : int

logic certtypes__idt__serialnumber__position : int

axiom certtypes__idt__serialnumber__first__bit_axiom :
  (0 <= certtypes__idt__serialnumber__first__bit)

axiom certtypes__idt__serialnumber__last__bit_axiom :
  (certtypes__idt__serialnumber__first__bit <  certtypes__idt__serialnumber__last__bit)

axiom certtypes__idt__serialnumber__position_axiom :
  (0 <= certtypes__idt__serialnumber__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy8 : issueridt

logic dummy9 : namecountt

logic dummy10 : (int,character) farray

logic dummy11 : serialnumbert

type idt__ref = { idt__content : us_rep1
}

function idt__ref___projection(a: idt__ref) : us_rep1 = (a).idt__content

type descriptioni

predicate in_range5(x: int) = ((1 <= x) and (x <= 150))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : descriptioni, descriptioni -> bool

logic dummy12 : descriptioni

type descriptioni__ref = { descriptioni__content : descriptioni
}

function descriptioni__ref___projection(a: descriptioni__ref) : descriptioni =
  (a).descriptioni__content

logic nodescription : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic audittypes__nodescription__aggregate_def : int -> (int,character) farray

axiom def_axiom :
  (forall temp___139:int.
  (forall temp___140:int.
  ((audittypes__nodescription__aggregate_def(temp___139)[temp___140]) = of_rep(temp___139))))

type algorithmt

predicate in_range6(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : algorithmt, algorithmt -> bool

logic dummy13 : algorithmt

type algorithmt__ref = { algorithmt__content : algorithmt
}

function algorithmt__ref___projection(a: algorithmt__ref) : algorithmt =
  (a).algorithmt__content

logic to_rep4 : algorithmt -> int

logic of_rep4 : int -> algorithmt

axiom inversion_axiom4 :
  (forall x:algorithmt [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:algorithmt [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type yearst

predicate in_range7(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : yearst, yearst -> bool

logic dummy14 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep5 : yearst -> int

logic of_rep5 : int -> yearst

axiom inversion_axiom5 :
  (forall x:yearst [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:yearst [to_rep5(x)]. in_range7(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range7(x) ->
  (to_rep5(of_rep5(x)) = x)))

type monthst

predicate in_range8(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : monthst, monthst -> bool

logic dummy15 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep6 : monthst -> int

logic of_rep6 : int -> monthst

axiom inversion_axiom6 :
  (forall x:monthst [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 : (forall x:monthst [to_rep6(x)]. in_range8(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range8(x) ->
  (to_rep6(of_rep6(x)) = x)))

type dayst

predicate in_range9(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : dayst, dayst -> bool

logic dummy16 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep7 : dayst -> int

logic of_rep7 : int -> dayst

axiom inversion_axiom7 :
  (forall x:dayst [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 : (forall x:dayst [to_rep7(x)]. in_range9(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range9(x) ->
  (to_rep7(of_rep7(x)) = x)))

type millisecst

predicate in_range10(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq12 : millisecst, millisecst -> bool

logic dummy17 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep8 : millisecst -> int

logic of_rep8 : int -> millisecst

axiom inversion_axiom8 :
  (forall x:millisecst [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 :
  (forall x:millisecst [to_rep8(x)]. in_range10(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range10(x) ->
  (to_rep8(of_rep8(x)) = x)))

type us_split_fields4 = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields4) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields4) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields4) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields4) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_7__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep_7__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq15 : us_rep2, us_rep2 -> bool

axiom bool_eq_def14 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq15(a, b)].
  ((((((to_rep5(((a).us_split_fields5).rec__clock__timet__year) = to_rep5(((b).us_split_fields5).rec__clock__timet__year)) and
  (to_rep6(((a).us_split_fields5).rec__clock__timet__month) = to_rep6(((b).us_split_fields5).rec__clock__timet__month))) and
  (to_rep7(((a).us_split_fields5).rec__clock__timet__day) = to_rep7(((b).us_split_fields5).rec__clock__timet__day))) and
  (to_rep8(((a).us_split_fields5).rec__clock__timet__millisec) = to_rep8(((b).us_split_fields5).rec__clock__timet__millisec))) ->
  (bool_eq15(a, b) = true)) and
  ((not ((((to_rep5(((a).us_split_fields5).rec__clock__timet__year) = to_rep5(((b).us_split_fields5).rec__clock__timet__year)) and
  (to_rep6(((a).us_split_fields5).rec__clock__timet__month) = to_rep6(((b).us_split_fields5).rec__clock__timet__month))) and
  (to_rep7(((a).us_split_fields5).rec__clock__timet__day) = to_rep7(((b).us_split_fields5).rec__clock__timet__day))) and
  (to_rep8(((a).us_split_fields5).rec__clock__timet__millisec) = to_rep8(((b).us_split_fields5).rec__clock__timet__millisec)))) ->
  (bool_eq15(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size3({ us_split_fields5 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment3({ us_split_fields5 = { rec__clock__timet__year =
  a; rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq13 : us_rep2, us_rep2 -> bool

logic dummy18 : yearst

logic dummy19 : monthst

logic dummy20 : dayst

logic dummy21 : millisecst

type timet__ref = { timet__content : us_rep2
}

function timet__ref___projection(a: timet__ref) : us_rep2 =
  (a).timet__content

type us_split_fields6 = { rec__cert__contentst__id : us_rep1;
rec__cert__contentst__notbefore : us_rep2; rec__cert__contentst__notafter :
us_rep2; rec__cert__contentst__mechanism : algorithmt
}

function us_split_fields_ID3__projection(a: us_split_fields6) : us_rep1 =
  (a).rec__cert__contentst__id

function us_split_fields_NotBefore__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__cert__contentst__notbefore

function us_split_fields_NotAfter__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__cert__contentst__notafter

function us_split_fields_Mechanism__projection(a: us_split_fields6) : algorithmt =
  (a).rec__cert__contentst__mechanism

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref_10__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep_11__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq16 : us_rep3, us_rep3 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq16(a, b)].
  ((((((bool_eq8(((a).us_split_fields7).rec__cert__contentst__id,
  ((b).us_split_fields7).rec__cert__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields7).rec__cert__contentst__notbefore,
  ((b).us_split_fields7).rec__cert__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields7).rec__cert__contentst__notafter,
  ((b).us_split_fields7).rec__cert__contentst__notafter) = true)) and
  (to_rep4(((a).us_split_fields7).rec__cert__contentst__mechanism) = to_rep4(((b).us_split_fields7).rec__cert__contentst__mechanism))) ->
  (bool_eq16(a, b) = true)) and
  ((not ((((bool_eq8(((a).us_split_fields7).rec__cert__contentst__id,
  ((b).us_split_fields7).rec__cert__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields7).rec__cert__contentst__notbefore,
  ((b).us_split_fields7).rec__cert__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields7).rec__cert__contentst__notafter,
  ((b).us_split_fields7).rec__cert__contentst__notafter) = true)) and
  (to_rep4(((a).us_split_fields7).rec__cert__contentst__mechanism) = to_rep4(((b).us_split_fields7).rec__cert__contentst__mechanism)))) ->
  (bool_eq16(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep3. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep3. (0 <= object__alignment4(a)))

logic cert__contentst__id__first__bit : int

logic cert__contentst__id__last__bit : int

logic cert__contentst__id__position : int

axiom cert__contentst__id__first__bit_axiom :
  (0 <= cert__contentst__id__first__bit)

axiom cert__contentst__id__last__bit_axiom :
  (cert__contentst__id__first__bit <  cert__contentst__id__last__bit)

axiom cert__contentst__id__position_axiom :
  (0 <= cert__contentst__id__position)

logic cert__contentst__notbefore__first__bit : int

logic cert__contentst__notbefore__last__bit : int

logic cert__contentst__notbefore__position : int

axiom cert__contentst__notbefore__first__bit_axiom :
  (0 <= cert__contentst__notbefore__first__bit)

axiom cert__contentst__notbefore__last__bit_axiom :
  (cert__contentst__notbefore__first__bit <  cert__contentst__notbefore__last__bit)

axiom cert__contentst__notbefore__position_axiom :
  (0 <= cert__contentst__notbefore__position)

logic cert__contentst__notafter__first__bit : int

logic cert__contentst__notafter__last__bit : int

logic cert__contentst__notafter__position : int

axiom cert__contentst__notafter__first__bit_axiom :
  (0 <= cert__contentst__notafter__first__bit)

axiom cert__contentst__notafter__last__bit_axiom :
  (cert__contentst__notafter__first__bit <  cert__contentst__notafter__last__bit)

axiom cert__contentst__notafter__position_axiom :
  (0 <= cert__contentst__notafter__position)

logic cert__contentst__mechanism__first__bit : int

logic cert__contentst__mechanism__last__bit : int

logic cert__contentst__mechanism__position : int

axiom cert__contentst__mechanism__first__bit_axiom :
  (0 <= cert__contentst__mechanism__first__bit)

axiom cert__contentst__mechanism__last__bit_axiom :
  (cert__contentst__mechanism__first__bit <  cert__contentst__mechanism__last__bit)

axiom cert__contentst__mechanism__position_axiom :
  (0 <= cert__contentst__mechanism__position)

logic user_eq14 : us_rep3, us_rep3 -> bool

logic dummy22 : issueridt

logic dummy23 : namecountt

logic dummy24 : (int,character) farray

logic dummy25 : serialnumbert

logic dummy26 : yearst

logic dummy27 : monthst

logic dummy28 : dayst

logic dummy29 : millisecst

logic dummy30 : yearst

logic dummy31 : monthst

logic dummy32 : dayst

logic dummy33 : millisecst

logic dummy34 : algorithmt

type contentst__ref = { contentst__content : us_rep3
}

function contentst__ref___projection(a: contentst__ref) : us_rep3 =
  (a).contentst__content

logic theid : us_rep3 -> us_rep1

logic theid__function_guard : us_rep1, us_rep3 -> prop

axiom theid__post_axiom : true

logic iscurrent : us_rep3, us_private -> bool

logic iscurrent__function_guard : bool, us_rep3, us_private -> prop

axiom iscurrent__post_axiom : true

type keyidt

predicate in_range11(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq15 : keyidt, keyidt -> bool

logic dummy35 : keyidt

type keyidt__ref = { keyidt__content : keyidt
}

function keyidt__ref___projection(a: keyidt__ref) : keyidt =
  (a).keyidt__content

logic to_rep9 : keyidt -> int

logic of_rep9 : int -> keyidt

axiom inversion_axiom9 :
  (forall x:keyidt [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 : (forall x:keyidt [to_rep9(x)]. in_range11(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range11(x) ->
  (to_rep9(of_rep9(x)) = x)))

type keylengtht

predicate in_range12(x: int) = ((0 <= x) and (x <= 128))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq16 : keylengtht, keylengtht -> bool

logic dummy36 : keylengtht

type keylengtht__ref = { keylengtht__content : keylengtht
}

function keylengtht__ref___projection(a: keylengtht__ref) : keylengtht =
  (a).keylengtht__content

logic to_rep10 : keylengtht -> int

logic of_rep10 : int -> keylengtht

axiom inversion_axiom10 :
  (forall x:keylengtht [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:keylengtht [to_rep10(x)]. in_range12(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range12(x) ->
  (to_rep10(of_rep10(x)) = x)))

type us_split_fields8 = { rec__cryptotypes__keypartt__algorithmid :
algorithmt; rec__cryptotypes__keypartt__keyid : keyidt;
rec__cryptotypes__keypartt__keylength : keylengtht
}

function us_split_fields_AlgorithmID__projection(a: us_split_fields8) : algorithmt =
  (a).rec__cryptotypes__keypartt__algorithmid

function us_split_fields_KeyID__projection(a: us_split_fields8) : keyidt =
  (a).rec__cryptotypes__keypartt__keyid

function us_split_fields_KeyLength__projection(a: us_split_fields8) : keylengtht =
  (a).rec__cryptotypes__keypartt__keylength

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8
}

function us_rep_2__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq19 : us_rep4, us_rep4 -> bool

axiom bool_eq_def18 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq19(a, b)].
  (((((to_rep4(((a).us_split_fields9).rec__cryptotypes__keypartt__algorithmid) = to_rep4(((b).us_split_fields9).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep9(((a).us_split_fields9).rec__cryptotypes__keypartt__keyid) = to_rep9(((b).us_split_fields9).rec__cryptotypes__keypartt__keyid))) and
  (to_rep10(((a).us_split_fields9).rec__cryptotypes__keypartt__keylength) = to_rep10(((b).us_split_fields9).rec__cryptotypes__keypartt__keylength))) ->
  (bool_eq19(a, b) = true)) and
  ((not (((to_rep4(((a).us_split_fields9).rec__cryptotypes__keypartt__algorithmid) = to_rep4(((b).us_split_fields9).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep9(((a).us_split_fields9).rec__cryptotypes__keypartt__keyid) = to_rep9(((b).us_split_fields9).rec__cryptotypes__keypartt__keyid))) and
  (to_rep10(((a).us_split_fields9).rec__cryptotypes__keypartt__keylength) = to_rep10(((b).us_split_fields9).rec__cryptotypes__keypartt__keylength)))) ->
  (bool_eq19(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep4 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep4 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__size5({ us_split_fields9 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__alignment5({ us_split_fields9 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

logic cryptotypes__keypartt__algorithmid__first__bit : int

logic cryptotypes__keypartt__algorithmid__last__bit : int

logic cryptotypes__keypartt__algorithmid__position : int

axiom cryptotypes__keypartt__algorithmid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__first__bit)

axiom cryptotypes__keypartt__algorithmid__last__bit_axiom :
  (cryptotypes__keypartt__algorithmid__first__bit <  cryptotypes__keypartt__algorithmid__last__bit)

axiom cryptotypes__keypartt__algorithmid__position_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__position)

logic cryptotypes__keypartt__keyid__first__bit : int

logic cryptotypes__keypartt__keyid__last__bit : int

logic cryptotypes__keypartt__keyid__position : int

axiom cryptotypes__keypartt__keyid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keyid__first__bit)

axiom cryptotypes__keypartt__keyid__last__bit_axiom :
  (cryptotypes__keypartt__keyid__first__bit <  cryptotypes__keypartt__keyid__last__bit)

axiom cryptotypes__keypartt__keyid__position_axiom :
  (0 <= cryptotypes__keypartt__keyid__position)

logic cryptotypes__keypartt__keylength__first__bit : int

logic cryptotypes__keypartt__keylength__last__bit : int

logic cryptotypes__keypartt__keylength__position : int

axiom cryptotypes__keypartt__keylength__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keylength__first__bit)

axiom cryptotypes__keypartt__keylength__last__bit_axiom :
  (cryptotypes__keypartt__keylength__first__bit <  cryptotypes__keypartt__keylength__last__bit)

axiom cryptotypes__keypartt__keylength__position_axiom :
  (0 <= cryptotypes__keypartt__keylength__position)

logic user_eq17 : us_rep4, us_rep4 -> bool

logic dummy37 : algorithmt

logic dummy38 : keyidt

logic dummy39 : keylengtht

type keypartt__ref = { keypartt__content : us_rep4
}

function keypartt__ref___projection(a: keypartt__ref) : us_rep4 =
  (a).keypartt__content

type us_split_fields10 = { rec__cert__id__contentst__id : us_rep1;
rec__cert__id__contentst__notbefore : us_rep2;
rec__cert__id__contentst__notafter : us_rep2;
rec__cert__id__contentst__mechanism : algorithmt;
rec__cert__id__contentst__subject : us_rep;
rec__cert__id__contentst__subjectpublickey : us_rep4
}

function us_split_fields_ID4__projection(a: us_split_fields10) : us_rep1 =
  (a).rec__cert__id__contentst__id

function us_split_fields_NotBefore2__projection(a: us_split_fields10) : us_rep2 =
  (a).rec__cert__id__contentst__notbefore

function us_split_fields_NotAfter2__projection(a: us_split_fields10) : us_rep2 =
  (a).rec__cert__id__contentst__notafter

function us_split_fields_Mechanism2__projection(a: us_split_fields10) : algorithmt =
  (a).rec__cert__id__contentst__mechanism

function us_split_fields_Subject__projection(a: us_split_fields10) : us_rep =
  (a).rec__cert__id__contentst__subject

function us_split_fields_SubjectPublicKey__projection(a: us_split_fields10) : us_rep4 =
  (a).rec__cert__id__contentst__subjectpublickey

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref_11__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_fields11 : us_split_fields10
}

function us_rep_12__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq20 : us_rep5, us_rep5 -> bool

axiom bool_eq_def19 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq20(a, b)].
  ((((((((bool_eq8(((a).us_split_fields11).rec__cert__id__contentst__id,
  ((b).us_split_fields11).rec__cert__id__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields11).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields11).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields11).rec__cert__id__contentst__notafter,
  ((b).us_split_fields11).rec__cert__id__contentst__notafter) = true)) and
  (to_rep4(((a).us_split_fields11).rec__cert__id__contentst__mechanism) = to_rep4(((b).us_split_fields11).rec__cert__id__contentst__mechanism))) and
  (bool_eq6(((a).us_split_fields11).rec__cert__id__contentst__subject,
  ((b).us_split_fields11).rec__cert__id__contentst__subject) = true)) and
  (bool_eq19(((a).us_split_fields11).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields11).rec__cert__id__contentst__subjectpublickey) = true)) ->
  (bool_eq20(a, b) = true)) and
  ((not ((((((bool_eq8(((a).us_split_fields11).rec__cert__id__contentst__id,
  ((b).us_split_fields11).rec__cert__id__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields11).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields11).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields11).rec__cert__id__contentst__notafter,
  ((b).us_split_fields11).rec__cert__id__contentst__notafter) = true)) and
  (to_rep4(((a).us_split_fields11).rec__cert__id__contentst__mechanism) = to_rep4(((b).us_split_fields11).rec__cert__id__contentst__mechanism))) and
  (bool_eq6(((a).us_split_fields11).rec__cert__id__contentst__subject,
  ((b).us_split_fields11).rec__cert__id__contentst__subject) = true)) and
  (bool_eq19(((a).us_split_fields11).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields11).rec__cert__id__contentst__subjectpublickey) = true))) ->
  (bool_eq20(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep5 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep5 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (forall a:us_rep5. (0 <= object__size6(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:us_rep5. (0 <= object__alignment6(a)))

logic cert__id__contentst__id__first__bit : int

logic cert__id__contentst__id__last__bit : int

logic cert__id__contentst__id__position : int

axiom cert__id__contentst__id__first__bit_axiom :
  (0 <= cert__id__contentst__id__first__bit)

axiom cert__id__contentst__id__last__bit_axiom :
  (cert__id__contentst__id__first__bit <  cert__id__contentst__id__last__bit)

axiom cert__id__contentst__id__position_axiom :
  (0 <= cert__id__contentst__id__position)

logic cert__id__contentst__notbefore__first__bit : int

logic cert__id__contentst__notbefore__last__bit : int

logic cert__id__contentst__notbefore__position : int

axiom cert__id__contentst__notbefore__first__bit_axiom :
  (0 <= cert__id__contentst__notbefore__first__bit)

axiom cert__id__contentst__notbefore__last__bit_axiom :
  (cert__id__contentst__notbefore__first__bit <  cert__id__contentst__notbefore__last__bit)

axiom cert__id__contentst__notbefore__position_axiom :
  (0 <= cert__id__contentst__notbefore__position)

logic cert__id__contentst__notafter__first__bit : int

logic cert__id__contentst__notafter__last__bit : int

logic cert__id__contentst__notafter__position : int

axiom cert__id__contentst__notafter__first__bit_axiom :
  (0 <= cert__id__contentst__notafter__first__bit)

axiom cert__id__contentst__notafter__last__bit_axiom :
  (cert__id__contentst__notafter__first__bit <  cert__id__contentst__notafter__last__bit)

axiom cert__id__contentst__notafter__position_axiom :
  (0 <= cert__id__contentst__notafter__position)

logic cert__id__contentst__mechanism__first__bit : int

logic cert__id__contentst__mechanism__last__bit : int

logic cert__id__contentst__mechanism__position : int

axiom cert__id__contentst__mechanism__first__bit_axiom :
  (0 <= cert__id__contentst__mechanism__first__bit)

axiom cert__id__contentst__mechanism__last__bit_axiom :
  (cert__id__contentst__mechanism__first__bit <  cert__id__contentst__mechanism__last__bit)

axiom cert__id__contentst__mechanism__position_axiom :
  (0 <= cert__id__contentst__mechanism__position)

logic cert__id__contentst__subject__first__bit : int

logic cert__id__contentst__subject__last__bit : int

logic cert__id__contentst__subject__position : int

axiom cert__id__contentst__subject__first__bit_axiom :
  (0 <= cert__id__contentst__subject__first__bit)

axiom cert__id__contentst__subject__last__bit_axiom :
  (cert__id__contentst__subject__first__bit <  cert__id__contentst__subject__last__bit)

axiom cert__id__contentst__subject__position_axiom :
  (0 <= cert__id__contentst__subject__position)

logic cert__id__contentst__subjectpublickey__first__bit : int

logic cert__id__contentst__subjectpublickey__last__bit : int

logic cert__id__contentst__subjectpublickey__position : int

axiom cert__id__contentst__subjectpublickey__first__bit_axiom :
  (0 <= cert__id__contentst__subjectpublickey__first__bit)

axiom cert__id__contentst__subjectpublickey__last__bit_axiom :
  (cert__id__contentst__subjectpublickey__first__bit <  cert__id__contentst__subjectpublickey__last__bit)

axiom cert__id__contentst__subjectpublickey__position_axiom :
  (0 <= cert__id__contentst__subjectpublickey__position)

logic user_eq18 : us_rep5, us_rep5 -> bool

logic dummy40 : issueridt

logic dummy41 : namecountt

logic dummy42 : (int,character) farray

logic dummy43 : serialnumbert

logic dummy44 : yearst

logic dummy45 : monthst

logic dummy46 : dayst

logic dummy47 : millisecst

logic dummy48 : yearst

logic dummy49 : monthst

logic dummy50 : dayst

logic dummy51 : millisecst

logic dummy52 : algorithmt

logic dummy53 : issueridt

logic dummy54 : namecountt

logic dummy55 : (int,character) farray

logic dummy56 : algorithmt

logic dummy57 : keyidt

logic dummy58 : keylengtht

type contentst__ref1 = { contentst__content1 : us_rep5
}

function contentst__ref_2__projection(a: contentst__ref1) : us_rep5 =
  (a).contentst__content1

logic cert_id_to_cert : us_rep5 -> us_rep3

logic cert_id_to_cert__function_guard : us_rep3, us_rep5 -> prop

axiom cert_id_to_cert__post_axiom : true

type us_split_fields12 = { rec__cert__attr__contentst__id : us_rep1;
rec__cert__attr__contentst__notbefore : us_rep2;
rec__cert__attr__contentst__notafter : us_rep2;
rec__cert__attr__contentst__mechanism : algorithmt;
rec__cert__attr__contentst__basecertid : us_rep1
}

function us_split_fields_ID5__projection(a: us_split_fields12) : us_rep1 =
  (a).rec__cert__attr__contentst__id

function us_split_fields_NotBefore3__projection(a: us_split_fields12) : us_rep2 =
  (a).rec__cert__attr__contentst__notbefore

function us_split_fields_NotAfter3__projection(a: us_split_fields12) : us_rep2 =
  (a).rec__cert__attr__contentst__notafter

function us_split_fields_Mechanism3__projection(a: us_split_fields12) : algorithmt =
  (a).rec__cert__attr__contentst__mechanism

function us_split_fields_BaseCertID__projection(a: us_split_fields12) : us_rep1 =
  (a).rec__cert__attr__contentst__basecertid

type us_split_fields__ref6 = { us_split_fields__content6 : us_split_fields12
}

function us_split_fields__ref_12__projection(a: us_split_fields__ref6) : us_split_fields12 =
  (a).us_split_fields__content6

type us_rep6 = { us_split_fields13 : us_split_fields12
}

function us_rep_13__projection(a: us_rep6) : us_split_fields12 =
  (a).us_split_fields13

logic bool_eq21 : us_rep6, us_rep6 -> bool

axiom bool_eq_def20 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq21(a, b)].
  (((((((bool_eq8(((a).us_split_fields13).rec__cert__attr__contentst__id,
  ((b).us_split_fields13).rec__cert__attr__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields13).rec__cert__attr__contentst__notbefore,
  ((b).us_split_fields13).rec__cert__attr__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields13).rec__cert__attr__contentst__notafter,
  ((b).us_split_fields13).rec__cert__attr__contentst__notafter) = true)) and
  (to_rep4(((a).us_split_fields13).rec__cert__attr__contentst__mechanism) = to_rep4(((b).us_split_fields13).rec__cert__attr__contentst__mechanism))) and
  (bool_eq8(((a).us_split_fields13).rec__cert__attr__contentst__basecertid,
  ((b).us_split_fields13).rec__cert__attr__contentst__basecertid) = true)) ->
  (bool_eq21(a, b) = true)) and
  ((not (((((bool_eq8(((a).us_split_fields13).rec__cert__attr__contentst__id,
  ((b).us_split_fields13).rec__cert__attr__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields13).rec__cert__attr__contentst__notbefore,
  ((b).us_split_fields13).rec__cert__attr__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields13).rec__cert__attr__contentst__notafter,
  ((b).us_split_fields13).rec__cert__attr__contentst__notafter) = true)) and
  (to_rep4(((a).us_split_fields13).rec__cert__attr__contentst__mechanism) = to_rep4(((b).us_split_fields13).rec__cert__attr__contentst__mechanism))) and
  (bool_eq8(((a).us_split_fields13).rec__cert__attr__contentst__basecertid,
  ((b).us_split_fields13).rec__cert__attr__contentst__basecertid) = true))) ->
  (bool_eq21(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep6 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep6 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (forall a:us_rep6. (0 <= object__size7(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:us_rep6. (0 <= object__alignment7(a)))

logic cert__attr__contentst__id__first__bit : int

logic cert__attr__contentst__id__last__bit : int

logic cert__attr__contentst__id__position : int

axiom cert__attr__contentst__id__first__bit_axiom :
  (0 <= cert__attr__contentst__id__first__bit)

axiom cert__attr__contentst__id__last__bit_axiom :
  (cert__attr__contentst__id__first__bit <  cert__attr__contentst__id__last__bit)

axiom cert__attr__contentst__id__position_axiom :
  (0 <= cert__attr__contentst__id__position)

logic cert__attr__contentst__notbefore__first__bit : int

logic cert__attr__contentst__notbefore__last__bit : int

logic cert__attr__contentst__notbefore__position : int

axiom cert__attr__contentst__notbefore__first__bit_axiom :
  (0 <= cert__attr__contentst__notbefore__first__bit)

axiom cert__attr__contentst__notbefore__last__bit_axiom :
  (cert__attr__contentst__notbefore__first__bit <  cert__attr__contentst__notbefore__last__bit)

axiom cert__attr__contentst__notbefore__position_axiom :
  (0 <= cert__attr__contentst__notbefore__position)

logic cert__attr__contentst__notafter__first__bit : int

logic cert__attr__contentst__notafter__last__bit : int

logic cert__attr__contentst__notafter__position : int

axiom cert__attr__contentst__notafter__first__bit_axiom :
  (0 <= cert__attr__contentst__notafter__first__bit)

axiom cert__attr__contentst__notafter__last__bit_axiom :
  (cert__attr__contentst__notafter__first__bit <  cert__attr__contentst__notafter__last__bit)

axiom cert__attr__contentst__notafter__position_axiom :
  (0 <= cert__attr__contentst__notafter__position)

logic cert__attr__contentst__mechanism__first__bit : int

logic cert__attr__contentst__mechanism__last__bit : int

logic cert__attr__contentst__mechanism__position : int

axiom cert__attr__contentst__mechanism__first__bit_axiom :
  (0 <= cert__attr__contentst__mechanism__first__bit)

axiom cert__attr__contentst__mechanism__last__bit_axiom :
  (cert__attr__contentst__mechanism__first__bit <  cert__attr__contentst__mechanism__last__bit)

axiom cert__attr__contentst__mechanism__position_axiom :
  (0 <= cert__attr__contentst__mechanism__position)

logic cert__attr__contentst__basecertid__first__bit : int

logic cert__attr__contentst__basecertid__last__bit : int

logic cert__attr__contentst__basecertid__position : int

axiom cert__attr__contentst__basecertid__first__bit_axiom :
  (0 <= cert__attr__contentst__basecertid__first__bit)

axiom cert__attr__contentst__basecertid__last__bit_axiom :
  (cert__attr__contentst__basecertid__first__bit <  cert__attr__contentst__basecertid__last__bit)

axiom cert__attr__contentst__basecertid__position_axiom :
  (0 <= cert__attr__contentst__basecertid__position)

logic user_eq19 : us_rep6, us_rep6 -> bool

logic dummy59 : issueridt

logic dummy60 : namecountt

logic dummy61 : (int,character) farray

logic dummy62 : serialnumbert

logic dummy63 : yearst

logic dummy64 : monthst

logic dummy65 : dayst

logic dummy66 : millisecst

logic dummy67 : yearst

logic dummy68 : monthst

logic dummy69 : dayst

logic dummy70 : millisecst

logic dummy71 : algorithmt

logic dummy72 : issueridt

logic dummy73 : namecountt

logic dummy74 : (int,character) farray

logic dummy75 : serialnumbert

type contentst__ref2 = { contentst__content2 : us_rep6
}

function contentst__ref_3__projection(a: contentst__ref2) : us_rep6 =
  (a).contentst__content2

logic thebasecert : us_rep6 -> us_rep1

logic thebasecert__function_guard : us_rep1, us_rep6 -> prop

axiom thebasecert__post_axiom : true

type fart

predicate in_range13(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq20 : fart, fart -> bool

logic dummy76 : fart

type fart__ref = { fart__content : fart
}

function fart__ref___projection(a: fart__ref) : fart = (a).fart__content

logic to_rep11 : fart -> int

logic of_rep11 : int -> fart

axiom inversion_axiom11 :
  (forall x:fart [to_rep11(x)]. (of_rep11(to_rep11(x)) = x))

axiom range_axiom11 : (forall x:fart [to_rep11(x)]. in_range13(to_rep11(x)))

axiom coerce_axiom11 :
  (forall x:int [to_rep11(of_rep11(x))]. (in_range13(x) ->
  (to_rep11(of_rep11(x)) = x)))

type bytet

predicate in_range14(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def22 :
  (forall x:int. forall y:int [bool_eq23(x, y)]. (((x = y) -> (bool_eq23(x,
  y) = true)) and ((not (x = y)) -> (bool_eq23(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq21 : bytet, bytet -> bool

logic dummy77 : bytet

type bytet__ref = { bytet__content : bytet
}

function bytet__ref___projection(a: bytet__ref) : bytet = (a).bytet__content

logic to_rep12 : bytet -> int

logic of_rep12 : int -> bytet

axiom inversion_axiom12 :
  (forall x:bytet [to_rep12(x)]. (of_rep12(to_rep12(x)) = x))

axiom range_axiom12 : (forall x:bytet [to_rep12(x)]. in_range14(to_rep12(x)))

axiom coerce_axiom12 :
  (forall x:int [to_rep12(of_rep12(x))]. (in_range14(x) ->
  (to_rep12(of_rep12(x)) = x)))

type map__ref1 = { map__content1 : (int,bytet) farray
}

logic slide1 : (int,bytet) farray, int, int -> (int,bytet) farray

axiom slide_eq1 :
  (forall a:(int,bytet) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,bytet) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> (int,bytet) farray

axiom concat_def1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : bytet, int -> (int,bytet) farray

axiom singleton_def1 :
  (forall v:bytet.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq24 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> bool

axiom bool_eq_def23 :
  (forall a:(int,bytet) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bytet) farray. forall b__first:int. forall b__last:int
  [bool_eq24(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_144:int. ((((a__first <= temp___idx_144) and
  (temp___idx_144 <= a__last)) and
  (to_rep12((a[temp___idx_144])) = to_rep12((b[((b__first - a__first) + temp___idx_144)])))) or
  (not ((a__first <= temp___idx_144) and (temp___idx_144 <= a__last)))))) ->
  (bool_eq24(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_144:int. (((a__first <= temp___idx_144) and
  (temp___idx_144 <= a__last)) ->
  (to_rep12((a[temp___idx_144])) = to_rep12((b[((b__first - a__first) + temp___idx_144)]))))))) ->
  (bool_eq24(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq24(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_144:int. (((a__first <= temp___idx_144) and
  (temp___idx_144 <= a__last)) ->
  (to_rep12((a[temp___idx_144])) = to_rep12((b[((b__first - a__first) + temp___idx_144)])))))))))

logic compare1 : (int,bytet) farray, int, int, (int,bytet) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq24(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq24(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep12((a[(i + 1)])) <  to_rep12((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,bytet) farray. forall b:(int,bytet) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq24(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep12((b[(i + 1)])) <  to_rep12((a[(j + 1)]))))))))))))

logic dummy78 : (int,bytet) farray

logic value__size8 : int

logic object__size8 : (int,bytet) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,bytet) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,bytet) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,bytet) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,bytet) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,bytet) farray. (0 <= object__alignment8(a)))

logic user_eq22 : (int,bytet) farray, (int,bytet) farray -> bool

type templatelengtht

predicate in_range15(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq25 : int, int -> bool

axiom bool_eq_def24 :
  (forall x:int. forall y:int [bool_eq25(x, y)]. (((x = y) -> (bool_eq25(x,
  y) = true)) and ((not (x = y)) -> (bool_eq25(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq23 : templatelengtht, templatelengtht -> bool

logic dummy79 : templatelengtht

type templatelengtht__ref = { templatelengtht__content : templatelengtht
}

function templatelengtht__ref___projection(a: templatelengtht__ref) : templatelengtht =
  (a).templatelengtht__content

logic to_rep13 : templatelengtht -> int

logic of_rep13 : int -> templatelengtht

axiom inversion_axiom13 :
  (forall x:templatelengtht [to_rep13(x)]. (of_rep13(to_rep13(x)) = x))

axiom range_axiom13 :
  (forall x:templatelengtht [to_rep13(x)]. in_range15(to_rep13(x)))

axiom coerce_axiom13 :
  (forall x:int [to_rep13(of_rep13(x))]. (in_range15(x) ->
  (to_rep13(of_rep13(x)) = x)))

logic dummy80 : (int,character) farray

logic value__size9 : int

logic object__size9 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment9 : int

logic object__alignment9 : (int,character) farray -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:(int,character) farray. (0 <= object__size9(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:(int,character) farray. (0 <= object__alignment9(a)))

logic user_eq24 : (int,character) farray, (int,character) farray -> bool

type us_split_fields14 = { rec__iandatypes__templatet__length :
templatelengtht; rec__iandatypes__templatet__requiredmaxfar : fart;
rec__iandatypes__templatet__id : (int,character) farray;
rec__iandatypes__templatet__pad : (int,bytet) farray
}

function us_split_fields_Length__projection(a: us_split_fields14) : templatelengtht =
  (a).rec__iandatypes__templatet__length

function us_split_fields_RequiredMaxFAR__projection(a: us_split_fields14) : fart =
  (a).rec__iandatypes__templatet__requiredmaxfar

function us_split_fields_ID2__projection(a: us_split_fields14) : (int,character) farray =
  (a).rec__iandatypes__templatet__id

function us_split_fields_Pad__projection(a: us_split_fields14) : (int,bytet) farray =
  (a).rec__iandatypes__templatet__pad

type us_split_fields__ref7 = { us_split_fields__content7 : us_split_fields14
}

function us_split_fields__ref_9__projection(a: us_split_fields__ref7) : us_split_fields14 =
  (a).us_split_fields__content7

type us_rep7 = { us_split_fields15 : us_split_fields14
}

function us_rep_10__projection(a: us_rep7) : us_split_fields14 =
  (a).us_split_fields15

logic bool_eq26 : us_rep7, us_rep7 -> bool

axiom bool_eq_def25 :
  (forall a:us_rep7. forall b:us_rep7 [bool_eq26(a, b)].
  ((((((to_rep13(((a).us_split_fields15).rec__iandatypes__templatet__length) = to_rep13(((b).us_split_fields15).rec__iandatypes__templatet__length)) and
  (to_rep11(((a).us_split_fields15).rec__iandatypes__templatet__requiredmaxfar) = to_rep11(((b).us_split_fields15).rec__iandatypes__templatet__requiredmaxfar))) and
  (bool_eq3(((a).us_split_fields15).rec__iandatypes__templatet__id, 1, 40,
  ((b).us_split_fields15).rec__iandatypes__templatet__id, 1, 40) = true)) and
  (bool_eq24(((a).us_split_fields15).rec__iandatypes__templatet__pad, 1, 452,
  ((b).us_split_fields15).rec__iandatypes__templatet__pad, 1,
  452) = true)) -> (bool_eq26(a, b) = true)) and
  ((not ((((to_rep13(((a).us_split_fields15).rec__iandatypes__templatet__length) = to_rep13(((b).us_split_fields15).rec__iandatypes__templatet__length)) and
  (to_rep11(((a).us_split_fields15).rec__iandatypes__templatet__requiredmaxfar) = to_rep11(((b).us_split_fields15).rec__iandatypes__templatet__requiredmaxfar))) and
  (bool_eq3(((a).us_split_fields15).rec__iandatypes__templatet__id, 1, 40,
  ((b).us_split_fields15).rec__iandatypes__templatet__id, 1, 40) = true)) and
  (bool_eq24(((a).us_split_fields15).rec__iandatypes__templatet__pad, 1, 452,
  ((b).us_split_fields15).rec__iandatypes__templatet__pad, 1,
  452) = true))) -> (bool_eq26(a, b) = false))))

logic value__size10 : int

logic object__size10 : us_rep7 -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep7 -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:templatelengtht. forall a1:fart.
  forall a2:(int,character) farray. forall a3:(int,bytet) farray.
  (0 <= object__size10({ us_split_fields15 = {
  rec__iandatypes__templatet__length = a;
  rec__iandatypes__templatet__requiredmaxfar = a1;
  rec__iandatypes__templatet__id = a2; rec__iandatypes__templatet__pad = a3 }
  })))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:templatelengtht. forall a1:fart.
  forall a2:(int,character) farray. forall a3:(int,bytet) farray.
  (0 <= object__alignment10({ us_split_fields15 = {
  rec__iandatypes__templatet__length = a;
  rec__iandatypes__templatet__requiredmaxfar = a1;
  rec__iandatypes__templatet__id = a2; rec__iandatypes__templatet__pad = a3 }
  })))

logic iandatypes__templatet__length__first__bit : int

logic iandatypes__templatet__length__last__bit : int

logic iandatypes__templatet__length__position : int

axiom iandatypes__templatet__length__first__bit_axiom :
  (0 <= iandatypes__templatet__length__first__bit)

axiom iandatypes__templatet__length__last__bit_axiom :
  (iandatypes__templatet__length__first__bit <  iandatypes__templatet__length__last__bit)

axiom iandatypes__templatet__length__position_axiom :
  (0 <= iandatypes__templatet__length__position)

logic iandatypes__templatet__requiredmaxfar__first__bit : int

logic iandatypes__templatet__requiredmaxfar__last__bit : int

logic iandatypes__templatet__requiredmaxfar__position : int

axiom iandatypes__templatet__requiredmaxfar__first__bit_axiom :
  (0 <= iandatypes__templatet__requiredmaxfar__first__bit)

axiom iandatypes__templatet__requiredmaxfar__last__bit_axiom :
  (iandatypes__templatet__requiredmaxfar__first__bit <  iandatypes__templatet__requiredmaxfar__last__bit)

axiom iandatypes__templatet__requiredmaxfar__position_axiom :
  (0 <= iandatypes__templatet__requiredmaxfar__position)

logic iandatypes__templatet__id__first__bit : int

logic iandatypes__templatet__id__last__bit : int

logic iandatypes__templatet__id__position : int

axiom iandatypes__templatet__id__first__bit_axiom :
  (0 <= iandatypes__templatet__id__first__bit)

axiom iandatypes__templatet__id__last__bit_axiom :
  (iandatypes__templatet__id__first__bit <  iandatypes__templatet__id__last__bit)

axiom iandatypes__templatet__id__position_axiom :
  (0 <= iandatypes__templatet__id__position)

logic iandatypes__templatet__pad__first__bit : int

logic iandatypes__templatet__pad__last__bit : int

logic iandatypes__templatet__pad__position : int

axiom iandatypes__templatet__pad__first__bit_axiom :
  (0 <= iandatypes__templatet__pad__first__bit)

axiom iandatypes__templatet__pad__last__bit_axiom :
  (iandatypes__templatet__pad__first__bit <  iandatypes__templatet__pad__last__bit)

axiom iandatypes__templatet__pad__position_axiom :
  (0 <= iandatypes__templatet__pad__position)

logic user_eq25 : us_rep7, us_rep7 -> bool

logic dummy81 : templatelengtht

logic dummy82 : fart

logic dummy83 : (int,character) farray

logic dummy84 : (int,bytet) farray

type templatet__ref = { templatet__content : us_rep7
}

function templatet__ref___projection(a: templatet__ref) : us_rep7 =
  (a).templatet__content

type us_split_fields16 = { rec__cert__attr__ianda__contentst__id : us_rep1;
rec__cert__attr__ianda__contentst__notbefore : us_rep2;
rec__cert__attr__ianda__contentst__notafter : us_rep2;
rec__cert__attr__ianda__contentst__mechanism : algorithmt;
rec__cert__attr__ianda__contentst__basecertid : us_rep1;
rec__cert__attr__ianda__contentst__template : us_rep7
}

function us_split_fields_ID8__projection(a: us_split_fields16) : us_rep1 =
  (a).rec__cert__attr__ianda__contentst__id

function us_split_fields_NotBefore6__projection(a: us_split_fields16) : us_rep2 =
  (a).rec__cert__attr__ianda__contentst__notbefore

function us_split_fields_NotAfter6__projection(a: us_split_fields16) : us_rep2 =
  (a).rec__cert__attr__ianda__contentst__notafter

function us_split_fields_Mechanism6__projection(a: us_split_fields16) : algorithmt =
  (a).rec__cert__attr__ianda__contentst__mechanism

function us_split_fields_BaseCertID4__projection(a: us_split_fields16) : us_rep1 =
  (a).rec__cert__attr__ianda__contentst__basecertid

function us_split_fields_Template__projection(a: us_split_fields16) : us_rep7 =
  (a).rec__cert__attr__ianda__contentst__template

type us_split_fields__ref8 = { us_split_fields__content8 : us_split_fields16
}

function us_split_fields__ref_15__projection(a: us_split_fields__ref8) : us_split_fields16 =
  (a).us_split_fields__content8

type us_rep8 = { us_split_fields17 : us_split_fields16
}

function us_rep_16__projection(a: us_rep8) : us_split_fields16 =
  (a).us_split_fields17

logic bool_eq27 : us_rep8, us_rep8 -> bool

axiom bool_eq_def26 :
  (forall a:us_rep8. forall b:us_rep8 [bool_eq27(a, b)].
  ((((((((bool_eq8(((a).us_split_fields17).rec__cert__attr__ianda__contentst__id,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields17).rec__cert__attr__ianda__contentst__notbefore,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields17).rec__cert__attr__ianda__contentst__notafter,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__notafter) = true)) and
  (to_rep4(((a).us_split_fields17).rec__cert__attr__ianda__contentst__mechanism) = to_rep4(((b).us_split_fields17).rec__cert__attr__ianda__contentst__mechanism))) and
  (bool_eq8(((a).us_split_fields17).rec__cert__attr__ianda__contentst__basecertid,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__basecertid) = true)) and
  (bool_eq26(((a).us_split_fields17).rec__cert__attr__ianda__contentst__template,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__template) = true)) ->
  (bool_eq27(a, b) = true)) and
  ((not ((((((bool_eq8(((a).us_split_fields17).rec__cert__attr__ianda__contentst__id,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__id) = true) and
  (bool_eq15(((a).us_split_fields17).rec__cert__attr__ianda__contentst__notbefore,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__notbefore) = true)) and
  (bool_eq15(((a).us_split_fields17).rec__cert__attr__ianda__contentst__notafter,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__notafter) = true)) and
  (to_rep4(((a).us_split_fields17).rec__cert__attr__ianda__contentst__mechanism) = to_rep4(((b).us_split_fields17).rec__cert__attr__ianda__contentst__mechanism))) and
  (bool_eq8(((a).us_split_fields17).rec__cert__attr__ianda__contentst__basecertid,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__basecertid) = true)) and
  (bool_eq26(((a).us_split_fields17).rec__cert__attr__ianda__contentst__template,
  ((b).us_split_fields17).rec__cert__attr__ianda__contentst__template) = true))) ->
  (bool_eq27(a, b) = false))))

logic value__size11 : int

logic object__size11 : us_rep8 -> int

logic value__alignment11 : int

logic object__alignment11 : us_rep8 -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 : (forall a:us_rep8. (0 <= object__size11(a)))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:us_rep8. (0 <= object__alignment11(a)))

logic cert__attr__ianda__contentst__id__first__bit : int

logic cert__attr__ianda__contentst__id__last__bit : int

logic cert__attr__ianda__contentst__id__position : int

axiom cert__attr__ianda__contentst__id__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__id__first__bit)

axiom cert__attr__ianda__contentst__id__last__bit_axiom :
  (cert__attr__ianda__contentst__id__first__bit <  cert__attr__ianda__contentst__id__last__bit)

axiom cert__attr__ianda__contentst__id__position_axiom :
  (0 <= cert__attr__ianda__contentst__id__position)

logic cert__attr__ianda__contentst__notbefore__first__bit : int

logic cert__attr__ianda__contentst__notbefore__last__bit : int

logic cert__attr__ianda__contentst__notbefore__position : int

axiom cert__attr__ianda__contentst__notbefore__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__notbefore__first__bit)

axiom cert__attr__ianda__contentst__notbefore__last__bit_axiom :
  (cert__attr__ianda__contentst__notbefore__first__bit <  cert__attr__ianda__contentst__notbefore__last__bit)

axiom cert__attr__ianda__contentst__notbefore__position_axiom :
  (0 <= cert__attr__ianda__contentst__notbefore__position)

logic cert__attr__ianda__contentst__notafter__first__bit : int

logic cert__attr__ianda__contentst__notafter__last__bit : int

logic cert__attr__ianda__contentst__notafter__position : int

axiom cert__attr__ianda__contentst__notafter__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__notafter__first__bit)

axiom cert__attr__ianda__contentst__notafter__last__bit_axiom :
  (cert__attr__ianda__contentst__notafter__first__bit <  cert__attr__ianda__contentst__notafter__last__bit)

axiom cert__attr__ianda__contentst__notafter__position_axiom :
  (0 <= cert__attr__ianda__contentst__notafter__position)

logic cert__attr__ianda__contentst__mechanism__first__bit : int

logic cert__attr__ianda__contentst__mechanism__last__bit : int

logic cert__attr__ianda__contentst__mechanism__position : int

axiom cert__attr__ianda__contentst__mechanism__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__mechanism__first__bit)

axiom cert__attr__ianda__contentst__mechanism__last__bit_axiom :
  (cert__attr__ianda__contentst__mechanism__first__bit <  cert__attr__ianda__contentst__mechanism__last__bit)

axiom cert__attr__ianda__contentst__mechanism__position_axiom :
  (0 <= cert__attr__ianda__contentst__mechanism__position)

logic cert__attr__ianda__contentst__basecertid__first__bit : int

logic cert__attr__ianda__contentst__basecertid__last__bit : int

logic cert__attr__ianda__contentst__basecertid__position : int

axiom cert__attr__ianda__contentst__basecertid__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__basecertid__first__bit)

axiom cert__attr__ianda__contentst__basecertid__last__bit_axiom :
  (cert__attr__ianda__contentst__basecertid__first__bit <  cert__attr__ianda__contentst__basecertid__last__bit)

axiom cert__attr__ianda__contentst__basecertid__position_axiom :
  (0 <= cert__attr__ianda__contentst__basecertid__position)

logic cert__attr__ianda__contentst__template__first__bit : int

logic cert__attr__ianda__contentst__template__last__bit : int

logic cert__attr__ianda__contentst__template__position : int

axiom cert__attr__ianda__contentst__template__first__bit_axiom :
  (0 <= cert__attr__ianda__contentst__template__first__bit)

axiom cert__attr__ianda__contentst__template__last__bit_axiom :
  (cert__attr__ianda__contentst__template__first__bit <  cert__attr__ianda__contentst__template__last__bit)

axiom cert__attr__ianda__contentst__template__position_axiom :
  (0 <= cert__attr__ianda__contentst__template__position)

logic user_eq26 : us_rep8, us_rep8 -> bool

logic dummy85 : issueridt

logic dummy86 : namecountt

logic dummy87 : (int,character) farray

logic dummy88 : serialnumbert

logic dummy89 : yearst

logic dummy90 : monthst

logic dummy91 : dayst

logic dummy92 : millisecst

logic dummy93 : yearst

logic dummy94 : monthst

logic dummy95 : dayst

logic dummy96 : millisecst

logic dummy97 : algorithmt

logic dummy98 : issueridt

logic dummy99 : namecountt

logic dummy100 : (int,character) farray

logic dummy101 : serialnumbert

logic dummy102 : templatelengtht

logic dummy103 : fart

logic dummy104 : (int,character) farray

logic dummy105 : (int,bytet) farray

type contentst__ref3 = { contentst__content3 : us_rep8
}

function contentst__ref_6__projection(a: contentst__ref3) : us_rep8 =
  (a).contentst__content3

logic cert_attr_ianda_to_cert : us_rep8 -> us_rep3

logic cert_attr_ianda_to_cert__function_guard : us_rep3, us_rep8 -> prop

axiom cert_attr_ianda_to_cert__post_axiom : true

logic cert_attr_ianda_to_cert_attr : us_rep8 -> us_rep6

logic cert_attr_ianda_to_cert_attr__function_guard : us_rep6, us_rep8 -> prop

axiom cert_attr_ianda_to_cert_attr__post_axiom : true

type certificatestatus

predicate in_range16(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def27 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq27 : certificatestatus, certificatestatus -> bool

logic dummy106 : certificatestatus

type certificatestatus__ref = { certificatestatus__content :
certificatestatus
}

function certificatestatus__ref___projection(a: certificatestatus__ref) : certificatestatus =
  (a).certificatestatus__content

logic to_rep14 : certificatestatus -> int

logic of_rep14 : int -> certificatestatus

axiom inversion_axiom14 :
  (forall x:certificatestatus [to_rep14(x)]. (of_rep14(to_rep14(x)) = x))

axiom range_axiom14 :
  (forall x:certificatestatus [to_rep14(x)]. in_range16(to_rep14(x)))

axiom coerce_axiom14 :
  (forall x:int [to_rep14(of_rep14(x))]. (in_range16(x) ->
  (to_rep14(of_rep14(x)) = x)))

type us_split_fields18 = { rec__usertoken__valididcertt__valid : bool;
rec__usertoken__valididcertt__idstatus : certificatestatus;
rec__usertoken__valididcertt__contents : us_rep5
}

function us_split_fields_Valid__projection(a: us_split_fields18) : bool =
  (a).rec__usertoken__valididcertt__valid

function us_split_fields_IDStatus__projection(a: us_split_fields18) : certificatestatus =
  (a).rec__usertoken__valididcertt__idstatus

function us_split_fields_Contents__projection(a: us_split_fields18) : us_rep5 =
  (a).rec__usertoken__valididcertt__contents

type us_split_fields__ref9 = { us_split_fields__content9 : us_split_fields18
}

function us_split_fields__ref_24__projection(a: us_split_fields__ref9) : us_split_fields18 =
  (a).us_split_fields__content9

type us_rep9 = { us_split_fields19 : us_split_fields18
}

function us_rep_25__projection(a: us_rep9) : us_split_fields18 =
  (a).us_split_fields19

logic bool_eq29 : us_rep9, us_rep9 -> bool

axiom bool_eq_def28 :
  (forall a:us_rep9. forall b:us_rep9 [bool_eq29(a, b)].
  (((((((a).us_split_fields19).rec__usertoken__valididcertt__valid = ((b).us_split_fields19).rec__usertoken__valididcertt__valid) and
  (to_rep14(((a).us_split_fields19).rec__usertoken__valididcertt__idstatus) = to_rep14(((b).us_split_fields19).rec__usertoken__valididcertt__idstatus))) and
  (bool_eq20(((a).us_split_fields19).rec__usertoken__valididcertt__contents,
  ((b).us_split_fields19).rec__usertoken__valididcertt__contents) = true)) ->
  (bool_eq29(a, b) = true)) and
  ((not (((((a).us_split_fields19).rec__usertoken__valididcertt__valid = ((b).us_split_fields19).rec__usertoken__valididcertt__valid) and
  (to_rep14(((a).us_split_fields19).rec__usertoken__valididcertt__idstatus) = to_rep14(((b).us_split_fields19).rec__usertoken__valididcertt__idstatus))) and
  (bool_eq20(((a).us_split_fields19).rec__usertoken__valididcertt__contents,
  ((b).us_split_fields19).rec__usertoken__valididcertt__contents) = true))) ->
  (bool_eq29(a, b) = false))))

logic value__size12 : int

logic object__size12 : us_rep9 -> int

logic value__alignment12 : int

logic object__alignment12 : us_rep9 -> int

axiom value__size_axiom12 : (0 <= value__size12)

axiom object__size_axiom12 : (forall a:us_rep9. (0 <= object__size12(a)))

axiom value__alignment_axiom12 : (0 <= value__alignment12)

axiom object__alignment_axiom12 :
  (forall a:us_rep9. (0 <= object__alignment12(a)))

logic usertoken__valididcertt__valid__first__bit : int

logic usertoken__valididcertt__valid__last__bit : int

logic usertoken__valididcertt__valid__position : int

axiom usertoken__valididcertt__valid__first__bit_axiom :
  (0 <= usertoken__valididcertt__valid__first__bit)

axiom usertoken__valididcertt__valid__last__bit_axiom :
  (usertoken__valididcertt__valid__first__bit <  usertoken__valididcertt__valid__last__bit)

axiom usertoken__valididcertt__valid__position_axiom :
  (0 <= usertoken__valididcertt__valid__position)

logic usertoken__valididcertt__idstatus__first__bit : int

logic usertoken__valididcertt__idstatus__last__bit : int

logic usertoken__valididcertt__idstatus__position : int

axiom usertoken__valididcertt__idstatus__first__bit_axiom :
  (0 <= usertoken__valididcertt__idstatus__first__bit)

axiom usertoken__valididcertt__idstatus__last__bit_axiom :
  (usertoken__valididcertt__idstatus__first__bit <  usertoken__valididcertt__idstatus__last__bit)

axiom usertoken__valididcertt__idstatus__position_axiom :
  (0 <= usertoken__valididcertt__idstatus__position)

logic usertoken__valididcertt__contents__first__bit : int

logic usertoken__valididcertt__contents__last__bit : int

logic usertoken__valididcertt__contents__position : int

axiom usertoken__valididcertt__contents__first__bit_axiom :
  (0 <= usertoken__valididcertt__contents__first__bit)

axiom usertoken__valididcertt__contents__last__bit_axiom :
  (usertoken__valididcertt__contents__first__bit <  usertoken__valididcertt__contents__last__bit)

axiom usertoken__valididcertt__contents__position_axiom :
  (0 <= usertoken__valididcertt__contents__position)

logic user_eq28 : us_rep9, us_rep9 -> bool

logic dummy107 : bool

logic dummy108 : certificatestatus

logic dummy109 : issueridt

logic dummy110 : namecountt

logic dummy111 : (int,character) farray

logic dummy112 : serialnumbert

logic dummy113 : yearst

logic dummy114 : monthst

logic dummy115 : dayst

logic dummy116 : millisecst

logic dummy117 : yearst

logic dummy118 : monthst

logic dummy119 : dayst

logic dummy120 : millisecst

logic dummy121 : algorithmt

logic dummy122 : issueridt

logic dummy123 : namecountt

logic dummy124 : (int,character) farray

logic dummy125 : algorithmt

logic dummy126 : keyidt

logic dummy127 : keylengtht

type valididcertt__ref = { valididcertt__content : us_rep9
}

function valididcertt__ref___projection(a: valididcertt__ref) : us_rep9 =
  (a).valididcertt__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic c64b : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic c72b : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic c80b : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic temp___String_Literal_2057 : unit -> (int,character) farray

axiom temp___String_Literal_2057__def_axiom :
  (((((((((((((((((((((((((((to_rep((temp___String_Literal_2057(void)[1])) = 73) and
  (to_rep((temp___String_Literal_2057(void)[2])) = 38)) and
  (to_rep((temp___String_Literal_2057(void)[3])) = 65)) and
  (to_rep((temp___String_Literal_2057(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_2057(void)[5])) = 67)) and
  (to_rep((temp___String_Literal_2057(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_2057(void)[7])) = 114)) and
  (to_rep((temp___String_Literal_2057(void)[8])) = 116)) and
  (to_rep((temp___String_Literal_2057(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_2057(void)[10])) = 102)) and
  (to_rep((temp___String_Literal_2057(void)[11])) = 105)) and
  (to_rep((temp___String_Literal_2057(void)[12])) = 99)) and
  (to_rep((temp___String_Literal_2057(void)[13])) = 97)) and
  (to_rep((temp___String_Literal_2057(void)[14])) = 116)) and
  (to_rep((temp___String_Literal_2057(void)[15])) = 101)) and
  (to_rep((temp___String_Literal_2057(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_2057(void)[17])) = 78)) and
  (to_rep((temp___String_Literal_2057(void)[18])) = 111)) and
  (to_rep((temp___String_Literal_2057(void)[19])) = 116)) and
  (to_rep((temp___String_Literal_2057(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_2057(void)[21])) = 67)) and
  (to_rep((temp___String_Literal_2057(void)[22])) = 117)) and
  (to_rep((temp___String_Literal_2057(void)[23])) = 114)) and
  (to_rep((temp___String_Literal_2057(void)[24])) = 114)) and
  (to_rep((temp___String_Literal_2057(void)[25])) = 101)) and
  (to_rep((temp___String_Literal_2057(void)[26])) = 110)) and
  (to_rep((temp___String_Literal_2057(void)[27])) = 116))

logic temp___String_Literal_2062 : unit -> (int,character) farray

axiom temp___String_Literal_2062__def_axiom :
  ((((((((((((((((((((((((((((((to_rep((temp___String_Literal_2062(void)[1])) = 73) and
  (to_rep((temp___String_Literal_2062(void)[2])) = 38)) and
  (to_rep((temp___String_Literal_2062(void)[3])) = 65)) and
  (to_rep((temp___String_Literal_2062(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_2062(void)[5])) = 67)) and
  (to_rep((temp___String_Literal_2062(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_2062(void)[7])) = 114)) and
  (to_rep((temp___String_Literal_2062(void)[8])) = 116)) and
  (to_rep((temp___String_Literal_2062(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_2062(void)[10])) = 102)) and
  (to_rep((temp___String_Literal_2062(void)[11])) = 105)) and
  (to_rep((temp___String_Literal_2062(void)[12])) = 99)) and
  (to_rep((temp___String_Literal_2062(void)[13])) = 97)) and
  (to_rep((temp___String_Literal_2062(void)[14])) = 116)) and
  (to_rep((temp___String_Literal_2062(void)[15])) = 101)) and
  (to_rep((temp___String_Literal_2062(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_2062(void)[17])) = 78)) and
  (to_rep((temp___String_Literal_2062(void)[18])) = 111)) and
  (to_rep((temp___String_Literal_2062(void)[19])) = 116)) and
  (to_rep((temp___String_Literal_2062(void)[20])) = 32)) and
  (to_rep((temp___String_Literal_2062(void)[21])) = 86)) and
  (to_rep((temp___String_Literal_2062(void)[22])) = 101)) and
  (to_rep((temp___String_Literal_2062(void)[23])) = 114)) and
  (to_rep((temp___String_Literal_2062(void)[24])) = 105)) and
  (to_rep((temp___String_Literal_2062(void)[25])) = 102)) and
  (to_rep((temp___String_Literal_2062(void)[26])) = 105)) and
  (to_rep((temp___String_Literal_2062(void)[27])) = 97)) and
  (to_rep((temp___String_Literal_2062(void)[28])) = 98)) and
  (to_rep((temp___String_Literal_2062(void)[29])) = 108)) and
  (to_rep((temp___String_Literal_2062(void)[30])) = 101))

logic temp___String_Literal_2067 : unit -> (int,character) farray

axiom temp___String_Literal_2067__def_axiom :
  (((((((((((((((((((to_rep((temp___String_Literal_2067(void)[1])) = 73) and
  (to_rep((temp___String_Literal_2067(void)[2])) = 38)) and
  (to_rep((temp___String_Literal_2067(void)[3])) = 65)) and
  (to_rep((temp___String_Literal_2067(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_2067(void)[5])) = 67)) and
  (to_rep((temp___String_Literal_2067(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_2067(void)[7])) = 114)) and
  (to_rep((temp___String_Literal_2067(void)[8])) = 116)) and
  (to_rep((temp___String_Literal_2067(void)[9])) = 105)) and
  (to_rep((temp___String_Literal_2067(void)[10])) = 102)) and
  (to_rep((temp___String_Literal_2067(void)[11])) = 105)) and
  (to_rep((temp___String_Literal_2067(void)[12])) = 99)) and
  (to_rep((temp___String_Literal_2067(void)[13])) = 97)) and
  (to_rep((temp___String_Literal_2067(void)[14])) = 116)) and
  (to_rep((temp___String_Literal_2067(void)[15])) = 101)) and
  (to_rep((temp___String_Literal_2067(void)[16])) = 32)) and
  (to_rep((temp___String_Literal_2067(void)[17])) = 66)) and
  (to_rep((temp___String_Literal_2067(void)[18])) = 97)) and
  (to_rep((temp___String_Literal_2067(void)[19])) = 100))

axiom nodescription__def_axiom :
  (nodescription = audittypes__nodescription__aggregate_def(32))

 (* File "usertoken.adb", line 759, characters 0-0 *)
goal WP_parameter_def :
  (forall currenttime:us_private. forall filestate:us_private.
  forall state:us_private. forall description:(int,character) farray.
  forall idcert__split_fields:us_split_fields__ref9.
  forall iandacertcontents__split_fields:us_split_fields__ref8.
  forall iandavalid:bool.
  forall idcertcontents__split_fields:us_split_fields__ref5.
  forall extractok:bool. forall verified:bool. forall current:bool.
  forall baseidmatches:bool. forall result__:(int,character) farray.
  forall o:us_rep3. forall o1:us_rep6. forall o2:issueridt.
  forall o3:namecountt. forall o4:(int,character) farray.
  forall o5:serialnumbert. forall o6:issueridt. forall o7:namecountt.
  forall o8:(int,character) farray. forall o9:serialnumbert. forall o10:bool.
  forall o11:us_rep3. forall o12:us_rep3. forall o13:bool.
  forall filestate1:us_private. forall state1:us_private.
  forall iandacertcontents__split_fields1:us_split_fields16.
  forall idcertcontents__split_fields1:us_split_fields10. forall result:bool.
  forall extractok1:bool. forall result1:bool. forall verified1:bool.
  forall result2:bool. forall current1:bool. forall result3:bool.
  forall baseidmatches1:bool. forall certfound:bool.
  forall iandacertcontents__split_fields2:us_split_fields16.
  forall extractok2:bool. forall result4:us_split_fields__ref5.
  forall idcertcontents__split_fields2:us_split_fields10.
  forall result5:bool. forall baseidmatches2:bool.
  forall filestate2:us_private. forall state2:us_private.
  forall verified2:bool. forall result6:bool. forall current2:bool.
  forall result7:bool. forall iandavalid1:bool.
  forall result8:(int,character) farray.
  forall result__1:(int,character) farray.
  ((audittypes__nodescription__aggregate_def(32) = nodescription) ->
  (((result = extractok) and (extractok1 = of_int(0))) ->
  (((result1 = verified) and (verified1 = of_int(0))) ->
  (((result2 = current) and (current1 = of_int(0))) ->
  (((result3 = baseidmatches) and (baseidmatches1 = of_int(0))) ->
  ((((certfound = true) and (((extractok2 = true) and
  (((result4 = idcertcontents__split_fields) and
  (idcertcontents__split_fields2 = (((idcert__split_fields).us_split_fields__content9).rec__usertoken__valididcertt__contents).us_split_fields11)) and
  (((((o1 = cert_attr_ianda_to_cert_attr({ us_split_fields17 =
  iandacertcontents__split_fields2 })) and ({ us_split_fields3 = {
  rec__certtypes__idt__issuer = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = o2; rec__cryptotypes__issuert__namelength =
  o3; rec__cryptotypes__issuert__name = o4 } };
  rec__certtypes__idt__serialnumber = o5 } } = thebasecert(o1))) and
  (((o = cert_id_to_cert({ us_split_fields11 = idcertcontents__split_fields2
  })) and ({ us_split_fields3 = { rec__certtypes__idt__issuer = {
  us_split_fields1 = { rec__cryptotypes__issuert__id = o6;
  rec__cryptotypes__issuert__namelength = o7;
  rec__cryptotypes__issuert__name = o8 } };
  rec__certtypes__idt__serialnumber = o9 } } = theid(o))) and
  (o10 = bool_eq8({ us_split_fields3 = { rec__certtypes__idt__issuer = {
  us_split_fields1 = { rec__cryptotypes__issuert__id = o6;
  rec__cryptotypes__issuert__namelength = o7;
  rec__cryptotypes__issuert__name = o8 } };
  rec__certtypes__idt__serialnumber = o9 } }, { us_split_fields3 = {
  rec__certtypes__idt__issuer = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = o2; rec__cryptotypes__issuert__namelength =
  o3; rec__cryptotypes__issuert__name = o4 } };
  rec__certtypes__idt__serialnumber = o5 } })))) and
  ((result5 = baseidmatches1) and (baseidmatches2 = o10))) and
  ((o11 = cert_attr_ianda_to_cert({ us_split_fields17 =
  iandacertcontents__split_fields2 })) and (((o12 = cert_attr_ianda_to_cert({
  us_split_fields17 = iandacertcontents__split_fields2 })) and
  (o13 = iscurrent(o12, currenttime))) and ((result6 = current1) and
  (current2 = o13))))))) or ((not (extractok2 = true)) and
  (((baseidmatches2 = baseidmatches1) and ((current2 = current1) and
  ((verified2 = verified1) and (({ us_split_fields__content5 =
  idcertcontents__split_fields2 } = idcertcontents__split_fields) and
  ((state2 = state) and (filestate2 = filestate)))))) and
  ((baseidmatches2 = baseidmatches1) and ((current2 = current1) and
  ((verified2 = verified1) and
  ((idcertcontents__split_fields2 = idcertcontents__split_fields1) and
  ((state2 = state1) and (filestate2 = filestate1)))))))))) or
  ((not (certfound = true)) and (((baseidmatches2 = baseidmatches1) and
  ((current2 = current1) and ((verified2 = verified1) and
  ((extractok2 = extractok1) and (({ us_split_fields__content5 =
  idcertcontents__split_fields2 } = idcertcontents__split_fields) and (({
  us_split_fields__content8 = iandacertcontents__split_fields2
  } = iandacertcontents__split_fields) and ((state2 = state) and
  (filestate2 = filestate)))))))) and ((baseidmatches2 = baseidmatches1) and
  ((current2 = current1) and ((verified2 = verified1) and
  ((extractok2 = extractok1) and
  ((idcertcontents__split_fields2 = idcertcontents__split_fields1) and
  ((iandacertcontents__split_fields2 = iandacertcontents__split_fields1) and
  ((state2 = state1) and (filestate2 = filestate1))))))))))) ->
  (((result7 = iandavalid) and
  (iandavalid1 = match_bool(match_bool(match_bool(match_bool(certfound,
  extractok2, false), baseidmatches2, false), verified2, false), current2,
  false))) -> ((bool_eq3(description, 1, 150, nodescription, 1,
  150) = true) -> ((not ((certfound = true) -> ((extractok2 = true) ->
  (not (baseidmatches2 = true))))) -> ((not (verified2 = true)) ->
  (((result8 = result__) and (result__1 = nodescription)) ->
  ((not (of_int(1) = true)) -> ((1 <= 150) -> (1 <= 1)))))))))))))))
