;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort et1 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (et1 et1) Bool)

(declare-fun dummy () et1)

(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))

;; slide_eq
  (assert
  (forall ((a (Array Int et1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int et1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int
  Int) (Array Int et1))

;; concat_def
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (et1 Int) (Array Int et1))

;; singleton_def
  (assert
  (forall ((v et1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int et1)) (a__first Int) (a__last Int)
  (b (Array Int et1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun b () (Array Int et1))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range1 temp___expr_176)))

(declare-fun a () (Array Int et1))

(declare-fun o () et1)

(declare-fun o1 () (Array Int et1))

(declare-fun o2 () et1)

(declare-fun o3 () (Array Int et1))

(declare-fun o4 () et1)

(declare-fun o5 () (Array Int et1))

(declare-fun o6 () et1)

(declare-fun o7 () (Array Int et1))

(declare-fun o8 () et1)

(declare-fun o9 () (Array Int et1))

(declare-fun o10 () et1)

(declare-fun o11 () (Array Int et1))

(declare-fun o12 () et1)

(declare-fun o13 () (Array Int et1))

(declare-fun o14 () et1)

(declare-fun o15 () (Array Int et1))

(declare-fun o16 () et1)

(declare-fun o17 () (Array Int et1))

(declare-fun o18 () et1)

(declare-fun o19 () (Array Int et1))

(declare-fun result () (Array Int et1))

(declare-fun a1 () (Array Int et1))

(declare-fun result1 () (Array Int et1))

(declare-fun a2 () (Array Int et1))

(declare-fun result2 () (Array Int et1))

(declare-fun a3 () (Array Int et1))

(declare-fun result3 () (Array Int et1))

(declare-fun a4 () (Array Int et1))

(declare-fun result4 () (Array Int et1))

(declare-fun a5 () (Array Int et1))

(declare-fun result5 () (Array Int et1))

(declare-fun a6 () (Array Int et1))

(declare-fun result6 () (Array Int et1))

(declare-fun a7 () (Array Int et1))

(declare-fun result7 () (Array Int et1))

(declare-fun a8 () (Array Int et1))

(declare-fun result8 () (Array Int et1))

(declare-fun a9 () (Array Int et1))

(declare-fun result9 () (Array Int et1))

(declare-fun a10 () (Array Int et1))

(declare-fun result10 () (Array Int et1))

(declare-fun a11 () (Array Int et1))

(declare-fun a12 () (Array Int et1))

(declare-fun a13 () (Array Int et1))

;; H
  (assert (= result a))

;; H
  (assert (= a1 b))

;; H
  (assert (= (to_rep o) (to_rep (select a1 1))))

;; H
  (assert (= o1 (store a1 10 o)))

;; H
  (assert (= result1 a1))

;; H
  (assert (= a2 o1))

;; H
  (assert (= (to_rep o2) (to_rep (select a2 2))))

;; H
  (assert (= o3 (store a2 9 o2)))

;; H
  (assert (= result2 a2))

;; H
  (assert (= a3 o3))

;; H
  (assert (= (to_rep o4) (to_rep (select a3 3))))

;; H
  (assert (= o5 (store a3 8 o4)))

;; H
  (assert (= result3 a3))

;; H
  (assert (= a4 o5))

;; H
  (assert (= (to_rep o6) (to_rep (select a4 4))))

;; H
  (assert (= o7 (store a4 7 o6)))

;; H
  (assert (= result4 a4))

;; H
  (assert (= a5 o7))

;; H
  (assert (= (to_rep o8) (to_rep (select b 10))))

;; H
  (assert (= o9 (store a5 1 o8)))

;; H
  (assert (= result5 a5))

;; H
  (assert (= a6 o9))

;; H
  (assert (= (to_rep o10) (to_rep (select b 9))))

;; H
  (assert (= o11 (store a6 2 o10)))

;; H
  (assert (= result6 a6))

;; H
  (assert (= a7 o11))

;; H
  (assert (= (to_rep o12) (to_rep (select b 8))))

;; H
  (assert (= o13 (store a7 3 o12)))

;; H
  (assert (= result7 a7))

;; H
  (assert (= a8 o13))

;; H
  (assert (= (to_rep o14) (to_rep (select b 7))))

;; H
  (assert (= o15 (store a8 4 o14)))

;; H
  (assert (= result8 a8))

;; H
  (assert (= a9 o15))

;; H
  (assert (= (to_rep o16) (to_rep (select a9 5))))

;; H
  (assert (= o17 (store a9 6 o16)))

;; H
  (assert (= result9 a9))

;; H
  (assert (= a10 o17))

;; H
  (assert (= (to_rep o18) (to_rep (select b 6))))

;; H
  (assert (= o19 (store a10 5 o18)))

;; H
  (assert (= result10 a10))

;; H
  (assert (= a11 o19))

;; H
  (assert (= a11 a12))

;; H
  (assert (= a13 a11))

(declare-fun n () Int)

;; H
  (assert (<= 1 n))

;; H
  (assert (<= n 10))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 62, characters 0-0
  (not (= (to_rep (select a12 n)) (to_rep (select b (- 11 n))))))
(check-sat)
