(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq6 : us_rep, us_rep -> bool

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. (0 <= object__alignment1(a)))

logic user_eq4 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type unbounded_string__ref = { unbounded_string__content : us_rep
}

function unbounded_string__ref___projection(a: unbounded_string__ref) : us_rep =
  (a).unbounded_string__content

logic to_unbounded_string : us_t -> us_rep

logic to_unbounded_string__function_guard : us_rep, us_t -> prop

logic to_unbounded_string1 : int, us_t -> us_rep

logic to_unbounded_string__function_guard1 : us_rep, int, us_t -> prop

axiom to_unbounded_string__post_axiom : true

axiom to_unbounded_string__post__dispatch_axiom : true

type us_split_fields = { rec__people__person__name : us_rep;
rec__people__person__dob : integer; rec__people__person__alive : bool;
rec__ext__ : us_private
}

function us_split_fields_Name__projection(a: us_split_fields) : us_rep =
  (a).rec__people__person__name

function us_split_fields_DOB__projection(a: us_split_fields) : integer =
  (a).rec__people__person__dob

function us_split_fields_Alive__projection(a: us_split_fields) : bool =
  (a).rec__people__person__alive

function us_split_fields___2__projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___9__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function us_rep___10__projection(a: us_rep1) : int = (a).attr__tag

logic bool_eq7 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq7(a, b)].
  (((((bool_eq6(((a).us_split_fields1).rec__people__person__name,
  ((b).us_split_fields1).rec__people__person__name) = true) and
  (to_rep1(((a).us_split_fields1).rec__people__person__dob) = to_rep1(((b).us_split_fields1).rec__people__person__dob))) and
  (((a).us_split_fields1).rec__people__person__alive = ((b).us_split_fields1).rec__people__person__alive)) ->
  (bool_eq7(a, b) = true)) and
  ((not (((bool_eq6(((a).us_split_fields1).rec__people__person__name,
  ((b).us_split_fields1).rec__people__person__name) = true) and
  (to_rep1(((a).us_split_fields1).rec__people__person__dob) = to_rep1(((b).us_split_fields1).rec__people__person__dob))) and
  (((a).us_split_fields1).rec__people__person__alive = ((b).us_split_fields1).rec__people__person__alive))) ->
  (bool_eq7(a, b) = false))))

logic us_dispatch_eq : us_rep1, us_rep1 -> bool

logic us_tag : int

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:us_rep. forall a1:integer. forall a2:bool. forall a3:us_private.
  forall a4:int. (0 <= object__size2({ us_split_fields1 = {
  rec__people__person__name = a; rec__people__person__dob = a1;
  rec__people__person__alive = a2; rec__ext__ = a3 }; attr__tag = a4 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep. forall a1:integer. forall a2:bool. forall a3:us_private.
  forall a4:int. (0 <= object__alignment2({ us_split_fields1 = {
  rec__people__person__name = a; rec__people__person__dob = a1;
  rec__people__person__alive = a2; rec__ext__ = a3 }; attr__tag = a4 })))

logic people__person__name__first__bit : int

logic people__person__name__last__bit : int

logic people__person__name__position : int

axiom people__person__name__first__bit_axiom :
  (0 <= people__person__name__first__bit)

axiom people__person__name__last__bit_axiom :
  (people__person__name__first__bit <  people__person__name__last__bit)

axiom people__person__name__position_axiom :
  (0 <= people__person__name__position)

logic people__person__dob__first__bit : int

logic people__person__dob__last__bit : int

logic people__person__dob__position : int

axiom people__person__dob__first__bit_axiom :
  (0 <= people__person__dob__first__bit)

axiom people__person__dob__last__bit_axiom :
  (people__person__dob__first__bit <  people__person__dob__last__bit)

axiom people__person__dob__position_axiom :
  (0 <= people__person__dob__position)

logic people__person__alive__first__bit : int

logic people__person__alive__last__bit : int

logic people__person__alive__position : int

axiom people__person__alive__first__bit_axiom :
  (0 <= people__person__alive__first__bit)

axiom people__person__alive__last__bit_axiom :
  (people__person__alive__first__bit <  people__person__alive__last__bit)

axiom people__person__alive__position_axiom :
  (0 <= people__person__alive__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep

logic dummy7 : integer

logic dummy8 : bool

logic dummy9 : us_private

logic dummy10 : int

type person__ref = { person__content : us_rep1
}

function person__ref___projection(a: person__ref) : us_rep1 =
  (a).person__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq8 : bool, bool -> bool

axiom bool_eq_def5 :
  (forall x:bool. forall y:bool [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range3(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

logic temp___String_Literal_585 : unit -> (int,character) farray

axiom temp___String_Literal_585__def_axiom :
  ((((((((to_rep((temp___String_Literal_585(void)[1])) = 78) and
  (to_rep((temp___String_Literal_585(void)[2])) = 97)) and
  (to_rep((temp___String_Literal_585(void)[3])) = 109)) and
  (to_rep((temp___String_Literal_585(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_585(void)[5])) = 108)) and
  (to_rep((temp___String_Literal_585(void)[6])) = 101)) and
  (to_rep((temp___String_Literal_585(void)[7])) = 115)) and
  (to_rep((temp___String_Literal_585(void)[8])) = 115))

logic new_person__2 : us_rep, us_private -> us_rep1

logic new_person__2__function_guard : us_rep1, us_rep, us_private -> prop

logic new_person__21 : int, us_rep, us_private -> us_rep1

logic new_person__2__function_guard1 : us_rep1, int, us_rep,
  us_private -> prop

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : natural, natural -> bool

logic dummy11 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type professions

predicate in_range5(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : professions, professions -> bool

logic dummy12 : professions

type professions__ref = { professions__content : professions
}

function professions__ref___projection(a: professions__ref) : professions =
  (a).professions__content

logic to_rep3 : professions -> int

logic of_rep3 : int -> professions

axiom inversion_axiom3 :
  (forall x:professions [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:professions [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type skills

predicate in_range6(x: int) = ((0 <= x) and (x <= 12))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : skills, skills -> bool

logic dummy13 : skills

type skills__ref = { skills__content : skills
}

function skills__ref___projection(a: skills__ref) : skills =
  (a).skills__content

logic to_rep4 : skills -> int

logic of_rep4 : int -> skills

axiom inversion_axiom4 :
  (forall x:skills [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:skills [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type map__ref1 = { map__content1 : (int,skills) farray
}

logic slide1 : (int,skills) farray, int, int -> (int,skills) farray

axiom slide_eq1 :
  (forall a:(int,skills) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,skills) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,skills) farray, int, int, (int,skills) farray, int,
  int -> (int,skills) farray

axiom concat_def1 :
  (forall a:(int,skills) farray. forall b:(int,skills) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : skills, int -> (int,skills) farray

axiom singleton_def1 :
  (forall v:skills.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq12 : (int,skills) farray, int, int, (int,skills) farray, int,
  int -> bool

axiom bool_eq_def9 :
  (forall a:(int,skills) farray. forall a__first:int. forall a__last:int.
  forall b:(int,skills) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_140:int. ((((a__first <= temp___idx_140) and
  (temp___idx_140 <= a__last)) and
  (to_rep4((a[temp___idx_140])) = to_rep4((b[((b__first - a__first) + temp___idx_140)])))) or
  (not ((a__first <= temp___idx_140) and (temp___idx_140 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_140:int. (((a__first <= temp___idx_140) and
  (temp___idx_140 <= a__last)) ->
  (to_rep4((a[temp___idx_140])) = to_rep4((b[((b__first - a__first) + temp___idx_140)]))))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,skills) farray. forall b:(int,skills) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_140:int. (((a__first <= temp___idx_140) and
  (temp___idx_140 <= a__last)) ->
  (to_rep4((a[temp___idx_140])) = to_rep4((b[((b__first - a__first) + temp___idx_140)])))))))))

logic compare1 : (int,skills) farray, int, int, (int,skills) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,skills) farray. forall b:(int,skills) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq12(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,skills) farray. forall b:(int,skills) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq12(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep4((a[(i + 1)])) <  to_rep4((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,skills) farray. forall b:(int,skills) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq12(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep4((b[(i + 1)])) <  to_rep4((a[(j + 1)]))))))))))))

logic dummy14 : (int,skills) farray

logic value__size3 : int

logic object__size3 : (int,skills) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,skills) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,skills) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,skills) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,skills) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,skills) farray. (0 <= object__alignment3(a)))

logic user_eq9 : (int,skills) farray, (int,skills) farray -> bool

type us_split_fields2 = { rec__people__person__name1 : us_rep;
rec__people__person__dob1 : integer; rec__people__person__alive1 : bool;
rec__professionals__professional__profession : professions;
rec__professionals__professional__skilled_in : (int,skills) farray;
rec__professionals__professional__number_of_people_killed : natural;
rec__ext__1 : us_private
}

function us_split_fields_Name__2__projection(a: us_split_fields2) : us_rep =
  (a).rec__people__person__name1

function us_split_fields_DOB__2__projection(a: us_split_fields2) : integer =
  (a).rec__people__person__dob1

function us_split_fields_Alive__2__projection(a: us_split_fields2) : bool =
  (a).rec__people__person__alive1

function us_split_fields_Profession__projection(a: us_split_fields2) : professions =
  (a).rec__professionals__professional__profession

function us_split_fields_Skilled_In__projection(a: us_split_fields2) : (int,skills) farray =
  (a).rec__professionals__professional__skilled_in

function us_split_fields_Number_Of_People_Killed__projection(a: us_split_fields2) : natural =
  (a).rec__professionals__professional__number_of_people_killed

function us_split_fields___4__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___13__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___14__projection(a: us_rep2) : int = (a).attr__tag1

logic hide_ext__ : professions, (int,skills) farray, natural,
  us_private -> us_private

logic extract__profession : us_private -> professions

axiom extract__profession__conv :
  (forall profession:professions.
  (forall skilled_in:(int,skills) farray.
  (forall number_of_people_killed:natural.
  (forall rec__ext__2:us_private. (extract__profession(hide_ext__(profession,
  skilled_in, number_of_people_killed, rec__ext__2)) = profession)))))

logic extract__skilled_in : us_private -> (int,skills) farray

axiom extract__skilled_in__conv :
  (forall profession:professions.
  (forall skilled_in:(int,skills) farray.
  (forall number_of_people_killed:natural.
  (forall rec__ext__2:us_private. (extract__skilled_in(hide_ext__(profession,
  skilled_in, number_of_people_killed, rec__ext__2)) = skilled_in)))))

logic extract__number_of_people_killed : us_private -> natural

axiom extract__number_of_people_killed__conv :
  (forall profession:professions.
  (forall skilled_in:(int,skills) farray.
  (forall number_of_people_killed:natural.
  (forall rec__ext__2:us_private.
  (extract__number_of_people_killed(hide_ext__(profession, skilled_in,
  number_of_people_killed, rec__ext__2)) = number_of_people_killed)))))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep2) : us_rep1 = { us_split_fields1 = {
  rec__people__person__name =
  ((a).us_split_fields3).rec__people__person__name1;
  rec__people__person__dob =
  ((a).us_split_fields3).rec__people__person__dob1;
  rec__people__person__alive =
  ((a).us_split_fields3).rec__people__person__alive1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__professionals__professional__profession,
  ((a).us_split_fields3).rec__professionals__professional__skilled_in,
  ((a).us_split_fields3).rec__professionals__professional__number_of_people_killed,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep1) : us_rep2 = { us_split_fields3 = {
  rec__people__person__name1 =
  ((r).us_split_fields1).rec__people__person__name;
  rec__people__person__dob1 =
  ((r).us_split_fields1).rec__people__person__dob;
  rec__people__person__alive1 =
  ((r).us_split_fields1).rec__people__person__alive;
  rec__professionals__professional__profession =
  extract__profession(((r).us_split_fields1).rec__ext__);
  rec__professionals__professional__skilled_in =
  extract__skilled_in(((r).us_split_fields1).rec__ext__);
  rec__professionals__professional__number_of_people_killed =
  extract__number_of_people_killed(((r).us_split_fields1).rec__ext__);
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq13 : us_rep2, us_rep2 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq13(a, b)].
  ((((((((bool_eq6(((a).us_split_fields3).rec__people__person__name1,
  ((b).us_split_fields3).rec__people__person__name1) = true) and
  (to_rep1(((a).us_split_fields3).rec__people__person__dob1) = to_rep1(((b).us_split_fields3).rec__people__person__dob1))) and
  (((a).us_split_fields3).rec__people__person__alive1 = ((b).us_split_fields3).rec__people__person__alive1)) and
  (to_rep3(((a).us_split_fields3).rec__professionals__professional__profession) = to_rep3(((b).us_split_fields3).rec__professionals__professional__profession))) and
  (bool_eq12(((a).us_split_fields3).rec__professionals__professional__skilled_in,
  1, 4, ((b).us_split_fields3).rec__professionals__professional__skilled_in,
  1, 4) = true)) and
  (to_rep2(((a).us_split_fields3).rec__professionals__professional__number_of_people_killed) = to_rep2(((b).us_split_fields3).rec__professionals__professional__number_of_people_killed))) ->
  (bool_eq13(a, b) = true)) and
  ((not ((((((bool_eq6(((a).us_split_fields3).rec__people__person__name1,
  ((b).us_split_fields3).rec__people__person__name1) = true) and
  (to_rep1(((a).us_split_fields3).rec__people__person__dob1) = to_rep1(((b).us_split_fields3).rec__people__person__dob1))) and
  (((a).us_split_fields3).rec__people__person__alive1 = ((b).us_split_fields3).rec__people__person__alive1)) and
  (to_rep3(((a).us_split_fields3).rec__professionals__professional__profession) = to_rep3(((b).us_split_fields3).rec__professionals__professional__profession))) and
  (bool_eq12(((a).us_split_fields3).rec__professionals__professional__skilled_in,
  1, 4, ((b).us_split_fields3).rec__professionals__professional__skilled_in,
  1, 4) = true)) and
  (to_rep2(((a).us_split_fields3).rec__professionals__professional__number_of_people_killed) = to_rep2(((b).us_split_fields3).rec__professionals__professional__number_of_people_killed)))) ->
  (bool_eq13(a, b) = false))))

logic us_tag1 : int

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:us_rep. forall a1:integer. forall a2:bool. forall a3:professions.
  forall a4:(int,skills) farray. forall a5:natural. forall a6:us_private.
  forall a7:int. (0 <= object__size4({ us_split_fields3 = {
  rec__people__person__name1 = a; rec__people__person__dob1 = a1;
  rec__people__person__alive1 = a2;
  rec__professionals__professional__profession = a3;
  rec__professionals__professional__skilled_in = a4;
  rec__professionals__professional__number_of_people_killed = a5;
  rec__ext__1 = a6 }; attr__tag1 = a7 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep. forall a1:integer. forall a2:bool. forall a3:professions.
  forall a4:(int,skills) farray. forall a5:natural. forall a6:us_private.
  forall a7:int. (0 <= object__alignment4({ us_split_fields3 = {
  rec__people__person__name1 = a; rec__people__person__dob1 = a1;
  rec__people__person__alive1 = a2;
  rec__professionals__professional__profession = a3;
  rec__professionals__professional__skilled_in = a4;
  rec__professionals__professional__number_of_people_killed = a5;
  rec__ext__1 = a6 }; attr__tag1 = a7 })))

logic people__person__name__first__bit1 : int

logic people__person__name__last__bit1 : int

logic people__person__name__position1 : int

axiom people__person__name__first__bit_axiom1 :
  (0 <= people__person__name__first__bit1)

axiom people__person__name__last__bit_axiom1 :
  (people__person__name__first__bit1 <  people__person__name__last__bit1)

axiom people__person__name__position_axiom1 :
  (0 <= people__person__name__position1)

logic people__person__dob__first__bit1 : int

logic people__person__dob__last__bit1 : int

logic people__person__dob__position1 : int

axiom people__person__dob__first__bit_axiom1 :
  (0 <= people__person__dob__first__bit1)

axiom people__person__dob__last__bit_axiom1 :
  (people__person__dob__first__bit1 <  people__person__dob__last__bit1)

axiom people__person__dob__position_axiom1 :
  (0 <= people__person__dob__position1)

logic people__person__alive__first__bit1 : int

logic people__person__alive__last__bit1 : int

logic people__person__alive__position1 : int

axiom people__person__alive__first__bit_axiom1 :
  (0 <= people__person__alive__first__bit1)

axiom people__person__alive__last__bit_axiom1 :
  (people__person__alive__first__bit1 <  people__person__alive__last__bit1)

axiom people__person__alive__position_axiom1 :
  (0 <= people__person__alive__position1)

logic professionals__professional__profession__first__bit : int

logic professionals__professional__profession__last__bit : int

logic professionals__professional__profession__position : int

axiom professionals__professional__profession__first__bit_axiom :
  (0 <= professionals__professional__profession__first__bit)

axiom professionals__professional__profession__last__bit_axiom :
  (professionals__professional__profession__first__bit <  professionals__professional__profession__last__bit)

axiom professionals__professional__profession__position_axiom :
  (0 <= professionals__professional__profession__position)

logic professionals__professional__skilled_in__first__bit : int

logic professionals__professional__skilled_in__last__bit : int

logic professionals__professional__skilled_in__position : int

axiom professionals__professional__skilled_in__first__bit_axiom :
  (0 <= professionals__professional__skilled_in__first__bit)

axiom professionals__professional__skilled_in__last__bit_axiom :
  (professionals__professional__skilled_in__first__bit <  professionals__professional__skilled_in__last__bit)

axiom professionals__professional__skilled_in__position_axiom :
  (0 <= professionals__professional__skilled_in__position)

logic professionals__professional__number_of_people_killed__first__bit : int

logic professionals__professional__number_of_people_killed__last__bit : int

logic professionals__professional__number_of_people_killed__position : int

axiom professionals__professional__number_of_people_killed__first__bit_axiom :
  (0 <= professionals__professional__number_of_people_killed__first__bit)

axiom professionals__professional__number_of_people_killed__last__bit_axiom :
  (professionals__professional__number_of_people_killed__first__bit <  professionals__professional__number_of_people_killed__last__bit)

axiom professionals__professional__number_of_people_killed__position_axiom :
  (0 <= professionals__professional__number_of_people_killed__position)

logic user_eq10 : us_rep2, us_rep2 -> bool

logic dummy15 : us_rep

logic dummy16 : integer

logic dummy17 : bool

logic dummy18 : professions

logic dummy19 : (int,skills) farray

logic dummy20 : natural

logic dummy21 : us_private

logic dummy22 : int

type professional__ref = { professional__content : us_rep2
}

function professional__ref___projection(a: professional__ref) : us_rep2 =
  (a).professional__content

logic new_person__22 : us_rep, us_private -> us_rep2

logic new_person__2__function_guard2 : us_rep2, us_rep, us_private -> prop

logic new_person__23 : int, us_rep, us_private -> us_rep2

logic new_person__2__function_guard3 : us_rep2, int, us_rep,
  us_private -> prop

axiom new_person__2__post_axiom :
  (forall name:us_rep.
  (forall people__date:us_private [new_person__2(name, people__date)].
  ((new_person__2(name, people__date)).attr__tag = us_tag)))

axiom new_person__2__post__dispatch_axiom :
  (forall attr__tag2:int.
  (forall name:us_rep.
  (forall people__date:us_private [new_person__21(attr__tag2, name,
  people__date)]. ((new_person__21(attr__tag2, name,
  people__date)).attr__tag = attr__tag2))))

axiom people__person__compat_axiom :
  (forall name:us_rep.
  (forall people__date:us_private [new_person__21(us_tag, name,
  people__date)]. (new_person__2(name, people__date) = new_person__21(us_tag,
  name, people__date))))

axiom professionals__professional__compat_axiom :
  (forall name:us_rep.
  (forall people__date:us_private [new_person__21(us_tag1, name,
  people__date)]. ({ us_split_fields1 = { rec__people__person__name =
  ((new_person__22(name,
  people__date)).us_split_fields3).rec__people__person__name1;
  rec__people__person__dob = ((new_person__22(name,
  people__date)).us_split_fields3).rec__people__person__dob1;
  rec__people__person__alive = ((new_person__22(name,
  people__date)).us_split_fields3).rec__people__person__alive1; rec__ext__ =
  hide_ext__(((new_person__22(name,
  people__date)).us_split_fields3).rec__professionals__professional__profession,
  ((new_person__22(name,
  people__date)).us_split_fields3).rec__professionals__professional__skilled_in,
  ((new_person__22(name,
  people__date)).us_split_fields3).rec__professionals__professional__number_of_people_killed,
  ((new_person__22(name, people__date)).us_split_fields3).rec__ext__1) };
  attr__tag = (new_person__22(name, people__date)).attr__tag1
  } = new_person__21(us_tag1, name, people__date))))

logic print__specific_post : int, us_rep2 -> prop

axiom professionals__professional__compat_axiom1 : true

logic new_professional : us_rep, int, int -> us_rep2

logic new_professional__function_guard : us_rep2, us_rep, int, int -> prop

logic new_professional1 : int, us_rep, int, int -> us_rep2

logic new_professional__function_guard1 : us_rep2, int, us_rep, int,
  int -> prop

axiom new_professional__post_axiom :
  (forall name:us_rep.
  (forall dob:int. forall prof:int [new_professional(name, dob, prof)].
  ((in_range(dob) and in_range5(prof)) -> ((new_professional(name, dob,
  prof)).attr__tag1 = us_tag1))))

axiom new_professional__post__dispatch_axiom :
  (forall attr__tag2:int. forall dob:int. forall prof:int.
  (forall name:us_rep [new_professional1(attr__tag2, name, dob, prof)].
  ((in_range(dob) and in_range5(prof)) -> ((new_professional1(attr__tag2,
  name, dob, prof)).attr__tag1 = attr__tag2))))

axiom professionals__professional__compat_axiom2 :
  (forall name:us_rep.
  (forall dob:int. forall prof:int [new_professional1(us_tag1, name, dob,
  prof)]. (new_professional(name, dob, prof) = new_professional1(us_tag1,
  name, dob, prof))))

logic new_professional__2 : us_rep1, int -> us_rep2

logic new_professional__2__function_guard : us_rep2, us_rep1, int -> prop

logic new_professional__21 : int, us_rep1, int -> us_rep2

logic new_professional__2__function_guard1 : us_rep2, int, us_rep1,
  int -> prop

axiom new_professional__2__post_axiom :
  (forall p:us_rep. forall p1:integer. forall p2:bool. forall p3:us_private.
  forall p4:int.
  (forall prof:int [new_professional__2({ us_split_fields1 = {
  rec__people__person__name = p; rec__people__person__dob = p1;
  rec__people__person__alive = p2; rec__ext__ = p3 }; attr__tag = p4 },
  prof)]. (in_range5(prof) -> ((new_professional__2({ us_split_fields1 = {
  rec__people__person__name = p; rec__people__person__dob = p1;
  rec__people__person__alive = p2; rec__ext__ = p3 }; attr__tag = p4 },
  prof)).attr__tag1 = us_tag1))))

axiom new_professional__2__post__dispatch_axiom :
  (forall attr__tag2:int. forall prof:int.
  (forall p:us_rep. forall p1:integer. forall p2:bool. forall p3:us_private.
  forall p4:int [new_professional__21(attr__tag2, { us_split_fields1 = {
  rec__people__person__name = p; rec__people__person__dob = p1;
  rec__people__person__alive = p2; rec__ext__ = p3 }; attr__tag = p4 },
  prof)]. (in_range5(prof) -> ((new_professional__21(attr__tag2, {
  us_split_fields1 = { rec__people__person__name = p;
  rec__people__person__dob = p1; rec__people__person__alive = p2;
  rec__ext__ = p3 }; attr__tag = p4 }, prof)).attr__tag1 = attr__tag2))))

axiom professionals__professional__compat_axiom3 :
  (forall p:us_rep. forall p1:integer. forall p2:bool. forall p3:us_private.
  forall p4:int.
  (forall prof:int [new_professional__21(us_tag1, { us_split_fields1 = {
  rec__people__person__name = p; rec__people__person__dob = p1;
  rec__people__person__alive = p2; rec__ext__ = p3 }; attr__tag = p4 },
  prof)]. (new_professional__2({ us_split_fields1 = {
  rec__people__person__name = p; rec__people__person__dob = p1;
  rec__people__person__alive = p2; rec__ext__ = p3 }; attr__tag = p4 },
  prof) = new_professional__21(us_tag1, { us_split_fields1 = {
  rec__people__person__name = p; rec__people__person__dob = p1;
  rec__people__person__alive = p2; rec__ext__ = p3 }; attr__tag = p4 },
  prof))))

logic has_training : us_rep2, us_private -> bool

logic has_training__function_guard : bool, us_rep2, us_private -> prop

logic has_training1 : int, us_rep2, us_private -> bool

logic has_training__function_guard1 : bool, int, us_rep2, us_private -> prop

axiom has_training__post_axiom : true

axiom has_training__post__dispatch_axiom : true

axiom professionals__professional__compat_axiom4 :
  (forall p:us_rep. forall p1:integer. forall p2:bool. forall p3:professions.
  forall p4:(int,skills) farray. forall p5:natural. forall p6:us_private.
  forall p7:int.
  (forall professionals__state:us_private [has_training1(us_tag1, {
  us_split_fields3 = { rec__people__person__name1 = p;
  rec__people__person__dob1 = p1; rec__people__person__alive1 = p2;
  rec__professionals__professional__profession = p3;
  rec__professionals__professional__skilled_in = p4;
  rec__professionals__professional__number_of_people_killed = p5;
  rec__ext__1 = p6 }; attr__tag1 = p7 }, professionals__state)].
  (to_int(has_training({ us_split_fields3 = { rec__people__person__name1 = p;
  rec__people__person__dob1 = p1; rec__people__person__alive1 = p2;
  rec__professionals__professional__profession = p3;
  rec__professionals__professional__skilled_in = p4;
  rec__professionals__professional__number_of_people_killed = p5;
  rec__ext__1 = p6 }; attr__tag1 = p7 },
  professionals__state)) = to_int(has_training1(us_tag1, { us_split_fields3 =
  { rec__people__person__name1 = p; rec__people__person__dob1 = p1;
  rec__people__person__alive1 = p2;
  rec__professionals__professional__profession = p3;
  rec__professionals__professional__skilled_in = p4;
  rec__professionals__professional__number_of_people_killed = p5;
  rec__ext__1 = p6 }; attr__tag1 = p7 }, professionals__state)))))

logic train__specific_post : int, us_split_fields2, int, us_private,
  us_split_fields2, us_private -> prop

axiom professionals__professional__compat_axiom5 : true

logic is_alive : us_rep1 -> bool

logic is_alive__function_guard : bool, us_rep1 -> prop

logic is_alive1 : int, us_rep1 -> bool

logic is_alive__function_guard1 : bool, int, us_rep1 -> prop

logic has_licence_to_kill : us_rep2 -> bool

logic has_licence_to_kill__function_guard : bool, us_rep2 -> prop

logic has_licence_to_kill1 : int, us_rep2 -> bool

logic has_licence_to_kill__function_guard1 : bool, int, us_rep2 -> prop

logic another_one_bites_the_dust__specific_post : int, us_split_fields2, int,
  us_split_fields, int, us_split_fields2, us_split_fields -> prop

axiom professionals__professional__compat_axiom6 :
  (forall professionals__another_one_bites_the_dust__killer__fields:us_rep.
  forall professionals__another_one_bites_the_dust__killer__fields1:integer.
  forall professionals__another_one_bites_the_dust__killer__fields2:bool.
  forall professionals__another_one_bites_the_dust__killer__fields3:professions.
  forall professionals__another_one_bites_the_dust__killer__fields4:(int,skills) farray.
  forall professionals__another_one_bites_the_dust__killer__fields5:natural.
  forall professionals__another_one_bites_the_dust__killer__fields6:us_private.
  forall professionals__another_one_bites_the_dust__killer__old__fields:us_rep.
  forall professionals__another_one_bites_the_dust__killer__old__fields1:integer.
  forall professionals__another_one_bites_the_dust__killer__old__fields2:bool.
  forall professionals__another_one_bites_the_dust__killer__old__fields3:professions.
  forall professionals__another_one_bites_the_dust__killer__old__fields4:(int,skills) farray.
  forall professionals__another_one_bites_the_dust__killer__old__fields5:natural.
  forall professionals__another_one_bites_the_dust__killer__old__fields6:us_private.
  (forall killer__attr__tag:int. forall victim__attr__tag:int.
  (forall professionals__another_one_bites_the_dust__victim__fields:us_rep.
  forall professionals__another_one_bites_the_dust__victim__fields1:integer.
  forall professionals__another_one_bites_the_dust__victim__fields2:bool.
  forall professionals__another_one_bites_the_dust__victim__fields3:us_private.
  forall professionals__another_one_bites_the_dust__victim__old__fields:us_rep.
  forall professionals__another_one_bites_the_dust__victim__old__fields1:integer.
  forall professionals__another_one_bites_the_dust__victim__old__fields2:bool.
  forall professionals__another_one_bites_the_dust__victim__old__fields3:us_private
  [another_one_bites_the_dust__specific_post(us_tag1, {
  rec__people__person__name1 =
  professionals__another_one_bites_the_dust__killer__fields;
  rec__people__person__dob1 =
  professionals__another_one_bites_the_dust__killer__fields1;
  rec__people__person__alive1 =
  professionals__another_one_bites_the_dust__killer__fields2;
  rec__professionals__professional__profession =
  professionals__another_one_bites_the_dust__killer__fields3;
  rec__professionals__professional__skilled_in =
  professionals__another_one_bites_the_dust__killer__fields4;
  rec__professionals__professional__number_of_people_killed =
  professionals__another_one_bites_the_dust__killer__fields5; rec__ext__1 =
  professionals__another_one_bites_the_dust__killer__fields6 },
  killer__attr__tag, { rec__people__person__name =
  professionals__another_one_bites_the_dust__victim__fields;
  rec__people__person__dob =
  professionals__another_one_bites_the_dust__victim__fields1;
  rec__people__person__alive =
  professionals__another_one_bites_the_dust__victim__fields2; rec__ext__ =
  professionals__another_one_bites_the_dust__victim__fields3 },
  victim__attr__tag, { rec__people__person__name1 =
  professionals__another_one_bites_the_dust__killer__old__fields;
  rec__people__person__dob1 =
  professionals__another_one_bites_the_dust__killer__old__fields1;
  rec__people__person__alive1 =
  professionals__another_one_bites_the_dust__killer__old__fields2;
  rec__professionals__professional__profession =
  professionals__another_one_bites_the_dust__killer__old__fields3;
  rec__professionals__professional__skilled_in =
  professionals__another_one_bites_the_dust__killer__old__fields4;
  rec__professionals__professional__number_of_people_killed =
  professionals__another_one_bites_the_dust__killer__old__fields5;
  rec__ext__1 =
  professionals__another_one_bites_the_dust__killer__old__fields6 }, {
  rec__people__person__name =
  professionals__another_one_bites_the_dust__victim__old__fields;
  rec__people__person__dob =
  professionals__another_one_bites_the_dust__victim__old__fields1;
  rec__people__person__alive =
  professionals__another_one_bites_the_dust__victim__old__fields2;
  rec__ext__ =
  professionals__another_one_bites_the_dust__victim__old__fields3 })].
  (another_one_bites_the_dust__specific_post(us_tag1, {
  rec__people__person__name1 =
  professionals__another_one_bites_the_dust__killer__fields;
  rec__people__person__dob1 =
  professionals__another_one_bites_the_dust__killer__fields1;
  rec__people__person__alive1 =
  professionals__another_one_bites_the_dust__killer__fields2;
  rec__professionals__professional__profession =
  professionals__another_one_bites_the_dust__killer__fields3;
  rec__professionals__professional__skilled_in =
  professionals__another_one_bites_the_dust__killer__fields4;
  rec__professionals__professional__number_of_people_killed =
  professionals__another_one_bites_the_dust__killer__fields5; rec__ext__1 =
  professionals__another_one_bites_the_dust__killer__fields6 },
  killer__attr__tag, { rec__people__person__name =
  professionals__another_one_bites_the_dust__victim__fields;
  rec__people__person__dob =
  professionals__another_one_bites_the_dust__victim__fields1;
  rec__people__person__alive =
  professionals__another_one_bites_the_dust__victim__fields2; rec__ext__ =
  professionals__another_one_bites_the_dust__victim__fields3 },
  victim__attr__tag, { rec__people__person__name1 =
  professionals__another_one_bites_the_dust__killer__old__fields;
  rec__people__person__dob1 =
  professionals__another_one_bites_the_dust__killer__old__fields1;
  rec__people__person__alive1 =
  professionals__another_one_bites_the_dust__killer__old__fields2;
  rec__professionals__professional__profession =
  professionals__another_one_bites_the_dust__killer__old__fields3;
  rec__professionals__professional__skilled_in =
  professionals__another_one_bites_the_dust__killer__old__fields4;
  rec__professionals__professional__number_of_people_killed =
  professionals__another_one_bites_the_dust__killer__old__fields5;
  rec__ext__1 =
  professionals__another_one_bites_the_dust__killer__old__fields6 }, {
  rec__people__person__name =
  professionals__another_one_bites_the_dust__victim__old__fields;
  rec__people__person__dob =
  professionals__another_one_bites_the_dust__victim__old__fields1;
  rec__people__person__alive =
  professionals__another_one_bites_the_dust__victim__old__fields2;
  rec__ext__ =
  professionals__another_one_bites_the_dust__victim__old__fields3 }) ->
  ((is_alive({ us_split_fields1 = { rec__people__person__name =
  professionals__another_one_bites_the_dust__killer__fields;
  rec__people__person__dob =
  professionals__another_one_bites_the_dust__killer__fields1;
  rec__people__person__alive =
  professionals__another_one_bites_the_dust__killer__fields2; rec__ext__ =
  hide_ext__(professionals__another_one_bites_the_dust__killer__fields3,
  professionals__another_one_bites_the_dust__killer__fields4,
  professionals__another_one_bites_the_dust__killer__fields5,
  professionals__another_one_bites_the_dust__killer__fields6) }; attr__tag =
  killer__attr__tag }) = true) and (not (is_alive1(victim__attr__tag, {
  us_split_fields1 = { rec__people__person__name =
  professionals__another_one_bites_the_dust__victim__fields;
  rec__people__person__dob =
  professionals__another_one_bites_the_dust__victim__fields1;
  rec__people__person__alive =
  professionals__another_one_bites_the_dust__victim__fields2; rec__ext__ =
  professionals__another_one_bites_the_dust__victim__fields3 }; attr__tag =
  victim__attr__tag }) = true)))))))

logic kenny__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic uni_student__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic zerocool__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic rambo__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic dr_house__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic temp___String_Literal_678 : unit -> (int,character) farray

axiom temp___String_Literal_678__def_axiom :
  (((((((((((((((((to_rep((temp___String_Literal_678(void)[1])) = 75) and
  (to_rep((temp___String_Literal_678(void)[2])) = 101)) and
  (to_rep((temp___String_Literal_678(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_678(void)[4])) = 110)) and
  (to_rep((temp___String_Literal_678(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_678(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_678(void)[7])) = 104)) and
  (to_rep((temp___String_Literal_678(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_678(void)[9])) = 77)) and
  (to_rep((temp___String_Literal_678(void)[10])) = 99)) and
  (to_rep((temp___String_Literal_678(void)[11])) = 67)) and
  (to_rep((temp___String_Literal_678(void)[12])) = 111)) and
  (to_rep((temp___String_Literal_678(void)[13])) = 114)) and
  (to_rep((temp___String_Literal_678(void)[14])) = 109)) and
  (to_rep((temp___String_Literal_678(void)[15])) = 105)) and
  (to_rep((temp___String_Literal_678(void)[16])) = 99)) and
  (to_rep((temp___String_Literal_678(void)[17])) = 107))

logic temp___String_Literal_679 : unit -> (int,character) farray

axiom temp___String_Literal_679__def_axiom :
  (((((((((((to_rep((temp___String_Literal_679(void)[1])) = 68) and
  (to_rep((temp___String_Literal_679(void)[2])) = 97)) and
  (to_rep((temp___String_Literal_679(void)[3])) = 100)) and
  (to_rep((temp___String_Literal_679(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_679(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_679(void)[6])) = 77)) and
  (to_rep((temp___String_Literal_679(void)[7])) = 117)) and
  (to_rep((temp___String_Literal_679(void)[8])) = 114)) and
  (to_rep((temp___String_Literal_679(void)[9])) = 112)) and
  (to_rep((temp___String_Literal_679(void)[10])) = 104)) and
  (to_rep((temp___String_Literal_679(void)[11])) = 121))

logic temp___String_Literal_680 : unit -> (int,character) farray

axiom temp___String_Literal_680__def_axiom :
  ((((((((((to_rep((temp___String_Literal_680(void)[1])) = 74) and
  (to_rep((temp___String_Literal_680(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_680(void)[3])) = 104)) and
  (to_rep((temp___String_Literal_680(void)[4])) = 110)) and
  (to_rep((temp___String_Literal_680(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_680(void)[6])) = 82)) and
  (to_rep((temp___String_Literal_680(void)[7])) = 97)) and
  (to_rep((temp___String_Literal_680(void)[8])) = 109)) and
  (to_rep((temp___String_Literal_680(void)[9])) = 98)) and
  (to_rep((temp___String_Literal_680(void)[10])) = 111))

logic temp___String_Literal_681 : unit -> (int,character) farray

axiom temp___String_Literal_681__def_axiom :
  (((((((((((((to_rep((temp___String_Literal_681(void)[1])) = 71) and
  (to_rep((temp___String_Literal_681(void)[2])) = 114)) and
  (to_rep((temp___String_Literal_681(void)[3])) = 101)) and
  (to_rep((temp___String_Literal_681(void)[4])) = 103)) and
  (to_rep((temp___String_Literal_681(void)[5])) = 111)) and
  (to_rep((temp___String_Literal_681(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_681(void)[7])) = 121)) and
  (to_rep((temp___String_Literal_681(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_681(void)[9])) = 72)) and
  (to_rep((temp___String_Literal_681(void)[10])) = 111)) and
  (to_rep((temp___String_Literal_681(void)[11])) = 117)) and
  (to_rep((temp___String_Literal_681(void)[12])) = 115)) and
  (to_rep((temp___String_Literal_681(void)[13])) = 101))

axiom is_alive__post_axiom : true

axiom is_alive__post__dispatch_axiom : true

axiom people__person__compat_axiom1 :
  (forall p:us_rep. forall p1:integer. forall p2:bool. forall p3:us_private.
  forall p4:int [is_alive1(us_tag, { us_split_fields1 = {
  rec__people__person__name = p; rec__people__person__dob = p1;
  rec__people__person__alive = p2; rec__ext__ = p3 }; attr__tag = p4 })].
  (to_int(is_alive({ us_split_fields1 = { rec__people__person__name = p;
  rec__people__person__dob = p1; rec__people__person__alive = p2;
  rec__ext__ = p3 }; attr__tag = p4 })) = to_int(is_alive1(us_tag, {
  us_split_fields1 = { rec__people__person__name = p;
  rec__people__person__dob = p1; rec__people__person__alive = p2;
  rec__ext__ = p3 }; attr__tag = p4 }))))

axiom professionals__professional__compat_axiom7 :
  (forall p:us_rep. forall p1:integer. forall p2:bool. forall p3:us_private.
  forall p4:int [is_alive1(us_tag1, { us_split_fields1 = {
  rec__people__person__name = p; rec__people__person__dob = p1;
  rec__people__person__alive = p2; rec__ext__ = p3 }; attr__tag = p4 })].
  (to_int(is_alive({ us_split_fields1 = { rec__people__person__name = p;
  rec__people__person__dob = p1; rec__people__person__alive = p2;
  rec__ext__ = p3 }; attr__tag = p4 })) = to_int(is_alive1(us_tag1, {
  us_split_fields1 = { rec__people__person__name = p;
  rec__people__person__dob = p1; rec__people__person__alive = p2;
  rec__ext__ = p3 }; attr__tag = p4 }))))

axiom new_person__2__post_axiom1 :
  (forall name:us_rep.
  (forall people__date:us_private [new_person__22(name, people__date)].
  ((new_person__22(name, people__date)).attr__tag1 = us_tag1)))

axiom new_person__2__post__dispatch_axiom1 :
  (forall attr__tag2:int.
  (forall name:us_rep.
  (forall people__date:us_private [new_person__23(attr__tag2, name,
  people__date)]. ((new_person__23(attr__tag2, name,
  people__date)).attr__tag1 = attr__tag2))))

axiom professionals__professional__compat_axiom8 :
  (forall name:us_rep.
  (forall people__date:us_private [new_person__23(us_tag1, name,
  people__date)]. (new_person__22(name,
  people__date) = new_person__23(us_tag1, name, people__date))))

axiom has_licence_to_kill__post_axiom : true

axiom has_licence_to_kill__post__dispatch_axiom : true

axiom professionals__professional__compat_axiom9 :
  (forall p:us_rep. forall p1:integer. forall p2:bool. forall p3:professions.
  forall p4:(int,skills) farray. forall p5:natural. forall p6:us_private.
  forall p7:int [has_licence_to_kill1(us_tag1, { us_split_fields3 = {
  rec__people__person__name1 = p; rec__people__person__dob1 = p1;
  rec__people__person__alive1 = p2;
  rec__professionals__professional__profession = p3;
  rec__professionals__professional__skilled_in = p4;
  rec__professionals__professional__number_of_people_killed = p5;
  rec__ext__1 = p6 }; attr__tag1 = p7 })]. (to_int(has_licence_to_kill({
  us_split_fields3 = { rec__people__person__name1 = p;
  rec__people__person__dob1 = p1; rec__people__person__alive1 = p2;
  rec__professionals__professional__profession = p3;
  rec__professionals__professional__skilled_in = p4;
  rec__professionals__professional__number_of_people_killed = p5;
  rec__ext__1 = p6 }; attr__tag1 = p7
  })) = to_int(has_licence_to_kill1(us_tag1, { us_split_fields3 = {
  rec__people__person__name1 = p; rec__people__person__dob1 = p1;
  rec__people__person__alive1 = p2;
  rec__professionals__professional__profession = p3;
  rec__professionals__professional__skilled_in = p4;
  rec__professionals__professional__number_of_people_killed = p5;
  rec__ext__1 = p6 }; attr__tag1 = p7 }))))

 (* File "main.adb", line 8, characters 0-0 *)
goal WP_parameter_def :
  (forall date:us_private. forall kenny__split_fields:us_rep.
  forall kenny__split_fields1:integer. forall kenny__split_fields2:bool.
  forall kenny__split_fields3:us_private.
  forall uni_student__split_fields:us_rep.
  forall uni_student__split_fields1:integer.
  forall uni_student__split_fields2:bool.
  forall uni_student__split_fields3:professions.
  forall uni_student__split_fields4:(int,skills) farray.
  forall uni_student__split_fields5:natural.
  forall uni_student__split_fields6:us_private.
  forall zerocool__split_fields:us_rep.
  forall zerocool__split_fields1:integer.
  forall zerocool__split_fields2:bool.
  forall zerocool__split_fields3:professions.
  forall zerocool__split_fields4:(int,skills) farray.
  forall zerocool__split_fields5:natural.
  forall zerocool__split_fields6:us_private.
  forall rambo__split_fields:us_rep. forall rambo__split_fields1:integer.
  forall rambo__split_fields2:bool. forall rambo__split_fields3:professions.
  forall rambo__split_fields4:(int,skills) farray.
  forall rambo__split_fields5:natural.
  forall rambo__split_fields6:us_private.
  forall dr_house__split_fields:us_rep.
  forall dr_house__split_fields1:integer.
  forall dr_house__split_fields2:bool.
  forall dr_house__split_fields3:professions.
  forall dr_house__split_fields4:(int,skills) farray.
  forall dr_house__split_fields5:natural.
  forall dr_house__split_fields6:us_private. forall skill:int.
  forall o:us_rep. forall main__kenny__assume:us_rep.
  forall main__kenny__assume1:integer. forall main__kenny__assume2:bool.
  forall main__kenny__assume3:us_private. forall main__kenny__assume4:int.
  forall main__uni_student__assume:us_rep.
  forall main__uni_student__assume1:integer.
  forall main__uni_student__assume2:bool.
  forall main__uni_student__assume3:professions.
  forall main__uni_student__assume4:(int,skills) farray.
  forall main__uni_student__assume5:natural.
  forall main__uni_student__assume6:us_private.
  forall main__uni_student__assume7:int. forall o1:us_rep.
  forall main__zerocool__assume:us_rep.
  forall main__zerocool__assume1:integer.
  forall main__zerocool__assume2:bool.
  forall main__zerocool__assume3:professions.
  forall main__zerocool__assume4:(int,skills) farray.
  forall main__zerocool__assume5:natural.
  forall main__zerocool__assume6:us_private.
  forall main__zerocool__assume7:int. forall o2:us_rep.
  forall main__rambo__assume:us_rep. forall main__rambo__assume1:integer.
  forall main__rambo__assume2:bool. forall main__rambo__assume3:professions.
  forall main__rambo__assume4:(int,skills) farray.
  forall main__rambo__assume5:natural.
  forall main__rambo__assume6:us_private. forall main__rambo__assume7:int.
  forall o3:us_rep. forall main__dr_house__assume:us_rep.
  forall main__dr_house__assume1:integer.
  forall main__dr_house__assume2:bool.
  forall main__dr_house__assume3:professions.
  forall main__dr_house__assume4:(int,skills) farray.
  forall main__dr_house__assume5:natural.
  forall main__dr_house__assume6:us_private.
  forall main__dr_house__assume7:int. forall result:us_rep.
  forall result1:integer. forall result2:bool. forall result3:us_private.
  forall kenny__split_fields4:us_rep. forall kenny__split_fields5:integer.
  forall kenny__split_fields6:bool. forall kenny__split_fields7:us_private.
  forall result4:us_rep. forall result5:integer. forall result6:bool.
  forall result7:professions. forall result8:(int,skills) farray.
  forall result9:natural. forall result10:us_private.
  forall uni_student__split_fields7:us_rep.
  forall uni_student__split_fields8:integer.
  forall uni_student__split_fields9:bool.
  forall uni_student__split_fields10:professions.
  forall uni_student__split_fields11:(int,skills) farray.
  forall uni_student__split_fields12:natural.
  forall uni_student__split_fields13:us_private. forall result11:us_rep.
  forall result12:integer. forall result13:bool. forall result14:professions.
  forall result15:(int,skills) farray. forall result16:natural.
  forall result17:us_private. forall zerocool__split_fields7:us_rep.
  forall zerocool__split_fields8:integer.
  forall zerocool__split_fields9:bool.
  forall zerocool__split_fields10:professions.
  forall zerocool__split_fields11:(int,skills) farray.
  forall zerocool__split_fields12:natural.
  forall zerocool__split_fields13:us_private. forall result18:us_rep.
  forall result19:integer. forall result20:bool. forall result21:professions.
  forall result22:(int,skills) farray. forall result23:natural.
  forall result24:us_private. forall rambo__split_fields7:us_rep.
  forall rambo__split_fields8:integer. forall rambo__split_fields9:bool.
  forall rambo__split_fields10:professions.
  forall rambo__split_fields11:(int,skills) farray.
  forall rambo__split_fields12:natural.
  forall rambo__split_fields13:us_private. forall result25:us_rep.
  forall result26:integer. forall result27:bool. forall result28:professions.
  forall result29:(int,skills) farray. forall result30:natural.
  forall result31:us_private. forall dr_house__split_fields7:us_rep.
  forall dr_house__split_fields8:integer.
  forall dr_house__split_fields9:bool.
  forall dr_house__split_fields10:professions.
  forall dr_house__split_fields11:(int,skills) farray.
  forall dr_house__split_fields12:natural.
  forall dr_house__split_fields13:us_private. forall result32:int.
  forall skill1:int. forall state:us_private. forall result33:bool.
  forall uni_student__split_fields14:us_rep.
  forall uni_student__split_fields15:integer.
  forall uni_student__split_fields16:bool.
  forall uni_student__split_fields17:professions.
  forall uni_student__split_fields18:(int,skills) farray.
  forall uni_student__split_fields19:natural.
  forall uni_student__split_fields20:us_private. forall result34:bool.
  ((((o = to_unbounded_string({ elts = temp___String_Literal_678(void); rt =
  mk(1, 17) })) and ({ us_split_fields1 = { rec__people__person__name =
  main__kenny__assume; rec__people__person__dob = main__kenny__assume1;
  rec__people__person__alive = main__kenny__assume2; rec__ext__ =
  main__kenny__assume3 }; attr__tag = main__kenny__assume4
  } = new_person__2(o, date))) and ((((result = kenny__split_fields) and
  ((result1 = kenny__split_fields1) and ((result2 = kenny__split_fields2) and
  (result3 = kenny__split_fields3)))) and
  ((main__kenny__assume = kenny__split_fields4) and
  ((main__kenny__assume1 = kenny__split_fields5) and
  ((main__kenny__assume2 = kenny__split_fields6) and
  (main__kenny__assume3 = kenny__split_fields7))))) and
  (kenny__attr__tag = us_tag))) -> ((({ us_split_fields3 = {
  rec__people__person__name1 = main__uni_student__assume;
  rec__people__person__dob1 = main__uni_student__assume1;
  rec__people__person__alive1 = main__uni_student__assume2;
  rec__professionals__professional__profession = main__uni_student__assume3;
  rec__professionals__professional__skilled_in = main__uni_student__assume4;
  rec__professionals__professional__number_of_people_killed =
  main__uni_student__assume5; rec__ext__1 = main__uni_student__assume6 };
  attr__tag1 = main__uni_student__assume7 } = new_professional__2({
  us_split_fields1 = { rec__people__person__name = kenny__split_fields4;
  rec__people__person__dob = kenny__split_fields5;
  rec__people__person__alive = kenny__split_fields6; rec__ext__ =
  kenny__split_fields7 }; attr__tag = kenny__attr__tag }, 0)) and
  ((((result4 = uni_student__split_fields) and
  ((result5 = uni_student__split_fields1) and
  ((result6 = uni_student__split_fields2) and
  ((result7 = uni_student__split_fields3) and
  ((result8 = uni_student__split_fields4) and
  ((result9 = uni_student__split_fields5) and
  (result10 = uni_student__split_fields6))))))) and
  ((main__uni_student__assume = uni_student__split_fields7) and
  ((main__uni_student__assume1 = uni_student__split_fields8) and
  ((main__uni_student__assume2 = uni_student__split_fields9) and
  ((main__uni_student__assume3 = uni_student__split_fields10) and
  ((main__uni_student__assume4 = uni_student__split_fields11) and
  ((main__uni_student__assume5 = uni_student__split_fields12) and
  (main__uni_student__assume6 = uni_student__split_fields13)))))))) and
  (uni_student__attr__tag = us_tag1))) -> ((((o1 = to_unbounded_string({
  elts = temp___String_Literal_679(void); rt = mk(1, 11) })) and ({
  us_split_fields3 = { rec__people__person__name1 = main__zerocool__assume;
  rec__people__person__dob1 = main__zerocool__assume1;
  rec__people__person__alive1 = main__zerocool__assume2;
  rec__professionals__professional__profession = main__zerocool__assume3;
  rec__professionals__professional__skilled_in = main__zerocool__assume4;
  rec__professionals__professional__number_of_people_killed =
  main__zerocool__assume5; rec__ext__1 = main__zerocool__assume6 };
  attr__tag1 = main__zerocool__assume7 } = new_professional(o1, 1011977,
  1))) and ((((result11 = zerocool__split_fields) and
  ((result12 = zerocool__split_fields1) and
  ((result13 = zerocool__split_fields2) and
  ((result14 = zerocool__split_fields3) and
  ((result15 = zerocool__split_fields4) and
  ((result16 = zerocool__split_fields5) and
  (result17 = zerocool__split_fields6))))))) and
  ((main__zerocool__assume = zerocool__split_fields7) and
  ((main__zerocool__assume1 = zerocool__split_fields8) and
  ((main__zerocool__assume2 = zerocool__split_fields9) and
  ((main__zerocool__assume3 = zerocool__split_fields10) and
  ((main__zerocool__assume4 = zerocool__split_fields11) and
  ((main__zerocool__assume5 = zerocool__split_fields12) and
  (main__zerocool__assume6 = zerocool__split_fields13)))))))) and
  (zerocool__attr__tag = us_tag1))) -> ((((o2 = to_unbounded_string({ elts =
  temp___String_Literal_680(void); rt = mk(1, 10) })) and ({
  us_split_fields3 = { rec__people__person__name1 = main__rambo__assume;
  rec__people__person__dob1 = main__rambo__assume1;
  rec__people__person__alive1 = main__rambo__assume2;
  rec__professionals__professional__profession = main__rambo__assume3;
  rec__professionals__professional__skilled_in = main__rambo__assume4;
  rec__professionals__professional__number_of_people_killed =
  main__rambo__assume5; rec__ext__1 = main__rambo__assume6 }; attr__tag1 =
  main__rambo__assume7 } = new_professional(o2, 6071946, 2))) and
  ((((result18 = rambo__split_fields) and
  ((result19 = rambo__split_fields1) and
  ((result20 = rambo__split_fields2) and
  ((result21 = rambo__split_fields3) and
  ((result22 = rambo__split_fields4) and
  ((result23 = rambo__split_fields5) and
  (result24 = rambo__split_fields6))))))) and
  ((rambo__split_fields7 = main__rambo__assume) and
  ((rambo__split_fields8 = main__rambo__assume1) and
  ((rambo__split_fields9 = main__rambo__assume2) and
  ((rambo__split_fields10 = main__rambo__assume3) and
  ((rambo__split_fields11 = main__rambo__assume4) and
  ((rambo__split_fields12 = main__rambo__assume5) and
  (rambo__split_fields13 = main__rambo__assume6)))))))) and
  (rambo__attr__tag = us_tag1))) -> ((((o3 = to_unbounded_string({ elts =
  temp___String_Literal_681(void); rt = mk(1, 13) })) and ({
  us_split_fields3 = { rec__people__person__name1 = main__dr_house__assume;
  rec__people__person__dob1 = main__dr_house__assume1;
  rec__people__person__alive1 = main__dr_house__assume2;
  rec__professionals__professional__profession = main__dr_house__assume3;
  rec__professionals__professional__skilled_in = main__dr_house__assume4;
  rec__professionals__professional__number_of_people_killed =
  main__dr_house__assume5; rec__ext__1 = main__dr_house__assume6 };
  attr__tag1 = main__dr_house__assume7 } = new_professional(o3, 11061959,
  3))) and ((((result25 = dr_house__split_fields) and
  ((result26 = dr_house__split_fields1) and
  ((result27 = dr_house__split_fields2) and
  ((result28 = dr_house__split_fields3) and
  ((result29 = dr_house__split_fields4) and
  ((result30 = dr_house__split_fields5) and
  (result31 = dr_house__split_fields6))))))) and
  ((dr_house__split_fields7 = main__dr_house__assume) and
  ((dr_house__split_fields8 = main__dr_house__assume1) and
  ((dr_house__split_fields9 = main__dr_house__assume2) and
  ((dr_house__split_fields10 = main__dr_house__assume3) and
  ((dr_house__split_fields11 = main__dr_house__assume4) and
  ((dr_house__split_fields12 = main__dr_house__assume5) and
  (dr_house__split_fields13 = main__dr_house__assume6)))))))) and
  (dr_house__attr__tag = us_tag1))) -> (((result32 = skill) and
  (skill1 = 0)) -> (((result33 = has_training({ us_split_fields3 = {
  rec__people__person__name1 = uni_student__split_fields7;
  rec__people__person__dob1 = uni_student__split_fields8;
  rec__people__person__alive1 = uni_student__split_fields9;
  rec__professionals__professional__profession = uni_student__split_fields10;
  rec__professionals__professional__skilled_in = uni_student__split_fields11;
  rec__professionals__professional__number_of_people_killed =
  uni_student__split_fields12; rec__ext__1 = uni_student__split_fields13 };
  attr__tag1 = uni_student__attr__tag }, state)) and ((result33 = true) or
  ((not (result33 = true)) and
  ((uni_student__split_fields14 = uni_student__split_fields7) and
  ((uni_student__split_fields15 = uni_student__split_fields8) and
  ((uni_student__split_fields16 = uni_student__split_fields9) and
  ((uni_student__split_fields17 = uni_student__split_fields10) and
  ((uni_student__split_fields18 = uni_student__split_fields11) and
  ((uni_student__split_fields19 = uni_student__split_fields12) and
  (uni_student__split_fields20 = uni_student__split_fields13)))))))))) ->
  ((result34 = has_training({ us_split_fields3 = {
  rec__people__person__name1 = zerocool__split_fields7;
  rec__people__person__dob1 = zerocool__split_fields8;
  rec__people__person__alive1 = zerocool__split_fields9;
  rec__professionals__professional__profession = zerocool__split_fields10;
  rec__professionals__professional__skilled_in = zerocool__split_fields11;
  rec__professionals__professional__number_of_people_killed =
  zerocool__split_fields12; rec__ext__1 = zerocool__split_fields13 };
  attr__tag1 = zerocool__attr__tag }, state)) -> ((result34 = true) ->
  (has_training({ us_split_fields3 = { rec__people__person__name1 =
  zerocool__split_fields7; rec__people__person__dob1 =
  zerocool__split_fields8; rec__people__person__alive1 =
  zerocool__split_fields9; rec__professionals__professional__profession =
  zerocool__split_fields10; rec__professionals__professional__skilled_in =
  zerocool__split_fields11;
  rec__professionals__professional__number_of_people_killed =
  zerocool__split_fields12; rec__ext__1 = zerocool__split_fields13 };
  attr__tag1 = zerocool__attr__tag }, state) = true)))))))))))
