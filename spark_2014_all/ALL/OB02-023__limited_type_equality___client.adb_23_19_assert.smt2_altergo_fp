(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__p1__normal_record__x : integer
}

function us_split_fields_X__projection(a: us_split_fields) : integer =
  (a).rec__p1__normal_record__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_fields1).rec__p1__normal_record__x) = to_rep(((b).us_split_fields1).rec__p1__normal_record__x)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__p1__normal_record__x) = to_rep(((b).us_split_fields1).rec__p1__normal_record__x))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. (0 <= object__size({ us_split_fields1 = {
  rec__p1__normal_record__x = a } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. (0 <= object__alignment({ us_split_fields1 = {
  rec__p1__normal_record__x = a } })))

logic p1__normal_record__x__first__bit : int

logic p1__normal_record__x__last__bit : int

logic p1__normal_record__x__position : int

axiom p1__normal_record__x__first__bit_axiom :
  (0 <= p1__normal_record__x__first__bit)

axiom p1__normal_record__x__last__bit_axiom :
  (p1__normal_record__x__first__bit <  p1__normal_record__x__last__bit)

axiom p1__normal_record__x__position_axiom :
  (0 <= p1__normal_record__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

type normal_record__ref = { normal_record__content : us_rep
}

function normal_record__ref___projection(a: normal_record__ref) : us_rep =
  (a).normal_record__content

type us_split_fields2 = { rec__p2__limited_record__x : integer
}

function us_split_fields_X__2__projection(a: us_split_fields2) : integer =
  (a).rec__p2__limited_record__x

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. (0 <= object__size1({ us_split_fields3 = {
  rec__p2__limited_record__x = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. (0 <= object__alignment1({ us_split_fields3 = {
  rec__p2__limited_record__x = a } })))

logic p2__limited_record__x__first__bit : int

logic p2__limited_record__x__last__bit : int

logic p2__limited_record__x__position : int

axiom p2__limited_record__x__first__bit_axiom :
  (0 <= p2__limited_record__x__first__bit)

axiom p2__limited_record__x__last__bit_axiom :
  (p2__limited_record__x__first__bit <  p2__limited_record__x__last__bit)

axiom p2__limited_record__x__position_axiom :
  (0 <= p2__limited_record__x__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : integer

type limited_record__ref = { limited_record__content : us_rep1
}

function limited_record__ref___projection(a: limited_record__ref) : us_rep1 =
  (a).limited_record__content

type us_split_fields4 = { rec__p3__limited_record_with_user_eq__x : integer
}

function us_split_fields_X__3__projection(a: us_split_fields4) : integer =
  (a).rec__p3__limited_record_with_user_eq__x

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:integer. (0 <= object__size2({ us_split_fields5 = {
  rec__p3__limited_record_with_user_eq__x = a } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:integer. (0 <= object__alignment2({ us_split_fields5 = {
  rec__p3__limited_record_with_user_eq__x = a } })))

logic p3__limited_record_with_user_eq__x__first__bit : int

logic p3__limited_record_with_user_eq__x__last__bit : int

logic p3__limited_record_with_user_eq__x__position : int

axiom p3__limited_record_with_user_eq__x__first__bit_axiom :
  (0 <= p3__limited_record_with_user_eq__x__first__bit)

axiom p3__limited_record_with_user_eq__x__last__bit_axiom :
  (p3__limited_record_with_user_eq__x__first__bit <  p3__limited_record_with_user_eq__x__last__bit)

axiom p3__limited_record_with_user_eq__x__position_axiom :
  (0 <= p3__limited_record_with_user_eq__x__position)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy3 : integer

type limited_record_with_user_eq__ref = {
limited_record_with_user_eq__content : us_rep2
}

function limited_record_with_user_eq__ref___projection(a: limited_record_with_user_eq__ref) : us_rep2 =
  (a).limited_record_with_user_eq__content

logic oeq : us_rep2, us_rep2 -> bool

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom :
  (forall a:integer. forall b:integer [user_eq3({ us_split_fields5 = {
  rec__p3__limited_record_with_user_eq__x = a } }, { us_split_fields5 = {
  rec__p3__limited_record_with_user_eq__x = b } })]. (user_eq3({
  us_split_fields5 = { rec__p3__limited_record_with_user_eq__x = a } }, {
  us_split_fields5 = { rec__p3__limited_record_with_user_eq__x = b }
  }) = oeq({ us_split_fields5 = { rec__p3__limited_record_with_user_eq__x = a
  } }, { us_split_fields5 = { rec__p3__limited_record_with_user_eq__x = b }
  })))

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall left:integer. forall right:integer [oeq({ us_split_fields5 = {
  rec__p3__limited_record_with_user_eq__x = left } }, { us_split_fields5 = {
  rec__p3__limited_record_with_user_eq__x = right } })]. ((oeq({
  us_split_fields5 = { rec__p3__limited_record_with_user_eq__x = left } }, {
  us_split_fields5 = { rec__p3__limited_record_with_user_eq__x = right }
  }) = true) <-> (to_rep(left) = to_rep(right))))

type index

predicate in_range1(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq4 : index, index -> bool

logic dummy4 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__p1__normal_record__x = v } }, i)[i])]. ((singleton({
  us_split_fields1 = { rec__p1__normal_record__x = v } }, i)[i]) = {
  us_split_fields1 = { rec__p1__normal_record__x = v } })))

logic bool_eq4 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq2((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq2((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq4(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq2((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

type map__ref1 = { map__content1 : (int,us_rep1) farray
}

logic slide1 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq1 :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def1 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def1 :
  (forall v:integer.
  (forall i:int [(singleton1({ us_split_fields3 = {
  rec__p2__limited_record__x = v } }, i)[i])]. ((singleton1({
  us_split_fields3 = { rec__p2__limited_record__x = v } }, i)[i]) = {
  us_split_fields3 = { rec__p2__limited_record__x = v } })))

logic bool_eq5 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

type map__ref2 = { map__content2 : (int,us_rep2) farray
}

logic slide2 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq2 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def2 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def2 :
  (forall v:integer.
  (forall i:int [(singleton2({ us_split_fields5 = {
  rec__p3__limited_record_with_user_eq__x = v } }, i)[i])]. ((singleton2({
  us_split_fields5 = { rec__p3__limited_record_with_user_eq__x = v } },
  i)[i]) = { us_split_fields5 = { rec__p3__limited_record_with_user_eq__x = v
  } })))

logic bool_eq6 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

logic oeq1 : (int,us_rep2) farray, (int,us_rep2) farray -> bool

logic oeq__function_guard1 : bool, (int,us_rep2) farray,
  (int,us_rep2) farray -> prop

axiom oeq__post_axiom1 : true

axiom oeq__def_axiom1 :
  (forall left:(int,us_rep2) farray. forall right:(int,us_rep2) farray
  [oeq1(left, right)]. ((oeq1(left, right) = true) <->
  (forall x:int. (((1 <= x) and (x <= 3)) -> (oeq((left[x]),
  (right[x])) = true)))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

 (* File "client.adb", line 8, characters 0-0 *)
goal WP_parameter_def :
  (forall x__split_fields:integer. forall z__split_fields:integer.
  ((bool_eq2({ us_split_fields1 = { rec__p1__normal_record__x =
  x__split_fields } }, { us_split_fields1 = { rec__p1__normal_record__x =
  x__split_fields } }) = true) -> (oeq({ us_split_fields5 = {
  rec__p3__limited_record_with_user_eq__x = z__split_fields } }, {
  us_split_fields5 = { rec__p3__limited_record_with_user_eq__x =
  z__split_fields } }) = true)))
