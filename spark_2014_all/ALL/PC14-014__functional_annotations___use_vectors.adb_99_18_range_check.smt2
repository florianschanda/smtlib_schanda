;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort tcount_typeB 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tcount_typeB tcount_typeB) Bool)

(declare-const dummy1 tcount_typeB)

(declare-datatypes ((tcount_typeB__ref 0))
(((mk_tcount_typeB__ref (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref___projection ((a tcount_typeB__ref)) tcount_typeB
  (tcount_typeB__content a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-const first Int)

(declare-const last Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-const dummy2 integer)

(declare-datatypes ((index_type__ref 0))
(((mk_index_type__ref (index_type__content integer)))))
(define-fun index_type__ref___projection ((a index_type__ref)) integer
  (index_type__content a))

(declare-const fst Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const lst Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant ((temp___expr_195 Int)
  (temp___is_init_192 Bool) (temp___skip_constant_193 Bool)
  (temp___do_toplevel_194 Bool)) Bool (=>
                                      (or (= temp___is_init_192 true)
                                      (<= first last)) (dynamic_property
                                      first last temp___expr_195)))

;; first__def_axiom
  (assert (= first fst))

;; last__def_axiom
  (assert (= last lst))

(declare-const first1 Int)

(declare-const last1 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ((index_type__ref1 0))
(((mk_index_type__ref1 (index_type__content1 integer)))))
(define-fun index_type__ref_2__projection ((a index_type__ref1)) integer
  (index_type__content1 a))

(declare-const first2 Int)

(declare-const last2 Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-const dummy4 integer)

(declare-datatypes ((extended_index__ref 0))
(((mk_extended_index__ref (extended_index__content integer)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) integer
  (extended_index__content a))

(declare-fun to_rep1 (tcount_typeB) Int)

(declare-fun of_rep1 (Int) tcount_typeB)

;; inversion_axiom
  (assert
  (forall ((x tcount_typeB))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x tcount_typeB)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-const last3 Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (tcount_typeB tcount_typeB) Bool)

(declare-const dummy5 tcount_typeB)

(declare-datatypes ((capacity_range__ref 0))
(((mk_capacity_range__ref (capacity_range__content tcount_typeB)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) tcount_typeB
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs
  (rec__use_vectors__my_vectors__vector__capacity tcount_typeB)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) tcount_typeB
  (rec__use_vectors__my_vectors__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__use_vectors__my_vectors__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields)) us_main_type
  (rec__use_vectors__my_vectors__vector a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep_2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const use_vectors__my_vectors__vector__capacity__first__bit Int)

(declare-const use_vectors__my_vectors__vector__capacity__last__bit Int)

(declare-const use_vectors__my_vectors__vector__capacity__position Int)

;; use_vectors__my_vectors__vector__capacity__first__bit_axiom
  (assert (<= 0 use_vectors__my_vectors__vector__capacity__first__bit))

;; use_vectors__my_vectors__vector__capacity__last__bit_axiom
  (assert
  (< use_vectors__my_vectors__vector__capacity__first__bit use_vectors__my_vectors__vector__capacity__last__bit))

;; use_vectors__my_vectors__vector__capacity__position_axiom
  (assert (<= 0 use_vectors__my_vectors__vector__capacity__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((vector__ref 0))
(((mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep (vector__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_231 us_rep)
  (temp___is_init_228 Bool) (temp___skip_constant_229 Bool)
  (temp___do_toplevel_230 Bool)) Bool (dynamic_property3 0 last3
  (to_rep1
  (rec__use_vectors__my_vectors__vector__capacity
  (us_split_discrs1 temp___expr_231)))))

(define-fun capacity ((container us_rep)) Int (ite (= (of_int 0) true)
                                              (to_rep1
                                              (rec__use_vectors__my_vectors__vector__capacity
                                              (us_split_discrs1 container)))
                                              last3))

(declare-fun capacity__function_guard (Int us_rep) Bool)

(declare-const last_count Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant2 ((temp___expr_225 Int)
  (temp___is_init_222 Bool) (temp___skip_constant_223 Bool)
  (temp___do_toplevel_224 Bool)) Bool (=>
                                      (or (= temp___is_init_222 true)
                                      (<= 0 last3)) (dynamic_property3 0
                                      last3 temp___expr_225)))

;; last__def_axiom
  (assert (= last3 last_count))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (=> (dynamic_invariant1 container true true true)
     (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant2 result true
     false true)))) :pattern ((length container)) )))

(declare-const first3 Int)

(declare-const last4 Int)

(define-fun dynamic_property4 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ((extended_index__ref1 0))
(((mk_extended_index__ref1 (extended_index__content1 integer)))))
(define-fun extended_index__ref_2__projection ((a extended_index__ref1)) integer
  (extended_index__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content
                                                                   a))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(declare-const first4 Int)

(declare-const last5 Int)

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (integer integer) Bool)

(declare-const dummy9 integer)

(declare-datatypes ((index_type__ref2 0))
(((mk_index_type__ref2 (index_type__content2 integer)))))
(define-fun index_type__ref_3__projection ((a index_type__ref2)) integer
  (index_type__content2 a))

(declare-sort element_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (element_type element_type) Bool)

(declare-const dummy10 element_type)

(declare-datatypes ((element_type__ref 0))
(((mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref_3__projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_246 Int)
  (temp___is_init_243 Bool) (temp___skip_constant_244 Bool)
  (temp___do_toplevel_245 Bool)) Bool (=>
                                      (or (= temp___is_init_243 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range3 temp___expr_246)))

(define-fun dynamic_invariant4 ((temp___expr_252 Int)
  (temp___is_init_249 Bool) (temp___skip_constant_250 Bool)
  (temp___do_toplevel_251 Bool)) Bool (=>
                                      (or (= temp___is_init_249 true)
                                      (<= first3 last4)) (dynamic_property4
                                      first3 last4 temp___expr_252)))

;; first__def_axiom
  (assert (= first3 (- first4 1)))

;; last__def_axiom
  (assert (= last4 last5))

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(define-fun last6 ((container us_rep1)) Int (+ (- first4 1) (length1
                                                            container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(define-fun oeq ((left us_rep1)
  (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and
                                                                (<= first4 n)
                                                                (<= n
                                                                (last6 left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq8 a b) (oeq a b)) :pattern ((user_eq8 a b)) )))

(define-fun default_initial_assumption ((temp___expr_259 us_rep1)
  (temp___skip_top_level_260 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_260 true))
                                         (= (length1 temp___expr_259) 0)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant4 position true true true)
     (and (<= first4 position) (<= position (last6 container))))
     (dynamic_invariant3 (get container position) true false true)) :pattern (
  (get container position)) ))))

(declare-fun model__ (us_rep) us_rep1)

(declare-fun model____function_guard (us_rep1 us_rep) Bool)

;; model____post_axiom
  (assert
  (forall ((container us_rep))
  (! (=> (dynamic_invariant1 container true true true)
     (= (length1 (model__ container)) (length container))) :pattern (
  (model__ container)) )))

(define-fun last_index ((container us_rep)) Int (last6 (model__ container)))

(declare-fun last_index__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant5 ((temp___expr_219 Int)
  (temp___is_init_216 Bool) (temp___skip_constant_217 Bool)
  (temp___do_toplevel_218 Bool)) Bool (=>
                                      (or (= temp___is_init_216 true)
                                      (<= first2 last2)) (dynamic_property2
                                      first2 last2 temp___expr_219)))

;; first__def_axiom
  (assert (= first2 (- first1 1)))

;; last__def_axiom
  (assert (= last2 (+ (ite (< 2147483646 last1) 2147483646 last1) 1)))

(define-fun element ((container us_rep)
  (index Int)) Int (get (model__ container) index))

(declare-fun element__function_guard (Int us_rep Int) Bool)

(declare-sort element_type1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq11 (element_type1 element_type1) Bool)

(declare-const dummy11 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_2__projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant6 ((temp___expr_213 Int)
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)) Bool (=>
                                      (or (= temp___is_init_210 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range4 temp___expr_213)))

(declare-fun first_index__function_guard (Int us_rep) Bool)

(define-fun range_equal ((left us_rep1) (right us_rep1) (fst1 Int)
  (lst1 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst1 i) (<= i lst1))
                        (= (get left i) (get right i))))
                   true false))

(declare-fun range_equal__function_guard (Bool us_rep1 us_rep1 Int Int) Bool)

(define-fun range_shifted ((left us_rep1) (right us_rep1) (fst1 Int)
  (lst1 Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst1 i) (<= i lst1))
                               (= (get left i) (get right (+ i offset)))))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst1 offset) i)
                                           (<= i (+ lst1 offset)))
                                           (= (get left (- i offset))
                                           (get right i))))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep1 us_rep1 Int Int
  Int) Bool)

(declare-const v__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant7 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun id (Int Int Int) Int)

(declare-fun id__function_guard (Int Int Int Int) Bool)

;; id__post_axiom
  (assert
  (forall ((x Int) (f Int) (l Int))
  (! (=>
     (and
     (and (dynamic_invariant7 x true true true) (dynamic_invariant7 f true
     true true)) (dynamic_invariant7 l true true true))
     (let ((result (id x f l)))
     (and (=> (and (<= f x) (<= x l)) (and (<= f result) (<= result l)))
     (dynamic_invariant7 result true false true)))) :pattern ((id x f l)) )))

;; fst__def_axiom
  (assert (= fst (id 1 (- 2147483647) 2147483647)))

;; lst__def_axiom
  (assert (= lst (id 2147483647 fst 2147483647)))

(declare-sort count_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq12 (count_type count_type) Bool)

(declare-const dummy12 count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(define-fun dynamic_invariant8 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_141)))

;; last_count__def_axiom
  (assert
  (= last_count (ite (< last1 first1) 0
                (ite (or (< last1 (- 1)) (< (- last1 2147483647) first1))
                (+ (- last1 first1) 1) 2147483647))))

(define-fun dynamic_invariant9 ((temp___expr_207 Int)
  (temp___is_init_204 Bool) (temp___skip_constant_205 Bool)
  (temp___do_toplevel_206 Bool)) Bool (=>
                                      (or (= temp___is_init_204 true)
                                      (<= first1 last1)) (dynamic_property1
                                      first1 last1 temp___expr_207)))

;; first__def_axiom
  (assert (= first1 fst))

;; last__def_axiom
  (assert (= last1 lst))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length1 container)))
     (and (<= (+ (- first4 1) result) last5) (dynamic_invariant8 result true
     false true))) :pattern ((length1 container)) )))

(define-fun dynamic_invariant10 ((temp___expr_240 Int)
  (temp___is_init_237 Bool) (temp___skip_constant_238 Bool)
  (temp___do_toplevel_239 Bool)) Bool (=>
                                      (or (= temp___is_init_237 true)
                                      (<= first4 last5)) (dynamic_property5
                                      first4 last5 temp___expr_240)))

;; first__def_axiom
  (assert (= first4 fst))

;; last__def_axiom
  (assert (= last5 lst))

(declare-const v__split_fields us_main_type)

(declare-const us Int)

(declare-const o Int)

(declare-const us1 Int)

(declare-const o1 Int)

(declare-const us2 Int)

(declare-const o2 Int)

(declare-const us3 Int)

(declare-const o3 Int)

(declare-const us4 Int)

(declare-const o4 Int)

(declare-const us5 Int)

(declare-const o5 Int)

(declare-const v__split_fields1 us_main_type)

(declare-const v__split_fields2 us_main_type)

(declare-const v__split_fields3 us_main_type)

(declare-const v__split_fields4 us_main_type)

(declare-const v__split_fields5 us_main_type)

(declare-const v__split_fields6 us_main_type)

(define-fun v__split_fields7 () us_split_fields (mk___split_fields
                                                v__split_fields6))

(define-fun v__split_fields8 () us_split_fields (mk___split_fields
                                                v__split_fields5))

(define-fun v__split_fields9 () us_split_fields (mk___split_fields
                                                v__split_fields4))

(define-fun v__split_fields10 () us_split_fields (mk___split_fields
                                                 v__split_fields3))

(define-fun v__split_fields11 () us_split_fields (mk___split_fields
                                                 v__split_fields2))

(define-fun v__split_fields12 () us_split_fields (mk___split_fields
                                                 v__split_fields1))

;; H
  (assert (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs))))

;; H
  (assert (dynamic_property first last i))

;; H
  (assert
  (and
  (<= i (last6
        (model__
        (mk___rep v__split_discrs (mk___split_fields v__split_fields)))))
  (<= (length (mk___rep v__split_discrs (mk___split_fields v__split_fields))) (-
  (capacity (mk___rep v__split_discrs (mk___split_fields v__split_fields))) 7))))

;; H
  (assert (and (= us i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields12)) (+ (length
                                                              (mk___rep
                                                              v__split_discrs
                                                              (mk___split_fields
                                                              v__split_fields))) 1))
  (= (range_equal
     (model__ (mk___rep v__split_discrs (mk___split_fields v__split_fields)))
     (model__ (mk___rep v__split_discrs v__split_fields12)) first1 (-
     o 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields12)) o) 0))
  (= (range_shifted
     (model__ (mk___rep v__split_discrs (mk___split_fields v__split_fields)))
     (model__ (mk___rep v__split_discrs v__split_fields12)) o
     (last6
     (model__ (mk___rep v__split_discrs (mk___split_fields v__split_fields))))
     1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us1 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o1 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields11)) (+ (length
                                                              (mk___rep
                                                              v__split_discrs
                                                              v__split_fields12)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields12))
     (model__ (mk___rep v__split_discrs v__split_fields11)) first1 (-
     o1 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields11)) o1) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields12))
     (model__ (mk___rep v__split_discrs v__split_fields11)) o1
     (last6 (model__ (mk___rep v__split_discrs v__split_fields12))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us2 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o2 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields10)) (+ (length
                                                              (mk___rep
                                                              v__split_discrs
                                                              v__split_fields11)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields11))
     (model__ (mk___rep v__split_discrs v__split_fields10)) first1 (-
     o2 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields10)) o2) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields11))
     (model__ (mk___rep v__split_discrs v__split_fields10)) o2
     (last6 (model__ (mk___rep v__split_discrs v__split_fields11))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us3 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o3 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields9)) (+ (length
                                                             (mk___rep
                                                             v__split_discrs
                                                             v__split_fields10)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields10))
     (model__ (mk___rep v__split_discrs v__split_fields9)) first1 (-
     o3 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields9)) o3) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields10))
     (model__ (mk___rep v__split_discrs v__split_fields9)) o3
     (last6 (model__ (mk___rep v__split_discrs v__split_fields10))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us4 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o4 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields8)) (+ (length
                                                             (mk___rep
                                                             v__split_discrs
                                                             v__split_fields9)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields9))
     (model__ (mk___rep v__split_discrs v__split_fields8)) first1 (-
     o4 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields8)) o4) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields9))
     (model__ (mk___rep v__split_discrs v__split_fields8)) o4
     (last6 (model__ (mk___rep v__split_discrs v__split_fields9))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

;; H
  (assert (and (= us5 i) (dynamic_property2 first2 last2 i)))

;; H
  (assert (= o5 i))

;; H
  (assert
  (and
  (and
  (and
  (and
  (= (length (mk___rep v__split_discrs v__split_fields7)) (+ (length
                                                             (mk___rep
                                                             v__split_discrs
                                                             v__split_fields8)) 1))
  (= (range_equal (model__ (mk___rep v__split_discrs v__split_fields8))
     (model__ (mk___rep v__split_discrs v__split_fields7)) first1 (-
     o5 1)) true))
  (= (get (model__ (mk___rep v__split_discrs v__split_fields7)) o5) 0))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields8))
     (model__ (mk___rep v__split_discrs v__split_fields7)) o5
     (last6 (model__ (mk___rep v__split_discrs v__split_fields8))) 1) true))
  (dynamic_property3 0 last3
  (to_rep1 (rec__use_vectors__my_vectors__vector__capacity v__split_discrs)))))

(assert
;; WP_parameter_def
 ;; File "a-cofuve.ads", line 75, characters 0-0
  (not (dynamic_property2 first2 last2 i)))
(check-sat)
(exit)
