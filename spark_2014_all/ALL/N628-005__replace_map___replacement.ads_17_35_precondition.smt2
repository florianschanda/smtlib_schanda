;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep (select a temp___idx_133)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep (select a temp___idx_133)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0)) (((mk___t (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq1 (us_t us_t) Bool)

(declare-const dummy1 us_t)

(declare-datatypes ((set__ref 0)) (((mk_set__ref (set__content us_t)))))
(define-fun set__ref___projection ((a set__ref)) us_t (set__content a))

(define-fun dynamic_invariant1 ((temp___expr_290 us_t)
  (temp___is_init_287 Bool) (temp___skip_constant_288 Bool)
  (temp___do_toplevel_289 Bool)) Bool (=>
                                      (not (= temp___skip_constant_288 true))
                                      (dynamic_property (- 2147483648)
                                      2147483647 (first1 temp___expr_290)
                                      (last1 temp___expr_290))))

(declare-sort count_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (count_type count_type) Bool)

(declare-const dummy2 count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep1 (count_type) Int)

(declare-fun of_rep1 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs
  (rec__replacement__inverse_sets__map__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__replacement__inverse_sets__map__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__replacement__inverse_sets__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type
  (rec__replacement__inverse_sets__map a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__replacement__inverse_sets__map__capacity
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__replacement__inverse_sets__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__replacement__inverse_sets__map
                           (us_split_fields1 a))
                           (rec__replacement__inverse_sets__map
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const replacement__inverse_sets__map__capacity__first__bit Int)

(declare-const replacement__inverse_sets__map__capacity__last__bit Int)

(declare-const replacement__inverse_sets__map__capacity__position Int)

;; replacement__inverse_sets__map__capacity__first__bit_axiom
  (assert (<= 0 replacement__inverse_sets__map__capacity__first__bit))

;; replacement__inverse_sets__map__capacity__last__bit_axiom
  (assert
  (< replacement__inverse_sets__map__capacity__first__bit replacement__inverse_sets__map__capacity__last__bit))

;; replacement__inverse_sets__map__capacity__position_axiom
  (assert (<= 0 replacement__inverse_sets__map__capacity__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((map__ref1 0)) (((mk_map__ref1 (map__content1 us_rep)))))
(define-fun map__ref___projection ((a map__ref1)) us_rep (map__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__replacement__inverse_sets__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type
  (rec__replacement__inverse_sets__cursor__node a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep1
                            (rec__replacement__inverse_sets__cursor__node
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__replacement__inverse_sets__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const replacement__inverse_sets__cursor__node__first__bit Int)

(declare-const replacement__inverse_sets__cursor__node__last__bit Int)

(declare-const replacement__inverse_sets__cursor__node__position Int)

;; replacement__inverse_sets__cursor__node__first__bit_axiom
  (assert (<= 0 replacement__inverse_sets__cursor__node__first__bit))

;; replacement__inverse_sets__cursor__node__last__bit_axiom
  (assert
  (< replacement__inverse_sets__cursor__node__first__bit replacement__inverse_sets__cursor__node__last__bit))

;; replacement__inverse_sets__cursor__node__position_axiom
  (assert (<= 0 replacement__inverse_sets__cursor__node__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ((cursor__ref 0))
(((mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content
                                                               a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq4 (us_rep2 us_rep2) Bool)

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-const dummy5 us_rep2)

(declare-datatypes ((map__ref2 0))
(((mk_map__ref2 (map__content2 us_rep2)))))
(define-fun map__ref___3__projection ((a map__ref2)) us_rep2 (map__content2
                                                             a))

(declare-datatypes ((key_type__ref 0))
(((mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref___3__projection ((a key_type__ref)) us_rep1
  (key_type__content a))

(declare-fun has_key (us_rep2 us_rep1) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 us_rep1) Bool)

(declare-fun positions (us_rep) us_rep2)

(declare-fun positions__function_guard (us_rep2 us_rep) Bool)

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(declare-fun has_element1 (Int us_rep us_rep1) Bool)

(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep1) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)) )))

;; has_element__post__dispatch_axiom
  (assert true)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq5 (us_rep3 us_rep3) Bool)

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep3) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))

(declare-fun user_eq6 (us_rep3 us_rep3) Bool)

(declare-const dummy6 us_rep3)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep3 (sequence__content
                                                                   a))

(declare-fun get (us_rep3 Int) Int)

(declare-fun get__function_guard (Int us_rep3 Int) Bool)

(declare-fun get1 (us_rep2 us_rep1) Int)

(declare-fun get__function_guard1 (Int us_rep2 us_rep1) Bool)

(declare-fun keys (us_rep) us_rep3)

(declare-fun keys__function_guard (us_rep3 us_rep) Bool)

(define-fun key ((container us_rep)
  (position us_rep1)) Int (get (keys container)
                          (get1 (positions container) position)))

(declare-fun key__function_guard (Int us_rep us_rep1) Bool)

(declare-fun key1 (Int us_rep us_rep1) Int)

(declare-fun key__function_guard1 (Int Int us_rep us_rep1) Bool)

(declare-sort key_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq7 (key_type key_type) Bool)

(declare-const dummy7 key_type)

(declare-datatypes ((key_type__ref1 0))
(((mk_key_type__ref1 (key_type__content1 key_type)))))
(define-fun key_type__ref___projection ((a key_type__ref1)) key_type
  (key_type__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_295 Int)
  (temp___is_init_292 Bool) (temp___skip_constant_293 Bool)
  (temp___do_toplevel_294 Bool)) Bool (=>
                                      (or (= temp___is_init_292 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range3 temp___expr_295)))

;; key__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep))
  (forall ((position us_rep1)) (! (dynamic_invariant2
  (key1 attr__tag container position) true false
  true) :pattern ((key1 attr__tag container position)) )))))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq6 (us_rep4 us_rep4) Bool)

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep4) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment5 a))))

(declare-fun user_eq8 (us_rep4 us_rep4) Bool)

(declare-const dummy8 us_rep4)

(declare-datatypes ((map__ref3 0))
(((mk_map__ref3 (map__content3 us_rep4)))))
(define-fun map__ref___2__projection ((a map__ref3)) us_rep4 (map__content3
                                                             a))

(declare-fun get2 (us_rep4 Int) Int)

(declare-fun get__function_guard2 (Int us_rep4 Int) Bool)

(declare-fun model__ (us_rep) us_rep4)

(declare-fun model____function_guard (us_rep4 us_rep) Bool)

(define-fun element ((container us_rep)
  (position us_rep1)) Int (get2 (model__ container) (key container position)))

(declare-fun element__function_guard (Int us_rep us_rep1) Bool)

(declare-fun element1 (Int us_rep us_rep1) Int)

(declare-fun element__function_guard1 (Int Int us_rep us_rep1) Bool)

(declare-sort element_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq9 (element_type element_type) Bool)

(declare-const dummy9 element_type)

(declare-datatypes ((element_type__ref 0))
(((mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_301 Int)
  (temp___is_init_298 Bool) (temp___skip_constant_299 Bool)
  (temp___do_toplevel_300 Bool)) Bool (=>
                                      (or (= temp___is_init_298 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range4 temp___expr_301)))

;; element__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep))
  (forall ((position us_rep1)) (! (dynamic_invariant3
  (element1 attr__tag container position) true false
  true) :pattern ((element1 attr__tag container position)) )))))

(declare-fun keys_included (us_rep4 us_rep4) Bool)

(declare-fun keys_included__function_guard (Bool us_rep4 us_rep4) Bool)

(define-fun same_keys ((left us_rep4)
  (right us_rep4)) Bool (and (keys_included left right) (keys_included right
                                                        left)))

(declare-fun same_keys__function_guard (Bool us_rep4 us_rep4) Bool)

(declare-fun elements_equal_except (us_rep4 us_rep4 Int) Bool)

(declare-fun elements_equal_except__function_guard (Bool us_rep4 us_rep4
  Int) Bool)

(declare-fun length1 (us_rep3) Int)

(declare-fun length__function_guard (Int us_rep3) Bool)

(define-fun last2 ((container us_rep3)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun oeq2 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last2 left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

(declare-fun oeq3 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep2 us_rep2) Bool)

(declare-fun replace_element__specific_post (Int us_split_fields
  us_split_discrs us_rep1 Int us_split_fields) Bool)

(declare-fun has_key1 (us_rep4 Int) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep4 Int) Bool)

(define-fun contains ((container us_rep)
  (key2 Int)) Bool (has_key1 (model__ container) key2))

(declare-fun contains__function_guard (Bool us_rep Int) Bool)

(declare-fun contains1 (Int us_rep Int) Bool)

(declare-fun contains__function_guard1 (Bool Int us_rep Int) Bool)

;; contains__post__dispatch_axiom
  (assert true)

(define-fun equivalent_keys ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

(declare-const no_element us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun find (us_rep3 Int) Int)

(declare-fun find__function_guard (Int us_rep3 Int) Bool)

(declare-fun find1 (us_rep Int) us_rep1)

(declare-fun find__function_guard1 (us_rep1 us_rep Int) Bool)

(declare-fun find2 (Int us_rep Int) us_rep1)

(declare-fun find__function_guard2 (us_rep1 Int us_rep Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant2 key2 true true true)
     (let ((result (find1 container key2)))
     (ite (not (= (has_key1 (model__ container) key2) true))
     (and (not (= (has_key (positions container) result) true))
     (= (bool_eq3 result no_element) true))
     (and
     (and (= (has_key (positions container) result) true)
     (= (get1 (positions container) result) (find (keys container) key2)))
     (= (equivalent_keys (key container result) key2) true))))) :pattern (
  (find1 container key2)) ))))

;; find__post__dispatch_axiom
  (assert true)

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))

(declare-const replacement__inverse_sets__map__capacity__first__bit1 Int)

(declare-const replacement__inverse_sets__map__capacity__last__bit1 Int)

(declare-const replacement__inverse_sets__map__capacity__position1 Int)

;; replacement__inverse_sets__map__capacity__first__bit_axiom
  (assert (<= 0 replacement__inverse_sets__map__capacity__first__bit1))

;; replacement__inverse_sets__map__capacity__last__bit_axiom
  (assert
  (< replacement__inverse_sets__map__capacity__first__bit1 replacement__inverse_sets__map__capacity__last__bit1))

;; replacement__inverse_sets__map__capacity__position_axiom
  (assert (<= 0 replacement__inverse_sets__map__capacity__position1))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes ((inverse_set__ref 0))
(((mk_inverse_set__ref (inverse_set__content us_rep)))))
(define-fun inverse_set__ref___projection ((a inverse_set__ref)) us_rep
  (inverse_set__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq10 a b) (oeq a b)) :pattern ((user_eq10 a b)) )))

(declare-const a us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const d__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const k Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const d_old us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant4 ((temp___expr_143 Int)
  (temp___is_init_140 Bool) (temp___skip_constant_141 Bool)
  (temp___do_toplevel_142 Bool)) Bool (=>
                                      (or (= temp___is_init_140 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_143)))

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep1 0)))))

(declare-fun length2 (us_rep) Int)

(declare-fun length__function_guard1 (Int us_rep) Bool)

(declare-fun length3 (Int us_rep) Int)

(declare-fun length__function_guard2 (Int Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length2 container)))
     (and
     (<= result (to_rep1
                (rec__replacement__inverse_sets__map__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant4 result true false true))) :pattern ((length2
                                                             container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant4
  (length3 attr__tag container) true false
  true) :pattern ((length3 attr__tag container)) ))))

(define-fun k_bigger_than_range ((container us_rep3) (fst Int) (lst Int)
  (key2 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< (get container i) key2)))
                   true false))

(declare-fun k_bigger_than_range__function_guard (Bool us_rep3 Int Int
  Int) Bool)

(define-fun k_smaller_than_range ((container us_rep3) (fst Int) (lst Int)
  (key2 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< key2 (get container i))))
                   true false))

(declare-fun k_smaller_than_range__function_guard (Bool us_rep3 Int Int
  Int) Bool)

(define-fun k_is_find ((container us_rep3) (key2 Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (k_bigger_than_range container 1 (- position 1)
                            key2) (of_int 1)) (ite (< position (length1
                                                               container))
                                              (k_smaller_than_range container
                                              (+ position 1)
                                              (length1 container) key2)
                                              (of_int 1))))

(declare-fun k_is_find__function_guard (Bool us_rep3 Int Int) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a1 us_rep3) (b us_rep3))
  (! (= (user_eq6 a1 b) (oeq2 a1 b)) :pattern ((user_eq6 a1 b)) )))

(define-fun default_initial_assumption ((temp___expr_371 us_rep3)
  (temp___skip_top_level_372 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_372 true))
                                         (= (length1 temp___expr_371) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant2 key2 true true true)
     (let ((result (find container key2)))
     (and
     (=> (< 0 result)
     (and (<= result (length1 container))
     (= (equivalent_keys key2 (get container result)) true)))
     (dynamic_invariant4 result true false true)))) :pattern ((find container
                                                              key2)) ))))

(declare-fun length4 (us_rep4) Int)

(declare-fun length__function_guard3 (Int us_rep4) Bool)

(declare-fun is_empty (us_rep4) Bool)

(declare-fun is_empty__function_guard (Bool us_rep4) Bool)

(define-fun default_initial_assumption1 ((temp___expr_340 us_rep4)
  (temp___skip_top_level_341 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_341 true))
                                         (and
                                         (= (is_empty temp___expr_340) true)
                                         (= (length4 temp___expr_340) 0))))

;; model____post_axiom
  (assert true)

(declare-sort key_type1 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq11 (key_type1 key_type1) Bool)

(declare-const dummy11 key_type1)

(declare-datatypes ((key_type__ref2 0))
(((mk_key_type__ref2 (key_type__content2 key_type1)))))
(define-fun key_type__ref___2__projection ((a1 key_type__ref2)) key_type1
  (key_type__content2 a1))

(declare-sort extended_index 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq12 (extended_index extended_index) Bool)

(declare-const dummy12 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a1 extended_index__ref)) extended_index
  (extended_index__content a1))

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position
                                                             (last2
                                                             container)) true
                                                             false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

;; keys__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (keys container)))
     (and
     (and
     (and (= (length1 result) (length2 container))
     (forall ((temp___405 Int))
     (=>
     (and (in_range6 temp___405)
     (= (iter_has_element result temp___405) true))
     (= (has_key1 (model__ container) (get result temp___405)) true))))
     (forall ((key2 Int))
     (=> (and (in_range5 key2) (= (has_key1 (model__ container) key2) true))
     (and (< 0 (find result key2))
     (= (equivalent_keys (get result (find result key2)) key2) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length2 container)))
     (and (= (find result (get result i)) i)
     (= (k_is_find result (get result i) i) true)))))) :pattern ((keys
                                                                 container)) )))

(declare-fun length5 (us_rep2) Int)

(declare-fun length__function_guard4 (Int us_rep2) Bool)

(declare-fun is_empty1 (us_rep2) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep2) Bool)

(define-fun default_initial_assumption2 ((temp___expr_391 us_rep2)
  (temp___skip_top_level_392 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_392 true))
                                         (and
                                         (= (is_empty1 temp___expr_391) true)
                                         (= (length5 temp___expr_391) 0))))

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length2 container)))
     (forall ((j us_rep1))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq3 i j) true))))))))) :pattern (
  (positions container)) )))

(declare-fun oeq4 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep4 us_rep4) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq4 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

(define-fun dynamic_invariant5 ((temp___expr_327 Int)
  (temp___is_init_324 Bool) (temp___skip_constant_325 Bool)
  (temp___do_toplevel_326 Bool)) Bool (=>
                                      (or (= temp___is_init_324 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range5 temp___expr_327)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant5 key2 true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((k1 Int))
     (and (and (in_range5 k1) (= (has_key1 container k1) true))
     (= (equivalent_keys k1 key2) true))) (= (has_key1 container key2) true)))) :pattern (
  (has_key1 container key2)) ))))

(declare-sort element_type1 0)

(define-fun in_range7 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq13 (element_type1 element_type1) Bool)

(declare-const dummy13 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a1 element_type__ref1)) element_type1
  (element_type__content1 a1))

(define-fun dynamic_invariant6 ((temp___expr_333 Int)
  (temp___is_init_330 Bool) (temp___skip_constant_331 Bool)
  (temp___do_toplevel_332 Bool)) Bool (=>
                                      (or (= temp___is_init_330 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range7 temp___expr_333)))

(declare-fun witness (us_rep4 Int) Int)

(declare-fun witness__function_guard (Int us_rep4 Int) Bool)

(declare-fun w_get (us_rep4 Int) Int)

(declare-fun w_get__function_guard (Int us_rep4 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant5 key2 true true true)
     (= (has_key1 container key2) true))
     (let ((result (get2 container key2)))
     (and
     (=> (= (of_int 1) true)
     (and (= result (w_get container (witness container key2)))
     (forall ((k1 Int))
     (=> (and (in_range5 k1) (= (has_key1 container k1) true))
     (= (= (equivalent_keys k1 key2) true)
     (= (witness container key2) (witness container k1)))))))
     (dynamic_invariant6 result true false true)))) :pattern ((get2 container
                                                              key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant4 (length4 container)
  true false true) :pattern ((length4 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (oeq4 left right) true)
     (and
     (forall ((key2 Int))
     (=> (and (in_range5 key2) (= (has_key1 left key2) true))
     (and (= (has_key1 right key2) true)
     (= (get2 right key2) (get2 left key2)))))
     (forall ((key2 Int))
     (=> (and (in_range5 key2) (= (has_key1 right key2) true))
     (= (has_key1 left key2) true))))) :pattern ((oeq4 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty container) true)
     (forall ((key2 Int))
     (not (and (in_range5 key2) (= (has_key1 container key2) true))))) :pattern (
  (is_empty container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (keys_included left right) true)
     (forall ((key2 Int))
     (=> (and (in_range5 key2) (= (has_key1 left key2) true))
     (= (has_key1 right key2) true)))) :pattern ((keys_included left right)) )))

;; elements_equal_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((new_key Int))
  (! (=> (dynamic_invariant5 new_key true true true)
     (= (= (elements_equal_except left right new_key) true)
     (forall ((key2 Int))
     (=> (and (in_range5 key2) (= (has_key1 left key2) true))
     (=> (not (= (equivalent_keys key2 new_key) true))
     (and (= (has_key1 right key2) true)
     (= (get2 left key2) (get2 right key2)))))))) :pattern ((elements_equal_except
                                                            left right
                                                            new_key)) ))))

(declare-fun has_witness (us_rep4 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep4 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant5 key2 true true true)
     (= (has_key1 container key2) true))
     (let ((result (witness container key2)))
     (and (= (has_witness container result) true) (dynamic_invariant4 result
     true false true)))) :pattern ((witness container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant4 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant6
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(define-fun dynamic_invariant7 ((temp___expr_364 Int)
  (temp___is_init_361 Bool) (temp___skip_constant_362 Bool)
  (temp___do_toplevel_363 Bool)) Bool (=>
                                      (or (= temp___is_init_361 true)
                                      (<= 0 2147483647)) (in_range6
                                      temp___expr_364)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant4 result true false
     true))) :pattern ((length1 container)) )))

(declare-sort element_type2 0)

(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq14 (element_type2 element_type2) Bool)

(declare-const dummy14 element_type2)

(declare-datatypes ((element_type__ref2 0))
(((mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___3__projection ((a1 element_type__ref2)) element_type2
  (element_type__content2 a1))

(define-fun dynamic_invariant8 ((temp___expr_358 Int)
  (temp___is_init_355 Bool) (temp___skip_constant_356 Bool)
  (temp___do_toplevel_357 Bool)) Bool (=>
                                      (or (= temp___is_init_355 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range8 temp___expr_358)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant7 position true true true)
     (and (<= 1 position) (<= position (last2 container))))
     (dynamic_invariant8 (get container position) true false true)) :pattern (
  (get container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 us_rep1))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k1 us_rep1))
     (and (= (has_key container k1) true) (= (bool_eq3 k1 key2) true)))
     (= (has_key container key2) true))) :pattern ((has_key container key2)) ))))

(declare-sort element_type3 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq15 (element_type3 element_type3) Bool)

(declare-const dummy15 element_type3)

(declare-datatypes ((element_type__ref3 0))
(((mk_element_type__ref3 (element_type__content3 element_type3)))))
(define-fun element_type__ref___4__projection ((a1 element_type__ref3)) element_type3
  (element_type__content3 a1))

(define-fun dynamic_invariant9 ((temp___expr_384 Int)
  (temp___is_init_381 Bool) (temp___skip_constant_382 Bool)
  (temp___do_toplevel_383 Bool)) Bool (=>
                                      (or (= temp___is_init_381 true)
                                      (<= 1 2147483647)) (in_range9
                                      temp___expr_384)))

(declare-fun witness1 (us_rep2 us_rep1) Int)

(declare-fun witness__function_guard1 (Int us_rep2 us_rep1) Bool)

(declare-fun w_get1 (us_rep2 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep2 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 us_rep1))
  (! (=> (= (has_key container key2) true)
     (let ((result (get1 container key2)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get1 container (witness1 container key2)))
     (forall ((k1 us_rep1))
     (=> (= (has_key container k1) true)
     (= (= (bool_eq3 k1 key2) true)
     (= (witness1 container key2) (witness1 container k1)))))))
     (dynamic_invariant9 result true false true)))) :pattern ((get1 container
                                                              key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant4 (length5 container)
  true false true) :pattern ((length5 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq3 left right) true)
     (and
     (forall ((key2 us_rep1))
     (=> (= (has_key left key2) true)
     (and (= (has_key right key2) true)
     (= (get1 right key2) (get1 left key2)))))
     (forall ((key2 us_rep1))
     (=> (= (has_key right key2) true) (= (has_key left key2) true))))) :pattern (
  (oeq3 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty1 container) true)
     (forall ((key2 us_rep1)) (not (= (has_key container key2) true)))) :pattern (
  (is_empty1 container)) )))

(declare-fun has_witness1 (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 us_rep1))
  (! (=> (= (has_key container key2) true)
     (let ((result (witness1 container key2)))
     (and (= (has_witness1 container result) true) (dynamic_invariant4 result
     true false true)))) :pattern ((witness1 container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant4 witness2 true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant9
     (w_get1 container witness2) true false true)) :pattern ((w_get1
                                                             container
                                                             witness2)) ))))

(declare-const d__split_fields us_main_type)

(declare-const c count_type)

(declare-const o Bool)

(declare-const o1 Bool)

(declare-const o2 Int)

(declare-const result Bool)

(declare-const result1 Bool)

(define-fun c1 () us_rep1 (mk___rep1 (mk___split_fields1 c)))

;; H
  (assert (dynamic_invariant1 a true false true))

;; H
  (assert (in_range1 k))

;; H
  (assert
  (and
  (= result (has_key1
            (model__
            (mk___rep d__split_discrs (mk___split_fields d__split_fields)))
            k))
  (= (= result true)
  (= (has_key1
     (model__ (mk___rep d__split_discrs (mk___split_fields d__split_fields)))
     k) true))))

;; H
  (assert (= result true))

;; H
  (assert
  (and
  (= o (has_key
       (positions
       (mk___rep d__split_discrs (mk___split_fields d__split_fields)))
       c1))
  (= (= o true)
  (= (has_key
     (positions
     (mk___rep d__split_discrs (mk___split_fields d__split_fields)))
     c1) true))))

;; H
  (assert (= o1 true))

;; H
  (assert (= result1 (ite (= o1 true) o false)))

;; H
  (assert (= result1 true))

;; H
  (assert
  (and
  (= o2 (key (mk___rep d__split_discrs (mk___split_fields d__split_fields))
        c1))
  (and (in_range3 o2)
  (= o2 (get
        (keys (mk___rep d__split_discrs (mk___split_fields d__split_fields)))
        (get1
        (positions
        (mk___rep d__split_discrs (mk___split_fields d__split_fields)))
        c1))))))

(assert
;; WP_parameter_def
 ;; File "a-cforma.ads", line 997, characters 0-0
  (not
  (= (has_key
     (positions
     (mk___rep d__split_discrs (mk___split_fields d__split_fields)))
     c1) true)))
(check-sat)
(exit)
