;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-sort long_integer 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (long_integer long_integer) Bool)

(declare-const dummy4 long_integer)

(declare-datatypes ()
((long_integer__ref
 (mk_long_integer__ref (long_integer__content long_integer)))))
(define-fun long_integer__ref___projection ((a long_integer__ref)) long_integer
  (long_integer__content a))

(define-fun dynamic_invariant1 ((temp___expr_21 Int) (temp___is_init_18 Bool)
  (temp___skip_constant_19 Bool)
  (temp___do_toplevel_20 Bool)) Bool (=>
                                     (or (= temp___is_init_18 true)
                                     (<= (- 9223372036854775808) 9223372036854775807))
                                     (in_range3 temp___expr_21)))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (natural natural) Bool)

(declare-const dummy5 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(declare-sort tstream_element_offsetB 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (tstream_element_offsetB tstream_element_offsetB) Bool)

(declare-const dummy6 tstream_element_offsetB)

(declare-datatypes ()
((tstream_element_offsetB__ref
 (mk_tstream_element_offsetB__ref
 (tstream_element_offsetB__content tstream_element_offsetB)))))
(define-fun tstream_element_offsetB__ref___projection ((a tstream_element_offsetB__ref)) tstream_element_offsetB
  (tstream_element_offsetB__content a))

(declare-fun to_rep2 (tstream_element_offsetB) Int)

(declare-fun of_rep2 (Int) tstream_element_offsetB)

;; inversion_axiom
  (assert
  (forall ((x tstream_element_offsetB))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x tstream_element_offsetB)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort stream_element_offset 0)

(define-fun in_range6 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (stream_element_offset stream_element_offset) Bool)

(declare-const dummy7 stream_element_offset)

(declare-datatypes ()
((stream_element_offset__ref
 (mk_stream_element_offset__ref
 (stream_element_offset__content stream_element_offset)))))
(define-fun stream_element_offset__ref___projection ((a stream_element_offset__ref)) stream_element_offset
  (stream_element_offset__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort stream_element 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))

(declare-fun user_eq8 (stream_element stream_element) Bool)

(declare-const dummy8 stream_element)

(declare-datatypes ()
((stream_element__ref
 (mk_stream_element__ref (stream_element__content stream_element)))))
(define-fun stream_element__ref___projection ((a stream_element__ref)) stream_element
  (stream_element__content a))

(declare-fun to_rep3 (stream_element) (_ BitVec 8))

(declare-fun of_rep3 ((_ BitVec 8)) stream_element)

;; inversion_axiom
  (assert
  (forall ((x stream_element))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))) )))

(define-fun to_int2 ((x stream_element)) Int (bv2nat (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x stream_element)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int stream_element))))))
(declare-fun slide1 ((Array Int stream_element) Int
  Int) (Array Int stream_element))

;; slide_eq
  (assert
  (forall ((a (Array Int stream_element)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int stream_element)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int stream_element) Int Int
  (Array Int stream_element) Int Int) (Array Int stream_element))

;; concat_def
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (stream_element Int) (Array Int stream_element))

;; singleton_def
  (assert
  (forall ((v stream_element))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int stream_element)) (a__first Int)
  (a__last Int) (b (Array Int stream_element)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare1 ((Array Int stream_element) Int Int
  (Array Int stream_element) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep3 (select a (+ j 1))) (to_rep3 (select b (+ i 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-sort t1 0)

(declare-fun first2 (t1) tstream_element_offsetB)

(declare-fun last2 (t1) tstream_element_offsetB)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range5 f)
     (=> (in_range5 l)
     (and (= (to_rep2 (first2 (mk1 f l))) f)
     (= (to_rep2 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range5 low)
                   (and (in_range5 high)
                   (=> (<= low high) (and (in_range6 low) (in_range6 high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int stream_element))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int stream_element) (elts1 a))

(define-fun of_array1 ((a (Array Int stream_element)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep2 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep2 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int stream_element)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int stream_element)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int stream_element)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int stream_element))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int stream_element)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int stream_element))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep2 (first2 (rt1 x)))
                  (to_rep2 (last2 (rt1 x))) (elts1 y)
                  (to_rep2 (first2 (rt1 y))) (to_rep2 (last2 (rt1 y)))))

(declare-fun user_eq9 (us_t1 us_t1) Bool)

(declare-const dummy9 us_t1)

(declare-datatypes ()
((stream_element_array__ref
 (mk_stream_element_array__ref (stream_element_array__content us_t1)))))
(define-fun stream_element_array__ref___projection ((a stream_element_array__ref)) us_t1
  (stream_element_array__content a))

(declare-fun to_rep4 (natural) Int)

(declare-fun of_rep4 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range4 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-const dummy10 (Array Int character))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int character)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int character)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq10 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__fixed_string__object__width natural)(rec__fixed_string__object__name (Array Int character))(rec__ext__ us_private)))))
(define-fun us_split_fields_Width__projection ((a us_split_fields)) natural
  (rec__fixed_string__object__width a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__fixed_string__object__name a))

(define-fun us_split_fields___2__projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___4__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep4
                           (rec__fixed_string__object__width
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__fixed_string__object__width
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__fixed_string__object__name
                           (us_split_fields1 a)) 1 20
                           (rec__fixed_string__object__name
                           (us_split_fields1 b)) 1 20) true))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-const fixed_string__object__width__first__bit Int)

(declare-const fixed_string__object__width__last__bit Int)

(declare-const fixed_string__object__width__position Int)

;; fixed_string__object__width__first__bit_axiom
  (assert (<= 0 fixed_string__object__width__first__bit))

;; fixed_string__object__width__last__bit_axiom
  (assert
  (< fixed_string__object__width__first__bit fixed_string__object__width__last__bit))

;; fixed_string__object__width__position_axiom
  (assert (<= 0 fixed_string__object__width__position))

(declare-const fixed_string__object__name__first__bit Int)

(declare-const fixed_string__object__name__last__bit Int)

(declare-const fixed_string__object__name__position Int)

;; fixed_string__object__name__first__bit_axiom
  (assert (<= 0 fixed_string__object__name__first__bit))

;; fixed_string__object__name__last__bit_axiom
  (assert
  (< fixed_string__object__name__first__bit fixed_string__object__name__last__bit))

;; fixed_string__object__name__position_axiom
  (assert (<= 0 fixed_string__object__name__position))

(declare-fun user_eq11 (us_rep us_rep) Bool)

(declare-const dummy11 us_rep)

(declare-datatypes ()
((object__ref (mk_object__ref (object__content us_rep)))))
(define-fun object__ref___projection ((a object__ref)) us_rep (object__content
                                                              a))

(declare-fun temp___178 (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___180 Int))
  (forall ((temp___181 Int))
  (= (select (temp___178 temp___180) temp___181) (of_rep temp___180)))))

(define-fun default_initial_assumption ((temp___expr_176 us_rep)
  (temp___skip_top_level_177 Bool)) Bool (and
                                         (= (attr__tag temp___expr_176)
                                         us_tag)
                                         (and
                                         (= (to_rep4
                                            (rec__fixed_string__object__width
                                            (us_split_fields1
                                            temp___expr_176))) 0)
                                         (= (rec__fixed_string__object__name
                                            (us_split_fields1
                                            temp___expr_176)) (temp___178 0)))))

(declare-fun elements (us_rep) Int)

(declare-fun elements__function_guard (Int us_rep) Bool)

(declare-fun elements1 (Int us_rep) Int)

(declare-fun elements__function_guard1 (Int Int us_rep) Bool)

;; elements__post_axiom
  (assert
  (forall ((this us_rep)) (! (dynamic_invariant2 (elements this) true false
  true) :pattern ((elements this)) )))

;; elements__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((this us_rep)) (! (dynamic_invariant2 (elements1 attr__tag1 this)
  true false true) :pattern ((elements1 attr__tag1 this)) ))))

;; fixed_string__object__compat_axiom
  (assert
  (forall ((this us_rep))
  (! (= (elements this) (elements1 us_tag this)) :pattern ((elements1
                                                           us_tag this)) )))

(define-fun dynamic_invariant3 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun create (Int us_t) us_rep)

(declare-fun create__function_guard (us_rep Int us_t) Bool)

(declare-fun create1 (Int Int us_t) us_rep)

(declare-fun create__function_guard1 (us_rep Int Int us_t) Bool)

;; create__post_axiom
  (assert
  (forall ((elem_width Int))
  (forall ((name us_t))
  (! (=>
     (and (dynamic_invariant2 elem_width true true true) (dynamic_invariant3
     name true true true))
     (let ((result (create elem_width name)))
     (and (= (elements result) elem_width) (= (attr__tag result) us_tag)))) :pattern (
  (create elem_width name)) ))))

;; create__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int) (elem_width Int))
  (forall ((name us_t))
  (! (=>
     (and (dynamic_invariant2 elem_width true true true) (dynamic_invariant3
     name true true true))
     (= (attr__tag (create1 attr__tag1 elem_width name)) attr__tag1)) :pattern (
  (create1 attr__tag1 elem_width name)) ))))

;; fixed_string__object__compat_axiom
  (assert
  (forall ((elem_width Int))
  (forall ((name us_t))
  (! (= (create elem_width name) (create1 us_tag elem_width name)) :pattern (
  (create1 us_tag elem_width name)) ))))

(declare-fun null_string (us_rep) us_t)

(declare-fun null_string__function_guard (us_t us_rep) Bool)

(declare-fun null_string1 (Int us_rep) us_t)

(declare-fun null_string__function_guard1 (us_t Int us_rep) Bool)

;; null_string__post_axiom
  (assert
  (forall ((this us_rep))
  (! (let ((result (null_string this)))
     (and (= (length result) (elements this)) (dynamic_invariant3 result true
     false true))) :pattern ((null_string this)) )))

;; null_string__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((this us_rep)) (! (dynamic_invariant3
  (null_string1 attr__tag1 this) true false
  true) :pattern ((null_string1 attr__tag1 this)) ))))

;; fixed_string__object__compat_axiom
  (assert
  (forall ((this us_rep))
  (! (= (null_string this) (null_string1 us_tag this)) :pattern ((null_string1
                                                                 us_tag this)) )))

(declare-fun convert (us_rep us_t) us_t)

(declare-fun convert__function_guard (us_t us_rep us_t) Bool)

(declare-fun convert1 (Int us_rep us_t) us_t)

(declare-fun convert__function_guard1 (us_t Int us_rep us_t) Bool)

;; convert__post_axiom
  (assert
  (forall ((this us_rep))
  (forall ((in_string us_t))
  (! (=> (dynamic_invariant3 in_string true true true)
     (let ((result (convert this in_string)))
     (and (= (length result) (elements this)) (dynamic_invariant3 result true
     false true)))) :pattern ((convert this in_string)) ))))

;; convert__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((this us_rep))
  (forall ((in_string us_t))
  (! (=> (dynamic_invariant3 in_string true true true) (dynamic_invariant3
     (convert1 attr__tag1 this in_string) true false true)) :pattern (
  (convert1 attr__tag1 this in_string)) )))))

;; fixed_string__object__compat_axiom
  (assert
  (forall ((this us_rep))
  (forall ((in_string us_t))
  (! (= (convert this in_string) (convert1 us_tag this in_string)) :pattern (
  (convert1 us_tag this in_string)) ))))

(declare-const dummy12 (Array Int character))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int character)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array Int character)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq12 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__fixed_stream__object__width natural)(rec__fixed_stream__object__name (Array Int character))(rec__ext__1 us_private)))))
(define-fun us_split_fields_Width__2__projection ((a us_split_fields2)) natural
  (rec__fixed_stream__object__width a))

(define-fun us_split_fields_Name__2__projection ((a us_split_fields2)) (Array Int character)
  (rec__fixed_stream__object__name a))

(define-fun us_split_fields___3__projection ((a us_split_fields2)) us_private
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___5__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun us_rep___6__projection ((a us_rep1)) Int (attr__tag1 a))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep4
                            (rec__fixed_stream__object__width
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__fixed_stream__object__width
                                                   (us_split_fields3 b))))
                         (= (bool_eq
                            (rec__fixed_stream__object__name
                            (us_split_fields3 a)) 1 20
                            (rec__fixed_stream__object__name
                            (us_split_fields3 b)) 1 20) true))
                    true false))

(declare-fun us_dispatch_eq1 (us_rep1 us_rep1) Bool)

(declare-const us_tag1 Int)

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep1) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment5 a))))

(declare-const fixed_stream__object__width__first__bit Int)

(declare-const fixed_stream__object__width__last__bit Int)

(declare-const fixed_stream__object__width__position Int)

;; fixed_stream__object__width__first__bit_axiom
  (assert (<= 0 fixed_stream__object__width__first__bit))

;; fixed_stream__object__width__last__bit_axiom
  (assert
  (< fixed_stream__object__width__first__bit fixed_stream__object__width__last__bit))

;; fixed_stream__object__width__position_axiom
  (assert (<= 0 fixed_stream__object__width__position))

(declare-const fixed_stream__object__name__first__bit Int)

(declare-const fixed_stream__object__name__last__bit Int)

(declare-const fixed_stream__object__name__position Int)

;; fixed_stream__object__name__first__bit_axiom
  (assert (<= 0 fixed_stream__object__name__first__bit))

;; fixed_stream__object__name__last__bit_axiom
  (assert
  (< fixed_stream__object__name__first__bit fixed_stream__object__name__last__bit))

;; fixed_stream__object__name__position_axiom
  (assert (<= 0 fixed_stream__object__name__position))

(declare-fun user_eq13 (us_rep1 us_rep1) Bool)

(declare-const dummy13 us_rep1)

(declare-datatypes ()
((object__ref1 (mk_object__ref1 (object__content1 us_rep1)))))
(define-fun object__ref___2__projection ((a object__ref1)) us_rep1 (object__content1
                                                                   a))

(declare-fun temp___211 (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___213 Int))
  (forall ((temp___214 Int))
  (= (select (temp___211 temp___213) temp___214) (of_rep temp___213)))))

(define-fun default_initial_assumption1 ((temp___expr_209 us_rep1)
  (temp___skip_top_level_210 Bool)) Bool (and
                                         (= (attr__tag1 temp___expr_209)
                                         us_tag1)
                                         (and
                                         (= (to_rep4
                                            (rec__fixed_stream__object__width
                                            (us_split_fields3
                                            temp___expr_209))) 0)
                                         (= (rec__fixed_stream__object__name
                                            (us_split_fields3
                                            temp___expr_209)) (temp___211 0)))))

(declare-fun elements2 (us_rep1) Int)

(declare-fun elements__function_guard2 (Int us_rep1) Bool)

(declare-fun elements3 (Int us_rep1) Int)

(declare-fun elements__function_guard3 (Int Int us_rep1) Bool)

;; elements__post_axiom
  (assert
  (forall ((this us_rep1)) (! (dynamic_invariant2 (elements2 this) true false
  true) :pattern ((elements2 this)) )))

;; elements__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((this us_rep1)) (! (dynamic_invariant2 (elements3 attr__tag2 this)
  true false true) :pattern ((elements3 attr__tag2 this)) ))))

;; fixed_stream__object__compat_axiom
  (assert
  (forall ((this us_rep1))
  (! (= (elements2 this) (elements3 us_tag1 this)) :pattern ((elements3
                                                             us_tag1 this)) )))

(declare-fun create2 (Int us_t) us_rep1)

(declare-fun create__function_guard2 (us_rep1 Int us_t) Bool)

(declare-fun create3 (Int Int us_t) us_rep1)

(declare-fun create__function_guard3 (us_rep1 Int Int us_t) Bool)

;; create__post_axiom
  (assert
  (forall ((elem_width Int))
  (forall ((name us_t))
  (! (=>
     (and (dynamic_invariant2 elem_width true true true) (dynamic_invariant3
     name true true true))
     (let ((result (create2 elem_width name)))
     (and (= (elements2 result) elem_width) (= (attr__tag1 result) us_tag1)))) :pattern (
  (create2 elem_width name)) ))))

;; create__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int) (elem_width Int))
  (forall ((name us_t))
  (! (=>
     (and (dynamic_invariant2 elem_width true true true) (dynamic_invariant3
     name true true true))
     (= (attr__tag1 (create3 attr__tag2 elem_width name)) attr__tag2)) :pattern (
  (create3 attr__tag2 elem_width name)) ))))

;; fixed_stream__object__compat_axiom
  (assert
  (forall ((elem_width Int))
  (forall ((name us_t))
  (! (= (create2 elem_width name) (create3 us_tag1 elem_width name)) :pattern (
  (create3 us_tag1 elem_width name)) ))))

(define-fun dynamic_invariant4 ((temp___expr_160 us_t1)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (=>
                                      (not (= temp___skip_constant_158 true))
                                      (dynamic_property1
                                      (- 9223372036854775808)
                                      9223372036854775807
                                      (first3 temp___expr_160)
                                      (last3 temp___expr_160))))

(declare-fun null_string2 (us_rep1) us_t1)

(declare-fun null_string__function_guard2 (us_t1 us_rep1) Bool)

(declare-fun null_string3 (Int us_rep1) us_t1)

(declare-fun null_string__function_guard3 (us_t1 Int us_rep1) Bool)

;; null_string__post_axiom
  (assert
  (forall ((this us_rep1))
  (! (let ((result (null_string2 this)))
     (and (= (length1 result) (elements2 this)) (dynamic_invariant4 result
     true false true))) :pattern ((null_string2 this)) )))

;; null_string__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((this us_rep1)) (! (dynamic_invariant4
  (null_string3 attr__tag2 this) true false
  true) :pattern ((null_string3 attr__tag2 this)) ))))

;; fixed_stream__object__compat_axiom
  (assert
  (forall ((this us_rep1))
  (! (= (null_string2 this) (null_string3 us_tag1 this)) :pattern ((null_string3
                                                                   us_tag1
                                                                   this)) )))

(declare-fun convert2 (us_rep1 us_t) us_t1)

(declare-fun convert__function_guard2 (us_t1 us_rep1 us_t) Bool)

(declare-fun convert3 (Int us_rep1 us_t) us_t1)

(declare-fun convert__function_guard3 (us_t1 Int us_rep1 us_t) Bool)

;; convert__post_axiom
  (assert
  (forall ((this us_rep1))
  (forall ((in_string us_t))
  (! (=> (dynamic_invariant3 in_string true true true)
     (let ((result (convert2 this in_string)))
     (and (= (length1 result) (elements2 this)) (dynamic_invariant4 result
     true false true)))) :pattern ((convert2 this in_string)) ))))

;; convert__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((this us_rep1))
  (forall ((in_string us_t))
  (! (=> (dynamic_invariant3 in_string true true true) (dynamic_invariant4
     (convert3 attr__tag2 this in_string) true false true)) :pattern (
  (convert3 attr__tag2 this in_string)) )))))

;; fixed_stream__object__compat_axiom
  (assert
  (forall ((this us_rep1))
  (forall ((in_string us_t))
  (! (= (convert2 this in_string) (convert3 us_tag1 this in_string)) :pattern (
  (convert3 us_tag1 this in_string)) ))))

(declare-const field_10__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const field_06__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const stream_10__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const stream_06__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const ref_string__first integer)

(declare-const ref_string__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const short_string__first integer)

(declare-const short_string__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const total_string__first integer)

(declare-const total_string__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const total_stream__first tstream_element_offsetB)

(declare-const total_stream__last tstream_element_offsetB)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-fun temp___String_Literal_275 (tuple0) (Array Int character))

;; temp___String_Literal_275__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_275 us_void_param) 1)) 76)
     (= (to_rep (select (temp___String_Literal_275 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_275 us_void_param) 3)) 110))
     (= (to_rep (select (temp___String_Literal_275 us_void_param) 4)) 103)) :pattern (
  (temp___String_Literal_275 us_void_param)) )))

(declare-fun temp___String_Literal_276 (tuple0) (Array Int character))

;; temp___String_Literal_276__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 1)) 83)
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 3)) 111))
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 4)) 114))
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 5)) 116)) :pattern (
  (temp___String_Literal_276 us_void_param)) )))

(declare-fun temp___String_Literal_277 (tuple0) (Array Int character))

;; temp___String_Literal_277__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_277 us_void_param) 1)) 76)
     (= (to_rep (select (temp___String_Literal_277 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_277 us_void_param) 3)) 110))
     (= (to_rep (select (temp___String_Literal_277 us_void_param) 4)) 103)) :pattern (
  (temp___String_Literal_277 us_void_param)) )))

(declare-fun temp___String_Literal_278 (tuple0) (Array Int character))

;; temp___String_Literal_278__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_278 us_void_param) 1)) 83)
     (= (to_rep (select (temp___String_Literal_278 us_void_param) 2)) 104))
     (= (to_rep (select (temp___String_Literal_278 us_void_param) 3)) 111))
     (= (to_rep (select (temp___String_Literal_278 us_void_param) 4)) 114))
     (= (to_rep (select (temp___String_Literal_278 us_void_param) 5)) 116)) :pattern (
  (temp___String_Literal_278 us_void_param)) )))

(declare-fun temp___String_Literal_279 (tuple0) (Array Int character))

;; temp___String_Literal_279__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 1)) 97)
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 2)) 98))
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 3)) 99))
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 4)) 100))
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 6)) 102))
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 7)) 103))
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 8)) 104))
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 10)) 106))
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 11)) 107))
     (= (to_rep (select (temp___String_Literal_279 us_void_param) 12)) 108)) :pattern (
  (temp___String_Literal_279 us_void_param)) )))

(declare-fun temp___String_Literal_281 (tuple0) (Array Int character))

;; temp___String_Literal_281__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_281 us_void_param) 1)) 102)
     (= (to_rep (select (temp___String_Literal_281 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_281 us_void_param) 3)) 111)) :pattern (
  (temp___String_Literal_281 us_void_param)) )))

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(define-fun dynamic_invariant6 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(define-fun dynamic_invariant7 ((temp___expr_142 (_ BitVec 8))
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool true)

(define-fun dynamic_invariant8 ((temp___expr_148 Int)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (or (= temp___is_init_145 true)
                                      (<= (- 9223372036854775808) 9223372036854775807))
                                      (in_range6 temp___expr_148)))

(declare-const field_10__split_fields natural)

(declare-const field_10__split_fields1 (Array Int character))

(declare-const field_10__split_fields2 us_private)

(declare-const field_06__split_fields natural)

(declare-const field_06__split_fields1 (Array Int character))

(declare-const field_06__split_fields2 us_private)

(declare-const stream_10__split_fields natural)

(declare-const stream_10__split_fields1 (Array Int character))

(declare-const stream_10__split_fields2 us_private)

(declare-const stream_06__split_fields natural)

(declare-const stream_06__split_fields1 (Array Int character))

(declare-const stream_06__split_fields2 us_private)

(declare-const ref_string (Array Int character))

(declare-const short_string (Array Int character))

(declare-const len_n Int)

(declare-const len_i Int)

(declare-const len_l Int)

(declare-const total_len Int)

(declare-const main_test__field_10__assume natural)

(declare-const main_test__field_10__assume1 (Array Int character))

(declare-const main_test__field_10__assume2 us_private)

(declare-const main_test__field_10__assume3 Int)

(declare-const main_test__field_06__assume natural)

(declare-const main_test__field_06__assume1 (Array Int character))

(declare-const main_test__field_06__assume2 us_private)

(declare-const main_test__field_06__assume3 Int)

(declare-const main_test__stream_10__assume natural)

(declare-const main_test__stream_10__assume1 (Array Int character))

(declare-const main_test__stream_10__assume2 us_private)

(declare-const main_test__stream_10__assume3 Int)

(declare-const main_test__stream_06__assume us_rep1)

(declare-const temp___284 us_t)

(declare-const temp___283 us_t)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const result us_split_fields__ref)

(declare-const field_10__split_fields3 us_split_fields)

(declare-const result1 us_split_fields__ref)

(declare-const field_06__split_fields3 us_split_fields)

(declare-const result2 us_split_fields__ref1)

(declare-const stream_10__split_fields3 us_split_fields2)

(declare-const result3 us_split_fields__ref1)

(declare-const stream_06__split_fields3 us_split_fields2)

(declare-const result4 map__ref)

(declare-const ref_string1 (Array Int character))

(declare-const result5 map__ref)

(declare-const short_string1 (Array Int character))

(define-fun main_test__stream_10__assume4 () us_rep1 (mk___rep1
                                                     (mk___split_fields1
                                                     main_test__stream_10__assume
                                                     main_test__stream_10__assume1
                                                     main_test__stream_10__assume2)
                                                     main_test__stream_10__assume3))

(define-fun main_test__field_06__assume4 () us_rep (mk___rep
                                                   (mk___split_fields
                                                   main_test__field_06__assume
                                                   main_test__field_06__assume1
                                                   main_test__field_06__assume2)
                                                   main_test__field_06__assume3))

(define-fun main_test__field_10__assume4 () us_rep (mk___rep
                                                   (mk___split_fields
                                                   main_test__field_10__assume
                                                   main_test__field_10__assume1
                                                   main_test__field_10__assume2)
                                                   main_test__field_10__assume3))

;; H
  (assert
  (and
  (= main_test__field_10__assume4 (create 10
                                  (mk___t (temp___String_Literal_275 Tuple0)
                                  (mk 1 4))))
  (= (elements main_test__field_10__assume4) 10)))

;; H
  (assert
  (= result (mk___split_fields__ref
            (mk___split_fields field_10__split_fields field_10__split_fields1
            field_10__split_fields2))))

;; H
  (assert
  (= field_10__split_fields3 (mk___split_fields main_test__field_10__assume
                             main_test__field_10__assume1
                             main_test__field_10__assume2)))

;; H
  (assert (= field_10__attr__tag us_tag))

;; H
  (assert
  (and
  (= main_test__field_06__assume4 (create 6
                                  (mk___t (temp___String_Literal_276 Tuple0)
                                  (mk 1 5))))
  (= (elements main_test__field_06__assume4) 6)))

;; H
  (assert
  (= result1 (mk___split_fields__ref
             (mk___split_fields field_06__split_fields
             field_06__split_fields1 field_06__split_fields2))))

;; H
  (assert
  (= field_06__split_fields3 (mk___split_fields main_test__field_06__assume
                             main_test__field_06__assume1
                             main_test__field_06__assume2)))

;; H
  (assert (= field_06__attr__tag us_tag))

;; H
  (assert
  (and
  (= main_test__stream_10__assume4 (create2 10
                                   (mk___t (temp___String_Literal_277 Tuple0)
                                   (mk 1 4))))
  (= (elements2 main_test__stream_10__assume4) 10)))

;; H
  (assert
  (= result2 (mk___split_fields__ref1
             (mk___split_fields1 stream_10__split_fields
             stream_10__split_fields1 stream_10__split_fields2))))

;; H
  (assert
  (= stream_10__split_fields3 (mk___split_fields1
                              main_test__stream_10__assume
                              main_test__stream_10__assume1
                              main_test__stream_10__assume2)))

;; H
  (assert (= stream_10__attr__tag us_tag1))

;; H
  (assert
  (and
  (= main_test__stream_06__assume (create2 6
                                  (mk___t (temp___String_Literal_278 Tuple0)
                                  (mk 1 5))))
  (= (elements2 main_test__stream_06__assume) 6)))

;; H
  (assert
  (= result3 (mk___split_fields__ref1
             (mk___split_fields1 stream_06__split_fields
             stream_06__split_fields1 stream_06__split_fields2))))

;; H
  (assert
  (= stream_06__split_fields3 (us_split_fields3 main_test__stream_06__assume)))

;; H
  (assert (= stream_06__attr__tag us_tag1))

;; H
  (assert (= result4 (mk_map__ref ref_string)))

;; H
  (assert (= ref_string1 (temp___String_Literal_279 Tuple0)))

;; H
  (assert (= (to_rep1 ref_string__first) (to_rep1 (first (mk 1 12)))))

;; H
  (assert (= (to_rep1 ref_string__last) (to_rep1 (last (mk 1 12)))))

;; H
  (assert (dynamic_property 1 2147483647 (to_rep1 ref_string__first)
  (to_rep1 ref_string__last)))

;; H
  (assert (= result5 (mk_map__ref short_string)))

;; H
  (assert (= short_string1 (temp___String_Literal_281 Tuple0)))

;; H
  (assert (= (to_rep1 short_string__first) (to_rep1 (first (mk 1 3)))))

;; H
  (assert (= (to_rep1 short_string__last) (to_rep1 (last (mk 1 3)))))

;; H
  (assert (dynamic_property 1 2147483647 (to_rep1 short_string__first)
  (to_rep1 short_string__last)))

;; H
  (assert (=> (<= 0 2147483647) (in_range4 len_n)))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range len_i)))

;; H
  (assert
  (=> (<= (- 9223372036854775808) 9223372036854775807) (in_range3 len_l)))

;; H
  (assert (=> (<= 0 2147483647) (in_range4 total_len)))

;; H
  (assert
  (and
  (= temp___284 (null_string
                (mk___rep field_06__split_fields3 field_06__attr__tag)))
  (and (dynamic_invariant3 temp___284 true false true)
  (= (length temp___284) (elements
                         (mk___rep field_06__split_fields3
                         field_06__attr__tag))))))

;; H
  (assert
  (and
  (= temp___283 (null_string
                (mk___rep field_10__split_fields3 field_10__attr__tag)))
  (and (dynamic_invariant3 temp___283 true false true)
  (= (length temp___283) (elements
                         (mk___rep field_10__split_fields3
                         field_10__attr__tag))))))

;; H
  (assert (not (= (length temp___283) 0)))

;; H
  (assert
  (=> (<= (to_rep1 (first (rt temp___284))) (to_rep1 (last (rt temp___284))))
  (= o (+ (- (to_rep1 (last (rt temp___284))) (to_rep1
                                              (first (rt temp___284)))) 1))))

;; H
  (assert
  (=>
  (not
  (<= (to_rep1 (first (rt temp___284))) (to_rep1 (last (rt temp___284)))))
  (= o 0)))

;; H
  (assert
  (=> (<= (to_rep1 (first (rt temp___283))) (to_rep1 (last (rt temp___283))))
  (= o1 (+ (- (to_rep1 (last (rt temp___283))) (to_rep1
                                               (first (rt temp___283)))) 1))))

;; H
  (assert
  (=>
  (not
  (<= (to_rep1 (first (rt temp___283))) (to_rep1 (last (rt temp___283)))))
  (= o1 0)))

;; H
  (assert (= o2 (+ o1 o)))

;; H
  (assert (= o3 (+ (to_rep1 (first (rt temp___283))) o2)))

;; H
  (assert (= o4 (- o3 1)))

(assert
;; WP_parameter_def
 ;; File "main_test.adb", line 8, characters 0-0
  (not (in_range1 o4)))
(check-sat)
(exit)
