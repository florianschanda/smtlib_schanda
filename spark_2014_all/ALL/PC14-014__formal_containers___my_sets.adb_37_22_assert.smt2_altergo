(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 4294967295)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic to_int : t -> int

logic of_int : int -> t

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  4294967296)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def1 :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int1 : bool -> int

axiom to_int_def :
  (forall b:bool [to_int1(b)]. (((b = true) -> (to_int1(b) = 1)) and
  ((not (b = true)) -> (to_int1(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type hash_type

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq2 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq3 : t, t -> bool

axiom bool_eq_def2 :
  (forall x:t. forall y:t [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq : hash_type, hash_type -> bool

logic dummy : hash_type

type hash_type__ref = { hash_type__content : hash_type
}

function hash_type__ref___projection(a: hash_type__ref) : hash_type =
  (a).hash_type__content

type count_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic to_rep1 : hash_type -> t

logic of_rep1 : t -> hash_type

axiom inversion_axiom1 :
  (forall x:hash_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int2(x: hash_type) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:hash_type [to_int2(x)]. uint_in_range(to_int2(x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__my_sets__m__set__capacity : count_type;
rec__my_sets__m__set__modulus : hash_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__my_sets__m__set__capacity

function us_split_discrs_2__projection(a: us_split_discrs) : hash_type =
  (a).rec__my_sets__m__set__modulus

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__my_sets__m__set : us_main_type
}

function us_split_fields_Set__projection(a: us_split_fields) : us_main_type =
  (a).rec__my_sets__m__set

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep_7__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq5 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq5(a, b)].
  (((((to_rep(((a).us_split_discrs1).rec__my_sets__m__set__capacity) = to_rep(((b).us_split_discrs1).rec__my_sets__m__set__capacity)) and
  (to_rep1(((a).us_split_discrs1).rec__my_sets__m__set__modulus) = to_rep1(((b).us_split_discrs1).rec__my_sets__m__set__modulus))) and
  (us_main_eq(((a).us_split_fields1).rec__my_sets__m__set,
  ((b).us_split_fields1).rec__my_sets__m__set) = true)) -> (bool_eq5(a,
  b) = true)) and
  ((not (((to_rep(((a).us_split_discrs1).rec__my_sets__m__set__capacity) = to_rep(((b).us_split_discrs1).rec__my_sets__m__set__capacity)) and
  (to_rep1(((a).us_split_discrs1).rec__my_sets__m__set__modulus) = to_rep1(((b).us_split_discrs1).rec__my_sets__m__set__modulus))) and
  (us_main_eq(((a).us_split_fields1).rec__my_sets__m__set,
  ((b).us_split_fields1).rec__my_sets__m__set) = true))) -> (bool_eq5(a,
  b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  (0 <= object__size({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  a; rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = a; rec__my_sets__m__set__modulus = a1 };
  us_split_fields1 = { rec__my_sets__m__set = a2 } })))

logic my_sets__m__set__capacity__first__bit : int

logic my_sets__m__set__capacity__last__bit : int

logic my_sets__m__set__capacity__position : int

axiom my_sets__m__set__capacity__first__bit_axiom :
  (0 <= my_sets__m__set__capacity__first__bit)

axiom my_sets__m__set__capacity__last__bit_axiom :
  (my_sets__m__set__capacity__first__bit <  my_sets__m__set__capacity__last__bit)

axiom my_sets__m__set__capacity__position_axiom :
  (0 <= my_sets__m__set__capacity__position)

logic my_sets__m__set__modulus__first__bit : int

logic my_sets__m__set__modulus__last__bit : int

logic my_sets__m__set__modulus__position : int

axiom my_sets__m__set__modulus__first__bit_axiom :
  (0 <= my_sets__m__set__modulus__first__bit)

axiom my_sets__m__set__modulus__last__bit_axiom :
  (my_sets__m__set__modulus__first__bit <  my_sets__m__set__modulus__last__bit)

axiom my_sets__m__set__modulus__position_axiom :
  (0 <= my_sets__m__set__modulus__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : count_type

logic dummy3 : hash_type

logic dummy4 : us_main_type

type set__ref = { set__content : us_rep
}

function set__ref___projection(a: set__ref) : us_rep = (a).set__content

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic oeq1 : int, us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  forall b:count_type. forall b1:hash_type. forall b2:us_main_type
  [user_eq2({ us_split_discrs1 = { rec__my_sets__m__set__capacity = a;
  rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = b; rec__my_sets__m__set__modulus = b1 };
  us_split_fields1 = { rec__my_sets__m__set = b2 } })]. (user_eq2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = a;
  rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = b; rec__my_sets__m__set__modulus = b1 };
  us_split_fields1 = { rec__my_sets__m__set = b2 } }) = oeq({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = a;
  rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = b; rec__my_sets__m__set__modulus = b1 };
  us_split_fields1 = { rec__my_sets__m__set = b2 } })))

type us_split_fields2 = { rec__my_sets__m__cursor__node : count_type
}

function us_split_fields_Node__projection(a: us_split_fields2) : count_type =
  (a).rec__my_sets__m__cursor__node

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_6__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_9__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  (((to_rep(((a).us_split_fields3).rec__my_sets__m__cursor__node) = to_rep(((b).us_split_fields3).rec__my_sets__m__cursor__node)) ->
  (bool_eq6(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__my_sets__m__cursor__node) = to_rep(((b).us_split_fields3).rec__my_sets__m__cursor__node))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. (0 <= object__size1({ us_split_fields3 = {
  rec__my_sets__m__cursor__node = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. (0 <= object__alignment1({ us_split_fields3 = {
  rec__my_sets__m__cursor__node = a } })))

logic my_sets__m__cursor__node__first__bit : int

logic my_sets__m__cursor__node__last__bit : int

logic my_sets__m__cursor__node__position : int

axiom my_sets__m__cursor__node__first__bit_axiom :
  (0 <= my_sets__m__cursor__node__first__bit)

axiom my_sets__m__cursor__node__last__bit_axiom :
  (my_sets__m__cursor__node__first__bit <  my_sets__m__cursor__node__last__bit)

axiom my_sets__m__cursor__node__position_axiom :
  (0 <= my_sets__m__cursor__node__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy5 : count_type

type cursor__ref = { cursor__content : us_rep1
}

function cursor__ref___projection(a: cursor__ref) : us_rep1 =
  (a).cursor__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic length1 : int, us_rep -> int

logic length__function_guard1 : int, int, us_rep -> prop

axiom length__post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type [length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } })].
  ((length({ us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }) <= to_rep(container)) and
  in_range1(length({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type [length1(attr__tag, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } })].
  in_range1(length1(attr__tag, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }))))

type extended_index

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : extended_index, extended_index -> bool

logic dummy6 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq8 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref___projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

logic length2 : us_rep2 -> int

logic length__function_guard2 : int, us_rep2 -> prop

logic last__function_guard : int, us_rep2 -> prop

logic iter_has_element__function_guard : bool, us_rep2, int -> prop

type key_type__ref = { key_type__content : us_rep1
}

function key_type__ref___projection(a: key_type__ref) : us_rep1 =
  (a).key_type__content

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq9 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:us_rep3. (0 <= object__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:us_rep3. (0 <= object__alignment3(a)))

logic user_eq6 : us_rep3, us_rep3 -> bool

logic dummy8 : us_rep3

type map__ref = { map__content : us_rep3
}

function map__ref___projection(a: map__ref) : us_rep3 = (a).map__content

logic has_key : us_rep3, us_rep1 -> bool

logic has_key__function_guard : bool, us_rep3, us_rep1 -> prop

logic get1 : us_rep3, us_rep1 -> int

logic get__function_guard1 : int, us_rep3, us_rep1 -> prop

logic elements : us_rep -> us_rep2

logic elements__function_guard : us_rep2, us_rep -> prop

logic positions : us_rep -> us_rep3

logic positions__function_guard : us_rep3, us_rep -> prop

logic find : us_rep2, int -> int

logic find__function_guard : int, us_rep2, int -> prop

logic e_elements_included__function_guard : bool, us_rep2, us_rep2 -> prop

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:hash_type. forall left2:us_main_type.
  forall right:count_type. forall right1:hash_type.
  forall right2:us_main_type [oeq({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })]. (((oeq({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }) = true) <-> ((length({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }) = length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } })))) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), i))) = get(elements({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), i))))))) and
  ((oeq({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 }
  }) = true) <->
  ((forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 =
   { rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
   left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } })))) ->
   ((0 <  find(elements({ us_split_discrs1 = {
   rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
   right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
   get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
   rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
   rec__my_sets__m__set = left2 } }), i))) and (get(elements({
   us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
   rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
   rec__my_sets__m__set = right2 } }), find(elements({ us_split_discrs1 = {
   rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
   right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
   get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
   rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
   rec__my_sets__m__set = left2 } }), i))) = get(elements({
   us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
   rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
   rec__my_sets__m__set = left2 } }), i))))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })))) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), i))) = get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), i)))))))))

axiom oeq__post__dispatch_axiom : true

logic equivalent_sets : us_rep, us_rep -> bool

logic equivalent_sets__function_guard : bool, us_rep, us_rep -> prop

logic equivalent_sets1 : int, us_rep, us_rep -> bool

logic equivalent_sets__function_guard1 : bool, int, us_rep, us_rep -> prop

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq10 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (forall a:us_rep4. (0 <= object__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:us_rep4. (0 <= object__alignment4(a)))

logic user_eq7 : us_rep4, us_rep4 -> bool

logic dummy9 : us_rep4

type set__ref1 = { set__content1 : us_rep4
}

function set__ref_2__projection(a: set__ref1) : us_rep4 = (a).set__content1

logic oeq2 : us_rep4, us_rep4 -> bool

logic oeq__function_guard2 : bool, us_rep4, us_rep4 -> prop

logic model__ : us_rep -> us_rep4

logic model____function_guard : us_rep4, us_rep -> prop

axiom equivalent_sets__post_axiom :
  (forall left:count_type. forall left1:hash_type. forall left2:us_main_type.
  forall right:count_type. forall right1:hash_type.
  forall right2:us_main_type [equivalent_sets({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })]. ((equivalent_sets({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }) = true) <-> (oeq2(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 }
  })) = true)))

axiom equivalent_sets__post__dispatch_axiom : true

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic is_empty1 : int, us_rep -> bool

logic is_empty__function_guard1 : bool, int, us_rep -> prop

axiom is_empty__post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type [is_empty({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } })].
  ((is_empty({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }) = true) <-> (length({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }) = 0)))

axiom is_empty__post__dispatch_axiom : true

logic assign__specific_post : int, us_split_fields, us_split_discrs, us_rep,
  us_split_fields -> prop

logic contains : us_rep4, int -> bool

logic contains__function_guard : bool, us_rep4, int -> prop

logic included_except : us_rep4, us_rep4, int -> bool

logic included_except__function_guard : bool, us_rep4, us_rep4, int -> prop

logic oeq3 : us_rep3, us_rep3 -> bool

logic oeq__function_guard3 : bool, us_rep3, us_rep3 -> prop

logic mapping_preserved_except : us_rep2, us_rep2, us_rep3, us_rep3,
  us_rep1 -> bool

logic mapping_preserved_except__function_guard : bool, us_rep2, us_rep2,
  us_rep3, us_rep3, us_rep1 -> prop

logic has_element__function_guard : bool, us_rep, us_rep1 -> prop

logic has_element : int, us_rep, us_rep1 -> bool

logic has_element__function_guard1 : bool, int, us_rep, us_rep1 -> prop

logic element__function_guard : int, us_rep, us_rep1 -> prop

logic element : int, us_rep, us_rep1 -> int

logic element__function_guard1 : int, int, us_rep, us_rep1 -> prop

logic replace_element__specific_post : int, us_split_fields, us_split_discrs,
  us_rep1, int, us_split_fields -> prop

logic move__specific_post : int, us_split_fields, us_split_discrs,
  us_split_fields, us_split_discrs, us_split_fields, us_split_fields -> prop

logic contains__function_guard1 : bool, us_rep, int -> prop

logic contains1 : int, us_rep, int -> bool

logic contains__function_guard2 : bool, int, us_rep, int -> prop

type element_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : element_type, element_type -> bool

logic dummy10 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom contains__post__dispatch_axiom : true

logic ole : us_rep4, us_rep4 -> bool

logic ole__function_guard : bool, us_rep4, us_rep4 -> prop

logic oeq__function_guard4 : bool, us_rep2, us_rep2 -> prop

logic keys_included_except : us_rep3, us_rep3, us_rep1 -> bool

logic keys_included_except__function_guard : bool, us_rep3, us_rep3,
  us_rep1 -> prop

logic mapping_preserved : us_rep2, us_rep2, us_rep3, us_rep3 -> bool

logic mapping_preserved__function_guard : bool, us_rep2, us_rep2, us_rep3,
  us_rep3 -> prop

logic insert__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields2, bool, us_split_fields, us_split_fields2, bool -> prop

logic no_element : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic find1 : us_rep, int -> us_rep1

logic find__function_guard1 : us_rep1, us_rep, int -> prop

logic find2 : int, us_rep, int -> us_rep1

logic find__function_guard2 : us_rep1, int, us_rep, int -> prop

axiom find__post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type.
  (forall item:int [find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } },
  item)]. (in_range3(item) -> (((not (contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  item) = true)) -> (bool_eq6(find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } },
  item), { us_split_fields3 = { rec__my_sets__m__cursor__node = no_element }
  }) = true)) and ((contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  item) = true) -> (((has_key(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  find1({ us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }, item)) = true) and (get1(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } },
  item)) = find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  item))) and (get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  get1(positions({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } },
  item))) = item)))))))

axiom find__post__dispatch_axiom : true

logic insert__2__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic equal_except__function_guard : bool, us_rep2, us_rep2, int -> prop

logic include__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic replace__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic exclude__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic delete__specific_post : int, us_split_fields, us_split_discrs, int,
  us_split_fields -> prop

logic delete__2__specific_post : int, us_split_fields, us_split_discrs,
  us_split_fields2, us_split_fields, us_split_fields2 -> prop

logic intersection__2 : us_rep, us_rep -> us_rep

logic intersection__2__function_guard : us_rep, us_rep, us_rep -> prop

logic intersection__21 : int, us_rep, us_rep -> us_rep

logic intersection__2__function_guard1 : us_rep, int, us_rep, us_rep -> prop

logic includes_intersection : us_rep4, us_rep4, us_rep4 -> bool

logic includes_intersection__function_guard : bool, us_rep4, us_rep4,
  us_rep4 -> prop

logic num_overlaps : us_rep4, us_rep4 -> int

logic num_overlaps__function_guard : int, us_rep4, us_rep4 -> prop

logic e_elements_included__2__function_guard : bool, us_rep2, us_rep4,
  us_rep2 -> prop

axiom intersection__2__post_axiom :
  (forall left:count_type. forall left1:hash_type. forall left2:us_main_type.
  forall right:count_type. forall right1:hash_type.
  forall right2:us_main_type [intersection__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })]. ((((((length(intersection__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 }
  })) = num_overlaps(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }))) and (ole(model__(intersection__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } })) = true)) and
  (ole(model__(intersection__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 }
  })) = true)) and (includes_intersection(model__(intersection__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 }
  })) = true)) and
  (forall i:int. (((1 <= i) and (i <= length2(elements(intersection__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }))))) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements(intersection__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements(intersection__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i))) = get(elements(intersection__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })), i)))))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } })))) ->
  ((contains(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  right; rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  i)) = true) -> ((0 <  find(elements(intersection__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), i))) and
  (get(elements(intersection__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), find(elements(intersection__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), i))) = get(elements({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), i))))))))

axiom intersection__2__post__dispatch_axiom : true

logic included_in_union : us_rep4, us_rep4, us_rep4 -> bool

logic included_in_union__function_guard : bool, us_rep4, us_rep4,
  us_rep4 -> prop

logic e_elements_included__3__function_guard : bool, us_rep2, us_rep4,
  us_rep2, us_rep2 -> prop

logic union__specific_post : int, us_split_fields, us_split_discrs, us_rep,
  us_split_fields -> prop

logic union__2 : us_rep, us_rep -> us_rep

logic union__2__function_guard : us_rep, us_rep, us_rep -> prop

logic union__21 : int, us_rep, us_rep -> us_rep

logic union__2__function_guard1 : us_rep, int, us_rep, us_rep -> prop

axiom union__2__post_axiom :
  (forall left:count_type. forall left1:hash_type. forall left2:us_main_type.
  forall right:count_type. forall right1:hash_type.
  forall right2:us_main_type [union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })]. ((length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 }
  }) <= (2147483647 - length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }))) ->
  (((((((length(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })) = ((length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 }
  }) - num_overlaps(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }))) + length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }))) and
  (ole(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), model__(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }))) = true)) and (ole(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), model__(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }))) = true)) and
  (included_in_union(model__(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })) = true)) and
  (forall i:int. (((1 <= i) and (i <= length2(elements(union__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }))))) ->
  (((contains(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  left; rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), get(elements(union__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  i)) = true) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i))) = get(elements(union__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  i)))) and ((not (contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i)) = true)) -> ((0 <  find(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), get(elements(union__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  i))) and (get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  find(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  right; rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), get(elements(union__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  i))) = get(elements(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i)))))))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } })))) ->
  ((contains(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  left; rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  i)) = true) -> ((0 <  find(elements(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), i))) and
  (get(elements(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), find(elements(union__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), i))) = get(elements({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), i))))))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })))) ->
  (((contains(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  left; rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  i)) = true) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), i))) = get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), i)))) and ((not (contains(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  i)) = true)) -> ((0 <  find(elements(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }), i))) and
  (get(elements(union__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), find(elements(union__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), i))) = get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), i))))))))))

axiom union__2__post__dispatch_axiom : true

logic intersection__specific_post : int, us_split_fields, us_split_discrs,
  us_rep, us_split_fields -> prop

logic no_overlap : us_rep4, us_rep4 -> bool

logic no_overlap__function_guard : bool, us_rep4, us_rep4 -> prop

logic difference__specific_post : int, us_split_fields, us_split_discrs,
  us_rep, us_split_fields -> prop

logic difference__2 : us_rep, us_rep -> us_rep

logic difference__2__function_guard : us_rep, us_rep, us_rep -> prop

logic difference__21 : int, us_rep, us_rep -> us_rep

logic difference__2__function_guard1 : us_rep, int, us_rep, us_rep -> prop

axiom difference__2__post_axiom :
  (forall left:count_type. forall left1:hash_type. forall left2:us_main_type.
  forall right:count_type. forall right1:hash_type.
  forall right2:us_main_type [difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })]. ((((((length(difference__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 }
  })) = (length({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }) - num_overlaps(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })))) and
  (ole(model__(difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 }
  })) = true)) and (no_overlap(model__(difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 }
  })) = true)) and (included_in_union(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  model__(difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 }
  })) = true)) and
  (forall i:int. (((1 <= i) and (i <= length2(elements(difference__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }))))) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements(difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements(difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i))) = get(elements(difference__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })), i)))))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } })))) ->
  ((contains(model__(difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  i)) = true) -> ((0 <  find(elements(difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), i))) and
  (get(elements(difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), find(elements(difference__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), i))) = get(elements({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), i))))))))

axiom difference__2__post__dispatch_axiom : true

logic not_in_both : us_rep4, us_rep4, us_rep4 -> bool

logic not_in_both__function_guard : bool, us_rep4, us_rep4, us_rep4 -> prop

logic symmetric_difference__specific_post : int, us_split_fields,
  us_split_discrs, us_rep, us_split_fields -> prop

logic symmetric_difference__2 : us_rep, us_rep -> us_rep

logic symmetric_difference__2__function_guard : us_rep, us_rep,
  us_rep -> prop

logic symmetric_difference__21 : int, us_rep, us_rep -> us_rep

logic symmetric_difference__2__function_guard1 : us_rep, int, us_rep,
  us_rep -> prop

axiom symmetric_difference__2__post_axiom :
  (forall left:count_type. forall left1:hash_type. forall left2:us_main_type.
  forall right:count_type. forall right1:hash_type.
  forall right2:us_main_type [symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })]. ((length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 }
  }) <= (2147483647 - length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }))) ->
  (((((((length(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })) = ((length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 }
  }) - (2 * num_overlaps(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })))) + length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }))) and
  (not_in_both(model__(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }), model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })) = true)) and
  (included_in_union(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  model__(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 }
  })) = true)) and (included_in_union(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  model__(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 }
  })) = true)) and
  (forall i:int. (((1 <= i) and
  (i <= length2(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }))))) -> (((contains(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), get(elements(symmetric_difference__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  i)) = true) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  get(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })),
  i))) = get(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i)))) and ((not (contains(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), get(elements(symmetric_difference__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  i)) = true)) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  get(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  get(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })),
  i))) = get(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), i)))))))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } })))) ->
  ((contains(model__(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  i)) = true) -> ((0 <  find(elements(symmetric_difference__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), i))) and
  (get(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })),
  find(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }),
  i))) = get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  left; rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), i))))))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })))) ->
  ((contains(model__(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  i)) = true) -> ((0 <  find(elements(symmetric_difference__2({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } })),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), i))) and
  (get(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })),
  find(elements(symmetric_difference__2({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 } }),
  i))) = get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  right; rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }), i)))))))))

axiom symmetric_difference__2__post__dispatch_axiom : true

logic overlap : us_rep, us_rep -> bool

logic overlap__function_guard : bool, us_rep, us_rep -> prop

logic overlap1 : int, us_rep, us_rep -> bool

logic overlap__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom overlap__post_axiom :
  (forall left:count_type. forall left1:hash_type. forall left2:us_main_type.
  forall right:count_type. forall right1:hash_type.
  forall right2:us_main_type [overlap({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } })]. ((overlap({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = left; rec__my_sets__m__set__modulus =
  left1 }; us_split_fields1 = { rec__my_sets__m__set = left2 } }, {
  us_split_discrs1 = { rec__my_sets__m__set__capacity = right;
  rec__my_sets__m__set__modulus = right1 }; us_split_fields1 = {
  rec__my_sets__m__set = right2 } }) = true) <-> (not (no_overlap(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = left;
  rec__my_sets__m__set__modulus = left1 }; us_split_fields1 = {
  rec__my_sets__m__set = left2 } }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = right; rec__my_sets__m__set__modulus =
  right1 }; us_split_fields1 = { rec__my_sets__m__set = right2 }
  })) = true))))

axiom overlap__post__dispatch_axiom : true

logic is_subset : us_rep, us_rep -> bool

logic is_subset__function_guard : bool, us_rep, us_rep -> prop

logic is_subset1 : int, us_rep, us_rep -> bool

logic is_subset__function_guard1 : bool, int, us_rep, us_rep -> prop

axiom is_subset__post_axiom :
  (forall subset:count_type. forall subset1:hash_type.
  forall subset2:us_main_type. forall of_set:count_type.
  forall of_set1:hash_type. forall of_set2:us_main_type [is_subset({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = subset;
  rec__my_sets__m__set__modulus = subset1 }; us_split_fields1 = {
  rec__my_sets__m__set = subset2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = of_set; rec__my_sets__m__set__modulus =
  of_set1 }; us_split_fields1 = { rec__my_sets__m__set = of_set2 } })].
  ((is_subset({ us_split_discrs1 = { rec__my_sets__m__set__capacity = subset;
  rec__my_sets__m__set__modulus = subset1 }; us_split_fields1 = {
  rec__my_sets__m__set = subset2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = of_set; rec__my_sets__m__set__modulus =
  of_set1 }; us_split_fields1 = { rec__my_sets__m__set = of_set2 }
  }) = true) <-> (ole(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = subset; rec__my_sets__m__set__modulus =
  subset1 }; us_split_fields1 = { rec__my_sets__m__set = subset2 } }),
  model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity = of_set;
  rec__my_sets__m__set__modulus = of_set1 }; us_split_fields1 = {
  rec__my_sets__m__set = of_set2 } })) = true)))

axiom is_subset__post__dispatch_axiom : true

logic first : us_rep -> us_rep1

logic first__function_guard : us_rep1, us_rep -> prop

logic first1 : int, us_rep -> us_rep1

logic first__function_guard1 : us_rep1, int, us_rep -> prop

axiom first__post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type [first({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } })].
  (((length({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }) = 0) -> (bool_eq6(first({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }), { us_split_fields3 = {
  rec__my_sets__m__cursor__node = no_element } }) = true)) and
  ((not (length({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }) = 0)) -> ((has_key(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }), first({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 }
  })) = true) and (get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  first({ us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } })) = 1)))))

axiom first__post__dispatch_axiom : true

logic next : us_rep, us_rep1 -> us_rep1

logic next__function_guard : us_rep1, us_rep, us_rep1 -> prop

logic next1 : int, us_rep, us_rep1 -> us_rep1

logic next__function_guard1 : us_rep1, int, us_rep, us_rep1 -> prop

axiom next__post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type.
  (forall position:count_type [next({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = position } })].
  (((has_key(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  { us_split_fields3 = { rec__my_sets__m__cursor__node = position }
  }) = true) or (bool_eq6({ us_split_fields3 = {
  rec__my_sets__m__cursor__node = position } }, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = no_element } }) = true)) -> ((((bool_eq6({
  us_split_fields3 = { rec__my_sets__m__cursor__node = position } }, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = no_element }
  }) = true) or (get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  { us_split_fields3 = { rec__my_sets__m__cursor__node = position }
  }) = length({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }))) -> (bool_eq6(next({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = position } }), { us_split_fields3 = {
  rec__my_sets__m__cursor__node = no_element } }) = true)) and
  ((not ((bool_eq6({ us_split_fields3 = { rec__my_sets__m__cursor__node =
  position } }, { us_split_fields3 = { rec__my_sets__m__cursor__node =
  no_element } }) = true) or (get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  { us_split_fields3 = { rec__my_sets__m__cursor__node = position }
  }) = length({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } })))) -> ((has_key(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }), next({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = position }
  })) = true) and (get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  next({ us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = position } })) = (get1(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }), { us_split_fields3 = {
  rec__my_sets__m__cursor__node = position } }) + 1))))))))

axiom next__post__dispatch_axiom : true

logic default_modulus : int -> t

logic default_modulus__function_guard : t, int -> prop

axiom default_modulus__post_axiom : true

logic r2b : t

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range4(rec__my_sets__m__set__capacity1: int,
  rec__my_sets__m__set__modulus1: t, a: us_rep) =
  ((rec__my_sets__m__set__capacity1 = to_rep(((a).us_split_discrs1).rec__my_sets__m__set__capacity)) and
  (rec__my_sets__m__set__modulus1 = to_rep1(((a).us_split_discrs1).rec__my_sets__m__set__modulus)))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  (0 <= object__size5({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  a; rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  (0 <= object__alignment5({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = a; rec__my_sets__m__set__modulus = a1 };
  us_split_fields1 = { rec__my_sets__m__set = a2 } })))

logic my_sets__m__set__capacity__first__bit1 : int

logic my_sets__m__set__capacity__last__bit1 : int

logic my_sets__m__set__capacity__position1 : int

axiom my_sets__m__set__capacity__first__bit_axiom1 :
  (0 <= my_sets__m__set__capacity__first__bit1)

axiom my_sets__m__set__capacity__last__bit_axiom1 :
  (my_sets__m__set__capacity__first__bit1 <  my_sets__m__set__capacity__last__bit1)

axiom my_sets__m__set__capacity__position_axiom1 :
  (0 <= my_sets__m__set__capacity__position1)

logic my_sets__m__set__modulus__first__bit1 : int

logic my_sets__m__set__modulus__last__bit1 : int

logic my_sets__m__set__modulus__position1 : int

axiom my_sets__m__set__modulus__first__bit_axiom1 :
  (0 <= my_sets__m__set__modulus__first__bit1)

axiom my_sets__m__set__modulus__last__bit_axiom1 :
  (my_sets__m__set__modulus__first__bit1 <  my_sets__m__set__modulus__last__bit1)

axiom my_sets__m__set__modulus__position_axiom1 :
  (0 <= my_sets__m__set__modulus__position1)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy11 : count_type

logic dummy12 : hash_type

logic dummy13 : us_main_type

type tlS__ref = { tlS__content : us_rep
}

function tlS__ref___projection(a: tlS__ref) : us_rep = (a).tlS__content

axiom user_eq__def_axiom1 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  forall b:count_type. forall b1:hash_type. forall b2:us_main_type
  [user_eq9({ us_split_discrs1 = { rec__my_sets__m__set__capacity = a;
  rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = b; rec__my_sets__m__set__modulus = b1 };
  us_split_fields1 = { rec__my_sets__m__set = b2 } })]. (user_eq9({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = a;
  rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = b; rec__my_sets__m__set__modulus = b1 };
  us_split_fields1 = { rec__my_sets__m__set = b2 } }) = oeq({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = a;
  rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = b; rec__my_sets__m__set__modulus = b1 };
  us_split_fields1 = { rec__my_sets__m__set = b2 } })))

logic l__split_discrs : count_type

logic l__split_discrs1 : hash_type

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r5b : t

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate in_range5(rec__my_sets__m__set__capacity1: int,
  rec__my_sets__m__set__modulus1: t, a: us_rep) =
  ((rec__my_sets__m__set__capacity1 = to_rep(((a).us_split_discrs1).rec__my_sets__m__set__capacity)) and
  (rec__my_sets__m__set__modulus1 = to_rep1(((a).us_split_discrs1).rec__my_sets__m__set__modulus)))

logic value__size6 : int

logic object__size6 : us_rep -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  (0 <= object__size6({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  a; rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  (0 <= object__alignment6({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = a; rec__my_sets__m__set__modulus = a1 };
  us_split_fields1 = { rec__my_sets__m__set = a2 } })))

logic my_sets__m__set__capacity__first__bit2 : int

logic my_sets__m__set__capacity__last__bit2 : int

logic my_sets__m__set__capacity__position2 : int

axiom my_sets__m__set__capacity__first__bit_axiom2 :
  (0 <= my_sets__m__set__capacity__first__bit2)

axiom my_sets__m__set__capacity__last__bit_axiom2 :
  (my_sets__m__set__capacity__first__bit2 <  my_sets__m__set__capacity__last__bit2)

axiom my_sets__m__set__capacity__position_axiom2 :
  (0 <= my_sets__m__set__capacity__position2)

logic my_sets__m__set__modulus__first__bit2 : int

logic my_sets__m__set__modulus__last__bit2 : int

logic my_sets__m__set__modulus__position2 : int

axiom my_sets__m__set__modulus__first__bit_axiom2 :
  (0 <= my_sets__m__set__modulus__first__bit2)

axiom my_sets__m__set__modulus__last__bit_axiom2 :
  (my_sets__m__set__modulus__first__bit2 <  my_sets__m__set__modulus__last__bit2)

axiom my_sets__m__set__modulus__position_axiom2 :
  (0 <= my_sets__m__set__modulus__position2)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy14 : count_type

logic dummy15 : hash_type

logic dummy16 : us_main_type

type tkS__ref = { tkS__content : us_rep
}

function tkS__ref___projection(a: tkS__ref) : us_rep = (a).tkS__content

axiom user_eq__def_axiom2 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type.
  forall b:count_type. forall b1:hash_type. forall b2:us_main_type
  [user_eq10({ us_split_discrs1 = { rec__my_sets__m__set__capacity = a;
  rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = b; rec__my_sets__m__set__modulus = b1 };
  us_split_fields1 = { rec__my_sets__m__set = b2 } })]. (user_eq10({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = a;
  rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = b; rec__my_sets__m__set__modulus = b1 };
  us_split_fields1 = { rec__my_sets__m__set = b2 } }) = oeq({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = a;
  rec__my_sets__m__set__modulus = a1 }; us_split_fields1 = {
  rec__my_sets__m__set = a2 } }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = b; rec__my_sets__m__set__modulus = b1 };
  us_split_fields1 = { rec__my_sets__m__set = b2 } })))

logic k__split_discrs : count_type

logic k__split_discrs1 : hash_type

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic m__split_discrs : count_type

logic m__split_discrs1 : hash_type

logic attr__ATTRIBUTE_ADDRESS7 : int

logic m__split_discrs2 : count_type

logic m__split_discrs3 : hash_type

logic attr__ATTRIBUTE_ADDRESS8 : int

logic m__split_discrs4 : count_type

logic m__split_discrs5 : hash_type

logic attr__ATTRIBUTE_ADDRESS9 : int

logic m__split_discrs6 : count_type

logic m__split_discrs7 : hash_type

logic attr__ATTRIBUTE_ADDRESS10 : int

axiom no_element__def_axiom : (no_element = of_rep(0))

axiom user_eq__def_axiom3 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq5(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq5(a, b) = match_bool(bool_eq2(length2(a), length2(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length2(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq5(a, b) = match_bool(bool_eq2(length2(a), length2(b)), false,
  false)))))

axiom find__post_axiom1 :
  (forall container:us_rep2.
  (forall item:int [find(container, item)]. (in_range3(item) ->
  (((0 <  find(container, item)) -> ((find(container,
  item) <= length2(container)) and (item = get(container, find(container,
  item))))) and in_range1(find(container, item))))))

logic length3 : us_rep3 -> int

logic length__function_guard3 : int, us_rep3 -> prop

logic is_empty2 : us_rep3 -> bool

logic is_empty__function_guard2 : bool, us_rep3 -> prop

logic keys_included : us_rep3, us_rep3 -> bool

logic keys_included__function_guard : bool, us_rep3, us_rep3 -> prop

axiom mapping_preserved__post_axiom :
  (forall e_left:us_rep2. forall e_right:us_rep2.
  (forall p_left:us_rep3. forall p_right:us_rep3 [mapping_preserved(e_left,
  e_right, p_left, p_right)]. ((mapping_preserved(e_left, e_right, p_left,
  p_right) = true) -> (((keys_included(p_left, p_right) = true) and
  (forall i:int. (((1 <= i) and (i <= length2(e_left))) ->
  ((0 <  find(e_right, get(e_left, i))) and (get(e_right, find(e_right,
  get(e_left, i))) = get(e_left, i)))))) and
  (forall c:count_type. ((has_key(p_left, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = c } }) = true) -> (get(e_left, get1(p_left,
  { us_split_fields3 = { rec__my_sets__m__cursor__node = c }
  })) = get(e_right, get1(p_right, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = c } })))))))))

axiom mapping_preserved_except__post_axiom :
  (forall e_left:us_rep2. forall e_right:us_rep2.
  (forall p_left:us_rep3. forall p_right:us_rep3.
  (forall position:count_type [mapping_preserved_except(e_left, e_right,
  p_left, p_right, { us_split_fields3 = { rec__my_sets__m__cursor__node =
  position } })]. ((mapping_preserved_except(e_left, e_right, p_left,
  p_right, { us_split_fields3 = { rec__my_sets__m__cursor__node = position }
  }) = true) -> ((keys_included(p_left, p_right) = true) and
  (forall c:count_type. ((has_key(p_left, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = c } }) = true) -> ((not (bool_eq6({
  us_split_fields3 = { rec__my_sets__m__cursor__node = c } }, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = position }
  }) = true)) -> (get(e_left, get1(p_left, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = c } })) = get(e_right, get1(p_right, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = c } })))))))))))

logic is_empty3 : us_rep4 -> bool

logic is_empty__function_guard3 : bool, us_rep4 -> prop

logic length4 : us_rep4 -> int

logic length__function_guard4 : int, us_rep4 -> prop

axiom model____post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type [model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } })].
  (length4(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } })) = length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } })))

type element_type1

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq11 : element_type1, element_type1 -> bool

logic dummy17 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom elements__post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type [elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } })].
  (((((length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 }
  })) = length({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } })) and
  (forall temp___423:int. ((in_range2(temp___423) and ((1 <= temp___423) and
  (temp___423 <= (0 + length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 }
  })))))) -> (contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }), temp___423)) = true)))) and
  (forall item:int. ((in_range6(item) and (contains(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }), item) = true)) ->
  ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  item)) and (get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  find(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }), item)) = item))))) and
  (forall i:int. (((1 <= i) and (i <= length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 }
  }))) -> (find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }), i)) = i)))) and
  (forall i:int. (((1 <= i) and (i <= length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 }
  }))) ->
  (forall j:int. (((1 <= j) and (j <= length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 }
  }))) -> ((get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  i) = get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }), j)) -> (i = j))))))))

axiom positions__post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type [positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } })].
  ((not (has_key(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  { us_split_fields3 = { rec__my_sets__m__cursor__node = no_element }
  }) = true)) and
  (forall i:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  { us_split_fields3 = { rec__my_sets__m__cursor__node = i } }) = true) ->
  (((1 <= get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  { us_split_fields3 = { rec__my_sets__m__cursor__node = i } })) and
  (get1(positions({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }), { us_split_fields3 = {
  rec__my_sets__m__cursor__node = i } }) <= length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 }
  }))) and
  (forall j:count_type. ((has_key(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }),
  { us_split_fields3 = { rec__my_sets__m__cursor__node = j } }) = true) ->
  ((get1(positions({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  container; rec__my_sets__m__set__modulus = container1 }; us_split_fields1 =
  { rec__my_sets__m__set = container2 } }), { us_split_fields3 = {
  rec__my_sets__m__cursor__node = i } }) = get1(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = container;
  rec__my_sets__m__set__modulus = container1 }; us_split_fields1 = {
  rec__my_sets__m__set = container2 } }), { us_split_fields3 = {
  rec__my_sets__m__cursor__node = j } })) -> (bool_eq6({ us_split_fields3 = {
  rec__my_sets__m__cursor__node = i } }, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = j } }) = true)))))))))

axiom element__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type.
  (forall position:count_type [element(attr__tag, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = position } })].
  in_range3(element(attr__tag, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = container; rec__my_sets__m__set__modulus =
  container1 }; us_split_fields1 = { rec__my_sets__m__set = container2 } }, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = position } })))))

axiom has_element__post__dispatch_axiom : true

axiom contains__post_axiom :
  (forall container:us_rep4.
  (forall item:int [contains(container, item)]. (in_range6(item) ->
  ((of_int1(1) = true) ->
  ((exists e:int. ((in_range6(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

axiom length__post_axiom1 :
  (forall container:us_rep4 [length4(container)].
  in_range1(length4(container)))

axiom ole__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall item:int. ((in_range6(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom oeq__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4 [oeq2(left, right)].
  ((oeq2(left, right) = true) <-> ((ole(left, right) = true) and (ole(right,
  left) = true))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep4 [is_empty3(container)].
  (((is_empty3(container) = true) <->
  (forall item:int. (not (in_range6(item) and (contains(container,
  item) = true))))) and ((is_empty3(container) = true) <->
  (length4(container) = 0))))

axiom included_except__post_axiom :
  (forall left:us_rep4. forall right:us_rep4.
  (forall item:int [included_except(left, right, item)]. (in_range6(item) ->
  ((included_except(left, right, item) = true) <->
  (forall e:int. ((in_range6(e) and (contains(left, e) = true)) ->
  ((contains(right, e) = true) or (e = item))))))))

axiom includes_intersection__post_axiom :
  (forall container:us_rep4. forall left:us_rep4. forall right:us_rep4
  [includes_intersection(container, left, right)].
  ((includes_intersection(container, left, right) = true) <->
  (forall item:int. ((in_range6(item) and (contains(left, item) = true)) ->
  ((contains(right, item) = true) -> (contains(container, item) = true))))))

axiom included_in_union__post_axiom :
  (forall container:us_rep4. forall left:us_rep4. forall right:us_rep4
  [included_in_union(container, left, right)]. ((included_in_union(container,
  left, right) = true) <->
  (forall item:int. ((in_range6(item) and (contains(container,
  item) = true)) -> ((contains(left, item) = true) or (contains(right,
  item) = true))))))

axiom not_in_both__post_axiom :
  (forall container:us_rep4. forall left:us_rep4. forall right:us_rep4
  [not_in_both(container, left, right)]. ((not_in_both(container, left,
  right) = true) <->
  (forall item:int. ((in_range6(item) and (contains(container,
  item) = true)) -> ((not (contains(left, item) = true)) or
  (not (contains(right, item) = true)))))))

axiom no_overlap__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [no_overlap(left, right)].
  ((no_overlap(left, right) = true) <->
  (forall item:int. ((in_range6(item) and (contains(left, item) = true)) ->
  (not (contains(right, item) = true))))))

logic intersection : us_rep4, us_rep4 -> us_rep4

logic intersection__function_guard : us_rep4, us_rep4, us_rep4 -> prop

axiom num_overlaps__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [num_overlaps(left, right)].
  (((((num_overlaps(left, right) = length4(intersection(left, right))) and
  (((ole(left, right) = true) -> (num_overlaps(left,
  right) = length4(left))) and ((not (ole(left, right) = true)) ->
  (num_overlaps(left, right) <  length4(left))))) and (((ole(right,
  left) = true) -> (num_overlaps(left, right) = length4(right))) and
  ((not (ole(right, left) = true)) -> (num_overlaps(left,
  right) <  length4(right))))) and ((num_overlaps(left, right) = 0) <->
  (no_overlap(left, right) = true))) and in_range1(num_overlaps(left,
  right))))

axiom intersection__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [intersection(left, right)].
  (((ole(intersection(left, right), left) = true) and (ole(intersection(left,
  right), right) = true)) and (includes_intersection(intersection(left,
  right), left, right) = true)))

axiom length__post_axiom2 :
  (forall container:us_rep2 [length2(container)].
  (((0 + length2(container)) <= 2147483647) and
  in_range1(length2(container))))

type element_type2

predicate in_range7(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq12 : element_type2, element_type2 -> bool

logic dummy18 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_3__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall position:int [get(container, position)]. ((in_range2(position) and
  ((1 <= position) and (position <= (0 + length2(container))))) ->
  in_range7(get(container, position)))))

axiom has_key__post_axiom :
  (forall container:us_rep3.
  (forall key:count_type [has_key(container, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } })]. ((of_int1(0) = true) ->
  ((exists k:count_type. ((has_key(container, { us_split_fields3 = {
   rec__my_sets__m__cursor__node = k } }) = true) and (bool_eq6({
   us_split_fields3 = { rec__my_sets__m__cursor__node = k } }, {
   us_split_fields3 = { rec__my_sets__m__cursor__node = key } }) = true))) ->
  (has_key(container, { us_split_fields3 = { rec__my_sets__m__cursor__node =
  key } }) = true)))))

type element_type3

predicate in_range8(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq13 : element_type3, element_type3 -> bool

logic dummy19 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref_4__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

logic witness : us_rep3, us_rep1 -> int

logic witness__function_guard : int, us_rep3, us_rep1 -> prop

logic w_get : us_rep3, int -> int

logic w_get__function_guard : int, us_rep3, int -> prop

axiom get__post_axiom1 :
  (forall container:us_rep3.
  (forall key:count_type [get1(container, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } })]. ((has_key(container, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = key } }) = true) ->
  (((of_int1(0) = true) -> ((get1(container, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } }) = w_get(container,
  witness(container, { us_split_fields3 = { rec__my_sets__m__cursor__node =
  key } }))) and
  (forall k:count_type. ((has_key(container, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = k } }) = true) -> ((bool_eq6({
  us_split_fields3 = { rec__my_sets__m__cursor__node = k } }, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = key } }) = true) <->
  (witness(container, { us_split_fields3 = { rec__my_sets__m__cursor__node =
  key } }) = witness(container, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = k } }))))))) and in_range8(get1(container,
  { us_split_fields3 = { rec__my_sets__m__cursor__node = key } }))))))

axiom length__post_axiom3 :
  (forall container:us_rep3 [length3(container)].
  in_range1(length3(container)))

axiom oeq__post_axiom2 :
  (forall left:us_rep3. forall right:us_rep3 [oeq3(left, right)].
  ((oeq3(left, right) = true) <->
  ((forall key:count_type. ((has_key(left, { us_split_fields3 = {
   rec__my_sets__m__cursor__node = key } }) = true) -> ((has_key(right, {
   us_split_fields3 = { rec__my_sets__m__cursor__node = key } }) = true) and
   (get1(right, { us_split_fields3 = { rec__my_sets__m__cursor__node = key }
   }) = get1(left, { us_split_fields3 = { rec__my_sets__m__cursor__node = key
   } }))))) and
  (forall key:count_type. ((has_key(right, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } }) = true) -> (has_key(left, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = key } }) = true))))))

axiom is_empty__post_axiom2 :
  (forall container:us_rep3 [is_empty2(container)].
  ((is_empty2(container) = true) <->
  (forall key:count_type. (not (has_key(container, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } }) = true)))))

axiom keys_included__post_axiom :
  (forall left:us_rep3. forall right:us_rep3 [keys_included(left, right)].
  ((keys_included(left, right) = true) <->
  (forall key:count_type. ((has_key(left, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } }) = true) -> (has_key(right, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = key } }) = true)))))

axiom keys_included_except__post_axiom :
  (forall left:us_rep3. forall right:us_rep3.
  (forall new_key:count_type [keys_included_except(left, right, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = new_key } })].
  ((keys_included_except(left, right, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = new_key } }) = true) <->
  (forall key:count_type. ((has_key(left, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } }) = true) -> ((not (bool_eq6({
  us_split_fields3 = { rec__my_sets__m__cursor__node = key } }, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = new_key }
  }) = true)) -> (has_key(right, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } }) = true)))))))

logic has_witness : us_rep3, int -> bool

logic has_witness__function_guard : bool, us_rep3, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep3.
  (forall key:count_type [witness(container, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } })]. ((has_key(container, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = key } }) = true) ->
  ((has_witness(container, witness(container, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } })) = true) and
  in_range1(witness(container, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = key } }))))))

axiom w_get__post_axiom :
  (forall container:us_rep3.
  (forall witness1:int [w_get(container, witness1)].
  ((in_range1(witness1) and (has_witness(container, witness1) = true)) ->
  in_range8(w_get(container, witness1)))))

 (* File "my_sets.adb", line 177, characters 0-0 *)
goal WP_parameter_def :
  (forall l__split_fields:us_main_type. forall k__split_fields:us_main_type.
  forall c__split_fields:count_type.
  forall my_sets__test_set_pos__R2b__assume:t. forall us:t. forall us1:int.
  forall my_sets__test_set_pos__R5b__assume:t. forall us2:t. forall us3:int.
  forall temp___1373:count_type. forall temp___1374:count_type.
  forall result:us_split_fields__ref1.
  forall c__split_fields1:us_split_fields2.
  forall result1:us_split_fields__ref1.
  forall c__split_fields2:us_split_fields2.
  forall my_sets__m__insert__2__container__fields:us_split_fields.
  forall result2:us_split_fields__ref.
  forall l__split_fields1:us_split_fields.
  forall my_sets__m__insert__2__container__fields1:us_split_fields.
  forall result3:us_split_fields__ref.
  forall l__split_fields2:us_split_fields.
  forall c__split_fields3:us_split_fields2. forall b:bool.
  forall my_sets__m__insert__container__fields:us_split_fields.
  forall result4:us_split_fields__ref.
  forall l__split_fields3:us_split_fields.
  forall my_sets__m__replace_element__container__fields:us_split_fields.
  forall result5:us_split_fields__ref.
  forall l__split_fields4:us_split_fields.
  forall my_sets__m__replace__container__fields:us_split_fields.
  forall result6:us_split_fields__ref.
  forall l__split_fields5:us_split_fields.
  forall my_sets__m__assign__target__fields:us_split_fields.
  forall result7:us_split_fields__ref.
  forall k__split_fields1:us_split_fields.
  forall my_sets__m__move__source__fields:us_split_fields.
  forall my_sets__m__move__target__fields:us_split_fields.
  forall result8:us_split_fields__ref.
  forall l__split_fields6:us_split_fields.
  forall result9:us_split_fields__ref.
  forall k__split_fields2:us_split_fields.
  forall my_sets__m__assign__target__fields1:us_split_fields.
  forall result10:us_split_fields__ref.
  forall k__split_fields3:us_split_fields.
  forall my_sets__m__include__container__fields:us_split_fields.
  forall result11:us_split_fields__ref.
  forall l__split_fields7:us_split_fields.
  forall my_sets__m__include__container__fields1:us_split_fields.
  forall result12:us_split_fields__ref.
  forall l__split_fields8:us_split_fields.
  forall my_sets__m__delete__container__fields:us_split_fields.
  forall result13:us_split_fields__ref.
  forall l__split_fields9:us_split_fields.
  (((my_sets__test_set_pos__R2b__assume = default_modulus(10)) and
  (my_sets__test_set_pos__R2b__assume = r2b)) -> ((us = r2b) ->
  (((us1 = 10) and in_range1(10)) -> ((((to_rep(l__split_discrs) = 10) and
  (to_rep1(l__split_discrs1) = r2b)) and (is_empty({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }) = true)) ->
  (((10 = to_rep(l__split_discrs)) and (r2b = to_rep1(l__split_discrs1))) ->
  (((my_sets__test_set_pos__R5b__assume = default_modulus(10)) and
  (my_sets__test_set_pos__R5b__assume = r5b)) -> ((us2 = r5b) ->
  (((us3 = 10) and in_range1(10)) -> ((((to_rep(k__split_discrs) = 10) and
  (to_rep1(k__split_discrs1) = r5b)) and (is_empty({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = k__split_fields } }) = true)) ->
  (((10 = to_rep(k__split_discrs)) and (r5b = to_rep1(k__split_discrs1))) ->
  ((is_empty({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = { rec__my_sets__m__set = l__split_fields } }) = true) ->
  (((({ us_split_fields3 = { rec__my_sets__m__cursor__node = temp___1373 }
  } = first({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = { rec__my_sets__m__set = l__split_fields } })) and
  (((bool_eq2(length({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = { rec__my_sets__m__set = l__split_fields } }),
  0) = true) and (bool_eq6({ us_split_fields3 = {
  rec__my_sets__m__cursor__node = temp___1373 } }, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = no_element } }) = true)) or
  ((not (bool_eq2(length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), 0) = true)) and
  ((has_key(positions({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = { rec__my_sets__m__set = l__split_fields } }), {
  us_split_fields3 = { rec__my_sets__m__cursor__node = temp___1373 }
  }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), { us_split_fields3 = {
  rec__my_sets__m__cursor__node = temp___1373 } }) = 1))))) and ((result = {
  us_split_fields__content1 = { rec__my_sets__m__cursor__node =
  c__split_fields } }) and (c__split_fields1 = {
  rec__my_sets__m__cursor__node = temp___1373 }))) -> (((({
  us_split_fields3 = { rec__my_sets__m__cursor__node = temp___1374 }
  } = next({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = { rec__my_sets__m__set = l__split_fields } }, {
  us_split_fields3 = c__split_fields1 })) and (((match_bool(bool_eq6({
  us_split_fields3 = c__split_fields1 }, { us_split_fields3 = {
  rec__my_sets__m__cursor__node = no_element } }), true,
  bool_eq2(get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), { us_split_fields3 =
  c__split_fields1 }), length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }))) = true) and (bool_eq6({
  us_split_fields3 = { rec__my_sets__m__cursor__node = temp___1374 } }, {
  us_split_fields3 = { rec__my_sets__m__cursor__node = no_element }
  }) = true)) or ((not (match_bool(bool_eq6({ us_split_fields3 =
  c__split_fields1 }, { us_split_fields3 = { rec__my_sets__m__cursor__node =
  no_element } }), true, bool_eq2(get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), { us_split_fields3 =
  c__split_fields1 }), length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }))) = true)) and
  ((has_key(positions({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = { rec__my_sets__m__set = l__split_fields } }), {
  us_split_fields3 = { rec__my_sets__m__cursor__node = temp___1374 }
  }) = true) and (get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), { us_split_fields3 = {
  rec__my_sets__m__cursor__node = temp___1374 } }) = (get1(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), { us_split_fields3 =
  c__split_fields1 }) + 1)))))) and ((result1 = { us_split_fields__content1 =
  c__split_fields1 }) and (c__split_fields2 = {
  rec__my_sets__m__cursor__node = temp___1374 }))) -> (((((((((length({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields }) = (length({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }) + 1)) and (contains(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields }), 1) = true)) and
  (get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = my_sets__m__insert__2__container__fields }),
  get1(positions({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = my_sets__m__insert__2__container__fields }), find1({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields }, 1))) = 1)) and (ole(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields })) = true)) and
  (included_except(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), 1) = true)) and
  (mapping_preserved(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), elements({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields }), positions({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), positions({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields })) = true)) and
  (keys_included_except(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields }), positions({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 = {
  rec__my_sets__m__set = l__split_fields } }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields }, 1)) = true)) and ((result2 = {
  us_split_fields__content = { rec__my_sets__m__set = l__split_fields }
  }) and (l__split_fields1 = my_sets__m__insert__2__container__fields))) ->
  (((((((((length({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = my_sets__m__insert__2__container__fields1 }) = (length({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields1 }) + 1)) and (contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields1 }), 2) = true)) and
  (get(elements({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = my_sets__m__insert__2__container__fields1 }),
  get1(positions({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = my_sets__m__insert__2__container__fields1 }), find1({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields1 }, 2))) = 2)) and (ole(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields1 }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields1 })) = true)) and
  (included_except(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields1 }), model__({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields1 }), 2) = true)) and (mapping_preserved(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields1 }), elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields1 }), positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields1 }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields1 })) = true)) and
  (keys_included_except(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields1 }), positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields1 }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__2__container__fields1 }, 2)) = true)) and ((result3 = {
  us_split_fields__content = l__split_fields1 }) and
  (l__split_fields2 = my_sets__m__insert__2__container__fields1))) ->
  ((((((contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), 1) = true) and
  (has_key(positions({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = my_sets__m__insert__container__fields }), {
  us_split_fields3 = c__split_fields3 }) = true)) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), get1(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), { us_split_fields3 =
  c__split_fields3 })) = 1)) and (((contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 }), 1) = true) and ((((not (b = true)) and (oeq2(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 })) = true)) and ((bool_eq2(length2(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields })), length2(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length2(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }))))) -> (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), n) = get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 }), n)))))) and (oeq3(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 })) = true))) or ((not (contains(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 }), 1) = true)) and (((((((b = true) and (length({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }) = (length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 }) + 1))) and (get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), get1(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), { us_split_fields3 =
  c__split_fields3 })) = 1)) and (ole(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields })) = true)) and
  (included_except(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 }), 1) = true)) and (mapping_preserved(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 }), elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields })) = true)) and
  (keys_included_except(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__insert__container__fields }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields2 }), { us_split_fields3 = c__split_fields3
  }) = true))))) and ((result4 = { us_split_fields__content =
  l__split_fields2 }) and
  (l__split_fields3 = my_sets__m__insert__container__fields))) ->
  ((not (b = true)) -> (((((((((length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace_element__container__fields }) = length({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields3 })) and (get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace_element__container__fields }), get1(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace_element__container__fields }), { us_split_fields3 =
  c__split_fields3 })) = 1)) and (contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace_element__container__fields }), 1) = true)) and
  (included_except(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields3 }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace_element__container__fields }), get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields3 }), get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields3 }), { us_split_fields3 = c__split_fields3
  }))) = true)) and (included_except(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace_element__container__fields }), model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields3 }), 1) = true)) and (mapping_preserved_except(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields3 }), elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace_element__container__fields }), positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields3 }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace_element__container__fields }), { us_split_fields3 =
  c__split_fields3 }) = true)) and (oeq3(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace_element__container__fields }), positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields3 })) = true)) and ((result5 = { us_split_fields__content =
  l__split_fields3 }) and
  (l__split_fields4 = my_sets__m__replace_element__container__fields))) ->
  (((((((oeq2(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = my_sets__m__replace__container__fields }), model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields4 })) = true) and (contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace__container__fields }), 1) = true)) and
  (oeq3(positions({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = my_sets__m__replace__container__fields }), positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields4 })) = true)) and (get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace__container__fields }), get1(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace__container__fields }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace__container__fields }, 1))) = 1)) and
  ((bool_eq2(length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields4 })), length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace__container__fields }))) = true) and
  (forall i:int. (((1 <= i) and (i <= (0 + length2(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields4 }))))) -> ((not (i = get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace__container__fields }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace__container__fields }, 1)))) -> (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields4 }), i) = get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__replace__container__fields }), i))))))) and ((result6 = {
  us_split_fields__content = l__split_fields4 }) and
  (l__split_fields5 = my_sets__m__replace__container__fields))) ->
  ((forall temp___431:int. ((in_range2(temp___431) and ((1 <= temp___431) and
   (temp___431 <= (0 + length2(elements({ us_split_discrs1 = {
   rec__my_sets__m__set__capacity = l__split_discrs;
   rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
   l__split_fields5 })))))) ->
   (exists i:us_rep1. ((has_key(positions({ us_split_discrs1 = {
   rec__my_sets__m__set__capacity = l__split_discrs;
   rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
   l__split_fields5 }), i) = true) and (get(elements({ us_split_discrs1 = {
   rec__my_sets__m__set__capacity = l__split_discrs;
   rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
   l__split_fields5 }), get1(positions({ us_split_discrs1 = {
   rec__my_sets__m__set__capacity = l__split_discrs;
   rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
   l__split_fields5 }), i)) = get(elements({ us_split_discrs1 = {
   rec__my_sets__m__set__capacity = l__split_discrs;
   rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
   l__split_fields5 }), temp___431)))))) ->
  ((((((oeq2(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  k__split_discrs; rec__my_sets__m__set__modulus = k__split_discrs1 };
  us_split_fields1 = my_sets__m__assign__target__fields }), model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields5 })) = true) and (length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields }) = length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields5 }))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields })))) -> ((0 <  find(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields5 }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields }), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields5 }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields5 }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields }), i))) = get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields }), i)))))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields5 })))) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields5 }), i))) and (get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields5 }), i))) = get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields5 }), i)))))) and ((result7 = { us_split_fields__content = {
  rec__my_sets__m__set = k__split_fields } }) and
  (k__split_fields1 = my_sets__m__assign__target__fields))) ->
  (((((((length({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  k__split_discrs; rec__my_sets__m__set__modulus = k__split_discrs1 };
  us_split_fields1 = my_sets__m__move__source__fields }) = 0) and
  (oeq2(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = my_sets__m__move__target__fields }), model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields1 })) = true)) and (length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__move__target__fields }) = length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields1 }))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__move__target__fields })))) -> ((0 <  find(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields1 }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__move__target__fields }), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields1 }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields1 }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__move__target__fields }), i))) = get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__move__target__fields }), i)))))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields1 })))) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__move__target__fields }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields1 }), i))) and (get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__move__target__fields }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__move__target__fields }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields1 }), i))) = get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields1 }), i)))))) and (((result8 = { us_split_fields__content =
  l__split_fields5 }) and
  (l__split_fields6 = my_sets__m__move__target__fields)) and ((result9 = {
  us_split_fields__content = k__split_fields1 }) and
  (k__split_fields2 = my_sets__m__move__source__fields)))) ->
  ((((((oeq2(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  k__split_discrs; rec__my_sets__m__set__modulus = k__split_discrs1 };
  us_split_fields1 = my_sets__m__assign__target__fields1 }), model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 })) = true) and (length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields1 }) = length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields1 })))) -> ((0 <  find(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields1 }), i))) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields1 }), i))) = get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields1 }), i)))))) and
  (forall i:int. (((1 <= i) and (i <= length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 })))) -> ((0 <  find(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields1 }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), i))) and (get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields1 }), find(elements({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  my_sets__m__assign__target__fields1 }), get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), i))) = get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), i)))))) and ((result10 = { us_split_fields__content =
  k__split_fields2 }) and
  (k__split_fields3 = my_sets__m__assign__target__fields1))) ->
  ((contains(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = l__split_fields6 }), 1) = true) ->
  (((((contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }), 1) = true) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }), get1(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }, 1))) = 1)) and
  (((contains(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = l__split_fields6 }), 1) = true) and (((oeq2(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 })) = true) and (oeq3(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 })) = true)) and ((bool_eq2(length2(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 })), length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }))) = true) and
  (forall i:int. (((1 <= i) and (i <= (0 + length2(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }))))) -> ((not (i = get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }, 1)))) -> (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), i) = get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }), i)))))))) or
  ((not (contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), 1) = true)) and (((((length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }) = (length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }) + 1)) and (ole(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields })) = true)) and
  (included_except(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), 1) = true)) and (mapping_preserved(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields })) = true)) and
  (keys_included_except(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields6 }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields }, 1)) = true))))) and
  ((result11 = { us_split_fields__content = l__split_fields6 }) and
  (l__split_fields7 = my_sets__m__include__container__fields))) ->
  ((not (contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 }), 3) = true)) -> (((((contains(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }), 3) = true) and (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }), get1(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }, 3))) = 3)) and
  (((contains(model__({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = l__split_fields7 }), 3) = true) and (((oeq2(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 })) = true) and (oeq3(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }), positions({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 })) = true)) and ((bool_eq2(length2(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 })), length2(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }))) = true) and
  (forall i:int. (((1 <= i) and (i <= (0 + length2(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 }))))) -> ((not (i = get1(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }, 3)))) -> (get(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 }), i) = get(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }), i)))))))) or
  ((not (contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 }), 3) = true)) and (((((length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }) = (length({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 }) + 1)) and (ole(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 })) = true)) and
  (included_except(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 }), 3) = true)) and (mapping_preserved(elements({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 }), elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }), positions({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 })) = true)) and
  (keys_included_except(positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }), positions({ us_split_discrs1 =
  { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields7 }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__include__container__fields1 }, 3)) = true))))) and
  ((result12 = { us_split_fields__content = l__split_fields7 }) and
  (l__split_fields8 = my_sets__m__include__container__fields1))) ->
  ((((((((length({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = my_sets__m__delete__container__fields }) = (length({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields8 }) - 1)) and (not (contains(model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__delete__container__fields }), 2) = true))) and (ole(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__delete__container__fields }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields8 })) = true)) and (included_except(model__({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields8 }), model__({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__delete__container__fields }), 2) = true)) and
  (mapping_preserved(elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__delete__container__fields }), elements({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields8 }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__delete__container__fields }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields8 })) = true)) and (keys_included_except(positions({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields8 }), positions({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  my_sets__m__delete__container__fields }), find1({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields8 }, 2)) = true)) and ((result13 = {
  us_split_fields__content = l__split_fields8 }) and
  (l__split_fields9 = my_sets__m__delete__container__fields))) ->
  ((not (is_subset({ us_split_discrs1 = { rec__my_sets__m__set__capacity =
  k__split_discrs; rec__my_sets__m__set__modulus = k__split_discrs1 };
  us_split_fields1 = k__split_fields3 }, { us_split_discrs1 = {
  rec__my_sets__m__set__capacity = l__split_discrs;
  rec__my_sets__m__set__modulus = l__split_discrs1 }; us_split_fields1 =
  l__split_fields9 }) = true)) -> ((overlap({ us_split_discrs1 = {
  rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields3 }, { us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = l__split_fields9 }) = true) -> ((not (equivalent_sets({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields3 }, { us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = l__split_fields9 }) = true)) -> (not (oeq({
  us_split_discrs1 = { rec__my_sets__m__set__capacity = k__split_discrs;
  rec__my_sets__m__set__modulus = k__split_discrs1 }; us_split_fields1 =
  k__split_fields3 }, { us_split_discrs1 = { rec__my_sets__m__set__capacity =
  l__split_discrs; rec__my_sets__m__set__modulus = l__split_discrs1 };
  us_split_fields1 = l__split_fields9
  }) = true))))))))))))))))))))))))))))))))))
