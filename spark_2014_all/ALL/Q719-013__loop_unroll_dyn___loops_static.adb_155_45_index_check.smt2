;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int natural)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-fun dummy2 () us_t)

(declare-datatypes ()
((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content
                                                                  a))

(declare-fun a__first () integer)

(declare-fun a__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_142 us_t)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (not (= temp___skip_constant_140 true))
                                      (dynamic_property (- 2147483648)
                                      2147483647 (first1 temp___expr_142)
                                      (last1 temp___expr_142))))

(declare-fun a () (Array Int natural))

(declare-fun bad () Bool)

(declare-fun i () Int)

(declare-fun j () Int)

(declare-fun o () natural)

(declare-fun o1 () Int)

(declare-fun o2 () (Array Int natural))

(declare-fun temp___361 () Bool)

(declare-fun o3 () Int)

(declare-fun o4 () natural)

(declare-fun o5 () Int)

(declare-fun o6 () Bool)

(declare-fun j1 () Int)

(declare-fun j2 () Int)

(declare-fun result () Bool)

(declare-fun bad1 () Bool)

(declare-fun result1 () Int)

(declare-fun i1 () Int)

(declare-fun result2 () (Array Int natural))

(declare-fun a1 () (Array Int natural))

(declare-fun result3 () Bool)

(declare-fun bad2 () Bool)

(declare-fun result4 () Int)

(declare-fun j3 () Int)

(declare-fun bad3 () Bool)

(declare-fun j4 () Int)

(declare-fun result5 () Bool)

(declare-fun result6 () Bool)

(declare-fun bad4 () Bool)

(declare-fun bad5 () Bool)

(declare-fun j5 () Int)

(declare-fun bad6 () Bool)

(declare-fun j6 () Int)

(declare-fun bad7 () Bool)

(declare-fun j7 () Int)

(declare-fun bad8 () Bool)

(declare-fun j8 () Int)

(declare-fun bad9 () Bool)

(declare-fun j9 () Int)

(declare-fun bad10 () Bool)

(declare-fun j10 () Int)

(define-fun j11 () int__ref (mk_int__ref j9))

(define-fun j12 () int__ref (mk_int__ref j7))

(define-fun bad11 () bool__ref (mk_bool__ref bad7))

(define-fun j13 () int__ref (mk_int__ref j))

;; H
  (assert (dynamic_property (- 2147483648) 2147483647 (to_rep1 a__first)
  (to_rep1 a__last)))

;; H
  (assert (= result bad))

;; H
  (assert (= bad1 (of_int 0)))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (and (<= (to_rep1 a__first) i1) (<= i1 (to_rep1 a__last))))

;; H
  (assert (= o1 i1))

;; H
  (assert (= o2 (store a o1 o)))

;; H
  (assert (= (mk_map__ref result2) (mk_map__ref a)))

;; H
  (assert (= a1 o2))

;; H
  (assert (=> (= i1 1) (= bad1 result3)))

;; H
  (assert (=> (= i1 1) (= bad2 (of_int 0))))

;; H
  (assert (=> (= i1 1) (= j11 j13)))

;; H
  (assert (=> (= i1 1) (= bad2 bad9)))

;; H
  (assert (=> (= i1 1) (= j10 j2)))

;; H
  (assert (=> (= i1 1) (= bad10 bad2)))

;; H
  (assert (=> (not (= i1 1)) (= (mk_int__ref result4) j13)))

;; H
  (assert (=> (not (= i1 1)) (= j3 (to_rep1 a__first))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= temp___361 bad1))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1))
  (and (<= (to_rep1 a__first) j4) (<= j4 i1)))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1))
  (and (<= (to_rep1 a__first) j4) (<= j4 (to_rep1 a__last))))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= o3 j4))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= o4 (select a1 o3)))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= o5 (to_rep o4)))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1))
  (= o6 (ite (= o5 0) true false)))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1))
  (= result5 (ite (not (= o6 true)) true false)))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1))
  (=> (= result5 true) (= bad3 result6)))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1))
  (=> (= result5 true) (= bad4 (of_int 1))))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1))
  (=> (not (= result5 true)) (= bad4 bad3)))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= j4 i1))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= j4 j5))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= bad4 bad5))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= j6 j4))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= bad6 bad4))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= j12 (mk_int__ref j5)))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1))
  (= bad11 (mk_bool__ref bad5)))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= j8 j6))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (and (<= (to_rep1 a__first) j3) (<= j3 i1)) (= bad8 bad6))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (not (and (<= (to_rep1 a__first) j3) (<= j3 i1))) (= j3 j7))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (not (and (<= (to_rep1 a__first) j3) (<= j3 i1))) (= bad1 bad7))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (not (and (<= (to_rep1 a__first) j3) (<= j3 i1))) (= j8 j3))))

;; H
  (assert
  (=> (not (= i1 1))
  (=> (not (and (<= (to_rep1 a__first) j3) (<= j3 i1))) (= bad8 bad1))))

;; H
  (assert (=> (not (= i1 1)) (= j11 j12)))

;; H
  (assert (=> (not (= i1 1)) (= (mk_bool__ref bad9) bad11)))

;; H
  (assert (=> (not (= i1 1)) (= j10 j8)))

;; H
  (assert (=> (not (= i1 1)) (= bad10 bad8)))

;; H
  (assert (<= (to_rep1 a__first) j1))

;; H
  (assert (<= j1 i1))

(assert
;; WP_parameter_def
 ;; File "loops_static.adb", line 120, characters 0-0
  (not (<= (to_rep1 a__first) j1)))
(check-sat)
(exit)
