(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic sum_of : int -> int

logic sum_of__function_guard : int, int -> prop

logic attr__ATTRIBUTE_ADDRESS : int

logic r2b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref___projection(a: t3b__ref) : integer = (a).t3b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r5b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t6b__ref = { t6b__content : integer
}

function t6b__ref___projection(a: t6b__ref) : integer = (a).t6b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r8b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic r10b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy8 : integer

type t11b__ref = { t11b__content : integer
}

function t11b__ref___projection(a: t11b__ref) : integer = (a).t11b__content

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r13b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic r15b : int

logic attr__ATTRIBUTE_ADDRESS11 : int

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy9 : integer

type t16b__ref = { t16b__content : integer
}

function t16b__ref___projection(a: t16b__ref) : integer = (a).t16b__content

logic attr__ATTRIBUTE_ADDRESS12 : int

logic temp___String_Literal_513 : unit -> (int,character) farray

axiom temp___String_Literal_513__def_axiom :
  (((((((((to_rep((temp___String_Literal_513(void)[1])) = 70) and
  (to_rep((temp___String_Literal_513(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_513(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_513(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_513(void)[5])) = 108)) and
  (to_rep((temp___String_Literal_513(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_513(void)[7])) = 111)) and
  (to_rep((temp___String_Literal_513(void)[8])) = 112)) and
  (to_rep((temp___String_Literal_513(void)[9])) = 115))

logic temp___String_Literal_514 : unit -> (int,character) farray

axiom temp___String_Literal_514__def_axiom :
  ((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_514(void)[1])) = 69) and
  (to_rep((temp___String_Literal_514(void)[2])) = 82)) and
  (to_rep((temp___String_Literal_514(void)[3])) = 82)) and
  (to_rep((temp___String_Literal_514(void)[4])) = 79)) and
  (to_rep((temp___String_Literal_514(void)[5])) = 82)) and
  (to_rep((temp___String_Literal_514(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_514(void)[7])) = 49)) and
  (to_rep((temp___String_Literal_514(void)[8])) = 58)) and
  (to_rep((temp___String_Literal_514(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_514(void)[10])) = 108)) and
  (to_rep((temp___String_Literal_514(void)[11])) = 111)) and
  (to_rep((temp___String_Literal_514(void)[12])) = 111)) and
  (to_rep((temp___String_Literal_514(void)[13])) = 112)) and
  (to_rep((temp___String_Literal_514(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_514(void)[15])) = 115)) and
  (to_rep((temp___String_Literal_514(void)[16])) = 104)) and
  (to_rep((temp___String_Literal_514(void)[17])) = 111)) and
  (to_rep((temp___String_Literal_514(void)[18])) = 117)) and
  (to_rep((temp___String_Literal_514(void)[19])) = 108)) and
  (to_rep((temp___String_Literal_514(void)[20])) = 100)) and
  (to_rep((temp___String_Literal_514(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_514(void)[22])) = 110)) and
  (to_rep((temp___String_Literal_514(void)[23])) = 111)) and
  (to_rep((temp___String_Literal_514(void)[24])) = 116)) and
  (to_rep((temp___String_Literal_514(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_514(void)[26])) = 101)) and
  (to_rep((temp___String_Literal_514(void)[27])) = 120)) and
  (to_rep((temp___String_Literal_514(void)[28])) = 101)) and
  (to_rep((temp___String_Literal_514(void)[29])) = 99)) and
  (to_rep((temp___String_Literal_514(void)[30])) = 117)) and
  (to_rep((temp___String_Literal_514(void)[31])) = 116)) and
  (to_rep((temp___String_Literal_514(void)[32])) = 101))

logic temp___String_Literal_519 : unit -> (int,character) farray

axiom temp___String_Literal_519__def_axiom :
  (((((((((((((((((((((((((((((((to_rep((temp___String_Literal_519(void)[1])) = 69) and
  (to_rep((temp___String_Literal_519(void)[2])) = 82)) and
  (to_rep((temp___String_Literal_519(void)[3])) = 82)) and
  (to_rep((temp___String_Literal_519(void)[4])) = 79)) and
  (to_rep((temp___String_Literal_519(void)[5])) = 82)) and
  (to_rep((temp___String_Literal_519(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_519(void)[7])) = 50)) and
  (to_rep((temp___String_Literal_519(void)[8])) = 58)) and
  (to_rep((temp___String_Literal_519(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_519(void)[10])) = 105)) and
  (to_rep((temp___String_Literal_519(void)[11])) = 110)) and
  (to_rep((temp___String_Literal_519(void)[12])) = 118)) and
  (to_rep((temp___String_Literal_519(void)[13])) = 97)) and
  (to_rep((temp___String_Literal_519(void)[14])) = 114)) and
  (to_rep((temp___String_Literal_519(void)[15])) = 105)) and
  (to_rep((temp___String_Literal_519(void)[16])) = 97)) and
  (to_rep((temp___String_Literal_519(void)[17])) = 110)) and
  (to_rep((temp___String_Literal_519(void)[18])) = 116)) and
  (to_rep((temp___String_Literal_519(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_519(void)[20])) = 100)) and
  (to_rep((temp___String_Literal_519(void)[21])) = 105)) and
  (to_rep((temp___String_Literal_519(void)[22])) = 100)) and
  (to_rep((temp___String_Literal_519(void)[23])) = 32)) and
  (to_rep((temp___String_Literal_519(void)[24])) = 110)) and
  (to_rep((temp___String_Literal_519(void)[25])) = 111)) and
  (to_rep((temp___String_Literal_519(void)[26])) = 116)) and
  (to_rep((temp___String_Literal_519(void)[27])) = 32)) and
  (to_rep((temp___String_Literal_519(void)[28])) = 102)) and
  (to_rep((temp___String_Literal_519(void)[29])) = 97)) and
  (to_rep((temp___String_Literal_519(void)[30])) = 105)) and
  (to_rep((temp___String_Literal_519(void)[31])) = 108))

logic temp___String_Literal_524 : unit -> (int,character) farray

axiom temp___String_Literal_524__def_axiom :
  ((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_524(void)[1])) = 69) and
  (to_rep((temp___String_Literal_524(void)[2])) = 82)) and
  (to_rep((temp___String_Literal_524(void)[3])) = 82)) and
  (to_rep((temp___String_Literal_524(void)[4])) = 79)) and
  (to_rep((temp___String_Literal_524(void)[5])) = 82)) and
  (to_rep((temp___String_Literal_524(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_524(void)[7])) = 51)) and
  (to_rep((temp___String_Literal_524(void)[8])) = 58)) and
  (to_rep((temp___String_Literal_524(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_524(void)[10])) = 108)) and
  (to_rep((temp___String_Literal_524(void)[11])) = 111)) and
  (to_rep((temp___String_Literal_524(void)[12])) = 111)) and
  (to_rep((temp___String_Literal_524(void)[13])) = 112)) and
  (to_rep((temp___String_Literal_524(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_524(void)[15])) = 115)) and
  (to_rep((temp___String_Literal_524(void)[16])) = 104)) and
  (to_rep((temp___String_Literal_524(void)[17])) = 111)) and
  (to_rep((temp___String_Literal_524(void)[18])) = 117)) and
  (to_rep((temp___String_Literal_524(void)[19])) = 108)) and
  (to_rep((temp___String_Literal_524(void)[20])) = 100)) and
  (to_rep((temp___String_Literal_524(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_524(void)[22])) = 110)) and
  (to_rep((temp___String_Literal_524(void)[23])) = 111)) and
  (to_rep((temp___String_Literal_524(void)[24])) = 116)) and
  (to_rep((temp___String_Literal_524(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_524(void)[26])) = 101)) and
  (to_rep((temp___String_Literal_524(void)[27])) = 120)) and
  (to_rep((temp___String_Literal_524(void)[28])) = 101)) and
  (to_rep((temp___String_Literal_524(void)[29])) = 99)) and
  (to_rep((temp___String_Literal_524(void)[30])) = 117)) and
  (to_rep((temp___String_Literal_524(void)[31])) = 116)) and
  (to_rep((temp___String_Literal_524(void)[32])) = 101))

logic temp___String_Literal_531 : unit -> (int,character) farray

axiom temp___String_Literal_531__def_axiom :
  ((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_531(void)[1])) = 69) and
  (to_rep((temp___String_Literal_531(void)[2])) = 82)) and
  (to_rep((temp___String_Literal_531(void)[3])) = 82)) and
  (to_rep((temp___String_Literal_531(void)[4])) = 79)) and
  (to_rep((temp___String_Literal_531(void)[5])) = 82)) and
  (to_rep((temp___String_Literal_531(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_531(void)[7])) = 52)) and
  (to_rep((temp___String_Literal_531(void)[8])) = 58)) and
  (to_rep((temp___String_Literal_531(void)[9])) = 32)) and
  (to_rep((temp___String_Literal_531(void)[10])) = 108)) and
  (to_rep((temp___String_Literal_531(void)[11])) = 111)) and
  (to_rep((temp___String_Literal_531(void)[12])) = 111)) and
  (to_rep((temp___String_Literal_531(void)[13])) = 112)) and
  (to_rep((temp___String_Literal_531(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_531(void)[15])) = 115)) and
  (to_rep((temp___String_Literal_531(void)[16])) = 104)) and
  (to_rep((temp___String_Literal_531(void)[17])) = 111)) and
  (to_rep((temp___String_Literal_531(void)[18])) = 117)) and
  (to_rep((temp___String_Literal_531(void)[19])) = 108)) and
  (to_rep((temp___String_Literal_531(void)[20])) = 100)) and
  (to_rep((temp___String_Literal_531(void)[21])) = 32)) and
  (to_rep((temp___String_Literal_531(void)[22])) = 110)) and
  (to_rep((temp___String_Literal_531(void)[23])) = 111)) and
  (to_rep((temp___String_Literal_531(void)[24])) = 116)) and
  (to_rep((temp___String_Literal_531(void)[25])) = 32)) and
  (to_rep((temp___String_Literal_531(void)[26])) = 101)) and
  (to_rep((temp___String_Literal_531(void)[27])) = 120)) and
  (to_rep((temp___String_Literal_531(void)[28])) = 101)) and
  (to_rep((temp___String_Literal_531(void)[29])) = 99)) and
  (to_rep((temp___String_Literal_531(void)[30])) = 117)) and
  (to_rep((temp___String_Literal_531(void)[31])) = 116)) and
  (to_rep((temp___String_Literal_531(void)[32])) = 101))

 (* File "for_loops.adb", line 5, characters 0-0 *)
goal WP_parameter_def :
  (forall counter:int. forall i:int. forall i1:int. forall x:int.
  forall for_loops__B_1__test1__R2b__assume:int. forall temp___516:int.
  forall temp___515:int. forall for_loops__B_2__test2__R5b__assume:int.
  forall temp___520:int. forall temp___521:int.
  forall for_loops__B_3__test3a__R8b__assume:int.
  forall for_loops__B_3__test3b__R10b__assume:int. forall result:int.
  forall counter1:int. forall result1:int. forall i2:int. forall i3:int.
  forall i4:int. forall i5:int. forall i6:int. forall i7:int.
  forall result2:int. forall i8:int. forall i9:int. forall i10:int.
  forall i11:int. forall i12:int. forall i13:int. forall result3:int.
  forall x1:int. forall x2:int. forall y:int. forall result4:int.
  forall y1:int. forall y2:int. forall result5:int. forall y3:int.
  forall y4:int. forall y5:int. (((result = counter) and (counter1 = 1)) ->
  (in_range4(counter1) ->
  ((((((for_loops__B_1__test1__R2b__assume = sum_of(3)) and
  in_range4(for_loops__B_1__test1__R2b__assume)) and
  (for_loops__B_1__test1__R2b__assume = r2b)) and in_range4(r2b)) and ((({
  int__content = result1 } = { int__content = i }) and (i2 = r2b)) and
  ((((r2b <= i2) and (i2 <= 2)) and ((((temp___516 = sum_of(counter1)) and
  ((temp___515 = i2) and ((0 <  temp___516) and ((((r2b <= 2) ->
  dynamic_property1(r2b, 2, i3)) and ((r2b <= i3) and (i3 <= 2))) and
  (i3 = 2))))) and ((i3 = i4) and (i5 = i3))) and ((i6 = i4) and
  (i7 = i5)))) or ((not ((r2b <= i2) and (i2 <= 2))) and ((i2 = i6) and
  (i7 = i2)))))) -> ((((((for_loops__B_2__test2__R5b__assume = sum_of(3)) and
  in_range4(for_loops__B_2__test2__R5b__assume)) and
  (for_loops__B_2__test2__R5b__assume = r5b)) and in_range4(r5b)) and ((({
  int__content = result2 } = { int__content = i1 }) and (i8 = 2)) and
  ((((2 <= i8) and (i8 <= r5b)) and ((((temp___520 = i8) and
  ((temp___521 = sum_of(counter1)) and ((temp___521 <  0) and
  ((((2 <= r5b) -> dynamic_property2(2, r5b, i9)) and ((2 <= i9) and
  (i9 <= r5b))) and (i9 = r5b))))) and ((i9 = i10) and (i11 = i9))) and
  ((i12 = i10) and (i13 = i11)))) or ((not ((2 <= i8) and (i8 <= r5b))) and
  ((i8 = i12) and (i13 = i8)))))) ->
  (((((for_loops__B_3__test3a__R8b__assume = sum_of(counter1)) and
  in_range4(for_loops__B_3__test3a__R8b__assume)) and
  (for_loops__B_3__test3a__R8b__assume = r8b)) and in_range4(r8b)) -> ((({
  int__content = result3 } = { int__content = x }) and (x1 = 1)) ->
  (((1 <= x1) and (x1 <= r8b)) -> (((1 <= x2) and (x2 <= r8b)) ->
  (((((for_loops__B_3__test3b__R10b__assume = sum_of(5)) and
  in_range4(for_loops__B_3__test3b__R10b__assume)) and
  (for_loops__B_3__test3b__R10b__assume = r10b)) and in_range4(r10b)) ->
  (((y = result4) and (y1 = r10b)) -> (((r10b <= y1) and (y1 <= 3)) ->
  ((counter1 = 1) -> ((((((r10b <= 3) -> dynamic_property3(r10b, 3, y2)) and
  ((r10b <= y2) and (y2 <= 3))) and ((not (y2 = 3)) and ((result5 = y2) and
  (y3 = (y2 + 1))))) and ((y4 = y3) and (y5 = y3))) ->
  (counter1 = 1)))))))))))))))
