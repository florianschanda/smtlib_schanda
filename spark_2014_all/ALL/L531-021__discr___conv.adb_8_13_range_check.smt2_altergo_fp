(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type enum

predicate in_range(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : enum, enum -> bool

logic dummy : enum

type enum__ref = { enum__content : enum
}

function enum__ref___projection(a: enum__ref) : enum = (a).enum__content

logic to_rep : enum -> int

logic of_rep : int -> enum

axiom inversion_axiom : (forall x:enum [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:enum [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_discrs = { rec__basic__r__x : enum
}

function us_split_discrs___projection(a: us_split_discrs) : enum =
  (a).rec__basic__r__x

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__basic__r__base : integer;
rec__basic__r__a_field : integer; rec__basic__r__c_field1 : bool;
rec__basic__r__c_field2 : natural
}

function us_split_fields_Base__projection(a: us_split_fields) : integer =
  (a).rec__basic__r__base

function us_split_fields_A_Field__projection(a: us_split_fields) : integer =
  (a).rec__basic__r__a_field

function us_split_fields_C_Field1__projection(a: us_split_fields) : bool =
  (a).rec__basic__r__c_field1

function us_split_fields_C_Field2__projection(a: us_split_fields) : natural =
  (a).rec__basic__r__c_field2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate basic__r__a_field__pred(a: us_rep) =
  (to_rep(((a).us_split_discrs1).rec__basic__r__x) = 0)

predicate basic__r__c_field1__pred(a: us_rep) =
  (to_rep(((a).us_split_discrs1).rec__basic__r__x) = 2)

predicate basic__r__c_field2__pred(a: us_rep) =
  (to_rep(((a).us_split_discrs1).rec__basic__r__x) = 2)

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  (((((((to_rep(((a).us_split_discrs1).rec__basic__r__x) = to_rep(((b).us_split_discrs1).rec__basic__r__x)) and
  (to_rep1(((a).us_split_fields1).rec__basic__r__base) = to_rep1(((b).us_split_fields1).rec__basic__r__base))) and
  (basic__r__a_field__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__basic__r__a_field) = to_rep1(((b).us_split_fields1).rec__basic__r__a_field)))) and
  (basic__r__c_field1__pred(a) ->
  (((a).us_split_fields1).rec__basic__r__c_field1 = ((b).us_split_fields1).rec__basic__r__c_field1))) and
  (basic__r__c_field2__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__basic__r__c_field2) = to_rep2(((b).us_split_fields1).rec__basic__r__c_field2)))) ->
  (bool_eq4(a, b) = true)) and
  ((not (((((to_rep(((a).us_split_discrs1).rec__basic__r__x) = to_rep(((b).us_split_discrs1).rec__basic__r__x)) and
  (to_rep1(((a).us_split_fields1).rec__basic__r__base) = to_rep1(((b).us_split_fields1).rec__basic__r__base))) and
  (basic__r__a_field__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__basic__r__a_field) = to_rep1(((b).us_split_fields1).rec__basic__r__a_field)))) and
  (basic__r__c_field1__pred(a) ->
  (((a).us_split_fields1).rec__basic__r__c_field1 = ((b).us_split_fields1).rec__basic__r__c_field1))) and
  (basic__r__c_field2__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__basic__r__c_field2) = to_rep2(((b).us_split_fields1).rec__basic__r__c_field2))))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  forall a4:natural. (0 <= object__size({ us_split_discrs1 = {
  rec__basic__r__x = a }; us_split_fields1 = { rec__basic__r__base = a1;
  rec__basic__r__a_field = a2; rec__basic__r__c_field1 = a3;
  rec__basic__r__c_field2 = a4 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:enum. forall a1:integer. forall a2:integer. forall a3:bool.
  forall a4:natural. (0 <= object__alignment({ us_split_discrs1 = {
  rec__basic__r__x = a }; us_split_fields1 = { rec__basic__r__base = a1;
  rec__basic__r__a_field = a2; rec__basic__r__c_field1 = a3;
  rec__basic__r__c_field2 = a4 } })))

logic basic__r__x__first__bit : int

logic basic__r__x__last__bit : int

logic basic__r__x__position : int

axiom basic__r__x__first__bit_axiom : (0 <= basic__r__x__first__bit)

axiom basic__r__x__last__bit_axiom :
  (basic__r__x__first__bit <  basic__r__x__last__bit)

axiom basic__r__x__position_axiom : (0 <= basic__r__x__position)

logic basic__r__base__first__bit : int

logic basic__r__base__last__bit : int

logic basic__r__base__position : int

axiom basic__r__base__first__bit_axiom : (0 <= basic__r__base__first__bit)

axiom basic__r__base__last__bit_axiom :
  (basic__r__base__first__bit <  basic__r__base__last__bit)

axiom basic__r__base__position_axiom : (0 <= basic__r__base__position)

logic basic__r__a_field__first__bit : int

logic basic__r__a_field__last__bit : int

logic basic__r__a_field__position : int

axiom basic__r__a_field__first__bit_axiom :
  (0 <= basic__r__a_field__first__bit)

axiom basic__r__a_field__last__bit_axiom :
  (basic__r__a_field__first__bit <  basic__r__a_field__last__bit)

axiom basic__r__a_field__position_axiom : (0 <= basic__r__a_field__position)

logic basic__r__c_field1__first__bit : int

logic basic__r__c_field1__last__bit : int

logic basic__r__c_field1__position : int

axiom basic__r__c_field1__first__bit_axiom :
  (0 <= basic__r__c_field1__first__bit)

axiom basic__r__c_field1__last__bit_axiom :
  (basic__r__c_field1__first__bit <  basic__r__c_field1__last__bit)

axiom basic__r__c_field1__position_axiom :
  (0 <= basic__r__c_field1__position)

logic basic__r__c_field2__first__bit : int

logic basic__r__c_field2__last__bit : int

logic basic__r__c_field2__position : int

axiom basic__r__c_field2__first__bit_axiom :
  (0 <= basic__r__c_field2__first__bit)

axiom basic__r__c_field2__last__bit_axiom :
  (basic__r__c_field2__first__bit <  basic__r__c_field2__last__bit)

axiom basic__r__c_field2__position_axiom :
  (0 <= basic__r__c_field2__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : enum

logic dummy4 : integer

logic dummy5 : integer

logic dummy6 : bool

logic dummy7 : natural

type r__ref = { r__content : us_rep
}

function r__ref___projection(a: r__ref) : us_rep = (a).r__content

logic x : enum

logic x1 : integer

logic x2 : integer

logic x3 : bool

logic x4 : natural

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "basic.ads", line 4, characters 0-0 *)
goal WP_parameter_def : in_range(to_rep(x))
