;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort it1 0)

(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (it1 it1) Bool)

(declare-fun dummy () it1)

(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 1 10)) (in_range temp___expr_152)))

(declare-sort it2 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 5 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (it2 it2) Bool)

(declare-fun dummy1 () it2)

(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))

(define-fun dynamic_invariant1 ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 5 50)) (in_range1 temp___expr_158)))

(declare-sort it3 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (it3 it3) Bool)

(declare-fun dummy2 () it3)

(declare-datatypes () ((it3__ref (mk_it3__ref (it3__content it3)))))
(define-fun it3__ref___projection ((a it3__ref)) it3 (it3__content a))

(define-fun dynamic_invariant2 ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= 1 16)) (in_range2 temp___expr_164)))

(declare-sort et1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (et1 et1) Bool)

(declare-fun dummy3 () et1)

(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(define-fun dynamic_invariant3 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range3 temp___expr_176)))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))

;; slide_eq
  (assert
  (forall ((a (Array Int et1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int et1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int
  Int) (Array Int et1))

;; concat_def
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (et1 Int) (Array Int et1))

;; singleton_def
  (assert
  (forall ((v et1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int)
  (b (Array Int et1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy4 () (Array Int et1))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int et1)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int et1)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int et1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))

(declare-fun user_eq4 ((Array Int et1) (Array Int et1)) Bool)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int
  Int) (Array Int (Array Int et1)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int et1)) Int Int
  (Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int et1) Int) (Array Int (Array Int et1)))

;; singleton_def
  (assert
  (forall ((v (Array Int et1)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int et1))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq (select a temp___idx_133) 1 10
                              (select b (+ (- b__first a__first) temp___idx_133))
                              1 10) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq (select a temp___idx_133) 1 10
     (select b (+ (- b__first a__first) temp___idx_133)) 1 10) true))))))))

(declare-fun dummy5 () (Array Int (Array Int et1)))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int (Array Int et1))) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int (Array Int et1))) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int (Array Int et1))) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert
  (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int (Array Int et1)))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 ((Array Int (Array Int et1))
  (Array Int (Array Int et1))) Bool)

(declare-datatypes ()
((map__ref2
 (mk_map__ref2 (map__content2 (Array Int (Array Int (Array Int et1))))))))
(declare-fun slide2 ((Array Int (Array Int (Array Int et1))) Int
  Int) (Array Int (Array Int (Array Int et1))))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1)))))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1)))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int (Array Int (Array Int et1))) Int Int
  (Array Int (Array Int (Array Int et1))) Int
  Int) (Array Int (Array Int (Array Int et1))))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1))))
  (b (Array Int (Array Int (Array Int et1)))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 ((Array Int (Array Int et1))
  Int) (Array Int (Array Int (Array Int et1))))

;; singleton_def
  (assert
  (forall ((v (Array Int (Array Int et1))))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int (Array Int (Array Int et1))))
  (a__first Int) (a__last Int) (b (Array Int (Array Int (Array Int et1))))
  (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (bool_eq1 (select a temp___idx_134) 5 50
                              (select b (+ (- b__first a__first) temp___idx_134))
                              5 50) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int (Array Int et1))))
  (b (Array Int (Array Int (Array Int et1)))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (bool_eq1 (select a temp___idx_134) 5 50
     (select b (+ (- b__first a__first) temp___idx_134)) 5 50) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun j () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun k () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun e () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun temp___1475 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1)) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___1477 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___1478 Int) (temp___1480 Int))
  (forall ((temp___1479 (Array Int (Array Int et1)))
  (temp___1481 (Array Int (Array Int et1))))
  (let ((temp___1476 (temp___1475 temp___1477 temp___1478 temp___1479
                     temp___1480 temp___1481)))
  (forall ((temp___1482 Int))
  (ite (= temp___1482 temp___1480)
  (= (select temp___1476 temp___1482) temp___1481)
  (ite (= temp___1482 temp___1478)
  (= (select temp___1476 temp___1482) temp___1479)
  (= (select temp___1476 temp___1482) (select temp___1477 temp___1482))))))))))

(declare-fun temp___1483 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1485 (Array Int (Array Int et1))))
  (forall ((temp___1486 Int))
  (forall ((temp___1487 (Array Int et1)))
  (let ((temp___1484 (temp___1483 temp___1485 temp___1486 temp___1487)))
  (forall ((temp___1488 Int))
  (ite (= temp___1488 temp___1486)
  (= (select temp___1484 temp___1488) temp___1487)
  (= (select temp___1484 temp___1488) (select temp___1485 temp___1488)))))))))

(declare-fun temp___1490 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1492 (Array Int et1)))
  (forall ((temp___1493 Int) (temp___1494 Int))
  (let ((temp___1491 (temp___1490 temp___1492 temp___1493 temp___1494)))
  (forall ((temp___1495 Int))
  (ite (= temp___1495 temp___1493)
  (= (select temp___1491 temp___1495) (of_rep temp___1494))
  (= (select temp___1491 temp___1495) (select temp___1492 temp___1495))))))))

(declare-fun temp___1498 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1500 (Array Int (Array Int et1))))
  (forall ((temp___1501 Int))
  (forall ((temp___1502 (Array Int et1)))
  (let ((temp___1499 (temp___1498 temp___1500 temp___1501 temp___1502)))
  (forall ((temp___1503 Int))
  (ite (= temp___1503 temp___1501)
  (= (select temp___1499 temp___1503) temp___1502)
  (= (select temp___1499 temp___1503) (select temp___1500 temp___1503)))))))))

(declare-fun temp___1505 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1507 (Array Int et1)))
  (forall ((temp___1508 Int) (temp___1509 Int))
  (let ((temp___1506 (temp___1505 temp___1507 temp___1508 temp___1509)))
  (forall ((temp___1510 Int))
  (ite (= temp___1510 temp___1508)
  (= (select temp___1506 temp___1510) (of_rep temp___1509))
  (= (select temp___1506 temp___1510) (select temp___1507 temp___1510))))))))

(declare-fun temp___1514 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1)) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___1516 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___1517 Int) (temp___1519 Int))
  (forall ((temp___1518 (Array Int (Array Int et1)))
  (temp___1520 (Array Int (Array Int et1))))
  (let ((temp___1515 (temp___1514 temp___1516 temp___1517 temp___1518
                     temp___1519 temp___1520)))
  (forall ((temp___1521 Int))
  (ite (= temp___1521 temp___1519)
  (= (select temp___1515 temp___1521) temp___1520)
  (ite (= temp___1521 temp___1517)
  (= (select temp___1515 temp___1521) temp___1518)
  (= (select temp___1515 temp___1521) (select temp___1516 temp___1521))))))))))

(declare-fun temp___1522 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1524 (Array Int (Array Int et1))))
  (forall ((temp___1525 Int))
  (forall ((temp___1526 (Array Int et1)))
  (let ((temp___1523 (temp___1522 temp___1524 temp___1525 temp___1526)))
  (forall ((temp___1527 Int))
  (ite (= temp___1527 temp___1525)
  (= (select temp___1523 temp___1527) temp___1526)
  (= (select temp___1523 temp___1527) (select temp___1524 temp___1527)))))))))

(declare-fun temp___1529 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1531 (Array Int et1)))
  (forall ((temp___1532 Int) (temp___1533 Int))
  (let ((temp___1530 (temp___1529 temp___1531 temp___1532 temp___1533)))
  (forall ((temp___1534 Int))
  (ite (= temp___1534 temp___1532)
  (= (select temp___1530 temp___1534) (of_rep temp___1533))
  (= (select temp___1530 temp___1534) (select temp___1531 temp___1534))))))))

(declare-fun temp___1537 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1539 (Array Int (Array Int et1))))
  (forall ((temp___1540 Int))
  (forall ((temp___1541 (Array Int et1)))
  (let ((temp___1538 (temp___1537 temp___1539 temp___1540 temp___1541)))
  (forall ((temp___1542 Int))
  (ite (= temp___1542 temp___1540)
  (= (select temp___1538 temp___1542) temp___1541)
  (= (select temp___1538 temp___1542) (select temp___1539 temp___1542)))))))))

(declare-fun temp___1544 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1546 (Array Int et1)))
  (forall ((temp___1547 Int) (temp___1548 Int))
  (let ((temp___1545 (temp___1544 temp___1546 temp___1547 temp___1548)))
  (forall ((temp___1549 Int))
  (ite (= temp___1549 temp___1547)
  (= (select temp___1545 temp___1549) (of_rep temp___1548))
  (= (select temp___1545 temp___1549) (select temp___1546 temp___1549))))))))

(declare-fun temp___1553 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1)) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___1555 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___1556 Int) (temp___1558 Int))
  (forall ((temp___1557 (Array Int (Array Int et1)))
  (temp___1559 (Array Int (Array Int et1))))
  (let ((temp___1554 (temp___1553 temp___1555 temp___1556 temp___1557
                     temp___1558 temp___1559)))
  (forall ((temp___1560 Int))
  (ite (= temp___1560 temp___1558)
  (= (select temp___1554 temp___1560) temp___1559)
  (ite (= temp___1560 temp___1556)
  (= (select temp___1554 temp___1560) temp___1557)
  (= (select temp___1554 temp___1560) (select temp___1555 temp___1560))))))))))

(declare-fun temp___1561 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1563 (Array Int (Array Int et1))))
  (forall ((temp___1564 Int))
  (forall ((temp___1565 (Array Int et1)))
  (let ((temp___1562 (temp___1561 temp___1563 temp___1564 temp___1565)))
  (forall ((temp___1566 Int))
  (ite (= temp___1566 temp___1564)
  (= (select temp___1562 temp___1566) temp___1565)
  (= (select temp___1562 temp___1566) (select temp___1563 temp___1566)))))))))

(declare-fun temp___1568 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1570 (Array Int et1)))
  (forall ((temp___1571 Int) (temp___1572 Int))
  (let ((temp___1569 (temp___1568 temp___1570 temp___1571 temp___1572)))
  (forall ((temp___1573 Int))
  (ite (= temp___1573 temp___1571)
  (= (select temp___1569 temp___1573) (of_rep temp___1572))
  (= (select temp___1569 temp___1573) (select temp___1570 temp___1573))))))))

(declare-fun temp___1576 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1578 (Array Int (Array Int et1))))
  (forall ((temp___1579 Int))
  (forall ((temp___1580 (Array Int et1)))
  (let ((temp___1577 (temp___1576 temp___1578 temp___1579 temp___1580)))
  (forall ((temp___1581 Int))
  (ite (= temp___1581 temp___1579)
  (= (select temp___1577 temp___1581) temp___1580)
  (= (select temp___1577 temp___1581) (select temp___1578 temp___1581)))))))))

(declare-fun temp___1583 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1585 (Array Int et1)))
  (forall ((temp___1586 Int) (temp___1587 Int))
  (let ((temp___1584 (temp___1583 temp___1585 temp___1586 temp___1587)))
  (forall ((temp___1588 Int))
  (ite (= temp___1588 temp___1586)
  (= (select temp___1584 temp___1588) (of_rep temp___1587))
  (= (select temp___1584 temp___1588) (select temp___1585 temp___1588))))))))

(declare-fun temp___1592 ((Array Int (Array Int (Array Int et1))) Int
  (Array Int (Array Int et1)) Int
  (Array Int (Array Int et1))) (Array Int (Array Int (Array Int et1))))

;; def_axiom
  (assert
  (forall ((temp___1594 (Array Int (Array Int (Array Int et1)))))
  (forall ((temp___1595 Int) (temp___1597 Int))
  (forall ((temp___1596 (Array Int (Array Int et1)))
  (temp___1598 (Array Int (Array Int et1))))
  (let ((temp___1593 (temp___1592 temp___1594 temp___1595 temp___1596
                     temp___1597 temp___1598)))
  (forall ((temp___1599 Int))
  (ite (= temp___1599 temp___1597)
  (= (select temp___1593 temp___1599) temp___1598)
  (ite (= temp___1599 temp___1595)
  (= (select temp___1593 temp___1599) temp___1596)
  (= (select temp___1593 temp___1599) (select temp___1594 temp___1599))))))))))

(declare-fun temp___1600 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1602 (Array Int (Array Int et1))))
  (forall ((temp___1603 Int))
  (forall ((temp___1604 (Array Int et1)))
  (let ((temp___1601 (temp___1600 temp___1602 temp___1603 temp___1604)))
  (forall ((temp___1605 Int))
  (ite (= temp___1605 temp___1603)
  (= (select temp___1601 temp___1605) temp___1604)
  (= (select temp___1601 temp___1605) (select temp___1602 temp___1605)))))))))

(declare-fun temp___1607 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1609 (Array Int et1)))
  (forall ((temp___1610 Int) (temp___1611 Int))
  (let ((temp___1608 (temp___1607 temp___1609 temp___1610 temp___1611)))
  (forall ((temp___1612 Int))
  (ite (= temp___1612 temp___1610)
  (= (select temp___1608 temp___1612) (of_rep temp___1611))
  (= (select temp___1608 temp___1612) (select temp___1609 temp___1612))))))))

(declare-fun temp___1615 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1617 (Array Int (Array Int et1))))
  (forall ((temp___1618 Int))
  (forall ((temp___1619 (Array Int et1)))
  (let ((temp___1616 (temp___1615 temp___1617 temp___1618 temp___1619)))
  (forall ((temp___1620 Int))
  (ite (= temp___1620 temp___1618)
  (= (select temp___1616 temp___1620) temp___1619)
  (= (select temp___1616 temp___1620) (select temp___1617 temp___1620)))))))))

(declare-fun temp___1622 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1624 (Array Int et1)))
  (forall ((temp___1625 Int) (temp___1626 Int))
  (let ((temp___1623 (temp___1622 temp___1624 temp___1625 temp___1626)))
  (forall ((temp___1627 Int))
  (ite (= temp___1627 temp___1625)
  (= (select temp___1623 temp___1627) (of_rep temp___1626))
  (= (select temp___1623 temp___1627) (select temp___1624 temp___1627))))))))

(declare-fun a () (Array Int (Array Int (Array Int et1))))

(declare-fun k_next () Int)

(declare-fun f () Int)

(declare-fun o () et1)

(declare-fun o1 () (Array Int et1))

(declare-fun o2 () (Array Int (Array Int et1)))

(declare-fun o3 () (Array Int (Array Int (Array Int et1))))

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () et1)

(declare-fun o7 () (Array Int et1))

(declare-fun o8 () (Array Int (Array Int et1)))

(declare-fun o9 () (Array Int (Array Int (Array Int et1))))

(declare-fun o10 () Int)

(declare-fun temp___5211 () (Array Int (Array Int et1)))

(declare-fun o11 () Int)

(declare-fun o12 () (Array Int et1))

(declare-fun o13 () (Array Int et1))

(declare-fun result () (Array Int (Array Int (Array Int et1))))

(declare-fun a1 () (Array Int (Array Int (Array Int et1))))

(declare-fun result1 () Int)

(declare-fun k_next1 () Int)

(declare-fun result2 () Int)

(declare-fun k_next2 () Int)

(declare-fun result3 () Int)

(declare-fun f1 () Int)

(declare-fun result4 () Int)

(declare-fun f2 () Int)

(declare-fun result5 () (Array Int (Array Int (Array Int et1))))

(declare-fun a2 () (Array Int (Array Int (Array Int et1))))

(declare-fun a3 () (Array Int (Array Int (Array Int et1))))

(declare-fun k_next3 () Int)

(declare-fun f3 () Int)

(declare-fun a4 () (Array Int (Array Int (Array Int et1))))

(declare-fun k_next4 () Int)

(declare-fun f4 () Int)

(define-fun f5 () int__ref (mk_int__ref f))

(define-fun k_next5 () int__ref (mk_int__ref k_next))

;; H
  (assert (in_range i))

;; H
  (assert (in_range1 j))

;; H
  (assert (in_range2 k))

;; H
  (assert (in_range3 e))

;; H
  (assert (=> (<= 1 16) (in_range2 k_next)))

;; H
  (assert (=> (<= 0 99) (in_range3 f)))

;; H
  (assert (= (to_rep o) e))

;; H
  (assert (= o1 (store (select (select a k) j) i o)))

;; H
  (assert (= o2 (store (select a k) j o1)))

;; H
  (assert (= o3 (store a k o2)))

;; H
  (assert (= (mk_map__ref2 result) (mk_map__ref2 a)))

;; H
  (assert (= a1 o3))

;; H
  (assert (=> (= k 16) (= (mk_int__ref result1) k_next5)))

;; H
  (assert (=> (= k 16) (= k_next1 1)))

;; H
  (assert (=> (not (= k 16)) (and (= o4 (+ k 1)) (in_range2 (+ k 1)))))

;; H
  (assert (=> (not (= k 16)) (= (mk_int__ref result2) k_next5)))

;; H
  (assert (=> (not (= k 16)) (= k_next2 o4)))

;; H
  (assert (=> (not (= k 16)) (= k_next1 k_next2)))

;; H
  (assert (=> (= e 0) (= (mk_int__ref result3) f5)))

;; H
  (assert (=> (= e 0) (= f1 99)))

;; H
  (assert (=> (not (= e 0)) (and (= o5 (- e 1)) (in_range3 (- e 1)))))

;; H
  (assert (=> (not (= e 0)) (= (mk_int__ref result4) f5)))

;; H
  (assert (=> (not (= e 0)) (= f2 o5)))

;; H
  (assert (=> (not (= e 0)) (= f1 f2)))

;; H
  (assert (= (to_rep o6) f1))

;; H
  (assert (= o7 (store (select (select a1 k_next1) j) i o6)))

;; H
  (assert (= o8 (store (select a1 k_next1) j o7)))

;; H
  (assert (= o9 (store a1 k_next1 o8)))

;; H
  (assert (= a1 result5))

;; H
  (assert (= a2 o9))

;; H
  (assert (= f1 f3))

;; H
  (assert (= k_next1 k_next3))

;; H
  (assert (= a2 a3))

;; H
  (assert (= f4 f1))

;; H
  (assert (= k_next4 k_next1))

;; H
  (assert (= a4 a2))

;; H
  (assert (< k 16))

;; H
  (assert (< 0 e))

;; H
  (assert (and (= o11 (- e 1)) (in_range3 (- e 1))))

;; H
  (assert (and (<= 1 (+ k 1)) (<= (+ k 1) 16)))

;; H
  (assert (= o10 (+ k 1)))

;; H
  (assert (= temp___5211 (select a o10)))

;; H
  (assert (= o12 (select temp___5211 j)))

;; H
  (assert (= o13 (temp___1505 o12 i o11)))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 466, characters 0-0
  (not (<= 1 (+ k 1))))
(check-sat)
(exit)
