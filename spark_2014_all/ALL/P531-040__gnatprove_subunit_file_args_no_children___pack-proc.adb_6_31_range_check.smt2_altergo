(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type idx_t

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : idx_t, idx_t -> bool

logic dummy : idx_t

type idx_t__ref = { idx_t__content : idx_t
}

function idx_t__ref___projection(a: idx_t__ref) : idx_t = (a).idx_t__content

logic to_rep : idx_t -> int

logic of_rep : int -> idx_t

axiom inversion_axiom : (forall x:idx_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:idx_t [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__pack__point_t__x : natural;
rec__pack__point_t__y : natural
}

function us_split_fields_X__projection(a: us_split_fields) : natural =
  (a).rec__pack__point_t__x

function us_split_fields_Y__projection(a: us_split_fields) : natural =
  (a).rec__pack__point_t__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep1(((a).us_split_fields1).rec__pack__point_t__x) = to_rep1(((b).us_split_fields1).rec__pack__point_t__x)) and
  (to_rep1(((a).us_split_fields1).rec__pack__point_t__y) = to_rep1(((b).us_split_fields1).rec__pack__point_t__y))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields1).rec__pack__point_t__x) = to_rep1(((b).us_split_fields1).rec__pack__point_t__x)) and
  (to_rep1(((a).us_split_fields1).rec__pack__point_t__y) = to_rep1(((b).us_split_fields1).rec__pack__point_t__y)))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:natural. (0 <= object__size({
  us_split_fields1 = { rec__pack__point_t__x = a; rec__pack__point_t__y = a1
  } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:natural. (0 <= object__alignment({
  us_split_fields1 = { rec__pack__point_t__x = a; rec__pack__point_t__y = a1
  } })))

logic pack__point_t__x__first__bit : int

logic pack__point_t__x__last__bit : int

logic pack__point_t__x__position : int

axiom pack__point_t__x__first__bit_axiom :
  (0 <= pack__point_t__x__first__bit)

axiom pack__point_t__x__last__bit_axiom :
  (pack__point_t__x__first__bit <  pack__point_t__x__last__bit)

axiom pack__point_t__x__position_axiom : (0 <= pack__point_t__x__position)

logic pack__point_t__y__first__bit : int

logic pack__point_t__y__last__bit : int

logic pack__point_t__y__position : int

axiom pack__point_t__y__first__bit_axiom :
  (0 <= pack__point_t__y__first__bit)

axiom pack__point_t__y__last__bit_axiom :
  (pack__point_t__y__first__bit <  pack__point_t__y__last__bit)

axiom pack__point_t__y__position_axiom : (0 <= pack__point_t__y__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : natural

logic dummy3 : natural

type point_t__ref = { point_t__content : us_rep
}

function point_t__ref___projection(a: point_t__ref) : us_rep =
  (a).point_t__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:natural. forall v1:natural.
  (forall i:int [(singleton({ us_split_fields1 = { rec__pack__point_t__x = v;
  rec__pack__point_t__y = v1 } }, i)[i])]. ((singleton({ us_split_fields1 = {
  rec__pack__point_t__x = v; rec__pack__point_t__y = v1 } }, i)[i]) = {
  us_split_fields1 = { rec__pack__point_t__x = v; rec__pack__point_t__y = v1
  } })))

logic bool_eq5 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq4((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq4((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq5(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq4((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic dummy4 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : (int,us_rep) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,us_rep) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,us_rep) farray. (0 <= object__alignment1(a)))

logic user_eq3 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = { rec__pack__exp_seq_t__len : natural;
rec__pack__exp_seq_t__points : (int,us_rep) farray
}

function us_split_fields_Len__projection(a: us_split_fields2) : natural =
  (a).rec__pack__exp_seq_t__len

function us_split_fields_Points__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__pack__exp_seq_t__points

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  ((((to_rep1(((a).us_split_fields3).rec__pack__exp_seq_t__len) = to_rep1(((b).us_split_fields3).rec__pack__exp_seq_t__len)) and
  (bool_eq5(((a).us_split_fields3).rec__pack__exp_seq_t__points, 1, 100,
  ((b).us_split_fields3).rec__pack__exp_seq_t__points, 1, 100) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields3).rec__pack__exp_seq_t__len) = to_rep1(((b).us_split_fields3).rec__pack__exp_seq_t__len)) and
  (bool_eq5(((a).us_split_fields3).rec__pack__exp_seq_t__points, 1, 100,
  ((b).us_split_fields3).rec__pack__exp_seq_t__points, 1, 100) = true))) ->
  (bool_eq6(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:(int,us_rep) farray. (0 <= object__size2({
  us_split_fields3 = { rec__pack__exp_seq_t__len = a;
  rec__pack__exp_seq_t__points = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:(int,us_rep) farray.
  (0 <= object__alignment2({ us_split_fields3 = { rec__pack__exp_seq_t__len =
  a; rec__pack__exp_seq_t__points = a1 } })))

logic pack__exp_seq_t__len__first__bit : int

logic pack__exp_seq_t__len__last__bit : int

logic pack__exp_seq_t__len__position : int

axiom pack__exp_seq_t__len__first__bit_axiom :
  (0 <= pack__exp_seq_t__len__first__bit)

axiom pack__exp_seq_t__len__last__bit_axiom :
  (pack__exp_seq_t__len__first__bit <  pack__exp_seq_t__len__last__bit)

axiom pack__exp_seq_t__len__position_axiom :
  (0 <= pack__exp_seq_t__len__position)

logic pack__exp_seq_t__points__first__bit : int

logic pack__exp_seq_t__points__last__bit : int

logic pack__exp_seq_t__points__position : int

axiom pack__exp_seq_t__points__first__bit_axiom :
  (0 <= pack__exp_seq_t__points__first__bit)

axiom pack__exp_seq_t__points__last__bit_axiom :
  (pack__exp_seq_t__points__first__bit <  pack__exp_seq_t__points__last__bit)

axiom pack__exp_seq_t__points__position_axiom :
  (0 <= pack__exp_seq_t__points__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy5 : natural

logic dummy6 : (int,us_rep) farray

type exp_seq_t__ref = { exp_seq_t__content : us_rep1
}

function exp_seq_t__ref___projection(a: exp_seq_t__ref) : us_rep1 =
  (a).exp_seq_t__content

type us_split_fields4 = { rec__pack__opt_p_t__flag : bool;
rec__pack__opt_p_t__idx : idx_t; rec__pack__opt_p_t__the_p : us_rep
}

function us_split_fields_Flag__projection(a: us_split_fields4) : bool =
  (a).rec__pack__opt_p_t__flag

function us_split_fields_Idx__projection(a: us_split_fields4) : idx_t =
  (a).rec__pack__opt_p_t__idx

function us_split_fields_The_P__projection(a: us_split_fields4) : us_rep =
  (a).rec__pack__opt_p_t__the_p

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep_3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq7 : us_rep2, us_rep2 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq7(a, b)].
  (((((((a).us_split_fields5).rec__pack__opt_p_t__flag = ((b).us_split_fields5).rec__pack__opt_p_t__flag) and
  (to_rep(((a).us_split_fields5).rec__pack__opt_p_t__idx) = to_rep(((b).us_split_fields5).rec__pack__opt_p_t__idx))) and
  (bool_eq4(((a).us_split_fields5).rec__pack__opt_p_t__the_p,
  ((b).us_split_fields5).rec__pack__opt_p_t__the_p) = true)) -> (bool_eq7(a,
  b) = true)) and
  ((not (((((a).us_split_fields5).rec__pack__opt_p_t__flag = ((b).us_split_fields5).rec__pack__opt_p_t__flag) and
  (to_rep(((a).us_split_fields5).rec__pack__opt_p_t__idx) = to_rep(((b).us_split_fields5).rec__pack__opt_p_t__idx))) and
  (bool_eq4(((a).us_split_fields5).rec__pack__opt_p_t__the_p,
  ((b).us_split_fields5).rec__pack__opt_p_t__the_p) = true))) -> (bool_eq7(a,
  b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:bool. forall a1:idx_t. forall a2:natural. forall a3:natural.
  (0 <= object__size3({ us_split_fields5 = { rec__pack__opt_p_t__flag = a;
  rec__pack__opt_p_t__idx = a1; rec__pack__opt_p_t__the_p = {
  us_split_fields1 = { rec__pack__point_t__x = a2; rec__pack__point_t__y = a3
  } } } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:bool. forall a1:idx_t. forall a2:natural. forall a3:natural.
  (0 <= object__alignment3({ us_split_fields5 = { rec__pack__opt_p_t__flag =
  a; rec__pack__opt_p_t__idx = a1; rec__pack__opt_p_t__the_p = {
  us_split_fields1 = { rec__pack__point_t__x = a2; rec__pack__point_t__y = a3
  } } } })))

logic pack__opt_p_t__flag__first__bit : int

logic pack__opt_p_t__flag__last__bit : int

logic pack__opt_p_t__flag__position : int

axiom pack__opt_p_t__flag__first__bit_axiom :
  (0 <= pack__opt_p_t__flag__first__bit)

axiom pack__opt_p_t__flag__last__bit_axiom :
  (pack__opt_p_t__flag__first__bit <  pack__opt_p_t__flag__last__bit)

axiom pack__opt_p_t__flag__position_axiom :
  (0 <= pack__opt_p_t__flag__position)

logic pack__opt_p_t__idx__first__bit : int

logic pack__opt_p_t__idx__last__bit : int

logic pack__opt_p_t__idx__position : int

axiom pack__opt_p_t__idx__first__bit_axiom :
  (0 <= pack__opt_p_t__idx__first__bit)

axiom pack__opt_p_t__idx__last__bit_axiom :
  (pack__opt_p_t__idx__first__bit <  pack__opt_p_t__idx__last__bit)

axiom pack__opt_p_t__idx__position_axiom :
  (0 <= pack__opt_p_t__idx__position)

logic pack__opt_p_t__the_p__first__bit : int

logic pack__opt_p_t__the_p__last__bit : int

logic pack__opt_p_t__the_p__position : int

axiom pack__opt_p_t__the_p__first__bit_axiom :
  (0 <= pack__opt_p_t__the_p__first__bit)

axiom pack__opt_p_t__the_p__last__bit_axiom :
  (pack__opt_p_t__the_p__first__bit <  pack__opt_p_t__the_p__last__bit)

axiom pack__opt_p_t__the_p__position_axiom :
  (0 <= pack__opt_p_t__the_p__position)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy7 : bool

logic dummy8 : idx_t

logic dummy9 : natural

logic dummy10 : natural

type opt_p_t__ref = { opt_p_t__content : us_rep2
}

function opt_p_t__ref___projection(a: opt_p_t__ref) : us_rep2 =
  (a).opt_p_t__content

logic r : natural

logic r1 : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "pack.adb", line 5, characters 0-0 *)
goal WP_parameter_def : (in_range1(i) -> in_range1((i + 1)))
