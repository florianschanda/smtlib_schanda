;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(declare-sort count_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-const dummy1 count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep (count_type) Int)

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs
  (rec__use_ordered_maps__my_maps__map__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__use_ordered_maps__my_maps__map__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__use_ordered_maps__my_maps__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type
  (rec__use_ordered_maps__my_maps__map a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__use_ordered_maps__my_maps__map__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__use_ordered_maps__my_maps__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__use_ordered_maps__my_maps__map
                           (us_split_fields1 a))
                           (rec__use_ordered_maps__my_maps__map
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const use_ordered_maps__my_maps__map__capacity__first__bit Int)

(declare-const use_ordered_maps__my_maps__map__capacity__last__bit Int)

(declare-const use_ordered_maps__my_maps__map__capacity__position Int)

;; use_ordered_maps__my_maps__map__capacity__first__bit_axiom
  (assert (<= 0 use_ordered_maps__my_maps__map__capacity__first__bit))

;; use_ordered_maps__my_maps__map__capacity__last__bit_axiom
  (assert
  (< use_ordered_maps__my_maps__map__capacity__first__bit use_ordered_maps__my_maps__map__capacity__last__bit))

;; use_ordered_maps__my_maps__map__capacity__position_axiom
  (assert (<= 0 use_ordered_maps__my_maps__map__capacity__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((map__ref 0)) (((mk_map__ref (map__content us_rep)))))
(define-fun map__ref___projection ((a map__ref)) us_rep (map__content a))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__use_ordered_maps__my_maps__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type
  (rec__use_ordered_maps__my_maps__cursor__node a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___6__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__use_ordered_maps__my_maps__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__use_ordered_maps__my_maps__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const use_ordered_maps__my_maps__cursor__node__first__bit Int)

(declare-const use_ordered_maps__my_maps__cursor__node__last__bit Int)

(declare-const use_ordered_maps__my_maps__cursor__node__position Int)

;; use_ordered_maps__my_maps__cursor__node__first__bit_axiom
  (assert (<= 0 use_ordered_maps__my_maps__cursor__node__first__bit))

;; use_ordered_maps__my_maps__cursor__node__last__bit_axiom
  (assert
  (< use_ordered_maps__my_maps__cursor__node__first__bit use_ordered_maps__my_maps__cursor__node__last__bit))

;; use_ordered_maps__my_maps__cursor__node__position_axiom
  (assert (<= 0 use_ordered_maps__my_maps__cursor__node__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((cursor__ref 0))
(((mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content
                                                               a))

(declare-const no_element us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 us_rep2)))))
(define-fun map__ref___2__projection ((a map__ref1)) us_rep2 (map__content1
                                                             a))

(declare-fun has_key (us_rep2 Int) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 Int) Bool)

(define-fun equivalent_keys ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

(declare-sort key_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq5 (key_type key_type) Bool)

(declare-const dummy5 key_type)

(declare-datatypes ((key_type__ref 0))
(((mk_key_type__ref (key_type__content key_type)))))
(define-fun key_type__ref___2__projection ((a key_type__ref)) key_type
  (key_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_321 Int)
  (temp___is_init_318 Bool) (temp___skip_constant_319 Bool)
  (temp___do_toplevel_320 Bool)) Bool (=>
                                      (or (= temp___is_init_318 true)
                                      (<= 1 2147483647)) (in_range3
                                      temp___expr_321)))

(declare-fun length (us_rep2) Int)

(declare-fun length__function_guard (Int us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun default_initial_assumption ((temp___expr_334 us_rep2)
  (temp___skip_top_level_335 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_335 true))
                                         (and
                                         (= (is_empty temp___expr_334) true)
                                         (= (length temp___expr_334) 0))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key Int))
  (! (=> (dynamic_invariant1 key true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((k Int))
     (and (and (in_range3 k) (= (has_key container k) true))
     (= (equivalent_keys k key) true))) (= (has_key container key) true)))) :pattern (
  (has_key container key)) ))))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq6 (us_rep3 us_rep3) Bool)

(declare-const dummy6 us_rep3)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep3 (sequence__content
                                                                   a))

(declare-fun get (us_rep3 Int) Int)

(declare-fun get__function_guard (Int us_rep3 Int) Bool)

(declare-sort element_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq7 (element_type element_type) Bool)

(declare-const dummy7 element_type)

(declare-datatypes ((element_type__ref 0))
(((mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___3__projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_352 Int)
  (temp___is_init_349 Bool) (temp___skip_constant_350 Bool)
  (temp___do_toplevel_351 Bool)) Bool (=>
                                      (or (= temp___is_init_349 true)
                                      (<= 1 2147483647)) (in_range4
                                      temp___expr_352)))

(declare-sort extended_index 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (extended_index extended_index) Bool)

(declare-const dummy8 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant3 ((temp___expr_358 Int)
  (temp___is_init_355 Bool) (temp___skip_constant_356 Bool)
  (temp___do_toplevel_357 Bool)) Bool (=>
                                      (or (= temp___is_init_355 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_358)))

(declare-fun length1 (us_rep3) Int)

(declare-fun length__function_guard1 (Int us_rep3) Bool)

(define-fun last ((container us_rep3)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun oeq2 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq6 a b) (oeq2 a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_365 us_rep3)
  (temp___skip_top_level_366 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_366 true))
                                         (= (length1 temp___expr_365) 0)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant3 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant2 (get container position) true false true)) :pattern (
  (get container position)) ))))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep4) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))

(declare-fun user_eq9 (us_rep4 us_rep4) Bool)

(declare-const dummy9 us_rep4)

(declare-datatypes ((map__ref2 0))
(((mk_map__ref2 (map__content2 us_rep4)))))
(define-fun map__ref___3__projection ((a map__ref2)) us_rep4 (map__content2
                                                             a))

(declare-datatypes ((key_type__ref1 0))
(((mk_key_type__ref1 (key_type__content1 us_rep1)))))
(define-fun key_type__ref___3__projection ((a key_type__ref1)) us_rep1
  (key_type__content1 a))

(declare-fun get1 (us_rep4 us_rep1) Int)

(declare-fun get__function_guard1 (Int us_rep4 us_rep1) Bool)

(declare-sort element_type1 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (element_type1 element_type1) Bool)

(declare-const dummy10 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___4__projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant4 ((temp___expr_378 Int)
  (temp___is_init_375 Bool) (temp___skip_constant_376 Bool)
  (temp___do_toplevel_377 Bool)) Bool (=>
                                      (or (= temp___is_init_375 true)
                                      (<= 1 2147483647)) (in_range6
                                      temp___expr_378)))

(declare-fun length2 (us_rep4) Int)

(declare-fun length__function_guard2 (Int us_rep4) Bool)

(declare-fun is_empty1 (us_rep4) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep4) Bool)

(define-fun default_initial_assumption2 ((temp___expr_385 us_rep4)
  (temp___skip_top_level_386 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_386 true))
                                         (and
                                         (= (is_empty1 temp___expr_385) true)
                                         (= (length2 temp___expr_385) 0))))

(declare-fun has_key1 (us_rep4 us_rep1) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep4 us_rep1) Bool)

(declare-fun witness (us_rep4 us_rep1) Int)

(declare-fun witness__function_guard (Int us_rep4 us_rep1) Bool)

(declare-fun w_get (us_rep4 Int) Int)

(declare-fun w_get__function_guard (Int us_rep4 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key us_rep1))
  (! (=> (= (has_key1 container key) true)
     (let ((result (get1 container key)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep1))
     (=> (= (has_key1 container k) true)
     (= (= (bool_eq1 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant4 result true false true)))) :pattern ((get1 container
                                                              key)) ))))

(declare-fun model__ (us_rep) us_rep2)

(declare-fun model____function_guard (us_rep2 us_rep) Bool)

;; model____post_axiom
  (assert true)

(declare-fun keys (us_rep) us_rep3)

(declare-fun keys__function_guard (us_rep3 us_rep) Bool)

(declare-fun length3 (us_rep) Int)

(declare-fun length__function_guard3 (Int us_rep) Bool)

(declare-fun length4 (Int us_rep) Int)

(declare-fun length__function_guard4 (Int Int us_rep) Bool)

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

(define-fun k_bigger_than_range ((container us_rep3) (fst Int) (lst Int)
  (key Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (< (get container i) key)))
                  true false))

(declare-fun k_bigger_than_range__function_guard (Bool us_rep3 Int Int
  Int) Bool)

(define-fun k_smaller_than_range ((container us_rep3) (fst Int) (lst Int)
  (key Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (< key (get container i))))
                  true false))

(declare-fun k_smaller_than_range__function_guard (Bool us_rep3 Int Int
  Int) Bool)

(define-fun k_is_find ((container us_rep3) (key Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (k_bigger_than_range container 1 (- position 1)
                            key) (of_int 1)) (ite (< position (length1
                                                              container))
                                             (k_smaller_than_range container
                                             (+ position 1)
                                             (length1 container) key)
                                             (of_int 1))))

(declare-fun k_is_find__function_guard (Bool us_rep3 Int Int) Bool)

(declare-fun find (us_rep3 Int) Int)

(declare-fun find__function_guard (Int us_rep3 Int) Bool)

;; keys__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (keys container)))
     (and
     (and
     (and (= (length1 result) (length3 container))
     (forall ((temp___399 Int))
     (=>
     (and (in_range5 temp___399)
     (= (iter_has_element result temp___399) true))
     (= (has_key (model__ container) (get result temp___399)) true))))
     (forall ((key Int))
     (=> (and (in_range3 key) (= (has_key (model__ container) key) true))
     (and (< 0 (find result key))
     (= (equivalent_keys (get result (find result key)) key) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length3 container)))
     (and (= (find result (get result i)) i)
     (= (k_is_find result (get result i) i) true)))))) :pattern ((keys
                                                                 container)) )))

(declare-fun positions (us_rep) us_rep4)

(declare-fun positions__function_guard (us_rep4 us_rep) Bool)

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key1 result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key1 result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length3 container)))
     (forall ((j us_rep1))
     (=> (= (has_key1 result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq1 i j) true))))))))) :pattern (
  (positions container)) )))

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key1 (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(declare-fun has_element1 (Int us_rep us_rep1) Bool)

(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep1) Bool)

;; has_element__post__dispatch_axiom
  (assert true)

(define-fun key ((container us_rep)
  (position us_rep1)) Int (get (keys container)
                          (get1 (positions container) position)))

(declare-fun key__function_guard (Int us_rep us_rep1) Bool)

(declare-fun key1 (Int us_rep us_rep1) Int)

(declare-fun key__function_guard1 (Int Int us_rep us_rep1) Bool)

(declare-sort key_type1 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (key_type1 key_type1) Bool)

(declare-const dummy11 key_type1)

(declare-datatypes ((key_type__ref2 0))
(((mk_key_type__ref2 (key_type__content2 key_type1)))))
(define-fun key_type__ref___projection ((a key_type__ref2)) key_type1
  (key_type__content2 a))

(define-fun dynamic_invariant5 ((temp___expr_289 Int)
  (temp___is_init_286 Bool) (temp___skip_constant_287 Bool)
  (temp___do_toplevel_288 Bool)) Bool (=>
                                      (or (= temp___is_init_286 true)
                                      (<= 1 2147483647)) (in_range7
                                      temp___expr_289)))

;; key__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep))
  (forall ((position us_rep1)) (! (dynamic_invariant5
  (key1 attr__tag container position) true false
  true) :pattern ((key1 attr__tag container position)) )))))

(declare-fun first (us_rep) us_rep1)

(declare-fun first__function_guard (us_rep1 us_rep) Bool)

(declare-fun first1 (Int us_rep) us_rep1)

(declare-fun first__function_guard1 (us_rep1 Int us_rep) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (first container)))
     (ite (= (length3 container) 0) (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) 1)))) :pattern ((first container)) )))

;; first__post__dispatch_axiom
  (assert true)

(declare-fun next (us_rep us_rep1) us_rep1)

(declare-fun next__function_guard (us_rep1 us_rep us_rep1) Bool)

(declare-fun next1 (Int us_rep us_rep1) us_rep1)

(declare-fun next__function_guard1 (us_rep1 Int us_rep us_rep1) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position us_rep1))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq1 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq1 position no_element) true)
          (= (get1 (positions container) position) (length3 container)))
     (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (+ (get1 (positions container)
                                               position) 1)))))) :pattern (
  (next container position)) ))))

;; next__post__dispatch_axiom
  (assert true)

(declare-const s us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const k Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant6 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_142)))

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length3 container)))
     (and
     (<= result (to_rep
                (rec__use_ordered_maps__my_maps__map__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant6 result true false true))) :pattern ((length3
                                                             container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant6
  (length4 attr__tag container) true false
  true) :pattern ((length4 attr__tag container)) ))))

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant5 key2 true true true)
     (let ((result (find container key2)))
     (and
     (=> (< 0 result)
     (and (<= result (length1 container))
     (= (equivalent_keys key2 (get container result)) true)))
     (dynamic_invariant6 result true false true)))) :pattern ((find container
                                                              key2)) ))))

(declare-fun oeq3 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep2 us_rep2) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq3 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

(declare-sort element_type2 0)

(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (element_type2 element_type2) Bool)

(declare-const dummy12 element_type2)

(declare-datatypes ((element_type__ref2 0))
(((mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref___2__projection ((a element_type__ref2)) element_type2
  (element_type__content2 a))

(define-fun dynamic_invariant7 ((temp___expr_327 Int)
  (temp___is_init_324 Bool) (temp___skip_constant_325 Bool)
  (temp___do_toplevel_326 Bool)) Bool (=>
                                      (or (= temp___is_init_324 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range8 temp___expr_327)))

(declare-fun witness1 (us_rep2 Int) Int)

(declare-fun witness__function_guard1 (Int us_rep2 Int) Bool)

(declare-fun w_get1 (us_rep2 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep2 Int) Bool)

(declare-fun get2 (us_rep2 Int) Int)

(declare-fun get__function_guard2 (Int us_rep2 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant1 key2 true true true)
     (= (has_key container key2) true))
     (let ((result (get2 container key2)))
     (and
     (=> (= (of_int 1) true)
     (and (= result (w_get1 container (witness1 container key2)))
     (forall ((k1 Int))
     (=> (and (in_range3 k1) (= (has_key container k1) true))
     (= (= (equivalent_keys k1 key2) true)
     (= (witness1 container key2) (witness1 container k1)))))))
     (dynamic_invariant7 result true false true)))) :pattern ((get2 container
                                                              key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant6 (length container)
  true false true) :pattern ((length container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq3 left right) true)
     (and
     (forall ((key2 Int))
     (=> (and (in_range3 key2) (= (has_key left key2) true))
     (and (= (has_key right key2) true)
     (= (get2 right key2) (get2 left key2)))))
     (forall ((key2 Int))
     (=> (and (in_range3 key2) (= (has_key right key2) true))
     (= (has_key left key2) true))))) :pattern ((oeq3 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true)
     (forall ((key2 Int))
     (not (and (in_range3 key2) (= (has_key container key2) true))))) :pattern (
  (is_empty container)) )))

(declare-fun has_witness (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant1 key2 true true true)
     (= (has_key container key2) true))
     (let ((result (witness1 container key2)))
     (and (= (has_witness container result) true) (dynamic_invariant6 result
     true false true)))) :pattern ((witness1 container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant6 witness2 true true true)
     (= (has_witness container witness2) true)) (dynamic_invariant7
     (w_get1 container witness2) true false true)) :pattern ((w_get1
                                                             container
                                                             witness2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant6 result true false
     true))) :pattern ((length1 container)) )))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep1))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k1 us_rep1))
     (and (= (has_key1 container k1) true) (= (bool_eq1 k1 key2) true)))
     (= (has_key1 container key2) true))) :pattern ((has_key1 container key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant6 (length2 container)
  true false true) :pattern ((length2 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty1 container) true)
     (forall ((key2 us_rep1)) (not (= (has_key1 container key2) true)))) :pattern (
  (is_empty1 container)) )))

(declare-fun has_witness1 (us_rep4 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep4 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep1))
  (! (=> (= (has_key1 container key2) true)
     (let ((result (witness container key2)))
     (and (= (has_witness1 container result) true) (dynamic_invariant6 result
     true false true)))) :pattern ((witness container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant6 witness2 true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant4
     (w_get container witness2) true false true)) :pattern ((w_get container
                                                            witness2)) ))))

(declare-const cu__split_fields count_type)

(declare-const use_ordered_maps__my_find__result count_type)

(declare-const o count_type)

(declare-const o1 count_type)

(declare-const temp___631 count_type)

(declare-const use_ordered_maps__my_find__cu__assume count_type)

(declare-const temp___628 count_type)

(declare-const temp___629 Int)

(declare-const o2 Int)

(declare-const temp___627 count_type)

(declare-const o3 Bool)

(declare-const use_ordered_maps__my_find__result1 count_type)

(declare-const result count_type)

(declare-const cu__split_fields1 count_type)

(declare-const result1 Bool)

(declare-const cu__split_fields2 count_type)

(declare-const use_ordered_maps__my_find__result2 us_rep1)

(declare-const temp___6291 Int)

(declare-const result2 int__ref)

(declare-const temp___6292 Int)

(declare-const result3 Bool)

(declare-const result4 cursor__ref)

(declare-const use_ordered_maps__my_find__result3 us_rep1)

(declare-const result5 us_split_fields__ref1)

(declare-const cu__split_fields3 us_split_fields2)

(declare-const result6 Bool)

(declare-const cu__split_fields4 us_split_fields__ref1)

(declare-const use_ordered_maps__my_find__result4 cursor__ref)

(declare-const cu__split_fields5 us_split_fields2)

(declare-const use_ordered_maps__my_find__result5 us_rep1)

(declare-const cu__split_fields6 us_split_fields__ref1)

(declare-const use_ordered_maps__my_find__result6 cursor__ref)

(declare-const cu__split_fields7 us_split_fields2)

(declare-const use_ordered_maps__my_find__result7 us_rep1)

(declare-const result7 cursor__ref)

(declare-const use_ordered_maps__my_find__result8 us_rep1)

(declare-const use_ordered_maps__my_find__result9 cursor__ref)

(declare-const use_ordered_maps__my_find__result10 us_rep1)

(declare-const cu__split_fields8 us_split_fields__ref1)

(declare-const use_ordered_maps__my_find__result11 cursor__ref)

(declare-const cu__split_fields9 us_split_fields2)

(declare-const use_ordered_maps__my_find__result12 us_rep1)

(declare-const cu__split_fields10 us_split_fields__ref1)

(declare-const use_ordered_maps__my_find__result13 cursor__ref)

(declare-const cu__split_fields11 us_split_fields2)

(declare-const use_ordered_maps__my_find__result14 us_rep1)

(define-fun cu__split_fields12 () us_split_fields2 (mk___split_fields1
                                                   cu__split_fields2))

(define-fun cu__split_fields13 () us_split_fields2 (mk___split_fields1
                                                   cu__split_fields1))

(define-fun temp___6271 () us_rep1 (mk___rep1
                                   (mk___split_fields1 temp___627)))

(define-fun use_ordered_maps__my_find__cu__assume1 () us_rep1 (mk___rep1
                                                              (mk___split_fields1
                                                              use_ordered_maps__my_find__cu__assume)))

(declare-const result8 count_type)

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= o o1))

;; H
  (assert (= temp___631 o1))

;; H
  (assert (= (mk___rep1 (mk___split_fields1 temp___631)) no_element))

;; H
  (assert (in_range1 k))

;; H
  (assert
  (and (= use_ordered_maps__my_find__cu__assume1 (first s))
  (ite (= (= (length3 s) 0) true)
  (= (bool_eq1 use_ordered_maps__my_find__cu__assume1 no_element) true)
  (and
  (= (has_key1 (positions s) use_ordered_maps__my_find__cu__assume1) true)
  (= (get1 (positions s) use_ordered_maps__my_find__cu__assume1) 1)))))

;; H
  (assert
  (= (mk___split_fields__ref1 (mk___split_fields1 result)) (mk___split_fields__ref1
                                                           (mk___split_fields1
                                                           cu__split_fields))))

;; H
  (assert (= use_ordered_maps__my_find__cu__assume cu__split_fields1))

;; H
  (assert
  (or
  (and
  (and
  (and
  (= use_ordered_maps__my_find__result11 (mk_cursor__ref
                                         use_ordered_maps__my_find__result3))
  (= cu__split_fields8 (mk___split_fields__ref1 cu__split_fields12)))
  (and
  (= use_ordered_maps__my_find__result12 use_ordered_maps__my_find__result3)
  (= cu__split_fields9 cu__split_fields12)))
  (and
  (and (= result1 (has_key1 (positions s) (mk___rep1 cu__split_fields13)))
  (= (= result1 true)
  (= (has_key1 (positions s) (mk___rep1 cu__split_fields13)) true)))
  (and (= result1 true)
  (and (= temp___628 cu__split_fields1)
  (and (= 0 temp___629)
  (and
  (forall ((i Int))
  (=>
  (and (<= 1 i)
  (<= i (- (get1 (positions s) (mk___rep1 cu__split_fields12)) 1)))
  (not (= (get (keys s) i) k))))
  (and (= (has_key1 (positions s) (mk___rep1 cu__split_fields12)) true)
  (and
  (and (= result2 (mk_int__ref temp___6291))
  (= temp___6292 (get1 (positions s) (mk___rep1 cu__split_fields12))))
  (and
  (and
  (and (= o2 (key s (mk___rep1 cu__split_fields12)))
  (and (in_range7 o2)
  (= o2 (get (keys s) (get1 (positions s) (mk___rep1 cu__split_fields12))))))
  (= result3 (ite (= o2 k) true false)))
  (and (= result3 true)
  (and (= result4 (mk_cursor__ref use_ordered_maps__my_find__result2))
  (= use_ordered_maps__my_find__result3 (mk___rep1 cu__split_fields12)))))))))))))
  (and
  (and
  (and (= result1 (has_key1 (positions s) (mk___rep1 cu__split_fields13)))
  (= (= result1 true)
  (= (has_key1 (positions s) (mk___rep1 cu__split_fields13)) true)))
  (ite (= result1 true)
  (and
  (and
  (and (= temp___628 cu__split_fields1)
  (and (= 0 temp___629)
  (and
  (forall ((i Int))
  (=>
  (and (<= 1 i)
  (<= i (- (get1 (positions s) (mk___rep1 cu__split_fields12)) 1)))
  (not (= (get (keys s) i) k))))
  (and (= (has_key1 (positions s) (mk___rep1 cu__split_fields12)) true)
  (and
  (and (= result2 (mk_int__ref temp___6291))
  (= temp___6292 (get1 (positions s) (mk___rep1 cu__split_fields12))))
  (and
  (and
  (and
  (and (= o2 (key s (mk___rep1 cu__split_fields12)))
  (and (in_range7 o2)
  (= o2 (get (keys s) (get1 (positions s) (mk___rep1 cu__split_fields12))))))
  (= result3 (ite (= o2 k) true false)))
  (and (not (= result3 true))
  (= use_ordered_maps__my_find__result3 use_ordered_maps__my_find__result2)))
  (and
  (and
  (and (= temp___6271 (next s (mk___rep1 cu__split_fields12)))
  (ite (= (ite (= (bool_eq1 (mk___rep1 cu__split_fields12) no_element) false) (=
          (get1 (positions s) (mk___rep1 cu__split_fields12)) (length3 s)) true) true)
  (= (bool_eq1 temp___6271 no_element) true)
  (and (= (has_key1 (positions s) temp___6271) true)
  (= (get1 (positions s) temp___6271) (+ (get1 (positions s)
                                         (mk___rep1 cu__split_fields12)) 1)))))
  (and (= result5 (mk___split_fields__ref1 cu__split_fields12))
  (= cu__split_fields3 (mk___split_fields1 temp___627))))
  (and
  (and
  (and (= o3 (has_key1 (positions s) (mk___rep1 cu__split_fields3)))
  (= (= o3 true)
  (= (has_key1 (positions s) (mk___rep1 cu__split_fields3)) true)))
  (= result6 (ite (not (= o3 true)) true false))) (= result6 true)))))))))
  (and
  (and
  (= use_ordered_maps__my_find__result4 (mk_cursor__ref
                                        use_ordered_maps__my_find__result3))
  (= cu__split_fields4 (mk___split_fields__ref1 cu__split_fields3)))
  (and
  (= use_ordered_maps__my_find__result5 use_ordered_maps__my_find__result3)
  (= cu__split_fields5 cu__split_fields3))))
  (and
  (and
  (= use_ordered_maps__my_find__result6 use_ordered_maps__my_find__result4)
  (= cu__split_fields6 cu__split_fields4))
  (and
  (= use_ordered_maps__my_find__result7 use_ordered_maps__my_find__result5)
  (= cu__split_fields7 cu__split_fields5))))
  (and
  (and
  (= use_ordered_maps__my_find__result6 (mk_cursor__ref
                                        (mk___rep1
                                        (mk___split_fields1
                                        use_ordered_maps__my_find__result))))
  (= cu__split_fields6 (mk___split_fields__ref1 cu__split_fields13)))
  (and
  (= use_ordered_maps__my_find__result7 (mk___rep1
                                        (mk___split_fields1
                                        use_ordered_maps__my_find__result1)))
  (= cu__split_fields7 cu__split_fields13)))))
  (and
  (and
  (and
  (= use_ordered_maps__my_find__result11 use_ordered_maps__my_find__result9)
  (= cu__split_fields8 cu__split_fields6))
  (and
  (= use_ordered_maps__my_find__result12 use_ordered_maps__my_find__result10)
  (= cu__split_fields9 cu__split_fields7)))
  (and
  (and
  (= use_ordered_maps__my_find__result9 (mk_cursor__ref
                                        use_ordered_maps__my_find__result8))
  (= use_ordered_maps__my_find__result10 use_ordered_maps__my_find__result8))
  (and (= result7 use_ordered_maps__my_find__result6)
  (= use_ordered_maps__my_find__result8 no_element)))))))

;; H
  (assert
  (= use_ordered_maps__my_find__result13 use_ordered_maps__my_find__result11))

;; H
  (assert (= cu__split_fields10 cu__split_fields8))

;; H
  (assert
  (= use_ordered_maps__my_find__result14 use_ordered_maps__my_find__result12))

;; H
  (assert (= cu__split_fields11 cu__split_fields9))

;; H
  (assert
  (= (mk___rep1 (mk___split_fields1 result8)) (cursor__content
                                              use_ordered_maps__my_find__result13)))

;; H
  (assert
  (not
  (= (bool_eq1 (cursor__content use_ordered_maps__my_find__result13)
     no_element) true)))

(assert
;; WP_parameter_def
 ;; File "a-cforma.ads", line 81, characters 0-0
  (not
  (= (has_key1 (positions s)
     (cursor__content use_ordered_maps__my_find__result13)) true)))
(check-sat)
(exit)
