;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int2 ((_ BitVec 64)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort byte 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (byte byte) Bool)

(declare-const dummy byte)

(declare-datatypes ((byte__ref 0)) (((mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))

(declare-fun to_rep (byte) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x byte)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort u64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (u64 u64) Bool)

(declare-const dummy1 u64)

(declare-datatypes ((u64__ref 0)) (((mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))

(define-fun dynamic_invariant ((temp___expr_308 (_ BitVec 64))
  (temp___is_init_305 Bool) (temp___skip_constant_306 Bool)
  (temp___do_toplevel_307 Bool)) Bool true)

(declare-fun to_rep1 (u64) (_ BitVec 64))

(declare-fun of_rep1 ((_ BitVec 64)) u64)

;; inversion_axiom
  (assert
  (forall ((x u64)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int5 ((x u64)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x u64)) (! (uint_in_range1 (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array (_ BitVec 64) byte))))))
(declare-fun slide ((Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (byte (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; singleton_def
  (assert
  (forall ((v byte))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) byte)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) byte))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort unsigned_64 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (unsigned_64 unsigned_64) Bool)

(declare-const dummy2 unsigned_64)

(declare-datatypes ((unsigned_64__ref 0))
(((mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64
  (unsigned_64__content a))

(declare-fun to_rep2 (unsigned_64) (_ BitVec 64))

(declare-fun of_rep2 ((_ BitVec 64)) unsigned_64)

;; inversion_axiom
  (assert
  (forall ((x unsigned_64))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int6 ((x unsigned_64)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_64)) (! (uint_in_range1
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-sort t 0)

(declare-fun first (t) unsigned_64)

(declare-fun last (t) unsigned_64)

(declare-fun mk ((_ BitVec 64) (_ BitVec 64)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool true)

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array (_ BitVec 64) byte))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) byte) (elts a))

(define-fun of_array ((a (Array (_ BitVec 64) byte)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 64) (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 64) (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2int (last1 a)) (bv2int (first1 a))) 1)
                                  0))

(declare-const value__size Int)

(declare-fun object__size ((Array (_ BitVec 64) byte)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array (_ BitVec 64) byte)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((byte_seq__ref 0))
(((mk_byte_seq__ref (byte_seq__content us_t)))))
(define-fun byte_seq__ref___projection ((a byte_seq__ref)) us_t (byte_seq__content
                                                                a))

(define-fun dynamic_invariant1 ((temp___expr_368 us_t)
  (temp___is_init_365 Bool) (temp___skip_constant_366 Bool)
  (temp___do_toplevel_367 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_366 true))
                                      (dynamic_property ((_ int2bv 64) 0)
                                      ((_ int2bv 64) 18446744073709551615)
                                      (first1 temp___expr_368)
                                      (last1 temp___expr_368)))
                                      (=> (= temp___do_toplevel_367 true)
                                      (=> (= temp___is_init_365 true)
                                      (bvult (last1 temp___expr_368) ((_ int2bv 64) 18446744073709551615))))))

(define-fun dynamic_predicate ((temp___371 us_t)) Bool (bvult (last1
                                                              temp___371) ((_ int2bv 64) 18446744073709551615)))

(declare-sort initialized_hash_bit_length 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))

(define-fun in_range1 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 1) x)
                                               (bvule x ((_ int2bv 64) 18446744073709551608))))

(define-fun in_range_int ((x Int)) Bool (and (<= 1 x)
                                        (<= x 18446744073709551608)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (initialized_hash_bit_length
  initialized_hash_bit_length) Bool)

(declare-const dummy4 initialized_hash_bit_length)

(declare-datatypes ((initialized_hash_bit_length__ref 0))
(((mk_initialized_hash_bit_length__ref
  (initialized_hash_bit_length__content initialized_hash_bit_length)))))
(define-fun initialized_hash_bit_length__ref___projection ((a initialized_hash_bit_length__ref)) initialized_hash_bit_length
  (initialized_hash_bit_length__content a))

(declare-sort skein_512_block_bytes_count 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))

(define-fun in_range2 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 64))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq5 (skein_512_block_bytes_count
  skein_512_block_bytes_count) Bool)

(declare-const dummy5 skein_512_block_bytes_count)

(declare-datatypes ((skein_512_block_bytes_count__ref 0))
(((mk_skein_512_block_bytes_count__ref
  (skein_512_block_bytes_count__content skein_512_block_bytes_count)))))
(define-fun skein_512_block_bytes_count__ref___projection ((a skein_512_block_bytes_count__ref)) skein_512_block_bytes_count
  (skein_512_block_bytes_count__content a))

(declare-sort skein_512_block_bytes_index 0)

(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 64))

(define-fun in_range3 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 63))))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 64))

(declare-fun user_eq6 (skein_512_block_bytes_index
  skein_512_block_bytes_index) Bool)

(declare-const dummy6 skein_512_block_bytes_index)

(declare-datatypes ((skein_512_block_bytes_index__ref 0))
(((mk_skein_512_block_bytes_index__ref
  (skein_512_block_bytes_index__content skein_512_block_bytes_index)))))
(define-fun skein_512_block_bytes_index__ref___projection ((a skein_512_block_bytes_index__ref)) skein_512_block_bytes_index
  (skein_512_block_bytes_index__content a))

(define-fun dynamic_invariant2 ((temp___expr_553 (_ BitVec 64))
  (temp___is_init_550 Bool) (temp___skip_constant_551 Bool)
  (temp___do_toplevel_552 Bool)) Bool (=>
                                      (or (= temp___is_init_550 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 63)))
                                      (in_range3 temp___expr_553)))

(define-fun dynamic_invariant3 ((temp___expr_559 (Array (_ BitVec 64) byte))
  (temp___is_init_556 Bool) (temp___skip_constant_557 Bool)
  (temp___do_toplevel_558 Bool)) Bool (=> (= temp___do_toplevel_558 true)
                                      (=> (= temp___is_init_556 true)
                                      (bvult (last1
                                             (of_array temp___expr_559
                                             ((_ int2bv 64) 0)
                                             ((_ int2bv 64) 63))) ((_ int2bv 64) 18446744073709551615)))))

(define-fun dynamic_predicate1 ((temp___567 (Array (_ BitVec 64) byte))) Bool (bvult
  (last1 (of_array temp___567 ((_ int2bv 64) 0) ((_ int2bv 64) 63))) ((_ int2bv 64) 18446744073709551615)))

(declare-const i25s (Array (_ BitVec 64) byte))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort positive_block_512_count_t 0)

(declare-const attr__ATTRIBUTE_MODULUS6 (_ BitVec 64))

(define-fun in_range4 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 1) x)
                                               (bvule x ((_ int2bv 64) 288230376151711743))))

(define-fun in_range_int3 ((x Int)) Bool (and (<= 1 x)
                                         (<= x 288230376151711743)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 64))

(declare-fun user_eq7 (positive_block_512_count_t
  positive_block_512_count_t) Bool)

(declare-const dummy7 positive_block_512_count_t)

(declare-datatypes ((positive_block_512_count_t__ref 0))
(((mk_positive_block_512_count_t__ref
  (positive_block_512_count_t__content positive_block_512_count_t)))))
(define-fun positive_block_512_count_t__ref___projection ((a positive_block_512_count_t__ref)) positive_block_512_count_t
  (positive_block_512_count_t__content a))

(define-fun dynamic_invariant4 ((temp___expr_603 (_ BitVec 64))
  (temp___is_init_600 Bool) (temp___skip_constant_601 Bool)
  (temp___do_toplevel_602 Bool)) Bool (=>
                                      (or (= temp___is_init_600 true)
                                      (bvule ((_ int2bv 64) 1) ((_ int2bv 64) 288230376151711743)))
                                      (in_range4 temp___expr_603)))

(declare-sort hash_bit_length 0)

(declare-const attr__ATTRIBUTE_MODULUS7 (_ BitVec 64))

(define-fun in_range5 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 18446744073709551608))))

(define-fun in_range_int4 ((x Int)) Bool (and (<= 0 x)
                                         (<= x 18446744073709551608)))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 64))

(declare-fun user_eq8 (hash_bit_length hash_bit_length) Bool)

(declare-const dummy8 hash_bit_length)

(declare-datatypes ((hash_bit_length__ref 0))
(((mk_hash_bit_length__ref (hash_bit_length__content hash_bit_length)))))
(define-fun hash_bit_length__ref___projection ((a hash_bit_length__ref)) hash_bit_length
  (hash_bit_length__content a))

(declare-fun to_rep3 (hash_bit_length) (_ BitVec 64))

(declare-fun of_rep3 ((_ BitVec 64)) hash_bit_length)

;; inversion_axiom
  (assert
  (forall ((x hash_bit_length))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x hash_bit_length)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun to_int7 ((x hash_bit_length)) Int (bv2int (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_bit_length)) (! (in_range_int4
  (to_int7 x)) :pattern ((to_int7 x)) )))

(declare-fun nth2 ((_ BitVec 16) Int) Bool)

(declare-fun lsr2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int8 ((_ BitVec 16)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv2 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes ((t__ref2 0))
(((mk_t__ref2 (t__content2 (_ BitVec 16))))))
(declare-fun power2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min2 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 32) Int) Bool)

(declare-fun lsr3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right4 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left4 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int9 ((_ BitVec 32)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv3 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes ((t__ref3 0))
(((mk_t__ref3 (t__content3 (_ BitVec 32))))))
(declare-fun power3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min3 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort u16 0)

(declare-const attr__ATTRIBUTE_MODULUS8 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 16))

(declare-fun user_eq9 (u16 u16) Bool)

(declare-const dummy9 u16)

(declare-datatypes ((u16__ref 0)) (((mk_u16__ref (u16__content u16)))))
(define-fun u16__ref___projection ((a u16__ref)) u16 (u16__content a))

(declare-fun to_rep4 (u16) (_ BitVec 16))

(declare-fun of_rep4 ((_ BitVec 16)) u16)

;; inversion_axiom
  (assert
  (forall ((x u16)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))) )))

(define-fun to_int10 ((x u16)) Int (bv2int (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x u16)) (! (uint_in_range2
  (to_int10 x)) :pattern ((to_int10 x)) )))

(declare-sort u32 0)

(declare-const attr__ATTRIBUTE_MODULUS9 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE10 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) (_ BitVec 32))

(declare-fun user_eq10 (u32 u32) Bool)

(declare-const dummy10 u32)

(declare-datatypes ((u32__ref 0)) (((mk_u32__ref (u32__content u32)))))
(define-fun u32__ref___projection ((a u32__ref)) u32 (u32__content a))

(declare-fun to_rep5 (u32) (_ BitVec 32))

(declare-fun of_rep5 ((_ BitVec 32)) u32)

;; inversion_axiom
  (assert
  (forall ((x u32)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep5 (of_rep5 x)) x) :pattern ((to_rep5 (of_rep5 x))) )))

(define-fun to_int11 ((x u32)) Int (bv2int (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x u32)) (! (uint_in_range3
  (to_int11 x)) :pattern ((to_int11 x)) )))

(declare-sort u7 0)

(define-fun in_range6 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 127))))

(define-fun in_range_int5 ((x Int)) Bool (and (<= 0 x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE11 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) (_ BitVec 8))

(declare-fun user_eq11 (u7 u7) Bool)

(declare-const dummy11 u7)

(declare-datatypes ((u7__ref 0)) (((mk_u7__ref (u7__content u7)))))
(define-fun u7__ref___projection ((a u7__ref)) u7 (u7__content a))

(declare-fun to_rep6 (u7) (_ BitVec 8))

(declare-fun of_rep6 ((_ BitVec 8)) u7)

;; inversion_axiom
  (assert
  (forall ((x u7)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x u7)) (! (in_range6 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 128))))
     (=> (in_range6 y) (= (to_rep6 (of_rep6 x)) y))) :pattern ((to_rep6
                                                               (of_rep6 x))) )))

(define-fun to_int12 ((x u7)) Int (bv2int (to_rep6 x)))

;; range_int_axiom
  (assert
  (forall ((x u7)) (! (in_range_int5 (to_int12 x)) :pattern ((to_int12 x)) )))

(declare-sort u6 0)

(define-fun in_range7 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 63))))

(define-fun in_range_int6 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE12 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) (_ BitVec 8))

(declare-fun user_eq12 (u6 u6) Bool)

(declare-const dummy12 u6)

(declare-datatypes ((u6__ref 0)) (((mk_u6__ref (u6__content u6)))))
(define-fun u6__ref___projection ((a u6__ref)) u6 (u6__content a))

(declare-fun to_rep7 (u6) (_ BitVec 8))

(declare-fun of_rep7 ((_ BitVec 8)) u6)

;; inversion_axiom
  (assert
  (forall ((x u6)) (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x u6)) (! (in_range7 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 64))))
     (=> (in_range7 y) (= (to_rep7 (of_rep7 x)) y))) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(define-fun to_int13 ((x u6)) Int (bv2int (to_rep7 x)))

;; range_int_axiom
  (assert
  (forall ((x u6)) (! (in_range_int6 (to_int13 x)) :pattern ((to_int13 x)) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__skein__tweak_value__byte_count_lsb u64)(rec__skein__tweak_value__byte_count_msb u32)(rec__skein__tweak_value__reserved u16)(rec__skein__tweak_value__tree_level u7)(rec__skein__tweak_value__bit_pad Bool)(rec__skein__tweak_value__field_type u6)(rec__skein__tweak_value__first_block Bool)(rec__skein__tweak_value__final_block Bool)))))
(define-fun us_split_fields_Byte_Count_LSB__projection ((a us_split_fields)) u64
  (rec__skein__tweak_value__byte_count_lsb a))

(define-fun us_split_fields_Byte_Count_MSB__projection ((a us_split_fields)) u32
  (rec__skein__tweak_value__byte_count_msb a))

(define-fun us_split_fields_Reserved__projection ((a us_split_fields)) u16
  (rec__skein__tweak_value__reserved a))

(define-fun us_split_fields_Tree_Level__projection ((a us_split_fields)) u7
  (rec__skein__tweak_value__tree_level a))

(define-fun us_split_fields_Bit_Pad__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__bit_pad a))

(define-fun us_split_fields_Field_Type__projection ((a us_split_fields)) u6
  (rec__skein__tweak_value__field_type a))

(define-fun us_split_fields_First_Block__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__first_block a))

(define-fun us_split_fields_Final_Block__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__final_block a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__skein__tweak_value__byte_count_lsb
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__skein__tweak_value__byte_count_lsb
                                                  (us_split_fields1 b))))
                        (= (to_rep5
                           (rec__skein__tweak_value__byte_count_msb
                           (us_split_fields1 a))) (to_rep5
                                                  (rec__skein__tweak_value__byte_count_msb
                                                  (us_split_fields1 b)))))
                        (= (to_rep4
                           (rec__skein__tweak_value__reserved
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__skein__tweak_value__reserved
                                                  (us_split_fields1 b)))))
                        (= (to_rep6
                           (rec__skein__tweak_value__tree_level
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__skein__tweak_value__tree_level
                                                  (us_split_fields1 b)))))
                        (= (rec__skein__tweak_value__bit_pad
                           (us_split_fields1 a)) (rec__skein__tweak_value__bit_pad
                                                 (us_split_fields1 b))))
                        (= (to_rep7
                           (rec__skein__tweak_value__field_type
                           (us_split_fields1 a))) (to_rep7
                                                  (rec__skein__tweak_value__field_type
                                                  (us_split_fields1 b)))))
                        (= (rec__skein__tweak_value__first_block
                           (us_split_fields1 a)) (rec__skein__tweak_value__first_block
                                                 (us_split_fields1 b))))
                        (= (rec__skein__tweak_value__final_block
                           (us_split_fields1 a)) (rec__skein__tweak_value__final_block
                                                 (us_split_fields1 b))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const skein__tweak_value__byte_count_lsb__first__bit Int)

(declare-const skein__tweak_value__byte_count_lsb__last__bit Int)

(declare-const skein__tweak_value__byte_count_lsb__position Int)

;; skein__tweak_value__byte_count_lsb__first__bit_axiom
  (assert (<= 0 skein__tweak_value__byte_count_lsb__first__bit))

;; skein__tweak_value__byte_count_lsb__last__bit_axiom
  (assert
  (< skein__tweak_value__byte_count_lsb__first__bit skein__tweak_value__byte_count_lsb__last__bit))

;; skein__tweak_value__byte_count_lsb__position_axiom
  (assert (<= 0 skein__tweak_value__byte_count_lsb__position))

(declare-const skein__tweak_value__byte_count_msb__first__bit Int)

(declare-const skein__tweak_value__byte_count_msb__last__bit Int)

(declare-const skein__tweak_value__byte_count_msb__position Int)

;; skein__tweak_value__byte_count_msb__first__bit_axiom
  (assert (<= 0 skein__tweak_value__byte_count_msb__first__bit))

;; skein__tweak_value__byte_count_msb__last__bit_axiom
  (assert
  (< skein__tweak_value__byte_count_msb__first__bit skein__tweak_value__byte_count_msb__last__bit))

;; skein__tweak_value__byte_count_msb__position_axiom
  (assert (<= 0 skein__tweak_value__byte_count_msb__position))

(declare-const skein__tweak_value__reserved__first__bit Int)

(declare-const skein__tweak_value__reserved__last__bit Int)

(declare-const skein__tweak_value__reserved__position Int)

;; skein__tweak_value__reserved__first__bit_axiom
  (assert (<= 0 skein__tweak_value__reserved__first__bit))

;; skein__tweak_value__reserved__last__bit_axiom
  (assert
  (< skein__tweak_value__reserved__first__bit skein__tweak_value__reserved__last__bit))

;; skein__tweak_value__reserved__position_axiom
  (assert (<= 0 skein__tweak_value__reserved__position))

(declare-const skein__tweak_value__tree_level__first__bit Int)

(declare-const skein__tweak_value__tree_level__last__bit Int)

(declare-const skein__tweak_value__tree_level__position Int)

;; skein__tweak_value__tree_level__first__bit_axiom
  (assert (<= 0 skein__tweak_value__tree_level__first__bit))

;; skein__tweak_value__tree_level__last__bit_axiom
  (assert
  (< skein__tweak_value__tree_level__first__bit skein__tweak_value__tree_level__last__bit))

;; skein__tweak_value__tree_level__position_axiom
  (assert (<= 0 skein__tweak_value__tree_level__position))

(declare-const skein__tweak_value__bit_pad__first__bit Int)

(declare-const skein__tweak_value__bit_pad__last__bit Int)

(declare-const skein__tweak_value__bit_pad__position Int)

;; skein__tweak_value__bit_pad__first__bit_axiom
  (assert (<= 0 skein__tweak_value__bit_pad__first__bit))

;; skein__tweak_value__bit_pad__last__bit_axiom
  (assert
  (< skein__tweak_value__bit_pad__first__bit skein__tweak_value__bit_pad__last__bit))

;; skein__tweak_value__bit_pad__position_axiom
  (assert (<= 0 skein__tweak_value__bit_pad__position))

(declare-const skein__tweak_value__field_type__first__bit Int)

(declare-const skein__tweak_value__field_type__last__bit Int)

(declare-const skein__tweak_value__field_type__position Int)

;; skein__tweak_value__field_type__first__bit_axiom
  (assert (<= 0 skein__tweak_value__field_type__first__bit))

;; skein__tweak_value__field_type__last__bit_axiom
  (assert
  (< skein__tweak_value__field_type__first__bit skein__tweak_value__field_type__last__bit))

;; skein__tweak_value__field_type__position_axiom
  (assert (<= 0 skein__tweak_value__field_type__position))

(declare-const skein__tweak_value__first_block__first__bit Int)

(declare-const skein__tweak_value__first_block__last__bit Int)

(declare-const skein__tweak_value__first_block__position Int)

;; skein__tweak_value__first_block__first__bit_axiom
  (assert (<= 0 skein__tweak_value__first_block__first__bit))

;; skein__tweak_value__first_block__last__bit_axiom
  (assert
  (< skein__tweak_value__first_block__first__bit skein__tweak_value__first_block__last__bit))

;; skein__tweak_value__first_block__position_axiom
  (assert (<= 0 skein__tweak_value__first_block__position))

(declare-const skein__tweak_value__final_block__first__bit Int)

(declare-const skein__tweak_value__final_block__last__bit Int)

(declare-const skein__tweak_value__final_block__position Int)

;; skein__tweak_value__final_block__first__bit_axiom
  (assert (<= 0 skein__tweak_value__final_block__first__bit))

;; skein__tweak_value__final_block__last__bit_axiom
  (assert
  (< skein__tweak_value__final_block__first__bit skein__tweak_value__final_block__last__bit))

;; skein__tweak_value__final_block__position_axiom
  (assert (<= 0 skein__tweak_value__final_block__position))

(declare-fun user_eq13 (us_rep us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes ((tweak_value__ref 0))
(((mk_tweak_value__ref (tweak_value__content us_rep)))))
(define-fun tweak_value__ref___projection ((a tweak_value__ref)) us_rep
  (tweak_value__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__skein__context_header__tweak_words us_rep)(rec__skein__context_header__hash_bit_len hash_bit_length)(rec__skein__context_header__byte_count u64)))))
(define-fun us_split_fields_Tweak_Words__projection ((a us_split_fields2)) us_rep
  (rec__skein__context_header__tweak_words a))

(define-fun us_split_fields_Hash_Bit_Len__projection ((a us_split_fields2)) hash_bit_length
  (rec__skein__context_header__hash_bit_len a))

(define-fun us_split_fields_Byte_Count__projection ((a us_split_fields2)) u64
  (rec__skein__context_header__byte_count a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq2
                            (rec__skein__context_header__tweak_words
                            (us_split_fields3 a))
                            (rec__skein__context_header__tweak_words
                            (us_split_fields3 b))) true)
                         (= (to_rep3
                            (rec__skein__context_header__hash_bit_len
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__skein__context_header__hash_bit_len
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__skein__context_header__byte_count
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__skein__context_header__byte_count
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const skein__context_header__tweak_words__first__bit Int)

(declare-const skein__context_header__tweak_words__last__bit Int)

(declare-const skein__context_header__tweak_words__position Int)

;; skein__context_header__tweak_words__first__bit_axiom
  (assert (<= 0 skein__context_header__tweak_words__first__bit))

;; skein__context_header__tweak_words__last__bit_axiom
  (assert
  (< skein__context_header__tweak_words__first__bit skein__context_header__tweak_words__last__bit))

;; skein__context_header__tweak_words__position_axiom
  (assert (<= 0 skein__context_header__tweak_words__position))

(declare-const skein__context_header__hash_bit_len__first__bit Int)

(declare-const skein__context_header__hash_bit_len__last__bit Int)

(declare-const skein__context_header__hash_bit_len__position Int)

;; skein__context_header__hash_bit_len__first__bit_axiom
  (assert (<= 0 skein__context_header__hash_bit_len__first__bit))

;; skein__context_header__hash_bit_len__last__bit_axiom
  (assert
  (< skein__context_header__hash_bit_len__first__bit skein__context_header__hash_bit_len__last__bit))

;; skein__context_header__hash_bit_len__position_axiom
  (assert (<= 0 skein__context_header__hash_bit_len__position))

(declare-const skein__context_header__byte_count__first__bit Int)

(declare-const skein__context_header__byte_count__last__bit Int)

(declare-const skein__context_header__byte_count__position Int)

;; skein__context_header__byte_count__first__bit_axiom
  (assert (<= 0 skein__context_header__byte_count__first__bit))

;; skein__context_header__byte_count__last__bit_axiom
  (assert
  (< skein__context_header__byte_count__first__bit skein__context_header__byte_count__last__bit))

;; skein__context_header__byte_count__position_axiom
  (assert (<= 0 skein__context_header__byte_count__position))

(declare-fun user_eq14 (us_rep1 us_rep1) Bool)

(declare-const dummy14 us_rep1)

(declare-datatypes ((context_header__ref 0))
(((mk_context_header__ref (context_header__content us_rep1)))))
(define-fun context_header__ref___projection ((a context_header__ref)) us_rep1
  (context_header__content a))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array (_ BitVec 64) u64))))))
(declare-fun slide1 ((Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((first2 (_ BitVec 64)))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (u64 (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; singleton_def
  (assert
  (forall ((v u64))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq4 ((a (Array (_ BitVec 64) u64)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) u64))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_133 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_133)
                                     (bvule temp___idx_133 a__last))
                                     (= (to_rep1 (select a temp___idx_133))
                                     (to_rep1
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_133)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_133 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last))
  (= (to_rep1 (select a temp___idx_133)) (to_rep1
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_133)))))))))))

(declare-fun compare1 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep1 (select a (bvadd i #x0000000000000001))) (to_rep1
                                                              (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep1 (select a (bvadd j #x0000000000000001))) (to_rep1
                                                              (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-const dummy15 (Array (_ BitVec 64) u64))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array (_ BitVec 64) u64)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array (_ BitVec 64) u64)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array (_ BitVec 64) u64)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq15 ((Array (_ BitVec 64) u64)
  (Array (_ BitVec 64) u64)) Bool)

(declare-const dummy16 (Array (_ BitVec 64) byte))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array (_ BitVec 64) byte)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array (_ BitVec 64) byte)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq16 ((Array (_ BitVec 64) byte)
  (Array (_ BitVec 64) byte)) Bool)

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__skein__skein_512_context__h us_rep1)(rec__skein__skein_512_context__x (Array (_ BitVec 64) u64))(rec__skein__skein_512_context__b (Array (_ BitVec 64) byte))))))
(define-fun us_split_fields_H__projection ((a us_split_fields4)) us_rep1
  (rec__skein__skein_512_context__h a))

(define-fun us_split_fields_X__projection ((a us_split_fields4)) (Array (_ BitVec 64) u64)
  (rec__skein__skein_512_context__x a))

(define-fun us_split_fields_B__projection ((a us_split_fields4)) (Array (_ BitVec 64) byte)
  (rec__skein__skein_512_context__b a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun bool_eq5 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (bool_eq3
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 a))
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 b))) true)
                         (= (bool_eq4
                            (rec__skein__skein_512_context__x
                            (us_split_fields5 a)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 7)
                            (rec__skein__skein_512_context__x
                            (us_split_fields5 b)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 7)) true))
                         (= (bool_eq
                            (rec__skein__skein_512_context__b
                            (us_split_fields5 a)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 63)
                            (rec__skein__skein_512_context__b
                            (us_split_fields5 b)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 63)) true))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-const skein__skein_512_context__h__first__bit Int)

(declare-const skein__skein_512_context__h__last__bit Int)

(declare-const skein__skein_512_context__h__position Int)

;; skein__skein_512_context__h__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__h__first__bit))

;; skein__skein_512_context__h__last__bit_axiom
  (assert
  (< skein__skein_512_context__h__first__bit skein__skein_512_context__h__last__bit))

;; skein__skein_512_context__h__position_axiom
  (assert (<= 0 skein__skein_512_context__h__position))

(declare-const skein__skein_512_context__x__first__bit Int)

(declare-const skein__skein_512_context__x__last__bit Int)

(declare-const skein__skein_512_context__x__position Int)

;; skein__skein_512_context__x__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__x__first__bit))

;; skein__skein_512_context__x__last__bit_axiom
  (assert
  (< skein__skein_512_context__x__first__bit skein__skein_512_context__x__last__bit))

;; skein__skein_512_context__x__position_axiom
  (assert (<= 0 skein__skein_512_context__x__position))

(declare-const skein__skein_512_context__b__first__bit Int)

(declare-const skein__skein_512_context__b__last__bit Int)

(declare-const skein__skein_512_context__b__position Int)

;; skein__skein_512_context__b__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__b__first__bit))

;; skein__skein_512_context__b__last__bit_axiom
  (assert
  (< skein__skein_512_context__b__first__bit skein__skein_512_context__b__last__bit))

;; skein__skein_512_context__b__position_axiom
  (assert (<= 0 skein__skein_512_context__b__position))

(declare-fun user_eq17 (us_rep2 us_rep2) Bool)

(declare-const dummy17 us_rep2)

(declare-datatypes ((skein_512_context__ref 0))
(((mk_skein_512_context__ref (skein_512_context__content us_rep2)))))
(define-fun skein_512_context__ref___projection ((a skein_512_context__ref)) us_rep2
  (skein_512_context__content a))

(define-fun dynamic_invariant5 ((temp___expr_652 us_rep2)
  (temp___is_init_649 Bool) (temp___skip_constant_650 Bool)
  (temp___do_toplevel_651 Bool)) Bool (=> (= temp___is_init_649 true)
                                      (bvult (last1
                                             (of_array
                                             (rec__skein__skein_512_context__b
                                             (us_split_fields5
                                             temp___expr_652))
                                             ((_ int2bv 64) 0)
                                             ((_ int2bv 64) 63))) ((_ int2bv 64) 18446744073709551615))))

(declare-fun add_in_range ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun add_in_range__function_guard (Bool (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; add_in_range__post_axiom
  (assert true)

;; add_in_range__def_axiom
  (assert
  (forall ((x (_ BitVec 64)) (y (_ BitVec 64)))
  (! (= (= (add_in_range x y) true)
     (bvule y (bvsub ((_ int2bv 64) 18446744073709551615) x))) :pattern (
  (add_in_range x y)) )))

(declare-fun hash_bit_len_of (us_rep2) (_ BitVec 64))

(declare-fun hash_bit_len_of__function_guard ((_ BitVec 64) us_rep2) Bool)

(define-fun dynamic_invariant6 ((temp___expr_520 (_ BitVec 64))
  (temp___is_init_517 Bool) (temp___skip_constant_518 Bool)
  (temp___do_toplevel_519 Bool)) Bool (=>
                                      (or (= temp___is_init_517 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 18446744073709551608)))
                                      (in_range5 temp___expr_520)))

;; hash_bit_len_of__post_axiom
  (assert
  (forall ((ctx us_rep2))
  (! (=> (dynamic_invariant5 ctx true true true) (dynamic_invariant6
     (hash_bit_len_of ctx) true false true)) :pattern ((hash_bit_len_of ctx)) )))

;; hash_bit_len_of__def_axiom
  (assert
  (forall ((ctx us_rep2))
  (! (=> (dynamic_invariant5 ctx true true true)
     (= (hash_bit_len_of ctx) (to_rep3
                              (rec__skein__context_header__hash_bit_len
                              (us_split_fields3
                              (rec__skein__skein_512_context__h
                              (us_split_fields5 ctx))))))) :pattern (
  (hash_bit_len_of ctx)) )))

(declare-fun byte_count_of (us_rep2) (_ BitVec 64))

(declare-fun byte_count_of__function_guard ((_ BitVec 64) us_rep2) Bool)

;; byte_count_of__post_axiom
  (assert
  (forall ((ctx us_rep2))
  (! (=> (dynamic_invariant5 ctx true true true) (dynamic_invariant
     (byte_count_of ctx) true false true)) :pattern ((byte_count_of ctx)) )))

;; byte_count_of__def_axiom
  (assert
  (forall ((ctx us_rep2))
  (! (=> (dynamic_invariant5 ctx true true true)
     (= (byte_count_of ctx) (to_rep1
                            (rec__skein__context_header__byte_count
                            (us_split_fields3
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 ctx))))))) :pattern ((byte_count_of
                                                                   ctx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const msg us_t)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const c237b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const c238b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const c240b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const c241b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(define-fun dynamic_invariant7 ((temp___expr_290 (_ BitVec 8))
  (temp___is_init_287 Bool) (temp___skip_constant_288 Bool)
  (temp___do_toplevel_289 Bool)) Bool true)

(define-fun dynamic_invariant8 ((temp___expr_296 (_ BitVec 16))
  (temp___is_init_293 Bool) (temp___skip_constant_294 Bool)
  (temp___do_toplevel_295 Bool)) Bool true)

(define-fun dynamic_invariant9 ((temp___expr_302 (_ BitVec 32))
  (temp___is_init_299 Bool) (temp___skip_constant_300 Bool)
  (temp___do_toplevel_301 Bool)) Bool true)

(define-fun dynamic_invariant10 ((temp___expr_526 (_ BitVec 64))
  (temp___is_init_523 Bool) (temp___skip_constant_524 Bool)
  (temp___do_toplevel_525 Bool)) Bool (=>
                                      (or (= temp___is_init_523 true)
                                      (bvule ((_ int2bv 64) 1) ((_ int2bv 64) 18446744073709551608)))
                                      (in_range1 temp___expr_526)))

(define-fun dynamic_invariant11 ((temp___expr_547 (_ BitVec 64))
  (temp___is_init_544 Bool) (temp___skip_constant_545 Bool)
  (temp___do_toplevel_546 Bool)) Bool (=>
                                      (or (= temp___is_init_544 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 64)))
                                      (in_range2 temp___expr_547)))

(define-fun dynamic_invariant12 ((temp___expr_615 (_ BitVec 8))
  (temp___is_init_612 Bool) (temp___skip_constant_613 Bool)
  (temp___do_toplevel_614 Bool)) Bool (=>
                                      (or (= temp___is_init_612 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 63)))
                                      (in_range7 temp___expr_615)))

(define-fun dynamic_invariant13 ((temp___expr_609 (_ BitVec 8))
  (temp___is_init_606 Bool) (temp___skip_constant_607 Bool)
  (temp___do_toplevel_608 Bool)) Bool (=>
                                      (or (= temp___is_init_606 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 127)))
                                      (in_range6 temp___expr_609)))

(define-fun dynamic_invariant14 ((temp___expr_266 (_ BitVec 64))
  (temp___is_init_263 Bool) (temp___skip_constant_264 Bool)
  (temp___do_toplevel_265 Bool)) Bool true)

(declare-const ctx__split_fields u64)

(declare-const ctx__split_fields1 u32)

(declare-const ctx__split_fields2 u16)

(declare-const ctx__split_fields3 u7)

(declare-const ctx__split_fields4 Bool)

(declare-const ctx__split_fields5 u6)

(declare-const ctx__split_fields6 Bool)

(declare-const ctx__split_fields7 Bool)

(declare-const ctx__split_fields8 hash_bit_length)

(declare-const ctx__split_fields9 u64)

(declare-const ctx__split_fields10 (Array (_ BitVec 64) u64))

(declare-const ctx__split_fields11 (Array (_ BitVec 64) byte))

(declare-const msg_byte_count (_ BitVec 64))

(declare-const n (_ BitVec 64))

(declare-const block_count (_ BitVec 64))

(declare-const current_msg_offset (_ BitVec 64))

(declare-const bytes_hashed (_ BitVec 64))

(declare-const tmp_b (Array (_ BitVec 64) byte))

(declare-const src (_ BitVec 64))

(declare-const dst (_ BitVec 64))

(declare-const final_dst (_ BitVec 64))

(declare-const final_src (_ BitVec 64))

(declare-const src1 (_ BitVec 64))

(declare-const dst1 (_ BitVec 64))

(declare-const final_dst1 (_ BitVec 64))

(declare-const final_src1 (_ BitVec 64))

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 64))

(declare-const o2 (_ BitVec 64))

(declare-const temp___1380 (_ BitVec 64))

(declare-const temp___1378 u64)

(declare-const temp___13781 u32)

(declare-const temp___13782 u16)

(declare-const temp___13783 u7)

(declare-const temp___13784 Bool)

(declare-const temp___13785 u6)

(declare-const temp___13786 Bool)

(declare-const temp___13787 Bool)

(declare-const temp___13788 hash_bit_length)

(declare-const temp___13789 u64)

(declare-const temp___137810 (Array (_ BitVec 64) u64))

(declare-const temp___137811 (Array (_ BitVec 64) byte))

(declare-const temp___1377 (_ BitVec 64))

(declare-const o3 (_ BitVec 64))

(declare-const o4 byte)

(declare-const o5 (_ BitVec 8))

(declare-const o6 byte)

(declare-const temp___1374 (Array (_ BitVec 64) byte))

(declare-const o7 (Array (_ BitVec 64) byte))

(declare-const o8 us_split_fields4)

(declare-const temp___1376 us_rep2)

(declare-const o9 (_ BitVec 64))

(declare-const o10 (_ BitVec 64))

(declare-const o11 byte)

(declare-const o12 (_ BitVec 8))

(declare-const o13 byte)

(declare-const temp___13741 (Array (_ BitVec 64) byte))

(declare-const o14 u64)

(declare-const o15 us_split_fields2)

(declare-const o16 us_rep1)

(declare-const o17 us_split_fields4)

(declare-const temp___1383 us_rep2)

(declare-const o18 u64)

(declare-const o19 us_split_fields2)

(declare-const o20 us_rep1)

(declare-const o21 us_split_fields4)

(declare-const temp___1386 us_rep2)

(declare-const o22 (_ BitVec 64))

(declare-const o23 (_ BitVec 64))

(declare-const o24 (_ BitVec 64))

(declare-const temp___1394 (_ BitVec 64))

(declare-const temp___1393 (_ BitVec 64))

(declare-const temp___1391 us_rep2)

(declare-const o25 (_ BitVec 64))

(declare-const o26 byte)

(declare-const o27 (_ BitVec 8))

(declare-const o28 byte)

(declare-const temp___1388 (Array (_ BitVec 64) byte))

(declare-const o29 (Array (_ BitVec 64) byte))

(declare-const o30 us_split_fields4)

(declare-const temp___1390 us_rep2)

(declare-const o31 (_ BitVec 64))

(declare-const o32 (_ BitVec 64))

(declare-const o33 byte)

(declare-const o34 (_ BitVec 8))

(declare-const o35 byte)

(declare-const temp___13881 (Array (_ BitVec 64) byte))

(declare-const o36 u64)

(declare-const o37 us_split_fields2)

(declare-const o38 us_rep1)

(declare-const o39 us_split_fields4)

(declare-const temp___1397 us_rep2)

(declare-const ctx__split_fields12 us_split_fields4)

(declare-const n1 (_ BitVec 64))

(declare-const block_count1 (_ BitVec 64))

(declare-const bytes_hashed1 (_ BitVec 64))

(declare-const tmp_b1 (Array (_ BitVec 64) byte))

(declare-const src2 (_ BitVec 64))

(declare-const dst2 (_ BitVec 64))

(declare-const final_dst2 (_ BitVec 64))

(declare-const final_src2 (_ BitVec 64))

(declare-const src3 (_ BitVec 64))

(declare-const dst3 (_ BitVec 64))

(declare-const final_dst3 (_ BitVec 64))

(declare-const final_src3 (_ BitVec 64))

(declare-const result t__ref1)

(declare-const msg_byte_count1 (_ BitVec 64))

(declare-const result1 t__ref1)

(declare-const current_msg_offset1 (_ BitVec 64))

(declare-const result2 t__ref1)

(declare-const n2 (_ BitVec 64))

(declare-const result3 t__ref1)

(declare-const src4 (_ BitVec 64))

(declare-const result4 t__ref1)

(declare-const dst4 (_ BitVec 64))

(declare-const result5 t__ref1)

(declare-const final_dst4 (_ BitVec 64))

(declare-const result6 t__ref1)

(declare-const final_src4 (_ BitVec 64))

(declare-const result7 us_split_fields__ref2)

(declare-const ctx__split_fields13 us_split_fields4)

(declare-const ctx__split_fields14 us_split_fields4)

(declare-const src5 (_ BitVec 64))

(declare-const dst5 (_ BitVec 64))

(declare-const result8 t__ref1)

(declare-const dst6 (_ BitVec 64))

(declare-const result9 t__ref1)

(declare-const src6 (_ BitVec 64))

(declare-const src7 t__ref1)

(declare-const dst7 t__ref1)

(declare-const src8 (_ BitVec 64))

(declare-const dst8 (_ BitVec 64))

(declare-const ctx__split_fields15 us_split_fields__ref2)

(declare-const src9 t__ref1)

(declare-const dst9 t__ref1)

(declare-const ctx__split_fields16 us_split_fields4)

(declare-const src10 (_ BitVec 64))

(declare-const dst10 (_ BitVec 64))

(declare-const ctx__split_fields17 us_split_fields__ref2)

(declare-const src11 t__ref1)

(declare-const dst11 t__ref1)

(declare-const ctx__split_fields18 us_split_fields4)

(declare-const src12 (_ BitVec 64))

(declare-const dst12 (_ BitVec 64))

(declare-const ctx__split_fields19 us_split_fields__ref2)

(declare-const src13 t__ref1)

(declare-const dst13 t__ref1)

(declare-const ctx__split_fields20 us_split_fields4)

(declare-const src14 (_ BitVec 64))

(declare-const dst14 (_ BitVec 64))

(declare-const result10 us_split_fields__ref2)

(declare-const ctx__split_fields21 us_split_fields4)

(declare-const ctx__split_fields22 us_split_fields__ref2)

(declare-const src15 t__ref1)

(declare-const dst15 t__ref1)

(declare-const final_dst5 t__ref1)

(declare-const final_src5 t__ref1)

(declare-const ctx__split_fields23 us_split_fields4)

(declare-const src16 (_ BitVec 64))

(declare-const dst16 (_ BitVec 64))

(declare-const final_dst6 (_ BitVec 64))

(declare-const final_src6 (_ BitVec 64))

(declare-const result11 t__ref1)

(declare-const msg_byte_count2 (_ BitVec 64))

(declare-const result12 t__ref1)

(declare-const current_msg_offset2 (_ BitVec 64))

(declare-const result13 map__ref)

(declare-const tmp_b2 (Array (_ BitVec 64) byte))

(declare-const ctx__split_fields24 us_split_fields4)

(declare-const result14 us_split_fields__ref2)

(declare-const ctx__split_fields25 us_split_fields4)

(declare-const ctx__split_fields26 us_split_fields__ref2)

(declare-const msg_byte_count3 t__ref1)

(declare-const n3 t__ref1)

(declare-const current_msg_offset3 t__ref1)

(declare-const tmp_b3 map__ref)

(declare-const src17 t__ref1)

(declare-const dst17 t__ref1)

(declare-const final_dst7 t__ref1)

(declare-const final_src7 t__ref1)

(declare-const ctx__split_fields27 us_split_fields4)

(declare-const msg_byte_count4 (_ BitVec 64))

(declare-const n4 (_ BitVec 64))

(declare-const current_msg_offset4 (_ BitVec 64))

(declare-const tmp_b4 (Array (_ BitVec 64) byte))

(declare-const src18 (_ BitVec 64))

(declare-const dst18 (_ BitVec 64))

(declare-const final_dst8 (_ BitVec 64))

(declare-const final_src8 (_ BitVec 64))

(declare-const result15 t__ref1)

(declare-const block_count2 (_ BitVec 64))

(declare-const ctx__split_fields28 us_split_fields4)

(declare-const result16 t__ref1)

(declare-const bytes_hashed2 (_ BitVec 64))

(declare-const result17 t__ref1)

(declare-const msg_byte_count5 (_ BitVec 64))

(declare-const result18 t__ref1)

(declare-const current_msg_offset5 (_ BitVec 64))

(declare-const ctx__split_fields29 us_split_fields__ref2)

(declare-const msg_byte_count6 t__ref1)

(declare-const block_count3 t__ref1)

(declare-const current_msg_offset6 t__ref1)

(declare-const bytes_hashed3 t__ref1)

(declare-const ctx__split_fields30 us_split_fields4)

(declare-const msg_byte_count7 (_ BitVec 64))

(declare-const block_count4 (_ BitVec 64))

(declare-const current_msg_offset7 (_ BitVec 64))

(declare-const bytes_hashed4 (_ BitVec 64))

(declare-const ctx__split_fields31 us_split_fields__ref2)

(declare-const msg_byte_count8 t__ref1)

(declare-const n5 t__ref1)

(declare-const block_count5 t__ref1)

(declare-const current_msg_offset8 t__ref1)

(declare-const bytes_hashed5 t__ref1)

(declare-const tmp_b5 map__ref)

(declare-const src19 t__ref1)

(declare-const dst19 t__ref1)

(declare-const final_dst9 t__ref1)

(declare-const final_src9 t__ref1)

(declare-const ctx__split_fields32 us_split_fields4)

(declare-const msg_byte_count9 (_ BitVec 64))

(declare-const n6 (_ BitVec 64))

(declare-const block_count6 (_ BitVec 64))

(declare-const current_msg_offset9 (_ BitVec 64))

(declare-const bytes_hashed6 (_ BitVec 64))

(declare-const tmp_b6 (Array (_ BitVec 64) byte))

(declare-const src20 (_ BitVec 64))

(declare-const dst20 (_ BitVec 64))

(declare-const final_dst10 (_ BitVec 64))

(declare-const final_src10 (_ BitVec 64))

(declare-const result19 t__ref1)

(declare-const src21 (_ BitVec 64))

(declare-const result20 t__ref1)

(declare-const dst21 (_ BitVec 64))

(declare-const result21 t__ref1)

(declare-const final_dst11 (_ BitVec 64))

(declare-const result22 t__ref1)

(declare-const final_src11 (_ BitVec 64))

(declare-const result23 us_split_fields__ref2)

(declare-const ctx__split_fields33 us_split_fields4)

(declare-const ctx__split_fields34 us_split_fields4)

(declare-const src22 (_ BitVec 64))

(declare-const dst22 (_ BitVec 64))

(declare-const result24 t__ref1)

(declare-const dst23 (_ BitVec 64))

(declare-const result25 t__ref1)

(declare-const src23 (_ BitVec 64))

(declare-const src24 t__ref1)

(declare-const dst24 t__ref1)

(declare-const src25 (_ BitVec 64))

(declare-const dst25 (_ BitVec 64))

(declare-const ctx__split_fields35 us_split_fields__ref2)

(declare-const src26 t__ref1)

(declare-const dst26 t__ref1)

(declare-const ctx__split_fields36 us_split_fields4)

(declare-const src27 (_ BitVec 64))

(declare-const dst27 (_ BitVec 64))

(declare-const ctx__split_fields37 us_split_fields__ref2)

(declare-const src28 t__ref1)

(declare-const dst28 t__ref1)

(declare-const ctx__split_fields38 us_split_fields4)

(declare-const src29 (_ BitVec 64))

(declare-const dst29 (_ BitVec 64))

(declare-const ctx__split_fields39 us_split_fields__ref2)

(declare-const src30 t__ref1)

(declare-const dst30 t__ref1)

(declare-const ctx__split_fields40 us_split_fields4)

(declare-const src31 (_ BitVec 64))

(declare-const dst31 (_ BitVec 64))

(declare-const result26 us_split_fields__ref2)

(declare-const ctx__split_fields41 us_split_fields4)

(declare-const ctx__split_fields42 us_split_fields__ref2)

(declare-const src32 t__ref1)

(declare-const dst32 t__ref1)

(declare-const final_dst12 t__ref1)

(declare-const final_src12 t__ref1)

(declare-const ctx__split_fields43 us_split_fields4)

(declare-const src33 (_ BitVec 64))

(declare-const dst33 (_ BitVec 64))

(declare-const final_dst13 (_ BitVec 64))

(declare-const final_src13 (_ BitVec 64))

(declare-const ctx__split_fields44 us_split_fields__ref2)

(declare-const msg_byte_count10 t__ref1)

(declare-const n7 t__ref1)

(declare-const block_count7 t__ref1)

(declare-const current_msg_offset10 t__ref1)

(declare-const bytes_hashed7 t__ref1)

(declare-const tmp_b7 map__ref)

(declare-const src34 t__ref1)

(declare-const dst34 t__ref1)

(declare-const final_dst14 t__ref1)

(declare-const final_src14 t__ref1)

(declare-const src35 t__ref1)

(declare-const dst35 t__ref1)

(declare-const final_dst15 t__ref1)

(declare-const final_src15 t__ref1)

(declare-const ctx__split_fields45 us_split_fields4)

(declare-const msg_byte_count11 (_ BitVec 64))

(declare-const n8 (_ BitVec 64))

(declare-const block_count8 (_ BitVec 64))

(declare-const current_msg_offset11 (_ BitVec 64))

(declare-const bytes_hashed8 (_ BitVec 64))

(declare-const tmp_b8 (Array (_ BitVec 64) byte))

(declare-const src36 (_ BitVec 64))

(declare-const dst36 (_ BitVec 64))

(declare-const final_dst16 (_ BitVec 64))

(declare-const final_src16 (_ BitVec 64))

(declare-const src37 (_ BitVec 64))

(declare-const dst37 (_ BitVec 64))

(declare-const final_dst17 (_ BitVec 64))

(declare-const final_src17 (_ BitVec 64))

(define-fun final_src18 () t__ref1 (mk_t__ref1 final_src1))

(define-fun final_dst18 () t__ref1 (mk_t__ref1 final_dst1))

(define-fun dst38 () t__ref1 (mk_t__ref1 dst1))

(define-fun src38 () t__ref1 (mk_t__ref1 src1))

(define-fun final_src19 () t__ref1 (mk_t__ref1 final_src))

(define-fun final_dst19 () t__ref1 (mk_t__ref1 final_dst))

(define-fun dst39 () t__ref1 (mk_t__ref1 dst))

(define-fun src39 () t__ref1 (mk_t__ref1 src))

(define-fun tmp_b9 () map__ref (mk_map__ref tmp_b))

(define-fun bytes_hashed9 () t__ref1 (mk_t__ref1 bytes_hashed))

(define-fun current_msg_offset12 () t__ref1 (mk_t__ref1 current_msg_offset))

(define-fun block_count9 () t__ref1 (mk_t__ref1 block_count))

(define-fun n9 () t__ref1 (mk_t__ref1 n))

(define-fun msg_byte_count12 () t__ref1 (mk_t__ref1 msg_byte_count))

(define-fun ctx__split_fields46 () us_split_fields__ref2 (mk___split_fields__ref2
                                                         (mk___split_fields2
                                                         (mk___rep1
                                                         (mk___split_fields1
                                                         (mk___rep
                                                         (mk___split_fields
                                                         ctx__split_fields
                                                         ctx__split_fields1
                                                         ctx__split_fields2
                                                         ctx__split_fields3
                                                         ctx__split_fields4
                                                         ctx__split_fields5
                                                         ctx__split_fields6
                                                         ctx__split_fields7))
                                                         ctx__split_fields8
                                                         ctx__split_fields9))
                                                         ctx__split_fields10
                                                         ctx__split_fields11)))

;; H
  (assert
  (bvult (to_rep2 (last (mk ((_ int2bv 64) 0) ((_ int2bv 64) 63)))) ((_ int2bv 64) 18446744073709551615)))

;; H
  (assert
  (bvult (to_rep2 (last (mk ((_ int2bv 64) 0) ((_ int2bv 64) 63)))) ((_ int2bv 64) 18446744073709551615)))

;; H
  (assert (dynamic_invariant1 msg true false true))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and (in_range1
  (hash_bit_len_of
  (mk___rep2
  (mk___split_fields2
  (mk___rep1
  (mk___split_fields1
  (mk___rep
  (mk___split_fields ctx__split_fields ctx__split_fields1 ctx__split_fields2
  ctx__split_fields3 ctx__split_fields4 ctx__split_fields5 ctx__split_fields6
  ctx__split_fields7)) ctx__split_fields8 ctx__split_fields9))
  ctx__split_fields10 ctx__split_fields11)))) (in_range2
  (byte_count_of
  (mk___rep2
  (mk___split_fields2
  (mk___rep1
  (mk___split_fields1
  (mk___rep
  (mk___split_fields ctx__split_fields ctx__split_fields1 ctx__split_fields2
  ctx__split_fields3 ctx__split_fields4 ctx__split_fields5 ctx__split_fields6
  ctx__split_fields7)) ctx__split_fields8 ctx__split_fields9))
  ctx__split_fields10 ctx__split_fields11)))))
  (= (to_rep2 (first (rt msg))) ((_ int2bv 64) 0)))
  (bvult (to_rep2 (last (rt msg))) ((_ int2bv 64) 18446744073709551615)))
  (= (add_in_range (to_rep2 (last (rt msg))) ((_ int2bv 64) 64)) true))
  (bvult (bvadd (to_rep2 (last (rt msg))) ((_ int2bv 64) 64)) ((_ int2bv 64) 18446744073709551615))))

;; H
  (assert true)

;; H
  (assert (=> (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 63)) (in_range3 n)))

;; H
  (assert
  (=> (bvule ((_ int2bv 64) 1) ((_ int2bv 64) 288230376151711743)) (in_range4
  block_count)))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (= result msg_byte_count12))

;; H
  (assert
  (= msg_byte_count1 (bvadd (to_rep2 (last (rt msg))) ((_ int2bv 64) 1))))

;; H
  (assert (= result1 current_msg_offset12))

;; H
  (assert (= current_msg_offset1 ((_ int2bv 64) 0)))

;; H
  (assert
  (bvugt (bvadd msg_byte_count1 (to_rep1 ctx__split_fields9)) ((_ int2bv 64) 64)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (and (= o (bvsub ((_ int2bv 64) 64) (to_rep1 ctx__split_fields9)))
  (in_range3 (bvsub ((_ int2bv 64) 64) (to_rep1 ctx__split_fields9))))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)) (= result2 n9)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)) (= n2 o)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= current_msg_offset1 c237b)))

;; H
  (assert true)

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)) (= n2 c238b)))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 63)) (in_range3 dst))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 63)) (in_range3 final_dst))))

;; H
  (assert true)

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= result3 src39))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= src4 c237b))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (and (= o1 (to_rep1 ctx__split_fields9)) (in_range3
  (to_rep1 ctx__split_fields9))))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= result4 dst39))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= dst4 o1))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (and (= o2 (bvadd dst4 (bvsub c238b ((_ int2bv 64) 1)))) (in_range3
  (bvadd dst4 (bvsub c238b ((_ int2bv 64) 1))))))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= result5 final_dst19))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= final_dst4 o2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= result6 final_src19))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (= final_src4 (bvadd src4 (bvsub c238b ((_ int2bv 64) 1)))))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (and
  (and (= temp___1380 dst4)
  (and
  (and
  (and
  (and (= ctx__split_fields temp___1378)
  (and (= ctx__split_fields1 temp___13781)
  (and (= ctx__split_fields2 temp___13782)
  (and (= ctx__split_fields3 temp___13783)
  (and (= ctx__split_fields4 temp___13784)
  (and (= ctx__split_fields5 temp___13785)
  (and (= ctx__split_fields6 temp___13786)
  (= ctx__split_fields7 temp___13787))))))))
  (and (= ctx__split_fields8 temp___13788)
  (= ctx__split_fields9 temp___13789)))
  (and (= ctx__split_fields10 temp___137810)
  (= ctx__split_fields11 temp___137811)))
  (and (= temp___1377 src4)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (bvule (to_rep2 (first (rt msg))) src4)
  (bvule src4 (to_rep2 (last (rt msg))))) (= o3 src4))
  (= o4 (select (elts msg) o3))) (= o5 (to_rep o4))) (= (to_rep o6) o5))
  (= temp___1374 (store ctx__split_fields11 dst4 o6)))
  (and (dynamic_predicate1 temp___1374) (= o7 temp___1374)))
  (= o8 (mk___split_fields2
        (mk___rep1
        (mk___split_fields1
        (mk___rep
        (mk___split_fields ctx__split_fields ctx__split_fields1
        ctx__split_fields2 ctx__split_fields3 ctx__split_fields4
        ctx__split_fields5 ctx__split_fields6 ctx__split_fields7))
        ctx__split_fields8 ctx__split_fields9)) ctx__split_fields10 o7)))
  (= temp___1376 (mk___rep2 o8)))
  (and (= result7 ctx__split_fields46)
  (= ctx__split_fields13 (us_split_fields5 temp___1376))))
  (and
  (and
  (and
  (bvult (to_rep2 (last (mk ((_ int2bv 64) 0) ((_ int2bv 64) 63)))) ((_ int2bv 64) 18446744073709551615))
  (and
  (= (rec__skein__skein_512_context__h ctx__split_fields14) (mk___rep1
                                                            (mk___split_fields1
                                                            (mk___rep
                                                            (mk___split_fields
                                                            temp___1378
                                                            temp___13781
                                                            temp___13782
                                                            temp___13783
                                                            temp___13784
                                                            temp___13785
                                                            temp___13786
                                                            temp___13787))
                                                            temp___13788
                                                            temp___13789)))
  (= (rec__skein__skein_512_context__x ctx__split_fields14) temp___137810)))
  (=> (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 63)) (in_range3 dst5)))
  (and
  (and (and (= dst7 (mk_t__ref1 dst5)) (= src7 (mk_t__ref1 src5)))
  (and (= dst8 dst5) (= src8 src5)))
  (=> (not (bvuge dst5 final_dst4)) (bvuge src5 final_src4))))))))
  (and
  (and (= dst11 dst7)
  (and (= src11 src7)
  (= ctx__split_fields17 (mk___split_fields__ref2 ctx__split_fields14))))
  (and (= dst12 dst8)
  (and (= src12 src8) (= ctx__split_fields18 ctx__split_fields14))))))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= dst13 dst11))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= src13 src11))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (= ctx__split_fields19 ctx__split_fields17))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= dst14 dst12))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= src14 src12))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (= ctx__split_fields20 ctx__split_fields18))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (= (to_rep1 o14) (bvadd (to_rep1
                          (rec__skein__context_header__byte_count
                          (us_split_fields3
                          (rec__skein__skein_512_context__h
                          (us_split_fields__content2 ctx__split_fields19)))))
  c238b)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (= o15 (mk___split_fields1
         (rec__skein__context_header__tweak_words
         (us_split_fields3
         (rec__skein__skein_512_context__h
         (us_split_fields__content2 ctx__split_fields19))))
         (rec__skein__context_header__hash_bit_len
         (us_split_fields3
         (rec__skein__skein_512_context__h
         (us_split_fields__content2 ctx__split_fields19)))) o14)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= o16 (mk___rep1 o15)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (= o17 (mk___split_fields2 o16
         (rec__skein__skein_512_context__x
         (us_split_fields__content2 ctx__split_fields19))
         (rec__skein__skein_512_context__b
         (us_split_fields__content2 ctx__split_fields19)))))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= temp___1383 (mk___rep2 o17)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= result10 ctx__split_fields19))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (= ctx__split_fields21 (us_split_fields5 temp___1383)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= final_src5 (mk_t__ref1 final_src4)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= final_dst5 (mk_t__ref1 final_dst4)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= dst15 dst13))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= src15 src13))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (= ctx__split_fields22 (mk___split_fields__ref2 ctx__split_fields21)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= final_src6 final_src4))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= final_dst6 final_dst4))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= dst16 dst14))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0)) (= src16 src14))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (bvugt c238b ((_ int2bv 64) 0))
  (= ctx__split_fields23 ctx__split_fields21))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (not (bvugt c238b ((_ int2bv 64) 0))) (= final_src5 final_src19))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (not (bvugt c238b ((_ int2bv 64) 0))) (= final_dst5 final_dst19))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (not (bvugt c238b ((_ int2bv 64) 0))) (= dst15 dst39))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (not (bvugt c238b ((_ int2bv 64) 0))) (= src15 src39))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (not (bvugt c238b ((_ int2bv 64) 0)))
  (= ctx__split_fields22 ctx__split_fields46))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (not (bvugt c238b ((_ int2bv 64) 0))) (= final_src6 final_src2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (not (bvugt c238b ((_ int2bv 64) 0))) (= final_dst6 final_dst2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (not (bvugt c238b ((_ int2bv 64) 0))) (= dst16 dst2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (not (bvugt c238b ((_ int2bv 64) 0))) (= src16 src2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (=> (not (bvugt c238b ((_ int2bv 64) 0)))
  (= ctx__split_fields23 ctx__split_fields12))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= result11 (mk_t__ref1 msg_byte_count1))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= msg_byte_count2 (bvsub msg_byte_count1 n2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= result12 (mk_t__ref1 current_msg_offset1))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= current_msg_offset2 (bvadd current_msg_offset1 n2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= result13 tmp_b9)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= tmp_b2 (rec__skein__skein_512_context__b
            (us_split_fields__content2 ctx__split_fields22)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (and
  (and
  (and
  (and (in_range1
  (to_rep3
  (rec__skein__context_header__hash_bit_len
  (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields24)))))
  (= (to_rep3
     (rec__skein__context_header__hash_bit_len
     (us_split_fields3
     (rec__skein__skein_512_context__h ctx__split_fields24)))) (to_rep3
                                                               (rec__skein__context_header__hash_bit_len
                                                               (us_split_fields3
                                                               (rec__skein__skein_512_context__h
                                                               (us_split_fields__content2
                                                               ctx__split_fields22)))))))
  (in_range2
  (to_rep1
  (rec__skein__context_header__byte_count
  (us_split_fields3 (rec__skein__skein_512_context__h ctx__split_fields24))))))
  (= (to_rep1
     (rec__skein__context_header__byte_count
     (us_split_fields3
     (rec__skein__skein_512_context__h ctx__split_fields24)))) (to_rep1
                                                               (rec__skein__context_header__byte_count
                                                               (us_split_fields3
                                                               (rec__skein__skein_512_context__h
                                                               (us_split_fields__content2
                                                               ctx__split_fields22)))))))
  (bvult (to_rep2 (last (mk ((_ int2bv 64) 0) ((_ int2bv 64) 63)))) ((_ int2bv 64) 18446744073709551615)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= (to_rep1 o18) ((_ int2bv 64) 0))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= o19 (mk___split_fields1
         (rec__skein__context_header__tweak_words
         (us_split_fields3
         (rec__skein__skein_512_context__h ctx__split_fields24)))
         (rec__skein__context_header__hash_bit_len
         (us_split_fields3
         (rec__skein__skein_512_context__h ctx__split_fields24))) o18))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= o20 (mk___rep1 o19))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= o21 (mk___split_fields2 o20
         (rec__skein__skein_512_context__x ctx__split_fields24)
         (rec__skein__skein_512_context__b ctx__split_fields24)))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= temp___1386 (mk___rep2 o21))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= result14 (mk___split_fields__ref2 ctx__split_fields24))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= ctx__split_fields25 (us_split_fields5 temp___1386))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= final_src7 final_src5)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= final_dst7 final_dst5)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)) (= dst17 dst15)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)) (= src17 src15)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= tmp_b3 (mk_map__ref tmp_b2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= current_msg_offset3 (mk_t__ref1 current_msg_offset2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= n3 (mk_t__ref1 n2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= msg_byte_count3 (mk_t__ref1 msg_byte_count2))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= ctx__split_fields26 (mk___split_fields__ref2 ctx__split_fields25))))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= final_src8 final_src6)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= final_dst8 final_dst6)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)) (= dst18 dst16)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)) (= src18 src16)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= tmp_b4 tmp_b2)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= current_msg_offset4 current_msg_offset2)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)) (= n4 n2)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= msg_byte_count4 msg_byte_count2)))

;; H
  (assert
  (=> (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))
  (= ctx__split_fields27 ctx__split_fields25)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= final_src7 final_src19)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= final_dst7 final_dst19)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= dst17 dst39)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= src17 src39)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= tmp_b3 tmp_b9)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= current_msg_offset3 (mk_t__ref1 current_msg_offset1))))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))) (= n3 n9)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= msg_byte_count3 (mk_t__ref1 msg_byte_count1))))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= ctx__split_fields26 ctx__split_fields46)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= final_src8 final_src2)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= final_dst8 final_dst2)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= dst18 dst2)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= src18 src2)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= tmp_b4 tmp_b1)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= current_msg_offset4 current_msg_offset1)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0))) (= n4 n1)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= msg_byte_count4 msg_byte_count1)))

;; H
  (assert
  (=> (not (bvugt (to_rep1 ctx__split_fields9) ((_ int2bv 64) 0)))
  (= ctx__split_fields27 ctx__split_fields12)))

;; H
  (assert (bvugt (t__content1 msg_byte_count3) ((_ int2bv 64) 64)))

(assert
;; WP_parameter_def
 ;; File "skein.ads", line 361, characters 0-0
  (not (not (= ((_ int2bv 64) 64) #x0000000000000000))))
(check-sat)
(exit)
