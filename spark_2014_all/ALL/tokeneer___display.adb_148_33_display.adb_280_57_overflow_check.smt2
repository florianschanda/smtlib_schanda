;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-const nouser (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun temp___String_Literal_135 (tuple0) (Array Int character))

;; temp___String_Literal_135__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 1)) 78)
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 3)) 85))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 24)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 28)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 32)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 33)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 35)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 36)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 37)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 38)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 39)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 40)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 41)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 42)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 43)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 44)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 45)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 46)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 47)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 48)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 49)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 50)) 32)) :pattern (
  (temp___String_Literal_135 us_void_param)) )))

(declare-sort unsigned32t 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (unsigned32t unsigned32t) Bool)

(declare-const dummy4 unsigned32t)

(declare-datatypes ()
((unsigned32t__ref (mk_unsigned32t__ref (unsigned32t__content unsigned32t)))))
(define-fun unsigned32t__ref___projection ((a unsigned32t__ref)) unsigned32t
  (unsigned32t__content a))

(declare-fun to_rep2 (unsigned32t) Int)

(declare-fun of_rep2 (Int) unsigned32t)

;; inversion_axiom
  (assert
  (forall ((x unsigned32t))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x unsigned32t)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun valid_numberlogentries (us_private) Bool)

(declare-fun valid_numberlogentries__function_guard (Bool us_private) Bool)

(declare-sort msgt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (msgt msgt) Bool)

(declare-const dummy5 msgt)

(declare-datatypes () ((msgt__ref (mk_msgt__ref (msgt__content msgt)))))
(define-fun msgt__ref___projection ((a msgt__ref)) msgt (msgt__content a))

(define-fun dynamic_invariant ((temp___expr_857 Int)
  (temp___is_init_854 Bool) (temp___skip_constant_855 Bool)
  (temp___do_toplevel_856 Bool)) Bool (=>
                                      (or (= temp___is_init_854 true)
                                      (<= 0 7)) (in_range5 temp___expr_857)))

(declare-sort msgtextcount 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 23)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (msgtextcount msgtextcount) Bool)

(declare-const dummy6 msgtextcount)

(declare-datatypes ()
((msgtextcount__ref
 (mk_msgtextcount__ref (msgtextcount__content msgtextcount)))))
(define-fun msgtextcount__ref___projection ((a msgtextcount__ref)) msgtextcount
  (msgtextcount__content a))

(declare-fun to_rep3 (msgtextcount) Int)

(declare-fun of_rep3 (Int) msgtextcount)

;; inversion_axiom
  (assert
  (forall ((x msgtextcount))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x msgtextcount)) (! (in_range6
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-const dummy7 (Array Int character))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq7 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__display__msglinet__text (Array Int character))(rec__display__msglinet__len msgtextcount)))))
(define-fun us_split_fields_Text__projection ((a us_split_fields)) (Array Int character)
  (rec__display__msglinet__text a))

(define-fun us_split_fields_Len__projection ((a us_split_fields)) msgtextcount
  (rec__display__msglinet__len a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq
                           (rec__display__msglinet__text
                           (us_split_fields1 a)) 1 23
                           (rec__display__msglinet__text
                           (us_split_fields1 b)) 1 23) true)
                        (= (to_rep3
                           (rec__display__msglinet__len (us_split_fields1 a)))
                        (to_rep3
                        (rec__display__msglinet__len (us_split_fields1 b)))))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const display__msglinet__text__first__bit Int)

(declare-const display__msglinet__text__last__bit Int)

(declare-const display__msglinet__text__position Int)

;; display__msglinet__text__first__bit_axiom
  (assert (<= 0 display__msglinet__text__first__bit))

;; display__msglinet__text__last__bit_axiom
  (assert
  (< display__msglinet__text__first__bit display__msglinet__text__last__bit))

;; display__msglinet__text__position_axiom
  (assert (<= 0 display__msglinet__text__position))

(declare-const display__msglinet__len__first__bit Int)

(declare-const display__msglinet__len__last__bit Int)

(declare-const display__msglinet__len__position Int)

;; display__msglinet__len__first__bit_axiom
  (assert (<= 0 display__msglinet__len__first__bit))

;; display__msglinet__len__last__bit_axiom
  (assert
  (< display__msglinet__len__first__bit display__msglinet__len__last__bit))

;; display__msglinet__len__position_axiom
  (assert (<= 0 display__msglinet__len__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ()
((msglinet__ref (mk_msglinet__ref (msglinet__content us_rep)))))
(define-fun msglinet__ref___projection ((a msglinet__ref)) us_rep (msglinet__content
                                                                  a))

(declare-const blankline us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__display__msgstrt__top us_rep)(rec__display__msgstrt__bottom us_rep)))))
(define-fun us_split_fields_Top__projection ((a us_split_fields2)) us_rep
  (rec__display__msgstrt__top a))

(define-fun us_split_fields_Bottom__projection ((a us_split_fields2)) us_rep
  (rec__display__msgstrt__bottom a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq2
                            (rec__display__msgstrt__top (us_split_fields3 a))
                            (rec__display__msgstrt__top (us_split_fields3 b))) true)
                         (= (bool_eq2
                            (rec__display__msgstrt__bottom
                            (us_split_fields3 a))
                            (rec__display__msgstrt__bottom
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const display__msgstrt__top__first__bit Int)

(declare-const display__msgstrt__top__last__bit Int)

(declare-const display__msgstrt__top__position Int)

;; display__msgstrt__top__first__bit_axiom
  (assert (<= 0 display__msgstrt__top__first__bit))

;; display__msgstrt__top__last__bit_axiom
  (assert
  (< display__msgstrt__top__first__bit display__msgstrt__top__last__bit))

;; display__msgstrt__top__position_axiom
  (assert (<= 0 display__msgstrt__top__position))

(declare-const display__msgstrt__bottom__first__bit Int)

(declare-const display__msgstrt__bottom__last__bit Int)

(declare-const display__msgstrt__bottom__position Int)

;; display__msgstrt__bottom__first__bit_axiom
  (assert (<= 0 display__msgstrt__bottom__first__bit))

;; display__msgstrt__bottom__last__bit_axiom
  (assert
  (< display__msgstrt__bottom__first__bit display__msgstrt__bottom__last__bit))

;; display__msgstrt__bottom__position_axiom
  (assert (<= 0 display__msgstrt__bottom__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ()
((msgstrt__ref (mk_msgstrt__ref (msgstrt__content us_rep1)))))
(define-fun msgstrt__ref___projection ((a msgstrt__ref)) us_rep1 (msgstrt__content
                                                                 a))

(declare-sort scrolltextcount 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (scrolltextcount scrolltextcount) Bool)

(declare-const dummy10 scrolltextcount)

(declare-datatypes ()
((scrolltextcount__ref
 (mk_scrolltextcount__ref (scrolltextcount__content scrolltextcount)))))
(define-fun scrolltextcount__ref___projection ((a scrolltextcount__ref)) scrolltextcount
  (scrolltextcount__content a))

(declare-fun to_rep4 (scrolltextcount) Int)

(declare-fun of_rep4 (Int) scrolltextcount)

;; inversion_axiom
  (assert
  (forall ((x scrolltextcount))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x scrolltextcount)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort scrolltexti 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (scrolltexti scrolltexti) Bool)

(declare-const dummy11 scrolltexti)

(declare-datatypes ()
((scrolltexti__ref (mk_scrolltexti__ref (scrolltexti__content scrolltexti)))))
(define-fun scrolltexti__ref___projection ((a scrolltexti__ref)) scrolltexti
  (scrolltexti__content a))

(declare-const dummy12 (Array Int character))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int character)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int character)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq12 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__display__scrollstrt__text (Array Int character))(rec__display__scrollstrt__len scrolltextcount)))))
(define-fun us_split_fields_Text__2__projection ((a us_split_fields4)) (Array Int character)
  (rec__display__scrollstrt__text a))

(define-fun us_split_fields_Len__2__projection ((a us_split_fields4)) scrolltextcount
  (rec__display__scrollstrt__len a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___9__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___10__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                   a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (bool_eq
                            (rec__display__scrollstrt__text
                            (us_split_fields5 a)) 1 50
                            (rec__display__scrollstrt__text
                            (us_split_fields5 b)) 1 50) true)
                         (= (to_rep4
                            (rec__display__scrollstrt__len
                            (us_split_fields5 a))) (to_rep4
                                                   (rec__display__scrollstrt__len
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-const display__scrollstrt__text__first__bit Int)

(declare-const display__scrollstrt__text__last__bit Int)

(declare-const display__scrollstrt__text__position Int)

;; display__scrollstrt__text__first__bit_axiom
  (assert (<= 0 display__scrollstrt__text__first__bit))

;; display__scrollstrt__text__last__bit_axiom
  (assert
  (< display__scrollstrt__text__first__bit display__scrollstrt__text__last__bit))

;; display__scrollstrt__text__position_axiom
  (assert (<= 0 display__scrollstrt__text__position))

(declare-const display__scrollstrt__len__first__bit Int)

(declare-const display__scrollstrt__len__last__bit Int)

(declare-const display__scrollstrt__len__position Int)

;; display__scrollstrt__len__first__bit_axiom
  (assert (<= 0 display__scrollstrt__len__first__bit))

;; display__scrollstrt__len__last__bit_axiom
  (assert
  (< display__scrollstrt__len__first__bit display__scrollstrt__len__last__bit))

;; display__scrollstrt__len__position_axiom
  (assert (<= 0 display__scrollstrt__len__position))

(declare-fun user_eq13 (us_rep2 us_rep2) Bool)

(declare-const dummy13 us_rep2)

(declare-datatypes ()
((scrollstrt__ref (mk_scrollstrt__ref (scrollstrt__content us_rep2)))))
(define-fun scrollstrt__ref___projection ((a scrollstrt__ref)) us_rep2
  (scrollstrt__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__display__sizest__top unsigned32t)(rec__display__sizest__bottom unsigned32t)))))
(define-fun us_split_fields_Top__2__projection ((a us_split_fields6)) unsigned32t
  (rec__display__sizest__top a))

(define-fun us_split_fields_Bottom__2__projection ((a us_split_fields6)) unsigned32t
  (rec__display__sizest__bottom a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___10__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___11__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                   a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep2
                            (rec__display__sizest__top (us_split_fields7 a)))
                         (to_rep2
                         (rec__display__sizest__top (us_split_fields7 b))))
                         (= (to_rep2
                            (rec__display__sizest__bottom
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__display__sizest__bottom
                                                   (us_split_fields7 b)))))
                    true false))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep3) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment6 a))))

(declare-const display__sizest__top__first__bit Int)

(declare-const display__sizest__top__last__bit Int)

(declare-const display__sizest__top__position Int)

;; display__sizest__top__first__bit_axiom
  (assert (<= 0 display__sizest__top__first__bit))

;; display__sizest__top__last__bit_axiom
  (assert
  (< display__sizest__top__first__bit display__sizest__top__last__bit))

;; display__sizest__top__position_axiom
  (assert (<= 0 display__sizest__top__position))

(declare-const display__sizest__bottom__first__bit Int)

(declare-const display__sizest__bottom__last__bit Int)

(declare-const display__sizest__bottom__position Int)

;; display__sizest__bottom__first__bit_axiom
  (assert (<= 0 display__sizest__bottom__first__bit))

;; display__sizest__bottom__last__bit_axiom
  (assert
  (< display__sizest__bottom__first__bit display__sizest__bottom__last__bit))

;; display__sizest__bottom__position_axiom
  (assert (<= 0 display__sizest__bottom__position))

(declare-fun user_eq14 (us_rep3 us_rep3) Bool)

(declare-const dummy14 us_rep3)

(declare-datatypes ()
((sizest__ref (mk_sizest__ref (sizest__content us_rep3)))))
(define-fun sizest__ref___projection ((a sizest__ref)) us_rep3 (sizest__content
                                                               a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_150 Int))
                           (=>
                           (and (<= a__first temp___idx_150)
                           (<= temp___idx_150 a__last))
                           (= (bool_eq3 (select a temp___idx_150)
                              (select b (+ (- b__first a__first) temp___idx_150))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_150 Int))
  (=> (and (<= a__first temp___idx_150) (<= temp___idx_150 a__last))
  (= (bool_eq3 (select a temp___idx_150)
     (select b (+ (- b__first a__first) temp___idx_150))) true))))))))

(declare-const msgtostrings (Array Int us_rep1))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun display__msgtostrings__aggregate_def (us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1) (Array Int us_rep1))

;; def_axiom
  (assert
  (forall ((temp___152 us_rep1) (temp___153 us_rep1) (temp___154 us_rep1)
  (temp___155 us_rep1) (temp___156 us_rep1) (temp___157 us_rep1)
  (temp___158 us_rep1) (temp___159 us_rep1))
  (let ((temp___151 (display__msgtostrings__aggregate_def temp___152
                    temp___153 temp___154 temp___155 temp___156 temp___157
                    temp___158 temp___159)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___151 0) temp___152)
  (= (select temp___151 1) temp___153)) (= (select temp___151 2) temp___154))
  (= (select temp___151 3) temp___155)) (= (select temp___151 4) temp___156))
  (= (select temp___151 5) temp___157)) (= (select temp___151 6) temp___158))
  (= (select temp___151 7) temp___159)))))

(declare-fun temp___String_Literal_161 (tuple0) (Array Int character))

;; temp___String_Literal_161__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 1)) 83)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 2)) 89))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 3)) 83))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 4)) 84))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 5)) 69))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 6)) 77))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 8)) 78))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 9)) 79))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 10)) 84))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 12)) 79))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 13)) 80))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 14)) 69))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 15)) 82))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 16)) 65))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 17)) 84))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 18)) 73))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 19)) 79))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 20)) 78))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 21)) 65))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 22)) 76))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_161 us_void_param)) )))

(declare-fun temp___String_Literal_162 (tuple0) (Array Int character))

;; temp___String_Literal_162__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 1)) 87)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 2)) 69))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 3)) 76))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 4)) 67))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 5)) 79))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 6)) 77))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 7)) 69))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 9)) 84))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 10)) 79))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 12)) 84))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 13)) 73))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 14)) 83))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_162 us_void_param)) )))

(declare-fun temp___String_Literal_163 (tuple0) (Array Int character))

;; temp___String_Literal_163__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 1)) 69)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 2)) 78))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 3)) 84))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 4)) 69))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 5)) 82))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 7)) 84))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 8)) 79))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 9)) 75))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 10)) 69))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 11)) 78))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_163 us_void_param)) )))

(declare-fun temp___String_Literal_164 (tuple0) (Array Int character))

;; temp___String_Literal_164__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 2)) 85))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 3)) 84))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 4)) 72))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 5)) 69))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 6)) 78))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 7)) 84))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 8)) 73))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 9)) 67))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 10)) 65))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 11)) 84))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 12)) 73))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 13)) 78))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 14)) 71))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 16)) 85))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 17)) 83))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 18)) 69))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 19)) 82))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_164 us_void_param)) )))

(declare-fun temp___String_Literal_165 (tuple0) (Array Int character))

;; temp___String_Literal_165__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 1)) 73)
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 2)) 78))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 3)) 83))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 4)) 69))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 5)) 82))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 6)) 84))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 8)) 70))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 9)) 73))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 10)) 78))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 11)) 71))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 12)) 69))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 13)) 82))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_165 us_void_param)) )))

(declare-fun temp___String_Literal_166 (tuple0) (Array Int character))

;; temp___String_Literal_166__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 1)) 82)
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 2)) 69))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 3)) 77))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 4)) 79))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 5)) 86))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 6)) 69))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 8)) 84))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 9)) 79))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 10)) 75))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 11)) 69))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 12)) 78))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 14)) 65))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 15)) 78))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 16)) 68))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 18)) 69))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 19)) 78))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 20)) 84))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 21)) 69))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 22)) 82))
     (= (to_rep (select (temp___String_Literal_166 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_166 us_void_param)) )))

(declare-fun temp___String_Literal_167 (tuple0) (Array Int character))

;; temp___String_Literal_167__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 2)) 85))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 3)) 84))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 4)) 72))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 5)) 69))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 6)) 78))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 7)) 84))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 8)) 73))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 9)) 67))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 10)) 65))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 11)) 84))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 12)) 73))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 13)) 78))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 14)) 71))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 16)) 85))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 17)) 83))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 18)) 69))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 19)) 82))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_167 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_167 us_void_param)) )))

(declare-fun temp___String_Literal_168 (tuple0) (Array Int character))

;; temp___String_Literal_168__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 2)) 76))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 3)) 69))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 4)) 65))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 5)) 83))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 6)) 69))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 8)) 87))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 9)) 65))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 10)) 73))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 11)) 84))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_168 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_168 us_void_param)) )))

(declare-fun temp___String_Literal_169 (tuple0) (Array Int character))

;; temp___String_Literal_169__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 1)) 69)
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 2)) 78))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 3)) 84))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 4)) 82))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 5)) 89))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 7)) 68))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 8)) 69))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 9)) 78))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 10)) 73))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 11)) 69))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 12)) 68))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_169 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_169 us_void_param)) )))

(declare-fun temp___String_Literal_170 (tuple0) (Array Int character))

;; temp___String_Literal_170__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 1)) 82)
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 2)) 69))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 3)) 77))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 4)) 79))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 5)) 86))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 6)) 69))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 8)) 84))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 9)) 79))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 10)) 75))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 11)) 69))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 12)) 78))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_170 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_170 us_void_param)) )))

(declare-fun temp___String_Literal_171 (tuple0) (Array Int character))

;; temp___String_Literal_171__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 2)) 79))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 3)) 75))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 4)) 69))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 5)) 78))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 7)) 85))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 8)) 80))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 9)) 68))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 10)) 65))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 11)) 84))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 12)) 69))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 14)) 70))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 15)) 65))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 16)) 73))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 17)) 76))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 18)) 69))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 19)) 68))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_171 us_void_param)) )))

(declare-fun temp___String_Literal_172 (tuple0) (Array Int character))

;; temp___String_Literal_172__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 1)) 69)
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 2)) 78))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 3)) 84))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 4)) 69))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 5)) 82))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 7)) 69))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 8)) 78))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 9)) 67))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 10)) 76))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 11)) 65))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 12)) 86))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 13)) 69))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_172 us_void_param)) )))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const c35b us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq15 (integer integer) Bool)

(declare-const dummy15 integer)

(declare-datatypes () ((t41b__ref (mk_t41b__ref (t41b__content integer)))))
(define-fun t41b__ref___projection ((a t41b__ref)) integer (t41b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq16 (integer integer) Bool)

(declare-const dummy16 integer)

(declare-datatypes () ((t42b__ref (mk_t42b__ref (t42b__content integer)))))
(define-fun t42b__ref___projection ((a t42b__ref)) integer (t42b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-fun temp___1068 (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___1070 Int))
  (forall ((temp___1071 Int))
  (= (select (temp___1068 temp___1070) temp___1071) (of_rep temp___1070)))))

(declare-fun temp___String_Literal_1072 (tuple0) (Array Int character))

;; temp___String_Literal_1072__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 3)) 117))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 5)) 100))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 7)) 110))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 8)) 111))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 11)) 117))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 12)) 112))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 13)) 100))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 14)) 97))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 15)) 116))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 18)) 68))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 19)) 105))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 20)) 115))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 21)) 112))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 22)) 108))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 23)) 97))
     (= (to_rep (select (temp___String_Literal_1072 us_void_param) 24)) 121)) :pattern (
  (temp___String_Literal_1072 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; msgtostrings__def_axiom
  (assert
  (= msgtostrings (display__msgtostrings__aggregate_def
                  (mk___rep1
                  (mk___split_fields1
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_161 Tuple0)
                  (of_rep3 22))) blankline))
                  (mk___rep1
                  (mk___split_fields1
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_162 Tuple0)
                  (of_rep3 14)))
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_163 Tuple0)
                  (of_rep3 11)))))
                  (mk___rep1
                  (mk___split_fields1
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_164 Tuple0)
                  (of_rep3 19)))
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_165 Tuple0)
                  (of_rep3 13)))))
                  (mk___rep1
                  (mk___split_fields1 blankline
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_166 Tuple0)
                  (of_rep3 22)))))
                  (mk___rep1
                  (mk___split_fields1
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_167 Tuple0)
                  (of_rep3 19)))
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_168 Tuple0)
                  (of_rep3 11)))))
                  (mk___rep1
                  (mk___split_fields1
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_169 Tuple0)
                  (of_rep3 12)))
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_170 Tuple0)
                  (of_rep3 12)))))
                  (mk___rep1
                  (mk___split_fields1 blankline
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_171 Tuple0)
                  (of_rep3 19)))))
                  (mk___rep1
                  (mk___split_fields1 blankline
                  (mk___rep
                  (mk___split_fields (temp___String_Literal_172 Tuple0)
                  (of_rep3 13))))))))

(define-fun dynamic_invariant5 ((temp___expr_863 Int)
  (temp___is_init_860 Bool) (temp___skip_constant_861 Bool)
  (temp___do_toplevel_862 Bool)) Bool (=>
                                      (or (= temp___is_init_860 true)
                                      (<= 0 23)) (in_range6 temp___expr_863)))

(declare-fun temp___String_Literal_149 (tuple0) (Array Int character))

;; temp___String_Literal_149__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 3)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_149 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_149 us_void_param)) )))

;; blankline__def_axiom
  (assert
  (= blankline (mk___rep
               (mk___split_fields (temp___String_Literal_149 Tuple0)
               (of_rep3 0)))))

(define-fun dynamic_invariant6 ((temp___expr_913 Int)
  (temp___is_init_910 Bool) (temp___skip_constant_911 Bool)
  (temp___do_toplevel_912 Bool)) Bool (=>
                                      (or (= temp___is_init_910 true)
                                      (<= 0 50)) (in_range7 temp___expr_913)))

(define-fun dynamic_invariant7 ((temp___expr_919 Int)
  (temp___is_init_916 Bool) (temp___skip_constant_917 Bool)
  (temp___do_toplevel_918 Bool)) Bool (=>
                                      (or (= temp___is_init_916 true)
                                      (<= 1 50)) (in_range8 temp___expr_919)))

;; valid_numberlogentries__post_axiom
  (assert true)

;; nouser__def_axiom
  (assert (= nouser (temp___String_Literal_135 Tuple0)))

(define-fun dynamic_invariant8 ((temp___expr_236 Int)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)) Bool (=>
                                      (or (= temp___is_init_233 true)
                                      (<= 0 4294967295)) (in_range4
                                      temp___expr_236)))

(declare-const currentdisplay Int)

(declare-const currentlydisplayed Int)

(declare-const sizes__split_fields unsigned32t)

(declare-const sizes__split_fields1 unsigned32t)

(declare-const themsg__split_fields (Array Int character))

(declare-const themsg__split_fields1 msgtextcount)

(declare-const themsg__split_fields2 (Array Int character))

(declare-const themsg__split_fields3 msgtextcount)

(declare-const result____split_fields (Array Int character))

(declare-const result____split_fields1 scrolltextcount)

(declare-const i Int)

(declare-const i1 Int)

(declare-const o msgtextcount)

(declare-const o1 us_split_fields)

(declare-const o2 us_rep)

(declare-const o3 us_split_fields2)

(declare-const o4 msgtextcount)

(declare-const o5 us_split_fields)

(declare-const o6 msgtextcount)

(declare-const o7 us_split_fields)

(declare-const o8 us_rep)

(declare-const o9 us_rep)

(declare-const o10 us_split_fields2)

(declare-const o11 msgtextcount)

(declare-const o12 us_split_fields)

(declare-const o13 msgtextcount)

(declare-const o14 us_split_fields)

(declare-const o15 us_rep)

(declare-const o16 us_rep)

(declare-const o17 us_split_fields2)

(declare-const o18 msgtextcount)

(declare-const o19 us_split_fields)

(declare-const o20 us_rep)

(declare-const o21 us_split_fields2)

(declare-const o22 msgtextcount)

(declare-const o23 us_split_fields)

(declare-const o24 msgtextcount)

(declare-const o25 us_split_fields)

(declare-const o26 us_rep)

(declare-const o27 us_rep)

(declare-const o28 us_split_fields2)

(declare-const o29 msgtextcount)

(declare-const o30 us_split_fields)

(declare-const o31 msgtextcount)

(declare-const o32 us_split_fields)

(declare-const o33 us_rep)

(declare-const o34 us_rep)

(declare-const o35 us_split_fields2)

(declare-const o36 msgtextcount)

(declare-const o37 us_split_fields)

(declare-const o38 us_rep)

(declare-const o39 us_split_fields2)

(declare-const o40 msgtextcount)

(declare-const o41 us_split_fields)

(declare-const o42 us_rep)

(declare-const o43 us_split_fields2)

(declare-const o44 us_rep1)

(declare-const o45 us_rep1)

(declare-const o46 us_rep1)

(declare-const o47 us_rep1)

(declare-const o48 us_rep1)

(declare-const o49 us_rep1)

(declare-const o50 us_rep1)

(declare-const o51 us_rep1)

(declare-const temp___1073 (Array Int us_rep1))

(declare-const o52 scrolltextcount)

(declare-const o53 us_split_fields4)

(declare-const display__updatedevice__B38b__result__assume us_rep2)

(declare-const temp___1034 Int)

(declare-const temp___1032 us_rep2)

(declare-const temp___1035 us_rep1)

(declare-const o54 character)

(declare-const o55 (Array Int character))

(declare-const o56 us_split_fields4)

(declare-const temp___1031 us_rep2)

(declare-const o57 scrolltextcount)

(declare-const o58 us_split_fields4)

(declare-const temp___1039 us_rep2)

(declare-const o59 character)

(declare-const o60 Int)

(declare-const o61 (Array Int character))

(declare-const o62 us_split_fields4)

(declare-const temp___1043 us_rep2)

(declare-const o63 character)

(declare-const o64 Int)

(declare-const o65 (Array Int character))

(declare-const o66 us_split_fields4)

(declare-const temp___1047 us_rep2)

(declare-const o67 character)

(declare-const o68 Int)

(declare-const o69 (Array Int character))

(declare-const o70 us_split_fields4)

(declare-const temp___1051 us_rep2)

(declare-const o71 Int)

(declare-const o72 scrolltextcount)

(declare-const o73 us_split_fields4)

(declare-const temp___1053 us_rep2)

(declare-const o74 character)

(declare-const result int__ref)

(declare-const currentlydisplayed1 Int)

(declare-const result1 us_split_fields__ref1)

(declare-const themsg__split_fields4 us_split_fields2)

(declare-const result2 us_split_fields__ref2)

(declare-const result____split_fields2 us_split_fields4)

(declare-const result3 int__ref)

(declare-const i2 Int)

(declare-const result____split_fields3 us_split_fields4)

(declare-const i3 Int)

(declare-const result4 us_split_fields__ref2)

(declare-const result____split_fields4 us_split_fields4)

(declare-const result____split_fields5 us_split_fields__ref2)

(declare-const i4 int__ref)

(declare-const result____split_fields6 us_split_fields4)

(declare-const i5 Int)

(declare-const result____split_fields7 us_split_fields__ref2)

(declare-const i6 int__ref)

(declare-const result____split_fields8 us_split_fields4)

(declare-const i7 Int)

(declare-const result5 us_split_fields__ref2)

(declare-const result____split_fields9 us_split_fields4)

(declare-const result6 us_split_fields__ref2)

(declare-const result____split_fields10 us_split_fields4)

(declare-const result7 us_split_fields__ref2)

(declare-const result____split_fields11 us_split_fields4)

(declare-const result8 us_split_fields__ref2)

(declare-const result____split_fields12 us_split_fields4)

(declare-const result9 us_split_fields__ref2)

(declare-const result____split_fields13 us_split_fields4)

(declare-const result10 int__ref)

(declare-const i8 Int)

(declare-const result____split_fields14 us_split_fields4)

(declare-const i9 Int)

;; H
  (assert (= (to_rep3 o40) 13))

;; H
  (assert (= o41 (mk___split_fields (temp___String_Literal_172 Tuple0) o40)))

;; H
  (assert (= o42 (mk___rep o41)))

;; H
  (assert (= o43 (mk___split_fields1 blankline o42)))

;; H
  (assert (= o44 (mk___rep1 o43)))

;; H
  (assert (= (to_rep3 o36) 19))

;; H
  (assert (= o37 (mk___split_fields (temp___String_Literal_171 Tuple0) o36)))

;; H
  (assert (= o38 (mk___rep o37)))

;; H
  (assert (= o39 (mk___split_fields1 blankline o38)))

;; H
  (assert (= o45 (mk___rep1 o39)))

;; H
  (assert (= (to_rep3 o31) 12))

;; H
  (assert (= o32 (mk___split_fields (temp___String_Literal_170 Tuple0) o31)))

;; H
  (assert (= o33 (mk___rep o32)))

;; H
  (assert (= (to_rep3 o29) 12))

;; H
  (assert (= o30 (mk___split_fields (temp___String_Literal_169 Tuple0) o29)))

;; H
  (assert (= o34 (mk___rep o30)))

;; H
  (assert (= o35 (mk___split_fields1 o34 o33)))

;; H
  (assert (= o46 (mk___rep1 o35)))

;; H
  (assert (= (to_rep3 o24) 11))

;; H
  (assert (= o25 (mk___split_fields (temp___String_Literal_168 Tuple0) o24)))

;; H
  (assert (= o26 (mk___rep o25)))

;; H
  (assert (= (to_rep3 o22) 19))

;; H
  (assert (= o23 (mk___split_fields (temp___String_Literal_167 Tuple0) o22)))

;; H
  (assert (= o27 (mk___rep o23)))

;; H
  (assert (= o28 (mk___split_fields1 o27 o26)))

;; H
  (assert (= o47 (mk___rep1 o28)))

;; H
  (assert (= (to_rep3 o18) 22))

;; H
  (assert (= o19 (mk___split_fields (temp___String_Literal_166 Tuple0) o18)))

;; H
  (assert (= o20 (mk___rep o19)))

;; H
  (assert (= o21 (mk___split_fields1 blankline o20)))

;; H
  (assert (= o48 (mk___rep1 o21)))

;; H
  (assert (= (to_rep3 o13) 13))

;; H
  (assert (= o14 (mk___split_fields (temp___String_Literal_165 Tuple0) o13)))

;; H
  (assert (= o15 (mk___rep o14)))

;; H
  (assert (= (to_rep3 o11) 19))

;; H
  (assert (= o12 (mk___split_fields (temp___String_Literal_164 Tuple0) o11)))

;; H
  (assert (= o16 (mk___rep o12)))

;; H
  (assert (= o17 (mk___split_fields1 o16 o15)))

;; H
  (assert (= o49 (mk___rep1 o17)))

;; H
  (assert (= (to_rep3 o6) 11))

;; H
  (assert (= o7 (mk___split_fields (temp___String_Literal_163 Tuple0) o6)))

;; H
  (assert (= o8 (mk___rep o7)))

;; H
  (assert (= (to_rep3 o4) 14))

;; H
  (assert (= o5 (mk___split_fields (temp___String_Literal_162 Tuple0) o4)))

;; H
  (assert (= o9 (mk___rep o5)))

;; H
  (assert (= o10 (mk___split_fields1 o9 o8)))

;; H
  (assert (= o50 (mk___rep1 o10)))

;; H
  (assert (= (to_rep3 o) 22))

;; H
  (assert (= o1 (mk___split_fields (temp___String_Literal_161 Tuple0) o)))

;; H
  (assert (= o2 (mk___rep o1)))

;; H
  (assert (= o3 (mk___split_fields1 o2 blankline)))

;; H
  (assert (= o51 (mk___rep1 o3)))

;; H
  (assert
  (= temp___1073 (display__msgtostrings__aggregate_def o51 o50 o49 o48
                 o47 o46 o45 o44)))

;; H
  (assert (= temp___1073 msgtostrings))

;; H
  (assert (= (temp___String_Literal_135 Tuple0) nouser))

;; H
  (assert (in_range5 currentdisplay))

;; H
  (assert (in_range5 currentlydisplayed))

;; H
  (assert (not (= currentdisplay currentlydisplayed)))

;; H
  (assert (= result (mk_int__ref currentlydisplayed)))

;; H
  (assert (= currentlydisplayed1 currentdisplay))

;; H
  (assert
  (= result1 (mk___split_fields__ref1
             (mk___split_fields1
             (mk___rep
             (mk___split_fields themsg__split_fields themsg__split_fields1))
             (mk___rep
             (mk___split_fields themsg__split_fields2 themsg__split_fields3))))))

;; H
  (assert
  (= themsg__split_fields4 (us_split_fields3
                           (select msgtostrings currentdisplay))))

;; H
  (assert
  (not
  (and
  (<= (to_rep3
      (rec__display__msglinet__len
      (us_split_fields1 (rec__display__msgstrt__top themsg__split_fields4))))
  (to_rep2 sizes__split_fields))
  (<= (to_rep3
      (rec__display__msglinet__len
      (us_split_fields1
      (rec__display__msgstrt__bottom themsg__split_fields4)))) (to_rep2
                                                               sizes__split_fields1)))))

;; H
  (assert (= (mk___rep1 themsg__split_fields4) c35b))

;; H
  (assert (= (to_rep4 o52) 0))

;; H
  (assert (= o53 (mk___split_fields2 (temp___1068 32) o52)))

;; H
  (assert (= display__updatedevice__B38b__result__assume (mk___rep2 o53)))

;; H
  (assert
  (= result2 (mk___split_fields__ref2
             (mk___split_fields2 result____split_fields
             result____split_fields1))))

;; H
  (assert
  (= result____split_fields2 (us_split_fields5
                             display__updatedevice__B38b__result__assume)))

;; H
  (assert (= result3 (mk_int__ref i)))

;; H
  (assert (= i2 1))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= temp___1034 i2)))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= temp___1032 (mk___rep2 result____split_fields2))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= temp___1035 c35b)))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (and
  (and (<= 1 i3)
  (<= i3 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= (bool_eq3 c35b temp___1035) true))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (and
  (and
  (and
  (forall ((temp___1033 Int))
  (=> (and (<= 1 temp___1033) (<= temp___1033 50))
  (=> (<= i3 temp___1033)
  (= (select (rec__display__scrollstrt__text result____split_fields3) temp___1033) (select
  (rec__display__scrollstrt__text (us_split_fields5 temp___1032)) temp___1033)))))
  (= (rec__display__scrollstrt__len result____split_fields3) (rec__display__scrollstrt__len
                                                             (us_split_fields5
                                                             temp___1032))))
  (=>
  (<= 1 (to_rep3
        (rec__display__msglinet__len
        (us_split_fields1
        (rec__display__msgstrt__top (us_split_fields3 c35b))))))
  (dynamic_property1 1
  (to_rep3
  (rec__display__msglinet__len
  (us_split_fields1 (rec__display__msgstrt__top (us_split_fields3 c35b)))))
  i3)))
  (and (<= 1 i3)
  (<= i3 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b))))))))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= (to_rep o54) (to_rep
                  (select (rec__display__msglinet__text
                          (us_split_fields1
                          (rec__display__msgstrt__top
                          (us_split_fields3 c35b)))) i3)))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= o55 (store (rec__display__scrollstrt__text result____split_fields3)
  i3 o54))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= o56 (mk___split_fields2 o55
         (rec__display__scrollstrt__len result____split_fields3)))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= temp___1031 (mk___rep2 o56))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= result4 (mk___split_fields__ref2 result____split_fields3))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= result____split_fields4 (us_split_fields5 temp___1031))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= i3 (to_rep3
        (rec__display__msglinet__len
        (us_split_fields1
        (rec__display__msgstrt__top (us_split_fields3 c35b))))))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= i4 (mk_int__ref i3))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= result____split_fields5 (mk___split_fields__ref2
                             result____split_fields4))))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= i5 i3)))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= result____split_fields6 result____split_fields4)))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= i6 i4)))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= result____split_fields7 result____split_fields5)))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= i7 i5)))

;; H
  (assert
  (=>
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b)))))))
  (= result____split_fields8 result____split_fields6)))

;; H
  (assert
  (=>
  (not
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b))))))))
  (= i6 (mk_int__ref i2))))

;; H
  (assert
  (=>
  (not
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b))))))))
  (= result____split_fields7 (mk___split_fields__ref2
                             result____split_fields2))))

;; H
  (assert
  (=>
  (not
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b))))))))
  (= i7 i2)))

;; H
  (assert
  (=>
  (not
  (and (<= 1 i2)
  (<= i2 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__top (us_split_fields3 c35b))))))))
  (= result____split_fields8 result____split_fields2)))

;; H
  (assert
  (= (to_rep4 o57) (to_rep3
                   (rec__display__msglinet__len
                   (us_split_fields1
                   (rec__display__msgstrt__top (us_split_fields3 c35b)))))))

;; H
  (assert
  (= o58 (mk___split_fields2
         (rec__display__scrollstrt__text
         (us_split_fields__content2 result____split_fields7)) o57)))

;; H
  (assert (= temp___1039 (mk___rep2 o58)))

;; H
  (assert (= result5 result____split_fields7))

;; H
  (assert (= result____split_fields9 (us_split_fields5 temp___1039)))

;; H
  (assert (= (to_rep o59) 32))

;; H
  (assert
  (and
  (<= 1 (+ (to_rep4 (rec__display__scrollstrt__len result____split_fields9)) 1))
  (<= (+ (to_rep4 (rec__display__scrollstrt__len result____split_fields9)) 1) 50)))

;; H
  (assert
  (= o60 (+ (to_rep4 (rec__display__scrollstrt__len result____split_fields9)) 1)))

;; H
  (assert
  (= o61 (store (rec__display__scrollstrt__text result____split_fields9)
  o60 o59)))

;; H
  (assert
  (= o62 (mk___split_fields2 o61
         (rec__display__scrollstrt__len result____split_fields9))))

;; H
  (assert (= temp___1043 (mk___rep2 o62)))

;; H
  (assert (= result6 (mk___split_fields__ref2 result____split_fields9)))

;; H
  (assert (= result____split_fields10 (us_split_fields5 temp___1043)))

;; H
  (assert (= (to_rep o63) 47))

;; H
  (assert
  (and
  (<= 1 (+ (to_rep4 (rec__display__scrollstrt__len result____split_fields10)) 2))
  (<= (+ (to_rep4 (rec__display__scrollstrt__len result____split_fields10)) 2) 50)))

;; H
  (assert
  (= o64 (+ (to_rep4
            (rec__display__scrollstrt__len result____split_fields10)) 2)))

;; H
  (assert
  (= o65 (store (rec__display__scrollstrt__text result____split_fields10)
  o64 o63)))

;; H
  (assert
  (= o66 (mk___split_fields2 o65
         (rec__display__scrollstrt__len result____split_fields10))))

;; H
  (assert (= temp___1047 (mk___rep2 o66)))

;; H
  (assert (= result7 (mk___split_fields__ref2 result____split_fields10)))

;; H
  (assert (= result____split_fields11 (us_split_fields5 temp___1047)))

;; H
  (assert (= (to_rep o67) 32))

;; H
  (assert
  (and
  (<= 1 (+ (to_rep4 (rec__display__scrollstrt__len result____split_fields11)) 3))
  (<= (+ (to_rep4 (rec__display__scrollstrt__len result____split_fields11)) 3) 50)))

;; H
  (assert
  (= o68 (+ (to_rep4
            (rec__display__scrollstrt__len result____split_fields11)) 3)))

;; H
  (assert
  (= o69 (store (rec__display__scrollstrt__text result____split_fields11)
  o68 o67)))

;; H
  (assert
  (= o70 (mk___split_fields2 o69
         (rec__display__scrollstrt__len result____split_fields11))))

;; H
  (assert (= temp___1051 (mk___rep2 o70)))

;; H
  (assert (= result8 (mk___split_fields__ref2 result____split_fields11)))

;; H
  (assert (= result____split_fields12 (us_split_fields5 temp___1051)))

;; H
  (assert
  (and
  (= o71 (+ (to_rep4
            (rec__display__scrollstrt__len result____split_fields12)) 3))
  (in_range7
  (+ (to_rep4 (rec__display__scrollstrt__len result____split_fields12)) 3))))

;; H
  (assert (= (to_rep4 o72) o71))

;; H
  (assert
  (= o73 (mk___split_fields2
         (rec__display__scrollstrt__text result____split_fields12) o72)))

;; H
  (assert (= temp___1053 (mk___rep2 o73)))

;; H
  (assert (= result9 (mk___split_fields__ref2 result____split_fields12)))

;; H
  (assert (= result____split_fields13 (us_split_fields5 temp___1053)))

;; H
  (assert (= result10 (mk_int__ref i1)))

;; H
  (assert (= i8 1))

;; H
  (assert (<= 1 i8))

;; H
  (assert
  (<= i8 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__bottom (us_split_fields3 c35b)))))))

;; H
  (assert
  (and
  (and
  (and (<= 1 i9)
  (<= i9 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__bottom (us_split_fields3 c35b)))))))
  (= (bool_eq3 c35b c35b) true))
  (= (to_rep4 (rec__display__scrollstrt__len result____split_fields14)) (+
  (to_rep3
  (rec__display__msglinet__len
  (us_split_fields1 (rec__display__msgstrt__top (us_split_fields3 c35b))))) 3))))

;; H
  (assert
  (and
  (and
  (= (rec__display__scrollstrt__len result____split_fields14) (rec__display__scrollstrt__len
                                                              result____split_fields13))
  (=>
  (<= 1 (to_rep3
        (rec__display__msglinet__len
        (us_split_fields1
        (rec__display__msgstrt__bottom (us_split_fields3 c35b))))))
  (dynamic_property2 1
  (to_rep3
  (rec__display__msglinet__len
  (us_split_fields1 (rec__display__msgstrt__bottom (us_split_fields3 c35b)))))
  i9)))
  (and (<= 1 i9)
  (<= i9 (to_rep3
         (rec__display__msglinet__len
         (us_split_fields1
         (rec__display__msgstrt__bottom (us_split_fields3 c35b)))))))))

;; H
  (assert
  (= (to_rep o74) (to_rep
                  (select (rec__display__msglinet__text
                          (us_split_fields1
                          (rec__display__msgstrt__bottom
                          (us_split_fields3 c35b)))) i9))))

(assert
;; WP_parameter_def
 ;; File "display.adb", line 202, characters 0-0
  (not (in_range1
  (+ (to_rep4 (rec__display__scrollstrt__len result____split_fields14))
  i9))))
(check-sat)
(exit)
