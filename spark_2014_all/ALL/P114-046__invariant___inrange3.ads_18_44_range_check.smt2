;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 64)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-fun dummy () unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_201 (_ BitVec 64))
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool true)

(declare-fun var () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun bottom () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun range_size () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun i () (_ BitVec 64))

(declare-fun inrange3__inrange64__result () Bool)

(declare-fun temp___204 () (_ BitVec 64))

(declare-fun temp___205 () (_ BitVec 64))

(declare-fun inrange3__inrange64__result1 () Bool)

(declare-fun result () (_ BitVec 64))

(declare-fun i1 () (_ BitVec 64))

(declare-fun i2 () (_ BitVec 64))

(declare-fun inrange3__inrange64__result2 () Bool)

(declare-fun temp___2051 () (_ BitVec 64))

(declare-fun result1 () (_ BitVec 64))

(declare-fun temp___2052 () (_ BitVec 64))

(declare-fun result2 () Bool)

(declare-fun inrange3__inrange64__result3 () Bool)

(declare-fun result3 () (_ BitVec 64))

(declare-fun i3 () (_ BitVec 64))

(declare-fun i4 () (_ BitVec 64))

(declare-fun inrange3__inrange64__result4 () Bool)

(declare-fun i5 () (_ BitVec 64))

(declare-fun inrange3__inrange64__result5 () Bool)

(declare-fun i6 () (_ BitVec 64))

(declare-fun inrange3__inrange64__result6 () Bool)

(declare-fun i7 () (_ BitVec 64))

(declare-fun inrange3__inrange64__result7 () Bool)

(declare-fun result4 () Bool)

(declare-fun inrange3__inrange64__result8 () Bool)

(declare-fun inrange3__inrange64__result9 () Bool)

(declare-fun inrange3__inrange64__result10 () Bool)

(declare-fun i8 () (_ BitVec 64))

(declare-fun inrange3__inrange64__result11 () Bool)

(declare-fun i9 () (_ BitVec 64))

(declare-fun inrange3__inrange64__result12 () Bool)

(declare-fun i10 () (_ BitVec 64))

(declare-fun inrange3__inrange64__result13 () Bool)

(declare-fun i11 () (_ BitVec 64))

(declare-fun inrange3__inrange64__result14 () Bool)

(define-fun inrange3__inrange64__result15 () bool__ref (mk_bool__ref
                                                       inrange3__inrange64__result11))

(define-fun i12 () t__ref (mk_t__ref i8))

(define-fun inrange3__inrange64__result16 () bool__ref (mk_bool__ref
                                                       inrange3__inrange64__result6))

(define-fun i13 () t__ref (mk_t__ref i6))

;; H
  (assert
  (and (bvuge range_size ((_ int2bv 64) 2))
  (bvule range_size ((_ int2bv 64) 65535))))

;; H
  (assert (= (mk_t__ref result) (mk_t__ref i)))

;; H
  (assert (= i1 ((_ int2bv 64) 0)))

;; H
  (assert
  (or
  (and
  (and
  (and (= inrange3__inrange64__result3 inrange3__inrange64__result11)
  (= i2 i8))
  (and (= inrange3__inrange64__result12 inrange3__inrange64__result3)
  (= i9 i2)))
  (and (bvult i1 range_size)
  (and (= temp___204 i1)
  (and (= ((_ int2bv 64) 0) temp___205)
  (and
  (and
  (and (bvule ((_ int2bv 64) 0) i2)
  (bvule i2 (bvsub range_size ((_ int2bv 64) 1))))
  (or (= i2 ((_ int2bv 64) 0))
  (forall ((n (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) n) (bvule n (bvsub i2 ((_ int2bv 64) 1))))
  (not (= var (bvadd bottom n)))))))
  (and (bvult i2 range_size)
  (and (and (= temp___2051 result1) (= temp___2052 i2))
  (and (= var (bvadd bottom i2))
  (and (= inrange3__inrange64__result2 result2)
  (= inrange3__inrange64__result3 (of_int 1)))))))))))
  (and
  (ite (bvult i1 range_size)
  (and
  (and
  (and (= temp___204 i1)
  (and (= ((_ int2bv 64) 0) temp___205)
  (and
  (and
  (and (bvule ((_ int2bv 64) 0) i2)
  (bvule i2 (bvsub range_size ((_ int2bv 64) 1))))
  (or (= i2 ((_ int2bv 64) 0))
  (forall ((n (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) n) (bvule n (bvsub i2 ((_ int2bv 64) 1))))
  (not (= var (bvadd bottom n)))))))
  (and (bvult i2 range_size)
  (and (and (= temp___2051 result1) (= temp___2052 i2))
  (and
  (and (not (= var (bvadd bottom i2)))
  (= inrange3__inrange64__result3 inrange3__inrange64__result2))
  (and (and (= i2 result3) (= i3 (bvadd i2 ((_ int2bv 64) 1))))
  (not (bvult i3 range_size)))))))))
  (and
  (and (= inrange3__inrange64__result3 inrange3__inrange64__result4)
  (= i3 i4))
  (and (= inrange3__inrange64__result5 inrange3__inrange64__result3)
  (= i5 i3))))
  (and
  (and
  (= inrange3__inrange64__result16 (mk_bool__ref
                                   inrange3__inrange64__result4))
  (= i13 (mk_t__ref i4)))
  (and (= inrange3__inrange64__result7 inrange3__inrange64__result5)
  (= i7 i5))))
  (and
  (and
  (= inrange3__inrange64__result16 (mk_bool__ref inrange3__inrange64__result))
  (= i1 i6))
  (and (= inrange3__inrange64__result7 inrange3__inrange64__result1)
  (= i7 i1))))
  (and
  (and
  (and
  (= inrange3__inrange64__result15 (mk_bool__ref
                                   inrange3__inrange64__result9))
  (= i12 i13))
  (and (= inrange3__inrange64__result12 inrange3__inrange64__result10)
  (= i9 i7)))
  (and
  (and (= inrange3__inrange64__result8 inrange3__inrange64__result9)
  (= inrange3__inrange64__result10 inrange3__inrange64__result8))
  (and (= (mk_bool__ref result4) inrange3__inrange64__result16)
  (= inrange3__inrange64__result8 (of_int 0))))))))

;; H
  (assert
  (= (mk_bool__ref inrange3__inrange64__result13) inrange3__inrange64__result15))

;; H
  (assert (= (mk_t__ref i10) i12))

;; H
  (assert (= inrange3__inrange64__result14 inrange3__inrange64__result12))

;; H
  (assert (= i11 i9))

;; H
  (assert (bvule ((_ int2bv 64) 0) (bvsub range_size ((_ int2bv 64) 1))))

(assert
;; WP_parameter_def
 ;; File "inrange3.ads", line 15, characters 0-0
  (not (bvuge ((_ int2bv 64) 0) ((_ int2bv 64) 0))))
(check-sat)
(exit)
