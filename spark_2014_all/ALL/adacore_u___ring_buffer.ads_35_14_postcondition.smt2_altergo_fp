(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type length_range

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : length_range, length_range -> bool

logic dummy1 : length_range

type length_range__ref = { length_range__content : length_range
}

function length_range__ref___projection(a: length_range__ref) : length_range =
  (a).length_range__content

type index_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : index_type, index_type -> bool

logic dummy2 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq4 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : count_type, count_type -> bool

logic dummy4 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq6 : bool, bool -> bool

axiom bool_eq_def4 :
  (forall x:bool. forall y:bool [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range4(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE4 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> bool

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq3(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq3(a, b) = match_bool(bool_eq(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq3(a, b) = match_bool(bool_eq(length(a), length(b)), false,
  false)))))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 100) and in_range3(length(container))))

logic is_append : us_rep, us_rep, int -> bool

logic is_append__function_guard : bool, us_rep, us_rep, int -> prop

logic olt__function_guard : bool, us_rep, us_rep -> prop

axiom is_append__post_axiom : true

axiom is_append__def_axiom :
  (forall s1:us_rep. forall s2:us_rep.
  (forall e:int [is_append(s1, s2, e)]. (((is_append(s1, s2, e) = true) ->
  (((((bool_lt(length(s1), length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false))) and (length(s1) = (length(s2) - 1))) and (get(s2,
  (0 + length(s2))) = e))) and (((((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (length(s1) = (length(s2) - 1))) and (get(s2,
  (0 + length(s2))) = e)) -> (is_append(s1, s2, e) = true)))))

type model_type__ref = { model_type__content : us_rep
}

function model_type__ref___projection(a: model_type__ref) : us_rep =
  (a).model_type__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq7 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic get_model : (int,natural) farray, int, int -> us_rep

logic get_model__function_guard : us_rep, (int,natural) farray, int,
  int -> prop

logic valid_model__2 : us_rep, (int,natural) farray, int, int -> bool

logic valid_model__2__function_guard : bool, us_rep, (int,natural) farray,
  int, int -> prop

logic valid_model__21 : us_rep, (int,natural) farray, int, int -> bool

logic valid_model__2__function_guard1 : bool, us_rep, (int,natural) farray,
  int, int -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq3(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq3(a, b) = match_bool(bool_eq(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq3(a, b) = match_bool(bool_eq(length(a), length(b)), false,
  false)))))

axiom get_model__post_axiom :
  (forall ring_buffer__content:(int,natural) farray.
  (forall ring_buffer__first:int. forall ring_buffer__length:int
  [get_model(ring_buffer__content, ring_buffer__first, ring_buffer__length)].
  ((in_range2(ring_buffer__first) and in_range1(ring_buffer__length)) ->
  (valid_model__21(get_model(ring_buffer__content, ring_buffer__first,
  ring_buffer__length), ring_buffer__content, ring_buffer__first,
  ring_buffer__length) = true))))

logic e : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type tTcontentSP1

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tTcontentSP1, tTcontentSP1 -> bool

logic dummy5 : tTcontentSP1

type tTcontentSP1__ref = { tTcontentSP1__content : tTcontentSP1
}

function tTcontentSP1__ref___projection(a: tTcontentSP1__ref) : tTcontentSP1 =
  (a).tTcontentSP1__content

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom valid_model__2__post_axiom : true

axiom valid_model__2__post_refine_axiom :
  (forall m:us_rep.
  (forall ring_buffer__content:(int,natural) farray.
  (forall ring_buffer__first:int. forall ring_buffer__length:int
  [valid_model__21(m, ring_buffer__content, ring_buffer__first,
  ring_buffer__length)]. ((in_range2(ring_buffer__first) and
  in_range1(ring_buffer__length)) -> ((valid_model__21(m,
  ring_buffer__content, ring_buffer__first, ring_buffer__length) = true) ->
  ((forall i:int. (((1 <= i) and (i <= min(ring_buffer__length,
   ((100 - ring_buffer__first) + 1)))) -> (get(m,
   i) = to_rep((ring_buffer__content[((i - 1) + ring_buffer__first)]))))) and
  (forall i:int. (((((100 - ring_buffer__first) + 2) <= i) and
  (i <= ring_buffer__length)) -> (get(m,
  i) = to_rep((ring_buffer__content[(((i - 100) + ring_buffer__first) - 1)])))))))))))

axiom valid_model__2__def_axiom :
  (forall m:us_rep.
  (forall ring_buffer__content:(int,natural) farray.
  (forall ring_buffer__first:int. forall ring_buffer__length:int
  [valid_model__21(m, ring_buffer__content, ring_buffer__first,
  ring_buffer__length)]. (((valid_model__21(m, ring_buffer__content,
  ring_buffer__first, ring_buffer__length) = true) ->
  ((ring_buffer__length = length(m)) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((((ring_buffer__first <= i) and
  (i <= min(((ring_buffer__first + ring_buffer__length) - 1), 100))) ->
  (to_rep((ring_buffer__content[i])) = get(m,
  ((i - ring_buffer__first) + 1)))) and ((not ((ring_buffer__first <= i) and
  (i <= min(((ring_buffer__first + ring_buffer__length) - 1), 100)))) ->
  (((1 <= i) and
  (i <= (((ring_buffer__first + ring_buffer__length) - 1) - 100))) ->
  (to_rep((ring_buffer__content[i])) = get(m,
  (((i + 100) - ring_buffer__first) + 1)))))))))) and
  (((ring_buffer__length = length(m)) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((((ring_buffer__first <= i) and
  (i <= min(((ring_buffer__first + ring_buffer__length) - 1), 100))) and
  (to_rep((ring_buffer__content[i])) = get(m,
  ((i - ring_buffer__first) + 1)))) or ((not ((ring_buffer__first <= i) and
  (i <= min(((ring_buffer__first + ring_buffer__length) - 1), 100)))) and
  (((1 <= i) and
  (i <= (((ring_buffer__first + ring_buffer__length) - 1) - 100))) ->
  (to_rep((ring_buffer__content[i])) = get(m,
  (((i + 100) - ring_buffer__first) + 1))))))))) -> (valid_model__21(m,
  ring_buffer__content, ring_buffer__first, ring_buffer__length) = true))))))

type extended_index

predicate in_range6(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : extended_index, extended_index -> bool

logic dummy6 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type element_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : element_type, element_type -> bool

logic dummy7 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position:int [get(container, position)]. ((in_range6(position) and
  ((1 <= position) and (position <= (0 + length(container))))) ->
  in_range7(get(container, position)))))

 (* File "ring_buffer.ads", line 24, characters 0-0 *)
goal WP_parameter_def :
  (forall content:(int,natural) farray. forall first:int. forall length1:int.
  forall o:natural. forall o1:int. forall o2:(int,natural) farray.
  forall o3:natural. forall o4:int. forall o5:(int,natural) farray.
  forall o6:int. forall result:(int,natural) farray.
  forall content1:(int,natural) farray. forall result1:(int,natural) farray.
  forall content2:(int,natural) farray. forall result2:int.
  forall length2:int. forall content3:(int,natural) farray.
  forall length3:int. forall content4:(int,natural) farray.
  forall length4:int. ((in_range2(first) and (in_range1(length1) and
  (in_range(e) and ((length(get_model(content, first, length1)) <  100) and
  (((((first <= (100 - length1)) and (((to_rep(o) = e) and
  ((((1 <= (first + length1)) and ((first + length1) <= 100)) and
  (o1 = (first + length1))) and (o2 = (content[o1 <- o])))) and (({
  map__content = result } = { map__content = content }) and
  (content1 = o2)))) or ((not (first <= (100 - length1))) and
  ((((to_rep(o3) = e) and ((((1 <= ((length1 - 100) + first)) and
  (((length1 - 100) + first) <= 100)) and
  (o4 = ((length1 - 100) + first))) and (o5 = (content[o4 <- o3])))) and (({
  map__content = result1 } = { map__content = content }) and
  (content2 = o5))) and (content1 = content2)))) and
  (((o6 = (length1 + 1)) and in_range1((length1 + 1))) and
  ((result2 = length1) and (length2 = o6)))) and (((length2 = length3) and
  (content1 = content3)) and ((length4 = length2) and
  (content4 = content1)))))))) -> (is_append(get_model(content, first,
  length1), get_model(content3, first, length3), e) = true)))
