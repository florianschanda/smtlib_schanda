;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort program_phase_t 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (program_phase_t program_phase_t) Bool)

(declare-const dummy4 program_phase_t)

(declare-datatypes ()
((program_phase_t__ref
 (mk_program_phase_t__ref (program_phase_t__content program_phase_t)))))
(define-fun program_phase_t__ref___projection ((a program_phase_t__ref)) program_phase_t
  (program_phase_t__content a))

(define-fun dynamic_invariant ((temp___expr_539 Int)
  (temp___is_init_536 Bool) (temp___skip_constant_537 Bool)
  (temp___do_toplevel_538 Bool)) Bool (=>
                                      (or (= temp___is_init_536 true)
                                      (<= 0 2)) (in_range4 temp___expr_539)))

(declare-sort counter_range_t 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (counter_range_t counter_range_t) Bool)

(declare-const dummy5 counter_range_t)

(declare-datatypes ()
((counter_range_t__ref
 (mk_counter_range_t__ref (counter_range_t__content counter_range_t)))))
(define-fun counter_range_t__ref___projection ((a counter_range_t__ref)) counter_range_t
  (counter_range_t__content a))

(declare-fun to_rep2 (counter_range_t) Int)

(declare-fun of_rep2 (Int) counter_range_t)

;; inversion_axiom
  (assert
  (forall ((x counter_range_t))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x counter_range_t)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort candidate_number_t 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (candidate_number_t candidate_number_t) Bool)

(declare-const dummy6 candidate_number_t)

(declare-datatypes ()
((candidate_number_t__ref
 (mk_candidate_number_t__ref
 (candidate_number_t__content candidate_number_t)))))
(define-fun candidate_number_t__ref___projection ((a candidate_number_t__ref)) candidate_number_t
  (candidate_number_t__content a))

(define-fun dynamic_invariant1 ((temp___expr_551 Int)
  (temp___is_init_548 Bool) (temp___skip_constant_549 Bool)
  (temp___do_toplevel_550 Bool)) Bool (=>
                                      (or (= temp___is_init_548 true)
                                      (<= 0 20)) (in_range6 temp___expr_551)))

(declare-sort ttotal_range_tB 0)

(define-fun in_range7 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (ttotal_range_tB ttotal_range_tB) Bool)

(declare-const dummy7 ttotal_range_tB)

(declare-datatypes ()
((ttotal_range_tB__ref
 (mk_ttotal_range_tB__ref (ttotal_range_tB__content ttotal_range_tB)))))
(define-fun ttotal_range_tB__ref___projection ((a ttotal_range_tB__ref)) ttotal_range_tB
  (ttotal_range_tB__content a))

(declare-sort total_range_t 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 210000)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (total_range_t total_range_t) Bool)

(declare-const dummy8 total_range_t)

(declare-datatypes ()
((total_range_t__ref
 (mk_total_range_t__ref (total_range_t__content total_range_t)))))
(define-fun total_range_t__ref___projection ((a total_range_t__ref)) total_range_t
  (total_range_t__content a))

(define-fun dynamic_invariant2 ((temp___expr_557 Int)
  (temp___is_init_554 Bool) (temp___skip_constant_555 Bool)
  (temp___do_toplevel_556 Bool)) Bool (=>
                                      (or (= temp___is_init_554 true)
                                      (<= 0 210000)) (in_range8
                                      temp___expr_557)))

(declare-const dummy9 (Array Int character))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq9 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int character)))))))
(declare-fun slide1 ((Array Int (Array Int character)) Int
  Int) (Array Int (Array Int character)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int character))))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int character))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int character)) Int Int
  (Array Int (Array Int character)) Int
  Int) (Array Int (Array Int character)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int character)))
  (b (Array Int (Array Int character))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int character)
  Int) (Array Int (Array Int character)))

;; singleton_def
  (assert
  (forall ((v (Array Int character)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int (Array Int character))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int character))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_152 Int))
                           (=>
                           (and (<= a__first temp___idx_152)
                           (<= temp___idx_152 a__last))
                           (= (bool_eq (select a temp___idx_152) 1 70
                              (select b (+ (- b__first a__first) temp___idx_152))
                              1 70) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int character)))
  (b (Array Int (Array Int character))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_152 Int))
  (=> (and (<= a__first temp___idx_152) (<= temp___idx_152 a__last))
  (= (bool_eq (select a temp___idx_152) 1 70
     (select b (+ (- b__first a__first) temp___idx_152)) 1 70) true))))))))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int counter_range_t))))))
(declare-fun slide2 ((Array Int counter_range_t) Int
  Int) (Array Int counter_range_t))

;; slide_eq
  (assert
  (forall ((a (Array Int counter_range_t)))
  (forall ((first2 Int))
  (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int counter_range_t)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int counter_range_t) Int Int
  (Array Int counter_range_t) Int Int) (Array Int counter_range_t))

;; concat_def
  (assert
  (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (counter_range_t Int) (Array Int counter_range_t))

;; singleton_def
  (assert
  (forall ((v counter_range_t))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int counter_range_t)) (a__first Int)
  (a__last Int) (b (Array Int counter_range_t)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_153 Int))
                           (=>
                           (and (<= a__first temp___idx_153)
                           (<= temp___idx_153 a__last))
                           (= (to_rep2 (select a temp___idx_153)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_153)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_153 Int))
  (=> (and (<= a__first temp___idx_153) (<= temp___idx_153 a__last))
  (= (to_rep2 (select a temp___idx_153)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_153)))))))))))

(declare-fun compare1 ((Array Int counter_range_t) Int Int
  (Array Int counter_range_t) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int Bool))))))
(declare-fun slide3 ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first2 Int))
  (! (= (slide3 a first2 first2) a) :pattern ((slide3 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat4 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat4 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton4 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))

(declare-fun compare2 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare2 a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare2 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare2 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-const program_phase Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const candidates (Array Int (Array Int character)))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const last_candidate Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const counters (Array Int counter_range_t))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-sort tcandidate_number_tB 0)

(define-fun in_range9 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (tcandidate_number_tB tcandidate_number_tB) Bool)

(declare-const dummy10 tcandidate_number_tB)

(declare-datatypes ()
((tcandidate_number_tB__ref
 (mk_tcandidate_number_tB__ref
 (tcandidate_number_tB__content tcandidate_number_tB)))))
(define-fun tcandidate_number_tB__ref___projection ((a tcandidate_number_tB__ref)) tcandidate_number_tB
  (tcandidate_number_tB__content a))

(declare-fun to_rep3 (tcandidate_number_tB) Int)

(declare-fun of_rep3 (Int) tcandidate_number_tB)

;; inversion_axiom
  (assert
  (forall ((x tcandidate_number_tB))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x tcandidate_number_tB)) (! (in_range9
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq11 (tcandidate_number_tB tcandidate_number_tB) Bool)

(declare-const dummy11 tcandidate_number_tB)

(declare-datatypes ()
((t83b__ref (mk_t83b__ref (t83b__content tcandidate_number_tB)))))
(define-fun t83b__ref___projection ((a t83b__ref)) tcandidate_number_tB
  (t83b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-fun temp___String_Literal_724 (tuple0) (Array Int character))

;; temp___String_Literal_724__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 1)) 42)
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 2)) 42))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 3)) 42))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 4)) 42))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 5)) 32))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 6)) 82))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 7)) 101))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 8)) 115))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 9)) 117))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 10)) 108))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 11)) 116))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 13)) 42))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 14)) 42))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 15)) 42))
     (= (to_rep (select (temp___String_Literal_724 us_void_param) 16)) 42)) :pattern (
  (temp___String_Literal_724 us_void_param)) )))

(declare-fun temp___String_Literal_729 (tuple0) (Array Int character))

;; temp___String_Literal_729__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_729 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_729 us_void_param) 2)) 118))
     (= (to_rep (select (temp___String_Literal_729 us_void_param) 3)) 111))
     (= (to_rep (select (temp___String_Literal_729 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_729 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_729 us_void_param) 6)) 40))
     (= (to_rep (select (temp___String_Literal_729 us_void_param) 7)) 115))
     (= (to_rep (select (temp___String_Literal_729 us_void_param) 8)) 41))
     (= (to_rep (select (temp___String_Literal_729 us_void_param) 9)) 58))
     (= (to_rep (select (temp___String_Literal_729 us_void_param) 10)) 32)) :pattern (
  (temp___String_Literal_729 us_void_param)) )))

(declare-fun temp___String_Literal_730 (tuple0) (Array Int character))

;; temp___String_Literal_730__def_axiom
  (assert true)

(declare-fun temp___String_Literal_733 (tuple0) (Array Int character))

;; temp___String_Literal_733__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 3)) 116))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 7)) 110))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 8)) 117))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 9)) 109))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 10)) 98))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 11)) 101))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 12)) 114))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 14)) 111))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 15)) 102))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 17)) 118))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 18)) 111))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 19)) 116))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 20)) 101))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 21)) 115))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 22)) 58))
     (= (to_rep (select (temp___String_Literal_733 us_void_param) 23)) 32)) :pattern (
  (temp___String_Literal_733 us_void_param)) )))

(declare-fun temp___String_Literal_734 (tuple0) (Array Int character))

;; temp___String_Literal_734__def_axiom
  (assert true)

(declare-fun temp___String_Literal_735 (tuple0) (Array Int character))

;; temp___String_Literal_735__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 3)) 116))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 7)) 110))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 8)) 117))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 9)) 109))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 10)) 98))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 11)) 101))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 12)) 114))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 14)) 111))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 15)) 102))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 17)) 118))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 18)) 97))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 19)) 108))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 20)) 105))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 21)) 100))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 23)) 118))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 24)) 111))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 25)) 116))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 26)) 101))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 27)) 115))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 28)) 58))
     (= (to_rep (select (temp___String_Literal_735 us_void_param) 29)) 32)) :pattern (
  (temp___String_Literal_735 us_void_param)) )))

(declare-fun temp___String_Literal_736 (tuple0) (Array Int character))

;; temp___String_Literal_736__def_axiom
  (assert true)

(declare-fun temp___String_Literal_737 (tuple0) (Array Int character))

;; temp___String_Literal_737__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 1)) 42)
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 2)) 32))
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 3)) 87))
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 4)) 105))
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 5)) 110))
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 6)) 110))
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 7)) 101))
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 8)) 114))
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 9)) 40))
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 10)) 115))
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 11)) 41))
     (= (to_rep (select (temp___String_Literal_737 us_void_param) 12)) 32)) :pattern (
  (temp___String_Literal_737 us_void_param)) )))

(declare-fun temp___String_Literal_738 (tuple0) (Array Int character))

;; temp___String_Literal_738__def_axiom
  (assert true)

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant5 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant6 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant7 ((temp___expr_545 Int)
  (temp___is_init_542 Bool) (temp___skip_constant_543 Bool)
  (temp___do_toplevel_544 Bool)) Bool (=>
                                      (or (= temp___is_init_542 true)
                                      (<= 0 10000)) (in_range5
                                      temp___expr_545)))

(declare-const total Int)

(declare-const valid_total Int)

(declare-const i Int)

(declare-const result Int)

(declare-const total1 Int)

(declare-const result1 Int)

(declare-const i1 Int)

;; H
  (assert (in_range4 program_phase))

;; H
  (assert (in_range6 last_candidate))

;; H
  (assert (= program_phase 2))

;; H
  (assert (= result total))

;; H
  (assert (= total1 0))

;; H
  (assert (in_range8 total1))

;; H
  (assert (=> (<= 0 210000) (in_range8 valid_total)))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref i)))

;; H
  (assert (= i1 0))

;; H
  (assert (<= 0 i1))

;; H
  (assert (<= i1 last_candidate))

;; H
  (assert (< 0 i1))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (<= (to_rep2 (select counters 0)) total1)))
(check-sat)
(exit)
