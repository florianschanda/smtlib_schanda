(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int -> integer

logic set : map, int, int, integer -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:integer [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:integer [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide : map, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq2 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def1 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq2(a, a__first, a__last, a__first_2, a__last_2,
  b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  (((((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))) and
  (to_rep(get(a, temp___idx_132, temp___idx_133)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133))))) or
  (not (((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))))))) ->
  (bool_eq2(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  ((((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_132, temp___idx_133)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133)))))))) -> (bool_eq2(a,
  a__first, a__last, a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = false))))

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_132:int. forall temp___idx_133:int.
  ((((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)) and
  ((a__first_2 <= temp___idx_133) and (temp___idx_133 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_132, temp___idx_133)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_132),
  ((b__first_2 - a__first_2) + temp___idx_133))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "p.ads", line 15, characters 0-0 *)
goal WP_parameter_def :
  (forall x:map. ((to_rep(get(x, 1, 2)) <  20) -> in_range((to_rep(get(x, 1,
  2)) + 1))))
