(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,integer) farray

logic dummy3 : t

type t_arr__ref = { t_arr__content : us_t
}

function t_arr__ref___projection(a: t_arr__ref) : us_t = (a).t_arr__content

type us_split_fields = { rec__types__option__exists : bool;
rec__types__option__value : integer
}

function us_split_fields_Exists__projection(a: us_split_fields) : bool =
  (a).rec__types__option__exists

function us_split_fields_Value__projection(a: us_split_fields) : integer =
  (a).rec__types__option__value

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((((a).us_split_fields1).rec__types__option__exists = ((b).us_split_fields1).rec__types__option__exists) and
  (to_rep(((a).us_split_fields1).rec__types__option__value) = to_rep(((b).us_split_fields1).rec__types__option__value))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((((a).us_split_fields1).rec__types__option__exists = ((b).us_split_fields1).rec__types__option__exists) and
  (to_rep(((a).us_split_fields1).rec__types__option__value) = to_rep(((b).us_split_fields1).rec__types__option__value)))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:integer. (0 <= object__size1({ us_split_fields1 =
  { rec__types__option__exists = a; rec__types__option__value = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:integer. (0 <= object__alignment1({
  us_split_fields1 = { rec__types__option__exists = a;
  rec__types__option__value = a1 } })))

logic types__option__exists__first__bit : int

logic types__option__exists__last__bit : int

logic types__option__exists__position : int

axiom types__option__exists__first__bit_axiom :
  (0 <= types__option__exists__first__bit)

axiom types__option__exists__last__bit_axiom :
  (types__option__exists__first__bit <  types__option__exists__last__bit)

axiom types__option__exists__position_axiom :
  (0 <= types__option__exists__position)

logic types__option__value__first__bit : int

logic types__option__value__last__bit : int

logic types__option__value__position : int

axiom types__option__value__first__bit_axiom :
  (0 <= types__option__value__first__bit)

axiom types__option__value__last__bit_axiom :
  (types__option__value__first__bit <  types__option__value__last__bit)

axiom types__option__value__position_axiom :
  (0 <= types__option__value__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy4 : bool

logic dummy5 : integer

type option__ref = { option__content : us_rep
}

function option__ref___projection(a: option__ref) : us_rep =
  (a).option__content

logic equal_subrange : us_t, int, us_t -> bool

logic equal_subrange__function_guard : bool, us_t, int, us_t -> prop

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy6 : integer

type t17s__ref = { t17s__content : integer
}

function t17s__ref___projection(a: t17s__ref) : integer = (a).t17s__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,integer) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__alignment2(a)))

function bool_eq8(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy7 : (int,integer) farray

logic dummy8 : t1

type t18s__ref = { t18s__content : us_t1
}

function t18s__ref___projection(a: t18s__ref) : us_t1 = (a).t18s__content

axiom equal_subrange__post_axiom : true

axiom equal_subrange__def_axiom :
  (forall a:(int,integer) farray. forall a1:t. forall b:(int,integer) farray.
  forall b1:t.
  (forall j:int [equal_subrange({ elts = a; rt = a1 }, j, { elts = b; rt = b1
  })]. ((equal_subrange({ elts = a; rt = a1 }, j, { elts = b; rt = b1
  }) = true) <-> (bool_eq4(a, to_rep(first2(mk1(j, ((j - 1) + length({ elts =
  b; rt = b1 }))))), to_rep(last2(mk1(j, ((j - 1) + length({ elts = b; rt =
  b1 }))))), b, to_rep(first(b1)), to_rep(last(b1))) = true))))

logic has_sub_range_in_prefix : us_t, int, us_t -> bool

logic has_sub_range_in_prefix__function_guard : bool, us_t, int, us_t -> prop

axiom has_sub_range_in_prefix__post_axiom : true

axiom has_sub_range_in_prefix__def_axiom :
  (forall a:(int,integer) farray. forall a1:t. forall b:(int,integer) farray.
  forall b1:t.
  (forall last4:int [has_sub_range_in_prefix({ elts = a; rt = a1 }, last4, {
  elts = b; rt = b1 })]. ((has_sub_range_in_prefix({ elts = a; rt = a1 },
  last4, { elts = b; rt = b1 }) = true) <->
  (exists j:int. (((to_rep(first(a1)) <= j) and (j <= last4)) and
  (equal_subrange({ elts = a; rt = a1 }, j, { elts = b; rt = b1 }) = true))))))

logic has_sub_range : us_t, us_t -> bool

logic has_sub_range__function_guard : bool, us_t, us_t -> prop

axiom has_sub_range__post_axiom : true

axiom has_sub_range__def_axiom :
  (forall a:(int,integer) farray. forall a1:t. forall b:(int,integer) farray.
  forall b1:t [has_sub_range({ elts = a; rt = a1 }, { elts = b; rt = b1 })].
  ((has_sub_range({ elts = a; rt = a1 }, { elts = b; rt = b1 }) = true) <->
  (has_sub_range_in_prefix({ elts = a; rt = a1 },
  ((to_rep(last(a1)) + 1) - length({ elts = b; rt = b1 })), { elts = b; rt =
  b1 }) = true)))

logic a : (int,integer) farray

logic a1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic b : (int,integer) farray

logic b1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy9 : integer

type t4b__ref = { t4b__content : integer
}

function t4b__ref___projection(a2: t4b__ref) : integer = (a2).t4b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "types.ads", line 11, characters 0-0 *)
goal WP_parameter_def :
  (forall result____split_fields:bool.
  forall result____split_fields1:integer. forall i:int.
  forall search_ter_p__search__result:bool.
  forall search_ter_p__search__result1:integer. forall o:integer.
  forall o1:bool. forall o2:integer.
  forall search_ter_p__search__result__assume:bool.
  forall search_ter_p__search__result__assume1:integer.
  forall temp___203:int. forall o3:int. forall o4:int. forall o5:int.
  forall temp___204:int. forall temp___201:bool. forall temp___2011:integer.
  forall temp___200:int. forall temp___202:int. forall o6:integer.
  forall o7:bool. forall o8:integer. forall temp___199:bool.
  forall temp___1991:integer. forall o9:integer. forall o10:bool.
  forall o11:integer. forall temp___1992:bool. forall temp___1993:integer.
  forall i1:int. forall search_ter_p__search__result2:bool.
  forall search_ter_p__search__result3:integer. forall result:bool.
  forall result1:integer. forall result____split_fields2:bool.
  forall result____split_fields3:integer. forall result2:bool.
  forall result3:bool. forall result4:integer.
  forall search_ter_p__search__result4:bool.
  forall search_ter_p__search__result5:integer. forall result5:int.
  forall i2:int. forall temp___2021:int. forall result6:bool.
  forall result7:bool. forall result8:integer.
  forall result____split_fields4:bool.
  forall result____split_fields5:integer. forall result9:bool.
  forall result10:integer. forall result____split_fields6:bool.
  forall result____split_fields7:integer. forall result11:bool.
  forall result12:integer. forall search_ter_p__search__result6:bool.
  forall search_ter_p__search__result7:integer.
  forall result____split_fields8:bool.
  forall result____split_fields9:integer. forall i3:int.
  forall search_ter_p__search__result8:bool.
  forall search_ter_p__search__result9:integer. forall temp___2022:int.
  forall result13:int__ref. forall temp___2023:int. forall result14:int__ref.
  forall i4:int. forall result15:bool. forall result16:us_split_fields__ref.
  forall result____split_fields10:us_split_fields.
  forall result17:us_split_fields__ref.
  forall result____split_fields11:us_split_fields.
  forall result18:option__ref. forall search_ter_p__search__result10:us_rep.
  forall result____split_fields12:us_split_fields__ref. forall i5:int__ref.
  forall search_ter_p__search__result11:option__ref.
  forall temp___2024:int__ref.
  forall result____split_fields13:us_split_fields. forall i6:int.
  forall search_ter_p__search__result12:us_rep. forall temp___2025:int.
  forall result____split_fields14:us_split_fields__ref. forall i7:int__ref.
  forall search_ter_p__search__result13:option__ref.
  forall result____split_fields15:us_split_fields. forall i8:int.
  forall search_ter_p__search__result14:us_rep.
  forall result____split_fields16:us_split_fields__ref. forall i9:int__ref.
  forall search_ter_p__search__result15:option__ref.
  forall result____split_fields17:us_split_fields. forall i10:int.
  forall search_ter_p__search__result16:us_rep. forall result19:option__ref.
  forall search_ter_p__search__result17:us_rep.
  forall search_ter_p__search__result18:option__ref.
  forall search_ter_p__search__result19:us_rep.
  forall result____split_fields18:us_split_fields__ref. forall i11:int__ref.
  forall search_ter_p__search__result20:option__ref.
  forall result____split_fields19:us_split_fields. forall i12:int.
  forall search_ter_p__search__result21:us_rep.
  forall result____split_fields20:us_split_fields__ref. forall i13:int__ref.
  forall search_ter_p__search__result22:option__ref.
  forall result____split_fields21:us_split_fields. forall i14:int.
  forall search_ter_p__search__result23:us_rep.
  forall result____split_fields22:us_split_fields__ref. forall i15:int__ref.
  forall search_ter_p__search__result24:option__ref.
  forall result____split_fields23:us_split_fields. forall i16:int.
  forall search_ter_p__search__result25:us_rep. forall result20:bool.
  (dynamic_property(1, 2147483647, to_rep(first(a1)), to_rep(last(a1))) ->
  (dynamic_property(1, 2147483647, to_rep(first(b1)), to_rep(last(b1))) ->
  (((to_rep(last(a1)) <  2147483647) and
  (to_rep(first(b1)) <= to_rep(last(b1)))) -> (((((((to_rep(o) = 1) and
  ((of_int(0) = o1) and (o = o2))) and
  ((search_ter_p__search__result__assume = o1) and
  (search_ter_p__search__result__assume1 = o2))) and (({
  us_split_fields__content = { rec__types__option__exists = result;
  rec__types__option__value = result1 } } = { us_split_fields__content = {
  rec__types__option__exists = result____split_fields;
  rec__types__option__value = result____split_fields1 } }) and
  ((search_ter_p__search__result__assume = result____split_fields2) and
  (search_ter_p__search__result__assume1 = result____split_fields3)))) and
  (((((search_ter_p__search__result22 = { option__content = {
  us_split_fields1 = { rec__types__option__exists =
  search_ter_p__search__result4; rec__types__option__value =
  search_ter_p__search__result5 } } }) and ((i13 = { int__content = i }) and
  (result____split_fields20 = { us_split_fields__content = {
  rec__types__option__exists = result____split_fields2;
  rec__types__option__value = result____split_fields3 } }))) and
  ((search_ter_p__search__result23 = { us_split_fields1 = {
  rec__types__option__exists = search_ter_p__search__result4;
  rec__types__option__value = search_ter_p__search__result5 } }) and
  ((i14 = i1) and (result____split_fields21 = { rec__types__option__exists =
  result____split_fields2; rec__types__option__value =
  result____split_fields3 })))) and ((((length({ elts = a; rt = a1
  }) <  length({ elts = b; rt = b1 })) and (result2 = true)) or
  ((not (length({ elts = a; rt = a1 }) <  length({ elts = b; rt = b1 }))) and
  (((length({ elts = b; rt = b1 }) = 0) and (result2 = true)) or
  ((not (length({ elts = b; rt = b1 }) = 0)) and (result2 = false))))) and
  ((result2 = true) and (((result3 = search_ter_p__search__result) and
  (result4 = search_ter_p__search__result1)) and
  ((search_ter_p__search__result4 = result____split_fields2) and
  (search_ter_p__search__result5 = result____split_fields3)))))) or
  (((((length({ elts = a; rt = a1 }) <  length({ elts = b; rt = b1 })) and
  (result2 = true)) or ((not (length({ elts = a; rt = a1 }) <  length({
  elts = b; rt = b1 }))) and (((length({ elts = b; rt = b1 }) = 0) and
  (result2 = true)) or ((not (length({ elts = b; rt = b1 }) = 0)) and
  (result2 = false))))) and ((not (result2 = true)) and
  (((search_ter_p__search__result = search_ter_p__search__result4) and
  (search_ter_p__search__result1 = search_ter_p__search__result5)) and ({
  us_split_fields1 = { rec__types__option__exists =
  search_ter_p__search__result4; rec__types__option__value =
  search_ter_p__search__result5 } } = { us_split_fields1 = {
  rec__types__option__exists = search_ter_p__search__result2;
  rec__types__option__value = search_ter_p__search__result3 } })))) and
  ((((search_ter_p__search__result22 = search_ter_p__search__result20) and
  ((i13 = i11) and
  (result____split_fields20 = result____split_fields18))) and
  ((search_ter_p__search__result23 = search_ter_p__search__result21) and
  ((i14 = i12) and
  (result____split_fields21 = result____split_fields19)))) and
  (((((search_ter_p__search__result20 = search_ter_p__search__result11) and
  ((i11 = i5) and (result____split_fields18 = result____split_fields12))) and
  ((search_ter_p__search__result21 = search_ter_p__search__result12) and
  ((i12 = i6) and
  (result____split_fields19 = result____split_fields13)))) and
  ((temp___203 = to_rep(first(a1))) and (((((o3 = length({ elts = b; rt = b1
  })) and in_range1(length({ elts = b; rt = b1 }))) and
  (((o4 = (to_rep(last(a1)) + 1)) and in_range1((to_rep(last(a1)) + 1))) and
  (o5 = (o4 - o3)))) and ((temp___204 = o5) and in_range1(o5))) and ((({
  int__content = result5 } = { int__content = i }) and (i2 = temp___203)) and
  (((temp___203 <= i2) and (i2 <= temp___204)) and
  (((temp___201 = result____split_fields2) and
  (temp___2011 = result____split_fields3)) and ((temp___200 = i2) and
  ((0 = temp___202) and (((((temp___2024 = { int__content = temp___202 }) and
  ((search_ter_p__search__result11 = { option__content = { us_split_fields1 =
  { rec__types__option__exists = search_ter_p__search__result6;
  rec__types__option__value = search_ter_p__search__result7 } } }) and
  ((i5 = { int__content = i2 }) and (result____split_fields12 = {
  us_split_fields__content = { rec__types__option__exists =
  result____split_fields6; rec__types__option__value =
  result____split_fields7 } })))) and ((temp___2025 = temp___2021) and
  ((search_ter_p__search__result12 = { us_split_fields1 = {
  rec__types__option__exists = search_ter_p__search__result6;
  rec__types__option__value = search_ter_p__search__result7 } }) and
  ((i6 = i2) and (result____split_fields13 = { rec__types__option__exists =
  result____split_fields6; rec__types__option__value =
  result____split_fields7 }))))) and (((result6 = equal_subrange({ elts = a;
  rt = a1 }, i2, { elts = b; rt = b1 })) and ((result6 = true) <->
  (bool_eq4(a, to_rep(first2(mk1(i2, ((i2 - 1) + length({ elts = b; rt = b1
  }))))), to_rep(last2(mk1(i2, ((i2 - 1) + length({ elts = b; rt = b1 }))))),
  b, to_rep(first(b1)), to_rep(last(b1))) = true))) and ((result6 = true) and
  ((((result7 = result____split_fields2) and
  (result8 = result____split_fields3)) and
  ((of_int(1) = result____split_fields4) and
  (result____split_fields3 = result____split_fields5))) and
  (((((to_rep(o6) = i2) and ((result____split_fields4 = o7) and
  (o6 = o8))) and ((temp___199 = o7) and (temp___1991 = o8))) and
  (((result9 = result____split_fields4) and
  (result10 = result____split_fields5)) and
  ((temp___199 = result____split_fields6) and
  (temp___1991 = result____split_fields7)))) and
  (((result11 = search_ter_p__search__result4) and
  (result12 = search_ter_p__search__result5)) and
  ((search_ter_p__search__result6 = result____split_fields6) and
  (search_ter_p__search__result7 = result____split_fields7)))))))) or
  ((((result6 = equal_subrange({ elts = a; rt = a1 }, i2, { elts = b; rt = b1
  })) and ((result6 = true) <-> (bool_eq4(a, to_rep(first2(mk1(i2,
  ((i2 - 1) + length({ elts = b; rt = b1 }))))), to_rep(last2(mk1(i2,
  ((i2 - 1) + length({ elts = b; rt = b1 }))))), b, to_rep(first(b1)),
  to_rep(last(b1))) = true))) and ((not (result6 = true)) and (({
  us_split_fields1 = { rec__types__option__exists =
  search_ter_p__search__result6; rec__types__option__value =
  search_ter_p__search__result7 } } = { us_split_fields1 = {
  rec__types__option__exists = search_ter_p__search__result4;
  rec__types__option__value = search_ter_p__search__result5 } }) and ({
  rec__types__option__exists = result____split_fields6;
  rec__types__option__value = result____split_fields7 } = {
  rec__types__option__exists = result____split_fields2;
  rec__types__option__value = result____split_fields3 })))) and
  ((((temp___2024 = { int__content = temp___2023 }) and
  ((search_ter_p__search__result11 = { option__content =
  search_ter_p__search__result10 }) and ((i5 = { int__content = i4 }) and
  (result____split_fields12 = { us_split_fields__content =
  result____split_fields11 })))) and ((temp___2025 = temp___2023) and
  ((search_ter_p__search__result12 = search_ter_p__search__result10) and
  ((i6 = i4) and
  (result____split_fields13 = result____split_fields11))))) and
  (((not (has_sub_range_in_prefix({ elts = a; rt = a1 }, i3, { elts = b; rt =
  b1 }) = true)) and (not (result____split_fields8 = true))) and
  ((((to_rep(first(a1)) <= ((to_rep(last(a1)) + 1) - length({ elts = b; rt =
  b1 }))) -> dynamic_property3(to_rep(first(a1)),
  ((to_rep(last(a1)) + 1) - length({ elts = b; rt = b1 })), i3)) and
  ((to_rep(first(a1)) <= i3) and (i3 <= ((to_rep(last(a1)) + 1) - length({
  elts = b; rt = b1 }))))) and (((result13 = { int__content = temp___2022
  }) and (temp___2023 = i3)) and ((not (i3 = temp___204)) and (((result14 = {
  int__content = i3 }) and (i4 = (i3 + 1))) and
  (((result15 = equal_subrange({ elts = a; rt = a1 }, i4, { elts = b; rt = b1
  })) and ((result15 = true) <-> (bool_eq4(a, to_rep(first2(mk1(i4,
  ((i4 - 1) + length({ elts = b; rt = b1 }))))), to_rep(last2(mk1(i4,
  ((i4 - 1) + length({ elts = b; rt = b1 }))))), b, to_rep(first(b1)),
  to_rep(last(b1))) = true))) and ((result15 = true) and (((result16 = {
  us_split_fields__content = { rec__types__option__exists =
  result____split_fields8; rec__types__option__value =
  result____split_fields9 } }) and (result____split_fields10 = {
  rec__types__option__exists = of_int(1); rec__types__option__value =
  result____split_fields9 })) and (((((to_rep(o9) = i4) and
  (((result____split_fields10).rec__types__option__exists = o10) and
  (o9 = o11))) and ((temp___1992 = o10) and (temp___1993 = o11))) and
  ((result17 = { us_split_fields__content = result____split_fields10 }) and
  (result____split_fields11 = { rec__types__option__exists = temp___1992;
  rec__types__option__value = temp___1993 }))) and ((result18 = {
  option__content = { us_split_fields1 = { rec__types__option__exists =
  search_ter_p__search__result8; rec__types__option__value =
  search_ter_p__search__result9 } } }) and
  (search_ter_p__search__result10 = { us_split_fields1 =
  result____split_fields11 })))))))))))))))))))))) or ((((((o3 = length({
  elts = b; rt = b1 })) and in_range1(length({ elts = b; rt = b1 }))) and
  (((o4 = (to_rep(last(a1)) + 1)) and in_range1((to_rep(last(a1)) + 1))) and
  (o5 = (o4 - o3)))) and ((temp___204 = o5) and in_range1(o5))) and ((({
  int__content = result5 } = { int__content = i }) and
  (i2 = to_rep(first(a1)))) and ((((to_rep(first(a1)) <= i2) and
  (i2 <= temp___204)) and (((((temp___201 = result____split_fields2) and
  (temp___2011 = result____split_fields3)) and ((temp___200 = i2) and
  ((0 = temp___202) and ((((result6 = equal_subrange({ elts = a; rt = a1 },
  i2, { elts = b; rt = b1 })) and ((result6 = true) <-> (bool_eq4(a,
  to_rep(first2(mk1(i2, ((i2 - 1) + length({ elts = b; rt = b1 }))))),
  to_rep(last2(mk1(i2, ((i2 - 1) + length({ elts = b; rt = b1 }))))), b,
  to_rep(first(b1)), to_rep(last(b1))) = true))) and
  ((not (result6 = true)) and (({ us_split_fields1 = {
  rec__types__option__exists = search_ter_p__search__result6;
  rec__types__option__value = search_ter_p__search__result7 } } = {
  us_split_fields1 = { rec__types__option__exists =
  search_ter_p__search__result4; rec__types__option__value =
  search_ter_p__search__result5 } }) and ({ rec__types__option__exists =
  result____split_fields6; rec__types__option__value =
  result____split_fields7 } = { rec__types__option__exists =
  result____split_fields2; rec__types__option__value =
  result____split_fields3 })))) and (((not (has_sub_range_in_prefix({ elts =
  a; rt = a1 }, i3, { elts = b; rt = b1 }) = true)) and
  (not (result____split_fields8 = true))) and
  ((((to_rep(first(a1)) <= ((to_rep(last(a1)) + 1) - length({ elts = b; rt =
  b1 }))) -> dynamic_property3(to_rep(first(a1)),
  ((to_rep(last(a1)) + 1) - length({ elts = b; rt = b1 })), i3)) and
  ((to_rep(first(a1)) <= i3) and (i3 <= ((to_rep(last(a1)) + 1) - length({
  elts = b; rt = b1 }))))) and (((result13 = { int__content = temp___2022
  }) and (temp___2023 = i3)) and (i3 = temp___204)))))))) and
  (((search_ter_p__search__result13 = { option__content = {
  us_split_fields1 = { rec__types__option__exists =
  search_ter_p__search__result8; rec__types__option__value =
  search_ter_p__search__result9 } } }) and ((i7 = { int__content = i3 }) and
  (result____split_fields14 = { us_split_fields__content = {
  rec__types__option__exists = result____split_fields8;
  rec__types__option__value = result____split_fields9 } }))) and
  ((search_ter_p__search__result14 = { us_split_fields1 = {
  rec__types__option__exists = search_ter_p__search__result8;
  rec__types__option__value = search_ter_p__search__result9 } }) and
  ((i8 = i3) and (result____split_fields15 = { rec__types__option__exists =
  result____split_fields8; rec__types__option__value =
  result____split_fields9 }))))) and
  (((search_ter_p__search__result15 = search_ter_p__search__result13) and
  ((i9 = i7) and (result____split_fields16 = result____split_fields14))) and
  ((search_ter_p__search__result16 = search_ter_p__search__result14) and
  ((i10 = i8) and
  (result____split_fields17 = result____split_fields15)))))) or
  ((not ((to_rep(first(a1)) <= i2) and (i2 <= temp___204))) and
  (((search_ter_p__search__result15 = { option__content = {
  us_split_fields1 = { rec__types__option__exists =
  search_ter_p__search__result4; rec__types__option__value =
  search_ter_p__search__result5 } } }) and ((i9 = { int__content = i2 }) and
  (result____split_fields16 = { us_split_fields__content = {
  rec__types__option__exists = result____split_fields2;
  rec__types__option__value = result____split_fields3 } }))) and
  ((search_ter_p__search__result16 = { us_split_fields1 = {
  rec__types__option__exists = search_ter_p__search__result4;
  rec__types__option__value = search_ter_p__search__result5 } }) and
  ((i10 = i2) and (result____split_fields17 = { rec__types__option__exists =
  result____split_fields2; rec__types__option__value =
  result____split_fields3 })))))))) and
  ((((search_ter_p__search__result20 = search_ter_p__search__result18) and
  ((i11 = i9) and (result____split_fields18 = result____split_fields16))) and
  ((search_ter_p__search__result21 = search_ter_p__search__result19) and
  ((i12 = i10) and
  (result____split_fields19 = result____split_fields17)))) and
  (((search_ter_p__search__result18 = { option__content =
  search_ter_p__search__result17 }) and
  (search_ter_p__search__result19 = search_ter_p__search__result17)) and
  ((result19 = search_ter_p__search__result15) and
  (search_ter_p__search__result17 = { us_split_fields1 =
  (result____split_fields16).us_split_fields__content })))))))))) and
  (((search_ter_p__search__result24 = search_ter_p__search__result22) and
  ((i15 = i13) and
  (result____split_fields22 = result____split_fields20))) and
  ((search_ter_p__search__result25 = search_ter_p__search__result23) and
  ((i16 = i14) and
  (result____split_fields23 = result____split_fields21))))) ->
  ((((bool_eq(length({ elts = b; rt = b1 }), 0) = true) and
  (not ((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__exists = true))) or
  (not (bool_eq(length({ elts = b; rt = b1 }), 0) = true))) ->
  ((((bool_lt(length({ elts = a; rt = a1 }), length({ elts = b; rt = b1
  })) = true) and
  (not ((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__exists = true))) or
  (not (bool_lt(length({ elts = a; rt = a1 }), length({ elts = b; rt = b1
  })) = true))) -> ((match_bool(bool_ge(length({ elts = a; rt = a1 }),
  length({ elts = b; rt = b1 })), has_sub_range({ elts = a; rt = a1 }, {
  elts = b; rt = b1 }), false) = true) ->
  (((((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__exists = true) and
  ((result20 = equal_subrange({ elts = a; rt = a1 },
  to_rep((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__value),
  { elts = b; rt = b1 })) and ((result20 = true) <-> (bool_eq4(a,
  to_rep(first2(mk1(to_rep((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__value),
  ((to_rep((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__value) - 1) + length({
  elts = b; rt = b1 }))))),
  to_rep(last2(mk1(to_rep((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__value),
  ((to_rep((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__value) - 1) + length({
  elts = b; rt = b1 }))))), b, to_rep(first(b1)),
  to_rep(last(b1))) = true)))) or
  ((not ((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__exists = true)) and
  (result20 = false))) -> ((result20 = true) ->
  ((to_rep(first(a1)) <  to_rep((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__value)) ->
  in_range1((to_rep((((search_ter_p__search__result24).option__content).us_split_fields1).rec__types__option__value) - 1)))))))))))))
