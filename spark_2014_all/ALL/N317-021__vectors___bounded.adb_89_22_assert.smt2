;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort capacity_range 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (capacity_range capacity_range) Bool)

(declare-const dummy capacity_range)

(declare-datatypes ()
((capacity_range__ref
 (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__bounded__vect__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range
  (rec__bounded__vect__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__bounded__vect__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields)) us_main_type
  (rec__bounded__vect__vector a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const bounded__vect__vector__capacity__first__bit Int)

(declare-const bounded__vect__vector__capacity__last__bit Int)

(declare-const bounded__vect__vector__capacity__position Int)

;; bounded__vect__vector__capacity__first__bit_axiom
  (assert (<= 0 bounded__vect__vector__capacity__first__bit))

;; bounded__vect__vector__capacity__last__bit_axiom
  (assert
  (< bounded__vect__vector__capacity__first__bit bounded__vect__vector__capacity__last__bit))

;; bounded__vect__vector__capacity__position_axiom
  (assert (<= 0 bounded__vect__vector__capacity__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((vector__ref (mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep (vector__content
                                                              a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(declare-fun to_rep (capacity_range) Int)

(declare-fun of_rep (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(define-fun capacity ((container us_rep)) Int (ite (= (of_int 1) true)
                                              (to_rep
                                              (rec__bounded__vect__vector__capacity
                                              (us_split_discrs1 container)))
                                              2147483647))

(declare-fun capacity__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_201 Int)
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool (=>
                                      (or (= temp___is_init_198 true)
                                      (<= 0 2147483647)) (in_range
                                      temp___expr_201)))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant result true
     false true))) :pattern ((length container)) )))

(declare-fun empty_vector (tuple0) us_rep)

(declare-fun empty_vector__function_guard (us_rep tuple0) Bool)

;; empty_vector__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (length (empty_vector us_void_param)) 0) :pattern ((empty_vector
                                                           us_void_param)) )))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content
                                                                   a))

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(define-fun oeq1 ((left us_rep1)
  (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

(declare-fun model__ (us_rep) us_rep1)

(declare-fun model____function_guard (us_rep1 us_rep) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

(define-fun last_index ((container us_rep)) Int (last (model__ container)))

(declare-fun last_index__function_guard (Int us_rep) Bool)

(declare-sort extended_index 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (extended_index extended_index) Bool)

(declare-const dummy3 extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant1 ((temp___expr_195 Int)
  (temp___is_init_192 Bool) (temp___skip_constant_193 Bool)
  (temp___do_toplevel_194 Bool)) Bool (=>
                                      (or (= temp___is_init_192 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_195)))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-fun copy (us_rep Int) us_rep)

(declare-fun copy__function_guard (us_rep us_rep Int) Bool)

;; copy__post_axiom
  (assert
  (forall ((source us_rep))
  (forall ((capacity1 Int))
  (! (=>
     (and (dynamic_invariant capacity1 true true true)
     (=> (= (of_int 1) true)
     (or (= capacity1 0) (<= (length source) capacity1))))
     (let ((result (copy source capacity1)))
     (and (= (oeq1 (model__ result) (model__ source)) true)
     (ite (= capacity1 0)
     (= (to_rep
        (rec__bounded__vect__vector__capacity (us_split_discrs1 result)))
     (length source))
     (= (to_rep
        (rec__bounded__vect__vector__capacity (us_split_discrs1 result))) capacity1))))) :pattern (
  (copy source capacity1)) ))))

(declare-fun first_index__function_guard (Int us_rep) Bool)

(declare-sort index_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (index_type index_type) Bool)

(declare-const dummy4 index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type
  (index_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_183 Int)
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)) Bool (=>
                                      (or (= temp___is_init_180 true)
                                      (<= 1 2147483647)) (in_range3
                                      temp___expr_183)))

(define-fun element ((container us_rep)
  (index Int)) Int (get (model__ container) index))

(declare-fun element__function_guard (Int us_rep Int) Bool)

(declare-sort element_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (element_type element_type) Bool)

(declare-const dummy5 element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_189 Int)
  (temp___is_init_186 Bool) (temp___skip_constant_187 Bool)
  (temp___do_toplevel_188 Bool)) Bool (=>
                                      (or (= temp___is_init_186 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range4 temp___expr_189)))

(define-fun equal_except ((left us_rep1) (right us_rep1)
  (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (=
                                                                    (get left
                                                                    i)
                                                                    (get
                                                                    right i)))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep1 us_rep1 Int) Bool)

(define-fun ole ((left us_rep1)
  (right us_rep1)) Bool (and (<= (length1 left) (length1 right)) (ite
                                                                 (forall
                                                                 ((n Int))
                                                                 (=>
                                                                 (and
                                                                 (<= 1 n)
                                                                 (<= n
                                                                 (last left)))
                                                                 (= (get left
                                                                    n)
                                                                 (get right
                                                                 n)))) true
                                                                 false)))

(declare-fun ole__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun range_shifted ((left us_rep1) (right us_rep1) (fst Int) (lst Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst i) (<= i lst))
                               (= (get left i) (get right (+ i offset)))))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst offset) i)
                                           (<= i (+ lst offset)))
                                           (= (get left (- i offset))
                                           (get right i))))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep1 us_rep1 Int Int
  Int) Bool)

(define-fun olt ((left us_rep1)
  (right us_rep1)) Bool (and (< (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun olt__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun m_elements_reversed ((left us_rep1)
  (right us_rep1)) Bool (and (and (= (length1 left) (length1 right))
  (ite (forall ((i Int))
       (=> (and (<= 1 i) (<= i (last left)))
       (= (get left i) (get right (+ (- (last left) i) 1)))))
  true false)) (ite (forall ((i Int))
                    (=> (and (<= 1 i) (<= i (last right)))
                    (= (get right i) (get left (+ (- (last left) i) 1)))))
               true false)))

(declare-fun m_elements_reversed__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun equal_except__2 ((left us_rep1) (right us_rep1) (x Int)
  (y Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall
                                                             ((i Int))
                                                             (=>
                                                             (and (<= 1 i)
                                                             (<= i (last
                                                                   left)))
                                                             (=>
                                                             (and
                                                             (not (= i x))
                                                             (not (= i y)))
                                                             (= (get left i)
                                                             (get right i)))))
                                                        true false)))

(declare-fun equal_except__2__function_guard (Bool us_rep1 us_rep1 Int
  Int) Bool)

(define-fun m_elements_swapped ((left us_rep1) (right us_rep1) (x Int)
  (y Int)) Bool (and (and (and (= (length1 left) (length1 right)) (=
  (get left x) (get right y))) (= (get left y) (get right x))) (equal_except__2
                                                               left right x
                                                               y)))

(declare-fun m_elements_swapped__function_guard (Bool us_rep1 us_rep1 Int
  Int) Bool)

(define-fun first_element ((container us_rep)) Int (get (model__ container)
                                                   1))

(declare-fun first_element__function_guard (Int us_rep) Bool)

(define-fun last_element ((container us_rep)) Int (get (model__ container)
                                                  (last_index container)))

(declare-fun last_element__function_guard (Int us_rep) Bool)

(declare-fun find_index (us_rep Int Int) Int)

(declare-fun find_index__function_guard (Int us_rep Int Int) Bool)

(define-fun contains ((container us_rep1) (fst Int) (lst Int)
  (item Int)) Bool (ite (exists ((i Int))
                        (and (and (<= fst i) (<= i lst))
                        (= (get container i) item)))
                   true false))

(declare-fun contains__function_guard (Bool us_rep1 Int Int Int) Bool)

;; find_index__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int) (index Int))
  (! (=>
     (and (dynamic_invariant3 item true true true) (dynamic_invariant2 index
     true true true))
     (let ((result (find_index container item index)))
     (and
     (ite (or (< (last_index container) index)
          (not
          (= (contains (model__ container) index (last_index container) item) true)))
     (= result 0)
     (and
     (and (and (<= index result) (<= result (last_index container)))
     (= (get (model__ container) result) item))
     (not (= (contains (model__ container) index (- result 1) item) true))))
     (dynamic_invariant1 result true false true)))) :pattern ((find_index
                                                              container item
                                                              index)) ))))

(declare-fun reverse_find_index (us_rep Int Int) Int)

(declare-fun reverse_find_index__function_guard (Int us_rep Int Int) Bool)

;; reverse_find_index__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int) (index Int))
  (! (=>
     (and (dynamic_invariant3 item true true true) (dynamic_invariant2 index
     true true true))
     (let ((result (reverse_find_index container item index)))
     (and
     (ite (not
          (= (contains (model__ container) 1
             (ite (<= index (last_index container)) index
             (last_index container)) item) true))
     (= result 0)
     (and
     (and
     (and (and (<= 1 result) (<= result index))
     (<= result (last_index container)))
     (= (get (model__ container) result) item))
     (not
     (= (contains (model__ container) (+ result 1)
        (ite (<= index (last_index container)) index (last_index container))
        item) true))))
     (dynamic_invariant1 result true false true)))) :pattern ((reverse_find_index
                                                              container item
                                                              index)) ))))

(declare-fun contains1 (us_rep Int) Bool)

(declare-fun contains__function_guard1 (Bool us_rep Int) Bool)

;; contains__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int))
  (! (=> (dynamic_invariant3 item true true true)
     (= (= (contains1 container item) true)
     (= (contains (model__ container) 1 (last_index container) item) true))) :pattern (
  (contains1 container item)) ))))

(define-fun has_element ((container us_rep)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position
                                                             (last_index
                                                             container)) true
                                                             false)))

(declare-fun has_element__function_guard (Bool us_rep Int) Bool)

(declare-fun is_sorted (us_rep) Bool)

(declare-fun is_sorted__function_guard (Bool us_rep) Bool)

(declare-fun lt (Int Int) Bool)

(declare-fun lt__function_guard (Bool Int Int) Bool)

(define-fun m_elements_sorted ((container us_rep1)) Bool (ite (forall
                                                              ((i Int))
                                                              (=>
                                                              (and (<= 1 i)
                                                              (<= i (last
                                                                    container)))
                                                              (forall
                                                              ((j Int))
                                                              (=>
                                                              (and (<= i j)
                                                              (<= j (last
                                                                    container)))
                                                              (or
                                                              (= (get
                                                                 container i)
                                                              (get container
                                                              j))
                                                              (= (lt
                                                                 (get
                                                                 container i)
                                                                 (get
                                                                 container j)) true))))))
                                                         true false))

(declare-fun m_elements_sorted__function_guard (Bool us_rep1) Bool)

;; is_sorted__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_sorted container) true)
     (= (m_elements_sorted (model__ container)) true)) :pattern ((is_sorted
                                                                 container)) )))

(define-fun m_elements_included ((left us_rep1) (l_fst Int) (l_lst Int)
  (right us_rep1) (r_fst Int)
  (r_lst Int)) Bool (ite (forall ((i Int))
                         (=> (and (<= l_fst i) (<= i l_lst))
                         (exists ((j Int))
                         (and (and (<= r_fst j) (<= j r_lst))
                         (= (get left i) (get right j))))))
                    true false))

(declare-fun m_elements_included__function_guard (Bool us_rep1 Int Int
  us_rep1 Int Int) Bool)

(define-fun in_range5 ((rec__bounded__vect__vector__capacity1 Int)
  (a us_rep)) Bool (= rec__bounded__vect__vector__capacity1 (to_rep
                                                            (rec__bounded__vect__vector__capacity
                                                            (us_split_discrs1
                                                            a)))))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const bounded__vect__vector__capacity__first__bit1 Int)

(declare-const bounded__vect__vector__capacity__last__bit1 Int)

(declare-const bounded__vect__vector__capacity__position1 Int)

;; bounded__vect__vector__capacity__first__bit_axiom
  (assert (<= 0 bounded__vect__vector__capacity__first__bit1))

;; bounded__vect__vector__capacity__last__bit_axiom
  (assert
  (< bounded__vect__vector__capacity__first__bit1 bounded__vect__vector__capacity__last__bit1))

;; bounded__vect__vector__capacity__position_axiom
  (assert (<= 0 bounded__vect__vector__capacity__position1))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes () ((tvS__ref (mk_tvS__ref (tvS__content us_rep)))))
(define-fun tvS__ref___projection ((a tvS__ref)) us_rep (tvS__content a))

(define-fun dynamic_invariant4 ((temp___expr_333 us_rep)
  (temp___is_init_330 Bool) (temp___skip_constant_331 Bool)
  (temp___do_toplevel_332 Bool)) Bool (=>
                                      (not (= temp___skip_constant_331 true))
                                      (in_range5 5 temp___expr_333)))

(define-fun default_initial_assumption ((temp___expr_335 us_rep)
  (temp___skip_top_level_336 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__bounded__vect__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_335))) 5)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_336 true))
                                         (= (is_empty temp___expr_335) true))))

(declare-const v__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const w__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort integer 0)

(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range6 temp___expr_15)))

;; lt__post_axiom
  (assert true)

;; lt__def_axiom
  (assert
  (forall ((left Int) (right Int))
  (! (= (= (lt left right) true) (< left right)) :pattern ((lt left right)) )))

(declare-sort count_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (count_type count_type) Bool)

(declare-const dummy8 count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(define-fun dynamic_invariant6 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 2147483647)) (in_range7
                                      temp___expr_141)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq2 a b) (oeq1 a b)) :pattern ((user_eq2 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_235 us_rep1)
  (temp___skip_top_level_236 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_236 true))
                                         (= (length1 temp___expr_235) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length1 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

(declare-sort extended_index1 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (extended_index1 extended_index1) Bool)

(declare-const dummy9 extended_index1)

(declare-datatypes ()
((extended_index__ref1
 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref1)) extended_index1
  (extended_index__content1 a))

(define-fun dynamic_invariant7 ((temp___expr_228 Int)
  (temp___is_init_225 Bool) (temp___skip_constant_226 Bool)
  (temp___do_toplevel_227 Bool)) Bool (=>
                                      (or (= temp___is_init_225 true)
                                      (<= 0 2147483647)) (in_range8
                                      temp___expr_228)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant6 result true false
     true))) :pattern ((length1 container)) )))

(declare-sort element_type1 0)

(define-fun in_range9 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (element_type1 element_type1) Bool)

(declare-const dummy10 element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant8 ((temp___expr_222 Int)
  (temp___is_init_219 Bool) (temp___skip_constant_220 Bool)
  (temp___do_toplevel_221 Bool)) Bool (=>
                                      (or (= temp___is_init_219 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range9 temp___expr_222)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant7 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant8 (get container position) true false true)) :pattern (
  (get container position)) ))))

(declare-const v__split_fields us_main_type)

(declare-const w__split_fields us_main_type)

(declare-const us Int)

(declare-const bounded__test__B_1__w__assume capacity_range)

(declare-const bounded__test__B_1__w__assume1 us_main_type)

(declare-const o capacity_range)

(declare-const o1 us_main_type)

(declare-const bounded__vect__clear__container__fields us_main_type)

(declare-const result us_main_type)

(declare-const v__split_fields1 us_main_type)

(declare-const bounded__vect__append__2__container__fields us_main_type)

(declare-const result1 us_main_type)

(declare-const v__split_fields2 us_main_type)

(declare-const bounded__vect__append__2__container__fields1 us_main_type)

(declare-const result2 us_main_type)

(declare-const v__split_fields3 us_split_fields)

(declare-const bounded__vect__append__2__container__fields2 us_split_fields)

(declare-const result3 us_split_fields__ref)

(declare-const v__split_fields4 us_split_fields)

(declare-const bounded__vect__reserve_capacity__container__fields us_split_fields)

(declare-const result4 us_split_fields__ref)

(declare-const v__split_fields5 us_split_fields)

(declare-const result5 us_split_fields__ref)

(declare-const w__split_fields1 us_split_fields)

(declare-const w__split_fields2 us_split_fields)

(declare-const w__split_fields3 us_split_fields)

(declare-const bounded__vect__replace_element__container__fields us_split_fields)

(declare-const result6 us_split_fields__ref)

(declare-const v__split_fields6 us_split_fields)

(declare-const bounded__vect__swap__container__fields us_split_fields)

(declare-const result7 us_split_fields__ref)

(declare-const v__split_fields7 us_split_fields)

(declare-const bounded__vect__delete_last__container__fields us_split_fields)

(declare-const result8 us_split_fields__ref)

(declare-const v__split_fields8 us_split_fields)

(declare-const bounded__vect__reverse_elements__container__fields us_split_fields)

(declare-const result9 us_split_fields__ref)

(declare-const v__split_fields9 us_split_fields)

(define-fun bounded__vect__append__2__container__fields3 () us_split_fields
  (mk___split_fields bounded__vect__append__2__container__fields1))

(define-fun v__split_fields10 () us_split_fields (mk___split_fields
                                                 v__split_fields2))

(define-fun bounded__vect__append__2__container__fields4 () us_split_fields
  (mk___split_fields bounded__vect__append__2__container__fields))

(define-fun v__split_fields11 () us_split_fields (mk___split_fields
                                                 v__split_fields1))

(define-fun bounded__vect__clear__container__fields1 () us_split_fields
  (mk___split_fields bounded__vect__clear__container__fields))

(define-fun o2 () us_rep (mk___rep (mk___split_discrs o)
                         (mk___split_fields o1)))

(define-fun bounded__test__B_1__w__assume2 () us_rep (mk___rep
                                                     (mk___split_discrs
                                                     bounded__test__B_1__w__assume)
                                                     (mk___split_fields
                                                     bounded__test__B_1__w__assume1)))

;; H
  (assert (and (= us 5) (in_range 5)))

;; H
  (assert (default_initial_assumption
  (mk___rep v__split_discrs (mk___split_fields v__split_fields)) false))

;; H
  (assert
  (= 5 (to_rep (rec__bounded__vect__vector__capacity v__split_discrs))))

;; H
  (assert
  (= (length
     (mk___rep v__split_discrs bounded__vect__clear__container__fields1)) 0))

;; H
  (assert (= result v__split_fields))

;; H
  (assert (= v__split_fields11 bounded__vect__clear__container__fields1))

;; H
  (assert (= (is_empty (mk___rep v__split_discrs v__split_fields11)) true))

;; H
  (assert
  (= (oeq (mk___rep v__split_discrs v__split_fields11) (empty_vector Tuple0)) true))

;; H
  (assert (= (capacity (mk___rep v__split_discrs v__split_fields11)) 5))

;; H
  (assert
  (and
  (and
  (= (length
     (mk___rep v__split_discrs bounded__vect__append__2__container__fields4)) (+
  (length (mk___rep v__split_discrs v__split_fields11)) 1))
  (= (olt (model__ (mk___rep v__split_discrs v__split_fields11))
     (model__
     (mk___rep v__split_discrs bounded__vect__append__2__container__fields4))) true))
  (= (get
     (model__
     (mk___rep v__split_discrs bounded__vect__append__2__container__fields4))
     (+ (last (model__ (mk___rep v__split_discrs v__split_fields11))) 1)) 1)))

;; H
  (assert (= result1 v__split_fields1))

;; H
  (assert (= v__split_fields10 bounded__vect__append__2__container__fields4))

;; H
  (assert
  (and
  (and
  (= (length
     (mk___rep v__split_discrs bounded__vect__append__2__container__fields3)) (+
  (length (mk___rep v__split_discrs v__split_fields10)) 1))
  (= (olt (model__ (mk___rep v__split_discrs v__split_fields10))
     (model__
     (mk___rep v__split_discrs bounded__vect__append__2__container__fields3))) true))
  (= (get
     (model__
     (mk___rep v__split_discrs bounded__vect__append__2__container__fields3))
     (+ (last (model__ (mk___rep v__split_discrs v__split_fields10))) 1)) 2)))

;; H
  (assert (= result2 v__split_fields2))

;; H
  (assert (= v__split_fields3 bounded__vect__append__2__container__fields3))

;; H
  (assert
  (and
  (and
  (= (length
     (mk___rep v__split_discrs bounded__vect__append__2__container__fields2)) (+
  (length (mk___rep v__split_discrs v__split_fields3)) 1))
  (= (olt (model__ (mk___rep v__split_discrs v__split_fields3))
     (model__
     (mk___rep v__split_discrs bounded__vect__append__2__container__fields2))) true))
  (= (get
     (model__
     (mk___rep v__split_discrs bounded__vect__append__2__container__fields2))
     (+ (last (model__ (mk___rep v__split_discrs v__split_fields3))) 1)) 3)))

;; H
  (assert (= result3 (mk___split_fields__ref v__split_fields3)))

;; H
  (assert (= v__split_fields4 bounded__vect__append__2__container__fields2))

;; H
  (assert
  (not (= (is_empty (mk___rep v__split_discrs v__split_fields4)) true)))

;; H
  (assert (= (length (mk___rep v__split_discrs v__split_fields4)) 3))

;; H
  (assert (= (capacity (mk___rep v__split_discrs v__split_fields4)) 5))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields4)) 1) 1))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields4)) 2) 2))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields4)) 3) 3))

;; H
  (assert
  (= (oeq1
     (model__
     (mk___rep v__split_discrs
     bounded__vect__reserve_capacity__container__fields))
     (model__ (mk___rep v__split_discrs v__split_fields4))) true))

;; H
  (assert (= result4 (mk___split_fields__ref v__split_fields4)))

;; H
  (assert
  (= v__split_fields5 bounded__vect__reserve_capacity__container__fields))

;; H
  (assert
  (not (= (is_empty (mk___rep v__split_discrs v__split_fields5)) true)))

;; H
  (assert (= (length (mk___rep v__split_discrs v__split_fields5)) 3))

;; H
  (assert (= (capacity (mk___rep v__split_discrs v__split_fields5)) 5))

;; H
  (assert
  (and
  (= bounded__test__B_1__w__assume2 (copy
                                    (mk___rep v__split_discrs
                                    v__split_fields5) 6))
  (and
  (= (oeq1 (model__ bounded__test__B_1__w__assume2)
     (model__ (mk___rep v__split_discrs v__split_fields5))) true)
  (ite (= 6 0)
  (= (to_rep bounded__test__B_1__w__assume) (length
                                            (mk___rep v__split_discrs
                                            v__split_fields5)))
  (= (to_rep bounded__test__B_1__w__assume) 6)))))

;; H
  (assert
  (= result5 (mk___split_fields__ref (mk___split_fields w__split_fields))))

;; H
  (assert
  (= w__split_fields1 (mk___split_fields bounded__test__B_1__w__assume1)))

;; H
  (assert
  (= w__split_discrs (mk___split_discrs bounded__test__B_1__w__assume)))

;; H
  (assert
  (not (= (is_empty (mk___rep w__split_discrs w__split_fields1)) true)))

;; H
  (assert (= (length (mk___rep w__split_discrs w__split_fields1)) 3))

;; H
  (assert (= (capacity (mk___rep w__split_discrs w__split_fields1)) 6))

;; H
  (assert
  (= (get (model__ (mk___rep w__split_discrs w__split_fields1)) 1) 1))

;; H
  (assert
  (= (get (model__ (mk___rep w__split_discrs w__split_fields1)) 2) 2))

;; H
  (assert
  (= (get (model__ (mk___rep w__split_discrs w__split_fields1)) 3) 3))

;; H
  (assert
  (and
  (and
  (= (length (mk___rep w__split_discrs w__split_fields2)) (+ (length
                                                             (mk___rep
                                                             w__split_discrs
                                                             w__split_fields1))
  (length (mk___rep v__split_discrs v__split_fields5))))
  (= (ole (model__ (mk___rep w__split_discrs w__split_fields1))
     (model__ (mk___rep w__split_discrs w__split_fields2))) true))
  (=> (< 0 (length (mk___rep v__split_discrs v__split_fields5)))
  (= (range_shifted (model__ (mk___rep v__split_discrs v__split_fields5))
     (model__ (mk___rep w__split_discrs w__split_fields2)) 1
     (last (model__ (mk___rep v__split_discrs v__split_fields5)))
     (+ (- (last (model__ (mk___rep w__split_discrs w__split_fields1))) 1) 1)) true))))

;; H
  (assert
  (not (= (is_empty (mk___rep w__split_discrs w__split_fields2)) true)))

;; H
  (assert (= (length (mk___rep w__split_discrs w__split_fields2)) 6))

;; H
  (assert (= (capacity (mk___rep w__split_discrs w__split_fields2)) 6))

;; H
  (assert
  (= (get (model__ (mk___rep w__split_discrs w__split_fields2)) 1) 1))

;; H
  (assert
  (= (get (model__ (mk___rep w__split_discrs w__split_fields2)) 2) 2))

;; H
  (assert
  (= (get (model__ (mk___rep w__split_discrs w__split_fields2)) 3) 3))

;; H
  (assert
  (= (get (model__ (mk___rep w__split_discrs w__split_fields2)) 4) 1))

;; H
  (assert
  (= (get (model__ (mk___rep w__split_discrs w__split_fields2)) 5) 2))

;; H
  (assert
  (= (get (model__ (mk___rep w__split_discrs w__split_fields2)) 6) 3))

;; H
  (assert (and (= o2 (empty_vector Tuple0)) (= (length o2) 0)))

;; H
  (assert
  (= (oeq1 (model__ (mk___rep w__split_discrs w__split_fields3))
     (model__ o2)) true))

;; H
  (assert (= (is_empty (mk___rep w__split_discrs w__split_fields3)) true))

;; H
  (assert
  (= (oeq (mk___rep w__split_discrs w__split_fields3) (empty_vector Tuple0)) true))

;; H
  (assert
  (and
  (and
  (= (length
     (mk___rep v__split_discrs
     bounded__vect__replace_element__container__fields)) (length
                                                         (mk___rep
                                                         v__split_discrs
                                                         v__split_fields5)))
  (= (get
     (model__
     (mk___rep v__split_discrs
     bounded__vect__replace_element__container__fields)) 2) 4))
  (= (equal_except (model__ (mk___rep v__split_discrs v__split_fields5))
     (model__
     (mk___rep v__split_discrs
     bounded__vect__replace_element__container__fields)) 2) true)))

;; H
  (assert (= result6 (mk___split_fields__ref v__split_fields5)))

;; H
  (assert
  (= v__split_fields6 bounded__vect__replace_element__container__fields))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields6)) 1) 1))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields6)) 2) 4))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields6)) 3) 3))

;; H
  (assert
  (= (m_elements_swapped
     (model__ (mk___rep v__split_discrs v__split_fields6))
     (model__
     (mk___rep v__split_discrs bounded__vect__swap__container__fields)) 1 3) true))

;; H
  (assert (= result7 (mk___split_fields__ref v__split_fields6)))

;; H
  (assert (= v__split_fields7 bounded__vect__swap__container__fields))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields7)) 1) 3))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields7)) 2) 4))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields7)) 3) 1))

;; H
  (assert
  (and
  (= (length
     (mk___rep v__split_discrs bounded__vect__delete_last__container__fields)) (-
  (length (mk___rep v__split_discrs v__split_fields7)) 1))
  (= (olt
     (model__
     (mk___rep v__split_discrs bounded__vect__delete_last__container__fields))
     (model__ (mk___rep v__split_discrs v__split_fields7))) true)))

;; H
  (assert (= result8 (mk___split_fields__ref v__split_fields7)))

;; H
  (assert (= v__split_fields8 bounded__vect__delete_last__container__fields))

;; H
  (assert
  (not (= (is_empty (mk___rep v__split_discrs v__split_fields8)) true)))

;; H
  (assert (= (length (mk___rep v__split_discrs v__split_fields8)) 2))

;; H
  (assert (= (capacity (mk___rep v__split_discrs v__split_fields8)) 5))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields8)) 1) 3))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields8)) 2) 4))

;; H
  (assert
  (= (m_elements_reversed
     (model__ (mk___rep v__split_discrs v__split_fields8))
     (model__
     (mk___rep v__split_discrs
     bounded__vect__reverse_elements__container__fields))) true))

;; H
  (assert (= result9 (mk___split_fields__ref v__split_fields8)))

;; H
  (assert
  (= v__split_fields9 bounded__vect__reverse_elements__container__fields))

;; H
  (assert
  (not (= (is_empty (mk___rep v__split_discrs v__split_fields9)) true)))

;; H
  (assert (= (length (mk___rep v__split_discrs v__split_fields9)) 2))

;; H
  (assert (= (capacity (mk___rep v__split_discrs v__split_fields9)) 5))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields9)) 1) 4))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields9)) 2) 3))

;; H
  (assert (= (last (model__ (mk___rep v__split_discrs v__split_fields9))) 2))

;; H
  (assert
  (= (get (model__ (mk___rep v__split_discrs v__split_fields9)) 1) 4))

;; H
  (assert (= (last_element (mk___rep v__split_discrs v__split_fields9)) 3))

(assert
;; WP_parameter_def
 ;; File "a-cofove.ads", line 807, characters 0-0
  (not (= (find_index (mk___rep v__split_discrs v__split_fields9) 0 1) 0)))
(check-sat)
(exit)
