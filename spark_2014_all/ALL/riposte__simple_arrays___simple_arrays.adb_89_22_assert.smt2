;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep (select a temp___idx_133)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep (select a temp___idx_133)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun temp___176 ((Array Int integer) Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___178 (Array Int integer)))
  (forall ((temp___179 Int) (temp___180 Int) (temp___181 Int)
  (temp___182 Int))
  (let ((temp___177 (temp___176 temp___178 temp___179 temp___180 temp___181
                    temp___182)))
  (forall ((temp___183 Int))
  (ite (= temp___183 temp___181)
  (= (select temp___177 temp___183) (of_rep temp___182))
  (ite (= temp___183 temp___179)
  (= (select temp___177 temp___183) (of_rep temp___180))
  (= (select temp___177 temp___183) (select temp___178 temp___183)))))))))

(declare-fun temp___185 ((Array Int integer) Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___187 (Array Int integer)))
  (forall ((temp___188 Int) (temp___189 Int) (temp___190 Int)
  (temp___191 Int))
  (let ((temp___186 (temp___185 temp___187 temp___188 temp___189 temp___190
                    temp___191)))
  (forall ((temp___192 Int))
  (ite (= temp___192 temp___190)
  (= (select temp___186 temp___192) (of_rep temp___191))
  (ite (= temp___192 temp___188)
  (= (select temp___186 temp___192) (of_rep temp___189))
  (= (select temp___186 temp___192) (select temp___187 temp___192)))))))))

(declare-fun temp___194 ((Array Int integer) Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___196 (Array Int integer)))
  (forall ((temp___197 Int) (temp___198 Int) (temp___199 Int)
  (temp___200 Int))
  (let ((temp___195 (temp___194 temp___196 temp___197 temp___198 temp___199
                    temp___200)))
  (forall ((temp___201 Int))
  (ite (= temp___201 temp___199)
  (= (select temp___195 temp___201) (of_rep temp___200))
  (ite (= temp___201 temp___197)
  (= (select temp___195 temp___201) (of_rep temp___198))
  (= (select temp___195 temp___201) (select temp___196 temp___201)))))))))

(declare-fun temp___296 ((Array Int integer) Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___298 (Array Int integer)))
  (forall ((temp___299 Int) (temp___300 Int) (temp___301 Int)
  (temp___302 Int))
  (let ((temp___297 (temp___296 temp___298 temp___299 temp___300 temp___301
                    temp___302)))
  (forall ((temp___303 Int))
  (ite (= temp___303 temp___301)
  (= (select temp___297 temp___303) (of_rep temp___302))
  (ite (= temp___303 temp___299)
  (= (select temp___297 temp___303) (of_rep temp___300))
  (= (select temp___297 temp___303) (select temp___298 temp___303)))))))))

(declare-fun temp___304 ((Array Int integer) Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___306 (Array Int integer)))
  (forall ((temp___307 Int) (temp___308 Int) (temp___309 Int)
  (temp___310 Int))
  (let ((temp___305 (temp___304 temp___306 temp___307 temp___308 temp___309
                    temp___310)))
  (forall ((temp___311 Int))
  (ite (= temp___311 temp___309)
  (= (select temp___305 temp___311) (of_rep temp___310))
  (ite (= temp___311 temp___307)
  (= (select temp___305 temp___311) (of_rep temp___308))
  (= (select temp___305 temp___311) (select temp___306 temp___311)))))))))

(declare-const a (Array Int integer))

;; H
  (assert (in_range1 n))

(assert
;; WP_parameter_def
 ;; File "simple_arrays.adb", line 10, characters 0-0
  (not
  (= (bool_eq (temp___296 a 1 5 n 6) (- 2147483648) 2147483647
     (temp___304 a n 6 1 5) (- 2147483648) 2147483647) true)))
(check-sat)
(exit)
