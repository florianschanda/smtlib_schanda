;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_82 us_t) (temp___is_init_79 Bool)
  (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-sort year_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 2000 x) (<= x 2099)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (year_type year_type) Bool)

(declare-const dummy4 year_type)

(declare-datatypes ()
((year_type__ref (mk_year_type__ref (year_type__content year_type)))))
(define-fun year_type__ref___projection ((a year_type__ref)) year_type
  (year_type__content a))

(declare-fun to_rep2 (year_type) Int)

(declare-fun of_rep2 (Int) year_type)

;; inversion_axiom
  (assert
  (forall ((x year_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x year_type)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort month_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (month_type month_type) Bool)

(declare-const dummy5 month_type)

(declare-datatypes ()
((month_type__ref (mk_month_type__ref (month_type__content month_type)))))
(define-fun month_type__ref___projection ((a month_type__ref)) month_type
  (month_type__content a))

(declare-fun to_rep3 (month_type) Int)

(declare-fun of_rep3 (Int) month_type)

;; inversion_axiom
  (assert
  (forall ((x month_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x month_type)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort day_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (day_type day_type) Bool)

(declare-const dummy6 day_type)

(declare-datatypes ()
((day_type__ref (mk_day_type__ref (day_type__content day_type)))))
(define-fun day_type__ref___projection ((a day_type__ref)) day_type (day_type__content
                                                                    a))

(declare-fun to_rep4 (day_type) Int)

(declare-fun of_rep4 (Int) day_type)

;; inversion_axiom
  (assert
  (forall ((x day_type))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x day_type)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__dates__date__day day_type)(rec__dates__date__month month_type)(rec__dates__date__year year_type)))))
(define-fun us_split_fields_Day__projection ((a us_split_fields)) day_type
  (rec__dates__date__day a))

(define-fun us_split_fields_Month__projection ((a us_split_fields)) month_type
  (rec__dates__date__month a))

(define-fun us_split_fields_Year__projection ((a us_split_fields)) year_type
  (rec__dates__date__year a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep4
                           (rec__dates__date__day (us_split_fields1 a)))
                        (to_rep4
                        (rec__dates__date__day (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__dates__date__month (us_split_fields1 a)))
                        (to_rep3
                        (rec__dates__date__month (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__dates__date__year (us_split_fields1 a)))
                        (to_rep2
                        (rec__dates__date__year (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const dates__date__day__first__bit Int)

(declare-const dates__date__day__last__bit Int)

(declare-const dates__date__day__position Int)

;; dates__date__day__first__bit_axiom
  (assert (<= 0 dates__date__day__first__bit))

;; dates__date__day__last__bit_axiom
  (assert (< dates__date__day__first__bit dates__date__day__last__bit))

;; dates__date__day__position_axiom
  (assert (<= 0 dates__date__day__position))

(declare-const dates__date__month__first__bit Int)

(declare-const dates__date__month__last__bit Int)

(declare-const dates__date__month__position Int)

;; dates__date__month__first__bit_axiom
  (assert (<= 0 dates__date__month__first__bit))

;; dates__date__month__last__bit_axiom
  (assert (< dates__date__month__first__bit dates__date__month__last__bit))

;; dates__date__month__position_axiom
  (assert (<= 0 dates__date__month__position))

(declare-const dates__date__year__first__bit Int)

(declare-const dates__date__year__last__bit Int)

(declare-const dates__date__year__position Int)

;; dates__date__year__first__bit_axiom
  (assert (<= 0 dates__date__year__first__bit))

;; dates__date__year__last__bit_axiom
  (assert (< dates__date__year__first__bit dates__date__year__last__bit))

;; dates__date__year__position_axiom
  (assert (<= 0 dates__date__year__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes () ((date__ref (mk_date__ref (date__content us_rep)))))
(define-fun date__ref___projection ((a date__ref)) us_rep (date__content a))

(declare-sort hour_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 23)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (hour_type hour_type) Bool)

(declare-const dummy8 hour_type)

(declare-datatypes ()
((hour_type__ref (mk_hour_type__ref (hour_type__content hour_type)))))
(define-fun hour_type__ref___projection ((a hour_type__ref)) hour_type
  (hour_type__content a))

(declare-fun to_rep5 (hour_type) Int)

(declare-fun of_rep5 (Int) hour_type)

;; inversion_axiom
  (assert
  (forall ((x hour_type))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x hour_type)) (! (in_range7
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort minute_type 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 59)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (minute_type minute_type) Bool)

(declare-const dummy9 minute_type)

(declare-datatypes ()
((minute_type__ref (mk_minute_type__ref (minute_type__content minute_type)))))
(define-fun minute_type__ref___projection ((a minute_type__ref)) minute_type
  (minute_type__content a))

(declare-fun to_rep6 (minute_type) Int)

(declare-fun of_rep6 (Int) minute_type)

;; inversion_axiom
  (assert
  (forall ((x minute_type))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x minute_type)) (! (in_range8
  (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-sort second_type 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 59)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (second_type second_type) Bool)

(declare-const dummy10 second_type)

(declare-datatypes ()
((second_type__ref (mk_second_type__ref (second_type__content second_type)))))
(define-fun second_type__ref___projection ((a second_type__ref)) second_type
  (second_type__content a))

(declare-fun to_rep7 (second_type) Int)

(declare-fun of_rep7 (Int) second_type)

;; inversion_axiom
  (assert
  (forall ((x second_type))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x second_type)) (! (in_range9
  (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                              (of_rep7 x))) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__dates__time__hour hour_type)(rec__dates__time__minute minute_type)(rec__dates__time__second second_type)))))
(define-fun us_split_fields_Hour__projection ((a us_split_fields2)) hour_type
  (rec__dates__time__hour a))

(define-fun us_split_fields_Minute__projection ((a us_split_fields2)) minute_type
  (rec__dates__time__minute a))

(define-fun us_split_fields_Second__projection ((a us_split_fields2)) second_type
  (rec__dates__time__second a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep5
                            (rec__dates__time__hour (us_split_fields3 a)))
                         (to_rep5
                         (rec__dates__time__hour (us_split_fields3 b))))
                         (= (to_rep6
                            (rec__dates__time__minute (us_split_fields3 a)))
                         (to_rep6
                         (rec__dates__time__minute (us_split_fields3 b)))))
                         (= (to_rep7
                            (rec__dates__time__second (us_split_fields3 a)))
                         (to_rep7
                         (rec__dates__time__second (us_split_fields3 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const dates__time__hour__first__bit Int)

(declare-const dates__time__hour__last__bit Int)

(declare-const dates__time__hour__position Int)

;; dates__time__hour__first__bit_axiom
  (assert (<= 0 dates__time__hour__first__bit))

;; dates__time__hour__last__bit_axiom
  (assert (< dates__time__hour__first__bit dates__time__hour__last__bit))

;; dates__time__hour__position_axiom
  (assert (<= 0 dates__time__hour__position))

(declare-const dates__time__minute__first__bit Int)

(declare-const dates__time__minute__last__bit Int)

(declare-const dates__time__minute__position Int)

;; dates__time__minute__first__bit_axiom
  (assert (<= 0 dates__time__minute__first__bit))

;; dates__time__minute__last__bit_axiom
  (assert (< dates__time__minute__first__bit dates__time__minute__last__bit))

;; dates__time__minute__position_axiom
  (assert (<= 0 dates__time__minute__position))

(declare-const dates__time__second__first__bit Int)

(declare-const dates__time__second__last__bit Int)

(declare-const dates__time__second__position Int)

;; dates__time__second__first__bit_axiom
  (assert (<= 0 dates__time__second__first__bit))

;; dates__time__second__last__bit_axiom
  (assert (< dates__time__second__first__bit dates__time__second__last__bit))

;; dates__time__second__position_axiom
  (assert (<= 0 dates__time__second__position))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-const dummy11 us_rep1)

(declare-datatypes () ((time__ref (mk_time__ref (time__content us_rep1)))))
(define-fun time__ref___projection ((a time__ref)) us_rep1 (time__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__dates__datetime__date_part us_rep)(rec__dates__datetime__time_part us_rep1)))))
(define-fun us_split_fields_Date_Part__projection ((a us_split_fields4)) us_rep
  (rec__dates__datetime__date_part a))

(define-fun us_split_fields_Time_Part__projection ((a us_split_fields4)) us_rep1
  (rec__dates__datetime__time_part a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (bool_eq2
                            (rec__dates__datetime__date_part
                            (us_split_fields5 a))
                            (rec__dates__datetime__date_part
                            (us_split_fields5 b))) true)
                         (= (bool_eq3
                            (rec__dates__datetime__time_part
                            (us_split_fields5 a))
                            (rec__dates__datetime__time_part
                            (us_split_fields5 b))) true))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-const dates__datetime__date_part__first__bit Int)

(declare-const dates__datetime__date_part__last__bit Int)

(declare-const dates__datetime__date_part__position Int)

;; dates__datetime__date_part__first__bit_axiom
  (assert (<= 0 dates__datetime__date_part__first__bit))

;; dates__datetime__date_part__last__bit_axiom
  (assert
  (< dates__datetime__date_part__first__bit dates__datetime__date_part__last__bit))

;; dates__datetime__date_part__position_axiom
  (assert (<= 0 dates__datetime__date_part__position))

(declare-const dates__datetime__time_part__first__bit Int)

(declare-const dates__datetime__time_part__last__bit Int)

(declare-const dates__datetime__time_part__position Int)

;; dates__datetime__time_part__first__bit_axiom
  (assert (<= 0 dates__datetime__time_part__first__bit))

;; dates__datetime__time_part__last__bit_axiom
  (assert
  (< dates__datetime__time_part__first__bit dates__datetime__time_part__last__bit))

;; dates__datetime__time_part__position_axiom
  (assert (<= 0 dates__datetime__time_part__position))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-const dummy12 us_rep2)

(declare-datatypes ()
((datetime__ref (mk_datetime__ref (datetime__content us_rep2)))))
(define-fun datetime__ref___projection ((a datetime__ref)) us_rep2 (datetime__content
                                                                   a))

(declare-sort description_index_type 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (description_index_type description_index_type) Bool)

(declare-const dummy13 description_index_type)

(declare-datatypes ()
((description_index_type__ref
 (mk_description_index_type__ref
 (description_index_type__content description_index_type)))))
(define-fun description_index_type__ref___projection ((a description_index_type__ref)) description_index_type
  (description_index_type__content a))

(declare-sort description_count_type 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq14 (description_count_type description_count_type) Bool)

(declare-const dummy14 description_count_type)

(declare-datatypes ()
((description_count_type__ref
 (mk_description_count_type__ref
 (description_count_type__content description_count_type)))))
(define-fun description_count_type__ref___projection ((a description_count_type__ref)) description_count_type
  (description_count_type__content a))

(declare-fun to_rep8 (description_count_type) Int)

(declare-fun of_rep8 (Int) description_count_type)

;; inversion_axiom
  (assert
  (forall ((x description_count_type))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x description_count_type)) (! (in_range11
  (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                               (of_rep8 x))) )))

(declare-const dummy15 (Array Int character))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq15 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__datebooks__event_record__description_text (Array Int character))(rec__datebooks__event_record__description_size description_count_type)(rec__datebooks__event_record__date us_rep2)(rec__datebooks__event_record__is_used Bool)))))
(define-fun us_split_fields_Description_Text__projection ((a us_split_fields6)) (Array Int character)
  (rec__datebooks__event_record__description_text a))

(define-fun us_split_fields_Description_Size__projection ((a us_split_fields6)) description_count_type
  (rec__datebooks__event_record__description_size a))

(define-fun us_split_fields_Date__projection ((a us_split_fields6)) us_rep2
  (rec__datebooks__event_record__date a))

(define-fun us_split_fields_Is_Used__projection ((a us_split_fields6)) Bool
  (rec__datebooks__event_record__is_used a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref3)) us_split_fields6
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___4__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                  a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq
                            (rec__datebooks__event_record__description_text
                            (us_split_fields7 a)) 1 128
                            (rec__datebooks__event_record__description_text
                            (us_split_fields7 b)) 1 128) true)
                         (= (to_rep8
                            (rec__datebooks__event_record__description_size
                            (us_split_fields7 a))) (to_rep8
                                                   (rec__datebooks__event_record__description_size
                                                   (us_split_fields7 b)))))
                         (= (bool_eq4
                            (rec__datebooks__event_record__date
                            (us_split_fields7 a))
                            (rec__datebooks__event_record__date
                            (us_split_fields7 b))) true))
                         (= (rec__datebooks__event_record__is_used
                            (us_split_fields7 a)) (rec__datebooks__event_record__is_used
                                                  (us_split_fields7 b))))
                    true false))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-const datebooks__event_record__description_text__first__bit Int)

(declare-const datebooks__event_record__description_text__last__bit Int)

(declare-const datebooks__event_record__description_text__position Int)

;; datebooks__event_record__description_text__first__bit_axiom
  (assert (<= 0 datebooks__event_record__description_text__first__bit))

;; datebooks__event_record__description_text__last__bit_axiom
  (assert
  (< datebooks__event_record__description_text__first__bit datebooks__event_record__description_text__last__bit))

;; datebooks__event_record__description_text__position_axiom
  (assert (<= 0 datebooks__event_record__description_text__position))

(declare-const datebooks__event_record__description_size__first__bit Int)

(declare-const datebooks__event_record__description_size__last__bit Int)

(declare-const datebooks__event_record__description_size__position Int)

;; datebooks__event_record__description_size__first__bit_axiom
  (assert (<= 0 datebooks__event_record__description_size__first__bit))

;; datebooks__event_record__description_size__last__bit_axiom
  (assert
  (< datebooks__event_record__description_size__first__bit datebooks__event_record__description_size__last__bit))

;; datebooks__event_record__description_size__position_axiom
  (assert (<= 0 datebooks__event_record__description_size__position))

(declare-const datebooks__event_record__date__first__bit Int)

(declare-const datebooks__event_record__date__last__bit Int)

(declare-const datebooks__event_record__date__position Int)

;; datebooks__event_record__date__first__bit_axiom
  (assert (<= 0 datebooks__event_record__date__first__bit))

;; datebooks__event_record__date__last__bit_axiom
  (assert
  (< datebooks__event_record__date__first__bit datebooks__event_record__date__last__bit))

;; datebooks__event_record__date__position_axiom
  (assert (<= 0 datebooks__event_record__date__position))

(declare-const datebooks__event_record__is_used__first__bit Int)

(declare-const datebooks__event_record__is_used__last__bit Int)

(declare-const datebooks__event_record__is_used__position Int)

;; datebooks__event_record__is_used__first__bit_axiom
  (assert (<= 0 datebooks__event_record__is_used__first__bit))

;; datebooks__event_record__is_used__last__bit_axiom
  (assert
  (< datebooks__event_record__is_used__first__bit datebooks__event_record__is_used__last__bit))

;; datebooks__event_record__is_used__position_axiom
  (assert (<= 0 datebooks__event_record__is_used__position))

(declare-fun user_eq16 (us_rep3 us_rep3) Bool)

(declare-const dummy16 us_rep3)

(declare-datatypes ()
((event_record__ref (mk_event_record__ref (event_record__content us_rep3)))))
(define-fun event_record__ref___projection ((a event_record__ref)) us_rep3
  (event_record__content a))

(declare-sort event_index_type 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq17 (event_index_type event_index_type) Bool)

(declare-const dummy17 event_index_type)

(declare-datatypes ()
((event_index_type__ref
 (mk_event_index_type__ref (event_index_type__content event_index_type)))))
(define-fun event_index_type__ref___projection ((a event_index_type__ref)) event_index_type
  (event_index_type__content a))

(declare-fun to_rep9 (event_index_type) Int)

(declare-fun of_rep9 (Int) event_index_type)

;; inversion_axiom
  (assert
  (forall ((x event_index_type))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x event_index_type)) (! (in_range12
  (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range12 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                               (of_rep9 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep3))))))
(declare-fun slide1 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int
  Int) (Array Int us_rep3))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep3 Int) (Array Int us_rep3))

;; singleton_def
  (assert
  (forall ((v us_rep3))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq5 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq5 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-sort status_type 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq18 (status_type status_type) Bool)

(declare-const dummy18 status_type)

(declare-datatypes ()
((status_type__ref (mk_status_type__ref (status_type__content status_type)))))
(define-fun status_type__ref___projection ((a status_type__ref)) status_type
  (status_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_294 Int)
  (temp___is_init_291 Bool) (temp___skip_constant_292 Bool)
  (temp___do_toplevel_293 Bool)) Bool (=>
                                      (or (= temp___is_init_291 true)
                                      (<= 0 3)) (in_range13 temp___expr_294)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const description us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const date us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-datatypes ()
((us_split_fields8
 (mk___split_fields4
 (rec__datebooks__add_event__find_result_record__fresh_index event_index_type)(rec__datebooks__add_event__find_result_record__found_slot Bool)))))
(define-fun us_split_fields_Fresh_Index__projection ((a us_split_fields8)) event_index_type
  (rec__datebooks__add_event__find_result_record__fresh_index a))

(define-fun us_split_fields_Found_Slot__projection ((a us_split_fields8)) Bool
  (rec__datebooks__add_event__find_result_record__found_slot a))

(declare-datatypes ()
((us_split_fields__ref4
 (mk___split_fields__ref4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref4)) us_split_fields8
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep4 (mk___rep4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___5__projection ((a us_rep4)) us_split_fields8 (us_split_fields9
                                                                  a))

(define-fun bool_eq7 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep9
                            (rec__datebooks__add_event__find_result_record__fresh_index
                            (us_split_fields9 a))) (to_rep9
                                                   (rec__datebooks__add_event__find_result_record__fresh_index
                                                   (us_split_fields9 b))))
                         (= (rec__datebooks__add_event__find_result_record__found_slot
                            (us_split_fields9 a)) (rec__datebooks__add_event__find_result_record__found_slot
                                                  (us_split_fields9 b))))
                    true false))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep4) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment6 a))))

(declare-const datebooks__add_event__find_result_record__fresh_index__first__bit Int)

(declare-const datebooks__add_event__find_result_record__fresh_index__last__bit Int)

(declare-const datebooks__add_event__find_result_record__fresh_index__position Int)

;; datebooks__add_event__find_result_record__fresh_index__first__bit_axiom
  (assert
  (<= 0 datebooks__add_event__find_result_record__fresh_index__first__bit))

;; datebooks__add_event__find_result_record__fresh_index__last__bit_axiom
  (assert
  (< datebooks__add_event__find_result_record__fresh_index__first__bit
  datebooks__add_event__find_result_record__fresh_index__last__bit))

;; datebooks__add_event__find_result_record__fresh_index__position_axiom
  (assert
  (<= 0 datebooks__add_event__find_result_record__fresh_index__position))

(declare-const datebooks__add_event__find_result_record__found_slot__first__bit Int)

(declare-const datebooks__add_event__find_result_record__found_slot__last__bit Int)

(declare-const datebooks__add_event__find_result_record__found_slot__position Int)

;; datebooks__add_event__find_result_record__found_slot__first__bit_axiom
  (assert
  (<= 0 datebooks__add_event__find_result_record__found_slot__first__bit))

;; datebooks__add_event__find_result_record__found_slot__last__bit_axiom
  (assert
  (< datebooks__add_event__find_result_record__found_slot__first__bit
  datebooks__add_event__find_result_record__found_slot__last__bit))

;; datebooks__add_event__find_result_record__found_slot__position_axiom
  (assert
  (<= 0 datebooks__add_event__find_result_record__found_slot__position))

(declare-fun user_eq19 (us_rep4 us_rep4) Bool)

(declare-const dummy19 us_rep4)

(declare-datatypes ()
((find_result_record__ref
 (mk_find_result_record__ref (find_result_record__content us_rep4)))))
(define-fun find_result_record__ref___projection ((a find_result_record__ref)) us_rep4
  (find_result_record__content a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq20 (integer integer) Bool)

(declare-const dummy20 integer)

(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content integer)))))
(define-fun t8b__ref___projection ((a t8b__ref)) integer (t8b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun temp___366 (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___368 Int))
  (forall ((temp___369 Int))
  (= (select (temp___366 temp___368) temp___369) (of_rep temp___368)))))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant5 ((temp___expr_216 Int)
  (temp___is_init_213 Bool) (temp___skip_constant_214 Bool)
  (temp___do_toplevel_215 Bool)) Bool (=>
                                      (or (= temp___is_init_213 true)
                                      (<= 1 128)) (in_range10
                                      temp___expr_216)))

(define-fun dynamic_invariant6 ((temp___expr_231 Int)
  (temp___is_init_228 Bool) (temp___skip_constant_229 Bool)
  (temp___do_toplevel_230 Bool)) Bool (=>
                                      (or (= temp___is_init_228 true)
                                      (<= 0 128)) (in_range11
                                      temp___expr_231)))

(define-fun dynamic_invariant7 ((temp___expr_258 Int)
  (temp___is_init_255 Bool) (temp___skip_constant_256 Bool)
  (temp___do_toplevel_257 Bool)) Bool (=>
                                      (or (= temp___is_init_255 true)
                                      (<= 1 64)) (in_range12
                                      temp___expr_258)))

(define-fun dynamic_invariant8 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 2000 2099)) (in_range4
                                      temp___expr_136)))

(define-fun dynamic_invariant9 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 12)) (in_range5 temp___expr_142)))

(define-fun dynamic_invariant10 ((temp___expr_148 Int)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (or (= temp___is_init_145 true)
                                      (<= 1 31)) (in_range6 temp___expr_148)))

(define-fun dynamic_invariant11 ((temp___expr_154 Int)
  (temp___is_init_151 Bool) (temp___skip_constant_152 Bool)
  (temp___do_toplevel_153 Bool)) Bool (=>
                                      (or (= temp___is_init_151 true)
                                      (<= 0 23)) (in_range7 temp___expr_154)))

(define-fun dynamic_invariant12 ((temp___expr_160 Int)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (=>
                                      (or (= temp___is_init_157 true)
                                      (<= 0 59)) (in_range8 temp___expr_160)))

(define-fun dynamic_invariant13 ((temp___expr_166 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)) Bool (=>
                                      (or (= temp___is_init_163 true)
                                      (<= 0 59)) (in_range9 temp___expr_166)))

(declare-const book (Array Int us_rep3))

(declare-const status Int)

(declare-const find_result__split_fields event_index_type)

(declare-const find_result__split_fields1 Bool)

(declare-const i Int)

(declare-const i1 Int)

(declare-const o event_index_type)

(declare-const o1 event_index_type)

(declare-const o2 Bool)

(declare-const temp___360 event_index_type)

(declare-const temp___3601 Bool)

(declare-const temp___363 Int)

(declare-const temp___362 event_index_type)

(declare-const temp___3621 Bool)

(declare-const o3 event_index_type)

(declare-const o4 event_index_type)

(declare-const o5 Bool)

(declare-const temp___361 event_index_type)

(declare-const temp___3611 Bool)

(declare-const temp___377 Int)

(declare-const temp___374 (Array Int us_rep3))

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const temp___372 Int)

(declare-const o8 character)

(declare-const o9 Int)

(declare-const o10 (Array Int character))

(declare-const o11 (Array Int character))

(declare-const o12 description_count_type)

(declare-const o13 day_type)

(declare-const o14 month_type)

(declare-const o15 year_type)

(declare-const o16 hour_type)

(declare-const o17 minute_type)

(declare-const o18 second_type)

(declare-const o19 Bool)

(declare-const o20 us_rep3)

(declare-const o21 (Array Int us_rep3))

(declare-const result us_split_fields__ref4)

(declare-const find_result__split_fields2 us_split_fields8)

(declare-const result1 int__ref)

(declare-const i2 Int)

(declare-const find_result__split_fields3 us_split_fields8)

(declare-const i3 Int)

(declare-const result2 us_split_fields__ref4)

(declare-const find_result__split_fields4 us_split_fields8)

(declare-const find_result__split_fields5 us_split_fields__ref4)

(declare-const find_result__split_fields6 us_split_fields8)

(declare-const find_result__split_fields7 us_split_fields__ref4)

(declare-const i4 int__ref)

(declare-const find_result__split_fields8 us_split_fields8)

(declare-const i5 Int)

(declare-const find_result__split_fields9 us_split_fields__ref4)

(declare-const i6 int__ref)

(declare-const find_result__split_fields10 us_split_fields8)

(declare-const i7 Int)

(declare-const result3 map__ref1)

(declare-const book1 (Array Int us_rep3))

(declare-const result4 int__ref)

(declare-const i8 Int)

(declare-const book2 (Array Int us_rep3))

(declare-const i9 Int)

(declare-const result5 map__ref1)

(declare-const book3 (Array Int us_rep3))

(declare-const book4 map__ref1)

(declare-const i10 int__ref)

(declare-const book5 (Array Int us_rep3))

(declare-const i11 Int)

(declare-const book6 map__ref1)

(declare-const i12 int__ref)

(declare-const book7 (Array Int us_rep3))

(declare-const i13 Int)

;; H
  (assert (dynamic_invariant description true false true))

;; H
  (assert (=> (<= 0 3) (in_range13 status)))

;; H
  (assert (= (to_rep9 o) 1))

;; H
  (assert (= o o1))

;; H
  (assert (= (of_int 0) o2))

;; H
  (assert (= temp___360 o1))

;; H
  (assert (= temp___3601 o2))

;; H
  (assert
  (= result (mk___split_fields__ref4
            (mk___split_fields4 find_result__split_fields
            find_result__split_fields1))))

;; H
  (assert
  (= find_result__split_fields2 (mk___split_fields4 temp___360 temp___3601)))

;; H
  (assert (not (< 128 (length description))))

;; H
  (assert (= result1 (mk_int__ref i)))

;; H
  (assert (= i2 1))

;; H
  (assert (=> (and (<= 1 i2) (<= i2 64)) (= temp___363 i2)))

;; H
  (assert
  (=> (and (<= 1 i2) (<= i2 64))
  (= (mk___split_fields4 temp___362 temp___3621) find_result__split_fields2)))

;; H
  (assert (=> (and (<= 1 i2) (<= i2 64)) (<= (length description) 128)))

;; H
  (assert
  (=> (and (<= 1 i2) (<= i2 64))
  (and (=> (<= 1 64) (in_range12 i3)) (and (<= 1 i3) (<= i3 64)))))

;; H
  (assert
  (=> (and (<= 1 i2) (<= i2 64))
  (or
  (and
  (and
  (= find_result__split_fields5 (mk___split_fields__ref4
                                find_result__split_fields4))
  (= find_result__split_fields6 find_result__split_fields4))
  (and
  (not
  (= (rec__datebooks__event_record__is_used
     (us_split_fields7 (select book i3))) true))
  (and
  (and (and (= (to_rep9 o3) i3) (and (= o3 o4) (= (of_int 1) o5)))
  (and (= temp___361 o4) (= temp___3611 o5)))
  (and (= result2 (mk___split_fields__ref4 find_result__split_fields3))
  (= find_result__split_fields4 (mk___split_fields4 temp___361 temp___3611))))))
  (and
  (and
  (= (rec__datebooks__event_record__is_used
     (us_split_fields7 (select book i3))) true)
  (= find_result__split_fields4 find_result__split_fields3))
  (and
  (and
  (= find_result__split_fields5 (mk___split_fields__ref4
                                find_result__split_fields4))
  (= find_result__split_fields6 find_result__split_fields4)) (= i3 64))))))

;; H
  (assert (=> (and (<= 1 i2) (<= i2 64)) (= i4 (mk_int__ref i3))))

;; H
  (assert
  (=> (and (<= 1 i2) (<= i2 64))
  (= find_result__split_fields7 find_result__split_fields5)))

;; H
  (assert (=> (and (<= 1 i2) (<= i2 64)) (= i5 i3)))

;; H
  (assert
  (=> (and (<= 1 i2) (<= i2 64))
  (= find_result__split_fields8 find_result__split_fields6)))

;; H
  (assert (=> (and (<= 1 i2) (<= i2 64)) (= i6 i4)))

;; H
  (assert
  (=> (and (<= 1 i2) (<= i2 64))
  (= find_result__split_fields9 find_result__split_fields7)))

;; H
  (assert (=> (and (<= 1 i2) (<= i2 64)) (= i7 i5)))

;; H
  (assert
  (=> (and (<= 1 i2) (<= i2 64))
  (= find_result__split_fields10 find_result__split_fields8)))

;; H
  (assert (=> (not (and (<= 1 i2) (<= i2 64))) (= i6 (mk_int__ref i2))))

;; H
  (assert
  (=> (not (and (<= 1 i2) (<= i2 64)))
  (= find_result__split_fields9 (mk___split_fields__ref4
                                find_result__split_fields2))))

;; H
  (assert (=> (not (and (<= 1 i2) (<= i2 64))) (= i7 i2)))

;; H
  (assert
  (=> (not (and (<= 1 i2) (<= i2 64)))
  (= find_result__split_fields10 find_result__split_fields2)))

;; H
  (assert
  (= (rec__datebooks__add_event__find_result_record__found_slot
     (us_split_fields__content4 find_result__split_fields9)) true))

;; H
  (assert (= result3 (mk_map__ref1 book)))

;; H
  (assert
  (= book1 (store book (to_rep9
                       (rec__datebooks__add_event__find_result_record__fresh_index
                       (us_split_fields__content4 find_result__split_fields9)))
  (mk___rep3
  (mk___split_fields3 (temp___366 32)
  (rec__datebooks__event_record__description_size
  (us_split_fields7
  (select book (to_rep9
               (rec__datebooks__add_event__find_result_record__fresh_index
               (us_split_fields__content4 find_result__split_fields9))))))
  (rec__datebooks__event_record__date
  (us_split_fields7
  (select book (to_rep9
               (rec__datebooks__add_event__find_result_record__fresh_index
               (us_split_fields__content4 find_result__split_fields9))))))
  (rec__datebooks__event_record__is_used
  (us_split_fields7
  (select book (to_rep9
               (rec__datebooks__add_event__find_result_record__fresh_index
               (us_split_fields__content4 find_result__split_fields9)))))))))))

;; H
  (assert (= result4 (mk_int__ref i1)))

;; H
  (assert (= i8 (to_rep1 (first (rt description)))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= temp___377 i8)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= temp___374 book1)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (and
  (and (in_range12
  (to_rep9
  (rec__datebooks__add_event__find_result_record__fresh_index
  (us_split_fields__content4 find_result__split_fields9))))
  (<= (length description) 128))
  (< (- i9 (to_rep1 (first (rt description)))) 128))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (and
  (and
  (forall ((temp___375 Int))
  (=> (and (<= 1 temp___375) (<= temp___375 64))
  (ite (not
       (= (to_rep9
          (rec__datebooks__add_event__find_result_record__fresh_index
          (us_split_fields__content4 find_result__split_fields9))) temp___375))
  (= (select book2 temp___375) (select temp___374 temp___375))
  (and
  (and
  (= (rec__datebooks__event_record__description_size
     (us_split_fields7 (select book2 temp___375))) (rec__datebooks__event_record__description_size
                                                   (us_split_fields7
                                                   (select temp___374 temp___375))))
  (= (rec__datebooks__event_record__date
     (us_split_fields7 (select book2 temp___375))) (rec__datebooks__event_record__date
                                                   (us_split_fields7
                                                   (select temp___374 temp___375)))))
  (= (rec__datebooks__event_record__is_used
     (us_split_fields7 (select book2 temp___375))) (rec__datebooks__event_record__is_used
                                                   (us_split_fields7
                                                   (select temp___374 temp___375))))))))
  (=>
  (<= (to_rep1 (first (rt description))) (to_rep1 (last (rt description))))
  (dynamic_property1 (to_rep1 (first (rt description)))
  (to_rep1 (last (rt description))) i9)))
  (and (<= (to_rep1 (first (rt description))) i9)
  (<= i9 (to_rep1 (last (rt description))))))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (= (to_rep o8) (to_rep (select (elts description) i9)))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (and (= o6 (- i9 (to_rep1 (first (rt description))))) (in_range1
  (- i9 (to_rep1 (first (rt description))))))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= o7 (+ 1 o6))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (and (= temp___372 o7) (in_range1 o7))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (and (<= 1 temp___372) (<= temp___372 128))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= o9 temp___372)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (= o10 (store (rec__datebooks__event_record__description_text
                (us_split_fields7
                (select book2 (to_rep9
                              (rec__datebooks__add_event__find_result_record__fresh_index
                              (us_split_fields__content4
                              find_result__split_fields9)))))) o9 o8))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= o10 o11)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (= (rec__datebooks__event_record__description_size
     (us_split_fields7
     (select book2 (to_rep9
                   (rec__datebooks__add_event__find_result_record__fresh_index
                   (us_split_fields__content4 find_result__split_fields9))))))
  o12)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (= (rec__datebooks__event_record__date
     (us_split_fields7
     (select book2 (to_rep9
                   (rec__datebooks__add_event__find_result_record__fresh_index
                   (us_split_fields__content4 find_result__split_fields9))))))
  (mk___rep2
  (mk___split_fields2 (mk___rep (mk___split_fields o13 o14 o15))
  (mk___rep1 (mk___split_fields1 o16 o17 o18)))))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (= (rec__datebooks__event_record__is_used
     (us_split_fields7
     (select book2 (to_rep9
                   (rec__datebooks__add_event__find_result_record__fresh_index
                   (us_split_fields__content4 find_result__split_fields9))))))
  o19)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (= o20 (mk___rep3
         (mk___split_fields3 o11 o12
         (mk___rep2
         (mk___split_fields2 (mk___rep (mk___split_fields o13 o14 o15))
         (mk___rep1 (mk___split_fields1 o16 o17 o18)))) o19)))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (= o21 (store book2 (to_rep9
                      (rec__datebooks__add_event__find_result_record__fresh_index
                      (us_split_fields__content4 find_result__split_fields9)))
  o20))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (= result5 (mk_map__ref1 book2))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= book3 o21)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))
  (= i9 (to_rep1 (last (rt description))))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= i10 (mk_int__ref i9))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= book4 (mk_map__ref1 book3))))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= i11 i9)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= book5 book3)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= i12 i10)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= book6 book4)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= i13 i11)))

;; H
  (assert
  (=>
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description))))) (= book7 book5)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))) (= i12 (mk_int__ref i8))))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))) (= book6 (mk_map__ref1 book1))))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))) (= i13 i8)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep1 (first (rt description))) i8)
  (<= i8 (to_rep1 (last (rt description)))))) (= book7 book1)))

(assert
;; WP_parameter_def
 ;; File "datebooks.adb", line 14, characters 0-0
  (not (in_range11 (length description))))
(check-sat)
(exit)
