;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort character 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (character character) Bool)

(declare-fun dummy () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(define-fun dynamic_invariant ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range1 temp___expr_63)))

(declare-fun is_digit (Int) Bool)

(declare-fun is_digit__function_guard (Bool Int) Bool)

;; is_digit__post_axiom
  (assert
  (forall ((c Int))
  (! (=> (dynamic_invariant c true true true)
     (let ((result (is_digit c)))
     (ite (= c 48) (= result true)
     (ite (= c 49) (= result true)
     (ite (= c 50) (= result true)
     (ite (= c 51) (= result true)
     (ite (= c 52) (= result true)
     (ite (= c 53) (= result true)
     (ite (= c 54) (= result true)
     (ite (= c 55) (= result true)
     (ite (= c 56) (= result true)
     (ite (= c 57) (= result true)
     (ite (< 57 c) (not (= result true)) (=> (< c 48) (not (= result true)))))))))))))))) :pattern (
  (is_digit c)) )))

(declare-fun source () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun aida__conversion__convert_character_digit_to_integer__result () Int)

(declare-fun result () Int)

(declare-fun aida__conversion__convert_character_digit_to_integer__result1 () Int)

(declare-fun aida__conversion__convert_character_digit_to_integer__result2 () Int)

(declare-fun aida__conversion__convert_character_digit_to_integer__result3 () Int)

(declare-fun aida__conversion__convert_character_digit_to_integer__result4 () Int)

(declare-fun aida__conversion__convert_character_digit_to_integer__result5 () Int)

;; H
  (assert (in_range1 source))

;; H
  (assert (= (is_digit source) true))

;; H
  (assert
  (= aida__conversion__convert_character_digit_to_integer__result1 aida__conversion__convert_character_digit_to_integer__result2))

;; H
  (assert
  (= aida__conversion__convert_character_digit_to_integer__result3 aida__conversion__convert_character_digit_to_integer__result1))

;; H
  (assert
  (= (mk_int__ref result) (mk_int__ref
                          aida__conversion__convert_character_digit_to_integer__result)))

;; H
  (assert
  (= aida__conversion__convert_character_digit_to_integer__result1 (-
  source 48)))

;; H
  (assert
  (= (mk_int__ref
     aida__conversion__convert_character_digit_to_integer__result4) (mk_int__ref
                                                                    aida__conversion__convert_character_digit_to_integer__result2)))

;; H
  (assert
  (= aida__conversion__convert_character_digit_to_integer__result5 aida__conversion__convert_character_digit_to_integer__result3))

;; H
  (assert
  (=> (= (= source 48) true)
  (= aida__conversion__convert_character_digit_to_integer__result4 0)))

;; H
  (assert
  (=> (= (= source 49) true)
  (= aida__conversion__convert_character_digit_to_integer__result4 1)))

;; H
  (assert
  (=> (= (= source 50) true)
  (= aida__conversion__convert_character_digit_to_integer__result4 2)))

;; H
  (assert
  (=> (= (= source 51) true)
  (= aida__conversion__convert_character_digit_to_integer__result4 3)))

;; H
  (assert
  (=> (= (= source 52) true)
  (= aida__conversion__convert_character_digit_to_integer__result4 4)))

;; H
  (assert (= (= source 53) true))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (= aida__conversion__convert_character_digit_to_integer__result4 5)))
(check-sat)
(exit)
