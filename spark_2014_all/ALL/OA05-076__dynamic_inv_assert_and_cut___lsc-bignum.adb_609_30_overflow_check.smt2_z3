;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun power (Int Int) Int)

;; Power_0
  (assert (forall ((x Int)) (= (power x 0) 1)))

;; Power_s
  (assert
  (forall ((x Int) (n Int))
  (=> (<= 0 n) (= (power x (+ n 1)) (* x (power x n))))))

;; Power_s_alt
  (assert
  (forall ((x Int) (n Int))
  (=> (< 0 n) (= (power x n) (* x (power x (- n 1)))))))

;; Power_1
  (assert (forall ((x Int)) (= (power x 1) x)))

;; Power_sum
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (<= 0 n)
  (=> (<= 0 m) (= (power x (+ n m)) (* (power x n) (power x m)))))))

;; Power_mult
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (<= 0 n) (=> (<= 0 m) (= (power x (* n m)) (power (power x n) m))))))

;; Power_mult2
  (assert
  (forall ((x Int) (y Int) (n Int))
  (=> (<= 0 n) (= (power (* x y) n) (* (power x n) (power y n))))))

;; Power_non_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (<= 0 y)) (<= 0 (power x y)))))

;; Power_monotonic
  (assert
  (forall ((x Int) (n Int) (m Int))
  (=> (and (< 0 x) (and (<= 0 n) (<= n m))) (<= (power x n) (power x m)))))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int2 ((_ BitVec 64)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort word32 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (word32 word32) Bool)

(declare-fun dummy2 () word32)

(declare-datatypes ()
((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_217 (_ BitVec 32))
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)) Bool true)

(declare-fun to_rep1 (word32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x word32)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort word64 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (word64 word64) Bool)

(declare-fun dummy3 () word64)

(declare-datatypes ()
((word64__ref (mk_word64__ref (word64__content word64)))))
(define-fun word64__ref___projection ((a word64__ref)) word64 (word64__content
                                                              a))

(define-fun dynamic_invariant2 ((temp___expr_223 (_ BitVec 64))
  (temp___is_init_220 Bool) (temp___skip_constant_221 Bool)
  (temp___do_toplevel_222 Bool)) Bool true)

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int word32))))))
(declare-fun slide ((Array Int word32) Int Int) (Array Int word32))

;; slide_eq
  (assert
  (forall ((a (Array Int word32)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int word32)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int word32) Int Int (Array Int word32) Int
  Int) (Array Int word32))

;; concat_def
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (word32 Int) (Array Int word32))

;; singleton_def
  (assert
  (forall ((v word32))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int word32)) (a__first Int) (a__last Int)
  (b (Array Int word32)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_134)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (to_rep1 (select a temp___idx_134)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_134)))))))))))

(declare-fun compare ((Array Int word32) Int Int (Array Int word32) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int word32)) (b (Array Int word32)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq1 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun dummy4 () us_rep)

(declare-datatypes ()
((math_int__ref (mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content
                                                                  a))

(declare-fun oadd (us_rep us_rep) us_rep)

(declare-fun oadd__function_guard (us_rep us_rep us_rep) Bool)

;; oadd__post_axiom
  (assert true)

(declare-fun osubtract (us_rep us_rep) us_rep)

(declare-fun osubtract__function_guard (us_rep us_rep us_rep) Bool)

;; osubtract__post_axiom
  (assert true)

(declare-fun omultiply (us_rep us_rep) us_rep)

(declare-fun omultiply__function_guard (us_rep us_rep us_rep) Bool)

;; omultiply__post_axiom
  (assert true)

(declare-fun odivide (us_rep us_rep) us_rep)

(declare-fun odivide__function_guard (us_rep us_rep us_rep) Bool)

;; odivide__post_axiom
  (assert true)

(declare-fun omod (us_rep us_rep) us_rep)

(declare-fun omod__function_guard (us_rep us_rep us_rep) Bool)

;; omod__post_axiom
  (assert true)

(declare-fun oexpon (us_rep Int) us_rep)

(declare-fun oexpon__function_guard (us_rep us_rep Int) Bool)

;; oexpon__post_axiom
  (assert true)

(declare-fun oexpon__2 (us_rep us_rep) us_rep)

(declare-fun oexpon__2__function_guard (us_rep us_rep us_rep) Bool)

;; oexpon__2__post_axiom
  (assert true)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; oeq__post_axiom
  (assert true)

(declare-fun olt (us_rep us_rep) Bool)

(declare-fun olt__function_guard (Bool us_rep us_rep) Bool)

;; olt__post_axiom
  (assert true)

(declare-fun ole (us_rep us_rep) Bool)

(declare-fun ole__function_guard (Bool us_rep us_rep) Bool)

;; ole__post_axiom
  (assert true)

(declare-fun from_integer (Int) us_rep)

(declare-fun from_integer__function_guard (us_rep Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

;; from_integer__post_axiom
  (assert true)

(declare-fun from_word32 ((_ BitVec 32)) us_rep)

(declare-fun from_word32__function_guard (us_rep (_ BitVec 32)) Bool)

;; from_word32__post_axiom
  (assert true)

(declare-fun from_word64 ((_ BitVec 64)) us_rep)

(declare-fun from_word64__function_guard (us_rep (_ BitVec 64)) Bool)

;; from_word64__post_axiom
  (assert true)

(declare-fun base (tuple0) us_rep)

(declare-fun base__function_guard (us_rep tuple0) Bool)

;; base__post_axiom
  (assert true)

;; base__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (base us_void_param) (oexpon (from_word32 ((_ int2bv 32) 2)) 32)) :pattern (
  (base us_void_param)) )))

(declare-sort big_int_range 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (big_int_range big_int_range) Bool)

(declare-fun dummy5 () big_int_range)

(declare-datatypes ()
((big_int_range__ref
 (mk_big_int_range__ref (big_int_range__content big_int_range)))))
(define-fun big_int_range__ref___projection ((a big_int_range__ref)) big_int_range
  (big_int_range__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int word32))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int word32) (elts a))

(define-fun of_array ((a (Array Int word32)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int word32)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int word32)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int word32)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int word32))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int word32))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq6 (us_t us_t) Bool)

(declare-fun dummy6 () us_t)

(declare-datatypes ()
((big_int__ref (mk_big_int__ref (big_int__content us_t)))))
(define-fun big_int__ref___projection ((a big_int__ref)) us_t (big_int__content
                                                              a))

(define-fun dynamic_invariant4 ((temp___expr_289 us_t)
  (temp___is_init_286 Bool) (temp___skip_constant_287 Bool)
  (temp___do_toplevel_288 Bool)) Bool (=>
                                      (not (= temp___skip_constant_287 true))
                                      (dynamic_property 0 2147483646
                                      (first1 temp___expr_289)
                                      (last1 temp___expr_289))))

(declare-fun num_of_big_int (us_t Int Int) us_rep)

(declare-fun num_of_big_int__function_guard (us_rep us_t Int Int) Bool)

;; num_of_big_int__post_axiom
  (assert true)

(declare-fun inverse (us_rep us_rep) us_rep)

(declare-fun inverse__function_guard (us_rep us_rep us_rep) Bool)

(declare-fun a__first () integer)

(declare-fun a__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun a_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun a_last () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun x () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun x_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun e () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun e_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun e_last () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun m () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun m_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun k () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun aux1__first () integer)

(declare-fun aux1__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun aux1_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun aux2__first () integer)

(declare-fun aux2__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun aux2_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun aux3__first () integer)

(declare-fun aux3__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun aux3_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun aux4__first () integer)

(declare-fun aux4__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun aux4_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun r () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun r_first () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun m_inv () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun bit_set (us_t Int (_ BitVec 64)) Bool)

(declare-fun bit_set__function_guard (Bool us_t Int (_ BitVec 64)) Bool)

;; bit_set__post_axiom
  (assert
  (forall ((a us_t))
  (forall ((a_first1 Int))
  (forall ((i (_ BitVec 64)))
  (! (=>
     (and
     (and
     (and (dynamic_invariant4 a true true true) (dynamic_invariant a_first1
     true true true)) (dynamic_invariant2 i true true true))
     (and (and (<= (first1 a) a_first1) (<= a_first1 (last1 a)))
     (bvule (bvudiv i ((_ int2bv 64) 32)) ((_ int2bv 64) (- (last1 a) a_first1)))))
     (= (= (bit_set a a_first1 i) true)
     (not
     (= (bvand (to_rep1
               (select (to_array a) (+ a_first1 (bv2int (bvudiv i ((_ int2bv 64) 32))))))
     (let ((temp___456 (bv2int (bvurem i ((_ int2bv 64) 32)))))
     (ite (< temp___456 4294967296)
     (bvshl ((_ int2bv 32) 1) ((_ int2bv 32) temp___456)) ((_ int2bv 32) 0)))) ((_ int2bv 32) 0))))) :pattern (
  (bit_set a a_first1 i)) )))))

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS25 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS26 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-fun dummy7 () integer)

(declare-datatypes () ((t79b__ref (mk_t79b__ref (t79b__content integer)))))
(define-fun t79b__ref___projection ((a t79b__ref)) integer (t79b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS27 () Int)

(declare-fun r94b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS28 () Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (integer integer) Bool)

(declare-fun dummy8 () integer)

(declare-datatypes () ((t95b__ref (mk_t95b__ref (t95b__content integer)))))
(define-fun t95b__ref___projection ((a t95b__ref)) integer (t95b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS29 () Int)

(define-fun dynamic_invariant5 ((temp___expr_283 Int)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)) Bool (=>
                                      (or (= temp___is_init_280 true)
                                      (<= 0 2147483646)) (in_range3
                                      temp___expr_283)))

;; inverse__post_axiom
  (assert true)

(declare-fun a () (Array Int word32))

(declare-fun j () Int)

(declare-fun l () Int)

(declare-fun s () Int)

(declare-fun i () (_ BitVec 64))

(declare-fun w () (_ BitVec 32))

(declare-fun h () Int)

(declare-fun o () us_rep)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () us_rep)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () us_rep)

(declare-fun o11 () us_rep)

(declare-fun o12 () us_rep)

(declare-fun o13 () Int)

(declare-fun o14 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () us_rep)

(declare-fun o17 () us_rep)

(declare-fun o18 () us_rep)

(declare-fun o19 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () Int)

(declare-fun o22 () Int)

(declare-fun o23 () us_rep)

(declare-fun o24 () us_rep)

(declare-fun o25 () Int)

(declare-fun o26 () Int)

(declare-fun o27 () Int)

(declare-fun o28 () Int)

(declare-fun o29 () Int)

(declare-fun o30 () Int)

(declare-fun o31 () Bool)

(declare-fun o32 () Bool)

(declare-fun o33 () Int)

(declare-fun o34 () Int)

(declare-fun o35 () Int)

(declare-fun o36 () Int)

(declare-fun o37 () Int)

(declare-fun o38 () Int)

(declare-fun o39 () Int)

(declare-fun o40 () Int)

(declare-fun o41 () Int)

(declare-fun o42 () Int)

(declare-fun o43 () Int)

(declare-fun o44 () Int)

(declare-fun o45 () Int)

(declare-fun o46 () Int)

(declare-fun o47 () Int)

(declare-fun o48 () Int)

(declare-fun o49 () Int)

(declare-fun o50 () Int)

(declare-fun o51 () Int)

(declare-fun o52 () Int)

(declare-fun o53 () Bool)

(declare-fun o54 () Bool)

(declare-fun o55 () Int)

(declare-fun o56 () Int)

(declare-fun o57 () Int)

(declare-fun o58 () Int)

(declare-fun o59 () Int)

(declare-fun o60 () Int)

(declare-fun o61 () Bool)

(declare-fun o62 () Bool)

(declare-fun o63 () Int)

(declare-fun o64 () Int)

(declare-fun o65 () Int)

(declare-fun o66 () Int)

(declare-fun o67 () Int)

(declare-fun o68 () Int)

(declare-fun o69 () Bool)

(declare-fun o70 () Bool)

(declare-fun o71 () Int)

(declare-fun o72 () Int)

(declare-fun o73 () Int)

(declare-fun o74 () Int)

(declare-fun o75 () Int)

(declare-fun o76 () Int)

(declare-fun o77 () Bool)

(declare-fun o78 () Bool)

(declare-fun o79 () Int)

(declare-fun o80 () Int)

(declare-fun o81 () Int)

(declare-fun o82 () Int)

(declare-fun o83 () Int)

(declare-fun o84 () Int)

(declare-fun o85 () Bool)

(declare-fun o86 () Bool)

(declare-fun o87 () Int)

(declare-fun o88 () Int)

(declare-fun o89 () Int)

(declare-fun o90 () Int)

(declare-fun o91 () Int)

(declare-fun o92 () Int)

(declare-fun o93 () Bool)

(declare-fun o94 () Bool)

(declare-fun o95 () Int)

(declare-fun o96 () Int)

(declare-fun o97 () Int)

(declare-fun o98 () word32)

(declare-fun o99 () Int)

(declare-fun o100 () (Array Int word32))

(declare-fun o101 () Int)

(declare-fun o102 () Int)

(declare-fun o103 () Int)

(declare-fun o104 () Int)

(declare-fun o105 () Int)

(declare-fun o106 () us_rep)

(declare-fun o107 () us_rep)

(declare-fun o108 () Bool)

(declare-fun o109 () Int)

(declare-fun o110 () us_rep)

(declare-fun o111 () Int)

(declare-fun o112 () us_rep)

(declare-fun o113 () Int)

(declare-fun o114 () us_rep)

(declare-fun o115 () us_rep)

(declare-fun o116 () us_rep)

(declare-fun o117 () Int)

(declare-fun o118 () us_rep)

(declare-fun o119 () us_rep)

(declare-fun o120 () Int)

(declare-fun o121 () us_rep)

(declare-fun o122 () us_rep)

(declare-fun o123 () Bool)

(declare-fun o124 () Int)

(declare-fun o125 () us_rep)

(declare-fun o126 () us_rep)

(declare-fun o127 () Int)

(declare-fun o128 () us_rep)

(declare-fun o129 () Int)

(declare-fun o130 () us_rep)

(declare-fun o131 () us_rep)

(declare-fun o132 () Bool)

(declare-fun o133 () Int)

(declare-fun o134 () us_rep)

(declare-fun o135 () Int)

(declare-fun o136 () us_rep)

(declare-fun o137 () us_rep)

(declare-fun o138 () Int)

(declare-fun o139 () us_rep)

(declare-fun o140 () us_rep)

(declare-fun o141 () Int)

(declare-fun o142 () us_rep)

(declare-fun o143 () us_rep)

(declare-fun o144 () Bool)

(declare-fun o145 () Int)

(declare-fun o146 () Int)

(declare-fun us () Int)

(declare-fun o147 () Int)

(declare-fun o148 () Int)

(declare-fun temp___638 () Int)

(declare-fun temp___636 () Int)

(declare-fun temp___633 () (Array Int word32))

(declare-fun temp___631 () (Array Int word32))

(declare-fun o149 () Int)

(declare-fun o150 () Int)

(declare-fun o151 () us_rep)

(declare-fun o152 () us_rep)

(declare-fun o153 () Bool)

(declare-fun o154 () Int)

(declare-fun o155 () us_rep)

(declare-fun o156 () Int)

(declare-fun o157 () us_rep)

(declare-fun o158 () Int)

(declare-fun o159 () us_rep)

(declare-fun o160 () us_rep)

(declare-fun o161 () us_rep)

(declare-fun o162 () Int)

(declare-fun o163 () us_rep)

(declare-fun o164 () us_rep)

(declare-fun o165 () Int)

(declare-fun o166 () us_rep)

(declare-fun o167 () us_rep)

(declare-fun o168 () Bool)

(declare-fun o169 () Int)

(declare-fun o170 () us_rep)

(declare-fun o171 () us_rep)

(declare-fun o172 () Int)

(declare-fun o173 () us_rep)

(declare-fun o174 () Int)

(declare-fun o175 () us_rep)

(declare-fun o176 () us_rep)

(declare-fun o177 () Bool)

(declare-fun n () Int)

(declare-fun o178 () Int)

(declare-fun o179 () Int)

(declare-fun o180 () Int)

(declare-fun o181 () Int)

(declare-fun o182 () Int)

(declare-fun o183 () Int)

(declare-fun o184 () Int)

(declare-fun o185 () Int)

(declare-fun o186 () us_rep)

(declare-fun o187 () Int)

(declare-fun o188 () Int)

(declare-fun o189 () Int)

(declare-fun o190 () Int)

(declare-fun o191 () us_rep)

(declare-fun o192 () us_rep)

(declare-fun o193 () Int)

(declare-fun o194 () us_rep)

(declare-fun o195 () us_rep)

(declare-fun o196 () Int)

(declare-fun o197 () us_rep)

(declare-fun o198 () us_rep)

(declare-fun o199 () Bool)

(declare-fun o200 () Int)

(declare-fun o201 () Int)

(declare-fun o202 () Int)

(declare-fun o203 () Int)

(declare-fun o204 () Int)

(declare-fun o205 () Int)

(declare-fun o206 () Int)

(declare-fun o207 () Int)

(declare-fun o208 () Int)

(declare-fun o209 () Int)

(declare-fun o210 () Int)

(declare-fun o211 () Int)

(declare-fun o212 () Int)

(declare-fun o213 () Int)

(declare-fun o214 () us_rep)

(declare-fun o215 () us_rep)

(declare-fun o216 () Bool)

(declare-fun o217 () Int)

(declare-fun o218 () us_rep)

(declare-fun o219 () Int)

(declare-fun o220 () us_rep)

(declare-fun o221 () Int)

(declare-fun o222 () us_rep)

(declare-fun o223 () us_rep)

(declare-fun o224 () us_rep)

(declare-fun o225 () Int)

(declare-fun o226 () us_rep)

(declare-fun o227 () us_rep)

(declare-fun o228 () Int)

(declare-fun o229 () us_rep)

(declare-fun o230 () us_rep)

(declare-fun o231 () Bool)

(declare-fun o232 () Int)

(declare-fun o233 () us_rep)

(declare-fun o234 () us_rep)

(declare-fun o235 () Int)

(declare-fun o236 () us_rep)

(declare-fun o237 () Int)

(declare-fun o238 () us_rep)

(declare-fun o239 () us_rep)

(declare-fun o240 () Bool)

(declare-fun n1 () Int)

(declare-fun o241 () Int)

(declare-fun o242 () Int)

(declare-fun o243 () Int)

(declare-fun o244 () Int)

(declare-fun o245 () Int)

(declare-fun o246 () Int)

(declare-fun o247 () Int)

(declare-fun o248 () Int)

(declare-fun o249 () us_rep)

(declare-fun o250 () Int)

(declare-fun o251 () Int)

(declare-fun o252 () Int)

(declare-fun o253 () Int)

(declare-fun o254 () us_rep)

(declare-fun o255 () us_rep)

(declare-fun o256 () Int)

(declare-fun o257 () us_rep)

(declare-fun o258 () us_rep)

(declare-fun o259 () Int)

(declare-fun o260 () us_rep)

(declare-fun o261 () us_rep)

(declare-fun o262 () Bool)

(declare-fun o263 () Int)

(declare-fun o264 () Int)

(declare-fun o265 () (_ BitVec 64))

(declare-fun o266 () (_ BitVec 64))

(declare-fun o267 () (_ BitVec 64))

(declare-fun o268 () (_ BitVec 64))

(declare-fun temp___700 () Int)

(declare-fun temp___699 () Int)

(declare-fun temp___698 () (Array Int word32))

(declare-fun temp___696 () (_ BitVec 32))

(declare-fun temp___695 () (_ BitVec 64))

(declare-fun temp___694 () (Array Int word32))

(declare-fun o269 () Int)

(declare-fun o270 () Int)

(declare-fun o271 () us_rep)

(declare-fun o272 () us_rep)

(declare-fun o273 () Bool)

(declare-fun o274 () Int)

(declare-fun o275 () us_rep)

(declare-fun o276 () Int)

(declare-fun o277 () us_rep)

(declare-fun o278 () Int)

(declare-fun o279 () us_rep)

(declare-fun o280 () us_rep)

(declare-fun o281 () us_rep)

(declare-fun o282 () Int)

(declare-fun o283 () us_rep)

(declare-fun o284 () us_rep)

(declare-fun o285 () Int)

(declare-fun o286 () us_rep)

(declare-fun o287 () us_rep)

(declare-fun o288 () Bool)

(declare-fun o289 () Int)

(declare-fun o290 () us_rep)

(declare-fun o291 () Int)

(declare-fun o292 () us_rep)

(declare-fun o293 () Int)

(declare-fun o294 () Int)

(declare-fun o295 () Int)

(declare-fun o296 () Int)

(declare-fun o297 () us_rep)

(declare-fun o298 () us_rep)

(declare-fun o299 () us_rep)

(declare-fun o300 () us_rep)

(declare-fun o301 () us_rep)

(declare-fun o302 () us_rep)

(declare-fun o303 () us_rep)

(declare-fun o304 () us_rep)

(declare-fun o305 () us_rep)

(declare-fun o306 () Int)

(declare-fun o307 () us_rep)

(declare-fun o308 () us_rep)

(declare-fun o309 () Int)

(declare-fun o310 () us_rep)

(declare-fun o311 () us_rep)

(declare-fun o312 () Bool)

(declare-fun n2 () Int)

(declare-fun o313 () Int)

(declare-fun o314 () Int)

(declare-fun us1 () Int)

(declare-fun o315 () Int)

(declare-fun o316 () Int)

(declare-fun o317 () Int)

(declare-fun o318 () Bool)

(declare-fun o319 () Int)

(declare-fun o320 () Int)

(declare-fun o321 () Int)

(declare-fun o322 () Int)

(declare-fun o323 () Int)

(declare-fun o324 () Int)

(declare-fun o325 () Int)

(declare-fun o326 () Int)

(declare-fun o327 () us_rep)

(declare-fun o328 () Int)

(declare-fun o329 () Int)

(declare-fun o330 () Int)

(declare-fun o331 () Int)

(declare-fun o332 () us_rep)

(declare-fun o333 () us_rep)

(declare-fun o334 () Int)

(declare-fun o335 () us_rep)

(declare-fun o336 () us_rep)

(declare-fun o337 () Int)

(declare-fun o338 () us_rep)

(declare-fun o339 () us_rep)

(declare-fun o340 () Bool)

(declare-fun o341 () Int)

(declare-fun o342 () Int)

(declare-fun o343 () (_ BitVec 64))

(declare-fun o344 () (_ BitVec 64))

(declare-fun o345 () (_ BitVec 64))

(declare-fun o346 () Bool)

(declare-fun temp___645 () Int)

(declare-fun temp___644 () Int)

(declare-fun temp___643 () (_ BitVec 32))

(declare-fun o347 () Int)

(declare-fun o348 () Int)

(declare-fun o349 () us_rep)

(declare-fun o350 () us_rep)

(declare-fun o351 () Bool)

(declare-fun o352 () Int)

(declare-fun o353 () us_rep)

(declare-fun o354 () Int)

(declare-fun o355 () us_rep)

(declare-fun o356 () Int)

(declare-fun o357 () us_rep)

(declare-fun o358 () us_rep)

(declare-fun o359 () us_rep)

(declare-fun o360 () Int)

(declare-fun o361 () us_rep)

(declare-fun o362 () us_rep)

(declare-fun o363 () Int)

(declare-fun o364 () us_rep)

(declare-fun o365 () us_rep)

(declare-fun o366 () Bool)

(declare-fun o367 () Int)

(declare-fun o368 () us_rep)

(declare-fun o369 () Int)

(declare-fun o370 () us_rep)

(declare-fun o371 () Int)

(declare-fun o372 () Int)

(declare-fun o373 () Int)

(declare-fun o374 () Int)

(declare-fun o375 () us_rep)

(declare-fun o376 () us_rep)

(declare-fun o377 () us_rep)

(declare-fun o378 () us_rep)

(declare-fun o379 () us_rep)

(declare-fun o380 () us_rep)

(declare-fun o381 () us_rep)

(declare-fun o382 () us_rep)

(declare-fun o383 () us_rep)

(declare-fun o384 () Int)

(declare-fun o385 () us_rep)

(declare-fun o386 () us_rep)

(declare-fun o387 () Int)

(declare-fun o388 () us_rep)

(declare-fun o389 () us_rep)

(declare-fun o390 () Bool)

(declare-fun n3 () Int)

(declare-fun o391 () Int)

(declare-fun o392 () Int)

(declare-fun us2 () Int)

(declare-fun o393 () Int)

(declare-fun o394 () Int)

(declare-fun o395 () Int)

(declare-fun o396 () Bool)

(declare-fun o397 () Int)

(declare-fun o398 () Int)

(declare-fun o399 () Int)

(declare-fun o400 () Int)

(declare-fun o401 () Int)

(declare-fun o402 () Int)

(declare-fun o403 () Int)

(declare-fun o404 () Int)

(declare-fun o405 () us_rep)

(declare-fun o406 () Int)

(declare-fun o407 () Int)

(declare-fun o408 () Int)

(declare-fun o409 () Int)

(declare-fun o410 () us_rep)

(declare-fun o411 () us_rep)

(declare-fun o412 () Int)

(declare-fun o413 () us_rep)

(declare-fun o414 () us_rep)

(declare-fun o415 () Int)

(declare-fun o416 () us_rep)

(declare-fun o417 () us_rep)

(declare-fun o418 () Bool)

(declare-fun o419 () us_rep)

(declare-fun o420 () us_rep)

(declare-fun o421 () Int)

(declare-fun o422 () Int)

(declare-fun o423 () Int)

(declare-fun o424 () Int)

(declare-fun o425 () us_rep)

(declare-fun o426 () us_rep)

(declare-fun o427 () Int)

(declare-fun o428 () Int)

(declare-fun o429 () Int)

(declare-fun o430 () Int)

(declare-fun o431 () us_rep)

(declare-fun o432 () us_rep)

(declare-fun o433 () us_rep)

(declare-fun o434 () us_rep)

(declare-fun o435 () us_rep)

(declare-fun o436 () us_rep)

(declare-fun o437 () us_rep)

(declare-fun o438 () us_rep)

(declare-fun o439 () us_rep)

(declare-fun o440 () us_rep)

(declare-fun o441 () us_rep)

(declare-fun o442 () us_rep)

(declare-fun o443 () Bool)

(declare-fun o444 () Int)

(declare-fun o445 () Bool)

(declare-fun o446 () us_rep)

(declare-fun o447 () us_rep)

(declare-fun o448 () us_rep)

(declare-fun o449 () us_rep)

(declare-fun o450 () Bool)

(declare-fun o451 () Int)

(declare-fun o452 () Int)

(declare-fun o453 () (_ BitVec 64))

(declare-fun o454 () (_ BitVec 64))

(declare-fun o455 () (_ BitVec 64))

(declare-fun o456 () Bool)

(declare-fun o457 () Int)

(declare-fun o458 () Int)

(declare-fun o459 () (_ BitVec 32))

(declare-fun o460 () (_ BitVec 32))

(declare-fun o461 () (_ BitVec 32))

(declare-fun o462 () Int)

(declare-fun o463 () Int)

(declare-fun temp___655 () Int)

(declare-fun temp___670 () (Array Int word32))

(declare-fun temp___668 () (Array Int word32))

(declare-fun temp___675 () Int)

(declare-fun temp___666 () Int)

(declare-fun o464 () Int)

(declare-fun o465 () Int)

(declare-fun o466 () us_rep)

(declare-fun o467 () us_rep)

(declare-fun o468 () Bool)

(declare-fun o469 () Int)

(declare-fun o470 () us_rep)

(declare-fun o471 () Int)

(declare-fun o472 () us_rep)

(declare-fun o473 () Int)

(declare-fun o474 () us_rep)

(declare-fun o475 () us_rep)

(declare-fun o476 () us_rep)

(declare-fun o477 () Int)

(declare-fun o478 () us_rep)

(declare-fun o479 () us_rep)

(declare-fun o480 () Int)

(declare-fun o481 () us_rep)

(declare-fun o482 () us_rep)

(declare-fun o483 () Bool)

(declare-fun o484 () Int)

(declare-fun o485 () us_rep)

(declare-fun o486 () Int)

(declare-fun o487 () us_rep)

(declare-fun o488 () Int)

(declare-fun o489 () Int)

(declare-fun o490 () Int)

(declare-fun o491 () Int)

(declare-fun o492 () us_rep)

(declare-fun o493 () us_rep)

(declare-fun o494 () us_rep)

(declare-fun o495 () us_rep)

(declare-fun o496 () us_rep)

(declare-fun o497 () us_rep)

(declare-fun o498 () us_rep)

(declare-fun o499 () us_rep)

(declare-fun o500 () us_rep)

(declare-fun o501 () us_rep)

(declare-fun o502 () us_rep)

(declare-fun o503 () us_rep)

(declare-fun o504 () Int)

(declare-fun o505 () us_rep)

(declare-fun o506 () us_rep)

(declare-fun o507 () Int)

(declare-fun o508 () us_rep)

(declare-fun o509 () us_rep)

(declare-fun o510 () Bool)

(declare-fun n4 () Int)

(declare-fun o511 () Int)

(declare-fun o512 () Int)

(declare-fun us3 () Int)

(declare-fun o513 () Int)

(declare-fun o514 () Int)

(declare-fun o515 () Int)

(declare-fun o516 () Bool)

(declare-fun o517 () Int)

(declare-fun o518 () Int)

(declare-fun o519 () Int)

(declare-fun o520 () Int)

(declare-fun o521 () Int)

(declare-fun o522 () Int)

(declare-fun o523 () Int)

(declare-fun o524 () Int)

(declare-fun o525 () us_rep)

(declare-fun o526 () Int)

(declare-fun o527 () Int)

(declare-fun o528 () Int)

(declare-fun o529 () Int)

(declare-fun o530 () us_rep)

(declare-fun o531 () us_rep)

(declare-fun o532 () Int)

(declare-fun o533 () us_rep)

(declare-fun o534 () us_rep)

(declare-fun o535 () Int)

(declare-fun o536 () us_rep)

(declare-fun o537 () us_rep)

(declare-fun o538 () Bool)

(declare-fun o539 () us_rep)

(declare-fun o540 () Int)

(declare-fun o541 () Int)

(declare-fun o542 () Int)

(declare-fun o543 () Int)

(declare-fun o544 () us_rep)

(declare-fun o545 () us_rep)

(declare-fun o546 () us_rep)

(declare-fun o547 () us_rep)

(declare-fun o548 () us_rep)

(declare-fun o549 () us_rep)

(declare-fun o550 () us_rep)

(declare-fun o551 () us_rep)

(declare-fun o552 () us_rep)

(declare-fun o553 () us_rep)

(declare-fun o554 () us_rep)

(declare-fun o555 () us_rep)

(declare-fun o556 () Bool)

(declare-fun o557 () Int)

(declare-fun o558 () Bool)

(declare-fun o559 () us_rep)

(declare-fun o560 () us_rep)

(declare-fun o561 () us_rep)

(declare-fun o562 () us_rep)

(declare-fun o563 () Bool)

(declare-fun o564 () Int)

(declare-fun o565 () Int)

(declare-fun o566 () (_ BitVec 64))

(declare-fun o567 () (_ BitVec 64))

(declare-fun o568 () (_ BitVec 64))

(declare-fun o569 () Bool)

(declare-fun o570 () Int)

(declare-fun o571 () Int)

(declare-fun o572 () us_rep)

(declare-fun o573 () us_rep)

(declare-fun o574 () Bool)

(declare-fun o575 () Int)

(declare-fun o576 () us_rep)

(declare-fun o577 () Int)

(declare-fun o578 () us_rep)

(declare-fun o579 () Int)

(declare-fun o580 () us_rep)

(declare-fun o581 () us_rep)

(declare-fun o582 () us_rep)

(declare-fun o583 () Int)

(declare-fun o584 () us_rep)

(declare-fun o585 () us_rep)

(declare-fun o586 () Int)

(declare-fun o587 () us_rep)

(declare-fun o588 () us_rep)

(declare-fun o589 () Bool)

(declare-fun o590 () Int)

(declare-fun o591 () us_rep)

(declare-fun o592 () Int)

(declare-fun o593 () us_rep)

(declare-fun o594 () Int)

(declare-fun o595 () Int)

(declare-fun o596 () Int)

(declare-fun o597 () Int)

(declare-fun o598 () us_rep)

(declare-fun o599 () us_rep)

(declare-fun o600 () us_rep)

(declare-fun o601 () us_rep)

(declare-fun o602 () us_rep)

(declare-fun o603 () us_rep)

(declare-fun o604 () us_rep)

(declare-fun o605 () us_rep)

(declare-fun o606 () us_rep)

(declare-fun o607 () us_rep)

(declare-fun o608 () us_rep)

(declare-fun o609 () us_rep)

(declare-fun o610 () Int)

(declare-fun o611 () us_rep)

(declare-fun o612 () us_rep)

(declare-fun o613 () Int)

(declare-fun o614 () us_rep)

(declare-fun o615 () us_rep)

(declare-fun o616 () Bool)

(declare-fun n5 () Int)

(declare-fun o617 () Int)

(declare-fun o618 () Int)

(declare-fun us4 () Int)

(declare-fun o619 () Int)

(declare-fun o620 () Int)

(declare-fun o621 () Int)

(declare-fun o622 () Bool)

(declare-fun o623 () Int)

(declare-fun o624 () Int)

(declare-fun o625 () Int)

(declare-fun o626 () Int)

(declare-fun o627 () Int)

(declare-fun o628 () Int)

(declare-fun o629 () Int)

(declare-fun o630 () Int)

(declare-fun o631 () us_rep)

(declare-fun o632 () Int)

(declare-fun o633 () Int)

(declare-fun o634 () Int)

(declare-fun o635 () Int)

(declare-fun o636 () us_rep)

(declare-fun o637 () us_rep)

(declare-fun o638 () Int)

(declare-fun o639 () us_rep)

(declare-fun o640 () us_rep)

(declare-fun o641 () Int)

(declare-fun o642 () us_rep)

(declare-fun o643 () us_rep)

(declare-fun o644 () Bool)

(declare-fun o645 () us_rep)

(declare-fun o646 () Int)

(declare-fun o647 () Int)

(declare-fun o648 () Int)

(declare-fun o649 () Int)

(declare-fun o650 () us_rep)

(declare-fun o651 () us_rep)

(declare-fun o652 () us_rep)

(declare-fun o653 () us_rep)

(declare-fun o654 () us_rep)

(declare-fun o655 () us_rep)

(declare-fun o656 () us_rep)

(declare-fun o657 () us_rep)

(declare-fun o658 () us_rep)

(declare-fun o659 () us_rep)

(declare-fun o660 () us_rep)

(declare-fun o661 () us_rep)

(declare-fun o662 () Bool)

(declare-fun o663 () Int)

(declare-fun o664 () Bool)

(declare-fun o665 () us_rep)

(declare-fun o666 () us_rep)

(declare-fun o667 () us_rep)

(declare-fun o668 () us_rep)

(declare-fun o669 () Bool)

(declare-fun o670 () Int)

(declare-fun o671 () Int)

(declare-fun o672 () (_ BitVec 64))

(declare-fun o673 () (_ BitVec 64))

(declare-fun o674 () (_ BitVec 64))

(declare-fun o675 () Bool)

(declare-fun o676 () Int)

(declare-fun o677 () Int)

(declare-fun o678 () Int)

(declare-fun o679 () Int)

(declare-fun o680 () Int)

(declare-fun o681 () Int)

(declare-fun o682 () Int)

(declare-fun o683 () Int)

(declare-fun o684 () Int)

(declare-fun o685 () us_rep)

(declare-fun o686 () us_rep)

(declare-fun o687 () Bool)

(declare-fun o688 () Int)

(declare-fun o689 () us_rep)

(declare-fun o690 () Int)

(declare-fun o691 () us_rep)

(declare-fun o692 () Int)

(declare-fun o693 () us_rep)

(declare-fun o694 () us_rep)

(declare-fun o695 () us_rep)

(declare-fun o696 () Int)

(declare-fun o697 () us_rep)

(declare-fun o698 () us_rep)

(declare-fun o699 () Int)

(declare-fun o700 () us_rep)

(declare-fun o701 () us_rep)

(declare-fun o702 () Bool)

(declare-fun o703 () Int)

(declare-fun o704 () us_rep)

(declare-fun o705 () Int)

(declare-fun o706 () us_rep)

(declare-fun o707 () Int)

(declare-fun o708 () Int)

(declare-fun o709 () Int)

(declare-fun o710 () Int)

(declare-fun o711 () us_rep)

(declare-fun o712 () us_rep)

(declare-fun o713 () us_rep)

(declare-fun o714 () us_rep)

(declare-fun o715 () us_rep)

(declare-fun o716 () us_rep)

(declare-fun o717 () us_rep)

(declare-fun o718 () us_rep)

(declare-fun o719 () us_rep)

(declare-fun o720 () us_rep)

(declare-fun o721 () us_rep)

(declare-fun o722 () Int)

(declare-fun o723 () us_rep)

(declare-fun o724 () us_rep)

(declare-fun o725 () Int)

(declare-fun o726 () us_rep)

(declare-fun o727 () us_rep)

(declare-fun o728 () Bool)

(declare-fun n6 () Int)

(declare-fun o729 () Int)

(declare-fun o730 () Int)

(declare-fun us5 () Int)

(declare-fun o731 () Int)

(declare-fun o732 () Int)

(declare-fun o733 () Int)

(declare-fun o734 () Bool)

(declare-fun o735 () Int)

(declare-fun o736 () Int)

(declare-fun o737 () Int)

(declare-fun o738 () Int)

(declare-fun o739 () Int)

(declare-fun o740 () Int)

(declare-fun o741 () Int)

(declare-fun o742 () Int)

(declare-fun o743 () us_rep)

(declare-fun o744 () Int)

(declare-fun o745 () Int)

(declare-fun o746 () Int)

(declare-fun o747 () Int)

(declare-fun o748 () us_rep)

(declare-fun o749 () us_rep)

(declare-fun o750 () Int)

(declare-fun o751 () us_rep)

(declare-fun o752 () us_rep)

(declare-fun o753 () Int)

(declare-fun o754 () us_rep)

(declare-fun o755 () us_rep)

(declare-fun o756 () Bool)

(declare-fun o757 () us_rep)

(declare-fun o758 () us_rep)

(declare-fun o759 () us_rep)

(declare-fun o760 () us_rep)

(declare-fun o761 () Bool)

(declare-fun o762 () Int)

(declare-fun o763 () Int)

(declare-fun o764 () (_ BitVec 64))

(declare-fun o765 () (_ BitVec 64))

(declare-fun o766 () (_ BitVec 64))

(declare-fun o767 () Bool)

(declare-fun o768 () Int)

(declare-fun o769 () Int)

(declare-fun o770 () Int)

(declare-fun o771 () Int)

(declare-fun o772 () Int)

(declare-fun o773 () Int)

(declare-fun o774 () Int)

(declare-fun o775 () Int)

(declare-fun o776 () us_rep)

(declare-fun o777 () Int)

(declare-fun o778 () Int)

(declare-fun o779 () Int)

(declare-fun o780 () Int)

(declare-fun o781 () us_rep)

(declare-fun o782 () us_rep)

(declare-fun o783 () Int)

(declare-fun o784 () Int)

(declare-fun o785 () Int)

(declare-fun o786 () Int)

(declare-fun o787 () us_rep)

(declare-fun o788 () us_rep)

(declare-fun a1 () (Array Int word32))

(declare-fun result () Bool)

(declare-fun result1 () Bool)

(declare-fun result2 () Bool)

(declare-fun result3 () Bool)

(declare-fun result4 () Bool)

(declare-fun result5 () Bool)

(declare-fun result6 () Bool)

(declare-fun result7 () Bool)

(declare-fun result8 () Bool)

(declare-fun result9 () Int)

(declare-fun l1 () Int)

(declare-fun aux1 () (Array Int word32))

(declare-fun result10 () (Array Int word32))

(declare-fun aux11 () (Array Int word32))

(declare-fun aux3 () (Array Int word32))

(declare-fun aux4 () (Array Int word32))

(declare-fun aux2 () (Array Int word32))

(declare-fun result11 () Int)

(declare-fun h1 () Int)

(declare-fun a2 () (Array Int word32))

(declare-fun aux41 () (Array Int word32))

(declare-fun h2 () Int)

(declare-fun a3 () (Array Int word32))

(declare-fun aux42 () (Array Int word32))

(declare-fun result12 () Int)

(declare-fun h3 () Int)

(declare-fun a4 () (Array Int word32))

(declare-fun aux43 () (Array Int word32))

(declare-fun h4 () Int)

(declare-fun a5 () (Array Int word32))

(declare-fun aux44 () (Array Int word32))

(declare-fun h5 () Int)

(declare-fun a6 () (Array Int word32))

(declare-fun aux45 () (Array Int word32))

(declare-fun h6 () int__ref)

(declare-fun a7 () (Array Int word32))

(declare-fun aux46 () (Array Int word32))

(declare-fun h7 () Int)

(declare-fun a8 () map__ref)

(declare-fun aux47 () map__ref)

(declare-fun h8 () int__ref)

(declare-fun a9 () (Array Int word32))

(declare-fun aux48 () (Array Int word32))

(declare-fun h9 () Int)

(declare-fun result13 () t__ref1)

(declare-fun i1 () (_ BitVec 64))

(declare-fun a10 () (Array Int word32))

(declare-fun aux31 () (Array Int word32))

(declare-fun j1 () Int)

(declare-fun s1 () Int)

(declare-fun i2 () (_ BitVec 64))

(declare-fun w1 () (_ BitVec 32))

(declare-fun h10 () Int)

(declare-fun result14 () Bool)

(declare-fun result15 () Bool)

(declare-fun result16 () t__ref)

(declare-fun w2 () (_ BitVec 32))

(declare-fun result17 () int__ref)

(declare-fun s2 () Int)

(declare-fun result18 () int__ref)

(declare-fun j2 () Int)

(declare-fun j3 () Int)

(declare-fun s3 () Int)

(declare-fun w3 () (_ BitVec 32))

(declare-fun result19 () Bool)

(declare-fun result20 () Bool)

(declare-fun result21 () t__ref)

(declare-fun w4 () (_ BitVec 32))

(declare-fun result22 () int__ref)

(declare-fun s4 () Int)

(declare-fun s5 () int__ref)

(declare-fun w5 () t__ref)

(declare-fun s6 () Int)

(declare-fun w6 () (_ BitVec 32))

(declare-fun result23 () int__ref)

(declare-fun j4 () Int)

(declare-fun j5 () int__ref)

(declare-fun s7 () int__ref)

(declare-fun w7 () t__ref)

(declare-fun j6 () Int)

(declare-fun s8 () Int)

(declare-fun w8 () (_ BitVec 32))

(declare-fun j7 () int__ref)

(declare-fun s9 () int__ref)

(declare-fun w9 () t__ref)

(declare-fun j8 () Int)

(declare-fun s10 () Int)

(declare-fun w10 () (_ BitVec 32))

(declare-fun j9 () int__ref)

(declare-fun s11 () int__ref)

(declare-fun w11 () t__ref)

(declare-fun j10 () Int)

(declare-fun s12 () Int)

(declare-fun w12 () (_ BitVec 32))

(declare-fun j11 () int__ref)

(declare-fun s13 () int__ref)

(declare-fun w13 () t__ref)

(declare-fun j12 () Int)

(declare-fun s14 () Int)

(declare-fun w14 () (_ BitVec 32))

(declare-fun j13 () int__ref)

(declare-fun s15 () int__ref)

(declare-fun w15 () t__ref)

(declare-fun j14 () Int)

(declare-fun s16 () Int)

(declare-fun w16 () (_ BitVec 32))

(declare-fun result24 () int__ref)

(declare-fun s17 () Int)

(declare-fun result25 () int__ref)

(declare-fun h11 () Int)

(declare-fun a11 () (Array Int word32))

(declare-fun aux32 () (Array Int word32))

(declare-fun h12 () Int)

(declare-fun result26 () Bool)

(declare-fun a12 () (Array Int word32))

(declare-fun aux33 () (Array Int word32))

(declare-fun result27 () Bool)

(declare-fun result28 () int__ref)

(declare-fun h13 () Int)

(declare-fun a13 () map__ref)

(declare-fun aux34 () map__ref)

(declare-fun h14 () int__ref)

(declare-fun a14 () (Array Int word32))

(declare-fun aux35 () (Array Int word32))

(declare-fun h15 () Int)

(declare-fun a15 () map__ref)

(declare-fun aux36 () map__ref)

(declare-fun h16 () int__ref)

(declare-fun a16 () (Array Int word32))

(declare-fun aux37 () (Array Int word32))

(declare-fun h17 () Int)

(declare-fun a17 () map__ref)

(declare-fun aux38 () map__ref)

(declare-fun h18 () int__ref)

(declare-fun a18 () (Array Int word32))

(declare-fun aux39 () (Array Int word32))

(declare-fun h19 () Int)

(declare-fun a19 () map__ref)

(declare-fun aux310 () map__ref)

(declare-fun h20 () int__ref)

(declare-fun a20 () (Array Int word32))

(declare-fun aux311 () (Array Int word32))

(declare-fun h21 () Int)

(declare-fun a21 () (Array Int word32))

(declare-fun aux312 () (Array Int word32))

(declare-fun result29 () int__ref)

(declare-fun s18 () Int)

(declare-fun a22 () (Array Int word32))

(declare-fun aux313 () (Array Int word32))

(declare-fun a23 () map__ref)

(declare-fun aux314 () map__ref)

(declare-fun j15 () int__ref)

(declare-fun s19 () int__ref)

(declare-fun w17 () t__ref)

(declare-fun h22 () int__ref)

(declare-fun a24 () (Array Int word32))

(declare-fun aux315 () (Array Int word32))

(declare-fun j16 () Int)

(declare-fun s20 () Int)

(declare-fun w18 () (_ BitVec 32))

(declare-fun h23 () Int)

(declare-fun result30 () Bool)

(declare-fun result31 () t__ref1)

(declare-fun i3 () (_ BitVec 64))

(declare-fun i4 () t__ref1)

(declare-fun i5 () (_ BitVec 64))

(declare-fun a25 () map__ref)

(declare-fun aux316 () map__ref)

(declare-fun j17 () int__ref)

(declare-fun s21 () int__ref)

(declare-fun i6 () t__ref1)

(declare-fun w19 () t__ref)

(declare-fun h24 () int__ref)

(declare-fun a26 () (Array Int word32))

(declare-fun aux317 () (Array Int word32))

(declare-fun j18 () Int)

(declare-fun s22 () Int)

(declare-fun i7 () (_ BitVec 64))

(declare-fun w20 () (_ BitVec 32))

(declare-fun h25 () Int)

(declare-fun a27 () map__ref)

(declare-fun aux318 () map__ref)

(declare-fun j19 () int__ref)

(declare-fun s23 () int__ref)

(declare-fun i8 () t__ref1)

(declare-fun w21 () t__ref)

(declare-fun h26 () int__ref)

(declare-fun a28 () (Array Int word32))

(declare-fun aux319 () (Array Int word32))

(declare-fun j20 () Int)

(declare-fun s24 () Int)

(declare-fun i9 () (_ BitVec 64))

(declare-fun w22 () (_ BitVec 32))

(declare-fun h27 () Int)

(declare-fun a29 () map__ref)

(declare-fun aux320 () map__ref)

(declare-fun j21 () int__ref)

(declare-fun s25 () int__ref)

(declare-fun i10 () t__ref1)

(declare-fun w23 () t__ref)

(declare-fun h28 () int__ref)

(declare-fun a30 () (Array Int word32))

(declare-fun aux321 () (Array Int word32))

(declare-fun j22 () Int)

(declare-fun s26 () Int)

(declare-fun i11 () (_ BitVec 64))

(declare-fun w24 () (_ BitVec 32))

(declare-fun h29 () Int)

(declare-fun a31 () map__ref)

(declare-fun aux322 () map__ref)

(declare-fun j23 () int__ref)

(declare-fun s27 () int__ref)

(declare-fun i12 () t__ref1)

(declare-fun w25 () t__ref)

(declare-fun h30 () int__ref)

(declare-fun a32 () (Array Int word32))

(declare-fun aux323 () (Array Int word32))

(declare-fun j24 () Int)

(declare-fun s28 () Int)

(declare-fun i13 () (_ BitVec 64))

(declare-fun w26 () (_ BitVec 32))

(declare-fun h31 () Int)

(declare-fun a33 () (Array Int word32))

(declare-fun a34 () map__ref)

(declare-fun aux12 () map__ref)

(declare-fun aux21 () map__ref)

(declare-fun aux324 () map__ref)

(declare-fun aux49 () map__ref)

(declare-fun j25 () int__ref)

(declare-fun l2 () int__ref)

(declare-fun s29 () int__ref)

(declare-fun i14 () t__ref1)

(declare-fun w27 () t__ref)

(declare-fun h32 () int__ref)

(declare-fun h33 () int__ref)

(declare-fun a35 () (Array Int word32))

(declare-fun aux13 () (Array Int word32))

(declare-fun aux22 () (Array Int word32))

(declare-fun aux325 () (Array Int word32))

(declare-fun aux410 () (Array Int word32))

(declare-fun j26 () Int)

(declare-fun l3 () Int)

(declare-fun s30 () Int)

(declare-fun i15 () (_ BitVec 64))

(declare-fun w28 () (_ BitVec 32))

(declare-fun h34 () Int)

(declare-fun h35 () Int)

(define-fun aux411 () map__ref (mk_map__ref aux45))

(define-fun a36 () map__ref (mk_map__ref a6))

(define-fun h36 () int__ref (mk_int__ref h4))

(define-fun aux412 () map__ref (mk_map__ref aux43))

(define-fun a37 () map__ref (mk_map__ref a4))

(define-fun result32 () int__ref (mk_int__ref result11))

(define-fun result33 () int__ref (mk_int__ref result9))

(define-fun h37 () int__ref (mk_int__ref h))

(define-fun i16 () t__ref1 (mk_t__ref1 i))

(define-fun l4 () int__ref (mk_int__ref l))

(define-fun a38 () map__ref (mk_map__ref a))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep a__first) (to_rep a__last)))

;; H
  (assert (in_range2 a_first))

;; H
  (assert (in_range2 a_last))

;; H
  (assert (dynamic_invariant4 x true false true))

;; H
  (assert (in_range2 x_first))

;; H
  (assert (dynamic_invariant4 e true false true))

;; H
  (assert (in_range2 e_first))

;; H
  (assert (in_range2 e_last))

;; H
  (assert (dynamic_invariant4 m true false true))

;; H
  (assert (in_range2 m_first))

;; H
  (assert (in_range2 k))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux1__first)
  (to_rep aux1__last)))

;; H
  (assert (in_range2 aux1_first))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux2__first)
  (to_rep aux2__last)))

;; H
  (assert (in_range2 aux2_first))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux3__first)
  (to_rep aux3__last)))

;; H
  (assert (in_range2 aux3_first))

;; H
  (assert (dynamic_property 0 2147483646 (to_rep aux4__first)
  (to_rep aux4__last)))

;; H
  (assert (in_range2 aux4_first))

;; H
  (assert (dynamic_invariant4 r true false true))

;; H
  (assert (in_range2 r_first))

;; H
  (assert true)

;; H
  (assert
  (and (and (<= (to_rep a__first) a_first) (<= a_first (to_rep a__last)))
  (and (and (<= (to_rep a__first) a_last) (<= a_last (to_rep a__last)))
  (and (< a_first a_last)
  (and
  (and (<= (to_rep (first (rt x))) x_first)
  (<= x_first (to_rep (last (rt x)))))
  (and
  (and (<= (to_rep (first (rt x))) (+ x_first (- a_last a_first)))
  (<= (+ x_first (- a_last a_first)) (to_rep (last (rt x)))))
  (and
  (and (<= (to_rep (first (rt e))) e_first)
  (<= e_first (to_rep (last (rt e)))))
  (and
  (and (<= (to_rep (first (rt e))) e_last)
  (<= e_last (to_rep (last (rt e)))))
  (and (<= e_first e_last)
  (and
  (and (<= (to_rep (first (rt m))) m_first)
  (<= m_first (to_rep (last (rt m)))))
  (and
  (and (<= (to_rep (first (rt m))) (+ m_first (- a_last a_first)))
  (<= (+ m_first (- a_last a_first)) (to_rep (last (rt m)))))
  (and
  (and (<= (to_rep aux1__first) aux1_first)
  (<= aux1_first (to_rep aux1__last)))
  (and
  (and (<= (to_rep aux1__first) (+ aux1_first (- a_last a_first)))
  (<= (+ aux1_first (- a_last a_first)) (to_rep aux1__last)))
  (and
  (and (<= (to_rep aux2__first) aux2_first)
  (<= aux2_first (to_rep aux2__last)))
  (and
  (and (<= (to_rep aux2__first) (+ aux2_first (- a_last a_first)))
  (<= (+ aux2_first (- a_last a_first)) (to_rep aux2__last)))
  (and
  (and (<= (to_rep aux3__first) aux3_first)
  (<= aux3_first (to_rep aux3__last)))
  (and
  (and (<= (to_rep aux3__first) (+ aux3_first (- a_last a_first)))
  (<= (+ aux3_first (- a_last a_first)) (to_rep aux3__last)))
  (and
  (and (<= (to_rep aux4__first) aux4_first)
  (<= aux4_first (to_rep aux4__last)))
  (and
  (and
  (<= (to_rep aux4__first) (+ aux4_first (- (* (power 2 k) (+ (- a_last
  a_first) 1)) 1)))
  (<= (+ aux4_first (- (* (power 2 k) (+ (- a_last a_first) 1)) 1)) (to_rep
                                                                    aux4__last)))
  (and (<= k 30)
  (and
  (and (<= (to_rep (first (rt r))) r_first)
  (<= r_first (to_rep (last (rt r)))))
  (and
  (and (<= (to_rep (first (rt r))) (+ r_first (- a_last a_first)))
  (<= (+ r_first (- a_last a_first)) (to_rep (last (rt r)))))
  (and
  (= (oeq (num_of_big_int r r_first (+ (- a_last a_first) 1))
     (omod
     (oexpon__2 (base Tuple0)
     (omultiply (from_integer 2) (from_integer (+ (- a_last a_first) 1))))
     (num_of_big_int m m_first (+ (- a_last a_first) 1)))) true)
  (and
  (= (olt (from_word32 ((_ int2bv 32) 1))
     (num_of_big_int m m_first (+ (- a_last a_first) 1))) true)
  (= (bvadd ((_ int2bv 32) 1) (bvmul m_inv (to_rep1
                                           (select (elts m) m_first)))) ((_ int2bv 32) 0))))))))))))))))))))))))))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 j)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 l)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 s)))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux11 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux3 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod (oexpon (base Tuple0) (+ l1 1))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux4 (mk (to_rep aux4__first) (to_rep aux4__last))) aux4_first
     (+ l1 1))
     (omod
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 l1)))

;; H
  (assert (and (= o147 (power 2 k)) (in_range1 (power 2 k))))

;; H
  (assert (= o148 (- o147 1)))

;; H
  (assert (and (= temp___638 o148) (in_range1 o148)))

;; H
  (assert (= result32 h37))

;; H
  (assert (= h1 1))

;; H
  (assert
  (=> (and (<= 1 h1) (<= h1 temp___638))
  (and
  (and (= temp___636 h1)
  (and (= temp___633 a)
  (and (= temp___631 aux4)
  (and
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux11 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux3 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod (oexpon (base Tuple0) (+ l1 1))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n7 Int))
  (=> (and (<= 0 n7) (<= n7 (- h2 1)))
  (= (oeq
     (num_of_big_int
     (mk___t aux41 (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n7 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n7) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))
  (and
  (and
  (=> (<= 1 (- (power 2 k) 1)) (dynamic_property1 1 (- (power 2 k) 1) h2))
  (and (<= 1 h2) (<= h2 (- (power 2 k) 1))))
  (and
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux11 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux3 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod (oexpon (base Tuple0) (+ l1 1))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n7 Int))
  (=> (and (<= 0 n7) (<= n7 h2))
  (= (oeq
     (num_of_big_int
     (mk___t aux42 (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n7 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n7) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))
  (and (=> (<= 0 2147483647) (in_range2 l1))
  (and
  (=> (<= 1 (- (power 2 k) 1)) (dynamic_property1 1 (- (power 2 k) 1) h2))
  (= h2 temp___638)))))))))
  (and (and (= h6 (mk_int__ref h2)) (and (= aux42 aux45) (= a3 a6)))
  (and (= h7 h2) (and (= aux46 aux42) (= a7 a3)))))))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= h8 h6)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= aux47 aux411)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= a8 a36)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= h9 h7)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= aux48 aux46)))

;; H
  (assert (=> (and (<= 1 h1) (<= h1 temp___638)) (= a9 a7)))

;; H
  (assert
  (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= h8 (mk_int__ref h1))))

;; H
  (assert
  (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= aux47 (mk_map__ref aux4))))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= a8 a38)))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= h9 h1)))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= aux48 aux4)))

;; H
  (assert (=> (not (and (<= 1 h1) (<= h1 temp___638))) (= a9 a1)))

;; H
  (assert (and (= o263 (- e_last e_first)) (in_range1 (- e_last e_first))))

;; H
  (assert (and (= o264 o263) (uint_in_range1 o263)))

;; H
  (assert (= o265 ((_ int2bv 64) o264)))

;; H
  (assert (= o266 (bvadd o265 ((_ int2bv 64) 1))))

;; H
  (assert (= o267 (bvmul o266 ((_ int2bv 64) 32))))

;; H
  (assert (= o268 (bvsub o267 ((_ int2bv 64) 1))))

;; H
  (assert (= result13 i16))

;; H
  (assert (= i1 o268))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux11 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux31 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod
     (omultiply
     (oexpon__2 (num_of_big_int x x_first (+ l1 1))
     (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1))
     (oexpon__2 (from_word32 ((_ int2bv 32) 2))
     (oadd (from_word64 i2) (from_word32 ((_ int2bv 32) 1))))))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n7 Int))
  (=> (and (<= 0 n7) (<= n7 (- (power 2 k) 1)))
  (= (oeq
     (num_of_big_int
     (mk___t (map__content aux47)
     (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n7 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n7) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))
  (bvult i2 (bvmul (bvadd ((_ int2bv 64) (- e_last e_first)) ((_ int2bv 64) 1)) ((_ int2bv 64) 32)))))

;; H
  (assert
  (and (=> (<= 0 2147483647) (in_range2 j1))
  (=> (<= 0 2147483647) (in_range2 s1))))

;; H
  (assert
  (and (= result15 (bit_set e e_first i2))
  (= (= result15 true)
  (not
  (= (bvand (to_rep1
            (select (elts e) (+ e_first (bv2int (bvudiv i2 ((_ int2bv 64) 32))))))
  (let ((temp___455 (bv2int (bvurem i2 ((_ int2bv 64) 32)))))
  (ite (< temp___455 4294967296)
  (bvshl ((_ int2bv 32) 1) ((_ int2bv 32) temp___455)) ((_ int2bv 32) 0)))) ((_ int2bv 32) 0))))))

;; H
  (assert (= result15 true))

;; H
  (assert (= result16 (mk_t__ref w1)))

;; H
  (assert (= w2 ((_ int2bv 32) 1)))

;; H
  (assert (= result17 (mk_int__ref s1)))

;; H
  (assert (= s2 0))

;; H
  (assert (= result18 (mk_int__ref j1)))

;; H
  (assert (= j2 1))

;; H
  (assert
  (and
  (and (= temp___645 s2)
  (and (= temp___644 j2)
  (and (= temp___643 w2)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux11 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux31 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod
     (omultiply
     (oexpon__2 (num_of_big_int x x_first (+ l1 1))
     (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1))
     (oexpon__2 (from_word32 ((_ int2bv 32) 2))
     (oadd (from_word64 i2) (from_word32 ((_ int2bv 32) 1))))))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n7 Int))
  (=> (and (<= 0 n7) (<= n7 (- (power 2 k) 1)))
  (= (oeq
     (num_of_big_int
     (mk___t (map__content aux47)
     (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n7 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n7) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))
  (= (oeq
     (omultiply (from_word32 w3)
     (oexpon (from_word32 ((_ int2bv 32) 2)) (- (- j3 s3) 1)))
     (omod
     (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1))
     (oexpon__2 (from_word32 ((_ int2bv 32) 2))
     (osubtract (from_word64 i2)
     (osubtract (from_integer j3) (from_word32 ((_ int2bv 32) 1))))))
     (oexpon (from_word32 ((_ int2bv 32) 2)) j3))) true))
  (= (bvurem w3 ((_ int2bv 32) 2)) ((_ int2bv 32) 1))) (<= 0 s3)) (<
  s3 j3)) (<= j3 (+ k 1)))
  (= (ole (from_integer j3)
     (oadd (from_word64 i2) (from_word32 ((_ int2bv 32) 1)))) true))
  (bvult i2 (bvmul (bvadd ((_ int2bv 64) (- e_last e_first)) ((_ int2bv 64) 1)) ((_ int2bv 64) 32))))
  (and
  (and (=> (<= 0 2147483647) (in_range2 j3))
  (=> (<= 0 2147483647) (in_range2 s3)))
  (and
  (and
  (and (= w7 (mk_t__ref w3))
  (and (= s7 (mk_int__ref s3)) (= j5 (mk_int__ref j3))))
  (and (= w8 w3) (and (= s8 s3) (= j6 j3))))
  (not (and (<= j3 k) (bvule ((_ int2bv 64) j3) i2)))))))))
  (and (and (= w13 w7) (and (= s13 s7) (= j11 j5)))
  (and (= w14 w8) (and (= s14 s8) (= j12 j6))))))

;; H
  (assert (= w15 w13))

;; H
  (assert (= s15 s13))

;; H
  (assert (= j13 j11))

;; H
  (assert (= w16 w14))

;; H
  (assert (= s16 s14))

;; H
  (assert (= j14 j12))

;; H
  (assert
  (and (= o463 (+ (int__content s15) 1)) (in_range1
  (+ (int__content s15) 1))))

;; H
  (assert (= result24 s15))

;; H
  (assert (= s17 o463))

;; H
  (assert (= s17 r94b))

;; H
  (assert (in_range2 r94b))

;; H
  (assert (= result25 (mk_int__ref h10)))

;; H
  (assert (= h11 1))

;; H
  (assert (<= 1 h11))

;; H
  (assert (<= h11 r94b))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= l1 (- a_last a_first))
  (= (oeq
     (num_of_big_int
     (mk___t aux11 (mk (to_rep aux1__first) (to_rep aux1__last))) aux1_first
     (+ l1 1)) (from_word32 ((_ int2bv 32) 1))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux2 (mk (to_rep aux2__first) (to_rep aux2__last))) aux2_first
     (+ l1 1))
     (omod
     (omultiply
     (omultiply (num_of_big_int x x_first (+ l1 1))
     (num_of_big_int x x_first (+ l1 1))) (oexpon (base Tuple0) (+ l1 1)))
     (num_of_big_int m m_first (+ l1 1)))) true))
  (= (oeq
     (num_of_big_int
     (mk___t aux32 (mk (to_rep aux3__first) (to_rep aux3__last))) aux3_first
     (+ l1 1))
     (omod
     (omultiply
     (oexpon__2 (num_of_big_int x x_first (+ l1 1))
     (omultiply
     (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1))
     (oexpon__2 (from_word32 ((_ int2bv 32) 2))
     (oadd (from_word64 i2) (from_word32 ((_ int2bv 32) 1)))))
     (oexpon (from_word32 ((_ int2bv 32) 2)) (- h12 1))))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))
  (forall ((n7 Int))
  (=> (and (<= 0 n7) (<= n7 (- (power 2 k) 1)))
  (= (oeq
     (num_of_big_int
     (mk___t (map__content aux47)
     (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n7 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n7) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true))))
  (= (oeq (from_word32 (t__content w15))
     (omod
     (odivide (num_of_big_int e e_first (+ (- e_last e_first) 1))
     (oexpon__2 (from_word32 ((_ int2bv 32) 2))
     (osubtract (from_word64 i2)
     (osubtract (from_integer s17) (from_word32 ((_ int2bv 32) 1))))))
     (oexpon (from_word32 ((_ int2bv 32) 2)) s17))) true))
  (= (bvurem (t__content w15) ((_ int2bv 32) 2)) ((_ int2bv 32) 1)))
  (<= 0 s17)) (<= s17 (+ k 1)))
  (= (ole (from_integer s17)
     (oadd (from_word64 i2) (from_word32 ((_ int2bv 32) 1)))) true))
  (bvult i2 (bvmul (bvadd ((_ int2bv 64) (- e_last e_first)) ((_ int2bv 64) 1)) ((_ int2bv 64) 32)))))

;; H
  (assert
  (and (=> (<= 1 r94b) (dynamic_property2 1 r94b h12))
  (and (<= 1 h12) (<= h12 r94b))))

;; H
  (assert (and (= o564 (- e_last e_first)) (in_range1 (- e_last e_first))))

;; H
  (assert (and (= o565 o564) (uint_in_range1 o564)))

;; H
  (assert (= o566 ((_ int2bv 64) o565)))

;; H
  (assert (= o567 (bvadd o566 ((_ int2bv 64) 1))))

;; H
  (assert (= o568 (bvmul o567 ((_ int2bv 64) 32))))

;; H
  (assert (= o569 (ite (bvult i2 o568) true false)))

;; H
  (assert (= o561 (from_word32 ((_ int2bv 32) 1))))

;; H
  (assert (= o560 (from_word64 i2)))

;; H
  (assert (= o562 (oadd o560 o561)))

;; H
  (assert (= o559 (from_integer s17)))

;; H
  (assert (= o563 (ole o559 o562)))

;; H
  (assert (and (= o557 (+ k 1)) (in_range1 (+ k 1))))

;; H
  (assert (= o558 (ite (<= s17 o557) true false)))

;; H
  (assert (= o553 (from_word32 ((_ int2bv 32) 2))))

;; H
  (assert (= o554 (oexpon o553 s17)))

;; H
  (assert (= o548 (from_word32 ((_ int2bv 32) 1))))

;; H
  (assert (= o547 (from_integer s17)))

;; H
  (assert (= o549 (osubtract o547 o548)))

;; H
  (assert (= o546 (from_word64 i2)))

;; H
  (assert (= o550 (osubtract o546 o549)))

;; H
  (assert (= o545 (from_word32 ((_ int2bv 32) 2))))

;; H
  (assert (= o551 (oexpon__2 o545 o550)))

;; H
  (assert (and (= o540 (- e_last e_first)) (in_range1 (- e_last e_first))))

;; H
  (assert (= o541 (+ o540 1)))

;; H
  (assert (and (= o542 o541) (in_range1 o541)))

;; H
  (assert (and (= o543 o542) (in_range2 o542)))

;; H
  (assert (= o544 (num_of_big_int e e_first o543)))

;; H
  (assert (= o552 (odivide o544 o551)))

;; H
  (assert (= o555 (omod o552 o554)))

;; H
  (assert (= o539 (from_word32 (t__content w15))))

;; H
  (assert (= o556 (oeq o539 o555)))

;; H
  (assert (and (= o513 (power 2 k)) (in_range1 (power 2 k))))

;; H
  (assert (= o514 (- o513 1)))

;; H
  (assert (and (= o515 o514) (in_range1 o514)))

;; H
  (assert (= o516 (ite (<= n4 o515) true false)))

;; H
  (assert (= result26 (ite (<= 0 n4) o516 false)))

;; H
  (assert
  (= (= o538 true)
  (forall ((n7 Int))
  (=> (and (<= 0 n7) (<= n7 (- (power 2 k) 1)))
  (= (oeq
     (num_of_big_int
     (mk___t (map__content aux47)
     (mk (to_rep aux4__first) (to_rep aux4__last)))
     (+ aux4_first (* n7 (+ l1 1))) (+ l1 1))
     (omod
     (omultiply (oexpon (num_of_big_int x x_first (+ l1 1)) (+ (* 2 n7) 1))
     (oexpon (base Tuple0) (+ l1 1))) (num_of_big_int m m_first (+ l1 1)))) true)))))

;; H
  (assert (and (= o507 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o508 (num_of_big_int m m_first o507)))

;; H
  (assert (and (= o504 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert
  (and (= o503 (base Tuple0))
  (= o503 (oexpon (from_word32 ((_ int2bv 32) 2)) 32))))

;; H
  (assert (= o505 (oexpon o503 o504)))

;; H
  (assert (= o499 (from_word32 ((_ int2bv 32) 2))))

;; H
  (assert (= o500 (oexpon o499 (- h12 1))))

;; H
  (assert (= o495 (from_word32 ((_ int2bv 32) 1))))

;; H
  (assert (= o494 (from_word64 i2)))

;; H
  (assert (= o496 (oadd o494 o495)))

;; H
  (assert (= o493 (from_word32 ((_ int2bv 32) 2))))

;; H
  (assert (= o497 (oexpon__2 o493 o496)))

;; H
  (assert (and (= o488 (- e_last e_first)) (in_range1 (- e_last e_first))))

;; H
  (assert (= o489 (+ o488 1)))

;; H
  (assert (and (= o490 o489) (in_range1 o489)))

;; H
  (assert (and (= o491 o490) (in_range2 o490)))

;; H
  (assert (= o492 (num_of_big_int e e_first o491)))

;; H
  (assert (= o498 (odivide o492 o497)))

;; H
  (assert (= o501 (omultiply o498 o500)))

;; H
  (assert (and (= o486 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o487 (num_of_big_int x x_first o486)))

;; H
  (assert (= o502 (oexpon__2 o487 o501)))

;; H
  (assert (= o506 (omultiply o502 o505)))

;; H
  (assert (= o509 (omod o506 o508)))

;; H
  (assert (and (= o484 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert
  (= o485 (num_of_big_int
          (mk___t aux32 (mk (to_rep aux3__first) (to_rep aux3__last)))
          aux3_first o484)))

;; H
  (assert (= o510 (oeq o485 o509)))

;; H
  (assert (and (= o480 (+ l1 1)) (in_range1 (+ l1 1))))

;; H
  (assert (= o481 (num_of_big_int m m_first o480)))

(assert
;; WP_parameter_def
 ;; File "lsc-bignum.ads", line 141, characters 0-0
  (not (in_range1 (+ l1 1))))
(check-sat)
(exit)
