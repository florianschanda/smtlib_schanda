;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort enum_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (enum_type enum_type) Bool)

(declare-const dummy1 enum_type)

(declare-datatypes ((enum_type__ref 0))
(((mk_enum_type__ref (enum_type__content enum_type)))))
(define-fun enum_type__ref___projection ((a enum_type__ref)) enum_type
  (enum_type__content a))

(declare-fun to_rep1 (enum_type) Int)

(declare-fun of_rep1 (Int) enum_type)

;; inversion_axiom
  (assert
  (forall ((x enum_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x enum_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__my_package_2__variant_type__m_v enum_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) enum_type
  (rec__my_package_2__variant_type__m_v a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__my_package_2__variant_type__m_c integer)(rec__my_package_2__variant_type__m_a integer)(rec__my_package_2__variant_type__m_b integer)))))
(define-fun us_split_fields_M_C__projection ((a us_split_fields)) integer
  (rec__my_package_2__variant_type__m_c a))

(define-fun us_split_fields_M_A__projection ((a us_split_fields)) integer
  (rec__my_package_2__variant_type__m_a a))

(define-fun us_split_fields_M_B__projection ((a us_split_fields)) integer
  (rec__my_package_2__variant_type__m_b a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun my_package_2__variant_type__m_a__pred ((a us_rep)) Bool (=
  (to_rep1 (rec__my_package_2__variant_type__m_v (us_split_discrs1 a))) 0))

(define-fun my_package_2__variant_type__m_b__pred ((a us_rep)) Bool (=
  (to_rep1 (rec__my_package_2__variant_type__m_v (us_split_discrs1 a))) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__my_package_2__variant_type__m_v
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__my_package_2__variant_type__m_v
                                                  (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__my_package_2__variant_type__m_c
                           (us_split_fields1 a))) (to_rep
                                                  (rec__my_package_2__variant_type__m_c
                                                  (us_split_fields1 b)))))
                        (=> (my_package_2__variant_type__m_a__pred a)
                        (= (to_rep
                           (rec__my_package_2__variant_type__m_a
                           (us_split_fields1 a))) (to_rep
                                                  (rec__my_package_2__variant_type__m_a
                                                  (us_split_fields1 b))))))
                        (=> (my_package_2__variant_type__m_b__pred a)
                        (= (to_rep
                           (rec__my_package_2__variant_type__m_b
                           (us_split_fields1 a))) (to_rep
                                                  (rec__my_package_2__variant_type__m_b
                                                  (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const my_package_2__variant_type__m_v__first__bit Int)

(declare-const my_package_2__variant_type__m_v__last__bit Int)

(declare-const my_package_2__variant_type__m_v__position Int)

;; my_package_2__variant_type__m_v__first__bit_axiom
  (assert (<= 0 my_package_2__variant_type__m_v__first__bit))

;; my_package_2__variant_type__m_v__last__bit_axiom
  (assert
  (< my_package_2__variant_type__m_v__first__bit my_package_2__variant_type__m_v__last__bit))

;; my_package_2__variant_type__m_v__position_axiom
  (assert (<= 0 my_package_2__variant_type__m_v__position))

(declare-const my_package_2__variant_type__m_c__first__bit Int)

(declare-const my_package_2__variant_type__m_c__last__bit Int)

(declare-const my_package_2__variant_type__m_c__position Int)

;; my_package_2__variant_type__m_c__first__bit_axiom
  (assert (<= 0 my_package_2__variant_type__m_c__first__bit))

;; my_package_2__variant_type__m_c__last__bit_axiom
  (assert
  (< my_package_2__variant_type__m_c__first__bit my_package_2__variant_type__m_c__last__bit))

;; my_package_2__variant_type__m_c__position_axiom
  (assert (<= 0 my_package_2__variant_type__m_c__position))

(declare-const my_package_2__variant_type__m_a__first__bit Int)

(declare-const my_package_2__variant_type__m_a__last__bit Int)

(declare-const my_package_2__variant_type__m_a__position Int)

;; my_package_2__variant_type__m_a__first__bit_axiom
  (assert (<= 0 my_package_2__variant_type__m_a__first__bit))

;; my_package_2__variant_type__m_a__last__bit_axiom
  (assert
  (< my_package_2__variant_type__m_a__first__bit my_package_2__variant_type__m_a__last__bit))

;; my_package_2__variant_type__m_a__position_axiom
  (assert (<= 0 my_package_2__variant_type__m_a__position))

(declare-const my_package_2__variant_type__m_b__first__bit Int)

(declare-const my_package_2__variant_type__m_b__last__bit Int)

(declare-const my_package_2__variant_type__m_b__position Int)

;; my_package_2__variant_type__m_b__first__bit_axiom
  (assert (<= 0 my_package_2__variant_type__m_b__first__bit))

;; my_package_2__variant_type__m_b__last__bit_axiom
  (assert
  (< my_package_2__variant_type__m_b__first__bit my_package_2__variant_type__m_b__last__bit))

;; my_package_2__variant_type__m_b__position_axiom
  (assert (<= 0 my_package_2__variant_type__m_b__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((variant_type__ref 0))
(((mk_variant_type__ref (variant_type__content us_rep)))))
(define-fun variant_type__ref___projection ((a variant_type__ref)) us_rep
  (variant_type__content a))

(declare-const ci Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const xi Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const v__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 1)) (in_range1 temp___expr_135)))

(declare-const v__split_fields integer)

(declare-const v__split_fields1 integer)

(declare-const v__split_fields2 integer)

(declare-const o integer)

(declare-const o1 integer)

(declare-const o2 integer)

(declare-const o3 integer)

(declare-const temp___146 enum_type)

(declare-const temp___1461 integer)

(declare-const temp___1462 integer)

(declare-const temp___1463 integer)

(declare-const result integer)

(declare-const result1 integer)

(declare-const result2 integer)

(declare-const v__split_fields3 integer)

(declare-const v__split_fields4 integer)

(declare-const v__split_fields5 integer)

;; H
  (assert (in_range ci))

;; H
  (assert (in_range xi))

;; H
  (assert (not (= ci 0)))

;; H
  (assert (= (to_rep o) ci))

;; H
  (assert (= o o1))

;; H
  (assert (= v__split_fields1 o2))

;; H
  (assert (= v__split_fields2 o3))

;; H
  (assert (= v__split_discrs (mk___split_discrs temp___146)))

;; H
  (assert (= temp___1461 o1))

;; H
  (assert (= temp___1462 o2))

;; H
  (assert (= temp___1463 o3))

;; H
  (assert (= result v__split_fields))

;; H
  (assert (= result1 v__split_fields1))

;; H
  (assert (= result2 v__split_fields2))

;; H
  (assert (= temp___1461 v__split_fields3))

;; H
  (assert (= temp___1462 v__split_fields4))

;; H
  (assert (= temp___1463 v__split_fields5))

;; H
  (assert (= v__split_discrs (mk___split_discrs temp___146)))

;; H
  (assert
  (not
  (= (to_rep1 (rec__my_package_2__variant_type__m_v v__split_discrs)) 0)))

(assert
;; WP_parameter_def
 ;; File "my_package_2.ads", line 21, characters 0-0
  (not
  (= (to_rep1 (rec__my_package_2__variant_type__m_v v__split_discrs)) 1)))
(check-sat)
(exit)
