;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-fun dummy4 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant2 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun current_line (us_private us_private) us_t)

(declare-fun current_line__function_guard (us_t us_private us_private) Bool)

;; current_line__post_axiom
  (assert
  (forall ((input__line us_private) (input__last_char us_private))
  (! (dynamic_invariant2 (current_line input__line input__last_char) true
  false true) :pattern ((current_line input__line input__last_char)) )))

(declare-fun column_number (us_private us_private) Int)

(declare-fun column_number__function_guard (Int us_private us_private) Bool)

;; column_number__post_axiom
  (assert
  (forall ((input__line us_private) (input__first_char us_private))
  (! (dynamic_invariant (column_number input__line input__first_char) true
  false true) :pattern ((column_number input__line input__first_char)) )))

(declare-fun line_number (us_private) Int)

(declare-fun line_number__function_guard (Int us_private) Bool)

;; line_number__post_axiom
  (assert
  (forall ((input__line_num us_private)) (! (dynamic_invariant
  (line_number input__line_num) true false
  true) :pattern ((line_number input__line_num)) )))

(declare-fun s () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun error_pos () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun r14b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun temp___String_Literal_603 (tuple0) (Array Int character))

;; temp___String_Literal_603__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_603 us_void_param) 1)) 115)
     (= (to_rep (select (temp___String_Literal_603 us_void_param) 2)) 100))
     (= (to_rep (select (temp___String_Literal_603 us_void_param) 3)) 99))
     (= (to_rep (select (temp___String_Literal_603 us_void_param) 4)) 58)) :pattern (
  (temp___String_Literal_603 us_void_param)) )))

(declare-fun temp___String_Literal_604 (tuple0) (Array Int character))

;; temp___String_Literal_604__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 1)) 115)
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 2)) 100))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 3)) 99))
     (= (to_rep (select (temp___String_Literal_604 us_void_param) 4)) 58)) :pattern (
  (temp___String_Literal_604 us_void_param)) )))

(declare-fun temp___String_Literal_605 (tuple0) (Array Int character))

;; temp___String_Literal_605__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (to_rep (select (temp___String_Literal_605 us_void_param) 1)) 45) :pattern (
  (temp___String_Literal_605 us_void_param)) )))

(declare-fun temp___String_Literal_608 (tuple0) (Array Int character))

;; temp___String_Literal_608__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (to_rep (select (temp___String_Literal_608 us_void_param) 1)) 33) :pattern (
  (temp___String_Literal_608 us_void_param)) )))

(declare-fun temp___String_Literal_609 (tuple0) (Array Int character))

;; temp___String_Literal_609__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 1)) 115)
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 2)) 100))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 3)) 99))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 5)) 105))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 6)) 110))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 7)) 112))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 8)) 117))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 11)) 101))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 12)) 114))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 13)) 114))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 14)) 111))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 15)) 114))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 17)) 97))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 18)) 116))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 20)) 108))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 21)) 105))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 22)) 110))
     (= (to_rep (select (temp___String_Literal_609 us_void_param) 23)) 101)) :pattern (
  (temp___String_Literal_609 us_void_param)) )))

(declare-fun temp___String_Literal_610 (tuple0) (Array Int character))

;; temp___String_Literal_610__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_610 us_void_param) 1)) 58)
     (= (to_rep (select (temp___String_Literal_610 us_void_param) 2)) 32)) :pattern (
  (temp___String_Literal_610 us_void_param)) )))

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(declare-fun pos () Int)

(declare-fun i () Int)

(declare-fun line () us_private)

(declare-fun first_char () us_private)

(declare-fun last_char () us_private)

(declare-fun line_num () us_private)

(declare-fun o () Int)

(declare-fun o1 () (Array Int character))

(declare-fun o2 () t)

(declare-fun o3 () Int)

(declare-fun o4 () us_image)

(declare-fun temp___611 () (Array Int character))

(declare-fun temp___6111 () t)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () Int)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun result () Int)

(declare-fun pos1 () Int)

(declare-fun result1 () Int)

(declare-fun pos2 () Int)

(declare-fun result2 () Int)

(declare-fun i1 () Int)

(declare-fun i2 () Int)

(declare-fun i3 () Int)

(declare-fun i4 () Int)

(declare-fun i5 () Int)

(declare-fun i6 () Int)

(define-fun temp___6112 () us_t (mk___t temp___611 temp___6111))

(define-fun o10 () us_t (mk___t o1 o2))

;; H
  (assert (dynamic_invariant2 s true false true))

;; H
  (assert (in_range4 error_pos))

;; H
  (assert (= result pos))

;; H
  (assert (= pos1 error_pos))

;; H
  (assert (in_range4 pos1))

;; H
  (assert
  (=> (= pos1 0) (and (= o (column_number line first_char)) (in_range4 o))))

;; H
  (assert (=> (= pos1 0) (= result1 pos1)))

;; H
  (assert (=> (= pos1 0) (= pos2 o)))

;; H
  (assert (=> (not (= pos1 0)) (= pos2 pos1)))

;; H
  (assert
  (and (= o10 (current_line line last_char)) (dynamic_invariant2 o10 true
  false true)))

;; H
  (assert (= (- pos2 1) r14b))

;; H
  (assert (in_range1 r14b))

;; H
  (assert (= result2 i))

;; H
  (assert (= i1 1))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 r14b)) (and (<= 1 i2) (<= i2 r14b))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i2 r14b)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i2 i3)))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i4 i2)))

;; H
  (assert
  (=> (and (<= 1 i1) (<= i1 r14b)) (= (mk_int__ref i5) (mk_int__ref i3))))

;; H
  (assert (=> (and (<= 1 i1) (<= i1 r14b)) (= i6 i4)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 r14b))) (= i1 i5)))

;; H
  (assert (=> (not (and (<= 1 i1) (<= i1 r14b))) (= i6 i1)))

;; H
  (assert (and (= o3 (line_number line_num)) (in_range4 o3)))

;; H
  (assert (= o4 (attr__ATTRIBUTE_IMAGE4 o3)))

;; H
  (assert (= temp___6112 (to_string o4)))

;; H
  (assert (not (= (length temp___6112) 0)))

;; H
  (assert (=> (<= 1 2) (= o5 (+ (- 2 1) 1))))

;; H
  (assert (=> (not (<= 1 2)) (= o5 0)))

;; H
  (assert
  (=> (<= (to_rep1 (first temp___6111)) (to_rep1 (last temp___6111)))
  (= o6 (+ (- (to_rep1 (last temp___6111)) (to_rep1 (first temp___6111))) 1))))

;; H
  (assert
  (=> (not (<= (to_rep1 (first temp___6111)) (to_rep1 (last temp___6111))))
  (= o6 0)))

;; H
  (assert (= o7 (+ o6 o5)))

;; H
  (assert (= o8 (+ (to_rep1 (first temp___6111)) o7)))

;; H
  (assert (= o9 (- o8 1)))

(assert
;; WP_parameter_def
 ;; File "screen_output.adb", line 51, characters 0-0
  (not (in_range2 o9)))
(check-sat)
