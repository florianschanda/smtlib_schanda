;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-sort ta3D1 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (ta3D1 ta3D1) Bool)

(declare-const dummy1 ta3D1)

(declare-datatypes () ((ta3D1__ref (mk_ta3D1__ref (ta3D1__content ta3D1)))))
(define-fun ta3D1__ref___projection ((a ta3D1__ref)) ta3D1 (ta3D1__content a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy2 (Array Int integer))

(declare-const value__size Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int integer)))))))
(declare-fun slide1 ((Array Int (Array Int integer)) Int
  Int) (Array Int (Array Int integer)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int integer))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int integer))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int integer)) Int Int
  (Array Int (Array Int integer)) Int Int) (Array Int (Array Int integer)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int integer)))
  (b (Array Int (Array Int integer))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int integer)
  Int) (Array Int (Array Int integer)))

;; singleton_def
  (assert
  (forall ((v (Array Int integer)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int (Array Int integer))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int integer))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq (select a temp___idx_133) 1 2
                              (select b (+ (- b__first a__first) temp___idx_133))
                              1 2) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int integer)))
  (b (Array Int (Array Int integer))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq (select a temp___idx_133) 1 2
     (select b (+ (- b__first a__first) temp___idx_133)) 1 2) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const b Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort t59s 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (t59s t59s) Bool)

(declare-const dummy3 t59s)

(declare-datatypes () ((t59s__ref (mk_t59s__ref (t59s__content t59s)))))
(define-fun t59s__ref___projection ((a t59s__ref)) t59s (t59s__content a))

(declare-sort t65s 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (t65s t65s) Bool)

(declare-const dummy4 t65s)

(declare-datatypes () ((t65s__ref (mk_t65s__ref (t65s__content t65s)))))
(define-fun t65s__ref___projection ((a t65s__ref)) t65s (t65s__content a))

(declare-sort t71s 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (t71s t71s) Bool)

(declare-const dummy5 t71s)

(declare-datatypes () ((t71s__ref (mk_t71s__ref (t71s__content t71s)))))
(define-fun t71s__ref___projection ((a t71s__ref)) t71s (t71s__content a))

(declare-sort t77s 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (t77s t77s) Bool)

(declare-const dummy6 t77s)

(declare-datatypes () ((t77s__ref (mk_t77s__ref (t77s__content t77s)))))
(define-fun t77s__ref___projection ((a t77s__ref)) t77s (t77s__content a))

(declare-sort t83s 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (t83s t83s) Bool)

(declare-const dummy7 t83s)

(declare-datatypes () ((t83s__ref (mk_t83s__ref (t83s__content t83s)))))
(define-fun t83s__ref___projection ((a t83s__ref)) t83s (t83s__content a))

(declare-fun temp___224 ((Array Int integer)
  (Array Int integer)) (Array Int (Array Int integer)))

;; def_axiom
  (assert
  (forall ((temp___226 (Array Int integer)) (temp___227 (Array Int integer)))
  (let ((temp___225 (temp___224 temp___226 temp___227)))
  (and (= (select temp___225 1) temp___226)
  (= (select temp___225 2) temp___227)))))

(declare-fun temp___229 (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___231 Int) (temp___232 Int))
  (let ((temp___230 (temp___229 temp___231 temp___232)))
  (and (= (select temp___230 1) (of_rep temp___231))
  (= (select temp___230 2) (of_rep temp___232))))))

(declare-fun temp___234 (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___236 Int) (temp___237 Int))
  (let ((temp___235 (temp___234 temp___236 temp___237)))
  (and (= (select temp___235 1) (of_rep temp___236))
  (= (select temp___235 2) (of_rep temp___237))))))

(declare-fun temp___240 ((Array Int integer)
  (Array Int integer)) (Array Int (Array Int integer)))

;; def_axiom
  (assert
  (forall ((temp___242 (Array Int integer)) (temp___243 (Array Int integer)))
  (let ((temp___241 (temp___240 temp___242 temp___243)))
  (and (= (select temp___241 1) temp___242)
  (= (select temp___241 2) temp___243)))))

(declare-fun temp___245 (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___247 Int) (temp___248 Int))
  (let ((temp___246 (temp___245 temp___247 temp___248)))
  (and (= (select temp___246 1) (of_rep temp___247))
  (= (select temp___246 2) (of_rep temp___248))))))

(declare-fun temp___250 (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___252 Int) (temp___253 Int))
  (let ((temp___251 (temp___250 temp___252 temp___253)))
  (and (= (select temp___251 1) (of_rep temp___252))
  (= (select temp___251 2) (of_rep temp___253))))))

(declare-fun temp___256 ((Array Int integer)
  (Array Int integer)) (Array Int (Array Int integer)))

;; def_axiom
  (assert
  (forall ((temp___258 (Array Int integer)) (temp___259 (Array Int integer)))
  (let ((temp___257 (temp___256 temp___258 temp___259)))
  (and (= (select temp___257 1) temp___258)
  (= (select temp___257 2) temp___259)))))

(declare-fun temp___261 (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___263 Int) (temp___264 Int))
  (let ((temp___262 (temp___261 temp___263 temp___264)))
  (and (= (select temp___262 1) (of_rep temp___263))
  (= (select temp___262 2) (of_rep temp___264))))))

(declare-fun temp___266 (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___268 Int) (temp___269 Int))
  (let ((temp___267 (temp___266 temp___268 temp___269)))
  (and (= (select temp___267 1) (of_rep temp___268))
  (= (select temp___267 2) (of_rep temp___269))))))

(declare-fun temp___272 ((Array Int integer)
  (Array Int integer)) (Array Int (Array Int integer)))

;; def_axiom
  (assert
  (forall ((temp___274 (Array Int integer)) (temp___275 (Array Int integer)))
  (let ((temp___273 (temp___272 temp___274 temp___275)))
  (and (= (select temp___273 1) temp___274)
  (= (select temp___273 2) temp___275)))))

(declare-fun temp___277 (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___279 Int) (temp___280 Int))
  (let ((temp___278 (temp___277 temp___279 temp___280)))
  (and (= (select temp___278 1) (of_rep temp___279))
  (= (select temp___278 2) (of_rep temp___280))))))

(declare-fun temp___282 (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___284 Int) (temp___285 Int))
  (let ((temp___283 (temp___282 temp___284 temp___285)))
  (and (= (select temp___283 1) (of_rep temp___284))
  (= (select temp___283 2) (of_rep temp___285))))))

(declare-fun temp___288 ((Array Int integer)
  (Array Int integer)) (Array Int (Array Int integer)))

;; def_axiom
  (assert
  (forall ((temp___290 (Array Int integer)) (temp___291 (Array Int integer)))
  (let ((temp___289 (temp___288 temp___290 temp___291)))
  (and (= (select temp___289 1) temp___290)
  (= (select temp___289 2) temp___291)))))

(declare-fun temp___293 (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___295 Int) (temp___296 Int))
  (let ((temp___294 (temp___293 temp___295 temp___296)))
  (and (= (select temp___294 1) (of_rep temp___295))
  (= (select temp___294 2) (of_rep temp___296))))))

(declare-fun temp___298 (Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___300 Int) (temp___301 Int))
  (let ((temp___299 (temp___298 temp___300 temp___301)))
  (and (= (select temp___299 1) (of_rep temp___300))
  (= (select temp___299 2) (of_rep temp___301))))))

(declare-const one Int)

;; H
  (assert (in_range one))

;; H
  (assert (in_range b))

;; H
  (assert (= one 1))

(assert
;; WP_parameter_def
 ;; File "arr_aggregate.ads", line 41, characters 0-0
  (not (= one 1)))
(check-sat)
(exit)
