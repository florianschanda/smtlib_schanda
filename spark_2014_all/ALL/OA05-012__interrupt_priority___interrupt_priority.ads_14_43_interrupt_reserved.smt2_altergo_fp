(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type any_priority

predicate in_range(x: int) = ((0 <= x) and (x <= 98))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : any_priority, any_priority -> bool

logic dummy : any_priority

type any_priority__ref = { any_priority__content : any_priority
}

function any_priority__ref___projection(a: any_priority__ref) : any_priority =
  (a).any_priority__content

logic to_rep : any_priority -> int

logic of_rep : int -> any_priority

axiom inversion_axiom :
  (forall x:any_priority [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:any_priority [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type interrupt_priority

predicate in_range1(x: int) = ((98 <= x) and (x <= 98))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : interrupt_priority, interrupt_priority -> bool

logic dummy1 : interrupt_priority

type interrupt_priority__ref = { interrupt_priority__content :
interrupt_priority
}

function interrupt_priority__ref___projection(a: interrupt_priority__ref) : interrupt_priority =
  (a).interrupt_priority__content

type integer

predicate in_range2(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type us_split_discrs = { rec__interrupt_priority__interrupt_needed_1__c :
any_priority
}

function us_split_discrs___2__projection(a: us_split_discrs) : any_priority =
  (a).rec__interrupt_priority__interrupt_needed_1__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__interrupt_priority__interrupt_needed_1__i :
integer
}

function us_split_fields_I__2__projection(a: us_split_fields) : integer =
  (a).rec__interrupt_priority__interrupt_needed_1__i

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___29__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___31__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___32__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:any_priority. forall a1:integer. (0 <= object__size({
  us_split_discrs1 = { rec__interrupt_priority__interrupt_needed_1__c = a };
  us_split_fields1 = { rec__interrupt_priority__interrupt_needed_1__i = a1 }
  })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:any_priority. forall a1:integer. (0 <= object__alignment({
  us_split_discrs1 = { rec__interrupt_priority__interrupt_needed_1__c = a };
  us_split_fields1 = { rec__interrupt_priority__interrupt_needed_1__i = a1 }
  })))

logic interrupt_priority__interrupt_needed_1__c__first__bit : int

logic interrupt_priority__interrupt_needed_1__c__last__bit : int

logic interrupt_priority__interrupt_needed_1__c__position : int

axiom interrupt_priority__interrupt_needed_1__c__first__bit_axiom :
  (0 <= interrupt_priority__interrupt_needed_1__c__first__bit)

axiom interrupt_priority__interrupt_needed_1__c__last__bit_axiom :
  (interrupt_priority__interrupt_needed_1__c__first__bit <  interrupt_priority__interrupt_needed_1__c__last__bit)

axiom interrupt_priority__interrupt_needed_1__c__position_axiom :
  (0 <= interrupt_priority__interrupt_needed_1__c__position)

logic interrupt_priority__interrupt_needed_1__i__first__bit : int

logic interrupt_priority__interrupt_needed_1__i__last__bit : int

logic interrupt_priority__interrupt_needed_1__i__position : int

axiom interrupt_priority__interrupt_needed_1__i__first__bit_axiom :
  (0 <= interrupt_priority__interrupt_needed_1__i__first__bit)

axiom interrupt_priority__interrupt_needed_1__i__last__bit_axiom :
  (interrupt_priority__interrupt_needed_1__i__first__bit <  interrupt_priority__interrupt_needed_1__i__last__bit)

axiom interrupt_priority__interrupt_needed_1__i__position_axiom :
  (0 <= interrupt_priority__interrupt_needed_1__i__position)

logic user_eq3 : us_rep, us_rep -> bool

type interrupt_needed_1__ref = { interrupt_needed_1__content : us_rep
}

function interrupt_needed_1__ref___projection(a: interrupt_needed_1__ref) : us_rep =
  (a).interrupt_needed_1__content

logic self__ : any_priority

logic self__1 : integer

 (* File "interrupt_priority.ads", line 12, characters 0-0 *)
goal WP_parameter_def : (forall temp___1548:bool. (temp___1548 = false))
