;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun state_a (Bool Int) Bool)

(declare-fun state_a__function_guard (Bool Bool Int) Bool)

;; state_a__post_axiom
  (assert true)

;; state_a__def_axiom
  (assert
  (forall ((state_machine__flag Bool))
  (forall ((state_machine__num Int))
  (! (= (= (state_a state_machine__flag state_machine__num) true)
     (and (= state_machine__flag true) (< 0 state_machine__num))) :pattern (
  (state_a state_machine__flag state_machine__num)) ))))

(declare-fun state_b (Bool Int) Bool)

(declare-fun state_b__function_guard (Bool Bool Int) Bool)

;; state_b__post_axiom
  (assert true)

;; state_b__def_axiom
  (assert
  (forall ((state_machine__flag Bool))
  (forall ((state_machine__num Int))
  (! (= (= (state_b state_machine__flag state_machine__num) true)
     (and (= state_machine__flag true) (<= state_machine__num 0))) :pattern (
  (state_b state_machine__flag state_machine__num)) ))))

(declare-fun state_c (Bool Int) Bool)

(declare-fun state_c__function_guard (Bool Bool Int) Bool)

;; state_c__post_axiom
  (assert true)

;; state_c__def_axiom
  (assert
  (forall ((state_machine__flag Bool))
  (forall ((state_machine__num Int))
  (! (= (= (state_c state_machine__flag state_machine__num) true)
     (and (not (= state_machine__flag true)) (< 0 state_machine__num))) :pattern (
  (state_c state_machine__flag state_machine__num)) ))))

(declare-fun state_d (Bool Int) Bool)

(declare-fun state_d__function_guard (Bool Bool Int) Bool)

;; state_d__post_axiom
  (assert true)

;; state_d__def_axiom
  (assert
  (forall ((state_machine__flag Bool))
  (forall ((state_machine__num Int))
  (! (= (= (state_d state_machine__flag state_machine__num) true)
     (and (not (= state_machine__flag true)) (< state_machine__num 0))) :pattern (
  (state_d state_machine__flag state_machine__num)) ))))

(declare-const flag Bool)

(declare-const num Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const flag1 Bool)

(declare-const num1 Int)

(declare-const result Bool)

(declare-const result1 Bool)

(declare-const result2 Int)

(declare-const num2 Int)

(declare-const result3 Bool)

(declare-const result4 Bool)

(declare-const flag2 Bool)

(declare-const result5 Int)

(declare-const num3 Int)

(declare-const result6 Bool)

(declare-const result7 Int)

(declare-const num4 Int)

(declare-const flag3 Bool)

(declare-const num5 Int)

(declare-const flag4 Bool)

(declare-const num6 Int)

;; H
  (assert (in_range1 num))

;; H
  (assert
  (and (= result (state_a flag num))
  (= (= result true) (and (= flag true) (< 0 num)))))

;; H
  (assert (=> (= result true) (= num2 num)))

;; H
  (assert (=> (= result true) (= flag2 flag)))

;; H
  (assert (=> (= result true) (= num2 num1)))

;; H
  (assert (=> (= result true) (= flag2 flag1)))

;; H
  (assert
  (=> (not (= result true))
  (and (= result1 (state_b flag num))
  (= (= result1 true) (and (= flag true) (<= num 0))))))

;; H
  (assert
  (=> (not (= result true))
  (=> (= result1 true) (and (= o (+ num 1)) (in_range1 (+ num 1))))))

;; H
  (assert (=> (not (= result true)) (=> (= result1 true) (= result2 num))))

;; H
  (assert (=> (not (= result true)) (=> (= result1 true) (= num2 o))))

;; H
  (assert (=> (not (= result true)) (=> (= result1 true) (= flag2 flag))))

;; H
  (assert (=> (not (= result true)) (=> (= result1 true) (= flag2 flag1))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true))
  (and (= result3 (state_c flag num))
  (= (= result3 true) (and (not (= flag true)) (< 0 num)))))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true))
  (=> (= result3 true) (= (mk_bool__ref result4) (mk_bool__ref flag))))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true)) (=> (= result3 true) (= flag2 (of_int 1))))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true))
  (=> (= result3 true) (and (= o1 (- num)) (in_range1 (- num)))))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true)) (=> (= result3 true) (= result5 num)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true)) (=> (= result3 true) (= num3 o1)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true))
  (=> (not (= result3 true))
  (and (= result6 (state_d flag num))
  (= (= result6 true) (and (not (= flag true)) (< num 0))))))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true)) (=> (not (= result3 true)) (= result6 true)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true))
  (=> (not (= result3 true)) (and (= o2 (+ num 1)) (in_range1 (+ num 1)))))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true)) (=> (not (= result3 true)) (= result7 num)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true)) (=> (not (= result3 true)) (= num4 o2)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true)) (=> (not (= result3 true)) (= num3 num4)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true)) (=> (not (= result3 true)) (= flag2 flag)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true)) (=> (not (= result3 true)) (= num3 num4)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result1 true)) (=> (not (= result3 true)) (= flag2 flag1)))))

;; H
  (assert
  (=> (not (= result true)) (=> (not (= result1 true)) (= num2 num3))))

;; H
  (assert (= num2 num5))

;; H
  (assert (= flag2 flag3))

;; H
  (assert (= num6 num2))

;; H
  (assert (= flag4 flag2))

;; H
  (assert (=> (= (state_a flag num) true) (= (state_a flag3 num5) true)))

;; H
  (assert
  (=> (= (state_b flag num) true)
  (or (= (state_a flag3 num5) true) (= (state_b flag3 num5) true))))

;; H
  (assert (=> (= (state_c flag num) true) (= (state_b flag3 num5) true)))

;; H
  (assert
  (=> (= (state_d flag num) true)
  (or (= (state_c flag3 num5) true) (= (state_d flag3 num5) true))))

(assert
;; WP_parameter_def
 ;; File "state_machine.adb", line 22, characters 0-0
  (not
  (= (ite (= (ite (= (ite (= (state_a flag num) false) (state_b flag num) true) false)
             (state_c flag num) true) false) (state_d flag num) true) true)))
(check-sat)
(exit)
