(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type file_type__ref = { file_type__content : us_rep
}

function file_type__ref_2__projection(a: file_type__ref) : us_rep =
  (a).file_type__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq2 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type file_status

predicate in_range2(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : file_status, file_status -> bool

logic dummy2 : file_status

type file_status__ref = { file_status__content : file_status
}

function file_status__ref_2__projection(a: file_status__ref) : file_status =
  (a).file_status__content

logic to_rep1 : file_status -> int

logic of_rep1 : int -> file_status

axiom inversion_axiom1 :
  (forall x:file_status [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:file_status [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__spark__text_io__immediate_result__status :
file_status; rec__spark__text_io__immediate_result__available : bool
}

function us_split_discrs_3__projection(a: us_split_discrs) : file_status =
  (a).rec__spark__text_io__immediate_result__status

function us_split_discrs_4__projection(a: us_split_discrs) : bool =
  (a).rec__spark__text_io__immediate_result__available

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref_3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__spark__text_io__immediate_result__item :
character
}

function us_split_fields_Item2__projection(a: us_split_fields) : character =
  (a).rec__spark__text_io__immediate_result__item

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep_10__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_11__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function us_rep_12__projection(a: us_rep1) : bool = (a).attr__constrained

predicate spark__text_io__immediate_result__item__pred(a: us_rep1) =
  ((to_int(((a).us_split_discrs1).rec__spark__text_io__immediate_result__available) = 1) and
  (to_rep1(((a).us_split_discrs1).rec__spark__text_io__immediate_result__status) = 1))

logic bool_eq5 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq5(a, b)].
  (((((to_rep1(((a).us_split_discrs1).rec__spark__text_io__immediate_result__status) = to_rep1(((b).us_split_discrs1).rec__spark__text_io__immediate_result__status)) and
  (((a).us_split_discrs1).rec__spark__text_io__immediate_result__available = ((b).us_split_discrs1).rec__spark__text_io__immediate_result__available)) and
  (spark__text_io__immediate_result__item__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__spark__text_io__immediate_result__item) = to_rep(((b).us_split_fields1).rec__spark__text_io__immediate_result__item)))) ->
  (bool_eq5(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_discrs1).rec__spark__text_io__immediate_result__status) = to_rep1(((b).us_split_discrs1).rec__spark__text_io__immediate_result__status)) and
  (((a).us_split_discrs1).rec__spark__text_io__immediate_result__available = ((b).us_split_discrs1).rec__spark__text_io__immediate_result__available)) and
  (spark__text_io__immediate_result__item__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__spark__text_io__immediate_result__item) = to_rep(((b).us_split_fields1).rec__spark__text_io__immediate_result__item))))) ->
  (bool_eq5(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:file_status. forall a1:bool. forall a2:character. forall a3:bool.
  (0 <= object__size1({ us_split_discrs1 = {
  rec__spark__text_io__immediate_result__status = a;
  rec__spark__text_io__immediate_result__available = a1 }; us_split_fields1 =
  { rec__spark__text_io__immediate_result__item = a2 }; attr__constrained =
  a3 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:file_status. forall a1:bool. forall a2:character. forall a3:bool.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__spark__text_io__immediate_result__status = a;
  rec__spark__text_io__immediate_result__available = a1 }; us_split_fields1 =
  { rec__spark__text_io__immediate_result__item = a2 }; attr__constrained =
  a3 })))

logic spark__text_io__immediate_result__status__first__bit : int

logic spark__text_io__immediate_result__status__last__bit : int

logic spark__text_io__immediate_result__status__position : int

axiom spark__text_io__immediate_result__status__first__bit_axiom :
  (0 <= spark__text_io__immediate_result__status__first__bit)

axiom spark__text_io__immediate_result__status__last__bit_axiom :
  (spark__text_io__immediate_result__status__first__bit <  spark__text_io__immediate_result__status__last__bit)

axiom spark__text_io__immediate_result__status__position_axiom :
  (0 <= spark__text_io__immediate_result__status__position)

logic spark__text_io__immediate_result__available__first__bit : int

logic spark__text_io__immediate_result__available__last__bit : int

logic spark__text_io__immediate_result__available__position : int

axiom spark__text_io__immediate_result__available__first__bit_axiom :
  (0 <= spark__text_io__immediate_result__available__first__bit)

axiom spark__text_io__immediate_result__available__last__bit_axiom :
  (spark__text_io__immediate_result__available__first__bit <  spark__text_io__immediate_result__available__last__bit)

axiom spark__text_io__immediate_result__available__position_axiom :
  (0 <= spark__text_io__immediate_result__available__position)

logic spark__text_io__immediate_result__item__first__bit : int

logic spark__text_io__immediate_result__item__last__bit : int

logic spark__text_io__immediate_result__item__position : int

axiom spark__text_io__immediate_result__item__first__bit_axiom :
  (0 <= spark__text_io__immediate_result__item__first__bit)

axiom spark__text_io__immediate_result__item__last__bit_axiom :
  (spark__text_io__immediate_result__item__first__bit <  spark__text_io__immediate_result__item__last__bit)

axiom spark__text_io__immediate_result__item__position_axiom :
  (0 <= spark__text_io__immediate_result__item__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : file_status

logic dummy4 : bool

logic dummy5 : character

logic dummy6 : bool

type immediate_result__ref = { immediate_result__content : us_rep1
}

function immediate_result__ref___projection(a: immediate_result__ref) : us_rep1 =
  (a).immediate_result__content

logic is_readable : us_rep -> bool

logic is_readable__function_guard : bool, us_rep -> prop

logic is_open : us_rep -> bool

logic is_open__function_guard : bool, us_rep -> prop

logic mode__2 : us_rep -> int

logic mode__2__function_guard : int, us_rep -> prop

axiom is_readable__def_axiom :
  (forall file:us_rep [is_readable(file)]. ((is_readable(file) = true) <->
  ((is_open(file) = true) and (mode__2(file) = 0))))

logic end_of_file : us_rep -> bool

logic end_of_file__function_guard : bool, us_rep -> prop

logic attr__ATTRIBUTE_ADDRESS : int

logic item__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

type file_mode

predicate in_range3(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : file_mode, file_mode -> bool

logic dummy7 : file_mode

type file_mode__ref = { file_mode__content : file_mode
}

function file_mode__ref_3__projection(a: file_mode__ref) : file_mode =
  (a).file_mode__content

 (* File "spark-text_io.ads", line 36, characters 0-0 *)
goal WP_parameter_def :
  (forall file:us_rep. forall result:bool. (((result = is_readable(file)) and
  ((result = true) <-> ((is_open(file) = true) and (mode__2(file) = 0)))) ->
  ((result = true) -> (is_readable(file) = true))))
