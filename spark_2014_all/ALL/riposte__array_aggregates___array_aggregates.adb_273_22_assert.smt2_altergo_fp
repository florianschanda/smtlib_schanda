(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type length_t

predicate in_range(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : length_t, length_t -> bool

logic dummy : length_t

type length_t__ref = { length_t__content : length_t
}

function length_t__ref___2__projection(a: length_t__ref) : length_t =
  (a).length_t__content

logic to_rep : length_t -> int

logic of_rep : int -> length_t

axiom inversion_axiom :
  (forall x:length_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:length_t [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep1((a[temp___idx_78])) = to_rep1((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

logic dummy2 : (int,character) farray

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__array_aggregates__string_t__len : length_t;
rec__array_aggregates__string_t__elem : (int,character) farray
}

function us_split_fields_Len__2__projection(a: us_split_fields) : length_t =
  (a).rec__array_aggregates__string_t__len

function us_split_fields_Elem__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__array_aggregates__string_t__elem

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__array_aggregates__string_t__len) = to_rep(((b).us_split_fields1).rec__array_aggregates__string_t__len)) and
  (bool_eq3(((a).us_split_fields1).rec__array_aggregates__string_t__elem, 1,
  5, ((b).us_split_fields1).rec__array_aggregates__string_t__elem, 1,
  5) = true)) -> (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__array_aggregates__string_t__len) = to_rep(((b).us_split_fields1).rec__array_aggregates__string_t__len)) and
  (bool_eq3(((a).us_split_fields1).rec__array_aggregates__string_t__elem, 1,
  5, ((b).us_split_fields1).rec__array_aggregates__string_t__elem, 1,
  5) = true))) -> (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:length_t. forall a1:(int,character) farray. (0 <= object__size1({
  us_split_fields1 = { rec__array_aggregates__string_t__len = a;
  rec__array_aggregates__string_t__elem = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:length_t. forall a1:(int,character) farray.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__array_aggregates__string_t__len = a;
  rec__array_aggregates__string_t__elem = a1 } })))

logic array_aggregates__string_t__len__first__bit : int

logic array_aggregates__string_t__len__last__bit : int

logic array_aggregates__string_t__len__position : int

axiom array_aggregates__string_t__len__first__bit_axiom :
  (0 <= array_aggregates__string_t__len__first__bit)

axiom array_aggregates__string_t__len__last__bit_axiom :
  (array_aggregates__string_t__len__first__bit <  array_aggregates__string_t__len__last__bit)

axiom array_aggregates__string_t__len__position_axiom :
  (0 <= array_aggregates__string_t__len__position)

logic array_aggregates__string_t__elem__first__bit : int

logic array_aggregates__string_t__elem__last__bit : int

logic array_aggregates__string_t__elem__position : int

axiom array_aggregates__string_t__elem__first__bit_axiom :
  (0 <= array_aggregates__string_t__elem__first__bit)

axiom array_aggregates__string_t__elem__last__bit_axiom :
  (array_aggregates__string_t__elem__first__bit <  array_aggregates__string_t__elem__last__bit)

axiom array_aggregates__string_t__elem__position_axiom :
  (0 <= array_aggregates__string_t__elem__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : length_t

logic dummy4 : (int,character) farray

type string_t__ref = { string_t__content : us_rep
}

function string_t__ref___projection(a: string_t__ref) : us_rep =
  (a).string_t__content

type map__ref1 = { map__content1 : (int,us_rep) farray
}

logic slide1 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq1 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep, int -> (int,us_rep) farray

axiom singleton_def1 :
  (forall v:length_t. forall v1:(int,character) farray.
  (forall i:int [(singleton1({ us_split_fields1 = {
  rec__array_aggregates__string_t__len = v;
  rec__array_aggregates__string_t__elem = v1 } }, i)[i])]. ((singleton1({
  us_split_fields1 = { rec__array_aggregates__string_t__len = v;
  rec__array_aggregates__string_t__elem = v1 } }, i)[i]) = {
  us_split_fields1 = { rec__array_aggregates__string_t__len = v;
  rec__array_aggregates__string_t__elem = v1 } })))

logic bool_eq5 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_147:int. ((((a__first <= temp___idx_147) and
  (temp___idx_147 <= a__last)) and (bool_eq4((a[temp___idx_147]),
  (b[((b__first - a__first) + temp___idx_147)])) = true)) or
  (not ((a__first <= temp___idx_147) and (temp___idx_147 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_147:int. (((a__first <= temp___idx_147) and
  (temp___idx_147 <= a__last)) -> (bool_eq4((a[temp___idx_147]),
  (b[((b__first - a__first) + temp___idx_147)])) = true))))) -> (bool_eq5(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_147:int. (((a__first <= temp___idx_147) and
  (temp___idx_147 <= a__last)) -> (bool_eq4((a[temp___idx_147]),
  (b[((b__first - a__first) + temp___idx_147)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___551 : us_rep -> (int,us_rep) farray

axiom def_axiom :
  (forall temp___553:length_t. forall temp___5531:(int,character) farray.
  (forall temp___554:int. ((temp___551({ us_split_fields1 = {
  rec__array_aggregates__string_t__len = temp___553;
  rec__array_aggregates__string_t__elem = temp___5531 } })[temp___554]) = {
  us_split_fields1 = { rec__array_aggregates__string_t__len = temp___553;
  rec__array_aggregates__string_t__elem = temp___5531 } })))

logic temp___555 : int, int, int, int, int -> (int,character) farray

axiom def_axiom1 :
  (forall temp___557:int. forall temp___558:int. forall temp___559:int.
  forall temp___560:int. forall temp___561:int. ((((((temp___555(temp___557,
  temp___558, temp___559, temp___560,
  temp___561)[1]) = of_rep1(temp___557)) and ((temp___555(temp___557,
  temp___558, temp___559, temp___560,
  temp___561)[2]) = of_rep1(temp___558))) and ((temp___555(temp___557,
  temp___558, temp___559, temp___560,
  temp___561)[3]) = of_rep1(temp___559))) and ((temp___555(temp___557,
  temp___558, temp___559, temp___560,
  temp___561)[4]) = of_rep1(temp___560))) and ((temp___555(temp___557,
  temp___558, temp___559, temp___560,
  temp___561)[5]) = of_rep1(temp___561))))

 (* File "array_aggregates.adb", line 254, characters 0-0 *)
goal WP_parameter_def :
  (forall x:(int,us_rep) farray. forall o:length_t. forall o1:length_t.
  forall o2:(int,character) farray. forall o3:length_t.
  forall o4:(int,character) farray. forall o5:(int,us_rep) farray.
  forall result:(int,us_rep) farray. forall x1:(int,us_rep) farray.
  ((((((to_rep(o) = 5) and ((o = o1) and (temp___555(72, 101, 108, 108,
  111) = o2))) and ((o3 = o1) and (o4 = o2))) and (o5 = temp___551({
  us_split_fields1 = { rec__array_aggregates__string_t__len = o3;
  rec__array_aggregates__string_t__elem = o4 } }))) and ((result = x) and
  (x1 = o5))) ->
  (to_rep((((x1[3])).us_split_fields1).rec__array_aggregates__string_t__len) = 3)))
