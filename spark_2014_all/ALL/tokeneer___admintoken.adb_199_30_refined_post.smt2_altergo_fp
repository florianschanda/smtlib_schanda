(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type tokenidt

predicate in_range4(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tokenidt, tokenidt -> bool

logic dummy5 : tokenidt

type tokenidt__ref = { tokenidt__content : tokenidt
}

function tokenidt__ref___projection(a: tokenidt__ref) : tokenidt =
  (a).tokenidt__content

type tryt

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tryt, tryt -> bool

logic dummy6 : tryt

type tryt__ref = { tryt__content : tryt
}

function tryt__ref___projection(a: tryt__ref) : tryt = (a).tryt__content

type adminprivileget

predicate in_range6(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : adminprivileget, adminprivileget -> bool

logic dummy7 : adminprivileget

type adminprivileget__ref = { adminprivileget__content : adminprivileget
}

function adminprivileget__ref___projection(a: adminprivileget__ref) : adminprivileget =
  (a).adminprivileget__content

type algorithmt

predicate in_range7(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : algorithmt, algorithmt -> bool

logic dummy8 : algorithmt

type algorithmt__ref = { algorithmt__content : algorithmt
}

function algorithmt__ref___projection(a: algorithmt__ref) : algorithmt =
  (a).algorithmt__content

logic to_rep2 : algorithmt -> int

logic of_rep2 : int -> algorithmt

axiom inversion_axiom2 :
  (forall x:algorithmt [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:algorithmt [to_rep2(x)]. in_range7(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range7(x) ->
  (to_rep2(of_rep2(x)) = x)))

type namecountt

predicate in_range8(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : namecountt, namecountt -> bool

logic dummy9 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep3 : namecountt -> int

logic of_rep3 : int -> namecountt

axiom inversion_axiom3 :
  (forall x:namecountt [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:namecountt [to_rep3(x)]. in_range8(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range8(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic dummy10 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq9 : (int,character) farray, (int,character) farray -> bool

type issueridt

predicate in_range9(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : issueridt, issueridt -> bool

logic dummy11 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep4 : issueridt -> int

logic of_rep4 : int -> issueridt

axiom inversion_axiom4 :
  (forall x:issueridt [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:issueridt [to_rep4(x)]. in_range9(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range9(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq13 : us_rep, us_rep -> bool

axiom bool_eq_def11 :
  (forall a:us_rep. forall b:us_rep [bool_eq13(a, b)].
  (((((to_rep4(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep4(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep3(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep3(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq5(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq13(a, b) = true)) and
  ((not (((to_rep4(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep4(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep3(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep3(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq5(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq13(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size2({ us_split_fields1 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment2({
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq11 : us_rep, us_rep -> bool

logic dummy12 : issueridt

logic dummy13 : namecountt

logic dummy14 : (int,character) farray

type issuert__ref = { issuert__content : us_rep
}

function issuert__ref___projection(a: issuert__ref) : us_rep =
  (a).issuert__content

type serialnumbert

predicate in_range10(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq12 : serialnumbert, serialnumbert -> bool

logic dummy15 : serialnumbert

type serialnumbert__ref = { serialnumbert__content : serialnumbert
}

function serialnumbert__ref___projection(a: serialnumbert__ref) : serialnumbert =
  (a).serialnumbert__content

logic to_rep5 : serialnumbert -> int

logic of_rep5 : int -> serialnumbert

axiom inversion_axiom5 :
  (forall x:serialnumbert [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:serialnumbert [to_rep5(x)]. in_range10(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range10(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields2 = { rec__certtypes__idt__issuer : us_rep;
rec__certtypes__idt__serialnumber : serialnumbert
}

function us_split_fields_Issuer__projection(a: us_split_fields2) : us_rep =
  (a).rec__certtypes__idt__issuer

function us_split_fields_SerialNumber__projection(a: us_split_fields2) : serialnumbert =
  (a).rec__certtypes__idt__serialnumber

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq15 : us_rep1, us_rep1 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq15(a, b)].
  ((((bool_eq13(((a).us_split_fields3).rec__certtypes__idt__issuer,
  ((b).us_split_fields3).rec__certtypes__idt__issuer) = true) and
  (to_rep5(((a).us_split_fields3).rec__certtypes__idt__serialnumber) = to_rep5(((b).us_split_fields3).rec__certtypes__idt__serialnumber))) ->
  (bool_eq15(a, b) = true)) and
  ((not ((bool_eq13(((a).us_split_fields3).rec__certtypes__idt__issuer,
  ((b).us_split_fields3).rec__certtypes__idt__issuer) = true) and
  (to_rep5(((a).us_split_fields3).rec__certtypes__idt__serialnumber) = to_rep5(((b).us_split_fields3).rec__certtypes__idt__serialnumber)))) ->
  (bool_eq15(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__size3({ us_split_fields3 = { rec__certtypes__idt__issuer = {
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__alignment3({ us_split_fields3 = {
  rec__certtypes__idt__issuer = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a; rec__cryptotypes__issuert__namelength =
  a1; rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

logic certtypes__idt__issuer__first__bit : int

logic certtypes__idt__issuer__last__bit : int

logic certtypes__idt__issuer__position : int

axiom certtypes__idt__issuer__first__bit_axiom :
  (0 <= certtypes__idt__issuer__first__bit)

axiom certtypes__idt__issuer__last__bit_axiom :
  (certtypes__idt__issuer__first__bit <  certtypes__idt__issuer__last__bit)

axiom certtypes__idt__issuer__position_axiom :
  (0 <= certtypes__idt__issuer__position)

logic certtypes__idt__serialnumber__first__bit : int

logic certtypes__idt__serialnumber__last__bit : int

logic certtypes__idt__serialnumber__position : int

axiom certtypes__idt__serialnumber__first__bit_axiom :
  (0 <= certtypes__idt__serialnumber__first__bit)

axiom certtypes__idt__serialnumber__last__bit_axiom :
  (certtypes__idt__serialnumber__first__bit <  certtypes__idt__serialnumber__last__bit)

axiom certtypes__idt__serialnumber__position_axiom :
  (0 <= certtypes__idt__serialnumber__position)

logic user_eq13 : us_rep1, us_rep1 -> bool

logic dummy16 : issueridt

logic dummy17 : namecountt

logic dummy18 : (int,character) farray

logic dummy19 : serialnumbert

type idt__ref = { idt__content : us_rep1
}

function idt__ref___projection(a: idt__ref) : us_rep1 = (a).idt__content

type yearst

predicate in_range11(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq14 : yearst, yearst -> bool

logic dummy20 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep6 : yearst -> int

logic of_rep6 : int -> yearst

axiom inversion_axiom6 :
  (forall x:yearst [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 : (forall x:yearst [to_rep6(x)]. in_range11(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range11(x) ->
  (to_rep6(of_rep6(x)) = x)))

type monthst

predicate in_range12(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq15 : monthst, monthst -> bool

logic dummy21 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep7 : monthst -> int

logic of_rep7 : int -> monthst

axiom inversion_axiom7 :
  (forall x:monthst [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 : (forall x:monthst [to_rep7(x)]. in_range12(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range12(x) ->
  (to_rep7(of_rep7(x)) = x)))

type dayst

predicate in_range13(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq16 : dayst, dayst -> bool

logic dummy22 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep8 : dayst -> int

logic of_rep8 : int -> dayst

axiom inversion_axiom8 :
  (forall x:dayst [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 : (forall x:dayst [to_rep8(x)]. in_range13(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range13(x) ->
  (to_rep8(of_rep8(x)) = x)))

type millisecst

predicate in_range14(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq17 : millisecst, millisecst -> bool

logic dummy23 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep9 : millisecst -> int

logic of_rep9 : int -> millisecst

axiom inversion_axiom9 :
  (forall x:millisecst [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 :
  (forall x:millisecst [to_rep9(x)]. in_range14(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range14(x) ->
  (to_rep9(of_rep9(x)) = x)))

type us_split_fields4 = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__projection(a: us_split_fields4) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__projection(a: us_split_fields4) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__projection(a: us_split_fields4) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields4) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___6__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq20 : us_rep2, us_rep2 -> bool

axiom bool_eq_def18 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq20(a, b)].
  ((((((to_rep6(((a).us_split_fields5).rec__clock__timet__year) = to_rep6(((b).us_split_fields5).rec__clock__timet__year)) and
  (to_rep7(((a).us_split_fields5).rec__clock__timet__month) = to_rep7(((b).us_split_fields5).rec__clock__timet__month))) and
  (to_rep8(((a).us_split_fields5).rec__clock__timet__day) = to_rep8(((b).us_split_fields5).rec__clock__timet__day))) and
  (to_rep9(((a).us_split_fields5).rec__clock__timet__millisec) = to_rep9(((b).us_split_fields5).rec__clock__timet__millisec))) ->
  (bool_eq20(a, b) = true)) and
  ((not ((((to_rep6(((a).us_split_fields5).rec__clock__timet__year) = to_rep6(((b).us_split_fields5).rec__clock__timet__year)) and
  (to_rep7(((a).us_split_fields5).rec__clock__timet__month) = to_rep7(((b).us_split_fields5).rec__clock__timet__month))) and
  (to_rep8(((a).us_split_fields5).rec__clock__timet__day) = to_rep8(((b).us_split_fields5).rec__clock__timet__day))) and
  (to_rep9(((a).us_split_fields5).rec__clock__timet__millisec) = to_rep9(((b).us_split_fields5).rec__clock__timet__millisec)))) ->
  (bool_eq20(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep2 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep2 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size4({ us_split_fields5 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment4({ us_split_fields5 = { rec__clock__timet__year =
  a; rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq18 : us_rep2, us_rep2 -> bool

logic dummy24 : yearst

logic dummy25 : monthst

logic dummy26 : dayst

logic dummy27 : millisecst

type timet__ref = { timet__content : us_rep2
}

function timet__ref___projection(a: timet__ref) : us_rep2 =
  (a).timet__content

type privileget

predicate in_range15(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq19 : privileget, privileget -> bool

logic dummy28 : privileget

type privileget__ref = { privileget__content : privileget
}

function privileget__ref___projection(a: privileget__ref) : privileget =
  (a).privileget__content

logic to_rep10 : privileget -> int

logic of_rep10 : int -> privileget

axiom inversion_axiom10 :
  (forall x:privileget [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 :
  (forall x:privileget [to_rep10(x)]. in_range15(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range15(x) ->
  (to_rep10(of_rep10(x)) = x)))

type classt

predicate in_range16(x: int) = ((0 <= x) and (x <= 5))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq20 : classt, classt -> bool

logic dummy29 : classt

type classt__ref = { classt__content : classt
}

function classt__ref___projection(a: classt__ref) : classt =
  (a).classt__content

logic to_rep11 : classt -> int

logic of_rep11 : int -> classt

axiom inversion_axiom11 :
  (forall x:classt [to_rep11(x)]. (of_rep11(to_rep11(x)) = x))

axiom range_axiom11 :
  (forall x:classt [to_rep11(x)]. in_range16(to_rep11(x)))

axiom coerce_axiom11 :
  (forall x:int [to_rep11(of_rep11(x))]. (in_range16(x) ->
  (to_rep11(of_rep11(x)) = x)))

type us_split_fields6 = { rec__privtypes__clearancet__class : classt
}

function us_split_fields_Class__projection(a: us_split_fields6) : classt =
  (a).rec__privtypes__clearancet__class

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___10__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq23 : us_rep3, us_rep3 -> bool

axiom bool_eq_def21 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq23(a, b)].
  (((to_rep11(((a).us_split_fields7).rec__privtypes__clearancet__class) = to_rep11(((b).us_split_fields7).rec__privtypes__clearancet__class)) ->
  (bool_eq23(a, b) = true)) and
  ((not (to_rep11(((a).us_split_fields7).rec__privtypes__clearancet__class) = to_rep11(((b).us_split_fields7).rec__privtypes__clearancet__class))) ->
  (bool_eq23(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep3 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep3 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:classt. (0 <= object__size5({ us_split_fields7 = {
  rec__privtypes__clearancet__class = a } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:classt. (0 <= object__alignment5({ us_split_fields7 = {
  rec__privtypes__clearancet__class = a } })))

logic privtypes__clearancet__class__first__bit : int

logic privtypes__clearancet__class__last__bit : int

logic privtypes__clearancet__class__position : int

axiom privtypes__clearancet__class__first__bit_axiom :
  (0 <= privtypes__clearancet__class__first__bit)

axiom privtypes__clearancet__class__last__bit_axiom :
  (privtypes__clearancet__class__first__bit <  privtypes__clearancet__class__last__bit)

axiom privtypes__clearancet__class__position_axiom :
  (0 <= privtypes__clearancet__class__position)

logic user_eq21 : us_rep3, us_rep3 -> bool

logic dummy30 : classt

type clearancet__ref = { clearancet__content : us_rep3
}

function clearancet__ref___projection(a: clearancet__ref) : us_rep3 =
  (a).clearancet__content

type us_split_fields8 = { rec__cert__attr__auth__contentst__id : us_rep1;
rec__cert__attr__auth__contentst__notbefore : us_rep2;
rec__cert__attr__auth__contentst__notafter : us_rep2;
rec__cert__attr__auth__contentst__mechanism : algorithmt;
rec__cert__attr__auth__contentst__basecertid : us_rep1;
rec__cert__attr__auth__contentst__role : privileget;
rec__cert__attr__auth__contentst__clearance : us_rep3
}

function us_split_fields_ID__5__projection(a: us_split_fields8) : us_rep1 =
  (a).rec__cert__attr__auth__contentst__id

function us_split_fields_NotBefore__3__projection(a: us_split_fields8) : us_rep2 =
  (a).rec__cert__attr__auth__contentst__notbefore

function us_split_fields_NotAfter__3__projection(a: us_split_fields8) : us_rep2 =
  (a).rec__cert__attr__auth__contentst__notafter

function us_split_fields_Mechanism__3__projection(a: us_split_fields8) : algorithmt =
  (a).rec__cert__attr__auth__contentst__mechanism

function us_split_fields_BaseCertID__2__projection(a: us_split_fields8) : us_rep1 =
  (a).rec__cert__attr__auth__contentst__basecertid

function us_split_fields_Role__projection(a: us_split_fields8) : privileget =
  (a).rec__cert__attr__auth__contentst__role

function us_split_fields_Clearance__projection(a: us_split_fields8) : us_rep3 =
  (a).rec__cert__attr__auth__contentst__clearance

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___12__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8
}

function us_rep___13__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq24 : us_rep4, us_rep4 -> bool

axiom bool_eq_def22 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq24(a, b)].
  (((((((((bool_eq15(((a).us_split_fields9).rec__cert__attr__auth__contentst__id,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__id) = true) and
  (bool_eq20(((a).us_split_fields9).rec__cert__attr__auth__contentst__notbefore,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__notbefore) = true)) and
  (bool_eq20(((a).us_split_fields9).rec__cert__attr__auth__contentst__notafter,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__notafter) = true)) and
  (to_rep2(((a).us_split_fields9).rec__cert__attr__auth__contentst__mechanism) = to_rep2(((b).us_split_fields9).rec__cert__attr__auth__contentst__mechanism))) and
  (bool_eq15(((a).us_split_fields9).rec__cert__attr__auth__contentst__basecertid,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__basecertid) = true)) and
  (to_rep10(((a).us_split_fields9).rec__cert__attr__auth__contentst__role) = to_rep10(((b).us_split_fields9).rec__cert__attr__auth__contentst__role))) and
  (bool_eq23(((a).us_split_fields9).rec__cert__attr__auth__contentst__clearance,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__clearance) = true)) ->
  (bool_eq24(a, b) = true)) and
  ((not (((((((bool_eq15(((a).us_split_fields9).rec__cert__attr__auth__contentst__id,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__id) = true) and
  (bool_eq20(((a).us_split_fields9).rec__cert__attr__auth__contentst__notbefore,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__notbefore) = true)) and
  (bool_eq20(((a).us_split_fields9).rec__cert__attr__auth__contentst__notafter,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__notafter) = true)) and
  (to_rep2(((a).us_split_fields9).rec__cert__attr__auth__contentst__mechanism) = to_rep2(((b).us_split_fields9).rec__cert__attr__auth__contentst__mechanism))) and
  (bool_eq15(((a).us_split_fields9).rec__cert__attr__auth__contentst__basecertid,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__basecertid) = true)) and
  (to_rep10(((a).us_split_fields9).rec__cert__attr__auth__contentst__role) = to_rep10(((b).us_split_fields9).rec__cert__attr__auth__contentst__role))) and
  (bool_eq23(((a).us_split_fields9).rec__cert__attr__auth__contentst__clearance,
  ((b).us_split_fields9).rec__cert__attr__auth__contentst__clearance) = true))) ->
  (bool_eq24(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep4 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep4 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (forall a:us_rep4. (0 <= object__size6(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:us_rep4. (0 <= object__alignment6(a)))

logic cert__attr__auth__contentst__id__first__bit : int

logic cert__attr__auth__contentst__id__last__bit : int

logic cert__attr__auth__contentst__id__position : int

axiom cert__attr__auth__contentst__id__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__id__first__bit)

axiom cert__attr__auth__contentst__id__last__bit_axiom :
  (cert__attr__auth__contentst__id__first__bit <  cert__attr__auth__contentst__id__last__bit)

axiom cert__attr__auth__contentst__id__position_axiom :
  (0 <= cert__attr__auth__contentst__id__position)

logic cert__attr__auth__contentst__notbefore__first__bit : int

logic cert__attr__auth__contentst__notbefore__last__bit : int

logic cert__attr__auth__contentst__notbefore__position : int

axiom cert__attr__auth__contentst__notbefore__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__notbefore__first__bit)

axiom cert__attr__auth__contentst__notbefore__last__bit_axiom :
  (cert__attr__auth__contentst__notbefore__first__bit <  cert__attr__auth__contentst__notbefore__last__bit)

axiom cert__attr__auth__contentst__notbefore__position_axiom :
  (0 <= cert__attr__auth__contentst__notbefore__position)

logic cert__attr__auth__contentst__notafter__first__bit : int

logic cert__attr__auth__contentst__notafter__last__bit : int

logic cert__attr__auth__contentst__notafter__position : int

axiom cert__attr__auth__contentst__notafter__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__notafter__first__bit)

axiom cert__attr__auth__contentst__notafter__last__bit_axiom :
  (cert__attr__auth__contentst__notafter__first__bit <  cert__attr__auth__contentst__notafter__last__bit)

axiom cert__attr__auth__contentst__notafter__position_axiom :
  (0 <= cert__attr__auth__contentst__notafter__position)

logic cert__attr__auth__contentst__mechanism__first__bit : int

logic cert__attr__auth__contentst__mechanism__last__bit : int

logic cert__attr__auth__contentst__mechanism__position : int

axiom cert__attr__auth__contentst__mechanism__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__mechanism__first__bit)

axiom cert__attr__auth__contentst__mechanism__last__bit_axiom :
  (cert__attr__auth__contentst__mechanism__first__bit <  cert__attr__auth__contentst__mechanism__last__bit)

axiom cert__attr__auth__contentst__mechanism__position_axiom :
  (0 <= cert__attr__auth__contentst__mechanism__position)

logic cert__attr__auth__contentst__basecertid__first__bit : int

logic cert__attr__auth__contentst__basecertid__last__bit : int

logic cert__attr__auth__contentst__basecertid__position : int

axiom cert__attr__auth__contentst__basecertid__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__basecertid__first__bit)

axiom cert__attr__auth__contentst__basecertid__last__bit_axiom :
  (cert__attr__auth__contentst__basecertid__first__bit <  cert__attr__auth__contentst__basecertid__last__bit)

axiom cert__attr__auth__contentst__basecertid__position_axiom :
  (0 <= cert__attr__auth__contentst__basecertid__position)

logic cert__attr__auth__contentst__role__first__bit : int

logic cert__attr__auth__contentst__role__last__bit : int

logic cert__attr__auth__contentst__role__position : int

axiom cert__attr__auth__contentst__role__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__role__first__bit)

axiom cert__attr__auth__contentst__role__last__bit_axiom :
  (cert__attr__auth__contentst__role__first__bit <  cert__attr__auth__contentst__role__last__bit)

axiom cert__attr__auth__contentst__role__position_axiom :
  (0 <= cert__attr__auth__contentst__role__position)

logic cert__attr__auth__contentst__clearance__first__bit : int

logic cert__attr__auth__contentst__clearance__last__bit : int

logic cert__attr__auth__contentst__clearance__position : int

axiom cert__attr__auth__contentst__clearance__first__bit_axiom :
  (0 <= cert__attr__auth__contentst__clearance__first__bit)

axiom cert__attr__auth__contentst__clearance__last__bit_axiom :
  (cert__attr__auth__contentst__clearance__first__bit <  cert__attr__auth__contentst__clearance__last__bit)

axiom cert__attr__auth__contentst__clearance__position_axiom :
  (0 <= cert__attr__auth__contentst__clearance__position)

logic user_eq22 : us_rep4, us_rep4 -> bool

logic dummy31 : issueridt

logic dummy32 : namecountt

logic dummy33 : (int,character) farray

logic dummy34 : serialnumbert

logic dummy35 : yearst

logic dummy36 : monthst

logic dummy37 : dayst

logic dummy38 : millisecst

logic dummy39 : yearst

logic dummy40 : monthst

logic dummy41 : dayst

logic dummy42 : millisecst

logic dummy43 : algorithmt

logic dummy44 : issueridt

logic dummy45 : namecountt

logic dummy46 : (int,character) farray

logic dummy47 : serialnumbert

logic dummy48 : privileget

logic dummy49 : classt

type contentst__ref = { contentst__content : us_rep4
}

function contentst__ref___3__projection(a: contentst__ref) : us_rep4 =
  (a).contentst__content

logic therole : us_rep4 -> int

logic therole__function_guard : int, us_rep4 -> prop

axiom therole__post_axiom :
  (forall contents:us_rep4 [therole(contents)].
  in_range15(therole(contents)))

type keyidt

predicate in_range17(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq25 : int, int -> bool

axiom bool_eq_def23 :
  (forall x:int. forall y:int [bool_eq25(x, y)]. (((x = y) -> (bool_eq25(x,
  y) = true)) and ((not (x = y)) -> (bool_eq25(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq23 : keyidt, keyidt -> bool

logic dummy50 : keyidt

type keyidt__ref = { keyidt__content : keyidt
}

function keyidt__ref___projection(a: keyidt__ref) : keyidt =
  (a).keyidt__content

logic to_rep12 : keyidt -> int

logic of_rep12 : int -> keyidt

axiom inversion_axiom12 :
  (forall x:keyidt [to_rep12(x)]. (of_rep12(to_rep12(x)) = x))

axiom range_axiom12 :
  (forall x:keyidt [to_rep12(x)]. in_range17(to_rep12(x)))

axiom coerce_axiom12 :
  (forall x:int [to_rep12(of_rep12(x))]. (in_range17(x) ->
  (to_rep12(of_rep12(x)) = x)))

type keylengtht

predicate in_range18(x: int) = ((0 <= x) and (x <= 128))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def24 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE18 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check18 : us_image -> prop

logic attr__ATTRIBUTE_VALUE18 : us_image -> int

logic user_eq24 : keylengtht, keylengtht -> bool

logic dummy51 : keylengtht

type keylengtht__ref = { keylengtht__content : keylengtht
}

function keylengtht__ref___projection(a: keylengtht__ref) : keylengtht =
  (a).keylengtht__content

logic to_rep13 : keylengtht -> int

logic of_rep13 : int -> keylengtht

axiom inversion_axiom13 :
  (forall x:keylengtht [to_rep13(x)]. (of_rep13(to_rep13(x)) = x))

axiom range_axiom13 :
  (forall x:keylengtht [to_rep13(x)]. in_range18(to_rep13(x)))

axiom coerce_axiom13 :
  (forall x:int [to_rep13(of_rep13(x))]. (in_range18(x) ->
  (to_rep13(of_rep13(x)) = x)))

type us_split_fields10 = { rec__cryptotypes__keypartt__algorithmid :
algorithmt; rec__cryptotypes__keypartt__keyid : keyidt;
rec__cryptotypes__keypartt__keylength : keylengtht
}

function us_split_fields_AlgorithmID__projection(a: us_split_fields10) : algorithmt =
  (a).rec__cryptotypes__keypartt__algorithmid

function us_split_fields_KeyID__projection(a: us_split_fields10) : keyidt =
  (a).rec__cryptotypes__keypartt__keyid

function us_split_fields_KeyLength__projection(a: us_split_fields10) : keylengtht =
  (a).rec__cryptotypes__keypartt__keylength

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_fields11 : us_split_fields10
}

function us_rep___2__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq27 : us_rep5, us_rep5 -> bool

axiom bool_eq_def25 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq27(a, b)].
  (((((to_rep2(((a).us_split_fields11).rec__cryptotypes__keypartt__algorithmid) = to_rep2(((b).us_split_fields11).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep12(((a).us_split_fields11).rec__cryptotypes__keypartt__keyid) = to_rep12(((b).us_split_fields11).rec__cryptotypes__keypartt__keyid))) and
  (to_rep13(((a).us_split_fields11).rec__cryptotypes__keypartt__keylength) = to_rep13(((b).us_split_fields11).rec__cryptotypes__keypartt__keylength))) ->
  (bool_eq27(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields11).rec__cryptotypes__keypartt__algorithmid) = to_rep2(((b).us_split_fields11).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep12(((a).us_split_fields11).rec__cryptotypes__keypartt__keyid) = to_rep12(((b).us_split_fields11).rec__cryptotypes__keypartt__keyid))) and
  (to_rep13(((a).us_split_fields11).rec__cryptotypes__keypartt__keylength) = to_rep13(((b).us_split_fields11).rec__cryptotypes__keypartt__keylength)))) ->
  (bool_eq27(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep5 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep5 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__size7({ us_split_fields11 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__alignment7({ us_split_fields11 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

logic cryptotypes__keypartt__algorithmid__first__bit : int

logic cryptotypes__keypartt__algorithmid__last__bit : int

logic cryptotypes__keypartt__algorithmid__position : int

axiom cryptotypes__keypartt__algorithmid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__first__bit)

axiom cryptotypes__keypartt__algorithmid__last__bit_axiom :
  (cryptotypes__keypartt__algorithmid__first__bit <  cryptotypes__keypartt__algorithmid__last__bit)

axiom cryptotypes__keypartt__algorithmid__position_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__position)

logic cryptotypes__keypartt__keyid__first__bit : int

logic cryptotypes__keypartt__keyid__last__bit : int

logic cryptotypes__keypartt__keyid__position : int

axiom cryptotypes__keypartt__keyid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keyid__first__bit)

axiom cryptotypes__keypartt__keyid__last__bit_axiom :
  (cryptotypes__keypartt__keyid__first__bit <  cryptotypes__keypartt__keyid__last__bit)

axiom cryptotypes__keypartt__keyid__position_axiom :
  (0 <= cryptotypes__keypartt__keyid__position)

logic cryptotypes__keypartt__keylength__first__bit : int

logic cryptotypes__keypartt__keylength__last__bit : int

logic cryptotypes__keypartt__keylength__position : int

axiom cryptotypes__keypartt__keylength__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keylength__first__bit)

axiom cryptotypes__keypartt__keylength__last__bit_axiom :
  (cryptotypes__keypartt__keylength__first__bit <  cryptotypes__keypartt__keylength__last__bit)

axiom cryptotypes__keypartt__keylength__position_axiom :
  (0 <= cryptotypes__keypartt__keylength__position)

logic user_eq25 : us_rep5, us_rep5 -> bool

logic dummy52 : algorithmt

logic dummy53 : keyidt

logic dummy54 : keylengtht

type keypartt__ref = { keypartt__content : us_rep5
}

function keypartt__ref___projection(a: keypartt__ref) : us_rep5 =
  (a).keypartt__content

type us_split_fields12 = { rec__cert__id__contentst__id : us_rep1;
rec__cert__id__contentst__notbefore : us_rep2;
rec__cert__id__contentst__notafter : us_rep2;
rec__cert__id__contentst__mechanism : algorithmt;
rec__cert__id__contentst__subject : us_rep;
rec__cert__id__contentst__subjectpublickey : us_rep5
}

function us_split_fields_ID__6__projection(a: us_split_fields12) : us_rep1 =
  (a).rec__cert__id__contentst__id

function us_split_fields_NotBefore__4__projection(a: us_split_fields12) : us_rep2 =
  (a).rec__cert__id__contentst__notbefore

function us_split_fields_NotAfter__4__projection(a: us_split_fields12) : us_rep2 =
  (a).rec__cert__id__contentst__notafter

function us_split_fields_Mechanism__4__projection(a: us_split_fields12) : algorithmt =
  (a).rec__cert__id__contentst__mechanism

function us_split_fields_Subject__projection(a: us_split_fields12) : us_rep =
  (a).rec__cert__id__contentst__subject

function us_split_fields_SubjectPublicKey__projection(a: us_split_fields12) : us_rep5 =
  (a).rec__cert__id__contentst__subjectpublickey

type us_split_fields__ref6 = { us_split_fields__content6 : us_split_fields12
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref6) : us_split_fields12 =
  (a).us_split_fields__content6

type us_rep6 = { us_split_fields13 : us_split_fields12
}

function us_rep___14__projection(a: us_rep6) : us_split_fields12 =
  (a).us_split_fields13

logic bool_eq28 : us_rep6, us_rep6 -> bool

axiom bool_eq_def26 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq28(a, b)].
  ((((((((bool_eq15(((a).us_split_fields13).rec__cert__id__contentst__id,
  ((b).us_split_fields13).rec__cert__id__contentst__id) = true) and
  (bool_eq20(((a).us_split_fields13).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields13).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq20(((a).us_split_fields13).rec__cert__id__contentst__notafter,
  ((b).us_split_fields13).rec__cert__id__contentst__notafter) = true)) and
  (to_rep2(((a).us_split_fields13).rec__cert__id__contentst__mechanism) = to_rep2(((b).us_split_fields13).rec__cert__id__contentst__mechanism))) and
  (bool_eq13(((a).us_split_fields13).rec__cert__id__contentst__subject,
  ((b).us_split_fields13).rec__cert__id__contentst__subject) = true)) and
  (bool_eq27(((a).us_split_fields13).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields13).rec__cert__id__contentst__subjectpublickey) = true)) ->
  (bool_eq28(a, b) = true)) and
  ((not ((((((bool_eq15(((a).us_split_fields13).rec__cert__id__contentst__id,
  ((b).us_split_fields13).rec__cert__id__contentst__id) = true) and
  (bool_eq20(((a).us_split_fields13).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields13).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq20(((a).us_split_fields13).rec__cert__id__contentst__notafter,
  ((b).us_split_fields13).rec__cert__id__contentst__notafter) = true)) and
  (to_rep2(((a).us_split_fields13).rec__cert__id__contentst__mechanism) = to_rep2(((b).us_split_fields13).rec__cert__id__contentst__mechanism))) and
  (bool_eq13(((a).us_split_fields13).rec__cert__id__contentst__subject,
  ((b).us_split_fields13).rec__cert__id__contentst__subject) = true)) and
  (bool_eq27(((a).us_split_fields13).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields13).rec__cert__id__contentst__subjectpublickey) = true))) ->
  (bool_eq28(a, b) = false))))

logic value__size8 : int

logic object__size8 : us_rep6 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep6 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (forall a:us_rep6. (0 <= object__size8(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:us_rep6. (0 <= object__alignment8(a)))

logic cert__id__contentst__id__first__bit : int

logic cert__id__contentst__id__last__bit : int

logic cert__id__contentst__id__position : int

axiom cert__id__contentst__id__first__bit_axiom :
  (0 <= cert__id__contentst__id__first__bit)

axiom cert__id__contentst__id__last__bit_axiom :
  (cert__id__contentst__id__first__bit <  cert__id__contentst__id__last__bit)

axiom cert__id__contentst__id__position_axiom :
  (0 <= cert__id__contentst__id__position)

logic cert__id__contentst__notbefore__first__bit : int

logic cert__id__contentst__notbefore__last__bit : int

logic cert__id__contentst__notbefore__position : int

axiom cert__id__contentst__notbefore__first__bit_axiom :
  (0 <= cert__id__contentst__notbefore__first__bit)

axiom cert__id__contentst__notbefore__last__bit_axiom :
  (cert__id__contentst__notbefore__first__bit <  cert__id__contentst__notbefore__last__bit)

axiom cert__id__contentst__notbefore__position_axiom :
  (0 <= cert__id__contentst__notbefore__position)

logic cert__id__contentst__notafter__first__bit : int

logic cert__id__contentst__notafter__last__bit : int

logic cert__id__contentst__notafter__position : int

axiom cert__id__contentst__notafter__first__bit_axiom :
  (0 <= cert__id__contentst__notafter__first__bit)

axiom cert__id__contentst__notafter__last__bit_axiom :
  (cert__id__contentst__notafter__first__bit <  cert__id__contentst__notafter__last__bit)

axiom cert__id__contentst__notafter__position_axiom :
  (0 <= cert__id__contentst__notafter__position)

logic cert__id__contentst__mechanism__first__bit : int

logic cert__id__contentst__mechanism__last__bit : int

logic cert__id__contentst__mechanism__position : int

axiom cert__id__contentst__mechanism__first__bit_axiom :
  (0 <= cert__id__contentst__mechanism__first__bit)

axiom cert__id__contentst__mechanism__last__bit_axiom :
  (cert__id__contentst__mechanism__first__bit <  cert__id__contentst__mechanism__last__bit)

axiom cert__id__contentst__mechanism__position_axiom :
  (0 <= cert__id__contentst__mechanism__position)

logic cert__id__contentst__subject__first__bit : int

logic cert__id__contentst__subject__last__bit : int

logic cert__id__contentst__subject__position : int

axiom cert__id__contentst__subject__first__bit_axiom :
  (0 <= cert__id__contentst__subject__first__bit)

axiom cert__id__contentst__subject__last__bit_axiom :
  (cert__id__contentst__subject__first__bit <  cert__id__contentst__subject__last__bit)

axiom cert__id__contentst__subject__position_axiom :
  (0 <= cert__id__contentst__subject__position)

logic cert__id__contentst__subjectpublickey__first__bit : int

logic cert__id__contentst__subjectpublickey__last__bit : int

logic cert__id__contentst__subjectpublickey__position : int

axiom cert__id__contentst__subjectpublickey__first__bit_axiom :
  (0 <= cert__id__contentst__subjectpublickey__first__bit)

axiom cert__id__contentst__subjectpublickey__last__bit_axiom :
  (cert__id__contentst__subjectpublickey__first__bit <  cert__id__contentst__subjectpublickey__last__bit)

axiom cert__id__contentst__subjectpublickey__position_axiom :
  (0 <= cert__id__contentst__subjectpublickey__position)

logic user_eq26 : us_rep6, us_rep6 -> bool

logic dummy55 : issueridt

logic dummy56 : namecountt

logic dummy57 : (int,character) farray

logic dummy58 : serialnumbert

logic dummy59 : yearst

logic dummy60 : monthst

logic dummy61 : dayst

logic dummy62 : millisecst

logic dummy63 : yearst

logic dummy64 : monthst

logic dummy65 : dayst

logic dummy66 : millisecst

logic dummy67 : algorithmt

logic dummy68 : issueridt

logic dummy69 : namecountt

logic dummy70 : (int,character) farray

logic dummy71 : algorithmt

logic dummy72 : keyidt

logic dummy73 : keylengtht

type contentst__ref1 = { contentst__content1 : us_rep6
}

function contentst__ref___4__projection(a: contentst__ref1) : us_rep6 =
  (a).contentst__content1

type us_split_fields14 = { rec__admintoken__validauthcertt__valid : bool;
rec__admintoken__validauthcertt__contents : us_rep4
}

function us_split_fields_Valid__projection(a: us_split_fields14) : bool =
  (a).rec__admintoken__validauthcertt__valid

function us_split_fields_Contents__projection(a: us_split_fields14) : us_rep4 =
  (a).rec__admintoken__validauthcertt__contents

type us_split_fields__ref7 = { us_split_fields__content7 : us_split_fields14
}

function us_split_fields__ref___14__projection(a: us_split_fields__ref7) : us_split_fields14 =
  (a).us_split_fields__content7

type us_rep7 = { us_split_fields15 : us_split_fields14
}

function us_rep___15__projection(a: us_rep7) : us_split_fields14 =
  (a).us_split_fields15

logic bool_eq29 : us_rep7, us_rep7 -> bool

axiom bool_eq_def27 :
  (forall a:us_rep7. forall b:us_rep7 [bool_eq29(a, b)].
  ((((((a).us_split_fields15).rec__admintoken__validauthcertt__valid = ((b).us_split_fields15).rec__admintoken__validauthcertt__valid) and
  (bool_eq24(((a).us_split_fields15).rec__admintoken__validauthcertt__contents,
  ((b).us_split_fields15).rec__admintoken__validauthcertt__contents) = true)) ->
  (bool_eq29(a, b) = true)) and
  ((not ((((a).us_split_fields15).rec__admintoken__validauthcertt__valid = ((b).us_split_fields15).rec__admintoken__validauthcertt__valid) and
  (bool_eq24(((a).us_split_fields15).rec__admintoken__validauthcertt__contents,
  ((b).us_split_fields15).rec__admintoken__validauthcertt__contents) = true))) ->
  (bool_eq29(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep7 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep7 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (forall a:us_rep7. (0 <= object__size9(a)))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:us_rep7. (0 <= object__alignment9(a)))

logic admintoken__validauthcertt__valid__first__bit : int

logic admintoken__validauthcertt__valid__last__bit : int

logic admintoken__validauthcertt__valid__position : int

axiom admintoken__validauthcertt__valid__first__bit_axiom :
  (0 <= admintoken__validauthcertt__valid__first__bit)

axiom admintoken__validauthcertt__valid__last__bit_axiom :
  (admintoken__validauthcertt__valid__first__bit <  admintoken__validauthcertt__valid__last__bit)

axiom admintoken__validauthcertt__valid__position_axiom :
  (0 <= admintoken__validauthcertt__valid__position)

logic admintoken__validauthcertt__contents__first__bit : int

logic admintoken__validauthcertt__contents__last__bit : int

logic admintoken__validauthcertt__contents__position : int

axiom admintoken__validauthcertt__contents__first__bit_axiom :
  (0 <= admintoken__validauthcertt__contents__first__bit)

axiom admintoken__validauthcertt__contents__last__bit_axiom :
  (admintoken__validauthcertt__contents__first__bit <  admintoken__validauthcertt__contents__last__bit)

axiom admintoken__validauthcertt__contents__position_axiom :
  (0 <= admintoken__validauthcertt__contents__position)

logic user_eq27 : us_rep7, us_rep7 -> bool

logic dummy74 : bool

logic dummy75 : issueridt

logic dummy76 : namecountt

logic dummy77 : (int,character) farray

logic dummy78 : serialnumbert

logic dummy79 : yearst

logic dummy80 : monthst

logic dummy81 : dayst

logic dummy82 : millisecst

logic dummy83 : yearst

logic dummy84 : monthst

logic dummy85 : dayst

logic dummy86 : millisecst

logic dummy87 : algorithmt

logic dummy88 : issueridt

logic dummy89 : namecountt

logic dummy90 : (int,character) farray

logic dummy91 : serialnumbert

logic dummy92 : privileget

logic dummy93 : classt

type validauthcertt__ref = { validauthcertt__content : us_rep7
}

function validauthcertt__ref___projection(a: validauthcertt__ref) : us_rep7 =
  (a).validauthcertt__content

logic attr__ATTRIBUTE_ADDRESS : int

logic theauthcertrole : us_split_fields14 -> int

logic theauthcertrole__function_guard : int, us_split_fields14 -> prop

axiom theauthcertrole__post_axiom :
  (forall admintoken__authcert__fields:us_split_fields14
  [theauthcertrole(admintoken__authcert__fields)].
  in_range15(theauthcertrole(admintoken__authcert__fields)))

axiom theauthcertrole__def_axiom :
  (forall admintoken__authcert__fields:us_split_fields14
  [theauthcertrole(admintoken__authcert__fields)].
  (theauthcertrole(admintoken__authcert__fields) = therole((admintoken__authcert__fields).rec__admintoken__validauthcertt__contents)))

type us_split_fields16 = { rec__admintoken__valididcertt__valid : bool;
rec__admintoken__valididcertt__contents : us_rep6
}

function us_split_fields_Valid__2__projection(a: us_split_fields16) : bool =
  (a).rec__admintoken__valididcertt__valid

function us_split_fields_Contents__2__projection(a: us_split_fields16) : us_rep6 =
  (a).rec__admintoken__valididcertt__contents

type us_split_fields__ref8 = { us_split_fields__content8 : us_split_fields16
}

function us_split_fields__ref___15__projection(a: us_split_fields__ref8) : us_split_fields16 =
  (a).us_split_fields__content8

type us_rep8 = { us_split_fields17 : us_split_fields16
}

function us_rep___16__projection(a: us_rep8) : us_split_fields16 =
  (a).us_split_fields17

logic bool_eq30 : us_rep8, us_rep8 -> bool

axiom bool_eq_def28 :
  (forall a:us_rep8. forall b:us_rep8 [bool_eq30(a, b)].
  ((((((a).us_split_fields17).rec__admintoken__valididcertt__valid = ((b).us_split_fields17).rec__admintoken__valididcertt__valid) and
  (bool_eq28(((a).us_split_fields17).rec__admintoken__valididcertt__contents,
  ((b).us_split_fields17).rec__admintoken__valididcertt__contents) = true)) ->
  (bool_eq30(a, b) = true)) and
  ((not ((((a).us_split_fields17).rec__admintoken__valididcertt__valid = ((b).us_split_fields17).rec__admintoken__valididcertt__valid) and
  (bool_eq28(((a).us_split_fields17).rec__admintoken__valididcertt__contents,
  ((b).us_split_fields17).rec__admintoken__valididcertt__contents) = true))) ->
  (bool_eq30(a, b) = false))))

logic value__size10 : int

logic object__size10 : us_rep8 -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep8 -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 : (forall a:us_rep8. (0 <= object__size10(a)))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:us_rep8. (0 <= object__alignment10(a)))

logic admintoken__valididcertt__valid__first__bit : int

logic admintoken__valididcertt__valid__last__bit : int

logic admintoken__valididcertt__valid__position : int

axiom admintoken__valididcertt__valid__first__bit_axiom :
  (0 <= admintoken__valididcertt__valid__first__bit)

axiom admintoken__valididcertt__valid__last__bit_axiom :
  (admintoken__valididcertt__valid__first__bit <  admintoken__valididcertt__valid__last__bit)

axiom admintoken__valididcertt__valid__position_axiom :
  (0 <= admintoken__valididcertt__valid__position)

logic admintoken__valididcertt__contents__first__bit : int

logic admintoken__valididcertt__contents__last__bit : int

logic admintoken__valididcertt__contents__position : int

axiom admintoken__valididcertt__contents__first__bit_axiom :
  (0 <= admintoken__valididcertt__contents__first__bit)

axiom admintoken__valididcertt__contents__last__bit_axiom :
  (admintoken__valididcertt__contents__first__bit <  admintoken__valididcertt__contents__last__bit)

axiom admintoken__valididcertt__contents__position_axiom :
  (0 <= admintoken__valididcertt__contents__position)

logic user_eq28 : us_rep8, us_rep8 -> bool

logic dummy94 : bool

logic dummy95 : issueridt

logic dummy96 : namecountt

logic dummy97 : (int,character) farray

logic dummy98 : serialnumbert

logic dummy99 : yearst

logic dummy100 : monthst

logic dummy101 : dayst

logic dummy102 : millisecst

logic dummy103 : yearst

logic dummy104 : monthst

logic dummy105 : dayst

logic dummy106 : millisecst

logic dummy107 : algorithmt

logic dummy108 : issueridt

logic dummy109 : namecountt

logic dummy110 : (int,character) farray

logic dummy111 : algorithmt

logic dummy112 : keyidt

logic dummy113 : keylengtht

type valididcertt__ref = { valididcertt__content : us_rep8
}

function valididcertt__ref___projection(a: valididcertt__ref) : us_rep8 =
  (a).valididcertt__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic isgood : us_split_fields16 -> bool

logic isgood__function_guard : bool, us_split_fields16 -> prop

axiom isgood__post_axiom : true

axiom isgood__def_axiom :
  (forall admintoken__idcert__fields:us_split_fields16
  [isgood(admintoken__idcert__fields)].
  ((isgood(admintoken__idcert__fields) = true) <->
  ((admintoken__idcert__fields).rec__admintoken__valididcertt__valid = true)))

logic authcertvalid : us_split_fields14 -> bool

logic authcertvalid__function_guard : bool, us_split_fields14 -> prop

axiom authcertvalid__post_axiom : true

axiom authcertvalid__def_axiom :
  (forall admintoken__authcert__fields:us_split_fields14
  [authcertvalid(admintoken__authcert__fields)].
  ((authcertvalid(admintoken__authcert__fields) = true) <->
  ((admintoken__authcert__fields).rec__admintoken__validauthcertt__valid = true)))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic thetokenid : us_private -> int

logic thetokenid__function_guard : int, us_private -> prop

logic thetokentry : us_private -> int

logic thetokentry__function_guard : int, us_private -> prop

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic makedescription : us_t -> (int,character) farray

logic makedescription__function_guard : (int,character) farray, us_t -> prop

axiom makedescription__post_axiom : true

logic temp___String_Literal_1342 : unit -> (int,character) farray

axiom temp___String_Literal_1342__def_axiom :
  (((((((((to_rep((temp___String_Literal_1342(void)[1])) = 84) and
  (to_rep((temp___String_Literal_1342(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_1342(void)[3])) = 107)) and
  (to_rep((temp___String_Literal_1342(void)[4])) = 101)) and
  (to_rep((temp___String_Literal_1342(void)[5])) = 110)) and
  (to_rep((temp___String_Literal_1342(void)[6])) = 32)) and
  (to_rep((temp___String_Literal_1342(void)[7])) = 66)) and
  (to_rep((temp___String_Literal_1342(void)[8])) = 97)) and
  (to_rep((temp___String_Literal_1342(void)[9])) = 100))

logic temp___String_Literal_1343 : unit -> (int,character) farray

axiom temp___String_Literal_1343__def_axiom :
  (((((((((((((((((((((((((((((((((((((((((((((((to_rep((temp___String_Literal_1343(void)[1])) = 65) and
  (to_rep((temp___String_Literal_1343(void)[2])) = 117)) and
  (to_rep((temp___String_Literal_1343(void)[3])) = 116)) and
  (to_rep((temp___String_Literal_1343(void)[4])) = 104)) and
  (to_rep((temp___String_Literal_1343(void)[5])) = 111)) and
  (to_rep((temp___String_Literal_1343(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_1343(void)[7])) = 105)) and
  (to_rep((temp___String_Literal_1343(void)[8])) = 115)) and
  (to_rep((temp___String_Literal_1343(void)[9])) = 97)) and
  (to_rep((temp___String_Literal_1343(void)[10])) = 116)) and
  (to_rep((temp___String_Literal_1343(void)[11])) = 105)) and
  (to_rep((temp___String_Literal_1343(void)[12])) = 111)) and
  (to_rep((temp___String_Literal_1343(void)[13])) = 110)) and
  (to_rep((temp___String_Literal_1343(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_1343(void)[15])) = 67)) and
  (to_rep((temp___String_Literal_1343(void)[16])) = 101)) and
  (to_rep((temp___String_Literal_1343(void)[17])) = 114)) and
  (to_rep((temp___String_Literal_1343(void)[18])) = 116)) and
  (to_rep((temp___String_Literal_1343(void)[19])) = 105)) and
  (to_rep((temp___String_Literal_1343(void)[20])) = 102)) and
  (to_rep((temp___String_Literal_1343(void)[21])) = 105)) and
  (to_rep((temp___String_Literal_1343(void)[22])) = 99)) and
  (to_rep((temp___String_Literal_1343(void)[23])) = 97)) and
  (to_rep((temp___String_Literal_1343(void)[24])) = 116)) and
  (to_rep((temp___String_Literal_1343(void)[25])) = 101)) and
  (to_rep((temp___String_Literal_1343(void)[26])) = 32)) and
  (to_rep((temp___String_Literal_1343(void)[27])) = 110)) and
  (to_rep((temp___String_Literal_1343(void)[28])) = 111)) and
  (to_rep((temp___String_Literal_1343(void)[29])) = 116)) and
  (to_rep((temp___String_Literal_1343(void)[30])) = 32)) and
  (to_rep((temp___String_Literal_1343(void)[31])) = 102)) and
  (to_rep((temp___String_Literal_1343(void)[32])) = 111)) and
  (to_rep((temp___String_Literal_1343(void)[33])) = 114)) and
  (to_rep((temp___String_Literal_1343(void)[34])) = 32)) and
  (to_rep((temp___String_Literal_1343(void)[35])) = 65)) and
  (to_rep((temp___String_Literal_1343(void)[36])) = 100)) and
  (to_rep((temp___String_Literal_1343(void)[37])) = 109)) and
  (to_rep((temp___String_Literal_1343(void)[38])) = 105)) and
  (to_rep((temp___String_Literal_1343(void)[39])) = 110)) and
  (to_rep((temp___String_Literal_1343(void)[40])) = 105)) and
  (to_rep((temp___String_Literal_1343(void)[41])) = 115)) and
  (to_rep((temp___String_Literal_1343(void)[42])) = 116)) and
  (to_rep((temp___String_Literal_1343(void)[43])) = 114)) and
  (to_rep((temp___String_Literal_1343(void)[44])) = 97)) and
  (to_rep((temp___String_Literal_1343(void)[45])) = 116)) and
  (to_rep((temp___String_Literal_1343(void)[46])) = 111)) and
  (to_rep((temp___String_Literal_1343(void)[47])) = 114))

 (* File "admintoken.ads", line 40, characters 0-0 *)
goal WP_parameter_def :
  (forall filestate:us_private. forall state:us_private.
  forall description:(int,character) farray. forall tokenok:bool.
  forall state1:us_private. forall status:us_private. forall tokentry:int.
  forall tokenid:int. forall authcert__split_fields:us_split_fields__ref7.
  forall idcert__split_fields:us_split_fields__ref8. forall authvalid:bool.
  forall idvalid:bool. forall roleok:bool. forall o:int. forall o1:int.
  forall o2:int. forall o3:(int,character) farray.
  forall o4:(int,character) farray. forall filestate1:us_private.
  forall state2:us_private. forall status1:us_private. forall tokenid1:int.
  forall result:int. forall tokentry1:int.
  forall authcertcontents__split_fields:us_split_fields8.
  forall idcertcontents__split_fields:us_split_fields12. forall result1:int.
  forall tokenid2:int. forall idvalid1:bool.
  forall idcertcontents__split_fields1:us_split_fields12.
  forall filestate2:us_private. forall state3:us_private.
  forall description1:(int,character) farray. forall status2:us_private.
  forall authvalid1:bool.
  forall authcertcontents__split_fields1:us_split_fields8.
  forall result2:bool. forall result3:bool. forall roleok1:bool.
  forall result4:(int,character) farray.
  forall description2:(int,character) farray. forall result5:bool.
  forall roleok2:bool. forall result6:bool. forall roleok3:bool.
  forall result7:bool. forall authvalid2:bool. forall result8:bool.
  forall idvalid2:bool. forall result9:bool. forall roleok4:bool.
  forall result10:(int,character) farray.
  forall description3:(int,character) farray. forall result11:bool.
  forall tokenok1:bool. forall result12:us_split_fields__ref8.
  forall idcert__split_fields1:us_split_fields16.
  forall result13:us_split_fields__ref7.
  forall authcert__split_fields1:us_split_fields14.
  forall filestate3:us_private. forall state4:us_private.
  forall description4:(int,character) farray. forall tokenok2:bool.
  forall status3:us_private. forall tokentry2:int. forall tokenid3:int.
  forall authcert__split_fields2:us_split_fields__ref7.
  forall idcert__split_fields2:us_split_fields__ref8. forall authvalid3:bool.
  forall idvalid3:bool. forall roleok5:bool.
  forall authcertcontents__split_fields2:us_split_fields__ref4.
  forall idcertcontents__split_fields2:us_split_fields__ref6.
  forall filestate4:us_private. forall state5:us_private.
  forall description5:(int,character) farray. forall tokenok3:bool.
  forall status4:us_private. forall tokentry3:int. forall tokenid4:int.
  forall authcert__split_fields3:us_split_fields14.
  forall idcert__split_fields3:us_split_fields16. forall authvalid4:bool.
  forall idvalid4:bool. forall roleok6:bool.
  forall authcertcontents__split_fields3:us_split_fields8.
  forall idcertcontents__split_fields3:us_split_fields12. (((0 <= 2) ->
  in_range5(tokentry)) -> (in_range4(tokenid) ->
  ((((((o = thetokentry(state1)) and in_range5(o)) and (({ int__content =
  result } = { int__content = tokentry }) and (tokentry1 = o))) and
  ((((tokentry1 = 2) and ((((o1 = thetokenid(state1)) and in_range4(o1)) and
  (({ int__content = result1 } = { int__content = tokenid }) and
  (tokenid2 = o1))) and (((match_bool(idvalid1, authvalid1,
  false) = true) and ((((o2 = therole({ us_split_fields9 =
  authcertcontents__split_fields1 })) and in_range15(o2)) and
  ((in_range6(o2) and (result2 = true)) or ((not in_range6(o2)) and
  (result2 = false)))) and (((result2 = true) and (((result3 = roleok) and
  (roleok1 = of_int(1))) and (description2 = description1))) or
  ((not (result2 = true)) and ((((o3 = makedescription({ elts =
  temp___String_Literal_1343(void); rt = mk(1, 47) })) and
  ((result4 = description1) and (description2 = o3))) and
  ((result5 = roleok) and (roleok2 = of_int(0)))) and
  (roleok1 = roleok2)))))) or ((not (match_bool(idvalid1, authvalid1,
  false) = true)) and (((result6 = roleok) and (roleok3 = of_int(0))) and
  ((roleok1 = roleok3) and (description2 = description1))))))) or
  ((not (tokentry1 = 2)) and (((({ bool__content = result7 } = {
  bool__content = authvalid }) and (authvalid2 = of_int(0))) and ((({
  bool__content = result8 } = { bool__content = idvalid }) and
  (idvalid2 = of_int(0))) and ((({ bool__content = result9 } = {
  bool__content = roleok }) and (roleok4 = of_int(0))) and
  ((o4 = makedescription({ elts = temp___String_Literal_1342(void); rt =
  mk(1, 9) })) and ((result10 = description) and (description3 = o4)))))) and
  ((({ us_split_fields__content6 = idcertcontents__split_fields1 } = {
  us_split_fields__content6 = idcertcontents__split_fields }) and (({
  us_split_fields__content4 = authcertcontents__split_fields1 } = {
  us_split_fields__content4 = authcertcontents__split_fields }) and
  ((roleok1 = roleok4) and ((idvalid1 = idvalid2) and
  ((authvalid1 = authvalid2) and ((tokenid2 = tokenid) and
  ((status2 = status) and ((description2 = description3) and
  ((state3 = state) and (filestate2 = filestate)))))))))) and
  ((idcertcontents__split_fields1 = idcertcontents__split_fields) and
  ((authcertcontents__split_fields1 = authcertcontents__split_fields) and
  ((roleok1 = roleok4) and ((idvalid1 = idvalid2) and
  ((authvalid1 = authvalid2) and ((tokenid2 = tokenid1) and
  ((status2 = status1) and ((description2 = description3) and
  ((state3 = state2) and (filestate2 = filestate1)))))))))))))) and
  (((result11 = tokenok) and (tokenok1 = match_bool(match_bool(authvalid1,
  idvalid1, false), roleok1, false))) and
  (((result12 = idcert__split_fields) and (idcert__split_fields1 = {
  rec__admintoken__valididcertt__valid = idvalid1;
  rec__admintoken__valididcertt__contents = { us_split_fields13 =
  idcertcontents__split_fields1 } })) and
  ((result13 = authcert__split_fields) and (authcert__split_fields1 = {
  rec__admintoken__validauthcertt__valid = authvalid1;
  rec__admintoken__validauthcertt__contents = { us_split_fields9 =
  authcertcontents__split_fields1 } })))))) and
  (((idcertcontents__split_fields2 = { us_split_fields__content6 =
  idcertcontents__split_fields1 }) and ((authcertcontents__split_fields2 = {
  us_split_fields__content4 = authcertcontents__split_fields1 }) and
  ((roleok5 = roleok1) and ((idvalid3 = idvalid1) and
  ((authvalid3 = authvalid1) and ((idcert__split_fields2 = {
  us_split_fields__content8 = idcert__split_fields1 }) and
  ((authcert__split_fields2 = { us_split_fields__content7 =
  authcert__split_fields1 }) and ((tokenid3 = tokenid2) and
  ((tokentry2 = tokentry1) and ((status3 = status2) and
  ((tokenok1 = tokenok2) and ((description4 = description2) and
  ((state4 = state3) and (filestate3 = filestate2)))))))))))))) and
  ((idcertcontents__split_fields3 = idcertcontents__split_fields1) and
  ((authcertcontents__split_fields3 = authcertcontents__split_fields1) and
  ((roleok6 = roleok1) and ((idvalid4 = idvalid1) and
  ((authvalid4 = authvalid1) and
  ((idcert__split_fields3 = idcert__split_fields1) and
  ((authcert__split_fields3 = authcert__split_fields1) and
  ((tokenid4 = tokenid2) and ((tokentry3 = tokentry1) and
  ((status4 = status2) and ((tokenok3 = tokenok1) and
  ((description5 = description2) and ((state5 = state3) and
  (filestate4 = filestate2)))))))))))))))) -> ((tokenok2 = true) ->
  (((idcert__split_fields2).us_split_fields__content8).rec__admintoken__valididcertt__valid = true))))))
