;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-sort t 0)

(declare-fun le (t t) Bool)

(declare-fun lt (t t) Bool)

(declare-fun gt (t t) Bool)

(declare-fun add (t t) t)

(declare-fun sub (t t) t)

(declare-const one t)

(declare-sort component_type 0)

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array t component_type))))))
(declare-fun slide ((Array t component_type) t t) (Array t component_type))

;; slide_eq
  (assert
  (forall ((a (Array t component_type)))
  (forall ((first t))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array t component_type)))
  (forall ((old_first t))
  (forall ((new_first t))
  (forall ((i t))
  (! (= (select (slide a old_first new_first) i) (select a (sub i
                                                           (sub new_first
                                                           old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array t component_type) t t (Array t component_type) t
  t) (Array t component_type))

;; concat_def
  (assert
  (forall ((a (Array t component_type)) (b (Array t component_type)))
  (forall ((a_first t) (a_last t) (b_first t) (b_last t))
  (forall ((i t))
  (! (and
     (=> (and (le a_first i) (le i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (gt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b
     (add (sub i a_last) (sub b_first one)))))) :pattern ((select (concat1 a
                                                                  a_first
                                                                  a_last b
                                                                  b_first
                                                                  b_last) i)) )))))

(declare-fun singleton1 (component_type t) (Array t component_type))

;; singleton_def
  (assert
  (forall ((v component_type))
  (forall ((i t))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(declare-sort index 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 65536)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (index index) Bool)

(declare-const dummy2 index)

(declare-datatypes ((index__ref 0))
(((mk_index__ref (index__content index)))))
(declare-fun to_rep (index) Int)

(declare-fun of_rep (Int) index)

;; inversion_axiom
  (assert
  (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x index)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort extended_index 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 65536)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (extended_index extended_index) Bool)

(declare-const dummy3 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((mk_extended_index__ref (extended_index__content extended_index)))))
(declare-fun to_rep1 (extended_index) Int)

(declare-fun of_rep1 (Int) extended_index)

;; inversion_axiom
  (assert
  (forall ((x extended_index))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x extended_index)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__sums__slice_bounds__lo index)(rec__sums__slice_bounds__hi extended_index)))))
(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(declare-datatypes ((slice_bounds 0))
(((mk_slice_bounds (us_split_fields1 us_split_fields)))))
(declare-datatypes ((slice_bounds__ref 0))
(((mk_slice_bounds__ref (slice_bounds__content slice_bounds)))))
(define-fun usrec__lo ((b slice_bounds)) Int (to_rep
                                             (rec__sums__slice_bounds__lo
                                             (us_split_fields1 b))))

(define-fun usrec__hi ((b slice_bounds)) Int (to_rep1
                                             (rec__sums__slice_bounds__hi
                                             (us_split_fields1 b))))

(define-fun bool_eq ((a slice_bounds)
  (b slice_bounds)) Bool (ite (and (= (usrec__lo a) (usrec__lo b))
                              (= (usrec__hi a) (usrec__hi b)))
                         true false))

(declare-const dummy4 slice_bounds)

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-sort vector_element 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (div1 (- 2147483648) 65536) x)
                                     (<= x (div1 2147483647 65536))))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (vector_element vector_element) Bool)

(declare-const dummy5 vector_element)

(declare-datatypes ((vector_element__ref 0))
(((mk_vector_element__ref (vector_element__content vector_element)))))
(declare-fun to_rep2 (vector_element) Int)

(declare-fun of_rep2 (Int) vector_element)

;; inversion_axiom
  (assert
  (forall ((x vector_element))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x vector_element)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int vector_element))))))
(declare-fun slide1 ((Array Int vector_element) Int
  Int) (Array Int vector_element))

;; slide_eq
  (assert
  (forall ((a (Array Int vector_element)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int vector_element)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int vector_element) Int Int
  (Array Int vector_element) Int Int) (Array Int vector_element))

;; concat_def
  (assert
  (forall ((a (Array Int vector_element)) (b (Array Int vector_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (vector_element Int) (Array Int vector_element))

;; singleton_def
  (assert
  (forall ((v vector_element))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int vector_element)) (af Int) (al Int)
  (b (Array Int vector_element)) (bf Int)
  (bl Int)) Bool (ite (and (ite (<= af al) (= (- al af) (- bl bf)) (< bl bf))
                      (forall ((idx Int))
                      (=> (and (<= af idx) (<= idx al))
                      (= (select a idx) (select b (+ (- bf af) idx))))))
                 true false))

(declare-fun compare ((Array Int vector_element) Int Int
  (Array Int vector_element) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int vector_element)) (b (Array Int vector_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int vector_element)) (b (Array Int vector_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int vector_element)) (b (Array Int vector_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep3 (integer) Int)

(declare-fun of_rep3 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun index_dynamic_property ((first Int) (last Int)
  (x Int)) Bool (and (<= first x) (<= x last)))

(declare-sort t1 0)

(declare-fun first (t1) integer)

(declare-fun last (t1) integer)

(declare-fun mk (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep3 (first (mk f l))) f) (= (to_rep3 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (index_dynamic_property range_first range_last low)
                   (index_dynamic_property range_first range_last high))))))

(declare-datatypes ((us_t 0))
(((mk___t (elts (Array Int vector_element))(rt t1)))))
(define-fun of_array ((a (Array Int vector_element)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep3 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep3 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int vector_element)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int vector_element)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int vector_element)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int vector_element))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int vector_element)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int vector_element))) (<= 0 (object__alignment a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep3 (first (rt x)))
                 (to_rep3 (last (rt x))) (elts y) (to_rep3 (first (rt y)))
                 (to_rep3 (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-const dummy6 us_t)

(declare-datatypes ((vector__ref 0))
(((mk_vector__ref (vector__content us_t)))))
(define-fun usget ((v us_t) (i Int)) Int (to_rep2 (select (elts v) i)))

(define-fun dynamic_invariant2 ((expr us_t) (us Bool) (skip_bounds Bool)
  (us1 Bool)) Bool (=> (not (= skip_bounds true)) (dynamic_property 1 65536
                   (first1 expr) (last1 expr))))

(declare-fun sum__logic (us_t slice_bounds) Int)

;; sum_def
  (assert
  (forall ((v us_t) (b slice_bounds))
  (! (and (in_range1 (sum__logic v b))
     (and (=> (< (usrec__hi b) (usrec__lo b)) (= (sum__logic v b) 0))
     (=>
     (and (<= (first1 v) (usrec__lo b))
     (and (<= (usrec__lo b) (usrec__hi b)) (<= (usrec__hi b) (last1 v))))
     (and
     (=> (= (usrec__lo b) (usrec__hi b))
     (= (sum__logic v b) (usget v (usrec__lo b))))
     (forall ((b1 slice_bounds))
     (! (and
        (=>
        (and (= (usrec__hi b1) (usrec__hi b))
        (and (< (usrec__lo b) (usrec__lo b1))
        (<= (usrec__lo b1) (usrec__hi b))))
        (= (sum__logic v b) (+ (sum__logic v b1) (sum__logic v
                                                 (mk_slice_bounds
                                                 (mk___split_fields
                                                 (rec__sums__slice_bounds__lo
                                                 (us_split_fields1 b))
                                                 (of_rep1
                                                 (- (usrec__lo b1) 1))))))))
        (=>
        (and (= (usrec__lo b1) (usrec__lo b))
        (and (<= (usrec__lo b) (usrec__hi b1))
        (< (usrec__hi b1) (usrec__hi b))))
        (= (sum__logic v b) (+ (sum__logic v b1) (sum__logic v
                                                 (mk_slice_bounds
                                                 (mk___split_fields
                                                 (of_rep
                                                 (+ (usrec__hi b1) 1))
                                                 (rec__sums__slice_bounds__hi
                                                 (us_split_fields1 b))))))))) :pattern (
     (sum__logic v b1)) )))))) :pattern ((sum__logic v b)) )))

(declare-const x us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ((t2b__ref 0)) (((mk_t2b__ref (t2b__content integer)))))
(define-fun t2b__ref___projection ((a t2b__ref)) integer (t2b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy8 integer)

(declare-datatypes ((t11b__ref 0))
(((mk_t11b__ref (t11b__content integer)))))
(define-fun t11b__ref___projection ((a t11b__ref)) integer (t11b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const max_sum Int)

(declare-const result____split_fields index)

(declare-const result____split_fields1 extended_index)

(declare-const current_slice__split_fields index)

(declare-const current_slice__split_fields1 extended_index)

(declare-const current_sum Int)

(declare-const lo Int)

(declare-const hi Int)

(declare-const slice_sums__maximal_sum_slice_bounds__result index)

(declare-const slice_sums__maximal_sum_slice_bounds__result1 extended_index)

(declare-const o extended_index)

(declare-const o1 index)

(declare-const o2 index)

(declare-const o3 extended_index)

(declare-const temp___156 index)

(declare-const temp___1561 extended_index)

(declare-const temp___170 Int)

(declare-const temp___169 Int)

(declare-const temp___168 Int)

(declare-const temp___167 index)

(declare-const temp___1671 extended_index)

(declare-const temp___166 index)

(declare-const temp___1661 extended_index)

(declare-const temp___163 Int)

(declare-const temp___162 Int)

(declare-const temp___161 Int)

(declare-const temp___160 slice_bounds)

(declare-const temp___159 slice_bounds)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 extended_index)

(declare-const o7 index)

(declare-const o8 us_split_fields)

(declare-const temp___157 slice_bounds)

(declare-const o9 Int)

(declare-const current_slice__split_fields2 us_split_fields)

(declare-const current_sum1 Int)

(declare-const hi1 Int)

(declare-const result int__ref)

(declare-const max_sum1 Int)

(declare-const result1 us_split_fields__ref)

(declare-const result____split_fields2 us_split_fields)

(declare-const result2 int__ref)

(declare-const lo1 Int)

(declare-const max_sum2 Int)

(declare-const result____split_fields3 us_split_fields)

(declare-const current_slice__split_fields3 us_split_fields)

(declare-const current_sum2 Int)

(declare-const lo2 Int)

(declare-const hi2 Int)

(declare-const result3 int__ref)

(declare-const hi3 Int)

(declare-const max_sum3 Int)

(declare-const result____split_fields4 us_split_fields)

(declare-const current_slice__split_fields4 us_split_fields)

(declare-const current_sum3 Int)

(declare-const hi4 Int)

(declare-const result4 us_split_fields__ref)

(declare-const current_slice__split_fields5 us_split_fields)

(declare-const result5 int__ref)

(declare-const current_sum4 Int)

(declare-const result6 us_split_fields__ref)

(declare-const result____split_fields5 us_split_fields)

(declare-const result7 int__ref)

(declare-const max_sum4 Int)

(declare-const max_sum5 int__ref)

(declare-const result____split_fields6 us_split_fields__ref)

(declare-const current_slice__split_fields6 us_split_fields__ref)

(declare-const current_sum5 int__ref)

(declare-const hi5 int__ref)

(declare-const max_sum6 Int)

(declare-const result____split_fields7 us_split_fields)

(declare-const current_slice__split_fields7 us_split_fields)

(declare-const current_sum6 Int)

(declare-const hi6 Int)

(declare-const max_sum7 int__ref)

(declare-const result____split_fields8 us_split_fields__ref)

(declare-const current_slice__split_fields8 us_split_fields__ref)

(declare-const current_sum7 int__ref)

(declare-const hi7 int__ref)

(declare-const max_sum8 Int)

(declare-const result____split_fields9 us_split_fields)

(declare-const current_slice__split_fields9 us_split_fields)

(declare-const current_sum8 Int)

(declare-const hi8 Int)

(declare-const max_sum9 int__ref)

(declare-const result____split_fields10 us_split_fields__ref)

(declare-const current_slice__split_fields10 us_split_fields__ref)

(declare-const current_sum9 int__ref)

(declare-const lo3 int__ref)

(declare-const hi9 int__ref)

(declare-const max_sum10 Int)

(declare-const result____split_fields11 us_split_fields)

(declare-const current_slice__split_fields11 us_split_fields)

(declare-const current_sum10 Int)

(declare-const lo4 Int)

(declare-const hi10 Int)

(declare-const max_sum11 int__ref)

(declare-const result____split_fields12 us_split_fields__ref)

(declare-const current_slice__split_fields12 us_split_fields__ref)

(declare-const current_sum11 int__ref)

(declare-const lo5 int__ref)

(declare-const hi11 int__ref)

(declare-const max_sum12 Int)

(declare-const result____split_fields13 us_split_fields)

(declare-const current_slice__split_fields13 us_split_fields)

(declare-const current_sum12 Int)

(declare-const lo6 Int)

(declare-const hi12 Int)

(declare-const result8 slice_bounds__ref)

(declare-const slice_sums__maximal_sum_slice_bounds__result2 slice_bounds)

(declare-const slice_sums__maximal_sum_slice_bounds__result3 slice_bounds__ref)

(declare-const slice_sums__maximal_sum_slice_bounds__result4 slice_bounds)

(declare-const max_sum13 int__ref)

(declare-const result____split_fields14 us_split_fields__ref)

(declare-const current_slice__split_fields14 us_split_fields__ref)

(declare-const current_sum13 int__ref)

(declare-const lo7 int__ref)

(declare-const hi13 int__ref)

(declare-const slice_sums__maximal_sum_slice_bounds__result5 slice_bounds__ref)

(declare-const max_sum14 Int)

(declare-const result____split_fields15 us_split_fields)

(declare-const current_slice__split_fields15 us_split_fields)

(declare-const current_sum14 Int)

(declare-const lo8 Int)

(declare-const hi14 Int)

(declare-const slice_sums__maximal_sum_slice_bounds__result6 slice_bounds)

(declare-const result9 Bool)

(declare-const result10 Bool)

;; H
  (assert (dynamic_invariant2 x true false true))

;; H
  (assert (= result (mk_int__ref max_sum)))

;; H
  (assert (= max_sum1 0))

;; H
  (assert (in_range2 max_sum1))

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 current_sum)))

;; H
  (assert (= (to_rep1 o) 0))

;; H
  (assert (= (to_rep o1) 1))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= temp___156 o2))

;; H
  (assert (= temp___1561 o3))

;; H
  (assert
  (= result1 (mk___split_fields__ref
             (mk___split_fields result____split_fields
             result____split_fields1))))

;; H
  (assert
  (= result____split_fields2 (mk___split_fields temp___156 temp___1561)))

;; H
  (assert (= result2 (mk_int__ref lo)))

;; H
  (assert (= lo1 (to_rep3 (first (rt x)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= temp___170 max_sum1)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= temp___169 lo1)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= temp___168 current_sum)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (and (= current_slice__split_fields temp___167)
  (= current_slice__split_fields1 temp___1671))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= result____split_fields2 (mk___split_fields temp___166 temp___1661))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (forall ((lo_index Int))
  (=> (and (<= (to_rep3 (first (rt x))) lo_index) (<= lo_index (- lo2 1)))
  (forall ((hi_index Int))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi_index)
  (<= hi_index (to_rep3 (last (rt x)))))
  (<= (sum__logic x
      (mk_slice_bounds
      (mk___split_fields (of_rep lo_index) (of_rep1 hi_index)))) max_sum2)))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (<= (to_rep (rec__sums__slice_bounds__lo result____split_fields3))
  (to_rep1 (rec__sums__slice_bounds__hi result____split_fields3)))
  (and
  (and
  (<= (to_rep3 (first (rt x))) (to_rep
                               (rec__sums__slice_bounds__lo
                               result____split_fields3)))
  (<= (to_rep1 (rec__sums__slice_bounds__hi result____split_fields3))
  (to_rep3 (last (rt x)))))
  (= max_sum2 (sum__logic x (mk_slice_bounds result____split_fields3)))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (and
  (and
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 current_sum2))
  (=> (<= (to_rep3 (first (rt x))) (to_rep3 (last (rt x))))
  (dynamic_property1 (to_rep3 (first (rt x))) (to_rep3 (last (rt x)))
  lo2))) (=> (<= 0 2147483647) (in_range2 max_sum2)))
  (and (<= (to_rep3 (first (rt x))) lo2) (<= lo2 (to_rep3 (last (rt x))))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= result3 (mk_int__ref hi2))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= hi3 (to_rep3 (first (rt x))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= temp___163 max_sum2))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= temp___162 hi3))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= temp___161 current_sum2))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= temp___160 (mk_slice_bounds current_slice__split_fields3)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= temp___159 (mk_slice_bounds result____split_fields3)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (and
  (forall ((lo_index Int))
  (=> (and (<= (to_rep3 (first (rt x))) lo_index) (<= lo_index (- lo2 1)))
  (forall ((hi_index Int))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi_index)
  (<= hi_index (to_rep3 (last (rt x)))))
  (<= (sum__logic x
      (mk_slice_bounds
      (mk___split_fields (of_rep lo_index) (of_rep1 hi_index)))) max_sum3)))))
  (forall ((hi_index Int))
  (=> (and (<= (to_rep3 (first (rt x))) hi_index) (<= hi_index (- hi4 1)))
  (<= (sum__logic x
      (mk_slice_bounds (mk___split_fields (of_rep lo2) (of_rep1 hi_index))))
  max_sum3)))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (=>
  (<= (to_rep (rec__sums__slice_bounds__lo result____split_fields4))
  (to_rep1 (rec__sums__slice_bounds__hi result____split_fields4)))
  (and
  (and
  (<= (to_rep3 (first (rt x))) (to_rep
                               (rec__sums__slice_bounds__lo
                               result____split_fields4)))
  (<= (to_rep1 (rec__sums__slice_bounds__hi result____split_fields4))
  (to_rep3 (last (rt x)))))
  (= max_sum3 (sum__logic x (mk_slice_bounds result____split_fields4))))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (and
  (and
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 current_sum3))
  (=> (<= (to_rep3 (first (rt x))) (to_rep3 (last (rt x))))
  (dynamic_property2 (to_rep3 (first (rt x))) (to_rep3 (last (rt x)))
  hi4))) (=> (<= 0 2147483647) (in_range2 max_sum3)))
  (and (<= (to_rep3 (first (rt x))) hi4) (<= hi4 (to_rep3 (last (rt x)))))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (and (= o5 hi4) (in_range4 hi4)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= (to_rep1 o6) o5))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (and (= o4 lo2) (in_range3 lo2)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= (to_rep o7) o4))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= o8 (mk___split_fields o7 o6)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= temp___157 (mk_slice_bounds o8)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= result4 (mk___split_fields__ref current_slice__split_fields4)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= current_slice__split_fields5 (us_split_fields1 temp___157)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= result5 (mk_int__ref current_sum3)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= current_sum4 (sum__logic x
                  (mk_slice_bounds current_slice__split_fields5))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (=> (< max_sum3 current_sum4)
  (= result6 (mk___split_fields__ref result____split_fields4))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (=> (< max_sum3 current_sum4)
  (= result____split_fields5 current_slice__split_fields5)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (=> (< max_sum3 current_sum4)
  (and (= o9 current_sum4) (in_range2 current_sum4))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (=> (< max_sum3 current_sum4) (= result7 (mk_int__ref max_sum3))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (=> (< max_sum3 current_sum4) (= max_sum4 o9)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (=> (not (< max_sum3 current_sum4))
  (= result____split_fields5 result____split_fields4)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (=> (not (< max_sum3 current_sum4)) (= max_sum4 max_sum3)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= hi4 (to_rep3 (last (rt x)))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= hi5 (mk_int__ref hi4)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= current_sum5 (mk_int__ref current_sum4)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= current_slice__split_fields6 (mk___split_fields__ref
                                  current_slice__split_fields5)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= result____split_fields6 (mk___split_fields__ref result____split_fields5)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= max_sum5 (mk_int__ref max_sum4)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= hi6 hi4))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= current_sum6 current_sum4))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= current_slice__split_fields7 current_slice__split_fields5))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= result____split_fields7 result____split_fields5))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= max_sum6 max_sum4))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= hi7 hi5))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= current_sum7 current_sum5))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= current_slice__split_fields8 current_slice__split_fields6))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= result____split_fields8 result____split_fields6))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= max_sum7 max_sum5))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= hi8 hi6))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= current_sum8 current_sum6))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= current_slice__split_fields9 current_slice__split_fields7))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= result____split_fields9 result____split_fields7))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x)))))
  (= max_sum8 max_sum6))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x))))))
  (= hi7 (mk_int__ref hi3)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x))))))
  (= current_sum7 (mk_int__ref current_sum2)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x))))))
  (= current_slice__split_fields8 (mk___split_fields__ref
                                  current_slice__split_fields3)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x))))))
  (= result____split_fields8 (mk___split_fields__ref result____split_fields3)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x))))))
  (= max_sum7 (mk_int__ref max_sum2)))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x))))))
  (= hi8 hi3))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x))))))
  (= current_sum8 current_sum2))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x))))))
  (= current_slice__split_fields9 current_slice__split_fields3))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x))))))
  (= result____split_fields9 result____split_fields3))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) hi3) (<= hi3 (to_rep3 (last (rt x))))))
  (= max_sum8 max_sum2))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= lo2 (to_rep3 (last (rt x))))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= hi9 hi7)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= lo3 (mk_int__ref lo2))))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= current_sum9 current_sum7)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= current_slice__split_fields10 current_slice__split_fields8)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= result____split_fields10 result____split_fields8)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= max_sum9 max_sum7)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= hi10 hi8)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= lo4 lo2)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= current_sum10 current_sum8)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= current_slice__split_fields11 current_slice__split_fields9)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= result____split_fields11 result____split_fields9)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= max_sum10 max_sum8)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= hi11 hi9)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= lo5 lo3)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= current_sum11 current_sum9)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= current_slice__split_fields12 current_slice__split_fields10)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= result____split_fields12 result____split_fields10)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= max_sum11 max_sum9)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= hi12 hi10)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= lo6 lo4)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= current_sum12 current_sum10)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= current_slice__split_fields13 current_slice__split_fields11)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= result____split_fields13 result____split_fields11)))

;; H
  (assert
  (=>
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x)))))
  (= max_sum12 max_sum10)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= hi11 (mk_int__ref hi))))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= lo5 (mk_int__ref lo1))))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= current_sum11 (mk_int__ref current_sum))))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= current_slice__split_fields12 (mk___split_fields__ref
                                   (mk___split_fields
                                   current_slice__split_fields
                                   current_slice__split_fields1)))))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= result____split_fields12 (mk___split_fields__ref
                              result____split_fields2))))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= max_sum11 (mk_int__ref max_sum1))))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= hi12 hi1)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= lo6 lo1)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= current_sum12 current_sum1)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= current_slice__split_fields13 current_slice__split_fields2)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= result____split_fields13 result____split_fields2)))

;; H
  (assert
  (=>
  (not
  (and (<= (to_rep3 (first (rt x))) lo1) (<= lo1 (to_rep3 (last (rt x))))))
  (= max_sum12 max_sum1)))

;; H
  (assert
  (= slice_sums__maximal_sum_slice_bounds__result3 (mk_slice_bounds__ref
                                                   slice_sums__maximal_sum_slice_bounds__result2)))

;; H
  (assert
  (= slice_sums__maximal_sum_slice_bounds__result4 slice_sums__maximal_sum_slice_bounds__result2))

;; H
  (assert
  (= result8 (mk_slice_bounds__ref
             (mk_slice_bounds
             (mk___split_fields slice_sums__maximal_sum_slice_bounds__result
             slice_sums__maximal_sum_slice_bounds__result1)))))

;; H
  (assert
  (= slice_sums__maximal_sum_slice_bounds__result2 (mk_slice_bounds
                                                   (us_split_fields__content
                                                   result____split_fields12))))

;; H
  (assert
  (= slice_sums__maximal_sum_slice_bounds__result5 slice_sums__maximal_sum_slice_bounds__result3))

;; H
  (assert (= hi13 hi11))

;; H
  (assert (= lo7 lo5))

;; H
  (assert (= current_sum13 current_sum11))

;; H
  (assert (= current_slice__split_fields14 current_slice__split_fields12))

;; H
  (assert (= result____split_fields14 result____split_fields12))

;; H
  (assert (= max_sum13 max_sum11))

;; H
  (assert
  (= slice_sums__maximal_sum_slice_bounds__result6 slice_sums__maximal_sum_slice_bounds__result4))

;; H
  (assert (= hi14 hi12))

;; H
  (assert (= lo8 lo6))

;; H
  (assert (= current_sum14 current_sum12))

;; H
  (assert (= current_slice__split_fields15 current_slice__split_fields13))

;; H
  (assert (= result____split_fields15 result____split_fields13))

;; H
  (assert (= max_sum14 max_sum12))

;; H
  (assert
  (<= (to_rep
      (rec__sums__slice_bounds__lo
      (us_split_fields1
      (slice_bounds__content slice_sums__maximal_sum_slice_bounds__result5))))
  (to_rep1
  (rec__sums__slice_bounds__hi
  (us_split_fields1
  (slice_bounds__content slice_sums__maximal_sum_slice_bounds__result5))))))

;; H
  (assert
  (=>
  (<= (to_rep3 (first (rt x))) (to_rep
                               (rec__sums__slice_bounds__lo
                               (us_split_fields1
                               (slice_bounds__content
                               slice_sums__maximal_sum_slice_bounds__result5)))))
  (= result10 (ite (<= (to_rep1
                       (rec__sums__slice_bounds__hi
                       (us_split_fields1
                       (slice_bounds__content
                       slice_sums__maximal_sum_slice_bounds__result5))))
              (to_rep3 (last (rt x)))) true false))))

;; H
  (assert
  (=>
  (not
  (<= (to_rep3 (first (rt x))) (to_rep
                               (rec__sums__slice_bounds__lo
                               (us_split_fields1
                               (slice_bounds__content
                               slice_sums__maximal_sum_slice_bounds__result5))))))
  (= result10 false)))

;; H
  (assert
  (=> (= result10 true)
  (= (= result9 true)
  (forall ((lo9 Int))
  (=>
  (and (<= (to_rep3 (first (rt x))) lo9) (<= lo9 (to_rep3 (last (rt x)))))
  (forall ((hi15 Int))
  (=>
  (and (<= (to_rep3 (first (rt x))) hi15) (<= hi15 (to_rep3 (last (rt x)))))
  (<= (sum__logic x
      (mk_slice_bounds (mk___split_fields (of_rep lo9) (of_rep1 hi15))))
  (sum__logic x
  (slice_bounds__content slice_sums__maximal_sum_slice_bounds__result5))))))))))

;; H
  (assert (=> (not (= result10 true)) (= result9 false)))

;; H
  (assert (= result9 true))

(assert
;; WP_parameter_def
 ;; File "sums.ads", line 12, characters 0-0
  (not
  (or
  (< (to_rep1
     (rec__sums__slice_bounds__hi
     (us_split_fields1
     (slice_bounds__content slice_sums__maximal_sum_slice_bounds__result5))))
  (to_rep
  (rec__sums__slice_bounds__lo
  (us_split_fields1
  (slice_bounds__content slice_sums__maximal_sum_slice_bounds__result5)))))
  (and
  (<= (to_rep3 (first (rt x))) (to_rep
                               (rec__sums__slice_bounds__lo
                               (us_split_fields1
                               (slice_bounds__content
                               slice_sums__maximal_sum_slice_bounds__result5)))))
  (<= (to_rep1
      (rec__sums__slice_bounds__hi
      (us_split_fields1
      (slice_bounds__content slice_sums__maximal_sum_slice_bounds__result5))))
  (to_rep3 (last (rt x))))))))
(check-sat)
(exit)
