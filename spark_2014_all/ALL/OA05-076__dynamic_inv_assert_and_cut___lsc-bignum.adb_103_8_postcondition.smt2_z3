;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2int x)
                                            (- (- 4294967296 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort word32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 32))

(declare-fun user_eq (word32 word32) Bool)

(declare-const dummy word32)

(declare-datatypes ()
((word32__ref (mk_word32__ref (word32__content word32)))))
(define-fun word32__ref___projection ((a word32__ref)) word32 (word32__content
                                                              a))

(define-fun dynamic_invariant ((temp___expr_217 (_ BitVec 32))
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)) Bool true)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((math_int__ref (mk_math_int__ref (math_int__content us_rep)))))
(define-fun math_int__ref___projection ((a math_int__ref)) us_rep (math_int__content
                                                                  a))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; oeq__post_axiom
  (assert true)

(declare-fun from_word32 ((_ BitVec 32)) us_rep)

(declare-fun from_word32__function_guard (us_rep (_ BitVec 32)) Bool)

;; from_word32__post_axiom
  (assert true)

(declare-fun num_of_boolean (Bool) us_rep)

(declare-fun num_of_boolean__function_guard (us_rep Bool) Bool)

;; num_of_boolean__post_axiom
  (assert true)

(declare-const b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const result__ (_ BitVec 32))

(declare-const lsc__bignum__word_of_boolean__result (_ BitVec 32))

(declare-const result (_ BitVec 32))

(declare-const result__1 (_ BitVec 32))

(declare-const result1 (_ BitVec 32))

(declare-const result__2 (_ BitVec 32))

(declare-const result2 (_ BitVec 32))

(declare-const lsc__bignum__word_of_boolean__result1 (_ BitVec 32))

(declare-const lsc__bignum__word_of_boolean__result2 (_ BitVec 32))

(declare-const lsc__bignum__word_of_boolean__result3 (_ BitVec 32))

(declare-const result__3 (_ BitVec 32))

(declare-const lsc__bignum__word_of_boolean__result4 (_ BitVec 32))

(declare-const result__4 (_ BitVec 32))

(declare-const lsc__bignum__word_of_boolean__result5 (_ BitVec 32))

(declare-const result3 (_ BitVec 32))

;; H
  (assert true)

;; H
  (assert (=> (= b true) (= result result__)))

;; H
  (assert (=> (= b true) (= result__1 ((_ int2bv 32) 1))))

;; H
  (assert (=> (not (= b true)) (= result1 result__)))

;; H
  (assert (=> (not (= b true)) (= result__2 ((_ int2bv 32) 0))))

;; H
  (assert (=> (not (= b true)) (= result__1 result__2)))

;; H
  (assert
  (= lsc__bignum__word_of_boolean__result1 lsc__bignum__word_of_boolean__result2))

;; H
  (assert
  (= lsc__bignum__word_of_boolean__result3 lsc__bignum__word_of_boolean__result1))

;; H
  (assert (= result2 lsc__bignum__word_of_boolean__result))

;; H
  (assert (= lsc__bignum__word_of_boolean__result1 result__1))

;; H
  (assert
  (= (mk_t__ref lsc__bignum__word_of_boolean__result4) (mk_t__ref
                                                       lsc__bignum__word_of_boolean__result2)))

;; H
  (assert (= result__3 result__1))

;; H
  (assert
  (= lsc__bignum__word_of_boolean__result5 lsc__bignum__word_of_boolean__result3))

;; H
  (assert (= result__4 result__1))

;; H
  (assert (= result3 lsc__bignum__word_of_boolean__result4))

(assert
;; WP_parameter_def
 ;; File "lsc-types.ads", line 54, characters 0-0
  (not
  (= (oeq (from_word32 lsc__bignum__word_of_boolean__result4)
     (num_of_boolean b)) true)))
(check-sat)
(exit)
