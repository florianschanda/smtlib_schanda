(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__p1__t1__d : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__p1__t1__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p1__t1 : us_main_type
}

function us_split_fields_T1__projection(a: us_split_fields) : us_main_type =
  (a).rec__p1__t1

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq : us_rep, us_rep -> bool

axiom bool_eq_def :
  (forall a:us_rep. forall b:us_rep [bool_eq(a, b)].
  ((((((a).us_split_discrs1).rec__p1__t1__d = ((b).us_split_discrs1).rec__p1__t1__d) and
  (us_main_eq(((a).us_split_fields1).rec__p1__t1,
  ((b).us_split_fields1).rec__p1__t1) = true)) -> (bool_eq(a, b) = true)) and
  ((not ((((a).us_split_discrs1).rec__p1__t1__d = ((b).us_split_discrs1).rec__p1__t1__d) and
  (us_main_eq(((a).us_split_fields1).rec__p1__t1,
  ((b).us_split_fields1).rec__p1__t1) = true))) -> (bool_eq(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:bool. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__p1__t1__d = a }; us_split_fields1 = {
  rec__p1__t1 = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:bool. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__p1__t1__d = a }; us_split_fields1 = {
  rec__p1__t1 = a1 } })))

logic p1__t1__d__first__bit : int

logic p1__t1__d__last__bit : int

logic p1__t1__d__position : int

axiom p1__t1__d__first__bit_axiom : (0 <= p1__t1__d__first__bit)

axiom p1__t1__d__last__bit_axiom :
  (p1__t1__d__first__bit <  p1__t1__d__last__bit)

axiom p1__t1__d__position_axiom : (0 <= p1__t1__d__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : bool

logic dummy1 : us_main_type

type t1__ref = { t1__content : us_rep
}

function t1__ref___projection(a: t1__ref) : us_rep = (a).t1__content

logic always_true : us_rep, us_rep -> bool

logic always_true__function_guard : bool, us_rep, us_rep -> prop

axiom always_true__post_axiom :
  (forall x:bool. forall x1:us_main_type. forall y:bool.
  forall y1:us_main_type [always_true({ us_split_discrs1 = { rec__p1__t1__d =
  x }; us_split_fields1 = { rec__p1__t1 = x1 } }, { us_split_discrs1 = {
  rec__p1__t1__d = y }; us_split_fields1 = { rec__p1__t1 = y1 } })].
  ((always_true({ us_split_discrs1 = { rec__p1__t1__d = x };
  us_split_fields1 = { rec__p1__t1 = x1 } }, { us_split_discrs1 = {
  rec__p1__t1__d = y }; us_split_fields1 = { rec__p1__t1 = y1 }
  }) = true) and (((x = true) <-> (y = true)) -> (bool_eq({
  us_split_discrs1 = { rec__p1__t1__d = x }; us_split_fields1 = {
  rec__p1__t1 = x1 } }, { us_split_discrs1 = { rec__p1__t1__d = y };
  us_split_fields1 = { rec__p1__t1 = y1 } }) = true))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_discrs2 = { rec__p2__t2__d : bool
}

function us_split_discrs_2__projection(a: us_split_discrs2) : bool =
  (a).rec__p2__t2__d

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref_2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__p2__t2 : us_main_type1
}

function us_split_fields_T2__projection(a: us_split_fields2) : us_main_type1 =
  (a).rec__p2__t2

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep_3__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep_4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq1 : us_rep1, us_rep1 -> bool

axiom bool_eq_def1 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq1(a, b)].
  ((((((a).us_split_discrs3).rec__p2__t2__d = ((b).us_split_discrs3).rec__p2__t2__d) and
  (us_main_eq1(((a).us_split_fields3).rec__p2__t2,
  ((b).us_split_fields3).rec__p2__t2) = true)) -> (bool_eq1(a,
  b) = true)) and
  ((not ((((a).us_split_discrs3).rec__p2__t2__d = ((b).us_split_discrs3).rec__p2__t2__d) and
  (us_main_eq1(((a).us_split_fields3).rec__p2__t2,
  ((b).us_split_fields3).rec__p2__t2) = true))) -> (bool_eq1(a,
  b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:us_main_type1. (0 <= object__size1({
  us_split_discrs3 = { rec__p2__t2__d = a }; us_split_fields3 = {
  rec__p2__t2 = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:us_main_type1. (0 <= object__alignment1({
  us_split_discrs3 = { rec__p2__t2__d = a }; us_split_fields3 = {
  rec__p2__t2 = a1 } })))

logic p2__t2__d__first__bit : int

logic p2__t2__d__last__bit : int

logic p2__t2__d__position : int

axiom p2__t2__d__first__bit_axiom : (0 <= p2__t2__d__first__bit)

axiom p2__t2__d__last__bit_axiom :
  (p2__t2__d__first__bit <  p2__t2__d__last__bit)

axiom p2__t2__d__position_axiom : (0 <= p2__t2__d__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy2 : bool

logic dummy3 : us_main_type1

type t2__ref = { t2__content : us_rep1
}

function t2__ref___projection(a: t2__ref) : us_rep1 = (a).t2__content

logic always_true1 : us_rep1, us_rep1 -> bool

logic always_true__function_guard1 : bool, us_rep1, us_rep1 -> prop

axiom always_true__post_axiom1 :
  (forall x:bool. forall x1:us_main_type1. forall y:bool.
  forall y1:us_main_type1 [always_true1({ us_split_discrs3 = {
  rec__p2__t2__d = x }; us_split_fields3 = { rec__p2__t2 = x1 } }, {
  us_split_discrs3 = { rec__p2__t2__d = y }; us_split_fields3 = {
  rec__p2__t2 = y1 } })]. ((always_true1({ us_split_discrs3 = {
  rec__p2__t2__d = x }; us_split_fields3 = { rec__p2__t2 = x1 } }, {
  us_split_discrs3 = { rec__p2__t2__d = y }; us_split_fields3 = {
  rec__p2__t2 = y1 } }) = true) and (not (bool_eq1({ us_split_discrs3 = {
  rec__p2__t2__d = x }; us_split_fields3 = { rec__p2__t2 = x1 } }, {
  us_split_discrs3 = { rec__p2__t2__d = y }; us_split_fields3 = {
  rec__p2__t2 = y1 } }) = true))))

logic x : bool

logic x1 : us_main_type

logic attr__ATTRIBUTE_ADDRESS : int

logic y : bool

logic y1 : us_main_type1

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "p2.ads", line 2, characters 0-0 *)
goal WP_parameter_def : ((always_true({ us_split_discrs1 = { rec__p1__t1__d =
  x }; us_split_fields1 = { rec__p1__t1 = x1 } }, { us_split_discrs1 = {
  rec__p1__t1__d = x }; us_split_fields1 = { rec__p1__t1 = x1 } }) = true) ->
  (always_true1({ us_split_discrs3 = { rec__p2__t2__d = y };
  us_split_fields3 = { rec__p2__t2 = y1 } }, { us_split_discrs3 = {
  rec__p2__t2__d = y }; us_split_fields3 = { rec__p2__t2 = y1 } }) = true))
