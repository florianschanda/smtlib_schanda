;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort i 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (i i) Bool)

(declare-const dummy1 i)

(declare-datatypes ((i__ref 0)) (((mk_i__ref (i__content i)))))
(define-fun i__ref___projection ((a i__ref)) i (i__content a))

(define-fun dynamic_invariant1 ((temp___expr_149 Int)
  (temp___is_init_146 Bool) (temp___skip_constant_147 Bool)
  (temp___do_toplevel_148 Bool)) Bool (=>
                                      (or (= temp___is_init_146 true)
                                      (<= 1 10)) (in_range1 temp___expr_149)))

(declare-sort m 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 7))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (m m) Bool)

(declare-const dummy2 m)

(declare-datatypes ((m__ref 0)) (((mk_m__ref (m__content m)))))
(define-fun m__ref___projection ((a m__ref)) m (m__content a))

(define-fun dynamic_invariant2 ((temp___expr_155 (_ BitVec 8))
  (temp___is_init_152 Bool) (temp___skip_constant_153 Bool)
  (temp___do_toplevel_154 Bool)) Bool (=>
                                      (or (= temp___is_init_152 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 7)))
                                      (in_range2 temp___expr_155)))

(declare-sort e 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (e e) Bool)

(declare-const dummy3 e)

(declare-datatypes ((e__ref 0)) (((mk_e__ref (e__content e)))))
(define-fun e__ref___projection ((a e__ref)) e (e__content a))

(define-fun dynamic_invariant3 ((temp___expr_161 Int)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)) Bool (=>
                                      (or (= temp___is_init_158 true)
                                      (<= 0 2)) (in_range3 temp___expr_161)))

(declare-sort map1 0)

(declare-datatypes ((map__ref 0)) (((mk_map__ref (map__content map1)))))
(declare-fun get (map1 Int (_ BitVec 8) Int) integer)

(declare-fun set (map1 Int (_ BitVec 8) Int integer) map1)

;; Select_eq
  (assert
  (forall ((m1 map1))
  (forall ((i1 Int))
  (forall ((j (_ BitVec 8)))
  (forall ((k Int))
  (forall ((a integer))
  (! (= (get (set m1 i1 j k a) i1 j k) a) :pattern ((set m1 i1 j k a)) )))))))

;; Select_neq
  (assert
  (forall ((m1 map1))
  (forall ((i1 Int) (i2 Int))
  (forall ((j (_ BitVec 8)) (j2 (_ BitVec 8)))
  (forall ((k Int) (k2 Int))
  (forall ((a integer))
  (! (=> (not (and (= i1 i2) (and (= j j2) (= k k2))))
     (= (get (set m1 i1 j k a) i2 j2 k2) (get m1 i2 j2 k2))) :pattern (
  (get (set m1 i1 j k a) i2 j2 k2)) :pattern ((set m1 i1 j k a)
  (get m1 i2 j2 k2)) )))))))

(declare-fun slide (map1 Int Int (_ BitVec 8) (_ BitVec 8) Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((old_first Int) (new_first Int))
  (forall ((old_first_2 (_ BitVec 8)) (new_first_2 (_ BitVec 8)))
  (forall ((old_first_3 Int) (new_first_3 Int))
  (forall ((i1 Int))
  (forall ((j (_ BitVec 8)))
  (forall ((k Int))
  (! (= (get
        (slide a old_first new_first old_first_2 new_first_2 old_first_3
        new_first_3) i1 j k) (get a (- i1 (- new_first old_first))
                             (bvsub j (bvsub new_first_2 old_first_2))
                             (- k (- new_first_3 old_first_3)))) :pattern (
  (get
  (slide a old_first new_first old_first_2 new_first_2 old_first_3
  new_first_3) i1 j k)) )))))))))

(define-fun bool_eq ((a map1) (a__first Int) (a__last Int)
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (a__first_3 Int)
  (a__last_3 Int) (b map1) (b__first Int) (b__last Int)
  (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8)) (b__first_3 Int)
  (b__last_3 Int)) Bool (ite (and
                             (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (bvule a__first_2 a__last_2)
                             (and (bvule b__first_2 b__last_2)
                             (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
                             (bvugt b__first_2 b__last_2)))
                             (ite (<= a__first_3 a__last_3)
                             (and (<= b__first_3 b__last_3)
                             (= (- a__last_3 a__first_3) (- b__last_3 b__first_3)))
                             (< b__last_3 b__first_3)))
                             (forall ((temp___idx_134 Int)
                             (temp___idx_136 Int))
                             (forall ((temp___idx_135 (_ BitVec 8)))
                             (=>
                             (and
                             (and
                             (and (<= a__first temp___idx_134)
                             (<= temp___idx_134 a__last))
                             (and (bvule a__first_2 temp___idx_135)
                             (bvule temp___idx_135 a__last_2)))
                             (and (<= a__first_3 temp___idx_136)
                             (<= temp___idx_136 a__last_3)))
                             (= (to_rep
                                (get a temp___idx_134 temp___idx_135
                                temp___idx_136)) (to_rep
                                                 (get b
                                                 (+ (- b__first a__first) temp___idx_134)
                                                 (bvadd (bvsub b__first_2 a__first_2) temp___idx_135)
                                                 (+ (- b__first_3 a__first_3) temp___idx_136))))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_3 Int) (a__last_3 Int)
  (b__first Int) (b__last Int) (b__first_3 Int) (b__last_3 Int))
  (forall ((a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8))
  (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8)))
  (=>
  (= (bool_eq b b__first b__last b__first_2 b__last_2 b__first_3 b__last_3 a
     a__first a__last a__first_2 a__last_2 a__first_3 a__last_3) true)
  (and
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (bvule a__first_2 a__last_2)
  (and (bvule b__first_2 b__last_2)
  (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
  (bvugt b__first_2 b__last_2)))
  (ite (<= a__first_3 a__last_3)
  (and (<= b__first_3 b__last_3)
  (= (- a__last_3 a__first_3) (- b__last_3 b__first_3)))
  (< b__last_3 b__first_3)))
  (forall ((temp___idx_134 Int) (temp___idx_136 Int))
  (forall ((temp___idx_135 (_ BitVec 8)))
  (=>
  (and
  (and (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (and (bvule a__first_2 temp___idx_135) (bvule temp___idx_135 a__last_2)))
  (and (<= a__first_3 temp___idx_136) (<= temp___idx_136 a__last_3)))
  (= (to_rep (get a temp___idx_134 temp___idx_135 temp___idx_136)) (to_rep
                                                                   (get b
                                                                   (+ (- b__first a__first) temp___idx_134)
                                                                   (bvadd (bvsub b__first_2 a__first_2) temp___idx_135)
                                                                   (+ (- b__first_3 a__first_3) temp___idx_136)))))))))))))

(declare-const a_3d_arr map1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun update_logic_fn__a_3d_arr__aggregate_def (Int) map1)

;; def_axiom
  (assert
  (forall ((temp___142 Int))
  (forall ((temp___143 Int) (temp___145 Int))
  (forall ((temp___144 (_ BitVec 8)))
  (= (get (update_logic_fn__a_3d_arr__aggregate_def temp___142) temp___143
     temp___144 temp___145) (of_rep temp___142))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const x Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const y (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const z Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const v1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const v2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun temp___254 (map1 Int (_ BitVec 8) Int Int Int (_ BitVec 8) Int
  Int) map1)

;; def_axiom
  (assert
  (forall ((temp___256 map1))
  (forall ((temp___257 Int) (temp___259 Int) (temp___260 Int)
  (temp___261 Int) (temp___263 Int) (temp___264 Int))
  (forall ((temp___258 (_ BitVec 8)) (temp___262 (_ BitVec 8)))
  (let ((temp___255 (temp___254 temp___256 temp___257 temp___258 temp___259
                    temp___260 temp___261 temp___262 temp___263 temp___264)))
  (forall ((temp___265 Int) (temp___267 Int))
  (forall ((temp___266 (_ BitVec 8)))
  (ite (and (and (= temp___265 temp___261) (= temp___266 temp___262))
       (= temp___267 temp___263))
  (= (get temp___255 temp___265 temp___266 temp___267) (of_rep temp___264))
  (ite (and (and (= temp___265 temp___257) (= temp___266 temp___258))
       (= temp___267 temp___259))
  (= (get temp___255 temp___265 temp___266 temp___267) (of_rep temp___260))
  (= (get temp___255 temp___265 temp___266 temp___267) (get temp___256
                                                       temp___265 temp___266
                                                       temp___267)))))))))))

(declare-fun temp___268 (Int) map1)

;; def_axiom
  (assert
  (forall ((temp___270 Int))
  (forall ((temp___271 Int) (temp___273 Int))
  (forall ((temp___272 (_ BitVec 8)))
  (= (get (temp___268 temp___270) temp___271 temp___272 temp___273) (of_rep
                                                                    temp___270))))))

;; a_3d_arr__def_axiom
  (assert (= a_3d_arr (update_logic_fn__a_3d_arr__aggregate_def 1000)))

(declare-const a map1)

(declare-const o integer)

(declare-const o1 map1)

(declare-const o2 integer)

(declare-const o3 map1)

(declare-const result map1)

(declare-const a1 map1)

(declare-const result1 map1)

(declare-const a2 map1)

(declare-const result2 map1)

(declare-const a3 map1)

(declare-const a4 map1)

(declare-const a5 map1)

;; H
  (assert (= (update_logic_fn__a_3d_arr__aggregate_def 1000) a_3d_arr))

;; H
  (assert (in_range1 x))

;; H
  (assert (in_range2 y))

;; H
  (assert (in_range3 z))

;; H
  (assert (in_range v1))

;; H
  (assert (in_range v2))

;; H
  (assert (= result a))

;; H
  (assert (= a1 a_3d_arr))

;; H
  (assert (= (to_rep o) v1))

;; H
  (assert (= o1 (set a1 5 ((_ int2bv 8) 7) 1 o)))

;; H
  (assert (= result1 a1))

;; H
  (assert (= a2 o1))

;; H
  (assert (= (to_rep o2) v2))

;; H
  (assert (= o3 (set a2 x y z o2)))

;; H
  (assert (= result2 a2))

;; H
  (assert (= a3 o3))

;; H
  (assert (= a3 a4))

;; H
  (assert (= a5 a3))

(assert
;; WP_parameter_def
 ;; File "update_logic_fn.ads", line 63, characters 0-0
  (not
  (= (bool_eq a4 1 10 ((_ int2bv 8) 0) ((_ int2bv 8) 7) 0 2
     (temp___254 (temp___268 1000) 5 ((_ int2bv 8) 7) 1 v1 x y 2 v2) 1 10
     ((_ int2bv 8) 0) ((_ int2bv 8) 7) 0 2) true)))
(check-sat)
(exit)
