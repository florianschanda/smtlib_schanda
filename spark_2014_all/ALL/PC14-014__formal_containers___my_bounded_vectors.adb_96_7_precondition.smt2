;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-sort index_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (index_type index_type) Bool)

(declare-const dummy2 index_type)

(declare-datatypes ((index_type__ref 0))
(((mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type
  (index_type__content a))

(declare-sort extended_index 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 11)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (extended_index extended_index) Bool)

(declare-const dummy3 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(declare-sort capacity_range 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (capacity_range capacity_range) Bool)

(declare-const dummy4 capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__my_vectors__v__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range
  (rec__my_vectors__v__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__my_vectors__v__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields)) us_main_type
  (rec__my_vectors__v__vector a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const my_vectors__v__vector__capacity__first__bit Int)

(declare-const my_vectors__v__vector__capacity__last__bit Int)

(declare-const my_vectors__v__vector__capacity__position Int)

;; my_vectors__v__vector__capacity__first__bit_axiom
  (assert (<= 0 my_vectors__v__vector__capacity__first__bit))

;; my_vectors__v__vector__capacity__last__bit_axiom
  (assert
  (< my_vectors__v__vector__capacity__first__bit my_vectors__v__vector__capacity__last__bit))

;; my_vectors__v__vector__capacity__position_axiom
  (assert (<= 0 my_vectors__v__vector__capacity__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((vector__ref 0))
(((mk_vector__ref (vector__content us_rep)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep (vector__content
                                                              a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant1 ((temp___expr_226 Int)
  (temp___is_init_223 Bool) (temp___skip_constant_224 Bool)
  (temp___do_toplevel_225 Bool)) Bool (=>
                                      (or (= temp___is_init_223 true)
                                      (<= 0 10)) (in_range5 temp___expr_226)))

(declare-fun to_rep (capacity_range) Int)

(declare-fun of_rep (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range5
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(define-fun capacity ((container us_rep)) Int (ite (= (of_int 0) true)
                                              (to_rep
                                              (rec__my_vectors__v__vector__capacity
                                              (us_split_discrs1 container)))
                                              10))

(declare-fun capacity__function_guard (Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant1 result true
     false true))) :pattern ((length container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep1)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep1 (sequence__content
                                                                   a))

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(declare-fun model__ (us_rep) us_rep1)

(declare-fun model____function_guard (us_rep1 us_rep) Bool)

(define-fun last_index ((container us_rep)) Int (last (model__ container)))

(declare-fun last_index__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant2 ((temp___expr_220 Int)
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool (=>
                                      (or (= temp___is_init_217 true)
                                      (<= 0 11)) (in_range4 temp___expr_220)))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(define-fun oeq ((left us_rep1)
  (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun copy (us_rep Int) us_rep)

(declare-fun copy__function_guard (us_rep us_rep Int) Bool)

;; copy__post_axiom
  (assert
  (forall ((source us_rep))
  (forall ((capacity1 Int))
  (! (=>
     (and (dynamic_invariant1 capacity1 true true true)
     (=> (= (of_int 0) true)
     (or (= capacity1 0) (<= (length source) capacity1))))
     (let ((result (copy source capacity1)))
     (and (= (oeq (model__ result) (model__ source)) true)
     (ite (= capacity1 0)
     (= (to_rep
        (rec__my_vectors__v__vector__capacity (us_split_discrs1 result)))
     (length source))
     (= (to_rep
        (rec__my_vectors__v__vector__capacity (us_split_discrs1 result))) capacity1))))) :pattern (
  (copy source capacity1)) ))))

(define-fun equal_except ((left us_rep1) (right us_rep1)
  (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (=
                                                                    (get left
                                                                    i)
                                                                    (get
                                                                    right i)))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep1 us_rep1 Int) Bool)

(declare-fun first_index__function_guard (Int us_rep) Bool)

(define-fun range_equal ((left us_rep1) (right us_rep1) (fst Int)
  (lst Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (= (get left i) (get right i))))
                  true false))

(declare-fun range_equal__function_guard (Bool us_rep1 us_rep1 Int Int) Bool)

(define-fun range_shifted ((left us_rep1) (right us_rep1) (fst Int) (lst Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst i) (<= i lst))
                               (= (get left i) (get right (+ i offset)))))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst offset) i)
                                           (<= i (+ lst offset)))
                                           (= (get left (- i offset))
                                           (get right i))))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep1 us_rep1 Int Int
  Int) Bool)

(define-fun constant_range ((container us_rep1) (fst Int) (lst Int)
  (item Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (= (get container i) item)))
                   true false))

(declare-fun constant_range__function_guard (Bool us_rep1 Int Int Int) Bool)

(define-fun olt ((left us_rep1)
  (right us_rep1)) Bool (and (< (length1 left) (length1 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun olt__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun ole ((left us_rep1)
  (right us_rep1)) Bool (and (<= (length1 left) (length1 right)) (ite
                                                                 (forall
                                                                 ((n Int))
                                                                 (=>
                                                                 (and
                                                                 (<= 1 n)
                                                                 (<= n
                                                                 (last left)))
                                                                 (= (get left
                                                                    n)
                                                                 (get right
                                                                 n)))) true
                                                                 false)))

(declare-fun ole__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun m_elements_reversed ((left us_rep1)
  (right us_rep1)) Bool (and (and (= (length1 left) (length1 right))
  (ite (forall ((i Int))
       (=> (and (<= 1 i) (<= i (last left)))
       (= (get left i) (get right (+ (- (last left) i) 1)))))
  true false)) (ite (forall ((i Int))
                    (=> (and (<= 1 i) (<= i (last right)))
                    (= (get right i) (get left (+ (- (last left) i) 1)))))
               true false)))

(declare-fun m_elements_reversed__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun equal_except__2 ((left us_rep1) (right us_rep1) (x Int)
  (y Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall
                                                             ((i Int))
                                                             (=>
                                                             (and (<= 1 i)
                                                             (<= i (last
                                                                   left)))
                                                             (=>
                                                             (and
                                                             (not (= i x))
                                                             (not (= i y)))
                                                             (= (get left i)
                                                             (get right i)))))
                                                        true false)))

(declare-fun equal_except__2__function_guard (Bool us_rep1 us_rep1 Int
  Int) Bool)

(define-fun m_elements_swapped ((left us_rep1) (right us_rep1) (x Int)
  (y Int)) Bool (and (and (and (= (length1 left) (length1 right)) (=
  (get left x) (get right y))) (= (get left y) (get right x))) (equal_except__2
                                                               left right x
                                                               y)))

(declare-fun m_elements_swapped__function_guard (Bool us_rep1 us_rep1 Int
  Int) Bool)

(declare-fun find_index (us_rep Int Int) Int)

(declare-fun find_index__function_guard (Int us_rep Int Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_208 Int)
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (<= 1 10)) (in_range3 temp___expr_208)))

(declare-sort element_type 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (element_type element_type) Bool)

(declare-const dummy7 element_type)

(declare-datatypes ((element_type__ref 0))
(((mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant4 ((temp___expr_214 Int)
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (<= 1 2147483647)) (in_range6
                                      temp___expr_214)))

(define-fun contains ((container us_rep1) (fst Int) (lst Int)
  (item Int)) Bool (ite (exists ((i Int))
                        (and (and (<= fst i) (<= i lst))
                        (= (get container i) item)))
                   true false))

(declare-fun contains__function_guard (Bool us_rep1 Int Int Int) Bool)

;; find_index__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int) (index Int))
  (! (=>
     (and (dynamic_invariant4 item true true true) (dynamic_invariant3 index
     true true true))
     (let ((result (find_index container item index)))
     (and
     (ite (or (< (last_index container) index)
          (not
          (= (contains (model__ container) index (last_index container) item) true)))
     (= result 0)
     (and
     (and (and (<= index result) (<= result (last_index container)))
     (= (get (model__ container) result) item))
     (not (= (contains (model__ container) index (- result 1) item) true))))
     (dynamic_invariant2 result true false true)))) :pattern ((find_index
                                                              container item
                                                              index)) ))))

(declare-fun reverse_find_index (us_rep Int Int) Int)

(declare-fun reverse_find_index__function_guard (Int us_rep Int Int) Bool)

;; reverse_find_index__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int) (index Int))
  (! (=>
     (and (dynamic_invariant4 item true true true) (dynamic_invariant3 index
     true true true))
     (let ((result (reverse_find_index container item index)))
     (and
     (ite (not
          (= (contains (model__ container) 1
             (ite (<= index (last_index container)) index
             (last_index container)) item) true))
     (= result 0)
     (and
     (and
     (and (and (<= 1 result) (<= result index))
     (<= result (last_index container)))
     (= (get (model__ container) result) item))
     (not
     (= (contains (model__ container) (+ result 1)
        (ite (<= index (last_index container)) index (last_index container))
        item) true))))
     (dynamic_invariant2 result true false true)))) :pattern ((reverse_find_index
                                                              container item
                                                              index)) ))))

(declare-fun is_sorted (us_rep) Bool)

(declare-fun is_sorted__function_guard (Bool us_rep) Bool)

(define-fun m_elements_sorted ((container us_rep1)) Bool (ite (forall
                                                              ((i Int))
                                                              (=>
                                                              (and (<= 1 i)
                                                              (<= i (last
                                                                    container)))
                                                              (forall
                                                              ((j Int))
                                                              (=>
                                                              (and (<= i j)
                                                              (<= j (last
                                                                    container)))
                                                              (or
                                                              (= (get
                                                                 container i)
                                                              (get container
                                                              j))
                                                              (< (get
                                                                 container i)
                                                              (get container
                                                              j)))))))
                                                         true false))

(declare-fun m_elements_sorted__function_guard (Bool us_rep1) Bool)

;; is_sorted__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_sorted container) true)
     (= (m_elements_sorted (model__ container)) true)) :pattern ((is_sorted
                                                                 container)) )))

(define-fun m_elements_included ((left us_rep1) (l_fst Int) (l_lst Int)
  (right us_rep1) (r_fst Int)
  (r_lst Int)) Bool (ite (forall ((i Int))
                         (=> (and (<= l_fst i) (<= i l_lst))
                         (exists ((j Int))
                         (and (and (<= r_fst j) (<= j r_lst))
                         (= (get left i) (get right j))))))
                    true false))

(declare-fun m_elements_included__function_guard (Bool us_rep1 Int Int
  us_rep1 Int Int) Bool)

(define-fun m_elements_in_union ((container us_rep1) (left us_rep1)
  (right us_rep1)) Bool (ite (forall ((i Int))
                             (=> (and (<= 1 i) (<= i (last container)))
                             (or
                             (exists ((j Int))
                             (and (and (<= 1 j) (<= j (last left)))
                             (= (get container i) (get left j))))
                             (exists ((j Int))
                             (and (and (<= 1 j) (<= j (last right)))
                             (= (get container i) (get right j)))))))
                        true false))

(declare-fun m_elements_in_union__function_guard (Bool us_rep1 us_rep1
  us_rep1) Bool)

(define-fun in_range7 ((rec__my_vectors__v__vector__capacity1 Int)
  (a us_rep)) Bool (= rec__my_vectors__v__vector__capacity1 (to_rep
                                                            (rec__my_vectors__v__vector__capacity
                                                            (us_split_discrs1
                                                            a)))))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const my_vectors__v__vector__capacity__first__bit1 Int)

(declare-const my_vectors__v__vector__capacity__last__bit1 Int)

(declare-const my_vectors__v__vector__capacity__position1 Int)

;; my_vectors__v__vector__capacity__first__bit_axiom
  (assert (<= 0 my_vectors__v__vector__capacity__first__bit1))

;; my_vectors__v__vector__capacity__last__bit_axiom
  (assert
  (< my_vectors__v__vector__capacity__first__bit1 my_vectors__v__vector__capacity__last__bit1))

;; my_vectors__v__vector__capacity__position_axiom
  (assert (<= 0 my_vectors__v__vector__capacity__position1))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((tlS__ref 0)) (((mk_tlS__ref (tlS__content us_rep)))))
(define-fun tlS__ref___projection ((a tlS__ref)) us_rep (tlS__content a))

(define-fun dynamic_invariant5 ((temp___expr_832 us_rep)
  (temp___is_init_829 Bool) (temp___skip_constant_830 Bool)
  (temp___do_toplevel_831 Bool)) Bool (=>
                                      (not (= temp___skip_constant_830 true))
                                      (in_range7 10 temp___expr_832)))

(define-fun default_initial_assumption ((temp___expr_834 us_rep)
  (temp___skip_top_level_835 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_vectors__v__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_834))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_835 true))
                                         (= (is_empty temp___expr_834) true))))

(declare-const l__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range8 ((rec__my_vectors__v__vector__capacity1 Int)
  (a us_rep)) Bool (= rec__my_vectors__v__vector__capacity1 (to_rep
                                                            (rec__my_vectors__v__vector__capacity
                                                            (us_split_discrs1
                                                            a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-const my_vectors__v__vector__capacity__first__bit2 Int)

(declare-const my_vectors__v__vector__capacity__last__bit2 Int)

(declare-const my_vectors__v__vector__capacity__position2 Int)

;; my_vectors__v__vector__capacity__first__bit_axiom
  (assert (<= 0 my_vectors__v__vector__capacity__first__bit2))

;; my_vectors__v__vector__capacity__last__bit_axiom
  (assert
  (< my_vectors__v__vector__capacity__first__bit2 my_vectors__v__vector__capacity__last__bit2))

;; my_vectors__v__vector__capacity__position_axiom
  (assert (<= 0 my_vectors__v__vector__capacity__position2))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((tkS__ref 0)) (((mk_tkS__ref (tkS__content us_rep)))))
(define-fun tkS__ref___projection ((a tkS__ref)) us_rep (tkS__content a))

(define-fun dynamic_invariant6 ((temp___expr_841 us_rep)
  (temp___is_init_838 Bool) (temp___skip_constant_839 Bool)
  (temp___do_toplevel_840 Bool)) Bool (=>
                                      (not (= temp___skip_constant_839 true))
                                      (in_range8 10 temp___expr_841)))

(define-fun default_initial_assumption1 ((temp___expr_843 us_rep)
  (temp___skip_top_level_844 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_vectors__v__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_843))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_844 true))
                                         (= (is_empty temp___expr_843) true))))

(declare-const k__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const i__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant7 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort count_type 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (count_type count_type) Bool)

(declare-const dummy10 count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(define-fun dynamic_invariant8 ((temp___expr_160 Int)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (=>
                                      (or (= temp___is_init_157 true)
                                      (<= 0 2147483647)) (in_range9
                                      temp___expr_160)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq6 a b) (oeq a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_260 us_rep1)
  (temp___skip_top_level_261 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_261 true))
                                         (= (length1 temp___expr_260) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length1 (model__ container)) (length container)) :pattern ((model__
                                                                    container)) )))

(declare-sort extended_index1 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (extended_index1 extended_index1) Bool)

(declare-const dummy11 extended_index1)

(declare-datatypes ((extended_index__ref1 0))
(((mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref1)) extended_index1
  (extended_index__content1 a))

(define-fun dynamic_invariant9 ((temp___expr_253 Int)
  (temp___is_init_250 Bool) (temp___skip_constant_251 Bool)
  (temp___do_toplevel_252 Bool)) Bool (=>
                                      (or (= temp___is_init_250 true)
                                      (<= 0 10)) (in_range10
                                      temp___expr_253)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 10) (dynamic_invariant8 result true false true))) :pattern (
  (length1 container)) )))

(declare-sort element_type1 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (element_type1 element_type1) Bool)

(declare-const dummy12 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant10 ((temp___expr_247 Int)
  (temp___is_init_244 Bool) (temp___skip_constant_245 Bool)
  (temp___do_toplevel_246 Bool)) Bool (=>
                                      (or (= temp___is_init_244 true)
                                      (<= 1 2147483647)) (in_range11
                                      temp___expr_247)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant9 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant10 (get container position) true false true)) :pattern (
  (get container position)) ))))

(declare-const l__split_fields us_main_type)

(declare-const k__split_fields us_main_type)

(declare-const c Int)

(declare-const us Int)

(declare-const us1 Int)

(declare-const result Int)

(declare-const c1 Int)

(declare-const l__split_fields1 us_split_fields)

;; H
  (assert (and (= us 10) (in_range5 10)))

;; H
  (assert (default_initial_assumption
  (mk___rep l__split_discrs (mk___split_fields l__split_fields)) false))

;; H
  (assert
  (= 10 (to_rep (rec__my_vectors__v__vector__capacity l__split_discrs))))

;; H
  (assert (and (= us1 10) (in_range5 10)))

;; H
  (assert (default_initial_assumption1
  (mk___rep k__split_discrs (mk___split_fields k__split_fields)) false))

;; H
  (assert
  (= 10 (to_rep (rec__my_vectors__v__vector__capacity k__split_discrs))))

;; H
  (assert (= result c))

;; H
  (assert (= c1 0))

;; H
  (assert (in_range2 c1))

;; H
  (assert
  (and (= (length (mk___rep l__split_discrs l__split_fields1)) 10)
  (not (= (is_sorted (mk___rep l__split_discrs l__split_fields1)) true))))

;; H
  (assert (= (of_int 0) true))

(assert
;; WP_parameter_def
 ;; File "a-cofove.ads", line 855, characters 0-0
  (not
  (<= (length (mk___rep l__split_discrs l__split_fields1)) (to_rep
                                                           (rec__my_vectors__v__vector__capacity
                                                           k__split_discrs)))))
(check-sat)
(exit)
