;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort it1 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (it1 it1) Bool)

(declare-const dummy it1)

(declare-datatypes () ((it1__ref (mk_it1__ref (it1__content it1)))))
(define-fun it1__ref___projection ((a it1__ref)) it1 (it1__content a))

(define-fun dynamic_invariant ((temp___expr_152 Int)
  (temp___is_init_149 Bool) (temp___skip_constant_150 Bool)
  (temp___do_toplevel_151 Bool)) Bool (=>
                                      (or (= temp___is_init_149 true)
                                      (<= 1 10)) (in_range1 temp___expr_152)))

(declare-sort it2 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 5 x) (<= x 50)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (it2 it2) Bool)

(declare-const dummy1 it2)

(declare-datatypes () ((it2__ref (mk_it2__ref (it2__content it2)))))
(define-fun it2__ref___projection ((a it2__ref)) it2 (it2__content a))

(define-fun dynamic_invariant1 ((temp___expr_158 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)) Bool (=>
                                      (or (= temp___is_init_155 true)
                                      (<= 5 50)) (in_range2 temp___expr_158)))

(declare-sort et1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (et1 et1) Bool)

(declare-const dummy2 et1)

(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(define-fun dynamic_invariant2 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range3 temp___expr_176)))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int et1))))))
(declare-fun slide ((Array Int et1) Int Int) (Array Int et1))

;; slide_eq
  (assert
  (forall ((a (Array Int et1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int et1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int et1) Int Int (Array Int et1) Int
  Int) (Array Int et1))

;; concat_def
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (et1 Int) (Array Int et1))

;; singleton_def
  (assert
  (forall ((v et1))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int et1)) (a__first Int) (a__last Int)
  (b (Array Int et1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int et1) Int Int (Array Int et1) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int et1)) (b (Array Int et1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy3 (Array Int et1))

(declare-const value__size Int)

(declare-fun object__size ((Array Int et1)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int et1)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int et1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int et1))) (<= 0 (object__alignment a))))

(declare-fun user_eq3 ((Array Int et1) (Array Int et1)) Bool)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int et1)))))))
(declare-fun slide1 ((Array Int (Array Int et1)) Int
  Int) (Array Int (Array Int et1)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int et1))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int et1)) Int Int
  (Array Int (Array Int et1)) Int Int) (Array Int (Array Int et1)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int et1) Int) (Array Int (Array Int et1)))

;; singleton_def
  (assert
  (forall ((v (Array Int et1)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int (Array Int et1))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int et1))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (bool_eq (select a temp___idx_133) 1 10
                              (select b (+ (- b__first a__first) temp___idx_133))
                              1 10) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int et1))) (b (Array Int (Array Int et1))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (bool_eq (select a temp___idx_133) 1 10
     (select b (+ (- b__first a__first) temp___idx_133)) 1 10) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const j Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun temp___1068 ((Array Int (Array Int et1)) Int (Array Int et1) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1070 (Array Int (Array Int et1))))
  (forall ((temp___1071 Int) (temp___1073 Int))
  (forall ((temp___1072 (Array Int et1)) (temp___1074 (Array Int et1)))
  (let ((temp___1069 (temp___1068 temp___1070 temp___1071 temp___1072
                     temp___1073 temp___1074)))
  (forall ((temp___1075 Int))
  (ite (= temp___1075 temp___1073)
  (= (select temp___1069 temp___1075) temp___1074)
  (ite (= temp___1075 temp___1071)
  (= (select temp___1069 temp___1075) temp___1072)
  (= (select temp___1069 temp___1075) (select temp___1070 temp___1075))))))))))

(declare-fun temp___1076 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1078 (Array Int et1)))
  (forall ((temp___1079 Int) (temp___1080 Int))
  (let ((temp___1077 (temp___1076 temp___1078 temp___1079 temp___1080)))
  (forall ((temp___1081 Int))
  (ite (= temp___1081 temp___1079)
  (= (select temp___1077 temp___1081) (of_rep temp___1080))
  (= (select temp___1077 temp___1081) (select temp___1078 temp___1081))))))))

(declare-fun temp___1083 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1085 (Array Int et1)))
  (forall ((temp___1086 Int) (temp___1087 Int))
  (let ((temp___1084 (temp___1083 temp___1085 temp___1086 temp___1087)))
  (forall ((temp___1088 Int))
  (ite (= temp___1088 temp___1086)
  (= (select temp___1084 temp___1088) (of_rep temp___1087))
  (= (select temp___1084 temp___1088) (select temp___1085 temp___1088))))))))

(declare-fun temp___1091 ((Array Int (Array Int et1)) Int (Array Int et1) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1093 (Array Int (Array Int et1))))
  (forall ((temp___1094 Int) (temp___1096 Int))
  (forall ((temp___1095 (Array Int et1)) (temp___1097 (Array Int et1)))
  (let ((temp___1092 (temp___1091 temp___1093 temp___1094 temp___1095
                     temp___1096 temp___1097)))
  (forall ((temp___1098 Int))
  (ite (= temp___1098 temp___1096)
  (= (select temp___1092 temp___1098) temp___1097)
  (ite (= temp___1098 temp___1094)
  (= (select temp___1092 temp___1098) temp___1095)
  (= (select temp___1092 temp___1098) (select temp___1093 temp___1098))))))))))

(declare-fun temp___1099 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1101 (Array Int et1)))
  (forall ((temp___1102 Int) (temp___1103 Int))
  (let ((temp___1100 (temp___1099 temp___1101 temp___1102 temp___1103)))
  (forall ((temp___1104 Int))
  (ite (= temp___1104 temp___1102)
  (= (select temp___1100 temp___1104) (of_rep temp___1103))
  (= (select temp___1100 temp___1104) (select temp___1101 temp___1104))))))))

(declare-fun temp___1106 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1108 (Array Int et1)))
  (forall ((temp___1109 Int) (temp___1110 Int))
  (let ((temp___1107 (temp___1106 temp___1108 temp___1109 temp___1110)))
  (forall ((temp___1111 Int))
  (ite (= temp___1111 temp___1109)
  (= (select temp___1107 temp___1111) (of_rep temp___1110))
  (= (select temp___1107 temp___1111) (select temp___1108 temp___1111))))))))

(declare-fun temp___1114 ((Array Int (Array Int et1)) Int (Array Int et1) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1116 (Array Int (Array Int et1))))
  (forall ((temp___1117 Int) (temp___1119 Int))
  (forall ((temp___1118 (Array Int et1)) (temp___1120 (Array Int et1)))
  (let ((temp___1115 (temp___1114 temp___1116 temp___1117 temp___1118
                     temp___1119 temp___1120)))
  (forall ((temp___1121 Int))
  (ite (= temp___1121 temp___1119)
  (= (select temp___1115 temp___1121) temp___1120)
  (ite (= temp___1121 temp___1117)
  (= (select temp___1115 temp___1121) temp___1118)
  (= (select temp___1115 temp___1121) (select temp___1116 temp___1121))))))))))

(declare-fun temp___1122 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1124 (Array Int et1)))
  (forall ((temp___1125 Int) (temp___1126 Int))
  (let ((temp___1123 (temp___1122 temp___1124 temp___1125 temp___1126)))
  (forall ((temp___1127 Int))
  (ite (= temp___1127 temp___1125)
  (= (select temp___1123 temp___1127) (of_rep temp___1126))
  (= (select temp___1123 temp___1127) (select temp___1124 temp___1127))))))))

(declare-fun temp___1129 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1131 (Array Int et1)))
  (forall ((temp___1132 Int) (temp___1133 Int))
  (let ((temp___1130 (temp___1129 temp___1131 temp___1132 temp___1133)))
  (forall ((temp___1134 Int))
  (ite (= temp___1134 temp___1132)
  (= (select temp___1130 temp___1134) (of_rep temp___1133))
  (= (select temp___1130 temp___1134) (select temp___1131 temp___1134))))))))

(declare-fun temp___1137 ((Array Int (Array Int et1)) Int (Array Int et1) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___1139 (Array Int (Array Int et1))))
  (forall ((temp___1140 Int) (temp___1142 Int))
  (forall ((temp___1141 (Array Int et1)) (temp___1143 (Array Int et1)))
  (let ((temp___1138 (temp___1137 temp___1139 temp___1140 temp___1141
                     temp___1142 temp___1143)))
  (forall ((temp___1144 Int))
  (ite (= temp___1144 temp___1142)
  (= (select temp___1138 temp___1144) temp___1143)
  (ite (= temp___1144 temp___1140)
  (= (select temp___1138 temp___1144) temp___1141)
  (= (select temp___1138 temp___1144) (select temp___1139 temp___1144))))))))))

(declare-fun temp___1145 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1147 (Array Int et1)))
  (forall ((temp___1148 Int) (temp___1149 Int))
  (let ((temp___1146 (temp___1145 temp___1147 temp___1148 temp___1149)))
  (forall ((temp___1150 Int))
  (ite (= temp___1150 temp___1148)
  (= (select temp___1146 temp___1150) (of_rep temp___1149))
  (= (select temp___1146 temp___1150) (select temp___1147 temp___1150))))))))

(declare-fun temp___1152 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___1154 (Array Int et1)))
  (forall ((temp___1155 Int) (temp___1156 Int))
  (let ((temp___1153 (temp___1152 temp___1154 temp___1155 temp___1156)))
  (forall ((temp___1157 Int))
  (ite (= temp___1157 temp___1155)
  (= (select temp___1153 temp___1157) (of_rep temp___1156))
  (= (select temp___1153 temp___1157) (select temp___1154 temp___1157))))))))

(declare-fun temp___4717 ((Array Int (Array Int et1)) Int
  (Array Int et1)) (Array Int (Array Int et1)))

;; def_axiom
  (assert
  (forall ((temp___4719 (Array Int (Array Int et1))))
  (forall ((temp___4720 Int))
  (forall ((temp___4721 (Array Int et1)))
  (let ((temp___4718 (temp___4717 temp___4719 temp___4720 temp___4721)))
  (forall ((temp___4722 Int))
  (ite (= temp___4722 temp___4720)
  (= (select temp___4718 temp___4722) temp___4721)
  (= (select temp___4718 temp___4722) (select temp___4719 temp___4722)))))))))

(declare-fun temp___4723 ((Array Int et1) Int Int) (Array Int et1))

;; def_axiom
  (assert
  (forall ((temp___4725 (Array Int et1)))
  (forall ((temp___4726 Int) (temp___4727 Int))
  (let ((temp___4724 (temp___4723 temp___4725 temp___4726 temp___4727)))
  (forall ((temp___4728 Int))
  (ite (= temp___4728 temp___4726)
  (= (select temp___4724 temp___4728) (of_rep temp___4727))
  (= (select temp___4724 temp___4728) (select temp___4725 temp___4728))))))))

(declare-const a (Array Int (Array Int et1)))

(declare-const j_next Int)

(declare-const f Int)

(declare-const o Int)

(declare-const o1 et1)

(declare-const o2 (Array Int et1))

(declare-const o3 (Array Int (Array Int et1)))

(declare-const o4 Int)

(declare-const o5 (Array Int et1))

(declare-const o6 (Array Int et1))

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 (Array Int et1))

(declare-const o10 (Array Int et1))

(declare-const o11 Int)

(declare-const temp___4740 (Array Int (Array Int et1)))

(declare-const t (Array Int (Array Int et1)))

(declare-const a1 (Array Int (Array Int et1)))

(declare-const j_next1 Int)

(declare-const result Int)

(declare-const f1 Int)

(declare-const result1 Int)

(declare-const f2 Int)

(declare-const result2 (Array Int (Array Int et1)))

(declare-const a2 (Array Int (Array Int et1)))

(declare-const a3 (Array Int (Array Int et1)))

(declare-const j_next2 Int)

(declare-const f3 Int)

(declare-const t1 (Array Int (Array Int et1)))

(declare-const a4 (Array Int (Array Int et1)))

(declare-const j_next3 Int)

(declare-const f4 Int)

(declare-const t2 (Array Int (Array Int et1)))

(declare-const result3 Bool)

(define-fun f5 () int__ref (mk_int__ref f))

;; H
  (assert (in_range1 i))

;; H
  (assert (in_range2 j))

;; H
  (assert (in_range3 e))

;; H
  (assert (=> (<= 5 50) (in_range2 j_next)))

;; H
  (assert (=> (<= 0 99) (in_range3 f)))

;; H
  (assert
  (and
  (and
  (= (bool_eq1 a1 5 50 (temp___4717 t j (temp___4723 (select t j) i e)) 5 50) true)
  (or (and (= j 50) (= j_next1 5)) (and (< j 50) (= j_next1 (+ j 1)))))
  (in_range2 j_next1)))

;; H
  (assert (=> (<= 5 50) (in_range2 j_next1)))

;; H
  (assert (=> (= e 0) (= (mk_int__ref result) f5)))

;; H
  (assert (=> (= e 0) (= f1 99)))

;; H
  (assert (=> (not (= e 0)) (and (= o (- e 1)) (in_range3 (- e 1)))))

;; H
  (assert (=> (not (= e 0)) (= (mk_int__ref result1) f5)))

;; H
  (assert (=> (not (= e 0)) (= f2 o)))

;; H
  (assert (=> (not (= e 0)) (= f1 f2)))

;; H
  (assert (= (to_rep o1) f1))

;; H
  (assert (= o2 (store (select a1 j_next1) i o1)))

;; H
  (assert (= o3 (store a1 j_next1 o2)))

;; H
  (assert (= a1 result2))

;; H
  (assert (= a2 o3))

;; H
  (assert (= t t1))

;; H
  (assert (= f1 f3))

;; H
  (assert (= j_next1 j_next2))

;; H
  (assert (= a2 a3))

;; H
  (assert (= t2 t))

;; H
  (assert (= f4 f1))

;; H
  (assert (= j_next3 j_next1))

;; H
  (assert (= a4 a2))

;; H
  (assert (< j 50))

;; H
  (assert (=> (< 0 e) (and (= o8 (- e 1)) (in_range3 (- e 1)))))

;; H
  (assert (=> (< 0 e) (and (<= 5 (+ j 1)) (<= (+ j 1) 50))))

;; H
  (assert (=> (< 0 e) (= o7 (+ j 1))))

;; H
  (assert (=> (< 0 e) (= o9 (select a o7))))

;; H
  (assert (=> (< 0 e) (= o10 (temp___1083 o9 i o8))))

;; H
  (assert (=> (< 0 e) (and (= o11 (+ j 1)) (in_range2 (+ j 1)))))

;; H
  (assert
  (=> (< 0 e)
  (= temp___4740 (temp___1068 a j (temp___1076 (select a j) i e) o11 o10))))

;; H
  (assert (=> (< 0 e) (= result3 (bool_eq1 a3 5 50 temp___4740 5 50))))

;; H
  (assert (=> (not (< 0 e)) (= result3 false)))

;; H
  (assert (not (= result3 true)))

;; H
  (assert (= e 0))

;; H
  (assert (and (<= 5 (+ j 1)) (<= (+ j 1) 50)))

;; H
  (assert (= o4 (+ j 1)))

;; H
  (assert (= o5 (select a o4)))

;; H
  (assert (= o6 (temp___1106 o5 i 99)))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 339, characters 0-0
  (not (in_range2 (+ j 1))))
(check-sat)
(exit)
