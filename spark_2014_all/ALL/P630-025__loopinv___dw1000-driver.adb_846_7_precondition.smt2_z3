;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort bits_1 0)

(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 1))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (bits_1 bits_1) Bool)

(declare-fun dummy1 () bits_1)

(declare-datatypes ()
((bits_1__ref (mk_bits_1__ref (bits_1__content bits_1)))))
(define-fun bits_1__ref___projection ((a bits_1__ref)) bits_1 (bits_1__content
                                                              a))

(declare-fun to_rep1 (bits_1) (_ BitVec 8))

(declare-fun of_rep1 ((_ BitVec 8)) bits_1)

;; inversion_axiom
  (assert
  (forall ((x bits_1))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_1)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 2))))
     (=> (in_range1 y) (= (to_rep1 (of_rep1 x)) y))) :pattern ((to_rep1
                                                               (of_rep1 x))) )))

(define-fun to_int3 ((x bits_1)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_1)) (! (in_range_int
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort bits_2 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 3))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (bits_2 bits_2) Bool)

(declare-fun dummy2 () bits_2)

(declare-datatypes ()
((bits_2__ref (mk_bits_2__ref (bits_2__content bits_2)))))
(define-fun bits_2__ref___projection ((a bits_2__ref)) bits_2 (bits_2__content
                                                              a))

(declare-fun to_rep2 (bits_2) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) bits_2)

;; inversion_axiom
  (assert
  (forall ((x bits_2))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_2)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 4))))
     (=> (in_range2 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2
                                                               (of_rep2 x))) )))

(define-fun to_int4 ((x bits_2)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_2)) (! (in_range_int1
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort bits_8 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq3 (bits_8 bits_8) Bool)

(declare-fun dummy3 () bits_8)

(declare-datatypes ()
((bits_8__ref (mk_bits_8__ref (bits_8__content bits_8)))))
(define-fun bits_8__ref___projection ((a bits_8__ref)) bits_8 (bits_8__content
                                                              a))

(declare-fun to_rep3 (bits_8) (_ BitVec 8))

(declare-fun of_rep3 ((_ BitVec 8)) bits_8)

;; inversion_axiom
  (assert
  (forall ((x bits_8))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))) )))

(define-fun to_int5 ((x bits_8)) Int (bv2int (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_8)) (! (uint_in_range
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort bits_13 0)

(define-fun in_range3 ((x (_ BitVec 16))) Bool (and
                                               (bvule ((_ int2bv 16) 0) x)
                                               (bvule x ((_ int2bv 16) 8191))))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 8191)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))

(declare-fun user_eq4 (bits_13 bits_13) Bool)

(declare-fun dummy4 () bits_13)

(declare-datatypes ()
((bits_13__ref (mk_bits_13__ref (bits_13__content bits_13)))))
(define-fun bits_13__ref___projection ((a bits_13__ref)) bits_13 (bits_13__content
                                                                 a))

(declare-fun to_rep4 (bits_13) (_ BitVec 16))

(declare-fun of_rep4 ((_ BitVec 16)) bits_13)

;; inversion_axiom
  (assert
  (forall ((x bits_13))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_13)) (! (in_range3 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (let ((y (bvurem x ((_ int2bv 16) 8192))))
     (=> (in_range3 y) (= (to_rep4 (of_rep4 x)) y))) :pattern ((to_rep4
                                                               (of_rep4 x))) )))

(define-fun to_int6 ((x bits_13)) Int (bv2int (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_13)) (! (in_range_int2
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-sort bits_16 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))

(declare-fun user_eq5 (bits_16 bits_16) Bool)

(declare-fun dummy5 () bits_16)

(declare-datatypes ()
((bits_16__ref (mk_bits_16__ref (bits_16__content bits_16)))))
(define-fun bits_16__ref___projection ((a bits_16__ref)) bits_16 (bits_16__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_364 (_ BitVec 16))
  (temp___is_init_361 Bool) (temp___skip_constant_362 Bool)
  (temp___do_toplevel_363 Bool)) Bool true)

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int bits_8))))))
(declare-fun slide ((Array Int bits_8) Int Int) (Array Int bits_8))

;; slide_eq
  (assert
  (forall ((a (Array Int bits_8)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int bits_8)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int bits_8) Int Int (Array Int bits_8) Int
  Int) (Array Int bits_8))

;; concat_def
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (bits_8 Int) (Array Int bits_8))

;; singleton_def
  (assert
  (forall ((v bits_8))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int bits_8)) (a__first Int) (a__last Int)
  (b (Array Int bits_8)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int bits_8) Int Int (Array Int bits_8) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep3 (select a (+ j 1))) (to_rep3 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (natural natural) Bool)

(declare-fun dummy6 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range4 low) (in_range4 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int bits_8))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int bits_8) (elts a))

(define-fun of_array ((a (Array Int bits_8)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int bits_8)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int bits_8)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int bits_8)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int bits_8))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq7 (us_t us_t) Bool)

(declare-fun dummy7 () us_t)

(declare-datatypes ()
((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content
                                                                    a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__dw1000__register_types__aon_cfg1_type__sleep_ce bits_1)(rec__dw1000__register_types__aon_cfg1_type__smxx bits_1)(rec__dw1000__register_types__aon_cfg1_type__lposc_c bits_1)(rec__dw1000__register_types__aon_cfg1_type__reserved bits_13)))))
(define-fun us_split_fields_SLEEP_CE__projection ((a us_split_fields)) bits_1
  (rec__dw1000__register_types__aon_cfg1_type__sleep_ce a))

(define-fun us_split_fields_SMXX__projection ((a us_split_fields)) bits_1
  (rec__dw1000__register_types__aon_cfg1_type__smxx a))

(define-fun us_split_fields_LPOSC_C__projection ((a us_split_fields)) bits_1
  (rec__dw1000__register_types__aon_cfg1_type__lposc_c a))

(define-fun us_split_fields_Reserved19__projection ((a us_split_fields)) bits_13
  (rec__dw1000__register_types__aon_cfg1_type__reserved a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_72__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_72__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                               a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__dw1000__register_types__aon_cfg1_type__sleep_ce
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__dw1000__register_types__aon_cfg1_type__sleep_ce
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__dw1000__register_types__aon_cfg1_type__smxx
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__dw1000__register_types__aon_cfg1_type__smxx
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__dw1000__register_types__aon_cfg1_type__lposc_c
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__dw1000__register_types__aon_cfg1_type__lposc_c
                                                  (us_split_fields1 b)))))
                        (= (to_rep4
                           (rec__dw1000__register_types__aon_cfg1_type__reserved
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__dw1000__register_types__aon_cfg1_type__reserved
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit () Int)

(declare-fun dw1000__register_types__aon_cfg1_type__sleep_ce__last__bit () Int)

(declare-fun dw1000__register_types__aon_cfg1_type__sleep_ce__position () Int)

;; dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit_axiom
  (assert (<= 0 dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit))

;; dw1000__register_types__aon_cfg1_type__sleep_ce__last__bit_axiom
  (assert
  (< dw1000__register_types__aon_cfg1_type__sleep_ce__first__bit dw1000__register_types__aon_cfg1_type__sleep_ce__last__bit))

;; dw1000__register_types__aon_cfg1_type__sleep_ce__position_axiom
  (assert (<= 0 dw1000__register_types__aon_cfg1_type__sleep_ce__position))

(declare-fun dw1000__register_types__aon_cfg1_type__smxx__first__bit () Int)

(declare-fun dw1000__register_types__aon_cfg1_type__smxx__last__bit () Int)

(declare-fun dw1000__register_types__aon_cfg1_type__smxx__position () Int)

;; dw1000__register_types__aon_cfg1_type__smxx__first__bit_axiom
  (assert (<= 0 dw1000__register_types__aon_cfg1_type__smxx__first__bit))

;; dw1000__register_types__aon_cfg1_type__smxx__last__bit_axiom
  (assert
  (< dw1000__register_types__aon_cfg1_type__smxx__first__bit dw1000__register_types__aon_cfg1_type__smxx__last__bit))

;; dw1000__register_types__aon_cfg1_type__smxx__position_axiom
  (assert (<= 0 dw1000__register_types__aon_cfg1_type__smxx__position))

(declare-fun dw1000__register_types__aon_cfg1_type__lposc_c__first__bit () Int)

(declare-fun dw1000__register_types__aon_cfg1_type__lposc_c__last__bit () Int)

(declare-fun dw1000__register_types__aon_cfg1_type__lposc_c__position () Int)

;; dw1000__register_types__aon_cfg1_type__lposc_c__first__bit_axiom
  (assert (<= 0 dw1000__register_types__aon_cfg1_type__lposc_c__first__bit))

;; dw1000__register_types__aon_cfg1_type__lposc_c__last__bit_axiom
  (assert
  (< dw1000__register_types__aon_cfg1_type__lposc_c__first__bit dw1000__register_types__aon_cfg1_type__lposc_c__last__bit))

;; dw1000__register_types__aon_cfg1_type__lposc_c__position_axiom
  (assert (<= 0 dw1000__register_types__aon_cfg1_type__lposc_c__position))

(declare-fun dw1000__register_types__aon_cfg1_type__reserved__first__bit () Int)

(declare-fun dw1000__register_types__aon_cfg1_type__reserved__last__bit () Int)

(declare-fun dw1000__register_types__aon_cfg1_type__reserved__position () Int)

;; dw1000__register_types__aon_cfg1_type__reserved__first__bit_axiom
  (assert (<= 0 dw1000__register_types__aon_cfg1_type__reserved__first__bit))

;; dw1000__register_types__aon_cfg1_type__reserved__last__bit_axiom
  (assert
  (< dw1000__register_types__aon_cfg1_type__reserved__first__bit dw1000__register_types__aon_cfg1_type__reserved__last__bit))

;; dw1000__register_types__aon_cfg1_type__reserved__position_axiom
  (assert (<= 0 dw1000__register_types__aon_cfg1_type__reserved__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-fun dummy8 () us_rep)

(declare-datatypes ()
((aon_cfg1_type__ref (mk_aon_cfg1_type__ref (aon_cfg1_type__content us_rep)))))
(define-fun aon_cfg1_type__ref___projection ((a aon_cfg1_type__ref)) us_rep
  (aon_cfg1_type__content a))

(declare-sort bits_3 0)

(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 7))))

(define-fun in_range_int3 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))

(declare-fun user_eq9 (bits_3 bits_3) Bool)

(declare-fun dummy9 () bits_3)

(declare-datatypes ()
((bits_3__ref (mk_bits_3__ref (bits_3__content bits_3)))))
(define-fun bits_3__ref___projection ((a bits_3__ref)) bits_3 (bits_3__content
                                                              a))

(declare-fun to_rep5 (bits_3) (_ BitVec 8))

(declare-fun of_rep5 ((_ BitVec 8)) bits_3)

;; inversion_axiom
  (assert
  (forall ((x bits_3))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_3)) (! (in_range5 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 8))))
     (=> (in_range5 y) (= (to_rep5 (of_rep5 x)) y))) :pattern ((to_rep5
                                                               (of_rep5 x))) )))

(define-fun to_int7 ((x bits_3)) Int (bv2int (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_3)) (! (in_range_int3
  (to_int7 x)) :pattern ((to_int7 x)) )))

(declare-sort bits_4 0)

(define-fun in_range6 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 15))))

(define-fun in_range_int4 ((x Int)) Bool (and (<= 0 x) (<= x 15)))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 8))

(declare-fun user_eq10 (bits_4 bits_4) Bool)

(declare-fun dummy10 () bits_4)

(declare-datatypes ()
((bits_4__ref (mk_bits_4__ref (bits_4__content bits_4)))))
(define-fun bits_4__ref___projection ((a bits_4__ref)) bits_4 (bits_4__content
                                                              a))

(declare-fun to_rep6 (bits_4) (_ BitVec 8))

(declare-fun of_rep6 ((_ BitVec 8)) bits_4)

;; inversion_axiom
  (assert
  (forall ((x bits_4))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_4)) (! (in_range6 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 16))))
     (=> (in_range6 y) (= (to_rep6 (of_rep6 x)) y))) :pattern ((to_rep6
                                                               (of_rep6 x))) )))

(define-fun to_int8 ((x bits_4)) Int (bv2int (to_rep6 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_4)) (! (in_range_int4
  (to_int8 x)) :pattern ((to_int8 x)) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks bits_2)(rec__dw1000__register_types__pmsc_ctrl0_type__rxclks bits_2)(rec__dw1000__register_types__pmsc_ctrl0_type__txclks bits_2)(rec__dw1000__register_types__pmsc_ctrl0_type__face bits_1)(rec__dw1000__register_types__pmsc_ctrl0_type__adcce bits_1)(rec__dw1000__register_types__pmsc_ctrl0_type__amce bits_1)(rec__dw1000__register_types__pmsc_ctrl0_type__gpce bits_1)(rec__dw1000__register_types__pmsc_ctrl0_type__gprn bits_1)(rec__dw1000__register_types__pmsc_ctrl0_type__gpdce bits_1)(rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn bits_1)(rec__dw1000__register_types__pmsc_ctrl0_type__khzclken bits_1)(rec__dw1000__register_types__pmsc_ctrl0_type__softreset bits_4)(rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 bits_3)(rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 bits_4)(rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 bits_3)(rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 bits_4)))))
(define-fun us_split_fields_SYSCLKS__projection ((a us_split_fields2)) bits_2
  (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks a))

(define-fun us_split_fields_RXCLKS__projection ((a us_split_fields2)) bits_2
  (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks a))

(define-fun us_split_fields_TXCLKS__projection ((a us_split_fields2)) bits_2
  (rec__dw1000__register_types__pmsc_ctrl0_type__txclks a))

(define-fun us_split_fields_FACE__projection ((a us_split_fields2)) bits_1
  (rec__dw1000__register_types__pmsc_ctrl0_type__face a))

(define-fun us_split_fields_ADCCE__projection ((a us_split_fields2)) bits_1
  (rec__dw1000__register_types__pmsc_ctrl0_type__adcce a))

(define-fun us_split_fields_AMCE__projection ((a us_split_fields2)) bits_1
  (rec__dw1000__register_types__pmsc_ctrl0_type__amce a))

(define-fun us_split_fields_GPCE__projection ((a us_split_fields2)) bits_1
  (rec__dw1000__register_types__pmsc_ctrl0_type__gpce a))

(define-fun us_split_fields_GPRN__projection ((a us_split_fields2)) bits_1
  (rec__dw1000__register_types__pmsc_ctrl0_type__gprn a))

(define-fun us_split_fields_GPDCE__projection ((a us_split_fields2)) bits_1
  (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce a))

(define-fun us_split_fields_GPDRN__projection ((a us_split_fields2)) bits_1
  (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn a))

(define-fun us_split_fields_KHZCLKEN__projection ((a us_split_fields2)) bits_1
  (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken a))

(define-fun us_split_fields_SOFTRESET__projection ((a us_split_fields2)) bits_4
  (rec__dw1000__register_types__pmsc_ctrl0_type__softreset a))

(define-fun us_split_fields_Reserved_116__projection ((a us_split_fields2)) bits_3
  (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1 a))

(define-fun us_split_fields_Reserved_216__projection ((a us_split_fields2)) bits_4
  (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2 a))

(define-fun us_split_fields_Reserved_35__projection ((a us_split_fields2)) bits_3
  (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3 a))

(define-fun us_split_fields_Reserved_42__projection ((a us_split_fields2)) bits_4
  (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_101__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_101__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep2
                            (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks
                                                   (us_split_fields3 b))))
                         (= (to_rep2
                            (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__rxclks
                                                   (us_split_fields3 b)))))
                         (= (to_rep2
                            (rec__dw1000__register_types__pmsc_ctrl0_type__txclks
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__txclks
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__dw1000__register_types__pmsc_ctrl0_type__face
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__face
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__dw1000__register_types__pmsc_ctrl0_type__adcce
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__adcce
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__dw1000__register_types__pmsc_ctrl0_type__amce
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__amce
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__dw1000__register_types__pmsc_ctrl0_type__gpce
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__gpce
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__dw1000__register_types__pmsc_ctrl0_type__gprn
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__gprn
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn
                                                   (us_split_fields3 b)))))
                         (= (to_rep1
                            (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken
                                                   (us_split_fields3 b)))))
                         (= (to_rep6
                            (rec__dw1000__register_types__pmsc_ctrl0_type__softreset
                            (us_split_fields3 a))) (to_rep6
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__softreset
                                                   (us_split_fields3 b)))))
                         (= (to_rep5
                            (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1
                                                   (us_split_fields3 b)))))
                         (= (to_rep6
                            (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2
                            (us_split_fields3 a))) (to_rep6
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2
                                                   (us_split_fields3 b)))))
                         (= (to_rep5
                            (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3
                                                   (us_split_fields3 b)))))
                         (= (to_rep6
                            (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4
                            (us_split_fields3 a))) (to_rep6
                                                   (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__sysclks__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__sysclks__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__sysclks__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__sysclks__first__bit dw1000__register_types__pmsc_ctrl0_type__sysclks__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__sysclks__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__sysclks__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__rxclks__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__rxclks__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__rxclks__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__rxclks__first__bit dw1000__register_types__pmsc_ctrl0_type__rxclks__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__rxclks__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__rxclks__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__txclks__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__txclks__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__txclks__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__txclks__first__bit dw1000__register_types__pmsc_ctrl0_type__txclks__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__txclks__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__txclks__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__face__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__face__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__face__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__face__first__bit_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__face__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__face__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__face__first__bit dw1000__register_types__pmsc_ctrl0_type__face__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__face__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__face__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__adcce__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__adcce__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__adcce__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__adcce__first__bit dw1000__register_types__pmsc_ctrl0_type__adcce__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__adcce__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__adcce__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__amce__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__amce__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__amce__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__amce__first__bit_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__amce__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__amce__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__amce__first__bit dw1000__register_types__pmsc_ctrl0_type__amce__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__amce__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__amce__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gpce__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gpce__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__gpce__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__gpce__first__bit dw1000__register_types__pmsc_ctrl0_type__gpce__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__gpce__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpce__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gprn__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gprn__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__gprn__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__gprn__first__bit dw1000__register_types__pmsc_ctrl0_type__gprn__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__gprn__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gprn__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gpdce__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gpdce__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__gpdce__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__gpdce__first__bit dw1000__register_types__pmsc_ctrl0_type__gpdce__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__gpdce__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdce__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gpdrn__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__gpdrn__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__gpdrn__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__gpdrn__first__bit dw1000__register_types__pmsc_ctrl0_type__gpdrn__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__gpdrn__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__gpdrn__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__khzclken__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__khzclken__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__khzclken__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__khzclken__first__bit dw1000__register_types__pmsc_ctrl0_type__khzclken__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__khzclken__position_axiom
  (assert (<= 0 dw1000__register_types__pmsc_ctrl0_type__khzclken__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__softreset__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__softreset__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__softreset__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__softreset__first__bit dw1000__register_types__pmsc_ctrl0_type__softreset__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__softreset__position_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__softreset__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_1__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_1__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__reserved_1__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__reserved_1__first__bit
  dw1000__register_types__pmsc_ctrl0_type__reserved_1__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__reserved_1__position_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_1__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_2__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_2__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__reserved_2__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__reserved_2__first__bit
  dw1000__register_types__pmsc_ctrl0_type__reserved_2__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__reserved_2__position_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_2__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_3__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_3__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__reserved_3__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__reserved_3__first__bit
  dw1000__register_types__pmsc_ctrl0_type__reserved_3__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__reserved_3__position_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_3__position))

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_4__last__bit () Int)

(declare-fun dw1000__register_types__pmsc_ctrl0_type__reserved_4__position () Int)

;; dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit))

;; dw1000__register_types__pmsc_ctrl0_type__reserved_4__last__bit_axiom
  (assert
  (< dw1000__register_types__pmsc_ctrl0_type__reserved_4__first__bit
  dw1000__register_types__pmsc_ctrl0_type__reserved_4__last__bit))

;; dw1000__register_types__pmsc_ctrl0_type__reserved_4__position_axiom
  (assert
  (<= 0 dw1000__register_types__pmsc_ctrl0_type__reserved_4__position))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-fun dummy11 () us_rep1)

(declare-datatypes ()
((pmsc_ctrl0_type__ref
 (mk_pmsc_ctrl0_type__ref (pmsc_ctrl0_type__content us_rep1)))))
(define-fun pmsc_ctrl0_type__ref___projection ((a pmsc_ctrl0_type__ref)) us_rep1
  (pmsc_ctrl0_type__content a))

(declare-datatypes ()
((register_type__ref (mk_register_type__ref (register_type__content us_rep)))))
(define-fun register_type__ref_71__projection ((a register_type__ref)) us_rep
  (register_type__content a))

(declare-datatypes ()
((register_type__ref1
 (mk_register_type__ref1 (register_type__content1 us_rep1)))))
(define-fun register_type__ref_100__projection ((a register_type__ref1)) us_rep1
  (register_type__content1 a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort tTdataSP1 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (tTdataSP1 tTdataSP1) Bool)

(declare-fun dummy12 () tTdataSP1)

(declare-datatypes ()
((tTdataSP1__ref (mk_tTdataSP1__ref (tTdataSP1__content tTdataSP1)))))
(define-fun tTdataSP1__ref___projection ((a tTdataSP1__ref)) tTdataSP1
  (tTdataSP1__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant3 ((temp___expr_274 (_ BitVec 8))
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool (=>
                                      (or (= temp___is_init_271 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 1)))
                                      (in_range1 temp___expr_274)))

(define-fun dynamic_invariant4 ((temp___expr_280 (_ BitVec 8))
  (temp___is_init_277 Bool) (temp___skip_constant_278 Bool)
  (temp___do_toplevel_279 Bool)) Bool (=>
                                      (or (= temp___is_init_277 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 3)))
                                      (in_range2 temp___expr_280)))

(define-fun dynamic_invariant5 ((temp___expr_286 (_ BitVec 8))
  (temp___is_init_283 Bool) (temp___skip_constant_284 Bool)
  (temp___do_toplevel_285 Bool)) Bool (=>
                                      (or (= temp___is_init_283 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 7)))
                                      (in_range5 temp___expr_286)))

(define-fun dynamic_invariant6 ((temp___expr_292 (_ BitVec 8))
  (temp___is_init_289 Bool) (temp___skip_constant_290 Bool)
  (temp___do_toplevel_291 Bool)) Bool (=>
                                      (or (= temp___is_init_289 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 15)))
                                      (in_range6 temp___expr_292)))

(define-fun dynamic_invariant7 ((temp___expr_316 (_ BitVec 8))
  (temp___is_init_313 Bool) (temp___skip_constant_314 Bool)
  (temp___do_toplevel_315 Bool)) Bool true)

(define-fun dynamic_invariant8 ((temp___expr_346 (_ BitVec 16))
  (temp___is_init_343 Bool) (temp___skip_constant_344 Bool)
  (temp___do_toplevel_345 Bool)) Bool (=>
                                      (or (= temp___is_init_343 true)
                                      (bvule ((_ int2bv 16) 0) ((_ int2bv 16) 8191)))
                                      (in_range3 temp___expr_346)))

(define-fun dynamic_invariant9 ((temp___expr_658 us_t)
  (temp___is_init_655 Bool) (temp___skip_constant_656 Bool)
  (temp___do_toplevel_657 Bool)) Bool (=>
                                      (not (= temp___skip_constant_656 true))
                                      (dynamic_property 0 2147483647
                                      (first1 temp___expr_658)
                                      (last1 temp___expr_658))))

(declare-fun half_xtal_cycles_per_lp_osc_cycle () (_ BitVec 16))

(declare-fun pmsc_ctrl0_reg__split_fields () bits_2)

(declare-fun pmsc_ctrl0_reg__split_fields1 () bits_2)

(declare-fun pmsc_ctrl0_reg__split_fields2 () bits_2)

(declare-fun pmsc_ctrl0_reg__split_fields3 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields4 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields5 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields6 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields7 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields8 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields9 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields10 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields11 () bits_4)

(declare-fun pmsc_ctrl0_reg__split_fields12 () bits_3)

(declare-fun pmsc_ctrl0_reg__split_fields13 () bits_4)

(declare-fun pmsc_ctrl0_reg__split_fields14 () bits_3)

(declare-fun pmsc_ctrl0_reg__split_fields15 () bits_4)

(declare-fun o () bits_13)

(declare-fun o1 () bits_1)

(declare-fun o2 () bits_1)

(declare-fun o3 () bits_1)

(declare-fun o4 () bits_1)

(declare-fun o5 () bits_1)

(declare-fun o6 () bits_1)

(declare-fun o7 () bits_13)

(declare-fun o8 () bits_1)

(declare-fun o9 () bits_1)

(declare-fun o10 () bits_1)

(declare-fun o11 () bits_13)

(declare-fun o12 () bits_13)

(declare-fun o13 () bits_1)

(declare-fun o14 () bits_1)

(declare-fun o15 () bits_1)

(declare-fun o16 () bits_1)

(declare-fun o17 () bits_1)

(declare-fun o18 () bits_1)

(declare-fun o19 () bits_13)

(declare-fun o20 () bits_1)

(declare-fun o21 () bits_1)

(declare-fun o22 () bits_1)

(declare-fun o23 () bits_13)

(declare-fun o24 () bits_2)

(declare-fun o25 () bits_2)

(declare-fun o26 () bits_2)

(declare-fun o27 () bits_2)

(declare-fun o28 () bits_1)

(declare-fun o29 () bits_1)

(declare-fun o30 () bits_1)

(declare-fun o31 () bits_1)

(declare-fun o32 () bits_1)

(declare-fun o33 () bits_1)

(declare-fun o34 () bits_1)

(declare-fun o35 () bits_1)

(declare-fun o36 () bits_4)

(declare-fun o37 () bits_3)

(declare-fun o38 () bits_4)

(declare-fun o39 () bits_3)

(declare-fun o40 () bits_4)

(declare-fun temp___3342 () bits_2)

(declare-fun temp___33421 () bits_2)

(declare-fun temp___33422 () bits_2)

(declare-fun temp___33423 () bits_1)

(declare-fun temp___33424 () bits_1)

(declare-fun temp___33425 () bits_1)

(declare-fun temp___33426 () bits_1)

(declare-fun temp___33427 () bits_1)

(declare-fun temp___33428 () bits_1)

(declare-fun temp___33429 () bits_1)

(declare-fun temp___334210 () bits_1)

(declare-fun temp___334211 () bits_4)

(declare-fun temp___334212 () bits_3)

(declare-fun temp___334213 () bits_4)

(declare-fun temp___334214 () bits_3)

(declare-fun temp___334215 () bits_4)

(declare-fun o41 () bits_2)

(declare-fun o42 () bits_2)

(declare-fun o43 () bits_2)

(declare-fun o44 () bits_2)

(declare-fun o45 () bits_1)

(declare-fun o46 () bits_1)

(declare-fun o47 () bits_1)

(declare-fun o48 () bits_1)

(declare-fun o49 () bits_1)

(declare-fun o50 () bits_1)

(declare-fun o51 () bits_1)

(declare-fun o52 () bits_1)

(declare-fun o53 () bits_4)

(declare-fun o54 () bits_3)

(declare-fun o55 () bits_4)

(declare-fun o56 () bits_3)

(declare-fun o57 () bits_4)

(declare-fun temp___3344 () bits_2)

(declare-fun temp___33441 () bits_2)

(declare-fun temp___33442 () bits_2)

(declare-fun temp___33443 () bits_1)

(declare-fun temp___33444 () bits_1)

(declare-fun temp___33445 () bits_1)

(declare-fun temp___33446 () bits_1)

(declare-fun temp___33447 () bits_1)

(declare-fun temp___33448 () bits_1)

(declare-fun temp___33449 () bits_1)

(declare-fun temp___334410 () bits_1)

(declare-fun temp___334411 () bits_4)

(declare-fun temp___334412 () bits_3)

(declare-fun temp___334413 () bits_4)

(declare-fun temp___334414 () bits_3)

(declare-fun temp___334415 () bits_4)

(declare-fun o58 () integer)

(declare-fun o59 () integer)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields () bits_2)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields1 () bits_2)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields2 () bits_2)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields3 () bits_1)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields4 () bits_1)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields5 () bits_1)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields6 () bits_1)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields7 () bits_1)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields8 () bits_1)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields9 () bits_1)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields10 () bits_1)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields11 () bits_4)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields12 () bits_3)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields13 () bits_4)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields14 () bits_3)

(declare-fun dw1000__registers__pmsc_ctrl0__read__reg__fields15 () bits_4)

(declare-fun result () bits_2)

(declare-fun result1 () bits_2)

(declare-fun result2 () bits_2)

(declare-fun result3 () bits_1)

(declare-fun result4 () bits_1)

(declare-fun result5 () bits_1)

(declare-fun result6 () bits_1)

(declare-fun result7 () bits_1)

(declare-fun result8 () bits_1)

(declare-fun result9 () bits_1)

(declare-fun result10 () bits_1)

(declare-fun result11 () bits_4)

(declare-fun result12 () bits_3)

(declare-fun result13 () bits_4)

(declare-fun result14 () bits_3)

(declare-fun result15 () bits_4)

(declare-fun pmsc_ctrl0_reg__split_fields16 () bits_2)

(declare-fun pmsc_ctrl0_reg__split_fields17 () bits_2)

(declare-fun pmsc_ctrl0_reg__split_fields18 () bits_2)

(declare-fun pmsc_ctrl0_reg__split_fields19 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields20 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields21 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields22 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields23 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields24 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields25 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields26 () bits_1)

(declare-fun pmsc_ctrl0_reg__split_fields27 () bits_4)

(declare-fun pmsc_ctrl0_reg__split_fields28 () bits_3)

(declare-fun pmsc_ctrl0_reg__split_fields29 () bits_4)

(declare-fun pmsc_ctrl0_reg__split_fields30 () bits_3)

(declare-fun pmsc_ctrl0_reg__split_fields31 () bits_4)

(declare-fun result16 () bits_2)

(declare-fun result17 () bits_2)

(declare-fun result18 () bits_2)

(declare-fun result19 () bits_1)

(declare-fun result20 () bits_1)

(declare-fun result21 () bits_1)

(declare-fun result22 () bits_1)

(declare-fun result23 () bits_1)

(declare-fun result24 () bits_1)

(declare-fun result25 () bits_1)

(declare-fun result26 () bits_1)

(declare-fun result27 () bits_4)

(declare-fun result28 () bits_3)

(declare-fun result29 () bits_4)

(declare-fun result30 () bits_3)

(declare-fun result31 () bits_4)

(declare-fun pmsc_ctrl0_reg__split_fields32 () us_split_fields2)

(declare-fun result32 () us_split_fields__ref1)

(declare-fun pmsc_ctrl0_reg__split_fields33 () us_split_fields2)

;; H
  (assert true)

;; H
  (assert (= (to_rep4 o) ((_ int2bv 16) 0)))

;; H
  (assert (= (to_rep1 o1) ((_ int2bv 8) 1)))

;; H
  (assert (= (to_rep1 o2) ((_ int2bv 8) 0)))

;; H
  (assert (= (to_rep1 o3) ((_ int2bv 8) 0)))

;; H
  (assert (= o3 o4))

;; H
  (assert (= o2 o5))

;; H
  (assert (= o1 o6))

;; H
  (assert (= o o7))

;; H
  (assert (= o8 o4))

;; H
  (assert (= o9 o5))

;; H
  (assert (= o10 o6))

;; H
  (assert (= o11 o7))

;; H
  (assert (= (to_rep4 o12) ((_ int2bv 16) 0)))

;; H
  (assert (= (to_rep1 o13) ((_ int2bv 8) 0)))

;; H
  (assert (= (to_rep1 o14) ((_ int2bv 8) 0)))

;; H
  (assert (= (to_rep1 o15) ((_ int2bv 8) 0)))

;; H
  (assert (= o15 o16))

;; H
  (assert (= o14 o17))

;; H
  (assert (= o13 o18))

;; H
  (assert (= o12 o19))

;; H
  (assert (= o20 o16))

;; H
  (assert (= o21 o17))

;; H
  (assert (= o22 o18))

;; H
  (assert (= o23 o19))

;; H
  (assert (= result pmsc_ctrl0_reg__split_fields))

;; H
  (assert (= result1 pmsc_ctrl0_reg__split_fields1))

;; H
  (assert (= result2 pmsc_ctrl0_reg__split_fields2))

;; H
  (assert (= result3 pmsc_ctrl0_reg__split_fields3))

;; H
  (assert (= result4 pmsc_ctrl0_reg__split_fields4))

;; H
  (assert (= result5 pmsc_ctrl0_reg__split_fields5))

;; H
  (assert (= result6 pmsc_ctrl0_reg__split_fields6))

;; H
  (assert (= result7 pmsc_ctrl0_reg__split_fields7))

;; H
  (assert (= result8 pmsc_ctrl0_reg__split_fields8))

;; H
  (assert (= result9 pmsc_ctrl0_reg__split_fields9))

;; H
  (assert (= result10 pmsc_ctrl0_reg__split_fields10))

;; H
  (assert (= result11 pmsc_ctrl0_reg__split_fields11))

;; H
  (assert (= result12 pmsc_ctrl0_reg__split_fields12))

;; H
  (assert (= result13 pmsc_ctrl0_reg__split_fields13))

;; H
  (assert (= result14 pmsc_ctrl0_reg__split_fields14))

;; H
  (assert (= result15 pmsc_ctrl0_reg__split_fields15))

;; H
  (assert
  (= (mk___split_fields1 pmsc_ctrl0_reg__split_fields16
     pmsc_ctrl0_reg__split_fields17 pmsc_ctrl0_reg__split_fields18
     pmsc_ctrl0_reg__split_fields19 pmsc_ctrl0_reg__split_fields20
     pmsc_ctrl0_reg__split_fields21 pmsc_ctrl0_reg__split_fields22
     pmsc_ctrl0_reg__split_fields23 pmsc_ctrl0_reg__split_fields24
     pmsc_ctrl0_reg__split_fields25 pmsc_ctrl0_reg__split_fields26
     pmsc_ctrl0_reg__split_fields27 pmsc_ctrl0_reg__split_fields28
     pmsc_ctrl0_reg__split_fields29 pmsc_ctrl0_reg__split_fields30
     pmsc_ctrl0_reg__split_fields31) (mk___split_fields1
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields1
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields2
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields3
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields4
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields5
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields6
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields7
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields8
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields9
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields10
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields11
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields12
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields13
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields14
                                     dw1000__registers__pmsc_ctrl0__read__reg__fields15)))

;; H
  (assert (= (to_rep2 o24) ((_ int2bv 8) 1)))

;; H
  (assert (= o24 o25))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields17 o26))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields18 o27))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields19 o28))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields20 o29))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields21 o30))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields22 o31))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields23 o32))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields24 o33))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields25 o34))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields26 o35))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields27 o36))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields28 o37))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields29 o38))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields30 o39))

;; H
  (assert (= pmsc_ctrl0_reg__split_fields31 o40))

;; H
  (assert (= temp___3342 o25))

;; H
  (assert (= temp___33421 o26))

;; H
  (assert (= temp___33422 o27))

;; H
  (assert (= temp___33423 o28))

;; H
  (assert (= temp___33424 o29))

;; H
  (assert (= temp___33425 o30))

;; H
  (assert (= temp___33426 o31))

;; H
  (assert (= temp___33427 o32))

;; H
  (assert (= temp___33428 o33))

;; H
  (assert (= temp___33429 o34))

;; H
  (assert (= temp___334210 o35))

;; H
  (assert (= temp___334211 o36))

;; H
  (assert (= temp___334212 o37))

;; H
  (assert (= temp___334213 o38))

;; H
  (assert (= temp___334214 o39))

;; H
  (assert (= temp___334215 o40))

;; H
  (assert (= result16 pmsc_ctrl0_reg__split_fields16))

;; H
  (assert (= result17 pmsc_ctrl0_reg__split_fields17))

;; H
  (assert (= result18 pmsc_ctrl0_reg__split_fields18))

;; H
  (assert (= result19 pmsc_ctrl0_reg__split_fields19))

;; H
  (assert (= result20 pmsc_ctrl0_reg__split_fields20))

;; H
  (assert (= result21 pmsc_ctrl0_reg__split_fields21))

;; H
  (assert (= result22 pmsc_ctrl0_reg__split_fields22))

;; H
  (assert (= result23 pmsc_ctrl0_reg__split_fields23))

;; H
  (assert (= result24 pmsc_ctrl0_reg__split_fields24))

;; H
  (assert (= result25 pmsc_ctrl0_reg__split_fields25))

;; H
  (assert (= result26 pmsc_ctrl0_reg__split_fields26))

;; H
  (assert (= result27 pmsc_ctrl0_reg__split_fields27))

;; H
  (assert (= result28 pmsc_ctrl0_reg__split_fields28))

;; H
  (assert (= result29 pmsc_ctrl0_reg__split_fields29))

;; H
  (assert (= result30 pmsc_ctrl0_reg__split_fields30))

;; H
  (assert (= result31 pmsc_ctrl0_reg__split_fields31))

;; H
  (assert
  (= pmsc_ctrl0_reg__split_fields32 (mk___split_fields1 temp___3342
                                    temp___33421 temp___33422 temp___33423
                                    temp___33424 temp___33425 temp___33426
                                    temp___33427 temp___33428 temp___33429
                                    temp___334210 temp___334211 temp___334212
                                    temp___334213 temp___334214
                                    temp___334215)))

;; H
  (assert (= (to_rep2 o41) ((_ int2bv 8) 0)))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__sysclks
     pmsc_ctrl0_reg__split_fields32) o42))

;; H
  (assert (= o41 o43))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__txclks
     pmsc_ctrl0_reg__split_fields32) o44))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__face
     pmsc_ctrl0_reg__split_fields32) o45))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__adcce
     pmsc_ctrl0_reg__split_fields32) o46))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__amce
     pmsc_ctrl0_reg__split_fields32) o47))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__gpce
     pmsc_ctrl0_reg__split_fields32) o48))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__gprn
     pmsc_ctrl0_reg__split_fields32) o49))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__gpdce
     pmsc_ctrl0_reg__split_fields32) o50))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__gpdrn
     pmsc_ctrl0_reg__split_fields32) o51))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__khzclken
     pmsc_ctrl0_reg__split_fields32) o52))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__softreset
     pmsc_ctrl0_reg__split_fields32) o53))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_1
     pmsc_ctrl0_reg__split_fields32) o54))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_2
     pmsc_ctrl0_reg__split_fields32) o55))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_3
     pmsc_ctrl0_reg__split_fields32) o56))

;; H
  (assert
  (= (rec__dw1000__register_types__pmsc_ctrl0_type__reserved_4
     pmsc_ctrl0_reg__split_fields32) o57))

;; H
  (assert (= temp___3344 o42))

;; H
  (assert (= temp___33441 o43))

;; H
  (assert (= temp___33442 o44))

;; H
  (assert (= temp___33443 o45))

;; H
  (assert (= temp___33444 o46))

;; H
  (assert (= temp___33445 o47))

;; H
  (assert (= temp___33446 o48))

;; H
  (assert (= temp___33447 o49))

;; H
  (assert (= temp___33448 o50))

;; H
  (assert (= temp___33449 o51))

;; H
  (assert (= temp___334410 o52))

;; H
  (assert (= temp___334411 o53))

;; H
  (assert (= temp___334412 o54))

;; H
  (assert (= temp___334413 o55))

;; H
  (assert (= temp___334414 o56))

;; H
  (assert (= temp___334415 o57))

;; H
  (assert
  (= result32 (mk___split_fields__ref1 pmsc_ctrl0_reg__split_fields32)))

;; H
  (assert
  (= pmsc_ctrl0_reg__split_fields33 (mk___split_fields1 temp___3344
                                    temp___33441 temp___33442 temp___33443
                                    temp___33444 temp___33445 temp___33446
                                    temp___33447 temp___33448 temp___33449
                                    temp___334410 temp___334411 temp___334412
                                    temp___334413 temp___334414
                                    temp___334415)))

;; H
  (assert (= (to_rep o59) 2))

;; H
  (assert (= (to_rep o58) 1))

(assert
;; WP_parameter_def
 ;; File "dw1000-driver.adb", line 812, characters 0-0
  (not
  (<= (ite (<= (to_rep o58) (to_rep o59)) (+ (- (to_rep o59) (to_rep o58)) 1)
      0) 256)))
(check-sat)
(exit)
