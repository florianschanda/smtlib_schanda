;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort idx 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (idx idx) Bool)

(declare-fun dummy () idx)

(declare-datatypes () ((idx__ref (mk_idx__ref (idx__content idx)))))
(define-fun idx__ref___projection ((a idx__ref)) idx (idx__content a))

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 5)) (in_range1 temp___expr_136)))

(declare-sort valid_idx 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 5)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (valid_idx valid_idx) Bool)

(declare-fun dummy1 () valid_idx)

(declare-datatypes ()
((valid_idx__ref (mk_valid_idx__ref (valid_idx__content valid_idx)))))
(define-fun valid_idx__ref___projection ((a valid_idx__ref)) valid_idx 
  (valid_idx__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))))))

(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select 
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select 
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select 
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select 
  (notb a a_first a_last) i)) )))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 5)) (in_range2 temp___expr_142)))

(declare-fun a () (Array Int Bool))

(declare-fun v () Int)

(declare-fun x () Int)

(declare-fun loopframe__get__result () Int)

(declare-fun temp___156 () Int)

(declare-fun result () Int)

(declare-fun v1 () Int)

(declare-fun result1 () Int)

(declare-fun x1 () Int)

(declare-fun v2 () Int)

(declare-fun x2 () Int)

(declare-fun result2 () Int)

(declare-fun v3 () Int)

(declare-fun v4 () Int)

(declare-fun v5 () Int)

(declare-fun v6 () Int)

(declare-fun x3 () Int)

(declare-fun v7 () Int)

(declare-fun x4 () Int)

(declare-fun v8 () Int)

(declare-fun x5 () Int)

(declare-fun v9 () Int)

(declare-fun x6 () Int)

(declare-fun result3 () Int)

(declare-fun loopframe__get__result1 () Int)

(declare-fun loopframe__get__result2 () Int)

(declare-fun loopframe__get__result3 () Int)

(declare-fun v10 () Int)

(declare-fun x7 () Int)

(declare-fun loopframe__get__result4 () Int)

(declare-fun v11 () Int)

(declare-fun x8 () Int)

(declare-fun loopframe__get__result5 () Int)

(define-fun x9 () int__ref (mk_int__ref x5))

(define-fun v12 () int__ref (mk_int__ref v8))

(define-fun v13 () int__ref (mk_int__ref v6))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref v)))

;; H
  (assert (= v1 0))

;; H
  (assert (in_range1 v1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref x)))

;; H
  (assert (= x1 1))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 5)) (= temp___156 v1)))

;; H
  (assert
  (=> (and (<= 1 x1) (<= x1 5))
  (and (=> (<= 0 5) (in_range1 v2)) (and (<= 1 x2) (<= x2 5)))))

;; H
  (assert
  (=> (and (<= 1 x1) (<= x1 5))
  (or
  (and (and (= v3 v4) (= v5 v3))
  (and (= (select a x2) true) (and (= v2 result2) (= v3 x2))))
  (and (and (not (= (select a x2) true)) (= v3 v2))
  (and (and (= v3 v4) (= v5 v3)) (= x2 5))))))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 5)) (= x2 x3)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 5)) (= v13 (mk_int__ref v4))))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 5)) (= x4 x2)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 5)) (= v7 v5)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 5)) (= x9 (mk_int__ref x3))))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 5)) (= v12 v13)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 5)) (= x6 x4)))

;; H
  (assert (=> (and (<= 1 x1) (<= x1 5)) (= v9 v7)))

;; H
  (assert (=> (not (and (<= 1 x1) (<= x1 5))) (= x1 x5)))

;; H
  (assert (=> (not (and (<= 1 x1) (<= x1 5))) (= v1 v8)))

;; H
  (assert (=> (not (and (<= 1 x1) (<= x1 5))) (= x6 x1)))

;; H
  (assert (=> (not (and (<= 1 x1) (<= x1 5))) (= v9 v1)))

;; H
  (assert (= loopframe__get__result1 loopframe__get__result2))

;; H
  (assert (= loopframe__get__result3 loopframe__get__result1))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref loopframe__get__result)))

;; H
  (assert (= loopframe__get__result1 v8))

;; H
  (assert
  (= (mk_int__ref loopframe__get__result4) (mk_int__ref
                                           loopframe__get__result2)))

;; H
  (assert (= (mk_int__ref x7) x9))

;; H
  (assert (= (mk_int__ref v10) v12))

;; H
  (assert (= loopframe__get__result5 loopframe__get__result3))

;; H
  (assert (= x8 x6))

;; H
  (assert (= v11 v9))

;; H
  (assert (not (= loopframe__get__result4 0)))

(assert
;; WP_parameter_def
 ;; File "loopframe.ads", line 5, characters 0-0
  (not (<= 1 loopframe__get__result4)))
(check-sat)
