;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort program_phase_t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (program_phase_t program_phase_t) Bool)

(declare-fun dummy () program_phase_t)

(declare-datatypes ()
((program_phase_t__ref
 (mk_program_phase_t__ref (program_phase_t__content program_phase_t)))))
(define-fun program_phase_t__ref___projection ((a program_phase_t__ref)) program_phase_t
  (program_phase_t__content a))

(define-fun dynamic_invariant ((temp___expr_539 Int)
  (temp___is_init_536 Bool) (temp___skip_constant_537 Bool)
  (temp___do_toplevel_538 Bool)) Bool (=>
                                      (or (= temp___is_init_536 true)
                                      (<= 0 2)) (in_range1 temp___expr_539)))

(declare-sort counter_range_t 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (counter_range_t counter_range_t) Bool)

(declare-fun dummy1 () counter_range_t)

(declare-datatypes ()
((counter_range_t__ref
 (mk_counter_range_t__ref (counter_range_t__content counter_range_t)))))
(define-fun counter_range_t__ref___projection ((a counter_range_t__ref)) counter_range_t
  (counter_range_t__content a))

(declare-fun to_rep (counter_range_t) Int)

(declare-fun of_rep (Int) counter_range_t)

;; inversion_axiom
  (assert
  (forall ((x counter_range_t))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x counter_range_t)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort tcandidate_number_tB 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tcandidate_number_tB tcandidate_number_tB) Bool)

(declare-fun dummy2 () tcandidate_number_tB)

(declare-datatypes ()
((tcandidate_number_tB__ref
 (mk_tcandidate_number_tB__ref
 (tcandidate_number_tB__content tcandidate_number_tB)))))
(define-fun tcandidate_number_tB__ref___projection ((a tcandidate_number_tB__ref)) tcandidate_number_tB
  (tcandidate_number_tB__content a))

(declare-sort candidate_number_t 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (candidate_number_t candidate_number_t) Bool)

(declare-fun dummy3 () candidate_number_t)

(declare-datatypes ()
((candidate_number_t__ref
 (mk_candidate_number_t__ref
 (candidate_number_t__content candidate_number_t)))))
(define-fun candidate_number_t__ref___projection ((a candidate_number_t__ref)) candidate_number_t
  (candidate_number_t__content a))

(define-fun dynamic_invariant1 ((temp___expr_551 Int)
  (temp___is_init_548 Bool) (temp___skip_constant_549 Bool)
  (temp___do_toplevel_550 Bool)) Bool (=>
                                      (or (= temp___is_init_548 true)
                                      (<= 0 20)) (in_range4 temp___expr_551)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int counter_range_t))))))
(declare-fun slide ((Array Int counter_range_t) Int
  Int) (Array Int counter_range_t))

;; slide_eq
  (assert
  (forall ((a (Array Int counter_range_t)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int counter_range_t)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int counter_range_t) Int Int
  (Array Int counter_range_t) Int Int) (Array Int counter_range_t))

;; concat_def
  (assert
  (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (counter_range_t Int) (Array Int counter_range_t))

;; singleton_def
  (assert
  (forall ((v counter_range_t))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int counter_range_t)) (a__first Int)
  (a__last Int) (b (Array Int counter_range_t)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_153 Int))
                           (=>
                           (and (<= a__first temp___idx_153)
                           (<= temp___idx_153 a__last))
                           (= (to_rep (select a temp___idx_153)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_153)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_153 Int))
  (=> (and (<= a__first temp___idx_153) (<= temp___idx_153 a__last))
  (= (to_rep (select a temp___idx_153)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_153)))))))))))

(declare-fun compare ((Array Int counter_range_t) Int Int
  (Array Int counter_range_t) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int Bool))))))
(declare-fun slide1 ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))

(declare-fun compare1 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-fun program_phase () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun last_candidate () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun counters () (Array Int counter_range_t))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun to_rep1 (tcandidate_number_tB) Int)

(declare-fun of_rep1 (Int) tcandidate_number_tB)

;; inversion_axiom
  (assert
  (forall ((x tcandidate_number_tB))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x tcandidate_number_tB)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (tcandidate_number_tB tcandidate_number_tB) Bool)

(declare-fun dummy4 () tcandidate_number_tB)

(declare-datatypes ()
((t59b__ref (mk_t59b__ref (t59b__content tcandidate_number_tB)))))
(define-fun t59b__ref___projection ((a t59b__ref)) tcandidate_number_tB
  (t59b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (tcandidate_number_tB tcandidate_number_tB) Bool)

(declare-fun dummy5 () tcandidate_number_tB)

(declare-datatypes ()
((t68b__ref (mk_t68b__ref (t68b__content tcandidate_number_tB)))))
(define-fun t68b__ref___projection ((a t68b__ref)) tcandidate_number_tB
  (t68b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq6 (tcandidate_number_tB tcandidate_number_tB) Bool)

(declare-fun dummy6 () tcandidate_number_tB)

(declare-datatypes ()
((t73b__ref (mk_t73b__ref (t73b__content tcandidate_number_tB)))))
(define-fun t73b__ref___projection ((a t73b__ref)) tcandidate_number_tB
  (t73b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(define-fun dynamic_invariant2 ((temp___expr_545 Int)
  (temp___is_init_542 Bool) (temp___skip_constant_543 Bool)
  (temp___do_toplevel_544 Bool)) Bool (=>
                                      (or (= temp___is_init_542 true)
                                      (<= 0 10000)) (in_range2
                                      temp___expr_545)))

(declare-fun winners () (Array Int Bool))

(declare-fun latest_highest_score () Int)

(declare-fun i () Int)

(declare-fun o () Int)

(declare-fun o1 () (Array Int Bool))

(declare-fun result () (Array Int Bool))

(declare-fun winners1 () (Array Int Bool))

(declare-fun result1 () Int)

(declare-fun latest_highest_score1 () Int)

(declare-fun result2 () (Array Int Bool))

(declare-fun winners2 () (Array Int Bool))

(declare-fun result3 () Int)

(declare-fun i1 () Int)

(declare-fun winners3 () (Array Int Bool))

(declare-fun latest_highest_score2 () Int)

(declare-fun i2 () Int)

(declare-fun j () Int)

(declare-fun result4 () Int)

(declare-fun j1 () Int)

(declare-fun winners4 () (Array Int Bool))

(declare-fun j2 () Int)

(declare-fun result5 () (Array Int Bool))

(declare-fun winners5 () (Array Int Bool))

(declare-fun result6 () Int)

(declare-fun j3 () Int)

;; H
  (assert (in_range1 program_phase))

;; H
  (assert (in_range4 last_candidate))

;; H
  (assert (= program_phase 2))

;; H
  (assert (=> (<= 0 20) (in_range4 latest_highest_score)))

;; H
  (assert (= (mk_map__ref1 result) (mk_map__ref1 winners)))

;; H
  (assert (= winners1 (store winners 0 (of_int 0))))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref latest_highest_score)))

;; H
  (assert (= latest_highest_score1 1))

;; H
  (assert (= winners1 result2))

;; H
  (assert (= winners2 (store winners1 latest_highest_score1 (of_int 1))))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref i)))

;; H
  (assert (= i1 2))

;; H
  (assert (<= 2 i1))

;; H
  (assert (<= i1 last_candidate))

;; H
  (assert
  (and
  (and
  (and (and (not (= (select winners3 0) true)) (< latest_highest_score2 i2))
  (= (select winners3 latest_highest_score2) true))
  (forall ((j4 Int))
  (=> (and (<= 1 j4) (<= j4 (- i2 1)))
  (=> (< latest_highest_score2 j4)
  (< (to_rep (select counters j4)) (to_rep
                                   (select counters latest_highest_score2)))))))
  (forall ((j4 Int))
  (=> (and (<= 1 j4) (<= j4 (- i2 1)))
  (ite (= (select winners3 j4) true)
  (= (to_rep (select counters latest_highest_score2)) (to_rep
                                                      (select counters j4)))
  (< (to_rep (select counters j4)) (to_rep
                                   (select counters latest_highest_score2))))))))

;; H
  (assert
  (and
  (and (=> (<= 2 last_candidate) (dynamic_property 2 last_candidate i2))
  (=> (<= 0 20) (in_range4 latest_highest_score2)))
  (and (<= 2 i2) (<= i2 last_candidate))))

;; H
  (assert
  (< (to_rep (select counters latest_highest_score2)) (to_rep
                                                      (select counters
                                                      i2))))

;; H
  (assert (= j result4))

;; H
  (assert (= j1 0))

;; H
  (assert (<= 0 j1))

;; H
  (assert (<= j1 (- i2 1)))

;; H
  (assert
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k (- j2 1))) (not (= (select winners4 k) true)))))

;; H
  (assert
  (and
  (and (=> (<= 0 (- i2 1)) (dynamic_property1 0 (- i2 1) j2))
  (forall ((temp___707 Int))
  (=> (and (<= 0 temp___707) (<= temp___707 20))
  (=> (<= j2 temp___707)
  (= (select winners4 temp___707) (select winners3 temp___707))))))
  (and (<= 0 j2) (<= j2 (- i2 1)))))

;; H
  (assert (and (<= 0 j2) (<= j2 20)))

;; H
  (assert (= o j2))

;; H
  (assert (= o1 (store winners4 o (of_int 0))))

;; H
  (assert (= winners4 result5))

;; H
  (assert (= winners5 o1))

;; H
  (assert (not (= j2 (- i2 1))))

;; H
  (assert (= result6 j2))

;; H
  (assert (= j3 (+ j2 1)))

(declare-fun k () Int)

;; H
  (assert (<= 0 k))

;; H
  (assert (<= k (- j3 1)))

(assert
;; WP_parameter_def
 ;; File "evoting.ads", line 48, characters 0-0
  (not (not (= (select winners5 k) true))))
(check-sat)
(exit)
