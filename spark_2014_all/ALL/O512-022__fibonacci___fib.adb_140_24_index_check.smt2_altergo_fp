(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type tintarrayD1

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tintarrayD1, tintarrayD1 -> bool

logic dummy2 : tintarrayD1

type tintarrayD1__ref = { tintarrayD1__content : tintarrayD1
}

function tintarrayD1__ref___projection(a: tintarrayD1__ref) : tintarrayD1 =
  (a).tintarrayD1__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b1 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic b2 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic c1 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c2 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

logic k1 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic k2 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall a1:(int,integer) farray. forall a2:(int,integer) farray.
  forall i:int. forall i1:int. forall i2:int. forall i3:int.
  forall temp___195:(int,integer) farray. forall o:int. forall o1:integer.
  forall o2:int. forall o3:integer. forall o4:int.
  forall o5:(int,integer) farray. forall temp___202:int.
  forall temp___200:(int,integer) farray. forall temp___199:int.
  forall o6:int. forall o7:integer. forall o8:int. forall o9:integer.
  forall o10:int. forall o11:(int,integer) farray.
  forall temp___204:(int,integer) farray. forall o12:int. forall o13:integer.
  forall o14:int. forall o15:integer. forall o16:int.
  forall o17:(int,integer) farray. forall temp___211:int.
  forall temp___208:int. forall a11:(int,integer) farray.
  forall a21:(int,integer) farray. forall result:int. forall i4:int.
  forall a12:(int,integer) farray. forall i5:int.
  forall result1:(int,integer) farray. forall a13:(int,integer) farray.
  forall a14:(int,integer) farray. forall i6:int.
  forall a15:(int,integer) farray. forall i7:int.
  forall a16:(int,integer) farray. forall i8:int.
  forall a17:(int,integer) farray. forall i9:int. forall result2:int.
  forall i10:int. forall a18:(int,integer) farray. forall i11:int.
  forall result3:(int,integer) farray. forall a19:(int,integer) farray.
  forall a110:(int,integer) farray. forall i12:int.
  forall a111:(int,integer) farray. forall i13:int.
  forall a112:(int,integer) farray. forall i14:int.
  forall a113:(int,integer) farray. forall i15:int. forall result4:int.
  forall i16:int. forall a22:(int,integer) farray. forall i17:int.
  forall result5:(int,integer) farray. forall a23:(int,integer) farray.
  forall a24:(int,integer) farray. forall i18:int.
  forall a25:(int,integer) farray. forall i19:int.
  forall a26:(int,integer) farray. forall i20:int.
  forall a27:(int,integer) farray. forall i21:int. forall result6:int.
  forall i22:int. forall a28:(int,integer) farray. forall i23:int.
  (in_range2(k1) -> (in_range2(k2) -> (((k1 = k2) and ((0 <= k1) and
  ((k1 <= 100) and ((0 <= k2) and ((k2 <= 100) and
  ((forall i24:int. (((0 <= i24) and (i24 <= k1)) ->
   (to_rep((b1[i24])) = to_rep((b2[i24]))))) and
  (forall i24:int. ((((k1 + 1) <= i24) and (i24 <= 100)) ->
  (to_rep((c1[(i24 - k1)])) = to_rep((c2[(i24 - k2)]))))))))))) -> (((({
  int__content = result } = { int__content = i }) and (i4 = 0)) and
  ((((0 <= i4) and (i4 <= k1)) and ((((temp___195 = a1) and
  (((forall temp___196:int. (((0 <= temp___196) and (temp___196 <= 100)) ->
    ((i5 <= temp___196) -> ((a12[temp___196]) = (temp___195[temp___196]))))) and
  ((0 <= i5) and (i5 <= k1))) and (((((((((0 <= i5) and (i5 <= 100)) and
  (o = i5)) and (o1 = (b1[o]))) and (o2 = to_rep(o1))) and
  (to_rep(o3) = o2)) and ((((0 <= i5) and (i5 <= 100)) and (o4 = i5)) and
  (o5 = (a12[o4 <- o3])))) and ((a12 = result1) and (a13 = o5))) and
  (i5 = k1)))) and (((i5 = i6) and (a13 = a14)) and ((i7 = i5) and
  (a15 = a13)))) and ((({ int__content = i8 } = { int__content = i6 }) and ({
  map__content = a16 } = { map__content = a14 })) and ((i9 = i7) and
  (a17 = a15))))) or ((not ((0 <= i4) and (i4 <= k1))) and (((i4 = i8) and ({
  map__content = a16 } = { map__content = a1 })) and ((i9 = i4) and
  (a17 = a11)))))) -> ((((temp___202 = (k1 + 1)) and in_range1((k1 + 1))) and
  ((({ int__content = result2 } = { int__content = i1 }) and
  (i10 = temp___202)) and ((((temp___202 <= i10) and (i10 <= 0)) and
  ((((temp___200 = a16) and
  (((forall temp___201:int. (((0 <= temp___201) and (temp___201 <= 100)) ->
    ((i11 <= temp___201) -> ((a18[temp___201]) = (temp___200[temp___201]))))) and
  (((k1 + 1) <= i11) and (i11 <= 0))) and
  (((((((((temp___199 = (i11 - k1)) and in_range1((i11 - k1))) and
  (((0 <= temp___199) and (temp___199 <= 100)) and (o6 = temp___199))) and
  (o7 = (c1[o6]))) and (o8 = to_rep(o7))) and (to_rep(o9) = o8)) and
  ((((0 <= i11) and (i11 <= 100)) and (o10 = i11)) and
  (o11 = (a18[o10 <- o9])))) and ((a18 = result3) and (a19 = o11))) and
  (i11 = 0)))) and (((i11 = i12) and (a19 = a110)) and ((i13 = i11) and
  (a111 = a19)))) and ((({ int__content = i14 } = { int__content = i12 }) and
  ({ map__content = a112 } = { map__content = a110 })) and ((i15 = i13) and
  (a113 = a111))))) or ((not ((temp___202 <= i10) and (i10 <= 0))) and
  (((i10 = i14) and ({ map__content = a112 } = { map__content = a16 })) and
  ((i15 = i10) and (a113 = a17))))))) -> ((((result4 = i2) and (i16 = 0)) and
  ((((0 <= i16) and (i16 <= k2)) and ((((temp___204 = a2) and
  (((forall temp___205:int. (((0 <= temp___205) and (temp___205 <= 100)) ->
    ((i17 <= temp___205) -> ((a22[temp___205]) = (temp___204[temp___205]))))) and
  ((0 <= i17) and (i17 <= k2))) and (((((((((0 <= i17) and (i17 <= 100)) and
  (o12 = i17)) and (o13 = (b2[o12]))) and (o14 = to_rep(o13))) and
  (to_rep(o15) = o14)) and ((((0 <= i17) and (i17 <= 100)) and
  (o16 = i17)) and (o17 = (a22[o16 <- o15])))) and ((result5 = a22) and
  (a23 = o17))) and (i17 = k2)))) and (((i17 = i18) and (a23 = a24)) and
  ((i19 = i17) and (a25 = a23)))) and ((({ int__content = i20 } = {
  int__content = i18 }) and ({ map__content = a26 } = { map__content = a24
  })) and ((i21 = i19) and (a27 = a25))))) or ((not ((0 <= i16) and
  (i16 <= k2))) and (((i16 = i20) and ({ map__content = a26 } = {
  map__content = a2 })) and ((i21 = i16) and (a27 = a21)))))) ->
  (((temp___211 = (k2 + 1)) and in_range1((k2 + 1))) -> (((result6 = i3) and
  (i22 = temp___211)) -> (((temp___211 <= i22) and (i22 <= 100)) ->
  (((forall temp___210:int. (((0 <= temp___210) and (temp___210 <= 100)) ->
    ((i23 <= temp___210) -> ((a28[temp___210]) = (a26[temp___210]))))) and
  (((k2 + 1) <= i23) and (i23 <= 100))) -> (((temp___208 = (i23 - k2)) and
  in_range1((i23 - k2))) -> (0 <= temp___208)))))))))))))
