;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int2 ((_ BitVec 64)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ((unsigned64__ref 0))
(((mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_202 (_ BitVec 64))
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)) Bool true)

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned8 unsigned8) Bool)

(declare-const dummy1 unsigned8)

(declare-datatypes ((unsigned8__ref 0))
(((mk_unsigned8__ref (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref___projection ((a unsigned8__ref)) unsigned8
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x unsigned8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; singleton_def
  (assert
  (forall ((v unsigned8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                               (select x86__memory addr))))
     (= (bvand result ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
     (= (bvand result ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
     (= (bvand result ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
     (= (bvand result ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
     (= (bvand result ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
     (= (bvand result ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
     (= (bvand result ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
     (to_rep (select x86__memory (bvadd addr ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
     (dynamic_invariant result true false true)))) :pattern ((readmem64 addr
                                                             x86__memory)) ))))

(define-fun dynamic_invariant1 ((temp___expr_220 (_ BitVec 8))
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)) Bool true)

(declare-const zeroflag Bool)

(declare-const carryflag Bool)

(declare-const signflag Bool)

(declare-const overflowflag Bool)

(declare-const xmm0 (_ BitVec 64))

(declare-const xmm1 (_ BitVec 64))

(declare-const xmm2 (_ BitVec 64))

(declare-const xmm3 (_ BitVec 64))

(declare-const xmm4 (_ BitVec 64))

(declare-const xmm5 (_ BitVec 64))

(declare-const xmm6 (_ BitVec 64))

(declare-const xmm7 (_ BitVec 64))

(declare-const rax (_ BitVec 64))

(declare-const rbx (_ BitVec 64))

(declare-const rsp (_ BitVec 64))

(declare-const rbp (_ BitVec 64))

(declare-const rsi (_ BitVec 64))

(declare-const rdi (_ BitVec 64))

(declare-const r12 (_ BitVec 64))

(declare-const r13 (_ BitVec 64))

(declare-const r14 (_ BitVec 64))

(declare-const memory map__ref)

(declare-const temp___485 (_ BitVec 64))

(declare-const temp___484 (_ BitVec 64))

(declare-const temp___483 (_ BitVec 64))

(declare-const temp___481 (_ BitVec 64))

(declare-const temp___482 (Array (_ BitVec 64) unsigned8))

(declare-const temp___479 (_ BitVec 64))

(declare-const temp___480 Bool)

(declare-const temp___477 (_ BitVec 64))

(declare-const temp___478 (_ BitVec 64))

(declare-const temp___475 (_ BitVec 64))

(declare-const temp___476 Bool)

(declare-const temp___474 (_ BitVec 64))

(declare-const temp___473 (_ BitVec 64))

(declare-const temp___471 (_ BitVec 64))

(declare-const temp___472 Bool)

(declare-const temp___470 (_ BitVec 64))

(declare-const temp___467 (_ BitVec 64))

(declare-const temp___468 (_ BitVec 64))

(declare-const temp___469 (_ BitVec 64))

(declare-const temp___487 (Array (_ BitVec 64) unsigned8))

(declare-const temp___466 Bool)

(declare-const temp___486 (_ BitVec 64))

(declare-const temp___465 (_ BitVec 64))

(declare-const temp___464 (_ BitVec 64))

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 64))

(declare-const o2 (_ BitVec 64))

(declare-const o3 (_ BitVec 64))

(declare-const xmm61 (_ BitVec 64))

(declare-const xmm71 (_ BitVec 64))

(declare-const rsp1 (_ BitVec 64))

(declare-const r131 (_ BitVec 64))

(declare-const r141 (_ BitVec 64))

(declare-const memory1 (Array (_ BitVec 64) unsigned8))

(declare-const result t__ref1)

(declare-const xmm72 (_ BitVec 64))

(declare-const result1 t__ref1)

(declare-const r132 (_ BitVec 64))

(declare-const memory2 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag1 Bool)

(declare-const carryflag1 Bool)

(declare-const signflag1 Bool)

(declare-const overflowflag1 Bool)

(declare-const xmm01 (_ BitVec 64))

(declare-const xmm11 (_ BitVec 64))

(declare-const xmm21 (_ BitVec 64))

(declare-const xmm31 (_ BitVec 64))

(declare-const xmm41 (_ BitVec 64))

(declare-const xmm51 (_ BitVec 64))

(declare-const xmm73 (_ BitVec 64))

(declare-const rax1 (_ BitVec 64))

(declare-const rbx1 (_ BitVec 64))

(declare-const rsp2 (_ BitVec 64))

(declare-const rbp1 (_ BitVec 64))

(declare-const rsi1 (_ BitVec 64))

(declare-const rdi1 (_ BitVec 64))

(declare-const r121 (_ BitVec 64))

(declare-const r133 (_ BitVec 64))

(declare-const memory3 (Array (_ BitVec 64) unsigned8))

(declare-const result2 t__ref1)

(declare-const xmm62 (_ BitVec 64))

(declare-const result3 t__ref1)

(declare-const r142 (_ BitVec 64))

(declare-const result4 bool__ref)

(declare-const zeroflag2 Bool)

(declare-const result5 t__ref1)

(declare-const xmm63 (_ BitVec 64))

(declare-const memory4 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag3 bool__ref)

(declare-const carryflag2 bool__ref)

(declare-const signflag2 bool__ref)

(declare-const overflowflag2 bool__ref)

(declare-const xmm02 t__ref1)

(declare-const xmm12 t__ref1)

(declare-const xmm22 t__ref1)

(declare-const xmm32 t__ref1)

(declare-const xmm42 t__ref1)

(declare-const xmm52 t__ref1)

(declare-const xmm64 t__ref1)

(declare-const xmm74 t__ref1)

(declare-const rax2 t__ref1)

(declare-const rbx2 t__ref1)

(declare-const rsp3 t__ref1)

(declare-const rbp2 t__ref1)

(declare-const rsi2 t__ref1)

(declare-const rdi2 t__ref1)

(declare-const r122 t__ref1)

(declare-const r134 t__ref1)

(declare-const r143 t__ref1)

(declare-const memory5 map__ref)

(declare-const zeroflag4 Bool)

(declare-const carryflag3 Bool)

(declare-const signflag3 Bool)

(declare-const overflowflag3 Bool)

(declare-const xmm03 (_ BitVec 64))

(declare-const xmm13 (_ BitVec 64))

(declare-const xmm23 (_ BitVec 64))

(declare-const xmm33 (_ BitVec 64))

(declare-const xmm43 (_ BitVec 64))

(declare-const xmm53 (_ BitVec 64))

(declare-const xmm65 (_ BitVec 64))

(declare-const xmm75 (_ BitVec 64))

(declare-const rax3 (_ BitVec 64))

(declare-const rbx3 (_ BitVec 64))

(declare-const rsp4 (_ BitVec 64))

(declare-const rbp3 (_ BitVec 64))

(declare-const rsi3 (_ BitVec 64))

(declare-const rdi3 (_ BitVec 64))

(declare-const r123 (_ BitVec 64))

(declare-const r135 (_ BitVec 64))

(declare-const r144 (_ BitVec 64))

(declare-const memory6 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag5 bool__ref)

(declare-const carryflag4 bool__ref)

(declare-const signflag4 bool__ref)

(declare-const overflowflag4 bool__ref)

(declare-const xmm04 t__ref1)

(declare-const xmm14 t__ref1)

(declare-const xmm24 t__ref1)

(declare-const xmm34 t__ref1)

(declare-const xmm44 t__ref1)

(declare-const xmm54 t__ref1)

(declare-const xmm66 t__ref1)

(declare-const xmm76 t__ref1)

(declare-const rax4 t__ref1)

(declare-const rbx4 t__ref1)

(declare-const rsp5 t__ref1)

(declare-const rbp4 t__ref1)

(declare-const rsi4 t__ref1)

(declare-const rdi4 t__ref1)

(declare-const r124 t__ref1)

(declare-const r136 t__ref1)

(declare-const r145 t__ref1)

(declare-const memory7 map__ref)

(declare-const zeroflag6 Bool)

(declare-const carryflag5 Bool)

(declare-const signflag5 Bool)

(declare-const overflowflag5 Bool)

(declare-const xmm05 (_ BitVec 64))

(declare-const xmm15 (_ BitVec 64))

(declare-const xmm25 (_ BitVec 64))

(declare-const xmm35 (_ BitVec 64))

(declare-const xmm45 (_ BitVec 64))

(declare-const xmm55 (_ BitVec 64))

(declare-const xmm67 (_ BitVec 64))

(declare-const xmm77 (_ BitVec 64))

(declare-const rax5 (_ BitVec 64))

(declare-const rbx5 (_ BitVec 64))

(declare-const rsp6 (_ BitVec 64))

(declare-const rbp5 (_ BitVec 64))

(declare-const rsi5 (_ BitVec 64))

(declare-const rdi5 (_ BitVec 64))

(declare-const r125 (_ BitVec 64))

(declare-const r137 (_ BitVec 64))

(declare-const r146 (_ BitVec 64))

(declare-const memory8 (Array (_ BitVec 64) unsigned8))

(declare-const zeroflag7 bool__ref)

(declare-const carryflag6 bool__ref)

(declare-const signflag6 bool__ref)

(declare-const overflowflag6 bool__ref)

(declare-const xmm06 t__ref1)

(declare-const xmm16 t__ref1)

(declare-const xmm26 t__ref1)

(declare-const xmm36 t__ref1)

(declare-const xmm46 t__ref1)

(declare-const xmm56 t__ref1)

(declare-const xmm68 t__ref1)

(declare-const xmm78 t__ref1)

(declare-const rax6 t__ref1)

(declare-const rbx6 t__ref1)

(declare-const rsp7 t__ref1)

(declare-const rbp6 t__ref1)

(declare-const rsi6 t__ref1)

(declare-const rdi6 t__ref1)

(declare-const r126 t__ref1)

(declare-const r138 t__ref1)

(declare-const r147 t__ref1)

(declare-const memory9 map__ref)

(declare-const zeroflag8 Bool)

(declare-const carryflag7 Bool)

(declare-const signflag7 Bool)

(declare-const overflowflag7 Bool)

(declare-const xmm07 (_ BitVec 64))

(declare-const xmm17 (_ BitVec 64))

(declare-const xmm27 (_ BitVec 64))

(declare-const xmm37 (_ BitVec 64))

(declare-const xmm47 (_ BitVec 64))

(declare-const xmm57 (_ BitVec 64))

(declare-const xmm69 (_ BitVec 64))

(declare-const xmm79 (_ BitVec 64))

(declare-const rax7 (_ BitVec 64))

(declare-const rbx7 (_ BitVec 64))

(declare-const rsp8 (_ BitVec 64))

(declare-const rbp7 (_ BitVec 64))

(declare-const rsi7 (_ BitVec 64))

(declare-const rdi7 (_ BitVec 64))

(declare-const r127 (_ BitVec 64))

(declare-const r139 (_ BitVec 64))

(declare-const r148 (_ BitVec 64))

(declare-const memory10 (Array (_ BitVec 64) unsigned8))

;; H
  (assert (= temp___485 rbx))

;; H
  (assert (= temp___484 xmm3))

;; H
  (assert (= temp___483 rsp))

;; H
  (assert (= temp___481 rsi))

;; H
  (assert (= temp___482 (map__content memory)))

;; H
  (assert (= temp___479 xmm2))

;; H
  (assert (= temp___480 overflowflag))

;; H
  (assert (= temp___477 r13))

;; H
  (assert (= temp___478 xmm7))

;; H
  (assert (= temp___475 xmm1))

;; H
  (assert (= temp___476 signflag))

;; H
  (assert (= temp___474 xmm6))

;; H
  (assert (= temp___473 rax))

;; H
  (assert (= temp___471 xmm0))

;; H
  (assert (= temp___472 carryflag))

;; H
  (assert (= temp___470 rbp))

;; H
  (assert (= temp___467 r12))

;; H
  (assert (= temp___468 rdi))

;; H
  (assert (= temp___469 xmm5))

;; H
  (assert (= temp___487 (map__content memory)))

;; H
  (assert (= temp___466 zeroflag))

;; H
  (assert (= temp___486 rsp))

;; H
  (assert (= temp___465 xmm4))

;; H
  (assert (= temp___464 r14))

;; H
  (assert (= rsp1 temp___486))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i rsp1)) (not (= i (bvadd rsp1 ((_ int2bv 64) 1)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 2)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 3)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 4)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 5)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 6)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 7)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 8)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 9)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 10)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 11)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 12)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 13)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 14)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 15)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 16)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 17)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 18)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 19)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 20)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 21)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 22)))))
  (not (= i (bvadd rsp1 ((_ int2bv 64) 23)))))
  (= (to_rep (select (let ((subject memory)) memory1) i)) (to_rep
                                                          (select temp___487 i)))))))

;; H
  (assert
  (and
  (= o (readmem64 ((_ int2bv 64) 4198752) (let ((subject memory)) memory1)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                       (select (let ((subject
                                                               memory))
                                                               memory1) ((_ int2bv 64) 4198752)))))
  (= (bvand o ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select
                                                                (let ((subject
                                                                memory))
                                                                memory1) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                   (select
                                                                   (let ((subject
                                                                   memory))
                                                                   memory1) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory1) (bvadd ((_ int2bv 64) 4198752) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result (mk_t__ref1 xmm71)))

;; H
  (assert (= xmm72 o))

;; H
  (assert (= result1 (mk_t__ref1 r131)))

;; H
  (assert (= r132 ((_ int2bv 64) 20)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm72 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select (let ((subject
                                                                   memory))
                                                                   memory2) (bvsub (bvadd
                                                           rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144))))))
  (= (bvand xmm72 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    (let ((subject
                                                                    memory))
                                                                    memory2) (bvadd (bvsub (bvadd
                                                                    rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm72 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm72 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm72 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm72 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm72 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm72 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory2) (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (not (= i (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144))))
  (not
  (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp1 ((_ int2bv 64) 152)) ((_ int2bv 64) 144)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory2) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory1) i))))))))

;; H
  (assert
  (and
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i rsp2)) (not (= i (bvadd rsp2 ((_ int2bv 64) 1)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 2)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 3)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 4)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 5)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 6)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 7)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 8)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 9)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 10)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 11)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 12)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 13)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 14)))))
  (not (= i (bvadd rsp2 ((_ int2bv 64) 15)))))
  (= (to_rep (select (let ((subject memory)) memory3) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory2) i))))))
  (= rsp2 rsp1)))

;; H
  (assert
  (and
  (= o1 (readmem64
        (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136))
        (let ((subject memory)) memory3)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o1 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select (let ((subject
                                                                memory))
                                                                memory3) (bvsub (bvadd
                                                        rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136))))))
  (= (bvand o1 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 (let ((subject
                                                                 memory))
                                                                 memory3) (bvadd (bvsub (bvadd
                                                                 rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o1 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    (let ((subject
                                                                    memory))
                                                                    memory3) (bvadd (bvsub (bvadd
                                                                    rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o1 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o1 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o1 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o1 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o1 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= result2 (mk_t__ref1 xmm61)))

;; H
  (assert (= xmm62 o1))

;; H
  (assert (= result3 (mk_t__ref1 r141)))

;; H
  (assert (= r142 (bvsub r141 ((_ int2bv 64) 1))))

;; H
  (assert (= result4 (mk_bool__ref zeroflag1)))

;; H
  (assert (= zeroflag2 (ite (= r142 ((_ int2bv 64) 0)) true false)))

;; H
  (assert
  (and
  (= o2 (readmem64 ((_ int2bv 64) 4198768) (let ((subject memory)) memory3)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o2 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                        (select (let ((subject
                                                                memory))
                                                                memory3) ((_ int2bv 64) 4198768)))))
  (= (bvand o2 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                 (select
                                                                 (let ((subject
                                                                 memory))
                                                                 memory3) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand o2 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    (let ((subject
                                                                    memory))
                                                                    memory3) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand o2 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand o2 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand o2 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand o2 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand o2 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory3) (bvadd ((_ int2bv 64) 4198768) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))))

;; H
  (assert (= o3 (bvsub xmm62 o2)))

;; H
  (assert (= result5 (mk_t__ref1 xmm62)))

;; H
  (assert (= xmm63 o3))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand xmm63 ((_ int2bv 64) 255)) ((_ zero_extend 56) (to_rep
                                                           (select (let ((subject
                                                                   memory))
                                                                   memory4) (bvsub (bvadd
                                                           rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136))))))
  (= (bvand xmm63 ((_ int2bv 64) 65280)) (bvmul ((_ zero_extend 56) (to_rep
                                                                    (select
                                                                    (let ((subject
                                                                    memory))
                                                                    memory4) (bvadd (bvsub (bvadd
                                                                    rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 1))))) ((_ int2bv 64) 256))))
  (= (bvand xmm63 ((_ int2bv 64) 16711680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 2))))) ((_ int2bv 64) 65536))))
  (= (bvand xmm63 ((_ int2bv 64) 4278190080)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 3))))) ((_ int2bv 64) 16777216))))
  (= (bvand xmm63 ((_ int2bv 64) 1095216660480)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 4))))) ((_ int2bv 64) 4294967296))))
  (= (bvand xmm63 ((_ int2bv 64) 280375465082880)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 5))))) ((_ int2bv 64) 1099511627776))))
  (= (bvand xmm63 ((_ int2bv 64) 71776119061217280)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 6))))) ((_ int2bv 64) 281474976710656))))
  (= (bvand xmm63 ((_ int2bv 64) 18374686479671623680)) (bvmul ((_ zero_extend 56)
  (to_rep
  (select (let ((subject memory)) memory4) (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 7))))) ((_ int2bv 64) 72057594037927936))))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i)
  (bvule i ((_ int2bv 64) 18446744073709551615)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (not (= i (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136))))
  (not
  (= i (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 1)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 2)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 3)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 4)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 5)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 6)))))
  (not
  (= i (bvadd (bvsub (bvadd rsp2 ((_ int2bv 64) 152)) ((_ int2bv 64) 136)) ((_ int2bv 64) 7)))))
  (= (to_rep (select (let ((subject memory)) memory4) i)) (to_rep
                                                          (select (let ((subject
                                                                  memory))
                                                                  memory3) i))))))))

;; H
  (assert (= zeroflag2 true))

;; H
  (assert (= memory5 (let ((subject memory)) (mk_map__ref memory4))))

;; H
  (assert (= r143 (mk_t__ref1 r142)))

;; H
  (assert (= r134 (mk_t__ref1 r133)))

;; H
  (assert (= r122 (mk_t__ref1 r121)))

;; H
  (assert (= rdi2 (mk_t__ref1 rdi1)))

;; H
  (assert (= rsi2 (mk_t__ref1 rsi1)))

;; H
  (assert (= rbp2 (mk_t__ref1 rbp1)))

;; H
  (assert (= rsp3 (mk_t__ref1 rsp2)))

;; H
  (assert (= rbx2 (mk_t__ref1 rbx1)))

;; H
  (assert (= rax2 (mk_t__ref1 rax1)))

;; H
  (assert (= xmm74 (mk_t__ref1 xmm73)))

;; H
  (assert (= xmm64 (mk_t__ref1 xmm63)))

;; H
  (assert (= xmm52 (mk_t__ref1 xmm51)))

;; H
  (assert (= xmm42 (mk_t__ref1 xmm41)))

;; H
  (assert (= xmm32 (mk_t__ref1 xmm31)))

;; H
  (assert (= xmm22 (mk_t__ref1 xmm21)))

;; H
  (assert (= xmm12 (mk_t__ref1 xmm11)))

;; H
  (assert (= xmm02 (mk_t__ref1 xmm01)))

;; H
  (assert (= overflowflag2 (mk_bool__ref overflowflag1)))

;; H
  (assert (= signflag2 (mk_bool__ref signflag1)))

;; H
  (assert (= carryflag2 (mk_bool__ref carryflag1)))

;; H
  (assert (= zeroflag3 (mk_bool__ref zeroflag2)))

;; H
  (assert (= memory6 memory4))

;; H
  (assert (= r144 r142))

;; H
  (assert (= r135 r133))

;; H
  (assert (= r123 r121))

;; H
  (assert (= rdi3 rdi1))

;; H
  (assert (= rsi3 rsi1))

;; H
  (assert (= rbp3 rbp1))

;; H
  (assert (= rsp4 rsp2))

;; H
  (assert (= rbx3 rbx1))

;; H
  (assert (= rax3 rax1))

;; H
  (assert (= xmm75 xmm73))

;; H
  (assert (= xmm65 xmm63))

;; H
  (assert (= xmm53 xmm51))

;; H
  (assert (= xmm43 xmm41))

;; H
  (assert (= xmm33 xmm31))

;; H
  (assert (= xmm23 xmm21))

;; H
  (assert (= xmm13 xmm11))

;; H
  (assert (= xmm03 xmm01))

;; H
  (assert (= overflowflag3 overflowflag1))

;; H
  (assert (= signflag3 signflag1))

;; H
  (assert (= carryflag3 carryflag1))

;; H
  (assert (= zeroflag4 zeroflag2))

;; H
  (assert (= memory7 memory5))

;; H
  (assert (= r145 r143))

;; H
  (assert (= r136 r134))

;; H
  (assert (= r124 r122))

;; H
  (assert (= rdi4 rdi2))

;; H
  (assert (= rsi4 rsi2))

;; H
  (assert (= rbp4 rbp2))

;; H
  (assert (= rsp5 rsp3))

;; H
  (assert (= rbx4 rbx2))

;; H
  (assert (= rax4 rax2))

;; H
  (assert (= xmm76 xmm74))

;; H
  (assert (= xmm66 xmm64))

;; H
  (assert (= xmm54 xmm52))

;; H
  (assert (= xmm44 xmm42))

;; H
  (assert (= xmm34 xmm32))

;; H
  (assert (= xmm24 xmm22))

;; H
  (assert (= xmm14 xmm12))

;; H
  (assert (= xmm04 xmm02))

;; H
  (assert (= overflowflag4 overflowflag2))

;; H
  (assert (= signflag4 signflag2))

;; H
  (assert (= carryflag4 carryflag2))

;; H
  (assert (= zeroflag5 zeroflag3))

;; H
  (assert (= memory8 memory6))

;; H
  (assert (= r146 r144))

;; H
  (assert (= r137 r135))

;; H
  (assert (= r125 r123))

;; H
  (assert (= rdi5 rdi3))

;; H
  (assert (= rsi5 rsi3))

;; H
  (assert (= rbp5 rbp3))

;; H
  (assert (= rsp6 rsp4))

;; H
  (assert (= rbx5 rbx3))

;; H
  (assert (= rax5 rax3))

;; H
  (assert (= xmm77 xmm75))

;; H
  (assert (= xmm67 xmm65))

;; H
  (assert (= xmm55 xmm53))

;; H
  (assert (= xmm45 xmm43))

;; H
  (assert (= xmm35 xmm33))

;; H
  (assert (= xmm25 xmm23))

;; H
  (assert (= xmm15 xmm13))

;; H
  (assert (= xmm05 xmm03))

;; H
  (assert (= overflowflag5 overflowflag3))

;; H
  (assert (= signflag5 signflag3))

;; H
  (assert (= carryflag5 carryflag3))

;; H
  (assert (= zeroflag6 zeroflag4))

;; H
  (assert (= memory9 memory7))

;; H
  (assert (= r147 r145))

;; H
  (assert (= r138 r136))

;; H
  (assert (= r126 r124))

;; H
  (assert (= rdi6 rdi4))

;; H
  (assert (= rsi6 rsi4))

;; H
  (assert (= rbp6 rbp4))

;; H
  (assert (= rsp7 rsp5))

;; H
  (assert (= rbx6 rbx4))

;; H
  (assert (= rax6 rax4))

;; H
  (assert (= xmm78 xmm76))

;; H
  (assert (= xmm68 xmm66))

;; H
  (assert (= xmm56 xmm54))

;; H
  (assert (= xmm46 xmm44))

;; H
  (assert (= xmm36 xmm34))

;; H
  (assert (= xmm26 xmm24))

;; H
  (assert (= xmm16 xmm14))

;; H
  (assert (= xmm06 xmm04))

;; H
  (assert (= overflowflag6 overflowflag4))

;; H
  (assert (= signflag6 signflag4))

;; H
  (assert (= carryflag6 carryflag4))

;; H
  (assert (= zeroflag7 zeroflag5))

;; H
  (assert (= memory10 memory8))

;; H
  (assert (= r148 r146))

;; H
  (assert (= r139 r137))

;; H
  (assert (= r127 r125))

;; H
  (assert (= rdi7 rdi5))

;; H
  (assert (= rsi7 rsi5))

;; H
  (assert (= rbp7 rbp5))

;; H
  (assert (= rsp8 rsp6))

;; H
  (assert (= rbx7 rbx5))

;; H
  (assert (= rax7 rax5))

;; H
  (assert (= xmm79 xmm77))

;; H
  (assert (= xmm69 xmm67))

;; H
  (assert (= xmm57 xmm55))

;; H
  (assert (= xmm47 xmm45))

;; H
  (assert (= xmm37 xmm35))

;; H
  (assert (= xmm27 xmm25))

;; H
  (assert (= xmm17 xmm15))

;; H
  (assert (= xmm07 xmm05))

;; H
  (assert (= overflowflag7 overflowflag5))

;; H
  (assert (= signflag7 signflag5))

;; H
  (assert (= carryflag7 carryflag5))

;; H
  (assert (= zeroflag8 zeroflag6))

(declare-const i (_ BitVec 64))

;; H
  (assert (bvule ((_ int2bv 64) 0) i))

;; H
  (assert (bvule i ((_ int2bv 64) 18446744073709551615)))

;; H
  (assert (not (= i (t__content1 rsp7))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 1)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 2)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 3)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 4)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 5)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 6)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 7)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 8)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 9)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 10)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 11)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 12)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 13)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 14)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 15)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 16)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 17)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 18)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 19)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 20)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 21)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 22)))))

;; H
  (assert (not (= i (bvadd (t__content1 rsp7) ((_ int2bv 64) 23)))))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 334, characters 0-0
  (not
  (= (to_rep (select (map__content memory9) i)) (to_rep
                                                (select (map__content memory)
                                                i)))))
(check-sat)
(exit)
