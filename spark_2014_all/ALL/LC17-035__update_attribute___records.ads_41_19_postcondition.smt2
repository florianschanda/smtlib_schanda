;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort my_range 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (my_range my_range) Bool)

(declare-const dummy2 my_range)

(declare-datatypes ((my_range__ref 0))
(((mk_my_range__ref (my_range__content my_range)))))
(define-fun my_range__ref___projection ((a my_range__ref)) my_range (my_range__content
                                                                    a))

(declare-fun to_rep2 (my_range) Int)

(declare-fun of_rep2 (Int) my_range)

;; inversion_axiom
  (assert
  (forall ((x my_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x my_range)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__types__rec__s1 integer)(rec__types__rec__s2 natural)(rec__types__rec__s3 my_range)(rec__types__rec__s4 integer)))))
(define-fun us_split_fields_S1__projection ((a us_split_fields)) integer
  (rec__types__rec__s1 a))

(define-fun us_split_fields_S2__projection ((a us_split_fields)) natural
  (rec__types__rec__s2 a))

(define-fun us_split_fields_S3__projection ((a us_split_fields)) my_range
  (rec__types__rec__s3 a))

(define-fun us_split_fields_S4__projection ((a us_split_fields)) integer
  (rec__types__rec__s4 a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep
                           (rec__types__rec__s1 (us_split_fields1 a)))
                        (to_rep (rec__types__rec__s1 (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__types__rec__s2 (us_split_fields1 a)))
                        (to_rep1 (rec__types__rec__s2 (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__types__rec__s3 (us_split_fields1 a)))
                        (to_rep2 (rec__types__rec__s3 (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__types__rec__s4 (us_split_fields1 a)))
                        (to_rep (rec__types__rec__s4 (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const types__rec__s1__first__bit Int)

(declare-const types__rec__s1__last__bit Int)

(declare-const types__rec__s1__position Int)

;; types__rec__s1__first__bit_axiom
  (assert (<= 0 types__rec__s1__first__bit))

;; types__rec__s1__last__bit_axiom
  (assert (< types__rec__s1__first__bit types__rec__s1__last__bit))

;; types__rec__s1__position_axiom
  (assert (<= 0 types__rec__s1__position))

(declare-const types__rec__s2__first__bit Int)

(declare-const types__rec__s2__last__bit Int)

(declare-const types__rec__s2__position Int)

;; types__rec__s2__first__bit_axiom
  (assert (<= 0 types__rec__s2__first__bit))

;; types__rec__s2__last__bit_axiom
  (assert (< types__rec__s2__first__bit types__rec__s2__last__bit))

;; types__rec__s2__position_axiom
  (assert (<= 0 types__rec__s2__position))

(declare-const types__rec__s3__first__bit Int)

(declare-const types__rec__s3__last__bit Int)

(declare-const types__rec__s3__position Int)

;; types__rec__s3__first__bit_axiom
  (assert (<= 0 types__rec__s3__first__bit))

;; types__rec__s3__last__bit_axiom
  (assert (< types__rec__s3__first__bit types__rec__s3__last__bit))

;; types__rec__s3__position_axiom
  (assert (<= 0 types__rec__s3__position))

(declare-const types__rec__s4__first__bit Int)

(declare-const types__rec__s4__last__bit Int)

(declare-const types__rec__s4__position Int)

;; types__rec__s4__first__bit_axiom
  (assert (<= 0 types__rec__s4__first__bit))

;; types__rec__s4__last__bit_axiom
  (assert (< types__rec__s4__first__bit types__rec__s4__last__bit))

;; types__rec__s4__position_axiom
  (assert (<= 0 types__rec__s4__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((rec____ref 0))
(((mk_rec____ref (rec____content us_rep)))))
(define-fun rec____ref___projection ((a rec____ref)) us_rep (rec____content
                                                            a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_185 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)) Bool (=>
                                      (or (= temp___is_init_182 true)
                                      (<= 1 10)) (in_range2 temp___expr_185)))

(declare-const r__split_fields integer)

(declare-const r__split_fields1 natural)

(declare-const r__split_fields2 my_range)

(declare-const r__split_fields3 integer)

(declare-const o natural)

(declare-const o1 integer)

(declare-const o2 natural)

(declare-const o3 my_range)

(declare-const o4 integer)

(declare-const temp___246 integer)

(declare-const temp___2461 natural)

(declare-const temp___2462 my_range)

(declare-const temp___2463 integer)

(declare-const o5 my_range)

(declare-const o6 integer)

(declare-const o7 natural)

(declare-const o8 my_range)

(declare-const o9 integer)

(declare-const temp___248 integer)

(declare-const temp___2481 natural)

(declare-const temp___2482 my_range)

(declare-const temp___2483 integer)

(declare-const o10 integer)

(declare-const o11 integer)

(declare-const o12 natural)

(declare-const o13 my_range)

(declare-const o14 integer)

(declare-const temp___250 integer)

(declare-const temp___2501 natural)

(declare-const temp___2502 my_range)

(declare-const temp___2503 integer)

(declare-const result integer)

(declare-const result1 natural)

(declare-const result2 my_range)

(declare-const result3 integer)

(declare-const r__split_fields4 integer)

(declare-const r__split_fields5 natural)

(declare-const r__split_fields6 my_range)

(declare-const r__split_fields7 integer)

(declare-const result4 integer)

(declare-const result5 natural)

(declare-const result6 my_range)

(declare-const result7 integer)

(declare-const r__split_fields8 integer)

(declare-const r__split_fields9 natural)

(declare-const r__split_fields10 my_range)

(declare-const r__split_fields11 integer)

(declare-const result8 integer)

(declare-const result9 natural)

(declare-const result10 my_range)

(declare-const result11 integer)

(declare-const r__split_fields12 integer)

(declare-const r__split_fields13 natural)

(declare-const r__split_fields14 my_range)

(declare-const r__split_fields15 integer)

(declare-const r__split_fields16 integer)

(declare-const r__split_fields17 natural)

(declare-const r__split_fields18 my_range)

(declare-const r__split_fields19 integer)

(declare-const r__split_fields20 us_split_fields)

;; H
  (assert (= (to_rep1 o) 2))

;; H
  (assert (= r__split_fields o1))

;; H
  (assert (= o o2))

;; H
  (assert (= r__split_fields2 o3))

;; H
  (assert (= r__split_fields3 o4))

;; H
  (assert (= temp___246 o1))

;; H
  (assert (= temp___2461 o2))

;; H
  (assert (= temp___2462 o3))

;; H
  (assert (= temp___2463 o4))

;; H
  (assert (= result r__split_fields))

;; H
  (assert (= result1 r__split_fields1))

;; H
  (assert (= result2 r__split_fields2))

;; H
  (assert (= result3 r__split_fields3))

;; H
  (assert (= temp___246 r__split_fields4))

;; H
  (assert (= temp___2461 r__split_fields5))

;; H
  (assert (= temp___2462 r__split_fields6))

;; H
  (assert (= temp___2463 r__split_fields7))

;; H
  (assert (= (to_rep2 o5) 3))

;; H
  (assert (= r__split_fields4 o6))

;; H
  (assert (= r__split_fields5 o7))

;; H
  (assert (= o5 o8))

;; H
  (assert (= r__split_fields7 o9))

;; H
  (assert (= temp___248 o6))

;; H
  (assert (= temp___2481 o7))

;; H
  (assert (= temp___2482 o8))

;; H
  (assert (= temp___2483 o9))

;; H
  (assert (= result4 r__split_fields4))

;; H
  (assert (= result5 r__split_fields5))

;; H
  (assert (= result6 r__split_fields6))

;; H
  (assert (= result7 r__split_fields7))

;; H
  (assert (= temp___248 r__split_fields8))

;; H
  (assert (= temp___2481 r__split_fields9))

;; H
  (assert (= temp___2482 r__split_fields10))

;; H
  (assert (= temp___2483 r__split_fields11))

;; H
  (assert (= (to_rep o10) (to_rep r__split_fields8)))

;; H
  (assert (= r__split_fields8 o11))

;; H
  (assert (= r__split_fields9 o12))

;; H
  (assert (= r__split_fields10 o13))

;; H
  (assert (= o10 o14))

;; H
  (assert (= temp___250 o11))

;; H
  (assert (= temp___2501 o12))

;; H
  (assert (= temp___2502 o13))

;; H
  (assert (= temp___2503 o14))

;; H
  (assert (= result8 r__split_fields8))

;; H
  (assert (= result9 r__split_fields9))

;; H
  (assert (= result10 r__split_fields10))

;; H
  (assert (= result11 r__split_fields11))

;; H
  (assert (= temp___250 r__split_fields12))

;; H
  (assert (= temp___2501 r__split_fields13))

;; H
  (assert (= temp___2502 r__split_fields14))

;; H
  (assert (= temp___2503 r__split_fields15))

;; H
  (assert (= r__split_fields16 r__split_fields12))

;; H
  (assert (= r__split_fields17 r__split_fields13))

;; H
  (assert (= r__split_fields18 r__split_fields14))

;; H
  (assert (= r__split_fields19 r__split_fields15))

;; H
  (assert
  (= r__split_fields20 (mk___split_fields r__split_fields12 r__split_fields13
                       r__split_fields14 r__split_fields15)))

(assert
;; WP_parameter_def
 ;; File "records.ads", line 33, characters 0-0
  (not
  (= (bool_eq
     (mk___rep
     (mk___split_fields r__split_fields16 r__split_fields17 r__split_fields18
     r__split_fields19))
     (mk___rep
     (mk___split_fields r__split_fields (of_rep1 2) (of_rep2 3)
     r__split_fields))) true)))
(check-sat)
(exit)
