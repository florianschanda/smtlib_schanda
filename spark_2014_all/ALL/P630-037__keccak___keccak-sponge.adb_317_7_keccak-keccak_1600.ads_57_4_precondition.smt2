;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort byte 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (byte byte) Bool)

(declare-fun dummy1 () byte)

(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))

(declare-fun to_rep1 (byte) (_ BitVec 8))

(declare-fun of_rep1 ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x byte)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int byte))))))
(declare-fun slide ((Array Int byte) Int Int) (Array Int byte))

;; slide_eq
  (assert
  (forall ((a (Array Int byte)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int byte)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int byte) Int Int (Array Int byte) Int
  Int) (Array Int byte))

;; concat_def
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (byte Int) (Array Int byte))

;; singleton_def
  (assert
  (forall ((v byte))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int byte)) (a__first Int) (a__last Int)
  (b (Array Int byte)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int byte) Int Int (Array Int byte) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort index_number 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (index_number index_number) Bool)

(declare-fun dummy2 () index_number)

(declare-datatypes ()
((index_number__ref
 (mk_index_number__ref (index_number__content index_number)))))
(define-fun index_number__ref___projection ((a index_number__ref)) index_number
  (index_number__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int byte))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int byte) (elts a))

(define-fun of_array ((a (Array Int byte)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int byte)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int byte)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-datatypes ()
((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content
                                                                    a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int4 ((_ BitVec 64)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort lane_type 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (lane_type lane_type) Bool)

(declare-fun dummy4 () lane_type)

(declare-datatypes ()
((lane_type__ref (mk_lane_type__ref (lane_type__content lane_type)))))
(define-fun lane_type__ref___projection ((a lane_type__ref)) lane_type
  (lane_type__content a))

(declare-fun to_rep2 (lane_type) (_ BitVec 64))

(declare-fun of_rep2 ((_ BitVec 64)) lane_type)

;; inversion_axiom
  (assert
  (forall ((x lane_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int5 ((x lane_type)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x lane_type)) (! (uint_in_range1
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 map1)))))
(declare-fun get (map1 (_ BitVec 8) (_ BitVec 8)) lane_type)

(declare-fun set (map1 (_ BitVec 8) (_ BitVec 8) lane_type) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (forall ((a lane_type))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)) (i2 (_ BitVec 8)))
  (forall ((j (_ BitVec 8)) (j2 (_ BitVec 8)))
  (forall ((a lane_type))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first (_ BitVec 8)) (old_first (_ BitVec 8)))
  (forall ((new_first_2 (_ BitVec 8)) (old_first_2 (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j)
  (get a (bvsub i (bvsub new_first old_first))
  (bvsub j (bvsub new_first_2 old_first_2)))) :pattern ((get
                                                        (slide1 a old_first
                                                        new_first old_first_2
                                                        new_first_2) i j)) )))))))

(define-fun bool_eq2 ((a map1) (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b map1)
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8))
  (b__last_2 (_ BitVec 8))) Bool (ite (and
                                      (and
                                      (ite (bvule a__first a__last)
                                      (and (bvule b__first b__last)
                                      (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                      (bvugt b__first b__last))
                                      (ite (bvule a__first_2 a__last_2)
                                      (and (bvule b__first_2 b__last_2)
                                      (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
                                      (bvugt b__first_2 b__last_2)))
                                      (forall ((temp___idx_133 (_ BitVec 8))
                                      (temp___idx_134 (_ BitVec 8)))
                                      (=>
                                      (and
                                      (and (bvule a__first temp___idx_133)
                                      (bvule temp___idx_133 a__last))
                                      (and (bvule a__first_2 temp___idx_134)
                                      (bvule temp___idx_134 a__last_2)))
                                      (= (to_rep2
                                         (get a temp___idx_133
                                         temp___idx_134)) (to_rep2
                                                          (get b
                                                          (bvadd (bvsub b__first a__first) temp___idx_133)
                                                          (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)))))))
                                 true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8)))
  (=>
  (= (bool_eq2 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (ite (bvule a__first_2 a__last_2)
  (and (bvule b__first_2 b__last_2)
  (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
  (bvugt b__first_2 b__last_2)))
  (forall ((temp___idx_133 (_ BitVec 8)) (temp___idx_134 (_ BitVec 8)))
  (=>
  (and (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last))
  (and (bvule a__first_2 temp___idx_134) (bvule temp___idx_134 a__last_2)))
  (= (to_rep2 (get a temp___idx_133 temp___idx_134)) (to_rep2
                                                     (get b
                                                     (bvadd (bvsub b__first a__first) temp___idx_133)
                                                     (bvadd (bvsub b__first_2 a__first_2) temp___idx_134)))))))))))

(declare-sort states 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (states states) Bool)

(declare-fun dummy5 () states)

(declare-datatypes ()
((states__ref (mk_states__ref (states__content states)))))
(define-fun states__ref___projection ((a states__ref)) states (states__content
                                                              a))

(declare-fun to_rep3 (states) Int)

(declare-fun of_rep3 (Int) states)

;; inversion_axiom
  (assert
  (forall ((x states))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x states)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort byte_absorption_number 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 199)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (byte_absorption_number byte_absorption_number) Bool)

(declare-fun dummy6 () byte_absorption_number)

(declare-datatypes ()
((byte_absorption_number__ref
 (mk_byte_absorption_number__ref
 (byte_absorption_number__content byte_absorption_number)))))
(define-fun byte_absorption_number__ref___projection ((a byte_absorption_number__ref)) byte_absorption_number
  (byte_absorption_number__content a))

(declare-fun to_rep4 (byte_absorption_number) Int)

(declare-fun of_rep4 (Int) byte_absorption_number)

;; inversion_axiom
  (assert
  (forall ((x byte_absorption_number))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x byte_absorption_number)) (! (in_range4
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort bit_absorption_number 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1599)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (bit_absorption_number bit_absorption_number) Bool)

(declare-fun dummy7 () bit_absorption_number)

(declare-datatypes ()
((bit_absorption_number__ref
 (mk_bit_absorption_number__ref
 (bit_absorption_number__content bit_absorption_number)))))
(define-fun bit_absorption_number__ref___projection ((a bit_absorption_number__ref)) bit_absorption_number
  (bit_absorption_number__content a))

(declare-fun to_rep5 (bit_absorption_number) Int)

(declare-fun of_rep5 (Int) bit_absorption_number)

;; inversion_axiom
  (assert
  (forall ((x bit_absorption_number))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x bit_absorption_number)) (! (in_range5
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort rate_number 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 199)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (rate_number rate_number) Bool)

(declare-fun dummy8 () rate_number)

(declare-datatypes ()
((rate_number__ref (mk_rate_number__ref (rate_number__content rate_number)))))
(define-fun rate_number__ref___projection ((a rate_number__ref)) rate_number
  (rate_number__content a))

(declare-fun to_rep6 (rate_number) Int)

(declare-fun of_rep6 (Int) rate_number)

;; inversion_axiom
  (assert
  (forall ((x rate_number))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x rate_number)) (! (in_range6
  (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-fun dummy9 () map1)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (map1) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 (map1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq9 (map1 map1) Bool)

(declare-fun dummy10 () (Array Int byte))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int byte)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int byte)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq10 ((Array Int byte) (Array Int byte)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__keccak__keccak_1600__sponge__context__state map1)(rec__keccak__keccak_1600__sponge__context__block (Array Int byte))(rec__keccak__keccak_1600__sponge__context__bits_absorbed bit_absorption_number)(rec__keccak__keccak_1600__sponge__context__bytes_squeezed byte_absorption_number)(rec__keccak__keccak_1600__sponge__context__rate rate_number)(rec__keccak__keccak_1600__sponge__context__curr_state states)))))
(define-fun us_split_fields_State__projection ((a us_split_fields)) map1
  (rec__keccak__keccak_1600__sponge__context__state a))

(define-fun us_split_fields_Block__projection ((a us_split_fields)) (Array Int byte)
  (rec__keccak__keccak_1600__sponge__context__block a))

(define-fun us_split_fields_Bits_Absorbed__projection ((a us_split_fields)) bit_absorption_number
  (rec__keccak__keccak_1600__sponge__context__bits_absorbed a))

(define-fun us_split_fields_Bytes_Squeezed__projection ((a us_split_fields)) byte_absorption_number
  (rec__keccak__keccak_1600__sponge__context__bytes_squeezed a))

(define-fun us_split_fields_Rate__projection ((a us_split_fields)) rate_number
  (rec__keccak__keccak_1600__sponge__context__rate a))

(define-fun us_split_fields_Curr_State__projection ((a us_split_fields)) states
  (rec__keccak__keccak_1600__sponge__context__curr_state a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (and
                        (= (bool_eq2
                           (rec__keccak__keccak_1600__sponge__context__state
                           (us_split_fields1 a)) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4) ((_ int2bv 8) 0) ((_ int2bv 8) 4)
                           (rec__keccak__keccak_1600__sponge__context__state
                           (us_split_fields1 b)) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4) ((_ int2bv 8) 0)
                           ((_ int2bv 8) 4)) true)
                        (= (bool_eq
                           (rec__keccak__keccak_1600__sponge__context__block
                           (us_split_fields1 a)) 0 199
                           (rec__keccak__keccak_1600__sponge__context__block
                           (us_split_fields1 b)) 0 199) true))
                        (= (to_rep5
                           (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                           (us_split_fields1 a))) (to_rep5
                                                  (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                                                  (us_split_fields1 b)))))
                        (= (to_rep4
                           (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
                                                  (us_split_fields1 b)))))
                        (= (to_rep6
                           (rec__keccak__keccak_1600__sponge__context__rate
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__keccak__keccak_1600__sponge__context__rate
                                                  (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__keccak__keccak_1600__sponge__context__curr_state
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__keccak__keccak_1600__sponge__context__curr_state
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-fun keccak__keccak_1600__sponge__context__state__first__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__state__last__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__state__position () Int)

;; keccak__keccak_1600__sponge__context__state__first__bit_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__state__first__bit))

;; keccak__keccak_1600__sponge__context__state__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__state__first__bit keccak__keccak_1600__sponge__context__state__last__bit))

;; keccak__keccak_1600__sponge__context__state__position_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__state__position))

(declare-fun keccak__keccak_1600__sponge__context__block__first__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__block__last__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__block__position () Int)

;; keccak__keccak_1600__sponge__context__block__first__bit_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__block__first__bit))

;; keccak__keccak_1600__sponge__context__block__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__block__first__bit keccak__keccak_1600__sponge__context__block__last__bit))

;; keccak__keccak_1600__sponge__context__block__position_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__block__position))

(declare-fun keccak__keccak_1600__sponge__context__bits_absorbed__first__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__bits_absorbed__last__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__bits_absorbed__position () Int)

;; keccak__keccak_1600__sponge__context__bits_absorbed__first__bit_axiom
  (assert
  (<= 0 keccak__keccak_1600__sponge__context__bits_absorbed__first__bit))

;; keccak__keccak_1600__sponge__context__bits_absorbed__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__bits_absorbed__first__bit
  keccak__keccak_1600__sponge__context__bits_absorbed__last__bit))

;; keccak__keccak_1600__sponge__context__bits_absorbed__position_axiom
  (assert
  (<= 0 keccak__keccak_1600__sponge__context__bits_absorbed__position))

(declare-fun keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__bytes_squeezed__position () Int)

;; keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit_axiom
  (assert
  (<= 0 keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit))

;; keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit
  keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit))

;; keccak__keccak_1600__sponge__context__bytes_squeezed__position_axiom
  (assert
  (<= 0 keccak__keccak_1600__sponge__context__bytes_squeezed__position))

(declare-fun keccak__keccak_1600__sponge__context__rate__first__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__rate__last__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__rate__position () Int)

;; keccak__keccak_1600__sponge__context__rate__first__bit_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__rate__first__bit))

;; keccak__keccak_1600__sponge__context__rate__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__rate__first__bit keccak__keccak_1600__sponge__context__rate__last__bit))

;; keccak__keccak_1600__sponge__context__rate__position_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__rate__position))

(declare-fun keccak__keccak_1600__sponge__context__curr_state__first__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__curr_state__last__bit () Int)

(declare-fun keccak__keccak_1600__sponge__context__curr_state__position () Int)

;; keccak__keccak_1600__sponge__context__curr_state__first__bit_axiom
  (assert
  (<= 0 keccak__keccak_1600__sponge__context__curr_state__first__bit))

;; keccak__keccak_1600__sponge__context__curr_state__last__bit_axiom
  (assert
  (< keccak__keccak_1600__sponge__context__curr_state__first__bit keccak__keccak_1600__sponge__context__curr_state__last__bit))

;; keccak__keccak_1600__sponge__context__curr_state__position_axiom
  (assert (<= 0 keccak__keccak_1600__sponge__context__curr_state__position))

(declare-fun user_eq11 (us_rep us_rep) Bool)

(declare-fun dummy11 () us_rep)

(declare-datatypes ()
((context__ref (mk_context__ref (context__content us_rep)))))
(define-fun context__ref___projection ((a context__ref)) us_rep (context__content
                                                                a))

(declare-fun state_of (us_rep) Int)

(declare-fun state_of__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant1 ((temp___expr_364 Int)
  (temp___is_init_361 Bool) (temp___skip_constant_362 Bool)
  (temp___do_toplevel_363 Bool)) Bool (=>
                                      (or (= temp___is_init_361 true)
                                      (<= 0 1)) (in_range3 temp___expr_364)))

;; state_of__post_axiom
  (assert
  (forall ((ctx us_rep)) (! (dynamic_invariant1 (state_of ctx) true false
  true) :pattern ((state_of ctx)) )))

;; state_of__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (state_of ctx) (to_rep3
                       (rec__keccak__keccak_1600__sponge__context__curr_state
                       (us_split_fields1 ctx)))) :pattern ((state_of ctx)) )))

(declare-fun rate_of (us_rep) Int)

(declare-fun rate_of__function_guard (Int us_rep) Bool)

(declare-sort positive 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (positive positive) Bool)

(declare-fun dummy12 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range7
                                     temp___expr_39)))

;; rate_of__post_axiom
  (assert
  (forall ((ctx us_rep))
  (! (let ((result (rate_of ctx)))
     (and (< result 1600) (dynamic_invariant2 result true false true))) :pattern (
  (rate_of ctx)) )))

;; rate_of__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (rate_of ctx) (* (to_rep6
                         (rec__keccak__keccak_1600__sponge__context__rate
                         (us_split_fields1 ctx))) 8)) :pattern ((rate_of ctx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort tTnext_blockSP1 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 199)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (tTnext_blockSP1 tTnext_blockSP1) Bool)

(declare-fun dummy13 () tTnext_blockSP1)

(declare-datatypes ()
((tTnext_blockSP1__ref
 (mk_tTnext_blockSP1__ref (tTnext_blockSP1__content tTnext_blockSP1)))))
(define-fun tTnext_blockSP1__ref___projection ((a tTnext_blockSP1__ref)) tTnext_blockSP1
  (tTnext_blockSP1__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun r114s () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq14 (integer integer) Bool)

(declare-fun dummy14 () integer)

(declare-datatypes ()
((t115s__ref (mk_t115s__ref (t115s__content integer)))))
(define-fun t115s__ref___projection ((a t115s__ref)) integer (t115s__content
                                                             a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int byte))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int byte) (elts1 a))

(define-fun of_array1 ((a (Array Int byte)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int byte)) Int)

(declare-fun value__component__size3 () Int)

(declare-fun object__component__size3 ((Array Int byte)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq4 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq15 (us_t1 us_t1) Bool)

(declare-fun dummy15 () us_t1)

(declare-datatypes () ((t116s__ref (mk_t116s__ref (t116s__content us_t1)))))
(define-fun t116s__ref___projection ((a t116s__ref)) us_t1 (t116s__content a))

(declare-fun r119s () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun r122s () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq16 (integer integer) Bool)

(declare-fun dummy16 () integer)

(declare-datatypes ()
((t120s__ref (mk_t120s__ref (t120s__content integer)))))
(define-fun t120s__ref___projection ((a t120s__ref)) integer (t120s__content
                                                             a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)))) :pattern (
  (mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int byte))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int byte) (elts2 a))

(define-fun of_array2 ((a (Array Int byte)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-fun value__size5 () Int)

(declare-fun object__size5 ((Array Int byte)) Int)

(declare-fun value__component__size4 () Int)

(declare-fun object__component__size4 ((Array Int byte)) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size4))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment5 a))))

(define-fun bool_eq5 ((x us_t2)
  (y us_t2)) Bool (bool_eq (elts2 x) (to_rep (first4 (rt2 x)))
                  (to_rep (last4 (rt2 x))) (elts2 y)
                  (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))

(declare-fun user_eq17 (us_t2 us_t2) Bool)

(declare-fun dummy17 () us_t2)

(declare-datatypes () ((t121s__ref (mk_t121s__ref (t121s__content us_t2)))))
(define-fun t121s__ref___projection ((a t121s__ref)) us_t2 (t121s__content a))

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq18 (integer integer) Bool)

(declare-fun dummy18 () integer)

(declare-datatypes ()
((t123s__ref (mk_t123s__ref (t123s__content integer)))))
(define-fun t123s__ref___projection ((a t123s__ref)) integer (t123s__content
                                                             a))

(declare-sort t3 0)

(declare-fun first6 (t3) integer)

(declare-fun last6 (t3) integer)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first6 (mk3 f l))) f) (= (to_rep (last6 (mk3 f l))) l)))) :pattern (
  (mk3 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property5 range_first range_last low)
                   (dynamic_property5 range_first range_last high))))))

(declare-datatypes () ((us_t3 (mk___t3 (elts3 (Array Int byte))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int byte) (elts3 a))

(define-fun of_array3 ((a (Array Int byte)) (f Int)
  (l Int)) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) Int (to_rep (first6 (rt3 a))))

(define-fun last7 ((a us_t3)) Int (to_rep (last6 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (<= (first7 a) (last7 a))
                                    (+ (- (last7 a) (first7 a)) 1) 0))

(declare-fun value__size6 () Int)

(declare-fun object__size6 ((Array Int byte)) Int)

(declare-fun value__component__size5 () Int)

(declare-fun object__component__size5 ((Array Int byte)) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size5))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment6 a))))

(define-fun bool_eq6 ((x us_t3)
  (y us_t3)) Bool (bool_eq (elts3 x) (to_rep (first6 (rt3 x)))
                  (to_rep (last6 (rt3 x))) (elts3 y)
                  (to_rep (first6 (rt3 y))) (to_rep (last6 (rt3 y)))))

(declare-fun user_eq19 (us_t3 us_t3) Bool)

(declare-fun dummy19 () us_t3)

(declare-datatypes () ((t124s__ref (mk_t124s__ref (t124s__content us_t3)))))
(define-fun t124s__ref___projection ((a t124s__ref)) us_t3 (t124s__content a))

(declare-fun r125s () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_property7 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq20 (integer integer) Bool)

(declare-fun dummy20 () integer)

(declare-datatypes ()
((t126s__ref (mk_t126s__ref (t126s__content integer)))))
(define-fun t126s__ref___projection ((a t126s__ref)) integer (t126s__content
                                                             a))

(declare-sort t4 0)

(declare-fun first8 (t4) integer)

(declare-fun last8 (t4) integer)

(declare-fun mk4 (Int Int) t4)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first8 (mk4 f l))) f) (= (to_rep (last8 (mk4 f l))) l)))) :pattern (
  (mk4 f l)) )))

(define-fun dynamic_property8 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property7 range_first range_last low)
                   (dynamic_property7 range_first range_last high))))))

(declare-datatypes () ((us_t4 (mk___t4 (elts4 (Array Int byte))(rt4 t4)))))
(define-fun to_array4 ((a us_t4)) (Array Int byte) (elts4 a))

(define-fun of_array4 ((a (Array Int byte)) (f Int)
  (l Int)) us_t4 (mk___t4 a (mk4 f l)))

(define-fun first9 ((a us_t4)) Int (to_rep (first8 (rt4 a))))

(define-fun last9 ((a us_t4)) Int (to_rep (last8 (rt4 a))))

(define-fun length4 ((a us_t4)) Int (ite (<= (first9 a) (last9 a))
                                    (+ (- (last9 a) (first9 a)) 1) 0))

(declare-fun value__size7 () Int)

(declare-fun object__size7 ((Array Int byte)) Int)

(declare-fun value__component__size6 () Int)

(declare-fun object__component__size6 ((Array Int byte)) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size7 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size6))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment7 a))))

(define-fun bool_eq7 ((x us_t4)
  (y us_t4)) Bool (bool_eq (elts4 x) (to_rep (first8 (rt4 x)))
                  (to_rep (last8 (rt4 x))) (elts4 y)
                  (to_rep (first8 (rt4 y))) (to_rep (last8 (rt4 y)))))

(declare-fun user_eq21 (us_t4 us_t4) Bool)

(declare-fun dummy21 () us_t4)

(declare-datatypes () ((t127s__ref (mk_t127s__ref (t127s__content us_t4)))))
(define-fun t127s__ref___projection ((a t127s__ref)) us_t4 (t127s__content a))

(declare-fun r128s () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(define-fun dynamic_property9 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq22 (integer integer) Bool)

(declare-fun dummy22 () integer)

(declare-datatypes ()
((t129s__ref (mk_t129s__ref (t129s__content integer)))))
(define-fun t129s__ref___projection ((a t129s__ref)) integer (t129s__content
                                                             a))

(declare-sort t5 0)

(declare-fun first10 (t5) integer)

(declare-fun last10 (t5) integer)

(declare-fun mk5 (Int Int) t5)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first10 (mk5 f l))) f)
     (= (to_rep (last10 (mk5 f l))) l)))) :pattern ((mk5 f l)) )))

(define-fun dynamic_property10 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property9 range_first range_last low)
                   (dynamic_property9 range_first range_last high))))))

(declare-datatypes () ((us_t5 (mk___t5 (elts5 (Array Int byte))(rt5 t5)))))
(define-fun to_array5 ((a us_t5)) (Array Int byte) (elts5 a))

(define-fun of_array5 ((a (Array Int byte)) (f Int)
  (l Int)) us_t5 (mk___t5 a (mk5 f l)))

(define-fun first11 ((a us_t5)) Int (to_rep (first10 (rt5 a))))

(define-fun last11 ((a us_t5)) Int (to_rep (last10 (rt5 a))))

(define-fun length5 ((a us_t5)) Int (ite (<= (first11 a) (last11 a))
                                    (+ (- (last11 a) (first11 a)) 1) 0))

(declare-fun value__size8 () Int)

(declare-fun object__size8 ((Array Int byte)) Int)

(declare-fun value__component__size7 () Int)

(declare-fun object__component__size7 ((Array Int byte)) Int)

(declare-fun value__alignment8 () Int)

(declare-fun object__alignment8 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size8 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size7))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment8 a))))

(define-fun bool_eq8 ((x us_t5)
  (y us_t5)) Bool (bool_eq (elts5 x) (to_rep (first10 (rt5 x)))
                  (to_rep (last10 (rt5 x))) (elts5 y)
                  (to_rep (first10 (rt5 y))) (to_rep (last10 (rt5 y)))))

(declare-fun user_eq23 (us_t5 us_t5) Bool)

(declare-fun dummy23 () us_t5)

(declare-datatypes () ((t130s__ref (mk_t130s__ref (t130s__content us_t5)))))
(define-fun t130s__ref___projection ((a t130s__ref)) us_t5 (t130s__content a))

(declare-fun r131s () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(define-fun dynamic_property11 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)

(declare-fun user_eq24 (integer integer) Bool)

(declare-fun dummy24 () integer)

(declare-datatypes ()
((t132s__ref (mk_t132s__ref (t132s__content integer)))))
(define-fun t132s__ref___projection ((a t132s__ref)) integer (t132s__content
                                                             a))

(declare-sort t6 0)

(declare-fun first12 (t6) integer)

(declare-fun last12 (t6) integer)

(declare-fun mk6 (Int Int) t6)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first12 (mk6 f l))) f)
     (= (to_rep (last12 (mk6 f l))) l)))) :pattern ((mk6 f l)) )))

(define-fun dynamic_property12 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property11 range_first range_last low)
                   (dynamic_property11 range_first range_last high))))))

(declare-datatypes () ((us_t6 (mk___t6 (elts6 (Array Int byte))(rt6 t6)))))
(define-fun to_array6 ((a us_t6)) (Array Int byte) (elts6 a))

(define-fun of_array6 ((a (Array Int byte)) (f Int)
  (l Int)) us_t6 (mk___t6 a (mk6 f l)))

(define-fun first13 ((a us_t6)) Int (to_rep (first12 (rt6 a))))

(define-fun last13 ((a us_t6)) Int (to_rep (last12 (rt6 a))))

(define-fun length6 ((a us_t6)) Int (ite (<= (first13 a) (last13 a))
                                    (+ (- (last13 a) (first13 a)) 1) 0))

(declare-fun value__size9 () Int)

(declare-fun object__size9 ((Array Int byte)) Int)

(declare-fun value__component__size8 () Int)

(declare-fun object__component__size8 ((Array Int byte)) Int)

(declare-fun value__alignment9 () Int)

(declare-fun object__alignment9 ((Array Int byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__size9 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size8))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int byte))) (<= 0 (object__component__size8 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a (Array Int byte))) (<= 0 (object__alignment9 a))))

(define-fun bool_eq9 ((x us_t6)
  (y us_t6)) Bool (bool_eq (elts6 x) (to_rep (first12 (rt6 x)))
                  (to_rep (last12 (rt6 x))) (elts6 y)
                  (to_rep (first12 (rt6 y))) (to_rep (last12 (rt6 y)))))

(declare-fun user_eq25 (us_t6 us_t6) Bool)

(declare-fun dummy25 () us_t6)

(declare-datatypes () ((t133s__ref (mk_t133s__ref (t133s__content us_t6)))))
(define-fun t133s__ref___projection ((a t133s__ref)) us_t6 (t133s__content a))

(declare-fun keccak__keccak_1600__sponge__finalize__next_block__aggregate_def ((_ BitVec 8)) (Array Int byte))

;; def_axiom
  (assert
  (forall ((temp___982 (_ BitVec 8)))
  (forall ((temp___983 Int))
  (= (select (keccak__keccak_1600__sponge__finalize__next_block__aggregate_def
             temp___982) temp___983) (of_rep1 temp___982)))))

(declare-fun temp___991 ((_ BitVec 8)) (Array Int byte))

;; def_axiom
  (assert
  (forall ((temp___993 (_ BitVec 8)))
  (forall ((temp___994 Int))
  (= (select (temp___991 temp___993) temp___994) (of_rep1 temp___993)))))

(define-fun dynamic_invariant3 ((temp___expr_249 (_ BitVec 8))
  (temp___is_init_246 Bool) (temp___skip_constant_247 Bool)
  (temp___do_toplevel_248 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_255 Int)
  (temp___is_init_252 Bool) (temp___skip_constant_253 Bool)
  (temp___do_toplevel_254 Bool)) Bool (=>
                                      (or (= temp___is_init_252 true)
                                      (<= 0 2147483647)) (in_range2
                                      temp___expr_255)))

(define-fun dynamic_invariant5 ((temp___expr_261 us_t)
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool)) Bool (=>
                                      (not (= temp___skip_constant_259 true))
                                      (dynamic_property 0 2147483647
                                      (first1 temp___expr_261)
                                      (last1 temp___expr_261))))

(define-fun dynamic_invariant6 ((temp___expr_391 Int)
  (temp___is_init_388 Bool) (temp___skip_constant_389 Bool)
  (temp___do_toplevel_390 Bool)) Bool (=>
                                      (or (= temp___is_init_388 true)
                                      (<= 1 199)) (in_range6
                                      temp___expr_391)))

(define-fun dynamic_invariant7 ((temp___expr_370 Int)
  (temp___is_init_367 Bool) (temp___skip_constant_368 Bool)
  (temp___do_toplevel_369 Bool)) Bool (=>
                                      (or (= temp___is_init_367 true)
                                      (<= 0 199)) (in_range4
                                      temp___expr_370)))

(define-fun dynamic_invariant8 ((temp___expr_385 Int)
  (temp___is_init_382 Bool) (temp___skip_constant_383 Bool)
  (temp___do_toplevel_384 Bool)) Bool (=>
                                      (or (= temp___is_init_382 true)
                                      (<= 0 1599)) (in_range5
                                      temp___expr_385)))

(declare-fun ctx__split_fields () map1)

(declare-fun ctx__split_fields1 () (Array Int byte))

(declare-fun ctx__split_fields2 () bit_absorption_number)

(declare-fun ctx__split_fields3 () byte_absorption_number)

(declare-fun ctx__split_fields4 () rate_number)

(declare-fun ctx__split_fields5 () states)

(declare-fun next_block () (Array Int byte))

(declare-fun o () Int)

(declare-fun o1 () (Array Int byte))

(declare-fun temp___986 () (Array Int byte))

(declare-fun temp___9861 () t1)

(declare-fun o2 () (Array Int byte))

(declare-fun o3 () t)

(declare-fun o4 () Int)

(declare-fun o5 () bit_absorption_number)

(declare-fun o6 () map1)

(declare-fun o7 () (Array Int byte))

(declare-fun o8 () bit_absorption_number)

(declare-fun o9 () byte_absorption_number)

(declare-fun o10 () rate_number)

(declare-fun o11 () states)

(declare-fun temp___998 () map1)

(declare-fun temp___9981 () (Array Int byte))

(declare-fun temp___9982 () bit_absorption_number)

(declare-fun temp___9983 () byte_absorption_number)

(declare-fun temp___9984 () rate_number)

(declare-fun temp___9985 () states)

(declare-fun o12 () (Array Int byte))

(declare-fun keccak__padding__pad101_multi_blocks__next_block__compl () (Array Int byte))

(declare-fun keccak__padding__pad101_multi_blocks__next_block__compl1 () t3)

(declare-fun o13 () (Array Int byte))

(declare-fun keccak__padding__pad101_multi_blocks__first_block__compl () (Array Int byte))

(declare-fun keccak__padding__pad101_multi_blocks__first_block__compl1 () t2)

(declare-fun o14 () integer)

(declare-fun o15 () integer)

(declare-fun o16 () Int)

(declare-fun o17 () integer)

(declare-fun o18 () integer)

(declare-fun o19 () (Array Int byte))

(declare-fun o20 () map1)

(declare-fun o21 () (Array Int byte))

(declare-fun o22 () bit_absorption_number)

(declare-fun o23 () byte_absorption_number)

(declare-fun o24 () rate_number)

(declare-fun o25 () states)

(declare-fun temp___1006 () map1)

(declare-fun temp___10061 () (Array Int byte))

(declare-fun temp___10062 () bit_absorption_number)

(declare-fun temp___10063 () byte_absorption_number)

(declare-fun temp___10064 () rate_number)

(declare-fun temp___10065 () states)

(declare-fun o26 () (Array Int byte))

(declare-fun o27 () (Array Int byte))

(declare-fun temp___1013 () (Array Int byte))

(declare-fun temp___10131 () t4)

(declare-fun o28 () (Array Int byte))

(declare-fun o29 () t)

(declare-fun o30 () Int)

(declare-fun o31 () (Array Int byte))

(declare-fun temp___1019 () (Array Int byte))

(declare-fun temp___10191 () t5)

(declare-fun o32 () (Array Int byte))

(declare-fun o33 () t)

(declare-fun o34 () Int)

(declare-fun o35 () (Array Int byte))

(declare-fun keccak__keccak_1600__keccakf_1600_lanes__extract_bytes__data__compl () (Array Int byte))

(declare-fun keccak__keccak_1600__keccakf_1600_lanes__extract_bytes__data__compl1 () t6)

(declare-fun o36 () integer)

(declare-fun o37 () integer)

(declare-fun ctx__split_fields6 () us_split_fields)

(declare-fun result () map__ref)

(declare-fun next_block1 () (Array Int byte))

(declare-fun result1 () Bool)

(declare-fun keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a () map1)

(declare-fun result2 () us_split_fields__ref)

(declare-fun ctx__split_fields7 () us_split_fields)

(declare-fun keccak__keccak_1600__keccakf_1600_permutation__permute__a () map1)

(declare-fun result3 () us_split_fields__ref)

(declare-fun ctx__split_fields8 () us_split_fields)

(declare-fun result4 () us_split_fields__ref)

(declare-fun ctx__split_fields9 () us_split_fields)

(declare-fun result5 () us_split_fields__ref)

(declare-fun ctx__split_fields10 () us_split_fields)

(declare-fun spilled () Bool)

(declare-fun keccak__padding__pad101_multi_blocks__next_block () (Array Int byte))

(declare-fun keccak__padding__pad101_multi_blocks__first_block () (Array Int byte))

(declare-fun result6 () us_split_fields__ref)

(declare-fun ctx__split_fields11 () us_split_fields)

(declare-fun result7 () map__ref)

(declare-fun next_block2 () (Array Int byte))

(declare-fun keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a1 () map1)

(declare-fun result8 () us_split_fields__ref)

(declare-fun ctx__split_fields12 () us_split_fields)

(declare-fun keccak__keccak_1600__keccakf_1600_permutation__permute__a1 () map1)

(declare-fun result9 () us_split_fields__ref)

(declare-fun ctx__split_fields13 () us_split_fields)

(declare-fun keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a2 () map1)

(declare-fun result10 () us_split_fields__ref)

(declare-fun ctx__split_fields14 () us_split_fields)

(declare-fun keccak__keccak_1600__keccakf_1600_permutation__permute__a2 () map1)

(declare-fun result11 () us_split_fields__ref)

(declare-fun ctx__split_fields15 () us_split_fields)

;; H
  (assert (= result (mk_map__ref next_block)))

;; H
  (assert
  (= next_block1 (keccak__keccak_1600__sponge__finalize__next_block__aggregate_def
                 ((_ int2bv 8) 0))))

;; H
  (assert
  (and
  (= o (rate_of
       (mk___rep
       (mk___split_fields ctx__split_fields ctx__split_fields1
       ctx__split_fields2 ctx__split_fields3 ctx__split_fields4
       ctx__split_fields5))))
  (and (in_range7 o)
  (and (= o (* (to_rep6 ctx__split_fields4) 8)) (< o 1600)))))

;; H
  (assert (= result1 (ite (<= o (to_rep5 ctx__split_fields2)) true false)))

;; H
  (assert (=> (= result1 true) (= (- (to_rep6 ctx__split_fields4) 1) r114s)))

;; H
  (assert (=> (= result1 true) (in_range1 r114s)))

;; H
  (assert
  (=> (= result1 true)
  (and
  (= o4 (rate_of
        (mk___rep
        (mk___split_fields ctx__split_fields ctx__split_fields1
        ctx__split_fields2 ctx__split_fields3 ctx__split_fields4
        ctx__split_fields5))))
  (and (in_range7 o4)
  (and (= o4 (* (to_rep6 ctx__split_fields4) 8)) (< o4 1600))))))

;; H
  (assert
  (=> (= result1 true)
  (=> (<= 0 r114s)
  (and (and (<= 0 0) (<= 0 199)) (and (<= 0 r114s) (<= r114s 199))))))

;; H
  (assert (=> (= result1 true) (= o1 ctx__split_fields1)))

;; H
  (assert (=> (= result1 true) (= o1 temp___986)))

;; H
  (assert (=> (= result1 true) (= (mk1 0 r114s) temp___9861)))

;; H
  (assert (=> (= result1 true) (= temp___986 o2)))

;; H
  (assert
  (=> (= result1 true)
  (= (mk (to_rep (first2 temp___9861)) (to_rep (last2 temp___9861)))
  o3)))

;; H
  (assert
  (=> (= result1 true)
  (= result2 (mk___split_fields__ref
             (mk___split_fields ctx__split_fields ctx__split_fields1
             ctx__split_fields2 ctx__split_fields3 ctx__split_fields4
             ctx__split_fields5)))))

;; H
  (assert
  (=> (= result1 true)
  (= ctx__split_fields7 (mk___split_fields
                        keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a
                        ctx__split_fields1 ctx__split_fields2
                        ctx__split_fields3 ctx__split_fields4
                        ctx__split_fields5))))

;; H
  (assert
  (=> (= result1 true)
  (= result3 (mk___split_fields__ref ctx__split_fields7))))

;; H
  (assert
  (=> (= result1 true)
  (= ctx__split_fields8 (mk___split_fields
                        keccak__keccak_1600__keccakf_1600_permutation__permute__a
                        (rec__keccak__keccak_1600__sponge__context__block
                        ctx__split_fields7)
                        (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                        ctx__split_fields7)
                        (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
                        ctx__split_fields7)
                        (rec__keccak__keccak_1600__sponge__context__rate
                        ctx__split_fields7)
                        (rec__keccak__keccak_1600__sponge__context__curr_state
                        ctx__split_fields7)))))

;; H
  (assert
  (=> (= result1 true)
  (= result4 (mk___split_fields__ref ctx__split_fields8))))

;; H
  (assert
  (=> (= result1 true)
  (= ctx__split_fields9 (mk___split_fields
                        (rec__keccak__keccak_1600__sponge__context__state
                        ctx__split_fields8) (temp___991 ((_ int2bv 8) 0))
                        (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                        ctx__split_fields8)
                        (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
                        ctx__split_fields8)
                        (rec__keccak__keccak_1600__sponge__context__rate
                        ctx__split_fields8)
                        (rec__keccak__keccak_1600__sponge__context__curr_state
                        ctx__split_fields8)))))

;; H
  (assert (=> (= result1 true) (= (to_rep5 o5) 0)))

;; H
  (assert
  (=> (= result1 true)
  (= (rec__keccak__keccak_1600__sponge__context__state ctx__split_fields9)
  o6)))

;; H
  (assert
  (=> (= result1 true)
  (= (rec__keccak__keccak_1600__sponge__context__block ctx__split_fields9)
  o7)))

;; H
  (assert (=> (= result1 true) (= o5 o8)))

;; H
  (assert
  (=> (= result1 true)
  (= (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
     ctx__split_fields9) o9)))

;; H
  (assert
  (=> (= result1 true)
  (= (rec__keccak__keccak_1600__sponge__context__rate ctx__split_fields9)
  o10)))

;; H
  (assert
  (=> (= result1 true)
  (= (rec__keccak__keccak_1600__sponge__context__curr_state
     ctx__split_fields9) o11)))

;; H
  (assert (=> (= result1 true) (= temp___998 o6)))

;; H
  (assert (=> (= result1 true) (= temp___9981 o7)))

;; H
  (assert (=> (= result1 true) (= temp___9982 o8)))

;; H
  (assert (=> (= result1 true) (= temp___9983 o9)))

;; H
  (assert (=> (= result1 true) (= temp___9984 o10)))

;; H
  (assert (=> (= result1 true) (= temp___9985 o11)))

;; H
  (assert
  (=> (= result1 true)
  (= result5 (mk___split_fields__ref ctx__split_fields9))))

;; H
  (assert
  (=> (= result1 true)
  (= ctx__split_fields10 (mk___split_fields temp___998 temp___9981
                         temp___9982 temp___9983 temp___9984 temp___9985))))

;; H
  (assert
  (=> (not (= result1 true))
  (= ctx__split_fields10 (mk___split_fields ctx__split_fields
                         ctx__split_fields1 ctx__split_fields2
                         ctx__split_fields3 ctx__split_fields4
                         ctx__split_fields5))))

;; H
  (assert
  (=> (not (= result1 true)) (= ctx__split_fields10 ctx__split_fields6)))

;; H
  (assert
  (= (- (to_rep6
        (rec__keccak__keccak_1600__sponge__context__rate ctx__split_fields10)) 1)
  r119s))

;; H
  (assert (in_range1 r119s))

;; H
  (assert
  (= (- (to_rep6
        (rec__keccak__keccak_1600__sponge__context__rate ctx__split_fields10)) 1)
  r122s))

;; H
  (assert (in_range1 r122s))

;; H
  (assert
  (=> (<= 0 r122s)
  (and (and (<= 0 0) (<= 0 199)) (and (<= 0 r122s) (<= r122s 199)))))

;; H
  (assert (= o12 next_block1))

;; H
  (assert (= o12 keccak__padding__pad101_multi_blocks__next_block__compl))

;; H
  (assert
  (= (mk3 0 r122s) keccak__padding__pad101_multi_blocks__next_block__compl1))

;; H
  (assert
  (=> (<= 0 r119s)
  (and (and (<= 0 0) (<= 0 199)) (and (<= 0 r119s) (<= r119s 199)))))

;; H
  (assert
  (= o13 (rec__keccak__keccak_1600__sponge__context__block
         ctx__split_fields10)))

;; H
  (assert (= o13 keccak__padding__pad101_multi_blocks__first_block__compl))

;; H
  (assert
  (= (mk2 0 r119s) keccak__padding__pad101_multi_blocks__first_block__compl1))

;; H
  (assert
  (= (to_rep o18) (to_rep
                  (last6
                  keccak__padding__pad101_multi_blocks__next_block__compl1))))

;; H
  (assert
  (= (to_rep o17) (to_rep
                  (first6
                  keccak__padding__pad101_multi_blocks__next_block__compl1))))

;; H
  (assert
  (and (= o16 (rate_of (mk___rep ctx__split_fields10)))
  (and (in_range7 o16)
  (and
  (= o16 (* (to_rep6
            (rec__keccak__keccak_1600__sponge__context__rate
            ctx__split_fields10)) 8))
  (< o16 1600)))))

;; H
  (assert
  (= (to_rep o15) (to_rep
                  (last4
                  keccak__padding__pad101_multi_blocks__first_block__compl1))))

;; H
  (assert
  (= (to_rep o14) (to_rep
                  (first4
                  keccak__padding__pad101_multi_blocks__first_block__compl1))))

;; H
  (assert
  (= (= spilled true)
  (< o16 (+ (to_rep5
            (rec__keccak__keccak_1600__sponge__context__bits_absorbed
            ctx__split_fields10)) 2))))

;; H
  (assert
  (forall ((temp___1004 Int))
  (ite (and (<= 0 temp___1004) (<= temp___1004 r119s))
  (= (select o19 temp___1004) (select (slide
                                      keccak__padding__pad101_multi_blocks__first_block
                                      (to_rep
                                      (first
                                      (mk
                                      (to_rep
                                      (first4
                                      keccak__padding__pad101_multi_blocks__first_block__compl1))
                                      (to_rep
                                      (last4
                                      keccak__padding__pad101_multi_blocks__first_block__compl1)))))
                                      0) temp___1004))
  (= (select o19 temp___1004) (select (rec__keccak__keccak_1600__sponge__context__block
                                      ctx__split_fields10) temp___1004)))))

;; H
  (assert
  (= (rec__keccak__keccak_1600__sponge__context__state ctx__split_fields10)
  o20))

;; H
  (assert (= o19 o21))

;; H
  (assert
  (= (rec__keccak__keccak_1600__sponge__context__bits_absorbed
     ctx__split_fields10) o22))

;; H
  (assert
  (= (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
     ctx__split_fields10) o23))

;; H
  (assert
  (= (rec__keccak__keccak_1600__sponge__context__rate ctx__split_fields10)
  o24))

;; H
  (assert
  (= (rec__keccak__keccak_1600__sponge__context__curr_state
     ctx__split_fields10) o25))

;; H
  (assert (= temp___1006 o20))

;; H
  (assert (= temp___10061 o21))

;; H
  (assert (= temp___10062 o22))

;; H
  (assert (= temp___10063 o23))

;; H
  (assert (= temp___10064 o24))

;; H
  (assert (= temp___10065 o25))

;; H
  (assert (= result6 (mk___split_fields__ref ctx__split_fields10)))

;; H
  (assert
  (= ctx__split_fields11 (mk___split_fields temp___1006 temp___10061
                         temp___10062 temp___10063 temp___10064 temp___10065)))

;; H
  (assert
  (forall ((temp___1010 Int))
  (ite (and (<= 0 temp___1010) (<= temp___1010 r122s))
  (= (select o26 temp___1010) (select (slide
                                      keccak__padding__pad101_multi_blocks__next_block
                                      (to_rep
                                      (first
                                      (mk
                                      (to_rep
                                      (first6
                                      keccak__padding__pad101_multi_blocks__next_block__compl1))
                                      (to_rep
                                      (last6
                                      keccak__padding__pad101_multi_blocks__next_block__compl1)))))
                                      0) temp___1010))
  (= (select o26 temp___1010) (select next_block1 temp___1010)))))

;; H
  (assert (= result7 (mk_map__ref next_block1)))

;; H
  (assert (= next_block2 o26))

;; H
  (assert
  (= (- (to_rep6
        (rec__keccak__keccak_1600__sponge__context__rate ctx__split_fields11)) 1)
  r125s))

;; H
  (assert (in_range1 r125s))

;; H
  (assert
  (and (= o30 (rate_of (mk___rep ctx__split_fields11)))
  (and (in_range7 o30)
  (and
  (= o30 (* (to_rep6
            (rec__keccak__keccak_1600__sponge__context__rate
            ctx__split_fields11)) 8))
  (< o30 1600)))))

;; H
  (assert
  (=> (<= 0 r125s)
  (and (and (<= 0 0) (<= 0 199)) (and (<= 0 r125s) (<= r125s 199)))))

;; H
  (assert
  (= o27 (rec__keccak__keccak_1600__sponge__context__block
         ctx__split_fields11)))

;; H
  (assert (= o27 temp___1013))

;; H
  (assert (= (mk4 0 r125s) temp___10131))

;; H
  (assert (= temp___1013 o28))

;; H
  (assert
  (= (mk (to_rep (first8 temp___10131)) (to_rep (last8 temp___10131)))
  o29))

;; H
  (assert (= result8 (mk___split_fields__ref ctx__split_fields11)))

;; H
  (assert
  (= ctx__split_fields12 (mk___split_fields
                         keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a1
                         (rec__keccak__keccak_1600__sponge__context__block
                         ctx__split_fields11)
                         (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                         ctx__split_fields11)
                         (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
                         ctx__split_fields11)
                         (rec__keccak__keccak_1600__sponge__context__rate
                         ctx__split_fields11)
                         (rec__keccak__keccak_1600__sponge__context__curr_state
                         ctx__split_fields11))))

;; H
  (assert (= result9 (mk___split_fields__ref ctx__split_fields12)))

;; H
  (assert
  (= ctx__split_fields13 (mk___split_fields
                         keccak__keccak_1600__keccakf_1600_permutation__permute__a1
                         (rec__keccak__keccak_1600__sponge__context__block
                         ctx__split_fields12)
                         (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                         ctx__split_fields12)
                         (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
                         ctx__split_fields12)
                         (rec__keccak__keccak_1600__sponge__context__rate
                         ctx__split_fields12)
                         (rec__keccak__keccak_1600__sponge__context__curr_state
                         ctx__split_fields12))))

;; H
  (assert
  (=> (= spilled true)
  (= (- (to_rep6
        (rec__keccak__keccak_1600__sponge__context__rate ctx__split_fields13)) 1)
  r128s)))

;; H
  (assert (=> (= spilled true) (in_range1 r128s)))

;; H
  (assert
  (=> (= spilled true)
  (and (= o34 (rate_of (mk___rep ctx__split_fields13)))
  (and (in_range7 o34)
  (and
  (= o34 (* (to_rep6
            (rec__keccak__keccak_1600__sponge__context__rate
            ctx__split_fields13)) 8))
  (< o34 1600))))))

;; H
  (assert
  (=> (= spilled true)
  (=> (<= 0 r128s)
  (and (and (<= 0 0) (<= 0 199)) (and (<= 0 r128s) (<= r128s 199))))))

;; H
  (assert (=> (= spilled true) (= o31 next_block2)))

;; H
  (assert (=> (= spilled true) (= o31 temp___1019)))

;; H
  (assert (=> (= spilled true) (= (mk5 0 r128s) temp___10191)))

;; H
  (assert (=> (= spilled true) (= temp___1019 o32)))

;; H
  (assert
  (=> (= spilled true)
  (= (mk (to_rep (first10 temp___10191)) (to_rep (last10 temp___10191)))
  o33)))

;; H
  (assert
  (=> (= spilled true)
  (= result10 (mk___split_fields__ref ctx__split_fields13))))

;; H
  (assert
  (=> (= spilled true)
  (= ctx__split_fields14 (mk___split_fields
                         keccak__keccak_1600__keccakf_1600_lanes__xor_bits_into_state__a2
                         (rec__keccak__keccak_1600__sponge__context__block
                         ctx__split_fields13)
                         (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                         ctx__split_fields13)
                         (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
                         ctx__split_fields13)
                         (rec__keccak__keccak_1600__sponge__context__rate
                         ctx__split_fields13)
                         (rec__keccak__keccak_1600__sponge__context__curr_state
                         ctx__split_fields13)))))

;; H
  (assert
  (=> (= spilled true)
  (= result11 (mk___split_fields__ref ctx__split_fields14))))

;; H
  (assert
  (=> (= spilled true)
  (= ctx__split_fields15 (mk___split_fields
                         keccak__keccak_1600__keccakf_1600_permutation__permute__a2
                         (rec__keccak__keccak_1600__sponge__context__block
                         ctx__split_fields14)
                         (rec__keccak__keccak_1600__sponge__context__bits_absorbed
                         ctx__split_fields14)
                         (rec__keccak__keccak_1600__sponge__context__bytes_squeezed
                         ctx__split_fields14)
                         (rec__keccak__keccak_1600__sponge__context__rate
                         ctx__split_fields14)
                         (rec__keccak__keccak_1600__sponge__context__curr_state
                         ctx__split_fields14)))))

;; H
  (assert
  (=> (not (= spilled true)) (= ctx__split_fields15 ctx__split_fields13)))

;; H
  (assert
  (= (- (to_rep6
        (rec__keccak__keccak_1600__sponge__context__rate ctx__split_fields15)) 1)
  r131s))

;; H
  (assert (in_range1 r131s))

;; H
  (assert
  (=> (<= 0 r131s)
  (and (and (<= 0 0) (<= 0 199)) (and (<= 0 r131s) (<= r131s 199)))))

;; H
  (assert
  (= o35 (rec__keccak__keccak_1600__sponge__context__block
         ctx__split_fields15)))

;; H
  (assert
  (= o35 keccak__keccak_1600__keccakf_1600_lanes__extract_bytes__data__compl))

;; H
  (assert
  (= (mk6 0 r131s) keccak__keccak_1600__keccakf_1600_lanes__extract_bytes__data__compl1))

;; H
  (assert
  (= (to_rep o37) (to_rep
                  (last12
                  keccak__keccak_1600__keccakf_1600_lanes__extract_bytes__data__compl1))))

;; H
  (assert
  (= (to_rep o36) (to_rep
                  (first12
                  keccak__keccak_1600__keccakf_1600_lanes__extract_bytes__data__compl1))))

(assert
;; WP_parameter_def
 ;; File "keccak-sponge.ads", line 222, characters 0-0
  (not
  (<= (ite (<= (to_rep o36) (to_rep o37)) (+ (- (to_rep o37) (to_rep o36)) 1)
      0) 200)))
(check-sat)
(exit)
