;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy1 (Array Int integer))

(declare-const value__size Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(declare-fun user_eq1 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__use_unchecked_union__small_record__field1 integer)(rec__use_unchecked_union__small_record__field2 (Array Int integer))))))
(define-fun us_split_fields_field1__projection ((a us_split_fields)) integer
  (rec__use_unchecked_union__small_record__field1 a))

(define-fun us_split_fields_field2__projection ((a us_split_fields)) (Array Int integer)
  (rec__use_unchecked_union__small_record__field2 a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__use_unchecked_union__small_record__field1
                           (us_split_fields1 a))) (to_rep
                                                  (rec__use_unchecked_union__small_record__field1
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__use_unchecked_union__small_record__field2
                           (us_split_fields1 a)) 0 2
                           (rec__use_unchecked_union__small_record__field2
                           (us_split_fields1 b)) 0 2) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const use_unchecked_union__small_record__field1__first__bit Int)

(declare-const use_unchecked_union__small_record__field1__last__bit Int)

(declare-const use_unchecked_union__small_record__field1__position Int)

;; use_unchecked_union__small_record__field1__first__bit_axiom
  (assert (<= 0 use_unchecked_union__small_record__field1__first__bit))

;; use_unchecked_union__small_record__field1__last__bit_axiom
  (assert
  (< use_unchecked_union__small_record__field1__first__bit use_unchecked_union__small_record__field1__last__bit))

;; use_unchecked_union__small_record__field1__position_axiom
  (assert (<= 0 use_unchecked_union__small_record__field1__position))

(declare-const use_unchecked_union__small_record__field2__first__bit Int)

(declare-const use_unchecked_union__small_record__field2__last__bit Int)

(declare-const use_unchecked_union__small_record__field2__position Int)

;; use_unchecked_union__small_record__field2__first__bit_axiom
  (assert (<= 0 use_unchecked_union__small_record__field2__first__bit))

;; use_unchecked_union__small_record__field2__last__bit_axiom
  (assert
  (< use_unchecked_union__small_record__field2__first__bit use_unchecked_union__small_record__field2__last__bit))

;; use_unchecked_union__small_record__field2__position_axiom
  (assert (<= 0 use_unchecked_union__small_record__field2__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((small_record__ref (mk_small_record__ref (small_record__content us_rep)))))
(define-fun small_record__ref___projection ((a small_record__ref)) us_rep
  (small_record__content a))

(declare-const dummy3 (Array Int integer))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int integer)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int integer)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq3 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__use_unchecked_union__big_record__field1 integer)(rec__use_unchecked_union__big_record__field2 (Array Int integer))))))
(define-fun us_split_fields_field1__2__projection ((a us_split_fields2)) integer
  (rec__use_unchecked_union__big_record__field1 a))

(define-fun us_split_fields_field2__2__projection ((a us_split_fields2)) (Array Int integer)
  (rec__use_unchecked_union__big_record__field2 a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__use_unchecked_union__big_record__field1
                            (us_split_fields3 a))) (to_rep
                                                   (rec__use_unchecked_union__big_record__field1
                                                   (us_split_fields3 b))))
                         (= (bool_eq
                            (rec__use_unchecked_union__big_record__field2
                            (us_split_fields3 a)) 0 3
                            (rec__use_unchecked_union__big_record__field2
                            (us_split_fields3 b)) 0 3) true))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const use_unchecked_union__big_record__field1__first__bit Int)

(declare-const use_unchecked_union__big_record__field1__last__bit Int)

(declare-const use_unchecked_union__big_record__field1__position Int)

;; use_unchecked_union__big_record__field1__first__bit_axiom
  (assert (<= 0 use_unchecked_union__big_record__field1__first__bit))

;; use_unchecked_union__big_record__field1__last__bit_axiom
  (assert
  (< use_unchecked_union__big_record__field1__first__bit use_unchecked_union__big_record__field1__last__bit))

;; use_unchecked_union__big_record__field1__position_axiom
  (assert (<= 0 use_unchecked_union__big_record__field1__position))

(declare-const use_unchecked_union__big_record__field2__first__bit Int)

(declare-const use_unchecked_union__big_record__field2__last__bit Int)

(declare-const use_unchecked_union__big_record__field2__position Int)

;; use_unchecked_union__big_record__field2__first__bit_axiom
  (assert (<= 0 use_unchecked_union__big_record__field2__first__bit))

;; use_unchecked_union__big_record__field2__last__bit_axiom
  (assert
  (< use_unchecked_union__big_record__field2__first__bit use_unchecked_union__big_record__field2__last__bit))

;; use_unchecked_union__big_record__field2__position_axiom
  (assert (<= 0 use_unchecked_union__big_record__field2__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ()
((big_record__ref (mk_big_record__ref (big_record__content us_rep1)))))
(define-fun big_record__ref___projection ((a big_record__ref)) us_rep1
  (big_record__content a))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__use_unchecked_union__myunion__discr integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) integer
  (rec__use_unchecked_union__myunion__discr a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__use_unchecked_union__myunion__record1 us_rep)(rec__use_unchecked_union__myunion__record2 us_rep1)))))
(define-fun us_split_fields_record1__projection ((a us_split_fields4)) us_rep
  (rec__use_unchecked_union__myunion__record1 a))

(define-fun us_split_fields_record2__projection ((a us_split_fields4)) us_rep1
  (rec__use_unchecked_union__myunion__record2 a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2
 (mk___rep2
 (us_split_discrs1 us_split_discrs)(us_split_fields5 us_split_fields4)(attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_discrs (us_split_discrs1
                                                                 a))

(define-fun us_rep___4__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun us_rep___5__projection ((a us_rep2)) Bool (attr__constrained a))

(define-fun use_unchecked_union__myunion__record1__pred ((a us_rep2)) Bool (=
  (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a))) 0))

(define-fun use_unchecked_union__myunion__record2__pred ((a us_rep2)) Bool
  (not
  (= (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a))) 0)))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__use_unchecked_union__myunion__discr
                            (us_split_discrs1 a))) (to_rep
                                                   (rec__use_unchecked_union__myunion__discr
                                                   (us_split_discrs1 b))))
                         (=> (use_unchecked_union__myunion__record1__pred a)
                         (= (bool_eq1
                            (rec__use_unchecked_union__myunion__record1
                            (us_split_fields5 a))
                            (rec__use_unchecked_union__myunion__record1
                            (us_split_fields5 b))) true)))
                         (=> (use_unchecked_union__myunion__record2__pred a)
                         (= (bool_eq2
                            (rec__use_unchecked_union__myunion__record2
                            (us_split_fields5 a))
                            (rec__use_unchecked_union__myunion__record2
                            (us_split_fields5 b))) true)))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const use_unchecked_union__myunion__discr__first__bit Int)

(declare-const use_unchecked_union__myunion__discr__last__bit Int)

(declare-const use_unchecked_union__myunion__discr__position Int)

;; use_unchecked_union__myunion__discr__first__bit_axiom
  (assert (<= 0 use_unchecked_union__myunion__discr__first__bit))

;; use_unchecked_union__myunion__discr__last__bit_axiom
  (assert
  (< use_unchecked_union__myunion__discr__first__bit use_unchecked_union__myunion__discr__last__bit))

;; use_unchecked_union__myunion__discr__position_axiom
  (assert (<= 0 use_unchecked_union__myunion__discr__position))

(declare-const use_unchecked_union__myunion__record1__first__bit Int)

(declare-const use_unchecked_union__myunion__record1__last__bit Int)

(declare-const use_unchecked_union__myunion__record1__position Int)

;; use_unchecked_union__myunion__record1__first__bit_axiom
  (assert (<= 0 use_unchecked_union__myunion__record1__first__bit))

;; use_unchecked_union__myunion__record1__last__bit_axiom
  (assert
  (< use_unchecked_union__myunion__record1__first__bit use_unchecked_union__myunion__record1__last__bit))

;; use_unchecked_union__myunion__record1__position_axiom
  (assert (<= 0 use_unchecked_union__myunion__record1__position))

(declare-const use_unchecked_union__myunion__record2__first__bit Int)

(declare-const use_unchecked_union__myunion__record2__last__bit Int)

(declare-const use_unchecked_union__myunion__record2__position Int)

;; use_unchecked_union__myunion__record2__first__bit_axiom
  (assert (<= 0 use_unchecked_union__myunion__record2__first__bit))

;; use_unchecked_union__myunion__record2__last__bit_axiom
  (assert
  (< use_unchecked_union__myunion__record2__first__bit use_unchecked_union__myunion__record2__last__bit))

;; use_unchecked_union__myunion__record2__position_axiom
  (assert (<= 0 use_unchecked_union__myunion__record2__position))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-const dummy5 us_rep2)

(declare-datatypes ()
((myunion__ref (mk_myunion__ref (myunion__content us_rep2)))))
(define-fun myunion__ref___projection ((a myunion__ref)) us_rep2 (myunion__content
                                                                 a))

(declare-fun temp___158 (Int Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___160 Int) (temp___161 Int) (temp___162 Int))
  (let ((temp___159 (temp___158 temp___160 temp___161 temp___162)))
  (and
  (and (= (select temp___159 0) (of_rep temp___160))
  (= (select temp___159 1) (of_rep temp___161)))
  (= (select temp___159 2) (of_rep temp___162))))))

(declare-fun temp___171 (Int Int Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___173 Int) (temp___174 Int) (temp___175 Int)
  (temp___176 Int))
  (let ((temp___172 (temp___171 temp___173 temp___174 temp___175 temp___176)))
  (and
  (and
  (and (= (select temp___172 0) (of_rep temp___173))
  (= (select temp___172 1) (of_rep temp___174)))
  (= (select temp___172 2) (of_rep temp___175)))
  (= (select temp___172 3) (of_rep temp___176))))))

(define-fun default_initial_assumption ((temp___expr_185 us_rep2)
  (temp___skip_top_level_186 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_185) false)
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__use_unchecked_union__myunion__discr
                                            (us_split_discrs1
                                            temp___expr_185))) 0)
                                         (=>
                                         (use_unchecked_union__myunion__record1__pred
                                         temp___expr_185)
                                         (and
                                         (= (to_rep
                                            (rec__use_unchecked_union__small_record__field1
                                            (us_split_fields1
                                            (rec__use_unchecked_union__myunion__record1
                                            (us_split_fields5
                                            temp___expr_185))))) 0)
                                         (= (rec__use_unchecked_union__small_record__field2
                                            (us_split_fields1
                                            (rec__use_unchecked_union__myunion__record1
                                            (us_split_fields5
                                            temp___expr_185)))) (temp___158 0
                                                                0 0)))))
                                         (=>
                                         (use_unchecked_union__myunion__record2__pred
                                         temp___expr_185)
                                         (and
                                         (= (to_rep
                                            (rec__use_unchecked_union__big_record__field1
                                            (us_split_fields3
                                            (rec__use_unchecked_union__myunion__record2
                                            (us_split_fields5
                                            temp___expr_185))))) 0)
                                         (= (rec__use_unchecked_union__big_record__field2
                                            (us_split_fields3
                                            (rec__use_unchecked_union__myunion__record2
                                            (us_split_fields5
                                            temp___expr_185)))) (temp___171 0
                                                                0 0 0)))))))

(declare-const output__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const num Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun temp___232 (Int Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___234 Int) (temp___235 Int) (temp___236 Int))
  (let ((temp___233 (temp___232 temp___234 temp___235 temp___236)))
  (and
  (and (= (select temp___233 0) (of_rep temp___234))
  (= (select temp___233 1) (of_rep temp___235)))
  (= (select temp___233 2) (of_rep temp___236))))))

(declare-fun temp___244 (Int Int Int Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___246 Int) (temp___247 Int) (temp___248 Int)
  (temp___249 Int))
  (let ((temp___245 (temp___244 temp___246 temp___247 temp___248 temp___249)))
  (and
  (and
  (and (= (select temp___245 0) (of_rep temp___246))
  (= (select temp___245 1) (of_rep temp___247)))
  (= (select temp___245 2) (of_rep temp___248)))
  (= (select temp___245 3) (of_rep temp___249))))))

(declare-fun temp___257 (Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___259 Int))
  (forall ((temp___260 Int))
  (= (select (temp___257 temp___259) temp___260) (of_rep temp___259)))))

(define-fun default_initial_assumption1 ((temp___expr_156 us_rep)
  (temp___skip_top_level_157 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__use_unchecked_union__small_record__field1
                                            (us_split_fields1
                                            temp___expr_156))) 0)
                                         (= (rec__use_unchecked_union__small_record__field2
                                            (us_split_fields1
                                            temp___expr_156)) (temp___158 0 0
                                                              0))))

(define-fun default_initial_assumption2 ((temp___expr_169 us_rep1)
  (temp___skip_top_level_170 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__use_unchecked_union__big_record__field1
                                            (us_split_fields3
                                            temp___expr_169))) 0)
                                         (= (rec__use_unchecked_union__big_record__field2
                                            (us_split_fields3
                                            temp___expr_169)) (temp___171 0 0
                                                              0 0))))

(declare-const output__split_discrs integer)

;; H
  (assert (in_range num))

;; H
  (assert (= num 0))

(assert
;; WP_parameter_def
 ;; File "use_unchecked_union.adb", line 9, characters 0-0
  (not (= (to_rep output__split_discrs) 0)))
(check-sat)
(exit)
