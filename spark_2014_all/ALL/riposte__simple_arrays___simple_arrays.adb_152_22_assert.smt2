;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep (select a temp___idx_133)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep (select a temp___idx_133)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const j Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const k Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const a_old (Array Int integer))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun temp___240 ((Array Int integer) Int Int Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___242 (Array Int integer)))
  (forall ((temp___243 Int) (temp___244 Int) (temp___245 Int)
  (temp___246 Int) (temp___247 Int) (temp___248 Int))
  (let ((temp___241 (temp___240 temp___242 temp___243 temp___244 temp___245
                    temp___246 temp___247 temp___248)))
  (forall ((temp___249 Int))
  (ite (= temp___249 temp___247)
  (= (select temp___241 temp___249) (of_rep temp___248))
  (ite (= temp___249 temp___245)
  (= (select temp___241 temp___249) (of_rep temp___246))
  (ite (= temp___249 temp___243)
  (= (select temp___241 temp___249) (of_rep temp___244))
  (= (select temp___241 temp___249) (select temp___242 temp___249))))))))))

(declare-fun temp___333 ((Array Int integer) Int Int Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___335 (Array Int integer)))
  (forall ((temp___336 Int) (temp___337 Int) (temp___338 Int)
  (temp___339 Int) (temp___340 Int) (temp___341 Int))
  (let ((temp___334 (temp___333 temp___335 temp___336 temp___337 temp___338
                    temp___339 temp___340 temp___341)))
  (forall ((temp___342 Int))
  (ite (= temp___342 temp___340)
  (= (select temp___334 temp___342) (of_rep temp___341))
  (ite (= temp___342 temp___338)
  (= (select temp___334 temp___342) (of_rep temp___339))
  (ite (= temp___342 temp___336)
  (= (select temp___334 temp___342) (of_rep temp___337))
  (= (select temp___334 temp___342) (select temp___335 temp___342))))))))))

(declare-fun temp___343 ((Array Int integer) Int Int Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___345 (Array Int integer)))
  (forall ((temp___346 Int) (temp___347 Int) (temp___348 Int)
  (temp___349 Int) (temp___350 Int) (temp___351 Int))
  (let ((temp___344 (temp___343 temp___345 temp___346 temp___347 temp___348
                    temp___349 temp___350 temp___351)))
  (forall ((temp___352 Int))
  (ite (= temp___352 temp___350)
  (= (select temp___344 temp___352) (of_rep temp___351))
  (ite (= temp___352 temp___348)
  (= (select temp___344 temp___352) (of_rep temp___349))
  (ite (= temp___352 temp___346)
  (= (select temp___344 temp___352) (of_rep temp___347))
  (= (select temp___344 temp___352) (select temp___345 temp___352))))))))))

(declare-fun temp___357 ((Array Int integer) Int Int Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___359 (Array Int integer)))
  (forall ((temp___360 Int) (temp___361 Int) (temp___362 Int)
  (temp___363 Int) (temp___364 Int) (temp___365 Int))
  (let ((temp___358 (temp___357 temp___359 temp___360 temp___361 temp___362
                    temp___363 temp___364 temp___365)))
  (forall ((temp___366 Int))
  (ite (= temp___366 temp___364)
  (= (select temp___358 temp___366) (of_rep temp___365))
  (ite (= temp___366 temp___362)
  (= (select temp___358 temp___366) (of_rep temp___363))
  (ite (= temp___366 temp___360)
  (= (select temp___358 temp___366) (of_rep temp___361))
  (= (select temp___358 temp___366) (select temp___359 temp___366))))))))))

(declare-fun temp___367 ((Array Int integer) Int Int Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___369 (Array Int integer)))
  (forall ((temp___370 Int) (temp___371 Int) (temp___372 Int)
  (temp___373 Int) (temp___374 Int) (temp___375 Int))
  (let ((temp___368 (temp___367 temp___369 temp___370 temp___371 temp___372
                    temp___373 temp___374 temp___375)))
  (forall ((temp___376 Int))
  (ite (= temp___376 temp___374)
  (= (select temp___368 temp___376) (of_rep temp___375))
  (ite (= temp___376 temp___372)
  (= (select temp___368 temp___376) (of_rep temp___373))
  (ite (= temp___376 temp___370)
  (= (select temp___368 temp___376) (of_rep temp___371))
  (= (select temp___368 temp___376) (select temp___369 temp___376))))))))))

(declare-fun temp___381 ((Array Int integer) Int Int Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___383 (Array Int integer)))
  (forall ((temp___384 Int) (temp___385 Int) (temp___386 Int)
  (temp___387 Int) (temp___388 Int) (temp___389 Int))
  (let ((temp___382 (temp___381 temp___383 temp___384 temp___385 temp___386
                    temp___387 temp___388 temp___389)))
  (forall ((temp___390 Int))
  (ite (= temp___390 temp___388)
  (= (select temp___382 temp___390) (of_rep temp___389))
  (ite (= temp___390 temp___386)
  (= (select temp___382 temp___390) (of_rep temp___387))
  (ite (= temp___390 temp___384)
  (= (select temp___382 temp___390) (of_rep temp___385))
  (= (select temp___382 temp___390) (select temp___383 temp___390))))))))))

(declare-fun temp___391 ((Array Int integer) Int Int Int Int Int
  Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___393 (Array Int integer)))
  (forall ((temp___394 Int) (temp___395 Int) (temp___396 Int)
  (temp___397 Int) (temp___398 Int) (temp___399 Int))
  (let ((temp___392 (temp___391 temp___393 temp___394 temp___395 temp___396
                    temp___397 temp___398 temp___399)))
  (forall ((temp___400 Int))
  (ite (= temp___400 temp___398)
  (= (select temp___392 temp___400) (of_rep temp___399))
  (ite (= temp___400 temp___396)
  (= (select temp___392 temp___400) (of_rep temp___397))
  (ite (= temp___400 temp___394)
  (= (select temp___392 temp___400) (of_rep temp___395))
  (= (select temp___392 temp___400) (select temp___393 temp___400))))))))))

(declare-const a (Array Int integer))

(declare-const o integer)

(declare-const o1 (Array Int integer))

(declare-const o2 integer)

(declare-const o3 (Array Int integer))

(declare-const o4 integer)

(declare-const o5 (Array Int integer))

(declare-const result (Array Int integer))

(declare-const a1 (Array Int integer))

(declare-const result1 (Array Int integer))

(declare-const a2 (Array Int integer))

(declare-const result2 (Array Int integer))

(declare-const a3 (Array Int integer))

;; H
  (assert (in_range1 i))

;; H
  (assert (in_range1 j))

;; H
  (assert (in_range1 k))

;; H
  (assert (and (and (not (= i j)) (not (= j k))) (not (= k i))))

;; H
  (assert (= a a_old))

;; H
  (assert (= (to_rep o) 3))

;; H
  (assert (= o1 (store a k o)))

;; H
  (assert (= (mk_map__ref result) (mk_map__ref a)))

;; H
  (assert (= a1 o1))

;; H
  (assert (= (to_rep o2) 2))

;; H
  (assert (= o3 (store a1 j o2)))

;; H
  (assert (= a1 result1))

;; H
  (assert (= a2 o3))

;; H
  (assert (= (to_rep o4) 1))

;; H
  (assert (= o5 (store a2 i o4)))

;; H
  (assert (= a2 result2))

;; H
  (assert (= a3 o5))

(assert
;; WP_parameter_def
 ;; File "simple_arrays.adb", line 127, characters 0-0
  (not
  (= (bool_eq (temp___333 a_old i 1 j 2 k 3) (- 2147483648) 2147483647
     (temp___343 a_old i 1 k 3 j 2) (- 2147483648) 2147483647) true)))
(check-sat)
(exit)
