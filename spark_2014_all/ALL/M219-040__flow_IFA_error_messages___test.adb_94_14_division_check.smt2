;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun r11b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun r12b () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun a () Int)

(declare-fun b () Int)

(declare-fun i () Int)

(declare-fun temp___154 () Int)

(declare-fun temp___153 () Int)

(declare-fun o () Int)

(declare-fun a1 () Int)

(declare-fun b1 () Int)

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun a2 () Int)

(declare-fun b2 () Int)

(declare-fun i2 () Int)

(declare-fun result1 () Int)

(declare-fun a3 () Int)

(declare-fun result2 () Int)

(declare-fun b3 () Int)

(declare-fun a4 () Int)

(declare-fun b4 () Int)

(declare-fun i3 () Int)

(declare-fun a5 () Int)

(declare-fun b5 () Int)

(declare-fun i4 () Int)

(declare-fun a6 () Int)

(declare-fun b6 () Int)

(declare-fun i5 () Int)

(declare-fun a7 () Int)

(declare-fun b7 () Int)

(declare-fun i6 () Int)

(define-fun b8 () int__ref (mk_int__ref b6))

(define-fun a8 () int__ref (mk_int__ref a6))

;; H
  (assert (in_range1 a))

;; H
  (assert (in_range1 b))

;; H
  (assert (= a r11b))

;; H
  (assert (in_range1 r11b))

;; H
  (assert (= b r12b))

;; H
  (assert (in_range1 r12b))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref i)))

;; H
  (assert (= i1 r11b))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= temp___154 b)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= temp___153 a)))

;; H
  (assert
  (=> (and (<= r11b i1) (<= i1 r12b))
  (and (and (in_range1 a2) (in_range1 b2)) (and (<= r11b i2) (<= i2 r12b)))))

;; H
  (assert
  (=> (and (<= r11b i1) (<= i1 r12b))
  (and (= o (* a2 i2)) (in_range1 (* a2 i2)))))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= result1 a2)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= a3 o)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= result2 b2)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= b3 5)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= i2 r12b)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= i2 i3)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= b3 b4)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= a3 a4)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= i4 i2)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= b5 b3)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= a5 a3)))

;; H
  (assert
  (=> (and (<= r11b i1) (<= i1 r12b)) (= (mk_int__ref i5) (mk_int__ref i3))))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= b8 (mk_int__ref b4))))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= a8 (mk_int__ref a4))))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= i6 i4)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= b7 b5)))

;; H
  (assert (=> (and (<= r11b i1) (<= i1 r12b)) (= a7 a5)))

;; H
  (assert (=> (not (and (<= r11b i1) (<= i1 r12b))) (= i1 i5)))

;; H
  (assert (=> (not (and (<= r11b i1) (<= i1 r12b))) (= b8 (mk_int__ref b))))

;; H
  (assert (=> (not (and (<= r11b i1) (<= i1 r12b))) (= a8 (mk_int__ref a))))

;; H
  (assert (=> (not (and (<= r11b i1) (<= i1 r12b))) (= i6 i1)))

;; H
  (assert (=> (not (and (<= r11b i1) (<= i1 r12b))) (= b7 b1)))

;; H
  (assert (=> (not (and (<= r11b i1) (<= i1 r12b))) (= a7 a1)))

(assert
;; WP_parameter_def
 ;; File "test.adb", line 76, characters 0-0
  (not (not (= 2 0))))
(check-sat)
(exit)
