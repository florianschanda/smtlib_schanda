(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 255)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(256 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  256)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 4294967295)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (32 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  32)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (32 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 32))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 32))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

logic to_int1 : t1 -> int

axiom to_int_def1 :
  (forall x:t1 [to_int1(x)]. ((is_signed_positive1(x) ->
  (to_int1(x) = tqtint1(x))) and ((not is_signed_positive1(x)) ->
  (to_int1(x) = (-(4294967296 - tqtint1(x)))))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  4294967296)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 32)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 4294967295)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (is_signed_positive1(x) <-> sge1(x, zeros1)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  4294967296) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  4294967296)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 4294967296)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  4294967296) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 4294967296)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 32)]. (eq_sub1(x, y, 0, 32) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

logic toBig : t -> t1

logic toSmall : t1 -> t

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t1. (ule1(x, rliteral) -> (tqtint1(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint1(toBig(x))))

type storage_offset

predicate in_range(x: int) = (((-9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic bool_eq2 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : storage_offset, storage_offset -> bool

logic dummy : storage_offset

type storage_offset__ref = { storage_offset__content : storage_offset
}

function storage_offset__ref___projection(a: storage_offset__ref) : storage_offset =
  (a).storage_offset__content

type storage_element

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq4 : t, t -> bool

axiom bool_eq_def3 :
  (forall x:t. forall y:t [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq1 : storage_element, storage_element -> bool

logic dummy1 : storage_element

type storage_element__ref = { storage_element__content : storage_element
}

function storage_element__ref___projection(a: storage_element__ref) : storage_element =
  (a).storage_element__content

logic to_rep : storage_element -> t

logic of_rep : t -> storage_element

axiom inversion_axiom :
  (forall x:storage_element [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int2(x: storage_element) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:storage_element [to_int2(x)]. uint_in_range(to_int2(x)))

type map__ref = { map__content : (int,storage_element) farray
}

logic slide : (int,storage_element) farray, int,
  int -> (int,storage_element) farray

axiom slide_eq :
  (forall a:(int,storage_element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,storage_element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,storage_element) farray, int, int,
  (int,storage_element) farray, int, int -> (int,storage_element) farray

axiom concat_def :
  (forall a:(int,storage_element) farray.
  forall b:(int,storage_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : storage_element, int -> (int,storage_element) farray

axiom singleton_def :
  (forall v:storage_element.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,storage_element) farray, int, int,
  (int,storage_element) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,storage_element) farray. forall a__first:int.
  forall a__last:int. forall b:(int,storage_element) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,storage_element) farray.
  forall b:(int,storage_element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,storage_element) farray, int, int,
  (int,storage_element) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,storage_element) farray.
  forall b:(int,storage_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,storage_element) farray.
  forall b:(int,storage_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and ult(to_rep((a[(i + 1)])), to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,storage_element) farray.
  forall b:(int,storage_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and ugt(to_rep((a[(j + 1)])), to_rep((b[(i + 1)]))))))))))))

type tstorage_offsetB

predicate in_range1(x: int) = (((-9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tstorage_offsetB, tstorage_offsetB -> bool

logic dummy2 : tstorage_offsetB

type tstorage_offsetB__ref = { tstorage_offsetB__content : tstorage_offsetB
}

function tstorage_offsetB__ref___projection(a: tstorage_offsetB__ref) : tstorage_offsetB =
  (a).tstorage_offsetB__content

logic to_rep1 : tstorage_offsetB -> int

logic of_rep1 : int -> tstorage_offsetB

axiom inversion_axiom1 :
  (forall x:tstorage_offsetB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:tstorage_offsetB [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t2

logic first : t2 -> tstorage_offsetB

logic last : t2 -> tstorage_offsetB

logic mk : int, int -> t2

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type us_t = { elts : (int,storage_element) farray; rt : t2
}

function to_array(a: us_t) : (int,storage_element) farray = (a).elts

function of_array(a: (int,storage_element) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,storage_element) farray -> int

logic value__component__size : int

logic object__component__size : (int,storage_element) farray -> int

logic value__alignment : int

logic object__alignment : (int,storage_element) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,storage_element) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,storage_element) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,storage_element) farray. (0 <= object__alignment(a)))

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,storage_element) farray

logic dummy4 : t2

type storage_array__ref = { storage_array__content : us_t
}

function storage_array__ref___projection(a: storage_array__ref) : us_t =
  (a).storage_array__content

type tintB

predicate in_range2(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : tintB, tintB -> bool

logic dummy5 : tintB

type tintB__ref = { tintB__content : tintB
}

function tintB__ref___projection(a: tintB__ref) : tintB = (a).tintB__content

type int__

predicate in_range3(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : int__, int__ -> bool

logic dummy6 : int__

type int____ref = { int____content : int__
}

function int____ref___projection(a: int____ref) : int__ = (a).int____content

logic to_rep2 : int__ -> int

logic of_rep2 : int -> int__

axiom inversion_axiom2 :
  (forall x:int__ [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:int__ [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type nat

logic attr__ATTRIBUTE_MODULUS1 : t1

logic bool_eq10 : t1, t1 -> bool

axiom bool_eq_def8 :
  (forall x:t1. forall y:t1 [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t1

logic user_eq6 : nat, nat -> bool

logic dummy7 : nat

type nat__ref = { nat__content : nat
}

function nat__ref___projection(a: nat__ref) : nat = (a).nat__content

logic to_rep3 : nat -> t1

logic of_rep3 : t1 -> nat

axiom inversion_axiom3 :
  (forall x:nat [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : true

axiom coerce_axiom3 :
  (forall x:t1 [to_rep3(of_rep3(x))]. (to_rep3(of_rep3(x)) = x))

function to_int3(x: nat) : int = tqtint1(to_rep3(x))

axiom range_int_axiom1 :
  (forall x:nat [to_int3(x)]. uint_in_range1(to_int3(x)))

type us_split_fields = { rec__linted__update__packet__x_position : int__;
rec__linted__update__packet__y_position : int__;
rec__linted__update__packet__z_position : int__;
rec__linted__update__packet__mx_position : int__;
rec__linted__update__packet__my_position : int__;
rec__linted__update__packet__mz_position : int__;
rec__linted__update__packet__z_rotation : nat;
rec__linted__update__packet__x_rotation : nat
}

function us_split_fields_X_Position__projection(a: us_split_fields) : int__ =
  (a).rec__linted__update__packet__x_position

function us_split_fields_Y_Position__projection(a: us_split_fields) : int__ =
  (a).rec__linted__update__packet__y_position

function us_split_fields_Z_Position__projection(a: us_split_fields) : int__ =
  (a).rec__linted__update__packet__z_position

function us_split_fields_MX_Position__projection(a: us_split_fields) : int__ =
  (a).rec__linted__update__packet__mx_position

function us_split_fields_MY_Position__projection(a: us_split_fields) : int__ =
  (a).rec__linted__update__packet__my_position

function us_split_fields_MZ_Position__projection(a: us_split_fields) : int__ =
  (a).rec__linted__update__packet__mz_position

function us_split_fields_Z_Rotation__projection(a: us_split_fields) : nat =
  (a).rec__linted__update__packet__z_rotation

function us_split_fields_X_Rotation__projection(a: us_split_fields) : nat =
  (a).rec__linted__update__packet__x_rotation

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq11(a, b)].
  ((((((((((to_rep2(((a).us_split_fields1).rec__linted__update__packet__x_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__x_position)) and
  (to_rep2(((a).us_split_fields1).rec__linted__update__packet__y_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__y_position))) and
  (to_rep2(((a).us_split_fields1).rec__linted__update__packet__z_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__z_position))) and
  (to_rep2(((a).us_split_fields1).rec__linted__update__packet__mx_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__mx_position))) and
  (to_rep2(((a).us_split_fields1).rec__linted__update__packet__my_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__my_position))) and
  (to_rep2(((a).us_split_fields1).rec__linted__update__packet__mz_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__mz_position))) and
  (to_rep3(((a).us_split_fields1).rec__linted__update__packet__z_rotation) = to_rep3(((b).us_split_fields1).rec__linted__update__packet__z_rotation))) and
  (to_rep3(((a).us_split_fields1).rec__linted__update__packet__x_rotation) = to_rep3(((b).us_split_fields1).rec__linted__update__packet__x_rotation))) ->
  (bool_eq11(a, b) = true)) and
  ((not ((((((((to_rep2(((a).us_split_fields1).rec__linted__update__packet__x_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__x_position)) and
  (to_rep2(((a).us_split_fields1).rec__linted__update__packet__y_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__y_position))) and
  (to_rep2(((a).us_split_fields1).rec__linted__update__packet__z_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__z_position))) and
  (to_rep2(((a).us_split_fields1).rec__linted__update__packet__mx_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__mx_position))) and
  (to_rep2(((a).us_split_fields1).rec__linted__update__packet__my_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__my_position))) and
  (to_rep2(((a).us_split_fields1).rec__linted__update__packet__mz_position) = to_rep2(((b).us_split_fields1).rec__linted__update__packet__mz_position))) and
  (to_rep3(((a).us_split_fields1).rec__linted__update__packet__z_rotation) = to_rep3(((b).us_split_fields1).rec__linted__update__packet__z_rotation))) and
  (to_rep3(((a).us_split_fields1).rec__linted__update__packet__x_rotation) = to_rep3(((b).us_split_fields1).rec__linted__update__packet__x_rotation)))) ->
  (bool_eq11(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:int__. forall a1:int__. forall a2:int__. forall a3:int__.
  forall a4:int__. forall a5:int__. forall a6:nat. forall a7:nat.
  (0 <= object__size1({ us_split_fields1 = {
  rec__linted__update__packet__x_position = a;
  rec__linted__update__packet__y_position = a1;
  rec__linted__update__packet__z_position = a2;
  rec__linted__update__packet__mx_position = a3;
  rec__linted__update__packet__my_position = a4;
  rec__linted__update__packet__mz_position = a5;
  rec__linted__update__packet__z_rotation = a6;
  rec__linted__update__packet__x_rotation = a7 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:int__. forall a1:int__. forall a2:int__. forall a3:int__.
  forall a4:int__. forall a5:int__. forall a6:nat. forall a7:nat.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__linted__update__packet__x_position = a;
  rec__linted__update__packet__y_position = a1;
  rec__linted__update__packet__z_position = a2;
  rec__linted__update__packet__mx_position = a3;
  rec__linted__update__packet__my_position = a4;
  rec__linted__update__packet__mz_position = a5;
  rec__linted__update__packet__z_rotation = a6;
  rec__linted__update__packet__x_rotation = a7 } })))

logic linted__update__packet__x_position__first__bit : int

logic linted__update__packet__x_position__last__bit : int

logic linted__update__packet__x_position__position : int

axiom linted__update__packet__x_position__first__bit_axiom :
  (0 <= linted__update__packet__x_position__first__bit)

axiom linted__update__packet__x_position__last__bit_axiom :
  (linted__update__packet__x_position__first__bit <  linted__update__packet__x_position__last__bit)

axiom linted__update__packet__x_position__position_axiom :
  (0 <= linted__update__packet__x_position__position)

logic linted__update__packet__y_position__first__bit : int

logic linted__update__packet__y_position__last__bit : int

logic linted__update__packet__y_position__position : int

axiom linted__update__packet__y_position__first__bit_axiom :
  (0 <= linted__update__packet__y_position__first__bit)

axiom linted__update__packet__y_position__last__bit_axiom :
  (linted__update__packet__y_position__first__bit <  linted__update__packet__y_position__last__bit)

axiom linted__update__packet__y_position__position_axiom :
  (0 <= linted__update__packet__y_position__position)

logic linted__update__packet__z_position__first__bit : int

logic linted__update__packet__z_position__last__bit : int

logic linted__update__packet__z_position__position : int

axiom linted__update__packet__z_position__first__bit_axiom :
  (0 <= linted__update__packet__z_position__first__bit)

axiom linted__update__packet__z_position__last__bit_axiom :
  (linted__update__packet__z_position__first__bit <  linted__update__packet__z_position__last__bit)

axiom linted__update__packet__z_position__position_axiom :
  (0 <= linted__update__packet__z_position__position)

logic linted__update__packet__mx_position__first__bit : int

logic linted__update__packet__mx_position__last__bit : int

logic linted__update__packet__mx_position__position : int

axiom linted__update__packet__mx_position__first__bit_axiom :
  (0 <= linted__update__packet__mx_position__first__bit)

axiom linted__update__packet__mx_position__last__bit_axiom :
  (linted__update__packet__mx_position__first__bit <  linted__update__packet__mx_position__last__bit)

axiom linted__update__packet__mx_position__position_axiom :
  (0 <= linted__update__packet__mx_position__position)

logic linted__update__packet__my_position__first__bit : int

logic linted__update__packet__my_position__last__bit : int

logic linted__update__packet__my_position__position : int

axiom linted__update__packet__my_position__first__bit_axiom :
  (0 <= linted__update__packet__my_position__first__bit)

axiom linted__update__packet__my_position__last__bit_axiom :
  (linted__update__packet__my_position__first__bit <  linted__update__packet__my_position__last__bit)

axiom linted__update__packet__my_position__position_axiom :
  (0 <= linted__update__packet__my_position__position)

logic linted__update__packet__mz_position__first__bit : int

logic linted__update__packet__mz_position__last__bit : int

logic linted__update__packet__mz_position__position : int

axiom linted__update__packet__mz_position__first__bit_axiom :
  (0 <= linted__update__packet__mz_position__first__bit)

axiom linted__update__packet__mz_position__last__bit_axiom :
  (linted__update__packet__mz_position__first__bit <  linted__update__packet__mz_position__last__bit)

axiom linted__update__packet__mz_position__position_axiom :
  (0 <= linted__update__packet__mz_position__position)

logic linted__update__packet__z_rotation__first__bit : int

logic linted__update__packet__z_rotation__last__bit : int

logic linted__update__packet__z_rotation__position : int

axiom linted__update__packet__z_rotation__first__bit_axiom :
  (0 <= linted__update__packet__z_rotation__first__bit)

axiom linted__update__packet__z_rotation__last__bit_axiom :
  (linted__update__packet__z_rotation__first__bit <  linted__update__packet__z_rotation__last__bit)

axiom linted__update__packet__z_rotation__position_axiom :
  (0 <= linted__update__packet__z_rotation__position)

logic linted__update__packet__x_rotation__first__bit : int

logic linted__update__packet__x_rotation__last__bit : int

logic linted__update__packet__x_rotation__position : int

axiom linted__update__packet__x_rotation__first__bit_axiom :
  (0 <= linted__update__packet__x_rotation__first__bit)

axiom linted__update__packet__x_rotation__last__bit_axiom :
  (linted__update__packet__x_rotation__first__bit <  linted__update__packet__x_rotation__last__bit)

axiom linted__update__packet__x_rotation__position_axiom :
  (0 <= linted__update__packet__x_rotation__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy8 : int__

logic dummy9 : int__

logic dummy10 : int__

logic dummy11 : int__

logic dummy12 : int__

logic dummy13 : int__

logic dummy14 : nat

logic dummy15 : nat

type packet__ref = { packet__content : us_rep
}

function packet__ref___projection(a: packet__ref) : us_rep =
  (a).packet__content

type tstorageP1

predicate in_range4(x: int) = ((1 <= x) and (x <= 32))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : tstorageP1, tstorageP1 -> bool

logic dummy16 : tstorageP1

type tstorageP1__ref = { tstorageP1__content : tstorageP1
}

function tstorageP1__ref___projection(a: tstorageP1__ref) : tstorageP1 =
  (a).tstorageP1__content

logic u : int__

logic u1 : int__

logic u2 : int__

logic u3 : int__

logic u4 : int__

logic u5 : int__

logic u6 : nat

logic u7 : nat

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type ttupleP1

predicate in_range5(x: int) = ((1 <= x) and (x <= 4))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : ttupleP1, ttupleP1 -> bool

logic dummy17 : ttupleP1

type ttupleP1__ref = { ttupleP1__content : ttupleP1
}

function ttupleP1__ref___projection(a: ttupleP1__ref) : ttupleP1 =
  (a).ttupleP1__content

logic c206b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c210b : t1

logic attr__ATTRIBUTE_ADDRESS5 : int

logic c216b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic c220b : t1

logic attr__ATTRIBUTE_ADDRESS9 : int

logic c226b : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic c230b : t1

logic attr__ATTRIBUTE_ADDRESS13 : int

logic c236b : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic c240b : t1

logic attr__ATTRIBUTE_ADDRESS17 : int

logic c246b : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic attr__ATTRIBUTE_ADDRESS20 : int

logic c250b : t1

logic attr__ATTRIBUTE_ADDRESS21 : int

logic c256b : int

logic attr__ATTRIBUTE_ADDRESS22 : int

logic attr__ATTRIBUTE_ADDRESS23 : int

logic attr__ATTRIBUTE_ADDRESS24 : int

logic c260b : t1

logic attr__ATTRIBUTE_ADDRESS25 : int

logic c266b : t1

logic attr__ATTRIBUTE_ADDRESS26 : int

logic c272b : t1

logic attr__ATTRIBUTE_ADDRESS27 : int

logic temp___302 : t, t, t, t -> (int,storage_element) farray

axiom def_axiom :
  (forall temp___304:t. forall temp___305:t. forall temp___306:t.
  forall temp___307:t. (((((temp___302(temp___304, temp___305, temp___306,
  temp___307)[1]) = of_rep(temp___304)) and ((temp___302(temp___304,
  temp___305, temp___306, temp___307)[2]) = of_rep(temp___305))) and
  ((temp___302(temp___304, temp___305, temp___306,
  temp___307)[3]) = of_rep(temp___306))) and ((temp___302(temp___304,
  temp___305, temp___306, temp___307)[4]) = of_rep(temp___307))))

logic temp___309 : t, t, t, t -> (int,storage_element) farray

axiom def_axiom1 :
  (forall temp___311:t. forall temp___312:t. forall temp___313:t.
  forall temp___314:t. (((((temp___309(temp___311, temp___312, temp___313,
  temp___314)[1]) = of_rep(temp___311)) and ((temp___309(temp___311,
  temp___312, temp___313, temp___314)[2]) = of_rep(temp___312))) and
  ((temp___309(temp___311, temp___312, temp___313,
  temp___314)[3]) = of_rep(temp___313))) and ((temp___309(temp___311,
  temp___312, temp___313, temp___314)[4]) = of_rep(temp___314))))

logic temp___318 : t, t, t, t -> (int,storage_element) farray

axiom def_axiom2 :
  (forall temp___320:t. forall temp___321:t. forall temp___322:t.
  forall temp___323:t. (((((temp___318(temp___320, temp___321, temp___322,
  temp___323)[1]) = of_rep(temp___320)) and ((temp___318(temp___320,
  temp___321, temp___322, temp___323)[2]) = of_rep(temp___321))) and
  ((temp___318(temp___320, temp___321, temp___322,
  temp___323)[3]) = of_rep(temp___322))) and ((temp___318(temp___320,
  temp___321, temp___322, temp___323)[4]) = of_rep(temp___323))))

logic temp___327 : t, t, t, t -> (int,storage_element) farray

axiom def_axiom3 :
  (forall temp___329:t. forall temp___330:t. forall temp___331:t.
  forall temp___332:t. (((((temp___327(temp___329, temp___330, temp___331,
  temp___332)[1]) = of_rep(temp___329)) and ((temp___327(temp___329,
  temp___330, temp___331, temp___332)[2]) = of_rep(temp___330))) and
  ((temp___327(temp___329, temp___330, temp___331,
  temp___332)[3]) = of_rep(temp___331))) and ((temp___327(temp___329,
  temp___330, temp___331, temp___332)[4]) = of_rep(temp___332))))

logic temp___336 : t, t, t, t -> (int,storage_element) farray

axiom def_axiom4 :
  (forall temp___338:t. forall temp___339:t. forall temp___340:t.
  forall temp___341:t. (((((temp___336(temp___338, temp___339, temp___340,
  temp___341)[1]) = of_rep(temp___338)) and ((temp___336(temp___338,
  temp___339, temp___340, temp___341)[2]) = of_rep(temp___339))) and
  ((temp___336(temp___338, temp___339, temp___340,
  temp___341)[3]) = of_rep(temp___340))) and ((temp___336(temp___338,
  temp___339, temp___340, temp___341)[4]) = of_rep(temp___341))))

logic temp___345 : t, t, t, t -> (int,storage_element) farray

axiom def_axiom5 :
  (forall temp___347:t. forall temp___348:t. forall temp___349:t.
  forall temp___350:t. (((((temp___345(temp___347, temp___348, temp___349,
  temp___350)[1]) = of_rep(temp___347)) and ((temp___345(temp___347,
  temp___348, temp___349, temp___350)[2]) = of_rep(temp___348))) and
  ((temp___345(temp___347, temp___348, temp___349,
  temp___350)[3]) = of_rep(temp___349))) and ((temp___345(temp___347,
  temp___348, temp___349, temp___350)[4]) = of_rep(temp___350))))

logic temp___354 : t, t, t, t -> (int,storage_element) farray

axiom def_axiom6 :
  (forall temp___356:t. forall temp___357:t. forall temp___358:t.
  forall temp___359:t. (((((temp___354(temp___356, temp___357, temp___358,
  temp___359)[1]) = of_rep(temp___356)) and ((temp___354(temp___356,
  temp___357, temp___358, temp___359)[2]) = of_rep(temp___357))) and
  ((temp___354(temp___356, temp___357, temp___358,
  temp___359)[3]) = of_rep(temp___358))) and ((temp___354(temp___356,
  temp___357, temp___358, temp___359)[4]) = of_rep(temp___359))))

logic temp___363 : t, t, t, t -> (int,storage_element) farray

axiom def_axiom7 :
  (forall temp___365:t. forall temp___366:t. forall temp___367:t.
  forall temp___368:t. (((((temp___363(temp___365, temp___366, temp___367,
  temp___368)[1]) = of_rep(temp___365)) and ((temp___363(temp___365,
  temp___366, temp___367, temp___368)[2]) = of_rep(temp___366))) and
  ((temp___363(temp___365, temp___366, temp___367,
  temp___368)[3]) = of_rep(temp___367))) and ((temp___363(temp___365,
  temp___366, temp___367, temp___368)[4]) = of_rep(temp___368))))

 (* File "linted-update.ads", line 41, characters 0-0 *)
goal WP_parameter_def :
  (forall c207b:t1. forall y:t1. forall c217b:t1. forall y1:t1.
  forall c227b:t1. forall y2:t1. forall c237b:t1. forall y3:t1. forall o:int.
  forall o1:int. forall o2:t1. forall o3:t1. forall o4:int. forall o5:t1.
  forall o6:int. forall o7:int. forall o8:t1. forall o9:t1. forall o10:int.
  forall o11:t1. forall o12:int. forall o13:int. forall o14:t1.
  forall o15:t1. forall o16:int. forall o17:t1. forall o18:int.
  forall o19:int. forall o20:t1. forall o21:t1. forall o22:int.
  forall o23:t1. forall result:t1. forall y4:t1. forall result1:t1.
  forall y5:t1. forall result2:t1. forall c207b1:t1. forall result3:t1.
  forall y6:t1. forall result4:t1. forall y7:t1. forall result5:t1.
  forall c217b1:t1. forall result6:t1. forall y8:t1. forall result7:t1.
  forall y9:t1. forall result8:t1. forall c227b1:t1. forall result9:t1.
  forall y10:t1. forall result10:t1. forall y11:t1. forall result11:t1.
  forall c237b1:t1. (((to_rep2(u) = c206b) and in_range3(c206b)) ->
  (((((c206b <  0) and ((((((o = (c206b - (-2147483648))) and
  in_range2((c206b - (-2147483648)))) and ((o1 = o) and
  uint_in_range1(o))) and (o2 = of_int1(o1))) and (o3 = sub1(o2,
  of_int1(2147483648)))) and ((result = y) and (y4 = o3)))) or
  ((not (c206b <  0)) and (((((o4 = c206b) and uint_in_range1(c206b)) and
  (o5 = of_int1(o4))) and ((result1 = y) and (y5 = o5))) and (y4 = y5)))) and
  ((result2 = c207b) and (c207b1 = y4))) -> ((c207b1 = c210b) ->
  (((to_rep2(u1) = c216b) and in_range3(c216b)) -> (((((c216b <  0) and
  ((((((o6 = (c216b - (-2147483648))) and
  in_range2((c216b - (-2147483648)))) and ((o7 = o6) and
  uint_in_range1(o6))) and (o8 = of_int1(o7))) and (o9 = sub1(o8,
  of_int1(2147483648)))) and ((result3 = y1) and (y6 = o9)))) or
  ((not (c216b <  0)) and (((((o10 = c216b) and uint_in_range1(c216b)) and
  (o11 = of_int1(o10))) and ((result4 = y1) and (y7 = o11))) and
  (y6 = y7)))) and ((result5 = c217b) and (c217b1 = y6))) ->
  ((c217b1 = c220b) -> (((to_rep2(u2) = c226b) and in_range3(c226b)) ->
  (((((c226b <  0) and ((((((o12 = (c226b - (-2147483648))) and
  in_range2((c226b - (-2147483648)))) and ((o13 = o12) and
  uint_in_range1(o12))) and (o14 = of_int1(o13))) and (o15 = sub1(o14,
  of_int1(2147483648)))) and ((result6 = y2) and (y8 = o15)))) or
  ((not (c226b <  0)) and (((((o16 = c226b) and uint_in_range1(c226b)) and
  (o17 = of_int1(o16))) and ((result7 = y2) and (y9 = o17))) and
  (y8 = y9)))) and ((result8 = c227b) and (c227b1 = y8))) ->
  ((c227b1 = c230b) -> (((to_rep2(u3) = c236b) and in_range3(c236b)) ->
  (((((c236b <  0) and ((((((o18 = (c236b - (-2147483648))) and
  in_range2((c236b - (-2147483648)))) and ((o19 = o18) and
  uint_in_range1(o18))) and (o20 = of_int1(o19))) and (o21 = sub1(o20,
  of_int1(2147483648)))) and ((result9 = y3) and (y10 = o21)))) or
  ((not (c236b <  0)) and (((((o22 = c236b) and uint_in_range1(c236b)) and
  (o23 = of_int1(o22))) and ((result10 = y3) and (y11 = o23))) and
  (y10 = y11)))) and ((result11 = c237b) and (c237b1 = y10))) ->
  ((c237b1 = c240b) -> (((to_rep2(u4) = c246b) and in_range3(c246b)) ->
  ((c246b <  0) -> in_range2((c246b - (-2147483648))))))))))))))))))
