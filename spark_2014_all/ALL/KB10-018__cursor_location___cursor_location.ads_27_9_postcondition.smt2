;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort extended_location 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (extended_location extended_location) Bool)

(declare-const dummy extended_location)

(declare-datatypes ()
((extended_location__ref
 (mk_extended_location__ref (extended_location__content extended_location)))))
(define-fun extended_location__ref___projection ((a extended_location__ref)) extended_location
  (extended_location__content a))

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 2)) (in_range1 temp___expr_136)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))))))

(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-sort location 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (location location) Bool)

(declare-const dummy1 location)

(declare-datatypes ()
((location__ref (mk_location__ref (location__content location)))))
(define-fun location__ref___projection ((a location__ref)) location (location__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 2)) (in_range2 temp___expr_142)))

(declare-fun change_side (Int) Int)

(declare-fun change_side__function_guard (Int Int) Bool)

(declare-fun fulfill_condition (Int (Array Int Bool) (Array Int Bool)) Bool)

(declare-fun fulfill_condition__function_guard (Bool Int (Array Int Bool)
  (Array Int Bool)) Bool)

;; fulfill_condition__post_axiom
  (assert
  (forall ((side Int))
  (forall ((request (Array Int Bool)) (du_available (Array Int Bool)))
  (! (=> (dynamic_invariant1 side true true true)
     (and (= (select du_available side) true)
     (or (= (select request side) true)
     (not (= (select du_available (change_side side)) true))))) :pattern (
  (fulfill_condition side request du_available)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const request (Array Int Bool))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const du_available (Array Int Bool))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun none_available ((Array Int Bool)) Bool)

(declare-fun none_available__function_guard (Bool (Array Int Bool)) Bool)

;; none_available__post_axiom
  (assert
  (forall ((du_available1 (Array Int Bool)))
  (! (and (not (= (select du_available1 1) true))
     (not (= (select du_available1 2) true))) :pattern ((none_available
                                                        du_available1)) )))

;; change_side__post_axiom
  (assert
  (forall ((side Int))
  (! (=> (dynamic_invariant1 side true true true) (dynamic_invariant1
     (change_side side) true false true)) :pattern ((change_side side)) )))

;; change_side__def_axiom
  (assert
  (forall ((side Int))
  (! (=> (dynamic_invariant1 side true true true)
     (= (change_side side) (ite (= side 1) 2 1))) :pattern ((change_side
                                                            side)) )))

(declare-const current Int)

(declare-const current1 Int)

(declare-const result Bool)

(declare-const result1 Int)

(declare-const current2 Int)

(declare-const result2 Bool)

(declare-const result3 Int)

(declare-const current3 Int)

(declare-const result4 Bool)

(declare-const result5 Int)

(declare-const current4 Int)

(declare-const current5 Int)

(declare-const current6 Int)

;; H
  (assert (in_range1 current))

;; H
  (assert
  (and (= result (fulfill_condition 1 request du_available))
  (and (= (select du_available 1) true)
  (or (= (select request 1) true)
  (not (= (select du_available (change_side 1)) true))))))

;; H
  (assert (=> (= result true) (= result1 current)))

;; H
  (assert (=> (= result true) (= current2 1)))

;; H
  (assert
  (=> (not (= result true))
  (and (= result2 (fulfill_condition 2 request du_available))
  (and (= (select du_available 2) true)
  (or (= (select request 2) true)
  (not (= (select du_available (change_side 2)) true)))))))

;; H
  (assert
  (=> (not (= result true)) (=> (= result2 true) (= result3 current))))

;; H
  (assert (=> (not (= result true)) (=> (= result2 true) (= current3 2))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true))
  (and (= result4 (none_available du_available))
  (and (not (= (select du_available 1) true))
  (not (= (select du_available 2) true)))))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true)) (=> (= result4 true) (= result5 current)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true)) (=> (= result4 true) (= current4 0)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true))
  (=> (not (= result4 true)) (= current4 current)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true))
  (=> (not (= result4 true)) (= current4 current1)))))

;; H
  (assert
  (=> (not (= result true))
  (=> (not (= result2 true)) (= current3 current4))))

;; H
  (assert (=> (not (= result true)) (= current2 current3)))

;; H
  (assert (= current2 current5))

;; H
  (assert (= current6 current2))

;; H
  (assert (not (= (select du_available 1) true)))

(assert
;; WP_parameter_def
 ;; File "cursor_location.adb", line 3, characters 0-0
  (not (not (= current5 1))))
(check-sat)
(exit)
