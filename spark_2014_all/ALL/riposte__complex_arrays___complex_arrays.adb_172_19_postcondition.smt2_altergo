(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type counter

predicate in_range1(x: int) = ((0 <= x) and (x <= 1002))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : counter, counter -> bool

logic dummy : counter

type counter__ref = { counter__content : counter
}

function counter__ref___projection(a: counter__ref) : counter =
  (a).counter__content

type index

predicate in_range2(x: int) = ((0 <= x) and (x <= 1001))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type value

predicate in_range3(x: int) = (((-23) <= x) and (x <= 69))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : value, value -> bool

logic dummy2 : value

type value__ref = { value__content : value
}

function value__ref___projection(a: value__ref) : value = (a).value__content

logic to_rep : value -> int

logic of_rep : int -> value

axiom inversion_axiom : (forall x:value [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:value [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,value) farray
}

logic slide : (int,value) farray, int, int -> (int,value) farray

axiom slide_eq :
  (forall a:(int,value) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,value) farray, int, int, (int,value) farray, int,
  int -> (int,value) farray

axiom concat_def :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : value, int -> (int,value) farray

axiom singleton_def :
  (forall v:value.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,value) farray, int, int, (int,value) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,value) farray. forall a__first:int. forall a__last:int.
  forall b:(int,value) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,value) farray, int, int, (int,value) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic create_step_array : int -> (int,value) farray

logic create_step_array__function_guard : (int,value) farray, int -> prop

axiom create_step_array__post_axiom :
  (forall i:int [create_step_array(i)]. (in_range2(i) ->
  (forall j:int. (((0 <= j) and (j <= 1001)) -> (((j <  i) ->
  (to_rep((create_step_array(i)[j])) = (-23))) and ((i <= j) ->
  (to_rep((create_step_array(i)[j])) = 69)))))))

logic i : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "complex_arrays.adb", line 5, characters 0-0 *)
goal WP_parameter_def :
  (forall step:(int,value) farray. forall c:int. forall j:int.
  forall complex_arrays__use_step_array__result:int.
  forall o:(int,value) farray. forall temp___254:int. forall temp___253:int.
  forall o1:int. forall result:int. forall c1:int.
  forall result1:(int,value) farray. forall step1:(int,value) farray.
  forall result2:int. forall j1:int. forall result3:int. forall c2:int.
  forall c3:int. forall j2:int. forall c4:int. forall j3:int. forall c5:int.
  forall j4:int. forall c6:int. forall j5:int. forall c7:int. forall j6:int.
  forall result4:int. forall complex_arrays__use_step_array__result1:int.
  forall complex_arrays__use_step_array__result2:int.
  forall complex_arrays__use_step_array__result3:int.
  forall step2:(int,value) farray. forall c8:int. forall j7:int.
  forall complex_arrays__use_step_array__result4:int.
  forall step3:(int,value) farray. forall c9:int. forall j8:int.
  forall complex_arrays__use_step_array__result5:int.
  (forall result5:int. ((in_range2(i) and ((((({ int__content = result } = {
  int__content = c }) and (c1 = 0)) and (in_range1(c1) and
  ((((o = create_step_array(i)) and
  (forall j9:int. (((0 <= j9) and (j9 <= 1001)) -> (((j9 <  i) ->
  (to_rep((o[j9])) = (-23))) and ((i <= j9) -> (to_rep((o[j9])) = 69)))))) and
  (({ map__content = result1 } = { map__content = step }) and
  (step1 = o))) and (((({ int__content = result2 } = { int__content = j
  }) and (j1 = 0)) and ((((0 <= j1) and (j1 <= 1001)) and
  ((((temp___254 = j1) and ((temp___253 = c1) and
  ((((to_rep((step1[j1])) = (-23)) and (((o1 = (c1 + 1)) and
  in_range1((c1 + 1))) and ((c1 = result3) and (c2 = o1)))) or
  ((not (to_rep((step1[j1])) = (-23))) and (c2 = c1))) and
  ((((forall k:int. (((0 <= k) and (k <= 1001)) -> (((k <  i) ->
     (to_rep((step1[k])) = (-23))) and ((i <= k) ->
     (to_rep((step1[k])) = 69))))) and
  ((j2 <  i) -> (c3 = (j2 + 1)))) and ((i <= j2) -> (c3 = i))) and
  (((((0 <= 1002) -> in_range1(c3)) and ((0 <= 1001) -> in_range2(j2))) and
  ((0 <= j2) and (j2 <= 1001))) and (j2 = 1001)))))) and (((j2 = j3) and
  (c3 = c4)) and ((j4 = j2) and (c5 = c3)))) and (((j5 = j3) and
  (c6 = c4)) and ((j6 = j4) and (c7 = c5))))) or ((not ((0 <= j1) and
  (j1 <= 1001))) and (((j1 = j5) and (c1 = c6)) and ((j6 = j1) and
  (c7 = c1)))))) and
  (((complex_arrays__use_step_array__result1 = complex_arrays__use_step_array__result2) and
  (complex_arrays__use_step_array__result3 = complex_arrays__use_step_array__result1)) and
  ((result4 = complex_arrays__use_step_array__result) and
  (complex_arrays__use_step_array__result1 = c6))))))) and
  (((complex_arrays__use_step_array__result2 = complex_arrays__use_step_array__result4) and
  ((j7 = j5) and ((c8 = c6) and (step2 = step1)))) and
  ((complex_arrays__use_step_array__result5 = complex_arrays__use_step_array__result3) and
  ((j8 = j6) and ((c9 = c7) and (step3 = step1)))))) and
  (result5 = complex_arrays__use_step_array__result4))) ->
  (i = complex_arrays__use_step_array__result4))))
