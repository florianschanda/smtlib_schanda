;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__foo__r__x integer)(rec__foo__r__y integer)(rec__foo__r__z integer)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) integer
  (rec__foo__r__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) integer
  (rec__foo__r__y a))

(define-fun us_split_fields_Z__projection ((a us_split_fields)) integer
  (rec__foo__r__z a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep (rec__foo__r__x (us_split_fields1 a)))
                        (to_rep (rec__foo__r__x (us_split_fields1 b))))
                        (= (to_rep (rec__foo__r__y (us_split_fields1 a)))
                        (to_rep (rec__foo__r__y (us_split_fields1 b)))))
                        (= (to_rep (rec__foo__r__z (us_split_fields1 a)))
                        (to_rep (rec__foo__r__z (us_split_fields1 b)))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun foo__r__x__first__bit () Int)

(declare-fun foo__r__x__last__bit () Int)

(declare-fun foo__r__x__position () Int)

;; foo__r__x__first__bit_axiom
  (assert (<= 0 foo__r__x__first__bit))

;; foo__r__x__last__bit_axiom
  (assert (< foo__r__x__first__bit foo__r__x__last__bit))

;; foo__r__x__position_axiom
  (assert (<= 0 foo__r__x__position))

(declare-fun foo__r__y__first__bit () Int)

(declare-fun foo__r__y__last__bit () Int)

(declare-fun foo__r__y__position () Int)

;; foo__r__y__first__bit_axiom
  (assert (<= 0 foo__r__y__first__bit))

;; foo__r__y__last__bit_axiom
  (assert (< foo__r__y__first__bit foo__r__y__last__bit))

;; foo__r__y__position_axiom
  (assert (<= 0 foo__r__y__position))

(declare-fun foo__r__z__first__bit () Int)

(declare-fun foo__r__z__last__bit () Int)

(declare-fun foo__r__z__position () Int)

;; foo__r__z__first__bit_axiom
  (assert (<= 0 foo__r__z__first__bit))

;; foo__r__z__last__bit_axiom
  (assert (< foo__r__z__first__bit foo__r__z__last__bit))

;; foo__r__z__position_axiom
  (assert (<= 0 foo__r__z__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun dummy1 () us_rep)

(declare-datatypes () ((r__ref (mk_r__ref (r__content us_rep)))))
(define-fun r__ref___projection ((a r__ref)) us_rep (r__content a))

(declare-fun n () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort t6b 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (t6b t6b) Bool)

(declare-fun dummy2 () t6b)

(declare-datatypes () ((t6b__ref (mk_t6b__ref (t6b__content t6b)))))
(define-fun t6b__ref___projection ((a t6b__ref)) t6b (t6b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun tmp__split_fields () integer)

(declare-fun tmp__split_fields1 () integer)

(declare-fun tmp__split_fields2 () integer)

(declare-fun i () Int)

(declare-fun o () integer)

(declare-fun o1 () integer)

(declare-fun o2 () integer)

(declare-fun o3 () integer)

(declare-fun o4 () integer)

(declare-fun o5 () integer)

(declare-fun foo__test_02__tmp__assume () integer)

(declare-fun foo__test_02__tmp__assume1 () integer)

(declare-fun foo__test_02__tmp__assume2 () integer)

(declare-fun result () integer)

(declare-fun result1 () integer)

(declare-fun result2 () integer)

(declare-fun tmp__split_fields3 () integer)

(declare-fun tmp__split_fields4 () integer)

(declare-fun tmp__split_fields5 () integer)

(declare-fun result3 () Int)

(declare-fun i1 () Int)

;; H
  (assert (in_range1 n))

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= (to_rep o1) n))

;; H
  (assert (= (to_rep o2) n))

;; H
  (assert (= o2 o3))

;; H
  (assert (= o1 o4))

;; H
  (assert (= o o5))

;; H
  (assert (= foo__test_02__tmp__assume o3))

;; H
  (assert (= foo__test_02__tmp__assume1 o4))

;; H
  (assert (= foo__test_02__tmp__assume2 o5))

;; H
  (assert (= result tmp__split_fields))

;; H
  (assert (= result1 tmp__split_fields1))

;; H
  (assert (= result2 tmp__split_fields2))

;; H
  (assert (= foo__test_02__tmp__assume tmp__split_fields3))

;; H
  (assert (= foo__test_02__tmp__assume1 tmp__split_fields4))

;; H
  (assert (= foo__test_02__tmp__assume2 tmp__split_fields5))

;; H
  (assert (= result3 i))

;; H
  (assert (= i1 1))

;; H
  (assert (<= 1 i1))

;; H
  (assert (<= i1 3))

(assert
;; WP_parameter_def
 ;; File "foo.adb", line 28, characters 0-0
  (not (in_range1 (+ (to_rep tmp__split_fields4) 1))))
(check-sat)
(exit)
