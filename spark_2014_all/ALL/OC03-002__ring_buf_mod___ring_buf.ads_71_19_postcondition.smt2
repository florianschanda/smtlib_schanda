;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 16) Int) Bool)

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2nat x)
                                            (- (- 65536 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort ar_index 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (ar_index ar_index) Bool)

(declare-const dummy1 ar_index)

(declare-datatypes ()
((ar_index__ref (mk_ar_index__ref (ar_index__content ar_index)))))
(define-fun ar_index__ref___projection ((a ar_index__ref)) ar_index (ar_index__content
                                                                    a))

(declare-fun to_rep1 (ar_index) (_ BitVec 16))

(declare-fun of_rep1 ((_ BitVec 16)) ar_index)

;; inversion_axiom
  (assert
  (forall ((x ar_index))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x ar_index)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x ar_index)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort length_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 65536)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (length_type length_type) Bool)

(declare-const dummy2 length_type)

(declare-datatypes ()
((length_type__ref (mk_length_type__ref (length_type__content length_type)))))
(define-fun length_type__ref___projection ((a length_type__ref)) length_type
  (length_type__content a))

(declare-fun to_rep2 (length_type) Int)

(declare-fun of_rep2 (Int) length_type)

;; inversion_axiom
  (assert
  (forall ((x length_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x length_type)) (! (in_range2
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 16) integer))))))
(declare-fun slide ((Array (_ BitVec 16) integer) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) integer))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 16) integer)))
  (forall ((first (_ BitVec 16)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 16) integer)))
  (forall ((old_first (_ BitVec 16)))
  (forall ((new_first (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 16) integer) (_ BitVec 16)
  (_ BitVec 16) (Array (_ BitVec 16) integer) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) integer))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 16) integer))
  (b (Array (_ BitVec 16) integer)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer
  (_ BitVec 16)) (Array (_ BitVec 16) integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i (_ BitVec 16)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 16) integer))
  (a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b (Array (_ BitVec 16) integer)) (b__first (_ BitVec 16))
  (b__last (_ BitVec 16))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 16)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 16) integer))
  (b (Array (_ BitVec 16) integer)))
  (forall ((a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b__first (_ BitVec 16)) (b__last (_ BitVec 16)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 16)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 16) integer) (_ BitVec 16)
  (_ BitVec 16) (Array (_ BitVec 16) integer) (_ BitVec 16)
  (_ BitVec 16)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 16) integer))
  (b (Array (_ BitVec 16) integer)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 16) integer))
  (b (Array (_ BitVec 16) integer)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 16)) (j (_ BitVec 16)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (< (to_rep (select a (bvadd i #x0001))) (to_rep
                                             (select b (bvadd j #x0001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 16) integer))
  (b (Array (_ BitVec 16) integer)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 16)) (j (_ BitVec 16)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (< (to_rep (select b (bvadd i #x0001))) (to_rep
                                             (select a (bvadd j #x0001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) ar_index)

(declare-fun last (t) ar_index)

(declare-fun mk ((_ BitVec 16) (_ BitVec 16)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool true)

(declare-datatypes ()
((us_t (mk___t (elts (Array (_ BitVec 16) integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 16) integer) (elts a))

(define-fun of_array ((a (Array (_ BitVec 16) integer)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 16) (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 16) (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1)
                                  0))

(declare-const value__size Int)

(declare-fun object__size ((Array (_ BitVec 16) integer)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array (_ BitVec 16) integer)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array (_ BitVec 16) integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((model____ref (mk_model____ref (model____content us_t)))))
(define-fun model____ref___projection ((a model____ref)) us_t (model____content
                                                              a))

(declare-const dummy4 (Array (_ BitVec 16) integer))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array (_ BitVec 16) integer)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array (_ BitVec 16) integer)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array (_ BitVec 16) integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq4 ((Array (_ BitVec 16) integer)
  (Array (_ BitVec 16) integer)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__ring_buf__ring_buffer__data (Array (_ BitVec 16) integer))(rec__ring_buf__ring_buffer__first ar_index)(rec__ring_buf__ring_buffer__length length_type)))))
(define-fun us_split_fields_Data__projection ((a us_split_fields)) (Array (_ BitVec 16) integer)
  (rec__ring_buf__ring_buffer__data a))

(define-fun us_split_fields_First__projection ((a us_split_fields)) ar_index
  (rec__ring_buf__ring_buffer__first a))

(define-fun us_split_fields_Length__projection ((a us_split_fields)) length_type
  (rec__ring_buf__ring_buffer__length a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (bool_eq
                           (rec__ring_buf__ring_buffer__data
                           (us_split_fields1 a)) ((_ int2bv 16) 0)
                           ((_ int2bv 16) 65535)
                           (rec__ring_buf__ring_buffer__data
                           (us_split_fields1 b)) ((_ int2bv 16) 0)
                           ((_ int2bv 16) 65535)) true)
                        (= (to_rep1
                           (rec__ring_buf__ring_buffer__first
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ring_buf__ring_buffer__first
                                                  (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__ring_buf__ring_buffer__length
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__ring_buf__ring_buffer__length
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const ring_buf__ring_buffer__data__first__bit Int)

(declare-const ring_buf__ring_buffer__data__last__bit Int)

(declare-const ring_buf__ring_buffer__data__position Int)

;; ring_buf__ring_buffer__data__first__bit_axiom
  (assert (<= 0 ring_buf__ring_buffer__data__first__bit))

;; ring_buf__ring_buffer__data__last__bit_axiom
  (assert
  (< ring_buf__ring_buffer__data__first__bit ring_buf__ring_buffer__data__last__bit))

;; ring_buf__ring_buffer__data__position_axiom
  (assert (<= 0 ring_buf__ring_buffer__data__position))

(declare-const ring_buf__ring_buffer__first__first__bit Int)

(declare-const ring_buf__ring_buffer__first__last__bit Int)

(declare-const ring_buf__ring_buffer__first__position Int)

;; ring_buf__ring_buffer__first__first__bit_axiom
  (assert (<= 0 ring_buf__ring_buffer__first__first__bit))

;; ring_buf__ring_buffer__first__last__bit_axiom
  (assert
  (< ring_buf__ring_buffer__first__first__bit ring_buf__ring_buffer__first__last__bit))

;; ring_buf__ring_buffer__first__position_axiom
  (assert (<= 0 ring_buf__ring_buffer__first__position))

(declare-const ring_buf__ring_buffer__length__first__bit Int)

(declare-const ring_buf__ring_buffer__length__last__bit Int)

(declare-const ring_buf__ring_buffer__length__position Int)

;; ring_buf__ring_buffer__length__first__bit_axiom
  (assert (<= 0 ring_buf__ring_buffer__length__first__bit))

;; ring_buf__ring_buffer__length__last__bit_axiom
  (assert
  (< ring_buf__ring_buffer__length__first__bit ring_buf__ring_buffer__length__last__bit))

;; ring_buf__ring_buffer__length__position_axiom
  (assert (<= 0 ring_buf__ring_buffer__length__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ()
((ring_buffer__ref (mk_ring_buffer__ref (ring_buffer__content us_rep)))))
(define-fun ring_buffer__ref___projection ((a ring_buffer__ref)) us_rep
  (ring_buffer__content a))

(declare-fun to_model (us_rep) us_t)

(declare-fun to_model__function_guard (us_t us_rep) Bool)

(define-fun dynamic_invariant1 ((temp___expr_148 us_t)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (not (= temp___skip_constant_146 true))
                                      (dynamic_property ((_ int2bv 16) 0)
                                      ((_ int2bv 16) 65535)
                                      (first1 temp___expr_148)
                                      (last1 temp___expr_148))))

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))

(define-fun dynamic_property1 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))

(declare-fun user_eq6 (ar_index ar_index) Bool)

(declare-const dummy6 ar_index)

(declare-datatypes () ((t21s__ref (mk_t21s__ref (t21s__content ar_index)))))
(define-fun t21s__ref___projection ((a t21s__ref)) ar_index (t21s__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) ar_index)

(declare-fun last2 (t1) ar_index)

(declare-fun mk1 ((_ BitVec 16) (_ BitVec 16)) t1)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (=> (bvule low high)
                             (and (dynamic_property1 range_first range_last
                             low) (dynamic_property1 range_first range_last
                             high))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array (_ BitVec 16) integer))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array (_ BitVec 16) integer) (elts1 a))

(define-fun of_array1 ((a (Array (_ BitVec 16) integer)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) (_ BitVec 16) (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) (_ BitVec 16) (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (bvule (first3 a) (last3 a))
                                    (+ (- (bv2nat (last3 a)) (bv2nat
                                    (first3 a))) 1) 0))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array (_ BitVec 16) integer)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array (_ BitVec 16) integer)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array (_ BitVec 16) integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer)))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq7 (us_t1 us_t1) Bool)

(declare-const dummy7 us_t1)

(declare-datatypes () ((t22s__ref (mk_t22s__ref (t22s__content us_t1)))))
(define-fun t22s__ref___projection ((a t22s__ref)) us_t1 (t22s__content a))

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 16))

(define-fun dynamic_property3 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))

(declare-fun user_eq8 (ar_index ar_index) Bool)

(declare-const dummy8 ar_index)

(declare-datatypes () ((t23s__ref (mk_t23s__ref (t23s__content ar_index)))))
(define-fun t23s__ref___projection ((a t23s__ref)) ar_index (t23s__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) ar_index)

(declare-fun last4 (t2) ar_index)

(declare-fun mk2 ((_ BitVec 16) (_ BitVec 16)) t2)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (=> (bvule low high)
                             (and (dynamic_property3 range_first range_last
                             low) (dynamic_property3 range_first range_last
                             high))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array (_ BitVec 16) integer))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array (_ BitVec 16) integer) (elts2 a))

(define-fun of_array2 ((a (Array (_ BitVec 16) integer)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) (_ BitVec 16) (to_rep1 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) (_ BitVec 16) (to_rep1 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (bvule (first5 a) (last5 a))
                                    (+ (- (bv2nat (last5 a)) (bv2nat
                                    (first5 a))) 1) 0))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array (_ BitVec 16) integer)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array (_ BitVec 16) integer)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array (_ BitVec 16) integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer)))
  (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq4 ((x us_t2)
  (y us_t2)) Bool (bool_eq (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq9 (us_t2 us_t2) Bool)

(declare-const dummy9 us_t2)

(declare-datatypes () ((t24s__ref (mk_t24s__ref (t24s__content us_t2)))))
(define-fun t24s__ref___projection ((a t24s__ref)) us_t2 (t24s__content a))

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 16))

(define-fun dynamic_property5 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 16))

(declare-fun user_eq10 (ar_index ar_index) Bool)

(declare-const dummy10 ar_index)

(declare-datatypes () ((t25s__ref (mk_t25s__ref (t25s__content ar_index)))))
(define-fun t25s__ref___projection ((a t25s__ref)) ar_index (t25s__content a))

(declare-sort t3 0)

(declare-fun first6 (t3) ar_index)

(declare-fun last6 (t3) ar_index)

(declare-fun mk3 ((_ BitVec 16) (_ BitVec 16)) t3)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (and (= (to_rep1 (first6 (mk3 f l))) f)
     (= (to_rep1 (last6 (mk3 f l))) l)) :pattern ((mk3 f l)) )))

(define-fun dynamic_property6 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (=> (bvule low high)
                             (and (dynamic_property5 range_first range_last
                             low) (dynamic_property5 range_first range_last
                             high))))

(declare-datatypes ()
((us_t3 (mk___t3 (elts3 (Array (_ BitVec 16) integer))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array (_ BitVec 16) integer) (elts3 a))

(define-fun of_array3 ((a (Array (_ BitVec 16) integer)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) (_ BitVec 16) (to_rep1 (first6 (rt3 a))))

(define-fun last7 ((a us_t3)) (_ BitVec 16) (to_rep1 (last6 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (bvule (first7 a) (last7 a))
                                    (+ (- (bv2nat (last7 a)) (bv2nat
                                    (first7 a))) 1) 0))

(declare-const value__size5 Int)

(declare-fun object__size5 ((Array (_ BitVec 16) integer)) Int)

(declare-const value__component__size4 Int)

(declare-fun object__component__size4 ((Array (_ BitVec 16) integer)) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 ((Array (_ BitVec 16) integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size4))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer)))
  (<= 0 (object__component__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment5 a))))

(define-fun bool_eq5 ((x us_t3)
  (y us_t3)) Bool (bool_eq (elts3 x) (to_rep1 (first6 (rt3 x)))
                  (to_rep1 (last6 (rt3 x))) (elts3 y)
                  (to_rep1 (first6 (rt3 y))) (to_rep1 (last6 (rt3 y)))))

(declare-fun user_eq11 (us_t3 us_t3) Bool)

(declare-const dummy11 us_t3)

(declare-datatypes () ((t26s__ref (mk_t26s__ref (t26s__content us_t3)))))
(define-fun t26s__ref___projection ((a t26s__ref)) us_t3 (t26s__content a))

;; to_model__post_axiom
  (assert
  (forall ((r us_rep)) (! (dynamic_invariant1 (to_model r) true false
  true) :pattern ((to_model r)) )))

;; to_model__def_axiom
  (assert
  (forall ((r us_rep))
  (! (= (to_model r) (ite (< 65535 (- (+ (bv2nat (to_rep1
                                                 (rec__ring_buf__ring_buffer__first
                                                 (us_split_fields1 r))))
                     (to_rep2
                     (rec__ring_buf__ring_buffer__length
                     (us_split_fields1 r)))) 1))
                     (let ((temp___194 (let ((temp___191 (bvsub (bvsub (bvadd ((_ int2bv 16) 0) ((_ int2bv 16)
                                       (to_rep2
                                       (rec__ring_buf__ring_buffer__length
                                       (us_split_fields1 r))))) (bvsub ((_ int2bv 16) 65535)
                                       (to_rep1
                                       (rec__ring_buf__ring_buffer__first
                                       (us_split_fields1 r))))) ((_ int2bv 16) 1))))
                                       (let ((temp___190 ((_ int2bv 16) 0)))
                                       (let ((temp___192 (rec__ring_buf__ring_buffer__data
                                                         (us_split_fields1 r))))
                                       (of_array2 temp___192 temp___190
                                       temp___191))))))
                     (let ((temp___193 (let ((temp___188 ((_ int2bv 16) 65535)))
                                       (let ((temp___187 (to_rep1
                                                         (rec__ring_buf__ring_buffer__first
                                                         (us_split_fields1 r)))))
                                       (let ((temp___189 (rec__ring_buf__ring_buffer__data
                                                         (us_split_fields1 r))))
                                       (of_array1 temp___189 temp___187
                                       temp___188))))))
                     (ite (= (length1 temp___193) 0)
                     (of_array (to_array2 temp___194) (first5 temp___194)
                     (last5 temp___194))
                     (of_array
                     (concat1 (to_array1 temp___193) (first3 temp___193)
                     (last3 temp___193) (to_array2 temp___194)
                     (first5 temp___194) (last5 temp___194))
                     (first3 temp___193)
                     ((_ int2bv 16) (- (+ (bv2nat (first3 temp___193)) (+
                     (ite (<= (bv2nat (first3 temp___193)) (bv2nat (last3
                                                                   temp___193)))
                     (+ (- (bv2nat (last3 temp___193)) (bv2nat (first3
                                                               temp___193))) 1)
                     0) (ite (<= (bv2nat (first5 temp___194)) (bv2nat
                        (last5 temp___194)))
                        (+ (- (bv2nat (last5 temp___194)) (bv2nat (first5
                                                                  temp___194))) 1)
                        0))) 1))))))
                     (let ((temp___198 (let ((temp___196 (bvsub (bvadd
                                       (to_rep1
                                       (rec__ring_buf__ring_buffer__first
                                       (us_split_fields1 r))) ((_ int2bv 16)
                                       (to_rep2
                                       (rec__ring_buf__ring_buffer__length
                                       (us_split_fields1 r))))) ((_ int2bv 16) 1))))
                                       (let ((temp___195 (to_rep1
                                                         (rec__ring_buf__ring_buffer__first
                                                         (us_split_fields1 r)))))
                                       (let ((temp___197 (rec__ring_buf__ring_buffer__data
                                                         (us_split_fields1 r))))
                                       (of_array3 temp___197 temp___195
                                       temp___196))))))
                     (of_array (to_array3 temp___198) (first7 temp___198)
                     (last7 temp___198))))) :pattern ((to_model r)) )))

(declare-fun func_head (us_t) Int)

(declare-fun func_head__function_guard (Int us_t) Bool)

;; func_head__post_axiom
  (assert
  (forall ((m us_t))
  (! (=> (and (dynamic_invariant1 m true true true) (< 0 (length m)))
     (dynamic_invariant (func_head m) true false true)) :pattern ((func_head
                                                                  m)) )))

;; func_head__def_axiom
  (assert
  (forall ((m us_t))
  (! (=> (dynamic_invariant1 m true true true)
     (= (func_head m) (to_rep (select (to_array m) (first1 m))))) :pattern (
  (func_head m)) )))

(declare-fun func_pop (us_t) us_t)

(declare-fun func_pop__function_guard (us_t us_t) Bool)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 16))

(define-fun dynamic_property7 ((first_int (_ BitVec 16))
  (last_int (_ BitVec 16))
  (x (_ BitVec 16))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 16))

(declare-fun user_eq12 (ar_index ar_index) Bool)

(declare-const dummy12 ar_index)

(declare-datatypes () ((t31s__ref (mk_t31s__ref (t31s__content ar_index)))))
(define-fun t31s__ref___projection ((a t31s__ref)) ar_index (t31s__content a))

(declare-sort t4 0)

(declare-fun first8 (t4) ar_index)

(declare-fun last8 (t4) ar_index)

(declare-fun mk4 ((_ BitVec 16) (_ BitVec 16)) t4)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (and (= (to_rep1 (first8 (mk4 f l))) f)
     (= (to_rep1 (last8 (mk4 f l))) l)) :pattern ((mk4 f l)) )))

(define-fun dynamic_property8 ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (=> (bvule low high)
                             (and (dynamic_property7 range_first range_last
                             low) (dynamic_property7 range_first range_last
                             high))))

(declare-datatypes ()
((us_t4 (mk___t4 (elts4 (Array (_ BitVec 16) integer))(rt4 t4)))))
(define-fun to_array4 ((a us_t4)) (Array (_ BitVec 16) integer) (elts4 a))

(define-fun of_array4 ((a (Array (_ BitVec 16) integer)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t4 (mk___t4 a (mk4 f l)))

(define-fun first9 ((a us_t4)) (_ BitVec 16) (to_rep1 (first8 (rt4 a))))

(define-fun last9 ((a us_t4)) (_ BitVec 16) (to_rep1 (last8 (rt4 a))))

(define-fun length4 ((a us_t4)) Int (ite (bvule (first9 a) (last9 a))
                                    (+ (- (bv2nat (last9 a)) (bv2nat
                                    (first9 a))) 1) 0))

(declare-const value__size6 Int)

(declare-fun object__size6 ((Array (_ BitVec 16) integer)) Int)

(declare-const value__component__size5 Int)

(declare-fun object__component__size5 ((Array (_ BitVec 16) integer)) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 ((Array (_ BitVec 16) integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__size6 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size5))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer)))
  (<= 0 (object__component__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 16) integer))) (<= 0 (object__alignment6 a))))

(define-fun bool_eq6 ((x us_t4)
  (y us_t4)) Bool (bool_eq (elts4 x) (to_rep1 (first8 (rt4 x)))
                  (to_rep1 (last8 (rt4 x))) (elts4 y)
                  (to_rep1 (first8 (rt4 y))) (to_rep1 (last8 (rt4 y)))))

(declare-fun user_eq13 (us_t4 us_t4) Bool)

(declare-const dummy13 us_t4)

(declare-datatypes () ((t32s__ref (mk_t32s__ref (t32s__content us_t4)))))
(define-fun t32s__ref___projection ((a t32s__ref)) us_t4 (t32s__content a))

;; func_pop__post_axiom
  (assert
  (forall ((m us_t))
  (! (=> (and (dynamic_invariant1 m true true true) (< 0 (length m)))
     (dynamic_invariant1 (func_pop m) true false true)) :pattern ((func_pop
                                                                  m)) )))

;; func_pop__def_axiom
  (assert
  (forall ((m us_t))
  (! (=> (dynamic_invariant1 m true true true)
     (= (func_pop m) (let ((temp___214 (let ((temp___213 (bvsub (last1 m) ((_ int2bv 16) 1))))
                                       (let ((temp___212 (first1 m)))
                                       (of_array4 (to_array m) temp___212
                                       temp___213)))))
                     (of_array (to_array4 temp___214) (first9 temp___214)
                     (last9 temp___214))))) :pattern ((func_pop m)) )))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

;; is_empty__post_axiom
  (assert true)

;; is_empty__def_axiom
  (assert
  (forall ((r us_rep))
  (! (= (= (is_empty r) true)
     (= (to_rep2 (rec__ring_buf__ring_buffer__length (us_split_fields1 r))) 0)) :pattern (
  (is_empty r)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_136 (_ BitVec 16))
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool true)

(define-fun dynamic_invariant3 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 65536)) (in_range2
                                      temp___expr_142)))

(declare-const r__split_fields (Array (_ BitVec 16) integer))

(declare-const r__split_fields1 ar_index)

(declare-const r__split_fields2 length_type)

(declare-const element Int)

(declare-const o ar_index)

(declare-const o1 (Array (_ BitVec 16) integer))

(declare-const o2 ar_index)

(declare-const o3 length_type)

(declare-const temp___294 (Array (_ BitVec 16) integer))

(declare-const temp___2941 ar_index)

(declare-const temp___2942 length_type)

(declare-const o4 Int)

(declare-const o5 length_type)

(declare-const o6 (Array (_ BitVec 16) integer))

(declare-const o7 ar_index)

(declare-const o8 length_type)

(declare-const temp___296 (Array (_ BitVec 16) integer))

(declare-const temp___2961 ar_index)

(declare-const temp___2962 length_type)

(declare-const result Int)

(declare-const element1 Int)

(declare-const result1 (Array (_ BitVec 16) integer))

(declare-const result2 ar_index)

(declare-const result3 length_type)

(declare-const r__split_fields3 (Array (_ BitVec 16) integer))

(declare-const r__split_fields4 ar_index)

(declare-const r__split_fields5 length_type)

(declare-const result4 (Array (_ BitVec 16) integer))

(declare-const result5 ar_index)

(declare-const result6 length_type)

(declare-const r__split_fields6 (Array (_ BitVec 16) integer))

(declare-const r__split_fields7 ar_index)

(declare-const r__split_fields8 length_type)

(declare-const r__split_fields9 (Array (_ BitVec 16) integer))

(declare-const r__split_fields10 ar_index)

(declare-const r__split_fields11 length_type)

(declare-const element2 Int)

(declare-const r__split_fields12 (Array (_ BitVec 16) integer))

(declare-const r__split_fields13 ar_index)

(declare-const r__split_fields14 length_type)

(declare-const element3 Int)

;; H
  (assert (=> (<= (- 2147483648) 2147483647) (in_range1 element)))

;; H
  (assert
  (not
  (= (is_empty
     (mk___rep
     (mk___split_fields r__split_fields r__split_fields1 r__split_fields2))) true)))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref element)))

;; H
  (assert
  (= element1 (to_rep (select r__split_fields (to_rep1 r__split_fields1)))))

;; H
  (assert
  (= (to_rep1 o) (bvadd (to_rep1 r__split_fields1) ((_ int2bv 16) 1))))

;; H
  (assert (= r__split_fields o1))

;; H
  (assert (= o o2))

;; H
  (assert (= r__split_fields2 o3))

;; H
  (assert (= temp___294 o1))

;; H
  (assert (= temp___2941 o2))

;; H
  (assert (= temp___2942 o3))

;; H
  (assert
  (= (mk___split_fields__ref (mk___split_fields result1 result2 result3))
  (mk___split_fields__ref
  (mk___split_fields r__split_fields r__split_fields1 r__split_fields2))))

;; H
  (assert (= temp___294 r__split_fields3))

;; H
  (assert (= temp___2941 r__split_fields4))

;; H
  (assert (= temp___2942 r__split_fields5))

;; H
  (assert
  (and (= o4 (- (to_rep2 r__split_fields5) 1)) (in_range2
  (- (to_rep2 r__split_fields5) 1))))

;; H
  (assert (= (to_rep2 o5) o4))

;; H
  (assert (= r__split_fields3 o6))

;; H
  (assert (= r__split_fields4 o7))

;; H
  (assert (= o5 o8))

;; H
  (assert (= temp___296 o6))

;; H
  (assert (= temp___2961 o7))

;; H
  (assert (= temp___2962 o8))

;; H
  (assert (= result4 r__split_fields3))

;; H
  (assert (= result5 r__split_fields4))

;; H
  (assert (= result6 r__split_fields5))

;; H
  (assert (= temp___296 r__split_fields6))

;; H
  (assert (= temp___2961 r__split_fields7))

;; H
  (assert (= temp___2962 r__split_fields8))

;; H
  (assert (= element1 element2))

;; H
  (assert (= r__split_fields9 r__split_fields6))

;; H
  (assert (= r__split_fields10 r__split_fields7))

;; H
  (assert (= r__split_fields11 r__split_fields8))

;; H
  (assert (= element3 element1))

;; H
  (assert
  (= (mk___split_fields r__split_fields12 r__split_fields13
     r__split_fields14) (mk___split_fields r__split_fields6 r__split_fields7
                        r__split_fields8)))

(assert
;; WP_parameter_def
 ;; File "ring_buf.ads", line 67, characters 0-0
  (not
  (= (let ((temp___304 (func_pop
                       (to_model
                       (mk___rep
                       (mk___split_fields r__split_fields r__split_fields1
                       r__split_fields2))))))
     (let ((temp___303 (to_model
                       (mk___rep
                       (mk___split_fields r__split_fields9 r__split_fields10
                       r__split_fields11)))))
     (bool_eq (elts temp___303) (to_rep1 (first (rt temp___303)))
     (to_rep1 (last (rt temp___303))) (elts temp___304)
     (to_rep1 (first (rt temp___304))) (to_rep1 (last (rt temp___304)))))) true)))
(check-sat)
(exit)
