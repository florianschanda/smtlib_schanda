;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort message_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (message_type message_type) Bool)

(declare-const dummy message_type)

(declare-datatypes ()
((message_type__ref
 (mk_message_type__ref (message_type__content message_type)))))
(define-fun message_type__ref___projection ((a message_type__ref)) message_type
  (message_type__content a))

(define-fun dynamic_invariant ((temp___expr_172 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (=>
                                      (or (= temp___is_init_169 true)
                                      (<= 0 1)) (in_range1 temp___expr_172)))

(declare-fun to_rep (message_type) Int)

(declare-fun of_rep (Int) message_type)

;; inversion_axiom
  (assert
  (forall ((x message_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x message_type)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort message_index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (message_index_type message_index_type) Bool)

(declare-const dummy1 message_index_type)

(declare-datatypes ()
((message_index_type__ref
 (mk_message_index_type__ref
 (message_index_type__content message_index_type)))))
(define-fun message_index_type__ref___projection ((a message_index_type__ref)) message_index_type
  (message_index_type__content a))

(declare-fun to_rep1 (message_index_type) Int)

(declare-fun of_rep1 (Int) message_index_type)

;; inversion_axiom
  (assert
  (forall ((x message_index_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x message_index_type)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort message_count_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (message_count_type message_count_type) Bool)

(declare-const dummy2 message_count_type)

(declare-datatypes ()
((message_count_type__ref
 (mk_message_count_type__ref
 (message_count_type__content message_count_type)))))
(define-fun message_count_type__ref___projection ((a message_count_type__ref)) message_count_type
  (message_count_type__content a))

(declare-fun to_rep2 (message_count_type) Int)

(declare-fun of_rep2 (Int) message_count_type)

;; inversion_axiom
  (assert
  (forall ((x message_count_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x message_count_type)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int message_type))))))
(declare-fun slide ((Array Int message_type) Int
  Int) (Array Int message_type))

;; slide_eq
  (assert
  (forall ((a (Array Int message_type)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int message_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int message_type) Int Int
  (Array Int message_type) Int Int) (Array Int message_type))

;; concat_def
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (message_type Int) (Array Int message_type))

;; singleton_def
  (assert
  (forall ((v message_type))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int message_type)) (a__first Int)
  (a__last Int) (b (Array Int message_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int message_type) Int Int
  (Array Int message_type) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tasking__mailboxT__next_in message_index_type)(rec__tasking__mailboxT__next_out message_index_type)(rec__tasking__mailboxT__count message_count_type)(rec__tasking__mailboxT__non_empty Bool)(rec__tasking__mailboxT__message_array (Array Int message_type))))))
(define-fun us_split_fields_Next_In__projection ((a us_split_fields)) message_index_type
  (rec__tasking__mailboxT__next_in a))

(define-fun us_split_fields_Next_Out__projection ((a us_split_fields)) message_index_type
  (rec__tasking__mailboxT__next_out a))

(define-fun us_split_fields_Count__projection ((a us_split_fields)) message_count_type
  (rec__tasking__mailboxT__count a))

(define-fun us_split_fields_Non_Empty__projection ((a us_split_fields)) Bool
  (rec__tasking__mailboxT__non_empty a))

(define-fun us_split_fields_Message_Array__projection ((a us_split_fields)) (Array Int message_type)
  (rec__tasking__mailboxT__message_array a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const tasking__mailboxT__next_in__first__bit Int)

(declare-const tasking__mailboxT__next_in__last__bit Int)

(declare-const tasking__mailboxT__next_in__position Int)

;; tasking__mailboxT__next_in__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__next_in__first__bit))

;; tasking__mailboxT__next_in__last__bit_axiom
  (assert
  (< tasking__mailboxT__next_in__first__bit tasking__mailboxT__next_in__last__bit))

;; tasking__mailboxT__next_in__position_axiom
  (assert (<= 0 tasking__mailboxT__next_in__position))

(declare-const tasking__mailboxT__next_out__first__bit Int)

(declare-const tasking__mailboxT__next_out__last__bit Int)

(declare-const tasking__mailboxT__next_out__position Int)

;; tasking__mailboxT__next_out__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__next_out__first__bit))

;; tasking__mailboxT__next_out__last__bit_axiom
  (assert
  (< tasking__mailboxT__next_out__first__bit tasking__mailboxT__next_out__last__bit))

;; tasking__mailboxT__next_out__position_axiom
  (assert (<= 0 tasking__mailboxT__next_out__position))

(declare-const tasking__mailboxT__count__first__bit Int)

(declare-const tasking__mailboxT__count__last__bit Int)

(declare-const tasking__mailboxT__count__position Int)

;; tasking__mailboxT__count__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__count__first__bit))

;; tasking__mailboxT__count__last__bit_axiom
  (assert
  (< tasking__mailboxT__count__first__bit tasking__mailboxT__count__last__bit))

;; tasking__mailboxT__count__position_axiom
  (assert (<= 0 tasking__mailboxT__count__position))

(declare-const tasking__mailboxT__non_empty__first__bit Int)

(declare-const tasking__mailboxT__non_empty__last__bit Int)

(declare-const tasking__mailboxT__non_empty__position Int)

;; tasking__mailboxT__non_empty__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__non_empty__first__bit))

;; tasking__mailboxT__non_empty__last__bit_axiom
  (assert
  (< tasking__mailboxT__non_empty__first__bit tasking__mailboxT__non_empty__last__bit))

;; tasking__mailboxT__non_empty__position_axiom
  (assert (<= 0 tasking__mailboxT__non_empty__position))

(declare-const tasking__mailboxT__message_array__first__bit Int)

(declare-const tasking__mailboxT__message_array__last__bit Int)

(declare-const tasking__mailboxT__message_array__position Int)

;; tasking__mailboxT__message_array__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__message_array__first__bit))

;; tasking__mailboxT__message_array__last__bit_axiom
  (assert
  (< tasking__mailboxT__message_array__first__bit tasking__mailboxT__message_array__last__bit))

;; tasking__mailboxT__message_array__position_axiom
  (assert (<= 0 tasking__mailboxT__message_array__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-datatypes ()
((mailboxT__ref (mk_mailboxT__ref (mailboxT__content us_rep)))))
(define-fun mailboxT__ref___projection ((a mailboxT__ref)) us_rep (mailboxT__content
                                                                  a))

(declare-fun temp___203 (Int) (Array Int message_type))

;; def_axiom
  (assert
  (forall ((temp___205 Int))
  (forall ((temp___206 Int))
  (= (select (temp___203 temp___205) temp___206) (of_rep temp___205)))))

(define-fun default_initial_assumption ((temp___expr_201 us_rep)
  (temp___skip_top_level_202 Bool)) Bool (and
                                         (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__tasking__mailboxT__next_in
                                            (us_split_fields1
                                            temp___expr_201))) 1)
                                         (= (to_rep1
                                            (rec__tasking__mailboxT__next_out
                                            (us_split_fields1
                                            temp___expr_201))) 1))
                                         (= (to_rep2
                                            (rec__tasking__mailboxT__count
                                            (us_split_fields1
                                            temp___expr_201))) 0))
                                         (= (rec__tasking__mailboxT__non_empty
                                            (us_split_fields1
                                            temp___expr_201)) (of_int 0)))
                                         (= (rec__tasking__mailboxT__message_array
                                            (us_split_fields1
                                            temp___expr_201)) (temp___203 1))))

(declare-const m Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant1 ((temp___expr_178 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=>
                                      (or (= temp___is_init_175 true)
                                      (<= 1 64)) (in_range2 temp___expr_178)))

(define-fun dynamic_invariant2 ((temp___expr_184 Int)
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)) Bool (=>
                                      (or (= temp___is_init_181 true)
                                      (<= 0 64)) (in_range3 temp___expr_184)))

(declare-const self__ message_index_type)

(declare-const self__1 message_index_type)

(declare-const self__2 message_count_type)

(declare-const self__3 Bool)

(declare-const self__4 (Array Int message_type))

(declare-const o message_type)

(declare-const o1 (Array Int message_type))

(declare-const o2 message_index_type)

(declare-const o3 message_index_type)

(declare-const o4 message_count_type)

(declare-const o5 Bool)

(declare-const o6 (Array Int message_type))

(declare-const o7 message_index_type)

(declare-const o8 message_index_type)

(declare-const o9 message_count_type)

(declare-const o10 Bool)

(declare-const o11 (Array Int message_type))

(declare-const o12 Int)

(declare-const o13 message_count_type)

(declare-const o14 message_index_type)

(declare-const o15 message_index_type)

(declare-const o16 message_count_type)

(declare-const o17 Bool)

(declare-const o18 (Array Int message_type))

(declare-const o19 message_index_type)

(declare-const o20 message_index_type)

(declare-const o21 message_count_type)

(declare-const o22 Bool)

(declare-const o23 (Array Int message_type))

(declare-const result message_index_type)

(declare-const result1 message_index_type)

(declare-const result2 message_count_type)

(declare-const result3 Bool)

(declare-const result4 (Array Int message_type))

(declare-const self__5 message_index_type)

(declare-const self__6 message_index_type)

(declare-const self__7 message_count_type)

(declare-const self__8 Bool)

(declare-const self__9 (Array Int message_type))

(declare-const result5 message_index_type)

(declare-const result6 message_index_type)

(declare-const result7 message_count_type)

(declare-const result8 Bool)

(declare-const result9 (Array Int message_type))

(declare-const self__10 message_index_type)

(declare-const self__11 message_index_type)

(declare-const self__12 message_count_type)

(declare-const self__13 Bool)

(declare-const self__14 (Array Int message_type))

(declare-const result10 message_index_type)

(declare-const result11 message_index_type)

(declare-const result12 message_count_type)

(declare-const result13 Bool)

(declare-const result14 (Array Int message_type))

(declare-const self__15 us_rep)

;; H
  (assert (in_range1 m))

;; H
  (assert (< (to_rep2 self__2) 64))

;; H
  (assert (= (to_rep o) m))

;; H
  (assert (= o1 (store self__4 (to_rep1 self__) o)))

;; H
  (assert (= self__ o2))

;; H
  (assert (= self__1 o3))

;; H
  (assert (= self__2 o4))

;; H
  (assert (= self__3 o5))

;; H
  (assert (= o1 o6))

;; H
  (assert (= o7 o2))

;; H
  (assert (= o8 o3))

;; H
  (assert (= o9 o4))

;; H
  (assert (= o10 o5))

;; H
  (assert (= o11 o6))

;; H
  (assert (= result self__))

;; H
  (assert (= result1 self__1))

;; H
  (assert (= result2 self__2))

;; H
  (assert (= result3 self__3))

;; H
  (assert (= result4 self__4))

;; H
  (assert
  (= (mk___rep (mk___split_fields self__5 self__6 self__7 self__8 self__9))
  (mk___rep (mk___split_fields o7 o8 o9 o10 o11))))

;; H
  (assert
  (and (= o12 (+ (to_rep2 self__7) 1)) (in_range3 (+ (to_rep2 self__7) 1))))

;; H
  (assert (= (to_rep2 o13) o12))

;; H
  (assert (= self__5 o14))

;; H
  (assert (= self__6 o15))

;; H
  (assert (= o13 o16))

;; H
  (assert (= self__8 o17))

;; H
  (assert (= self__9 o18))

;; H
  (assert (= o19 o14))

;; H
  (assert (= o20 o15))

;; H
  (assert (= o21 o16))

;; H
  (assert (= o22 o17))

;; H
  (assert (= o23 o18))

;; H
  (assert (= result5 self__5))

;; H
  (assert (= result6 self__6))

;; H
  (assert (= result7 self__7))

;; H
  (assert (= result8 self__8))

;; H
  (assert (= result9 self__9))

;; H
  (assert
  (= (mk___rep
     (mk___split_fields self__10 self__11 self__12 self__13 self__14))
  (mk___rep (mk___split_fields o19 o20 o21 o22 o23))))

;; H
  (assert (= result10 self__10))

;; H
  (assert (= result11 self__11))

;; H
  (assert (= result12 self__12))

;; H
  (assert (= result13 self__13))

;; H
  (assert (= result14 self__14))

;; H
  (assert
  (= self__15 (mk___rep
              (mk___split_fields self__10 self__11 self__12 (of_int 1)
              self__14))))

;; H
  (assert
  (not
  (= (to_rep1 (rec__tasking__mailboxT__next_in (us_split_fields1 self__15))) 64)))

(assert
;; WP_parameter_def
 ;; File "tasking.ads", line 11, characters 0-0
  (not (in_range2
  (+ (to_rep1 (rec__tasking__mailboxT__next_in (us_split_fields1 self__15))) 1))))
(check-sat)
(exit)
