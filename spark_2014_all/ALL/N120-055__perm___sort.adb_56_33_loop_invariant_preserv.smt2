;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (natural natural) Bool)

(declare-fun dummy2 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-sort index 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (index index) Bool)

(declare-fun dummy3 () index)

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range4 low) (in_range4 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int natural))(rt t)))))
(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int natural)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-fun dummy4 () us_t)

(define-fun dynamic_invariant1 ((expr us_t) (us Bool) (skip_bounds Bool)
  (us1 Bool)) Bool (=> (not (= skip_bounds true)) (dynamic_property 1 100
                   (first1 expr) (last1 expr))))

(declare-fun occ (natural us_t) Int)

;; occ_empty
  (assert
  (forall ((v natural) (a us_t))
  (=> (< (last1 a) (first1 a)) (= (occ v a) 0))))

;; occ_set
  (assert
  (forall ((e natural) (v natural) (a us_t) (i Int))
  (let ((b (of_array (store (elts a) i v) (first1 a) (last1 a))))
  (=> (and (<= (first1 a) i) (<= i (last1 a)))
  (and
  (=> (not (= (select (elts a) i) e))
  (and (=> (not (= v e)) (= (occ e b) (occ e a)))
  (=> (= v e) (= (occ e b) (+ (occ e a) 1)))))
  (=> (= (select (elts a) i) e)
  (and (=> (not (= v e)) (= (occ e b) (- (occ e a) 1)))
  (=> (= v e) (= (occ e b) (occ e a))))))))))

(define-fun is_perm__logic ((a us_t)
  (b us_t)) Bool (ite (forall ((v natural)) (= (occ v a) (occ v b))) true
                 false))

(declare-fun values__first () integer)

(declare-fun values__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun index_of_minimum (us_t) Int)

(declare-fun index_of_minimum__function_guard (Int us_t) Bool)

;; index_of_minimum__post_axiom
  (assert
  (forall ((values us_t))
  (! (=>
     (and (dynamic_invariant1 values true true true) (< 0 (length values)))
     (let ((result (index_of_minimum values)))
     (and (and (<= (first1 values) result) (<= result (last1 values)))
     (in_range4 result)))) :pattern ((index_of_minimum values)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-fun dummy5 () integer)

(declare-datatypes () ((t13b__ref (mk_t13b__ref (t13b__content integer)))))
(define-fun t13b__ref___projection ((a t13b__ref)) integer (t13b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-fun dummy6 () integer)

(declare-datatypes () ((t14b__ref (mk_t14b__ref (t14b__content integer)))))
(define-fun t14b__ref___projection ((a t14b__ref)) integer (t14b__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property2 range_first range_last low)
                   (dynamic_property2 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int natural))(rt1 t1)))))
(define-fun to_array ((a us_t1)) (Array Int natural) (elts1 a))

(define-fun of_array1 ((a (Array Int natural)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int natural)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int natural)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq2 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq7 (us_t1 us_t1) Bool)

(declare-fun dummy7 () us_t1)

(declare-datatypes () ((t15b__ref (mk_t15b__ref (t15b__content us_t1)))))
(define-fun t15b__ref___projection ((a t15b__ref)) us_t1 (t15b__content a))

(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_33)))

(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun values () (Array Int natural))

(declare-fun smallest () Int)

(declare-fun current () Int)

(declare-fun o () Int)

(declare-fun temp___172 () Int)

(declare-fun o1 () (Array Int natural))

(declare-fun temp___165 () (Array Int natural))

(declare-fun temp___1651 () t1)

(declare-fun o2 () (Array Int natural))

(declare-fun o3 () t)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () (Array Int natural))

(declare-fun temp___1652 () (Array Int natural))

(declare-fun temp___1653 () t1)

(declare-fun o8 () (Array Int natural))

(declare-fun o9 () t)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun values1 () (Array Int natural))

(declare-fun result () Bool)

(declare-fun result1 () Int)

(declare-fun current1 () Int)

(declare-fun result2 () Int)

(declare-fun smallest1 () Int)

(declare-fun values2 () (Array Int natural))

(declare-fun values3 () (Array Int natural))

(declare-fun smallest2 () Int)

(declare-fun current2 () Int)

(declare-fun result3 () Int)

(declare-fun current3 () Int)

(declare-fun result4 () Int)

(declare-fun smallest3 () Int)

(declare-fun values4 () (Array Int natural))

;; H
  (assert (dynamic_property 1 100 (to_rep values__first)
  (to_rep values__last)))

;; H
  (assert (=> (<= 1 2147483647) (in_range2 smallest)))

;; H
  (assert
  (=> (<= (to_rep values__first) (to_rep values__last))
  (= o (+ (- (to_rep values__last) (to_rep values__first)) 1))))

;; H
  (assert
  (=> (not (<= (to_rep values__first) (to_rep values__last))) (= o 0)))

;; H
  (assert (= result (ite (= o 0) true false)))

;; H
  (assert (not (= result true)))

;; H
  (assert
  (and (= temp___172 (- (to_rep values__last) 1)) (in_range1
  (- (to_rep values__last) 1))))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref current)))

;; H
  (assert (= current1 (to_rep values__first)))

;; H
  (assert (<= (to_rep values__first) current1))

;; H
  (assert (<= current1 temp___172))

;; H
  (assert
  (=> (<= current1 (to_rep values__last))
  (and
  (and (<= (to_rep values__first) current1)
  (<= current1 (to_rep values__last)))
  (and (<= (to_rep values__first) (to_rep values__last))
  (<= (to_rep values__last) (to_rep values__last))))))

;; H
  (assert (= o1 values))

;; H
  (assert (= o1 temp___165))

;; H
  (assert (= (mk1 current1 (to_rep values__last)) temp___1651))

;; H
  (assert (= temp___165 o2))

;; H
  (assert
  (= (mk (to_rep (first2 temp___1651)) (to_rep (last2 temp___1651)))
  o3))

;; H
  (assert
  (and (= o4 (index_of_minimum (mk___t o2 o3)))
  (and (in_range4 o4)
  (and (<= (to_rep (first o3)) o4) (<= o4 (to_rep (last o3)))))))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref smallest)))

;; H
  (assert (= smallest1 o4))

;; H
  (assert
  (=> (not (= smallest1 current1))
  (and (= o6 smallest1) (in_range4 smallest1))))

;; H
  (assert
  (=> (not (= smallest1 current1))
  (and (= o5 current1) (in_range4 current1))))

;; H
  (assert
  (=> (not (= smallest1 current1))
  (= (is_perm__logic
     (mk___t values (mk (to_rep values__first) (to_rep values__last)))
     (mk___t values2 (mk (to_rep values__first) (to_rep values__last)))) true)))

;; H
  (assert (=> (not (not (= smallest1 current1))) (= values2 values)))

;; H
  (assert (=> (not (not (= smallest1 current1))) (= values2 values1)))

;; H
  (assert
  (= (is_perm__logic
     (mk___t values (mk (to_rep values__first) (to_rep values__last)))
     (mk___t values3 (mk (to_rep values__first) (to_rep values__last)))) true))

;; H
  (assert
  (and
  (and (=> (<= 1 2147483647) (in_range2 smallest2))
  (=> (<= (to_rep values__first) (- (to_rep values__last) 1))
  (dynamic_property1 (to_rep values__first) (- (to_rep values__last) 1)
  current2)))
  (and (<= (to_rep values__first) current2)
  (<= current2 (- (to_rep values__last) 1)))))

;; H
  (assert (not (= current2 temp___172)))

;; H
  (assert (= current2 result3))

;; H
  (assert (= current3 (+ current2 1)))

;; H
  (assert
  (=> (<= current3 (to_rep values__last))
  (and
  (and (<= (to_rep values__first) current3)
  (<= current3 (to_rep values__last)))
  (and (<= (to_rep values__first) (to_rep values__last))
  (<= (to_rep values__last) (to_rep values__last))))))

;; H
  (assert (= o7 values3))

;; H
  (assert (= o7 temp___1652))

;; H
  (assert (= (mk1 current3 (to_rep values__last)) temp___1653))

;; H
  (assert (= temp___1652 o8))

;; H
  (assert
  (= (mk (to_rep (first2 temp___1653)) (to_rep (last2 temp___1653)))
  o9))

;; H
  (assert
  (and (= o10 (index_of_minimum (mk___t o8 o9)))
  (and (in_range4 o10)
  (and (<= (to_rep (first o9)) o10) (<= o10 (to_rep (last o9)))))))

;; H
  (assert (= smallest2 result4))

;; H
  (assert (= smallest3 o10))

;; H
  (assert
  (=> (not (= smallest3 current3))
  (and (= o12 smallest3) (in_range4 smallest3))))

;; H
  (assert
  (=> (not (= smallest3 current3))
  (and (= o11 current3) (in_range4 current3))))

;; H
  (assert
  (=> (not (= smallest3 current3))
  (= (is_perm__logic
     (mk___t values3 (mk (to_rep values__first) (to_rep values__last)))
     (mk___t values4 (mk (to_rep values__first) (to_rep values__last)))) true)))

;; H
  (assert (=> (not (not (= smallest3 current3))) (= values4 values3)))

(assert
;; WP_parameter_def
 ;; File "sort.adb", line 22, characters 0-0
  (not
  (= (is_perm__logic
     (mk___t values (mk (to_rep values__first) (to_rep values__last)))
     (mk___t values4 (mk (to_rep values__first) (to_rep values__last)))) true)))
(check-sat)
(exit)
