;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun ident (Int Int) Int)

(declare-fun ident__function_guard (Int Int Int) Bool)

;; ident__post_axiom
  (assert
  (forall ((y Int) (array_arith__init3__one Int))
  (! (=>
     (and (dynamic_invariant1 y true true true) (dynamic_invariant
     array_arith__init3__one true true true)) (dynamic_invariant1
     (ident y array_arith__init3__one) true false true)) :pattern ((ident y
                                                                   array_arith__init3__one)) )))

(declare-fun x () (Array Int natural))

(declare-fun one () Int)

(declare-fun o () Int)

(declare-fun o1 () natural)

(declare-fun o2 () (Array Int natural))

(declare-fun o3 () Int)

(declare-fun o4 () natural)

(declare-fun o5 () (Array Int natural))

(declare-fun o6 () Int)

(declare-fun o7 () natural)

(declare-fun o8 () (Array Int natural))

(declare-fun o9 () Int)

(declare-fun o10 () natural)

(declare-fun o11 () (Array Int natural))

(declare-fun o12 () Int)

(declare-fun o13 () natural)

(declare-fun o14 () (Array Int natural))

(declare-fun o15 () Int)

(declare-fun o16 () natural)

(declare-fun o17 () (Array Int natural))

(declare-fun o18 () Int)

(declare-fun o19 () natural)

(declare-fun o20 () (Array Int natural))

(declare-fun o21 () Int)

(declare-fun o22 () natural)

(declare-fun o23 () (Array Int natural))

(declare-fun o24 () Int)

(declare-fun o25 () natural)

(declare-fun o26 () (Array Int natural))

(declare-fun o27 () Int)

(declare-fun o28 () natural)

(declare-fun o29 () (Array Int natural))

(declare-fun result () Int)

(declare-fun one1 () Int)

(declare-fun result1 () (Array Int natural))

(declare-fun x1 () (Array Int natural))

(declare-fun result2 () (Array Int natural))

(declare-fun x2 () (Array Int natural))

(declare-fun result3 () (Array Int natural))

(declare-fun x3 () (Array Int natural))

(declare-fun result4 () (Array Int natural))

(declare-fun x4 () (Array Int natural))

(declare-fun result5 () (Array Int natural))

(declare-fun x5 () (Array Int natural))

(declare-fun result6 () (Array Int natural))

(declare-fun x6 () (Array Int natural))

(declare-fun result7 () (Array Int natural))

(declare-fun x7 () (Array Int natural))

(declare-fun result8 () (Array Int natural))

(declare-fun x8 () (Array Int natural))

(declare-fun result9 () (Array Int natural))

(declare-fun x9 () (Array Int natural))

(declare-fun result10 () (Array Int natural))

(declare-fun x10 () (Array Int natural))

(declare-fun x11 () (Array Int natural))

(declare-fun one2 () Int)

(declare-fun x12 () (Array Int natural))

(declare-fun one3 () Int)

;; H
  (assert (= result one))

;; H
  (assert (= one1 1))

;; H
  (assert (in_range1 one1))

;; H
  (assert (and (= o (ident 1 one1)) (in_range2 o)))

;; H
  (assert (= (to_rep o1) o))

;; H
  (assert (= o2 (store x 1 o1)))

;; H
  (assert (= result1 x))

;; H
  (assert (= x1 o2))

;; H
  (assert (and (= o3 (ident 2 one1)) (in_range2 o3)))

;; H
  (assert (= (to_rep o4) o3))

;; H
  (assert (= o5 (store x1 2 o4)))

;; H
  (assert (= result2 x1))

;; H
  (assert (= x2 o5))

;; H
  (assert (and (= o6 (ident 3 one1)) (in_range2 o6)))

;; H
  (assert (= (to_rep o7) o6))

;; H
  (assert (= o8 (store x2 3 o7)))

;; H
  (assert (= result3 x2))

;; H
  (assert (= x3 o8))

;; H
  (assert (and (= o9 (ident 4 one1)) (in_range2 o9)))

;; H
  (assert (= (to_rep o10) o9))

;; H
  (assert (= o11 (store x3 4 o10)))

;; H
  (assert (= result4 x3))

;; H
  (assert (= x4 o11))

;; H
  (assert (and (= o12 (ident 5 one1)) (in_range2 o12)))

;; H
  (assert (= (to_rep o13) o12))

;; H
  (assert (= o14 (store x4 5 o13)))

;; H
  (assert (= result5 x4))

;; H
  (assert (= x5 o14))

;; H
  (assert (and (= o15 (ident 6 one1)) (in_range2 o15)))

;; H
  (assert (= (to_rep o16) o15))

;; H
  (assert (= o17 (store x5 6 o16)))

;; H
  (assert (= result6 x5))

;; H
  (assert (= x6 o17))

;; H
  (assert (and (= o18 (ident 7 one1)) (in_range2 o18)))

;; H
  (assert (= (to_rep o19) o18))

;; H
  (assert (= o20 (store x6 7 o19)))

;; H
  (assert (= result7 x6))

;; H
  (assert (= x7 o20))

;; H
  (assert (and (= o21 (ident 8 one1)) (in_range2 o21)))

;; H
  (assert (= (to_rep o22) o21))

;; H
  (assert (= o23 (store x7 8 o22)))

;; H
  (assert (= result8 x7))

;; H
  (assert (= x8 o23))

;; H
  (assert (and (= o24 (ident 9 one1)) (in_range2 o24)))

;; H
  (assert (= (to_rep o25) o24))

;; H
  (assert (= o26 (store x8 9 o25)))

;; H
  (assert (= result9 x8))

;; H
  (assert (= x9 o26))

;; H
  (assert (and (= o27 (ident 10 one1)) (in_range2 o27)))

;; H
  (assert (= (to_rep o28) o27))

;; H
  (assert (= o29 (store x9 10 o28)))

;; H
  (assert (= result10 x9))

;; H
  (assert (= x10 o29))

;; H
  (assert (= one2 one1))

;; H
  (assert (= x10 x11))

;; H
  (assert (= one3 one1))

;; H
  (assert (= x12 x10))

(declare-fun j () Int)

;; H
  (assert (<= 1 j))

;; H
  (assert (<= j 10))

(assert
;; WP_parameter_def
 ;; File "array_arith.ads", line 12, characters 0-0
  (not (= (to_rep (select x11 j)) (+ j 1))))
(check-sat)
(exit)
