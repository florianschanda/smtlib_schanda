;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort count_type 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep (count_type) Int)

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__my_lists__my_lists__list__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__my_lists__my_lists__list__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__my_lists__my_lists__list us_main_type)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) us_main_type
  (rec__my_lists__my_lists__list a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__my_lists__my_lists__list__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__my_lists__my_lists__list__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__my_lists__my_lists__list
                           (us_split_fields1 a))
                           (rec__my_lists__my_lists__list
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const my_lists__my_lists__list__capacity__first__bit Int)

(declare-const my_lists__my_lists__list__capacity__last__bit Int)

(declare-const my_lists__my_lists__list__capacity__position Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit my_lists__my_lists__list__capacity__last__bit))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((list__ref 0)) (((mk_list__ref (list__content us_rep)))))
(define-fun list__ref___projection ((a list__ref)) us_rep (list__content a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(define-fun in_range1 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const my_lists__my_lists__list__capacity__first__bit1 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit1 Int)

(declare-const my_lists__my_lists__list__capacity__position1 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit1))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit1 my_lists__my_lists__list__capacity__last__bit1))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((c_list1__ref 0))
(((mk_c_list1__ref (c_list1__content us_rep)))))
(define-fun c_list1__ref___projection ((a c_list1__ref)) us_rep (c_list1__content
                                                                a))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_361 us_rep)
  (temp___is_init_358 Bool) (temp___skip_constant_359 Bool)
  (temp___do_toplevel_360 Bool)) Bool (=>
                                      (not (= temp___skip_constant_359 true))
                                      (in_range1 100 temp___expr_361)))

(define-fun default_initial_assumption ((temp___expr_363 us_rep)
  (temp___skip_top_level_364 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_363))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_364 true))
                                         (= (is_empty temp___expr_363) true))))

(define-fun in_range2 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const my_lists__my_lists__list__capacity__first__bit2 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit2 Int)

(declare-const my_lists__my_lists__list__capacity__position2 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit2))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit2 my_lists__my_lists__list__capacity__last__bit2))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position2))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((c_list2__ref 0))
(((mk_c_list2__ref (c_list2__content us_rep)))))
(define-fun c_list2__ref___projection ((a c_list2__ref)) us_rep (c_list2__content
                                                                a))

(define-fun dynamic_invariant1 ((temp___expr_370 us_rep)
  (temp___is_init_367 Bool) (temp___skip_constant_368 Bool)
  (temp___do_toplevel_369 Bool)) Bool (=>
                                      (not (= temp___skip_constant_368 true))
                                      (in_range2 100 temp___expr_370)))

(define-fun default_initial_assumption1 ((temp___expr_372 us_rep)
  (temp___skip_top_level_373 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_372))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_373 true))
                                         (= (is_empty temp___expr_372) true))))

(define-fun in_range3 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))

(declare-const my_lists__my_lists__list__capacity__first__bit3 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit3 Int)

(declare-const my_lists__my_lists__list__capacity__position3 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit3))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit3 my_lists__my_lists__list__capacity__last__bit3))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position3))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((c_list11__ref 0))
(((mk_c_list11__ref (c_list11__content us_rep)))))
(define-fun c_list11__ref___projection ((a c_list11__ref)) us_rep (c_list11__content
                                                                  a))

(define-fun dynamic_invariant2 ((temp___expr_389 us_rep)
  (temp___is_init_386 Bool) (temp___skip_constant_387 Bool)
  (temp___do_toplevel_388 Bool)) Bool (=>
                                      (not (= temp___skip_constant_387 true))
                                      (in_range3 100 temp___expr_389)))

(define-fun default_initial_assumption2 ((temp___expr_391 us_rep)
  (temp___skip_top_level_392 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_391))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_392 true))
                                         (= (is_empty temp___expr_391) true))))

(define-fun in_range4 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment4 a))))

(declare-const my_lists__my_lists__list__capacity__first__bit4 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit4 Int)

(declare-const my_lists__my_lists__list__capacity__position4 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit4))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit4 my_lists__my_lists__list__capacity__last__bit4))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position4))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((c_list12__ref 0))
(((mk_c_list12__ref (c_list12__content us_rep)))))
(define-fun c_list12__ref___projection ((a c_list12__ref)) us_rep (c_list12__content
                                                                  a))

(define-fun dynamic_invariant3 ((temp___expr_398 us_rep)
  (temp___is_init_395 Bool) (temp___skip_constant_396 Bool)
  (temp___do_toplevel_397 Bool)) Bool (=>
                                      (not (= temp___skip_constant_396 true))
                                      (in_range4 100 temp___expr_398)))

(define-fun default_initial_assumption3 ((temp___expr_400 us_rep)
  (temp___skip_top_level_401 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_400))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_401 true))
                                         (= (is_empty temp___expr_400) true))))

(define-fun in_range5 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))

(declare-const my_lists__my_lists__list__capacity__first__bit5 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit5 Int)

(declare-const my_lists__my_lists__list__capacity__position5 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit5))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit5 my_lists__my_lists__list__capacity__last__bit5))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position5))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((c_list21__ref 0))
(((mk_c_list21__ref (c_list21__content us_rep)))))
(define-fun c_list21__ref___projection ((a c_list21__ref)) us_rep (c_list21__content
                                                                  a))

(define-fun dynamic_invariant4 ((temp___expr_407 us_rep)
  (temp___is_init_404 Bool) (temp___skip_constant_405 Bool)
  (temp___do_toplevel_406 Bool)) Bool (=>
                                      (not (= temp___skip_constant_405 true))
                                      (in_range5 100 temp___expr_407)))

(define-fun default_initial_assumption4 ((temp___expr_409 us_rep)
  (temp___skip_top_level_410 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_409))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_410 true))
                                         (= (is_empty temp___expr_409) true))))

(define-fun in_range6 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))

(declare-const my_lists__my_lists__list__capacity__first__bit6 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit6 Int)

(declare-const my_lists__my_lists__list__capacity__position6 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit6))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit6 my_lists__my_lists__list__capacity__last__bit6))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position6))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((c_list22__ref 0))
(((mk_c_list22__ref (c_list22__content us_rep)))))
(define-fun c_list22__ref___projection ((a c_list22__ref)) us_rep (c_list22__content
                                                                  a))

(define-fun dynamic_invariant5 ((temp___expr_416 us_rep)
  (temp___is_init_413 Bool) (temp___skip_constant_414 Bool)
  (temp___do_toplevel_415 Bool)) Bool (=>
                                      (not (= temp___skip_constant_414 true))
                                      (in_range6 100 temp___expr_416)))

(define-fun default_initial_assumption5 ((temp___expr_418 us_rep)
  (temp___skip_top_level_419 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_418))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_419 true))
                                         (= (is_empty temp___expr_418) true))))

(define-fun in_range7 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size7 Int)

(declare-fun object__size7 (us_rep) Int)

(declare-const value__alignment7 Int)

(declare-fun object__alignment7 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment7 a))))

(declare-const my_lists__my_lists__list__capacity__first__bit7 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit7 Int)

(declare-const my_lists__my_lists__list__capacity__position7 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit7))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit7 my_lists__my_lists__list__capacity__last__bit7))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position7))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((tl1S__ref 0)) (((mk_tl1S__ref (tl1S__content us_rep)))))
(define-fun tl1S__ref___projection ((a tl1S__ref)) us_rep (tl1S__content a))

(define-fun dynamic_invariant6 ((temp___expr_425 us_rep)
  (temp___is_init_422 Bool) (temp___skip_constant_423 Bool)
  (temp___do_toplevel_424 Bool)) Bool (=>
                                      (not (= temp___skip_constant_423 true))
                                      (in_range7 100 temp___expr_425)))

(define-fun default_initial_assumption6 ((temp___expr_427 us_rep)
  (temp___skip_top_level_428 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_427))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_428 true))
                                         (= (is_empty temp___expr_427) true))))

(declare-const l1__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const l2__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const l3__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const l4__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const l5__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const l6__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const l7__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant7 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 2147483647)) (in_range
                                      temp___expr_141)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__my_lists__my_lists__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant7 result true false true))) :pattern ((length
                                                             container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-const l1__split_fields us_main_type)

(declare-const l2__split_fields us_main_type)

(declare-const l3__split_fields us_main_type)

(declare-const l4__split_fields us_main_type)

(declare-const l5__split_fields us_main_type)

(declare-const l6__split_fields us_main_type)

(declare-const l7__split_fields us_main_type)

(declare-const us Int)

(declare-const result us_main_type)

(declare-const l2__split_fields1 us_main_type)

(declare-const my_lists__my_lists__clear__container__fields us_main_type)

(declare-const result1 us_main_type)

(declare-const l1__split_fields1 us_main_type)

(declare-const my_lists__my_lists__clear__container__fields1 us_split_fields)

(declare-const result2 us_split_fields__ref)

(declare-const l2__split_fields2 us_split_fields)

(declare-const my_lists__my_lists__clear__container__fields2 us_split_fields)

(declare-const result3 us_split_fields__ref)

(declare-const l3__split_fields1 us_split_fields)

(declare-const my_lists__my_lists__clear__container__fields3 us_split_fields)

(declare-const result4 us_split_fields__ref)

(declare-const l4__split_fields1 us_split_fields)

(declare-const my_lists__my_lists__clear__container__fields4 us_split_fields)

(declare-const result5 us_split_fields__ref)

(declare-const l5__split_fields1 us_split_fields)

(declare-const my_lists__my_lists__clear__container__fields5 us_split_fields)

(declare-const result6 us_split_fields__ref)

(declare-const l6__split_fields1 us_split_fields)

(declare-const my_lists__my_lists__clear__container__fields6 us_split_fields)

(declare-const result7 us_split_fields__ref)

(declare-const l7__split_fields1 us_split_fields)

(define-fun my_lists__my_lists__clear__container__fields7 () us_split_fields
  (mk___split_fields my_lists__my_lists__clear__container__fields))

;; H
  (assert (and (= us 100) (in_range 100)))

;; H
  (assert (default_initial_assumption6
  (mk___rep l1__split_discrs (mk___split_fields l1__split_fields)) false))

;; H
  (assert
  (= 100 (to_rep (rec__my_lists__my_lists__list__capacity l1__split_discrs))))

;; H
  (assert (= result l2__split_fields))

;; H
  (assert (= l1__split_fields l2__split_fields1))

;; H
  (assert (= l2__split_discrs l1__split_discrs))

;; H
  (assert
  (= 100 (to_rep (rec__my_lists__my_lists__list__capacity l2__split_discrs))))

;; H
  (assert (default_initial_assumption1
  (mk___rep l3__split_discrs (mk___split_fields l3__split_fields)) false))

;; H
  (assert
  (= 100 (to_rep (rec__my_lists__my_lists__list__capacity l3__split_discrs))))

;; H
  (assert (default_initial_assumption2
  (mk___rep l4__split_discrs (mk___split_fields l4__split_fields)) false))

;; H
  (assert
  (= 100 (to_rep (rec__my_lists__my_lists__list__capacity l4__split_discrs))))

;; H
  (assert (default_initial_assumption3
  (mk___rep l5__split_discrs (mk___split_fields l5__split_fields)) false))

;; H
  (assert
  (= 100 (to_rep (rec__my_lists__my_lists__list__capacity l5__split_discrs))))

;; H
  (assert (default_initial_assumption4
  (mk___rep l6__split_discrs (mk___split_fields l6__split_fields)) false))

;; H
  (assert
  (= 100 (to_rep (rec__my_lists__my_lists__list__capacity l6__split_discrs))))

;; H
  (assert (default_initial_assumption5
  (mk___rep l7__split_discrs (mk___split_fields l7__split_fields)) false))

;; H
  (assert
  (= 100 (to_rep (rec__my_lists__my_lists__list__capacity l7__split_discrs))))

;; H
  (assert
  (= (length
     (mk___rep l1__split_discrs
     my_lists__my_lists__clear__container__fields7)) 0))

;; H
  (assert (= result1 l1__split_fields))

;; H
  (assert
  (= (mk___split_fields l1__split_fields1) my_lists__my_lists__clear__container__fields7))

;; H
  (assert
  (= (length
     (mk___rep l2__split_discrs
     my_lists__my_lists__clear__container__fields1)) 0))

;; H
  (assert
  (= result2 (mk___split_fields__ref (mk___split_fields l2__split_fields1))))

;; H
  (assert
  (= l2__split_fields2 my_lists__my_lists__clear__container__fields1))

;; H
  (assert
  (= (length
     (mk___rep l3__split_discrs
     my_lists__my_lists__clear__container__fields2)) 0))

;; H
  (assert
  (= result3 (mk___split_fields__ref (mk___split_fields l3__split_fields))))

;; H
  (assert
  (= l3__split_fields1 my_lists__my_lists__clear__container__fields2))

;; H
  (assert
  (= (length
     (mk___rep l4__split_discrs
     my_lists__my_lists__clear__container__fields3)) 0))

;; H
  (assert
  (= result4 (mk___split_fields__ref (mk___split_fields l4__split_fields))))

;; H
  (assert
  (= l4__split_fields1 my_lists__my_lists__clear__container__fields3))

;; H
  (assert
  (= (length
     (mk___rep l5__split_discrs
     my_lists__my_lists__clear__container__fields4)) 0))

;; H
  (assert
  (= result5 (mk___split_fields__ref (mk___split_fields l5__split_fields))))

;; H
  (assert
  (= l5__split_fields1 my_lists__my_lists__clear__container__fields4))

;; H
  (assert
  (= (length
     (mk___rep l6__split_discrs
     my_lists__my_lists__clear__container__fields5)) 0))

;; H
  (assert
  (= result6 (mk___split_fields__ref (mk___split_fields l6__split_fields))))

;; H
  (assert
  (= l6__split_fields1 my_lists__my_lists__clear__container__fields5))

;; H
  (assert
  (= (length
     (mk___rep l7__split_discrs
     my_lists__my_lists__clear__container__fields6)) 0))

;; H
  (assert
  (= result7 (mk___split_fields__ref (mk___split_fields l7__split_fields))))

;; H
  (assert
  (= l7__split_fields1 my_lists__my_lists__clear__container__fields6))

;; H
  (assert
  (= (to_rep (rec__my_lists__my_lists__list__capacity l1__split_discrs)) 100))

;; H
  (assert
  (= (to_rep (rec__my_lists__my_lists__list__capacity l2__split_discrs)) 100))

(assert
;; WP_parameter_def
 ;; File "a-contai.ads", line 20, characters 0-0
  (not
  (= (to_rep (rec__my_lists__my_lists__list__capacity l3__split_discrs)) 100)))
(check-sat)
(exit)
