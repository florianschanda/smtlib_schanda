;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-sort unsigned_8 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned_8 unsigned_8) Bool)

(declare-fun dummy1 () unsigned_8)

(declare-datatypes ()
((unsigned_8__ref (mk_unsigned_8__ref (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref___projection ((a unsigned_8__ref)) unsigned_8
  (unsigned_8__content a))

(define-fun dynamic_invariant1 ((temp___expr_160 (_ BitVec 8))
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool true)

(declare-fun byte () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun left () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun flag () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun mask () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun r () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun left_bv () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

;; mask__def_axiom
  (assert
  (= mask (ite (< (- 7 left) 8)
          (bvshl ((_ int2bv 8) 1) ((_ int2bv 8) (- 7 left)))
          ((_ int2bv 8) 0))))

;; r__def_axiom
  (assert
  (= r (ite (= flag true) (bvor byte mask) (bvand byte (bvnot mask)))))

;; left_bv__def_axiom
  (assert (= left_bv ((_ int2bv 8) left)))

(declare-fun bitwalker__pokebit8__result () (_ BitVec 8))

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () (_ BitVec 8))

(declare-fun bitwalker__pokebit8__mask__assume () (_ BitVec 8))

(declare-fun bitwalker__pokebit8__r__assume () (_ BitVec 8))

(declare-fun o3 () Int)

(declare-fun bitwalker__pokebit8__left_bv__assume () (_ BitVec 8))

(declare-fun o4 () Int)

(declare-fun i () (_ BitVec 8))

(declare-fun o5 () Int)

(declare-fun o6 () Bool)

(declare-fun i1 () Int)

(declare-fun result () Bool)

(declare-fun result1 () (_ BitVec 8))

(declare-fun bitwalker__pokebit8__result1 () (_ BitVec 8))

(declare-fun bitwalker__pokebit8__result2 () (_ BitVec 8))

(declare-fun bitwalker__pokebit8__result3 () (_ BitVec 8))

(declare-fun bitwalker__pokebit8__result4 () (_ BitVec 8))

(declare-fun bitwalker__pokebit8__result5 () (_ BitVec 8))

(declare-fun result2 () Bool)

(define-fun bitwalker__pokebit8__result6 () t__ref (mk_t__ref
                                                   bitwalker__pokebit8__result4))

(define-fun bitwalker__pokebit8__result7 () t__ref (mk_t__ref
                                                   bitwalker__pokebit8__result2))

(define-fun result3 () t__ref (mk_t__ref result1))

(define-fun bitwalker__pokebit8__result8 () t__ref (mk_t__ref
                                                   bitwalker__pokebit8__result))

;; H
  (assert true)

;; H
  (assert (in_range1 left))

;; H
  (assert (< left 8))

;; H
  (assert (and (= o (- 7 left)) (in_range1 (- 7 left))))

;; H
  (assert (= result (ite (< o 8) true false)))

;; H
  (assert
  (=> (= result true) (and (= o1 (- 7 left)) (in_range1 (- 7 left)))))

;; H
  (assert (=> (= result true) (= o2 ((_ int2bv 8) o1))))

;; H
  (assert
  (=> (= result true)
  (= bitwalker__pokebit8__mask__assume (bvshl ((_ int2bv 8) 1) o2))))

;; H
  (assert
  (=> (not (= result true))
  (= bitwalker__pokebit8__mask__assume ((_ int2bv 8) 0))))

;; H
  (assert (= bitwalker__pokebit8__mask__assume mask))

;; H
  (assert true)

;; H
  (assert
  (=> (= flag true) (= bitwalker__pokebit8__r__assume (bvor byte mask))))

;; H
  (assert
  (=> (not (= flag true))
  (= bitwalker__pokebit8__r__assume (bvand byte (bvnot mask)))))

;; H
  (assert (= bitwalker__pokebit8__r__assume r))

;; H
  (assert true)

;; H
  (assert (and (= o3 left) (uint_in_range left)))

;; H
  (assert (= bitwalker__pokebit8__left_bv__assume ((_ int2bv 8) o3)))

;; H
  (assert (= bitwalker__pokebit8__left_bv__assume left_bv))

;; H
  (assert true)

;; H
  (assert (bvult left_bv ((_ int2bv 8) 8)))

;; H
  (assert (= (bvsub ((_ int2bv 8) 7) left_bv) ((_ int2bv 8) (- 7 left))))

(declare-fun i2 () (_ BitVec 8))

;; H
  (assert (bvule ((_ int2bv 8) 0) i2))

;; H
  (assert (bvule i2 ((_ int2bv 8) 7)))

;; H
  (assert (not (= i2 (bvsub ((_ int2bv 8) 7) left_bv))))

;; H
  (assert (= (nth_bv r i2) true))

(assert
;; WP_parameter_def
 ;; File "interfac.ads", line 63, characters 0-0
  (not (= (nth_bv byte i2) true)))
(check-sat)
(exit)
