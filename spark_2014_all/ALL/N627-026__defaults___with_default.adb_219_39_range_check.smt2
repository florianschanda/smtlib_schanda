;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-fun dummy () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-fun c () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-sort t29b 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (t29b t29b) Bool)

(declare-fun dummy2 () t29b)

(declare-datatypes () ((t29b__ref (mk_t29b__ref (t29b__content t29b)))))
(define-fun t29b__ref___projection ((a t29b__ref)) t29b (t29b__content a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-fun to_rep1 (positive) Int)

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__with_default__bad_nested_defaults2__empty_rec__d positive)))))
(define-fun us_split_discrs_10__projection ((a us_split_discrs)) positive 
  (rec__with_default__bad_nested_defaults2__empty_rec__d a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref_10__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_rep
 (mk___rep (us_split_discrs1 us_split_discrs)(attr__constrained Bool)))))
(define-fun us_rep_28__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_29__projection ((a us_rep)) Bool (attr__constrained a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep1
                           (rec__with_default__bad_nested_defaults2__empty_rec__d
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__with_default__bad_nested_defaults2__empty_rec__d
                                                  (us_split_discrs1 b))))
                   true false))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun with_default__bad_nested_defaults2__empty_rec__d__first__bit () Int)

(declare-fun with_default__bad_nested_defaults2__empty_rec__d__last__bit () Int)

(declare-fun with_default__bad_nested_defaults2__empty_rec__d__position () Int)

;; with_default__bad_nested_defaults2__empty_rec__d__first__bit_axiom
  (assert
  (<= 0 with_default__bad_nested_defaults2__empty_rec__d__first__bit))

;; with_default__bad_nested_defaults2__empty_rec__d__last__bit_axiom
  (assert
  (< with_default__bad_nested_defaults2__empty_rec__d__first__bit with_default__bad_nested_defaults2__empty_rec__d__last__bit))

;; with_default__bad_nested_defaults2__empty_rec__d__position_axiom
  (assert (<= 0 with_default__bad_nested_defaults2__empty_rec__d__position))

(declare-fun dummy3 () us_rep)

(declare-datatypes ()
((empty_rec__ref (mk_empty_rec__ref (empty_rec__content us_rep)))))
(define-fun empty_rec__ref_2__projection ((a empty_rec__ref)) us_rep 
  (empty_rec__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_139 Int))
                           (=>
                           (and (<= a__first temp___idx_139)
                           (<= temp___idx_139 a__last))
                           (= (bool_eq3 (select a temp___idx_139)
                              (select b (+ (- b__first a__first) temp___idx_139))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_139 Int))
  (=> (and (<= a__first temp___idx_139) (<= temp___idx_139 a__last))
  (= (bool_eq3 (select a temp___idx_139)
     (select b (+ (- b__first a__first) temp___idx_139))) true))))))))

(declare-fun dummy4 () (Array Int us_rep))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq4 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__with_default__bad_nested_defaults2__non_init__e (Array Int us_rep))(rec__with_default__bad_nested_defaults2__non_init__f natural)))))
(define-fun us_split_fields_E2__projection ((a us_split_fields)) (Array Int us_rep) 
  (rec__with_default__bad_nested_defaults2__non_init__e a))

(define-fun us_split_fields_F2__projection ((a us_split_fields)) natural 
  (rec__with_default__bad_nested_defaults2__non_init__f a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_12__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep_30__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq4
                            (rec__with_default__bad_nested_defaults2__non_init__e
                            (us_split_fields1 a)) 1 100
                            (rec__with_default__bad_nested_defaults2__non_init__e
                            (us_split_fields1 b)) 1 100) true)
                         (= (to_rep
                            (rec__with_default__bad_nested_defaults2__non_init__f
                            (us_split_fields1 a))) (to_rep
                                                   (rec__with_default__bad_nested_defaults2__non_init__f
                                                   (us_split_fields1 b)))))
                    true false))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun with_default__bad_nested_defaults2__non_init__e__first__bit () Int)

(declare-fun with_default__bad_nested_defaults2__non_init__e__last__bit () Int)

(declare-fun with_default__bad_nested_defaults2__non_init__e__position () Int)

;; with_default__bad_nested_defaults2__non_init__e__first__bit_axiom
  (assert (<= 0 with_default__bad_nested_defaults2__non_init__e__first__bit))

;; with_default__bad_nested_defaults2__non_init__e__last__bit_axiom
  (assert
  (< with_default__bad_nested_defaults2__non_init__e__first__bit with_default__bad_nested_defaults2__non_init__e__last__bit))

;; with_default__bad_nested_defaults2__non_init__e__position_axiom
  (assert (<= 0 with_default__bad_nested_defaults2__non_init__e__position))

(declare-fun with_default__bad_nested_defaults2__non_init__f__first__bit () Int)

(declare-fun with_default__bad_nested_defaults2__non_init__f__last__bit () Int)

(declare-fun with_default__bad_nested_defaults2__non_init__f__position () Int)

;; with_default__bad_nested_defaults2__non_init__f__first__bit_axiom
  (assert (<= 0 with_default__bad_nested_defaults2__non_init__f__first__bit))

;; with_default__bad_nested_defaults2__non_init__f__last__bit_axiom
  (assert
  (< with_default__bad_nested_defaults2__non_init__f__first__bit with_default__bad_nested_defaults2__non_init__f__last__bit))

;; with_default__bad_nested_defaults2__non_init__f__position_axiom
  (assert (<= 0 with_default__bad_nested_defaults2__non_init__f__position))

(declare-fun dummy5 () us_rep1)

(declare-datatypes ()
((non_init__ref (mk_non_init__ref (non_init__content us_rep1)))))
(define-fun non_init__ref_2__projection ((a non_init__ref)) us_rep1 (non_init__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_540 us_rep1)
  (temp___is_init_537 Bool) (temp___skip_constant_538 Bool)
  (temp___do_toplevel_539 Bool)) Bool (forall ((temp___541 Int))
                                      (=>
                                      (and (<= 1 temp___541)
                                      (<= temp___541 100))
                                      (= (attr__constrained
                                         (select (rec__with_default__bad_nested_defaults2__non_init__e
                                                 (us_split_fields1
                                                 temp___expr_540)) temp___541)) false))))

(define-fun default_initial_assumption ((temp___expr_543 us_rep1)
  (temp___skip_top_level_544 Bool)) Bool (forall ((temp___546 Int))
                                         (=>
                                         (and (<= 1 temp___546)
                                         (<= temp___546 100))
                                         (and
                                         (= (attr__constrained
                                            (select (rec__with_default__bad_nested_defaults2__non_init__e
                                                    (us_split_fields1
                                                    temp___expr_543)) temp___546)) false)
                                         (= (to_rep1
                                            (rec__with_default__bad_nested_defaults2__empty_rec__d
                                            (us_split_discrs1
                                            (select (rec__with_default__bad_nested_defaults2__non_init__e
                                                    (us_split_fields1
                                                    temp___expr_543)) temp___546)))) 
                                         c)))))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(define-fun default_initial_assumption1 ((temp___expr_528 us_rep)
  (temp___skip_top_level_529 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_528) false)
                                         (= (to_rep1
                                            (rec__with_default__bad_nested_defaults2__empty_rec__d
                                            (us_split_discrs1
                                            temp___expr_528))) c)))

(declare-fun o () Int)

(declare-fun result () Bool)

;; H
  (assert (in_range c))

;; H
  (assert (=> (<= 1 100) (= o (+ (- 100 1) 1))))

;; H
  (assert (=> (not (<= 1 100)) (= o 0)))

;; H
  (assert (= result (ite (< 0 o) true false)))

;; H
  (assert (= result true))

(assert
;; WP_parameter_def
 ;; File "with_default.adb", line 205, characters 0-0
  (not (in_range1 c)))
(check-sat)
