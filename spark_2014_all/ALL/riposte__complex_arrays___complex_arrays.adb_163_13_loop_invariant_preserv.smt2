;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort index 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1001)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (index index) Bool)

(declare-fun dummy () index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(define-fun dynamic_invariant ((temp___expr_143 Int)
  (temp___is_init_140 Bool) (temp___skip_constant_141 Bool)
  (temp___do_toplevel_142 Bool)) Bool (=>
                                      (or (= temp___is_init_140 true)
                                      (<= 0 1001)) (in_range1
                                      temp___expr_143)))

(declare-sort value 0)

(define-fun in_range2 ((x Int)) Bool (and (<= (- 23) x) (<= x 69)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (value value) Bool)

(declare-fun dummy1 () value)

(declare-datatypes () ((value__ref (mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))

(declare-fun to_rep (value) Int)

(declare-fun of_rep (Int) value)

;; inversion_axiom
  (assert
  (forall ((x value)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x value)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int value))))))
(declare-fun slide ((Array Int value) Int Int) (Array Int value))

;; slide_eq
  (assert
  (forall ((a (Array Int value)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int value)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int value) Int Int (Array Int value) Int
  Int) (Array Int value))

;; concat_def
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (value Int) (Array Int value))

;; singleton_def
  (assert
  (forall ((v value))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int value)) (a__first Int) (a__last Int)
  (b (Array Int value)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int value) Int Int (Array Int value) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun i () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort tcounterB 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tcounterB tcounterB) Bool)

(declare-fun dummy2 () tcounterB)

(declare-datatypes ()
((tcounterB__ref (mk_tcounterB__ref (tcounterB__content tcounterB)))))
(define-fun tcounterB__ref___projection ((a tcounterB__ref)) tcounterB 
  (tcounterB__content a))

(declare-fun to_rep1 (tcounterB) Int)

(declare-fun of_rep1 (Int) tcounterB)

;; inversion_axiom
  (assert
  (forall ((x tcounterB))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x tcounterB)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (tcounterB tcounterB) Bool)

(declare-fun dummy3 () tcounterB)

(declare-datatypes () ((t24b__ref (mk_t24b__ref (t24b__content tcounterB)))))
(define-fun t24b__ref___projection ((a t24b__ref)) tcounterB (t24b__content
                                                             a))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (tcounterB tcounterB) Bool)

(declare-fun dummy4 () tcounterB)

(declare-datatypes () ((t29b__ref (mk_t29b__ref (t29b__content tcounterB)))))
(define-fun t29b__ref___projection ((a t29b__ref)) tcounterB (t29b__content
                                                             a))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun temp___238 (Int) (Array Int value))

;; def_axiom
  (assert
  (forall ((temp___240 Int))
  (forall ((temp___241 Int))
  (= (select (temp___238 temp___240) temp___241) (of_rep temp___240)))))

(define-fun dynamic_invariant1 ((temp___expr_149 Int)
  (temp___is_init_146 Bool) (temp___skip_constant_147 Bool)
  (temp___do_toplevel_148 Bool)) Bool (=>
                                      (or (= temp___is_init_146 true)
                                      (<= (- 23) 69)) (in_range2
                                      temp___expr_149)))

(declare-fun tmp () (Array Int value))

(declare-fun j () Int)

(declare-fun j1 () Int)

(declare-fun temp___245 () Int)

(declare-fun temp___244 () Int)

(declare-fun temp___242 () (Array Int value))

(declare-fun o () value)

(declare-fun o1 () (Array Int value))

(declare-fun o2 () value)

(declare-fun o3 () (Array Int value))

(declare-fun o4 () value)

(declare-fun o5 () (Array Int value))

(declare-fun result () (Array Int value))

(declare-fun tmp1 () (Array Int value))

(declare-fun result1 () Int)

(declare-fun j2 () Int)

(declare-fun result2 () (Array Int value))

(declare-fun tmp2 () (Array Int value))

(declare-fun tmp3 () (Array Int value))

(declare-fun j3 () Int)

(declare-fun tmp4 () (Array Int value))

(declare-fun j4 () Int)

(declare-fun tmp5 () (Array Int value))

(declare-fun j5 () Int)

(declare-fun tmp6 () (Array Int value))

(declare-fun j6 () Int)

(declare-fun tmp7 () (Array Int value))

(declare-fun j7 () Int)

(declare-fun result3 () Int)

(declare-fun j8 () Int)

(declare-fun result4 () (Array Int value))

(declare-fun tmp8 () (Array Int value))

(declare-fun tmp9 () (Array Int value))

(declare-fun j9 () Int)

(declare-fun result5 () Int)

(declare-fun j10 () Int)

(declare-fun result6 () (Array Int value))

(declare-fun tmp10 () (Array Int value))

(declare-fun tmp11 () (Array Int value))

(declare-fun j11 () Int)

(declare-fun tmp12 () (Array Int value))

(declare-fun j12 () Int)

(define-fun tmp13 () map__ref (mk_map__ref tmp6))

;; H
  (assert (in_range1 i))

;; H
  (assert (= (mk_map__ref result) (mk_map__ref tmp)))

;; H
  (assert (= tmp1 (temp___238 0)))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref j)))

;; H
  (assert (= j2 0))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= temp___245 i)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= temp___244 j2)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= temp___242 tmp1)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= (to_rep o) (- 23))))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= o1 (store tmp1 j2 o))))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp1 result2)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp2 o1)))

;; H
  (assert
  (=> (and (<= 0 j2) (<= j2 i))
  (and
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k j3))
  (=> (<= k j3) (= (to_rep (select tmp3 k)) (- 23))))) (= i temp___245))))

;; H
  (assert
  (=> (and (<= 0 j2) (<= j2 i))
  (and
  (and
  (forall ((temp___243 Int))
  (=> (and (<= 0 temp___243) (<= temp___243 1001))
  (=> (< j3 temp___243)
  (= (select tmp3 temp___243) (select temp___242 temp___243)))))
  (=> (<= 0 i) (dynamic_property 0 i j3))) (and (<= 0 j3) (<= j3 i)))))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= j3 i)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= j3 j4)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp3 tmp4)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= j5 j3)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp5 tmp3)))

;; H
  (assert
  (=> (and (<= 0 j2) (<= j2 i)) (= (mk_int__ref j6) (mk_int__ref j4))))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp13 (mk_map__ref tmp4))))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= j7 j5)))

;; H
  (assert (=> (and (<= 0 j2) (<= j2 i)) (= tmp7 tmp5)))

;; H
  (assert (=> (not (and (<= 0 j2) (<= j2 i))) (= j2 j6)))

;; H
  (assert (=> (not (and (<= 0 j2) (<= j2 i))) (= tmp1 tmp6)))

;; H
  (assert (=> (not (and (<= 0 j2) (<= j2 i))) (= j7 j2)))

;; H
  (assert (=> (not (and (<= 0 j2) (<= j2 i))) (= tmp7 tmp1)))

;; H
  (assert (= (mk_int__ref result3) (mk_int__ref j1)))

;; H
  (assert (= j8 i))

;; H
  (assert (<= i j8))

;; H
  (assert (<= j8 1001))

;; H
  (assert (= (to_rep o2) 69))

;; H
  (assert (= o3 (store tmp6 j8 o2)))

;; H
  (assert (= (mk_map__ref result4) tmp13))

;; H
  (assert (= tmp8 o3))

;; H
  (assert
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k j9))
  (and (=> (< k i) (= (to_rep (select tmp9 k)) (- 23)))
  (=> (<= i k) (= (to_rep (select tmp9 k)) 69))))))

;; H
  (assert
  (and
  (and (=> (<= i 1001) (dynamic_property1 i 1001 j9))
  (forall ((temp___250 Int))
  (=> (and (<= 0 temp___250) (<= temp___250 1001))
  (=> (< j9 temp___250)
  (= (select tmp9 temp___250) (select tmp6 temp___250))))))
  (and (<= i j9) (<= j9 1001))))

;; H
  (assert (not (= j9 1001)))

;; H
  (assert (= result5 j9))

;; H
  (assert (= j10 (+ j9 1)))

;; H
  (assert (= (to_rep o4) 69))

;; H
  (assert (= o5 (store tmp9 j10 o4)))

;; H
  (assert (= result6 tmp9))

;; H
  (assert (= tmp10 o5))

;; H
  (assert (= j10 j11))

;; H
  (assert (= tmp10 tmp11))

;; H
  (assert (= j12 j10))

;; H
  (assert (= tmp12 tmp10))

(declare-fun k () Int)

;; H
  (assert (<= 0 k))

;; H
  (assert (<= k j11))

;; H
  (assert (< k i))

(assert
;; WP_parameter_def
 ;; File "complex_arrays.adb", line 9, characters 0-0
  (not (= (to_rep (select tmp11 k)) (- 23))))
(check-sat)
