(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type cur

predicate in_range(x: int) = ((0 <= x) and (x <= 6))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : cur, cur -> bool

logic dummy : cur

type cur__ref = { cur__content : cur
}

function cur__ref___projection(a: cur__ref) : cur = (a).cur__content

logic to_rep : cur -> int

logic of_rep : int -> cur

axiom inversion_axiom : (forall x:cur [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:cur [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type raw_amount

predicate in_range1(x: int) = ((0 <= x) and (x <= 1000000))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : raw_amount, raw_amount -> bool

logic dummy1 : raw_amount

type raw_amount__ref = { raw_amount__content : raw_amount
}

function raw_amount__ref___projection(a: raw_amount__ref) : raw_amount =
  (a).raw_amount__content

logic to_rep1 : raw_amount -> int

logic of_rep1 : int -> raw_amount

axiom inversion_axiom1 :
  (forall x:raw_amount [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:raw_amount [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__money__amount__currency : cur;
rec__money__amount__raw : raw_amount
}

function us_split_fields_Currency__projection(a: us_split_fields) : cur =
  (a).rec__money__amount__currency

function us_split_fields_Raw__projection(a: us_split_fields) : raw_amount =
  (a).rec__money__amount__raw

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__money__amount__currency) = to_rep(((b).us_split_fields1).rec__money__amount__currency)) and
  (to_rep1(((a).us_split_fields1).rec__money__amount__raw) = to_rep1(((b).us_split_fields1).rec__money__amount__raw))) ->
  (bool_eq3(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__money__amount__currency) = to_rep(((b).us_split_fields1).rec__money__amount__currency)) and
  (to_rep1(((a).us_split_fields1).rec__money__amount__raw) = to_rep1(((b).us_split_fields1).rec__money__amount__raw)))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:cur. forall a1:raw_amount. (0 <= object__size({
  us_split_fields1 = { rec__money__amount__currency = a;
  rec__money__amount__raw = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:cur. forall a1:raw_amount. (0 <= object__alignment({
  us_split_fields1 = { rec__money__amount__currency = a;
  rec__money__amount__raw = a1 } })))

logic money__amount__currency__first__bit : int

logic money__amount__currency__last__bit : int

logic money__amount__currency__position : int

axiom money__amount__currency__first__bit_axiom :
  (0 <= money__amount__currency__first__bit)

axiom money__amount__currency__last__bit_axiom :
  (money__amount__currency__first__bit <  money__amount__currency__last__bit)

axiom money__amount__currency__position_axiom :
  (0 <= money__amount__currency__position)

logic money__amount__raw__first__bit : int

logic money__amount__raw__last__bit : int

logic money__amount__raw__position : int

axiom money__amount__raw__first__bit_axiom :
  (0 <= money__amount__raw__first__bit)

axiom money__amount__raw__last__bit_axiom :
  (money__amount__raw__first__bit <  money__amount__raw__last__bit)

axiom money__amount__raw__position_axiom :
  (0 <= money__amount__raw__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : cur

logic dummy3 : raw_amount

type amount__ref = { amount__content : us_rep
}

function amount__ref___projection(a: amount__ref) : us_rep =
  (a).amount__content

logic osubtract : us_rep, us_rep -> us_rep

logic osubtract__function_guard : us_rep, us_rep, us_rep -> prop

axiom osubtract__post_axiom :
  (forall a:cur. forall a1:raw_amount. forall b:cur. forall b1:raw_amount
  [osubtract({ us_split_fields1 = { rec__money__amount__currency = a;
  rec__money__amount__raw = a1 } }, { us_split_fields1 = {
  rec__money__amount__currency = b; rec__money__amount__raw = b1 } })].
  (((to_rep(a) = to_rep(b)) and (to_rep1(b1) <= to_rep1(a1))) ->
  (bool_eq3(osubtract({ us_split_fields1 = { rec__money__amount__currency =
  a; rec__money__amount__raw = a1 } }, { us_split_fields1 = {
  rec__money__amount__currency = b; rec__money__amount__raw = b1 } }), {
  us_split_fields1 = { rec__money__amount__currency = a;
  rec__money__amount__raw = of_rep1((to_rep1(a1) - to_rep1(b1))) }
  }) = true)))

type account_num

predicate in_range2(x: int) = ((1 <= x) and (x <= 200000))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : account_num, account_num -> bool

logic dummy4 : account_num

type account_num__ref = { account_num__content : account_num
}

function account_num__ref___projection(a: account_num__ref) : account_num =
  (a).account_num__content

type ext_account_num

predicate in_range3(x: int) = ((0 <= x) and (x <= 200000))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : ext_account_num, ext_account_num -> bool

logic dummy5 : ext_account_num

type ext_account_num__ref = { ext_account_num__content : ext_account_num
}

function ext_account_num__ref___projection(a: ext_account_num__ref) : ext_account_num =
  (a).ext_account_num__content

logic to_rep2 : ext_account_num -> int

logic of_rep2 : int -> ext_account_num

axiom inversion_axiom2 :
  (forall x:ext_account_num [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:ext_account_num [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields2 = {
rec__database__availability__account_link__available : bool;
rec__database__availability__account_link__prev : ext_account_num;
rec__database__availability__account_link__next : ext_account_num
}

function us_split_fields_Available__projection(a: us_split_fields2) : bool =
  (a).rec__database__availability__account_link__available

function us_split_fields_Prev__projection(a: us_split_fields2) : ext_account_num =
  (a).rec__database__availability__account_link__prev

function us_split_fields_Next__projection(a: us_split_fields2) : ext_account_num =
  (a).rec__database__availability__account_link__next

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  (((((((a).us_split_fields3).rec__database__availability__account_link__available = ((b).us_split_fields3).rec__database__availability__account_link__available) and
  (to_rep2(((a).us_split_fields3).rec__database__availability__account_link__prev) = to_rep2(((b).us_split_fields3).rec__database__availability__account_link__prev))) and
  (to_rep2(((a).us_split_fields3).rec__database__availability__account_link__next) = to_rep2(((b).us_split_fields3).rec__database__availability__account_link__next))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((((a).us_split_fields3).rec__database__availability__account_link__available = ((b).us_split_fields3).rec__database__availability__account_link__available) and
  (to_rep2(((a).us_split_fields3).rec__database__availability__account_link__prev) = to_rep2(((b).us_split_fields3).rec__database__availability__account_link__prev))) and
  (to_rep2(((a).us_split_fields3).rec__database__availability__account_link__next) = to_rep2(((b).us_split_fields3).rec__database__availability__account_link__next)))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:ext_account_num. forall a2:ext_account_num.
  (0 <= object__size1({ us_split_fields3 = {
  rec__database__availability__account_link__available = a;
  rec__database__availability__account_link__prev = a1;
  rec__database__availability__account_link__next = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:ext_account_num. forall a2:ext_account_num.
  (0 <= object__alignment1({ us_split_fields3 = {
  rec__database__availability__account_link__available = a;
  rec__database__availability__account_link__prev = a1;
  rec__database__availability__account_link__next = a2 } })))

logic database__availability__account_link__available__first__bit : int

logic database__availability__account_link__available__last__bit : int

logic database__availability__account_link__available__position : int

axiom database__availability__account_link__available__first__bit_axiom :
  (0 <= database__availability__account_link__available__first__bit)

axiom database__availability__account_link__available__last__bit_axiom :
  (database__availability__account_link__available__first__bit <  database__availability__account_link__available__last__bit)

axiom database__availability__account_link__available__position_axiom :
  (0 <= database__availability__account_link__available__position)

logic database__availability__account_link__prev__first__bit : int

logic database__availability__account_link__prev__last__bit : int

logic database__availability__account_link__prev__position : int

axiom database__availability__account_link__prev__first__bit_axiom :
  (0 <= database__availability__account_link__prev__first__bit)

axiom database__availability__account_link__prev__last__bit_axiom :
  (database__availability__account_link__prev__first__bit <  database__availability__account_link__prev__last__bit)

axiom database__availability__account_link__prev__position_axiom :
  (0 <= database__availability__account_link__prev__position)

logic database__availability__account_link__next__first__bit : int

logic database__availability__account_link__next__last__bit : int

logic database__availability__account_link__next__position : int

axiom database__availability__account_link__next__first__bit_axiom :
  (0 <= database__availability__account_link__next__first__bit)

axiom database__availability__account_link__next__last__bit_axiom :
  (database__availability__account_link__next__first__bit <  database__availability__account_link__next__last__bit)

axiom database__availability__account_link__next__position_axiom :
  (0 <= database__availability__account_link__next__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy6 : bool

logic dummy7 : ext_account_num

logic dummy8 : ext_account_num

type account_link__ref = { account_link__content : us_rep1
}

function account_link__ref___projection(a: account_link__ref) : us_rep1 =
  (a).account_link__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def :
  (forall v:bool. forall v1:ext_account_num. forall v2:ext_account_num.
  (forall i:int [(singleton({ us_split_fields3 = {
  rec__database__availability__account_link__available = v;
  rec__database__availability__account_link__prev = v1;
  rec__database__availability__account_link__next = v2 } }, i)[i])].
  ((singleton({ us_split_fields3 = {
  rec__database__availability__account_link__available = v;
  rec__database__availability__account_link__prev = v1;
  rec__database__availability__account_link__next = v2 } }, i)[i]) = {
  us_split_fields3 = { rec__database__availability__account_link__available =
  v; rec__database__availability__account_link__prev = v1;
  rec__database__availability__account_link__next = v2 } })))

logic bool_eq7 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_141:int. ((((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) and (bool_eq6((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true)) or
  (not ((a__first <= temp___idx_141) and (temp___idx_141 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_141:int. (((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) -> (bool_eq6((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_141:int. (((a__first <= temp___idx_141) and
  (temp___idx_141 <= a__last)) -> (bool_eq6((a[temp___idx_141]),
  (b[((b__first - a__first) + temp___idx_141)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic existing : int, (int,us_rep1) farray -> bool

logic existing__function_guard : bool, int, (int,us_rep1) farray -> prop

logic is_available : int, (int,us_rep1) farray -> bool

logic is_available__function_guard : bool, int, (int,us_rep1) farray -> prop

axiom existing__post_axiom : true

axiom existing__def_axiom :
  (forall account:int.
  (forall database__availability__links:(int,us_rep1) farray
  [existing(account, database__availability__links)]. ((existing(account,
  database__availability__links) = true) <-> (not (is_available(account,
  database__availability__links) = true)))))

type us_split_fields4 = { rec__database__account_balance__value : us_rep;
rec__database__account_balance__account : ext_account_num
}

function us_split_fields_Value__projection(a: us_split_fields4) : us_rep =
  (a).rec__database__account_balance__value

function us_split_fields_Account2__projection(a: us_split_fields4) : ext_account_num =
  (a).rec__database__account_balance__account

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref_4__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep_4__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq8 : us_rep2, us_rep2 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq8(a, b)].
  ((((bool_eq3(((a).us_split_fields5).rec__database__account_balance__value,
  ((b).us_split_fields5).rec__database__account_balance__value) = true) and
  (to_rep2(((a).us_split_fields5).rec__database__account_balance__account) = to_rep2(((b).us_split_fields5).rec__database__account_balance__account))) ->
  (bool_eq8(a, b) = true)) and
  ((not ((bool_eq3(((a).us_split_fields5).rec__database__account_balance__value,
  ((b).us_split_fields5).rec__database__account_balance__value) = true) and
  (to_rep2(((a).us_split_fields5).rec__database__account_balance__account) = to_rep2(((b).us_split_fields5).rec__database__account_balance__account)))) ->
  (bool_eq8(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:cur. forall a1:raw_amount. forall a2:ext_account_num.
  (0 <= object__size2({ us_split_fields5 = {
  rec__database__account_balance__value = { us_split_fields1 = {
  rec__money__amount__currency = a; rec__money__amount__raw = a1 } };
  rec__database__account_balance__account = a2 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:cur. forall a1:raw_amount. forall a2:ext_account_num.
  (0 <= object__alignment2({ us_split_fields5 = {
  rec__database__account_balance__value = { us_split_fields1 = {
  rec__money__amount__currency = a; rec__money__amount__raw = a1 } };
  rec__database__account_balance__account = a2 } })))

logic database__account_balance__value__first__bit : int

logic database__account_balance__value__last__bit : int

logic database__account_balance__value__position : int

axiom database__account_balance__value__first__bit_axiom :
  (0 <= database__account_balance__value__first__bit)

axiom database__account_balance__value__last__bit_axiom :
  (database__account_balance__value__first__bit <  database__account_balance__value__last__bit)

axiom database__account_balance__value__position_axiom :
  (0 <= database__account_balance__value__position)

logic database__account_balance__account__first__bit : int

logic database__account_balance__account__last__bit : int

logic database__account_balance__account__position : int

axiom database__account_balance__account__first__bit_axiom :
  (0 <= database__account_balance__account__first__bit)

axiom database__account_balance__account__last__bit_axiom :
  (database__account_balance__account__first__bit <  database__account_balance__account__last__bit)

axiom database__account_balance__account__position_axiom :
  (0 <= database__account_balance__account__position)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy9 : cur

logic dummy10 : raw_amount

logic dummy11 : ext_account_num

type account_balance__ref = { account_balance__content : us_rep2
}

function account_balance__ref___projection(a: account_balance__ref) : us_rep2 =
  (a).account_balance__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def1 :
  (forall v:cur. forall v1:raw_amount. forall v2:ext_account_num.
  (forall i:int [(singleton1({ us_split_fields5 = {
  rec__database__account_balance__value = { us_split_fields1 = {
  rec__money__amount__currency = v; rec__money__amount__raw = v1 } };
  rec__database__account_balance__account = v2 } }, i)[i])]. ((singleton1({
  us_split_fields5 = { rec__database__account_balance__value = {
  us_split_fields1 = { rec__money__amount__currency = v;
  rec__money__amount__raw = v1 } }; rec__database__account_balance__account =
  v2 } }, i)[i]) = { us_split_fields5 = {
  rec__database__account_balance__value = { us_split_fields1 = {
  rec__money__amount__currency = v; rec__money__amount__raw = v1 } };
  rec__database__account_balance__account = v2 } })))

logic bool_eq9 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def8 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq9(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_143:int. ((((a__first <= temp___idx_143) and
  (temp___idx_143 <= a__last)) and (bool_eq8((a[temp___idx_143]),
  (b[((b__first - a__first) + temp___idx_143)])) = true)) or
  (not ((a__first <= temp___idx_143) and (temp___idx_143 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_143:int. (((a__first <= temp___idx_143) and
  (temp___idx_143 <= a__last)) -> (bool_eq8((a[temp___idx_143]),
  (b[((b__first - a__first) + temp___idx_143)])) = true))))) -> (bool_eq9(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_143:int. (((a__first <= temp___idx_143) and
  (temp___idx_143 <= a__last)) -> (bool_eq8((a[temp___idx_143]),
  (b[((b__first - a__first) + temp___idx_143)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic currency : int, (int,us_rep2) farray -> int

logic currency__function_guard : int, int, (int,us_rep2) farray -> prop

axiom currency__post_axiom :
  (forall account:int.
  (forall database__accounts_balance:(int,us_rep2) farray [currency(account,
  database__accounts_balance)]. (in_range2(account) ->
  in_range(currency(account, database__accounts_balance)))))

axiom currency__def_axiom :
  (forall account:int.
  (forall database__accounts_balance:(int,us_rep2) farray [currency(account,
  database__accounts_balance)]. (in_range2(account) -> (currency(account,
  database__accounts_balance) = to_rep((((((database__accounts_balance[account])).us_split_fields5).rec__database__account_balance__value).us_split_fields1).rec__money__amount__currency)))))

logic balance : int, (int,us_rep1) farray, (int,us_rep2) farray -> us_rep

logic balance__function_guard : us_rep, int, (int,us_rep1) farray,
  (int,us_rep2) farray -> prop

axiom balance__post_axiom : true

axiom balance__def_axiom :
  (forall account:int.
  (forall database__availability__links:(int,us_rep1) farray.
  (forall database__accounts_balance:(int,us_rep2) farray [balance(account,
  database__availability__links, database__accounts_balance)].
  (in_range2(account) -> (balance(account, database__availability__links,
  database__accounts_balance) = (((database__accounts_balance[account])).us_split_fields5).rec__database__account_balance__value)))))

logic account : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic sum : cur

logic sum1 : raw_amount

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom is_available__post_axiom : true

axiom is_available__def_axiom :
  (forall account1:int.
  (forall database__availability__links:(int,us_rep1) farray
  [is_available(account1, database__availability__links)].
  ((is_available(account1, database__availability__links) = true) <->
  ((((database__availability__links[account1])).us_split_fields3).rec__database__availability__account_link__available = true))))

 (* File "database.ads", line 103, characters 0-0 *)
goal WP_parameter_def :
  (forall links:(int,us_rep1) farray.
  forall accounts_balance:(int,us_rep2) farray. forall o:cur.
  forall o1:raw_amount. forall o2:cur. forall o3:raw_amount.
  forall o4:raw_amount. forall o5:int. forall o6:int. forall o7:bool.
  forall result:bool. forall result1:bool. (in_range2(account) ->
  (((existing(account, links) = true) and ((currency(account,
  accounts_balance) = to_rep(sum)) and
  (to_rep1(sum1) <= to_rep1(((balance(account, links,
  accounts_balance)).us_split_fields1).rec__money__amount__raw)))) ->
  (((((((o6 = currency(account, accounts_balance)) and (in_range(o6) and
  (o6 = to_rep((((((accounts_balance[account])).us_split_fields5).rec__database__account_balance__value).us_split_fields1).rec__money__amount__currency)))) and
  (((o6 = to_rep(sum)) and (o7 = true)) or ((not (o6 = to_rep(sum))) and
  (o7 = false)))) and (((not (o7 = true)) and (result1 = true)) or
  ((o7 = true) and (result1 = false)))) and (((result1 = true) and
  (result = true)) or ((not (result1 = true)) and (((((({ us_split_fields1 =
  { rec__money__amount__currency = o; rec__money__amount__raw = o1 }
  } = balance(account, links, accounts_balance)) and ({ us_split_fields1 = {
  rec__money__amount__currency = o; rec__money__amount__raw = o1 }
  } = (((accounts_balance[account])).us_split_fields5).rec__database__account_balance__value)) and
  ((o = o2) and (o1 = o3))) and (o4 = o3)) and (o5 = to_rep1(o4))) and
  (((o5 <  to_rep1(sum1)) and (result = true)) or
  ((not (o5 <  to_rep1(sum1))) and (result = false))))))) and
  (not (result = true))) ->
  (to_rep((((((accounts_balance[account])).us_split_fields5).rec__database__account_balance__value).us_split_fields1).rec__money__amount__currency) = to_rep(sum))))))
