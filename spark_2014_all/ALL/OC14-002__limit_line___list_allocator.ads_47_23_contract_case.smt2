;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort resource 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (resource resource) Bool)

(declare-const dummy2 resource)

(declare-datatypes ((resource__ref 0))
(((mk_resource__ref (resource__content resource)))))
(define-fun resource__ref___projection ((a resource__ref)) resource (resource__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_284 Int)
  (temp___is_init_281 Bool) (temp___skip_constant_282 Bool)
  (temp___do_toplevel_283 Bool)) Bool (=>
                                      (or (= temp___is_init_281 true)
                                      (<= 0 3)) (in_range3 temp___expr_284)))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep (sequence__content
                                                                  a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun length1 (Int us_rep) Int)

(declare-fun length__function_guard1 (Int Int us_rep) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)) )))

(define-fun default_initial_assumption ((temp___expr_309 us_rep)
  (temp___skip_top_level_310 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_310 true))
                                         (= (length temp___expr_309) 0)))

;; length__post_axiom
  (assert
  (forall ((s us_rep)) (! (dynamic_invariant (length s) true false
  true) :pattern ((length s)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((s us_rep)) (! (dynamic_invariant (length1 attr__tag s) true false
  true) :pattern ((length1 attr__tag s)) ))))

(declare-fun get (us_rep Int) Int)

(declare-fun get__function_guard (Int us_rep Int) Bool)

(declare-fun get1 (Int us_rep Int) Int)

(declare-fun get__function_guard1 (Int Int us_rep Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(declare-sort element_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (element_type element_type) Bool)

(declare-const dummy4 element_type)

(declare-datatypes ((element_type__ref 0))
(((mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_302 Int)
  (temp___is_init_299 Bool) (temp___skip_constant_300 Bool)
  (temp___do_toplevel_301 Bool)) Bool (=>
                                      (or (= temp___is_init_299 true)
                                      (<= 0 3)) (in_range4 temp___expr_302)))

;; get__post_axiom
  (assert
  (forall ((s us_rep))
  (forall ((n Int))
  (! (=>
     (and (dynamic_invariant2 n true true true)
     (and (<= 1 n) (<= n (length s)))) (dynamic_invariant3 (get s n) true
     false true)) :pattern ((get s n)) ))))

;; get__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int) (n Int))
  (forall ((s us_rep))
  (! (=> (dynamic_invariant2 n true true true) (dynamic_invariant3
     (get1 attr__tag s n) true false true)) :pattern ((get1 attr__tag s n)) ))))

(declare-fun mem (us_rep Int) Bool)

(declare-fun mem__function_guard (Bool us_rep Int) Bool)

;; mem__post_axiom
  (assert true)

;; mem__def_axiom
  (assert
  (forall ((s us_rep))
  (forall ((r Int))
  (! (= (= (mem s r) true)
     (exists ((j Int))
     (and (and (<= 1 j) (<= j (length s))) (= (get s j) r)))) :pattern (
  (mem s r)) ))))

(declare-const s us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const r Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const r29b Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort integer 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-const dummy5 integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range5 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes ((t30b__ref 0))
(((mk_t30b__ref (t30b__content integer)))))
(define-fun t30b__ref___projection ((a t30b__ref)) integer (t30b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range5 temp___expr_15)))

;; oeq__post_axiom
  (assert
  (forall ((s1 us_rep) (s2 us_rep))
  (! (= (= (oeq s1 s2) true)
     (and (= (length s1) (length s2))
     (forall ((n Int))
     (=> (and (<= 1 n) (<= n (length s1))) (= (get s1 n) (get s2 n)))))) :pattern (
  (oeq s1 s2)) )))

;; oeq__post__dispatch_axiom
  (assert true)

(declare-const j Int)

(declare-const list_allocator__m__find__result Int)

(declare-const list_allocator__m__find__L_1__R29b__assume Int)

(declare-const temp___383 Int)

(declare-const temp___384 Int)

(declare-const temp___382 Int)

(declare-const o Int)

(declare-const o1 Int)

(declare-const list_allocator__m__find__result1 Int)

(declare-const result Int)

(declare-const j1 Int)

(declare-const result1 Bool)

(declare-const result2 Int)

(declare-const list_allocator__m__find__result2 Int)

(declare-const j2 Int)

(declare-const list_allocator__m__find__result3 Int)

(declare-const result3 Int)

(declare-const j3 Int)

(declare-const result4 Bool)

(declare-const result5 Int)

(declare-const list_allocator__m__find__result4 Int)

(declare-const j4 Int)

(declare-const list_allocator__m__find__result5 Int)

(declare-const j5 Int)

(declare-const list_allocator__m__find__result6 Int)

(declare-const j6 Int)

(declare-const list_allocator__m__find__result7 Int)

(declare-const j7 Int)

(declare-const list_allocator__m__find__result8 Int)

(declare-const j8 Int)

(declare-const list_allocator__m__find__result9 Int)

(declare-const j9 Int)

(declare-const list_allocator__m__find__result10 Int)

(declare-const result6 Int)

(declare-const list_allocator__m__find__result11 Int)

(declare-const list_allocator__m__find__result12 Int)

(declare-const list_allocator__m__find__result13 Int)

(declare-const j10 Int)

(declare-const list_allocator__m__find__result14 Int)

(declare-const j11 Int)

(declare-const list_allocator__m__find__result15 Int)

(declare-const j12 Int)

(declare-const list_allocator__m__find__result16 Int)

(declare-const j13 Int)

(declare-const list_allocator__m__find__result17 Int)

(define-fun list_allocator__m__find__result18 () int__ref (mk_int__ref
                                                          list_allocator__m__find__result14))

(define-fun j14 () int__ref (mk_int__ref j10))

(define-fun list_allocator__m__find__result19 () int__ref (mk_int__ref
                                                          list_allocator__m__find__result9))

(define-fun j15 () int__ref (mk_int__ref j8))

(define-fun result7 () int__ref (mk_int__ref result))

(define-fun j16 () int__ref (mk_int__ref j))

;; H
  (assert (in_range3 r))

;; H
  (assert
  (and (= list_allocator__m__find__L_1__R29b__assume (length s)) (in_range1
  list_allocator__m__find__L_1__R29b__assume)))

;; H
  (assert (= list_allocator__m__find__L_1__R29b__assume r29b))

;; H
  (assert (in_range1 r29b))

;; H
  (assert
  (or
  (and
  (and
  (and
  (= list_allocator__m__find__result18 (mk_int__ref
                                       list_allocator__m__find__result5))
  (= j14 (mk_int__ref j4)))
  (and (= list_allocator__m__find__result15 list_allocator__m__find__result6)
  (= j11 j5)))
  (and (= temp___383 1)
  (and (= temp___384 r29b)
  (and (and (= result7 j16) (= j1 temp___383))
  (and (and (<= temp___383 j1) (<= j1 temp___384))
  (and (= temp___382 j1)
  (or
  (and
  (and
  (and (= list_allocator__m__find__result2 list_allocator__m__find__result5)
  (= j1 j4))
  (and (= list_allocator__m__find__result6 list_allocator__m__find__result2)
  (= j5 j1)))
  (and
  (and (and (= o (get s j1)) (in_range4 o))
  (= result1 (ite (= o r) true false)))
  (and (= result1 true)
  (and (= result2 list_allocator__m__find__result)
  (= list_allocator__m__find__result2 j1)))))
  (and
  (and
  (and (and (= o (get s j1)) (in_range4 o))
  (= result1 (ite (= o r) true false)))
  (and (not (= result1 true))
  (and (= list_allocator__m__find__result2 list_allocator__m__find__result)
  (= list_allocator__m__find__result2 list_allocator__m__find__result1))))
  (and
  (and
  (and (= list_allocator__m__find__result4 list_allocator__m__find__result5)
  (= j3 j4))
  (and (= list_allocator__m__find__result6 list_allocator__m__find__result4)
  (= j5 j3)))
  (and (forall ((k Int)) (=> (and (<= 1 k) (<= k j2)) (not (= (get s k) r))))
  (and
  (and (=> (<= 1 r29b) (dynamic_property 1 r29b j2))
  (and (<= 1 j2) (<= j2 r29b)))
  (and (not (= j2 temp___384))
  (and (and (= j2 result3) (= j3 (+ j2 1)))
  (and
  (and (and (= o1 (get s j3)) (in_range4 o1))
  (= result4 (ite (= o1 r) true false)))
  (and (= result4 true)
  (and (= result5 list_allocator__m__find__result3)
  (= list_allocator__m__find__result4 j3)))))))))))))))))
  (and
  (and (and (= result7 j16) (= j1 1))
  (ite (and (<= 1 j1) (<= j1 r29b))
  (and
  (and
  (and (= temp___382 j1)
  (and
  (and
  (and (and (= o (get s j1)) (in_range4 o))
  (= result1 (ite (= o r) true false)))
  (and (not (= result1 true))
  (and (= list_allocator__m__find__result2 list_allocator__m__find__result)
  (= list_allocator__m__find__result2 list_allocator__m__find__result1))))
  (and (forall ((k Int)) (=> (and (<= 1 k) (<= k j2)) (not (= (get s k) r))))
  (and
  (and (=> (<= 1 r29b) (dynamic_property 1 r29b j2))
  (and (<= 1 j2) (<= j2 r29b))) (= j2 r29b)))))
  (and
  (and (= list_allocator__m__find__result3 list_allocator__m__find__result7)
  (= j2 j6))
  (and (= list_allocator__m__find__result8 list_allocator__m__find__result3)
  (= j7 j2))))
  (and
  (and
  (= list_allocator__m__find__result19 (mk_int__ref
                                       list_allocator__m__find__result7))
  (= j15 (mk_int__ref j6)))
  (and (= list_allocator__m__find__result10 list_allocator__m__find__result8)
  (= j9 j7))))
  (and
  (and
  (= list_allocator__m__find__result19 (mk_int__ref
                                       list_allocator__m__find__result))
  (= j1 j8))
  (and (= list_allocator__m__find__result10 list_allocator__m__find__result1)
  (= j9 j1)))))
  (and
  (and
  (and
  (= list_allocator__m__find__result18 (mk_int__ref
                                       list_allocator__m__find__result12))
  (= j14 j15))
  (and
  (= list_allocator__m__find__result15 list_allocator__m__find__result13)
  (= j11 j9)))
  (and
  (and
  (= list_allocator__m__find__result11 list_allocator__m__find__result12)
  (= list_allocator__m__find__result13 list_allocator__m__find__result11))
  (and (= result6 list_allocator__m__find__result9)
  (= list_allocator__m__find__result11 0)))))))

;; H
  (assert
  (= (mk_int__ref list_allocator__m__find__result16) list_allocator__m__find__result18))

;; H
  (assert (= j12 j10))

;; H
  (assert
  (= list_allocator__m__find__result17 list_allocator__m__find__result15))

;; H
  (assert (= j13 j11))

;; H
  (assert (= (mem s r) true))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (<= 1 list_allocator__m__find__result16)))
(check-sat)
(exit)
