;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort path 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (path path) Bool)

(declare-fun dummy () path)

(declare-datatypes () ((path__ref (mk_path__ref (path__content path)))))
(define-fun path__ref___projection ((a path__ref)) path (path__content a))

(define-fun dynamic_invariant ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 3)) (in_range1 temp___expr_141)))

(declare-sort light 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (light light) Bool)

(declare-fun dummy1 () light)

(declare-datatypes () ((light__ref (mk_light__ref (light__content light)))))
(define-fun light__ref___projection ((a light__ref)) light (light__content a))

(declare-fun to_rep (light) Int)

(declare-fun of_rep (Int) light)

;; inversion_axiom
  (assert
  (forall ((x light)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x light)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int light))))))
(declare-fun slide ((Array Int light) Int Int) (Array Int light))

;; slide_eq
  (assert
  (forall ((a (Array Int light)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int light)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int light) Int Int (Array Int light) Int
  Int) (Array Int light))

;; concat_def
  (assert
  (forall ((a (Array Int light)) (b (Array Int light)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (light Int) (Array Int light))

;; singleton_def
  (assert
  (forall ((v light))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int light)) (a__first Int) (a__last Int)
  (b (Array Int light)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int light)) (b (Array Int light)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int light) Int Int (Array Int light) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int light)) (b (Array Int light)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int light)) (b (Array Int light)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int light)) (b (Array Int light)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (path) Int)

(declare-fun of_rep1 (Int) path)

;; inversion_axiom
  (assert
  (forall ((x path)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x path)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__road_traffic__conflict__left path)(rec__road_traffic__conflict__right path)))))
(define-fun us_split_fields_Left__projection ((a us_split_fields)) path
  (rec__road_traffic__conflict__left a))

(define-fun us_split_fields_Right__projection ((a us_split_fields)) path
  (rec__road_traffic__conflict__right a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__road_traffic__conflict__left
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__road_traffic__conflict__left
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__road_traffic__conflict__right
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__road_traffic__conflict__right
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun road_traffic__conflict__left__first__bit () Int)

(declare-fun road_traffic__conflict__left__last__bit () Int)

(declare-fun road_traffic__conflict__left__position () Int)

;; road_traffic__conflict__left__first__bit_axiom
  (assert (<= 0 road_traffic__conflict__left__first__bit))

;; road_traffic__conflict__left__last__bit_axiom
  (assert
  (< road_traffic__conflict__left__first__bit road_traffic__conflict__left__last__bit))

;; road_traffic__conflict__left__position_axiom
  (assert (<= 0 road_traffic__conflict__left__position))

(declare-fun road_traffic__conflict__right__first__bit () Int)

(declare-fun road_traffic__conflict__right__last__bit () Int)

(declare-fun road_traffic__conflict__right__position () Int)

;; road_traffic__conflict__right__first__bit_axiom
  (assert (<= 0 road_traffic__conflict__right__first__bit))

;; road_traffic__conflict__right__last__bit_axiom
  (assert
  (< road_traffic__conflict__right__first__bit road_traffic__conflict__right__last__bit))

;; road_traffic__conflict__right__position_axiom
  (assert (<= 0 road_traffic__conflict__right__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-fun dummy2 () us_rep)

(declare-datatypes ()
((conflict__ref (mk_conflict__ref (conflict__content us_rep)))))
(define-fun conflict__ref___projection ((a conflict__ref)) us_rep (conflict__content
                                                                  a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep))))))
(declare-fun slide1 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_137 Int))
                           (=>
                           (and (<= a__first temp___idx_137)
                           (<= temp___idx_137 a__last))
                           (= (bool_eq1 (select a temp___idx_137)
                              (select b (+ (- b__first a__first) temp___idx_137))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_137 Int))
  (=> (and (<= a__first temp___idx_137) (<= temp___idx_137 a__last))
  (= (bool_eq1 (select a temp___idx_137)
     (select b (+ (- b__first a__first) temp___idx_137))) true))))))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun safety_property ((Array Int light) (Array Int us_rep)) Bool)

(declare-fun safety_property__function_guard (Bool (Array Int light)
  (Array Int us_rep)) Bool)

(declare-sort tTconflictsSP1 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (tTconflictsSP1 tTconflictsSP1) Bool)

(declare-fun dummy3 () tTconflictsSP1)

(declare-datatypes ()
((tTconflictsSP1__ref
 (mk_tTconflictsSP1__ref (tTconflictsSP1__content tTconflictsSP1)))))
(define-fun tTconflictsSP1__ref___projection ((a tTconflictsSP1__ref)) tTconflictsSP1
  (tTconflictsSP1__content a))

;; safety_property__post_axiom
  (assert true)

;; safety_property__def_axiom
  (assert
  (forall ((l (Array Int light)))
  (forall ((road_traffic__conflicts (Array Int us_rep)))
  (! (= (= (safety_property l road_traffic__conflicts) true)
     (forall ((temp___188 Int))
     (=> (and (<= 1 temp___188) (<= temp___188 8))
     (let ((c (select road_traffic__conflicts temp___188)))
     (or
     (= (to_rep
        (select l (to_rep1
                  (rec__road_traffic__conflict__left (us_split_fields1 c))))) 0)
     (= (to_rep
        (select l (to_rep1
                  (rec__road_traffic__conflict__right (us_split_fields1 c))))) 0)))))) :pattern (
  (safety_property l road_traffic__conflicts)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun p () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun temp___203 ((Array Int light) Int Int) (Array Int light))

;; def_axiom
  (assert
  (forall ((temp___205 (Array Int light)))
  (forall ((temp___206 Int) (temp___207 Int))
  (let ((temp___204 (temp___203 temp___205 temp___206 temp___207)))
  (forall ((temp___208 Int))
  (ite (= temp___208 temp___206)
  (= (select temp___204 temp___208) (of_rep temp___207))
  (= (select temp___204 temp___208) (select temp___205 temp___208))))))))

(define-fun dynamic_invariant1 ((temp___expr_147 Int)
  (temp___is_init_144 Bool) (temp___skip_constant_145 Bool)
  (temp___do_toplevel_146 Bool)) Bool (=>
                                      (or (= temp___is_init_144 true)
                                      (<= 0 2)) (in_range2 temp___expr_147)))

(declare-fun conflicts () (Array Int us_rep))

(declare-fun l () (Array Int light))

(declare-fun o () light)

(declare-fun o1 () (Array Int light))

(declare-fun result () (Array Int light))

(declare-fun l1 () (Array Int light))

(declare-fun l2 () (Array Int light))

(declare-fun l3 () (Array Int light))

;; H
  (assert (in_range1 p))

;; H
  (assert
  (and (= (safety_property l conflicts) true) (= (to_rep (select l p)) 2)))

;; H
  (assert (= (to_rep o) 1))

;; H
  (assert (= o1 (store l p o)))

;; H
  (assert (= result l))

;; H
  (assert (= l1 o1))

;; H
  (assert (= l1 l2))

;; H
  (assert (= l3 l1))

(assert
;; WP_parameter_def
 ;; File "road_traffic.ads", line 37, characters 0-0
  (not (= (safety_property l2 conflicts) true)))
(check-sat)
(exit)
