;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort t8b 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (t8b t8b) Bool)

(declare-const dummy1 t8b)

(declare-datatypes () ((t8b__ref (mk_t8b__ref (t8b__content t8b)))))
(define-fun t8b__ref___projection ((a t8b__ref)) t8b (t8b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort t9b 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (t9b t9b) Bool)

(declare-const dummy2 t9b)

(declare-datatypes () ((t9b__ref (mk_t9b__ref (t9b__content t9b)))))
(define-fun t9b__ref___projection ((a t9b__ref)) t9b (t9b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const t Int)

(declare-const index Int)

(declare-const index1 Int)

(declare-const temp___163 Int)

(declare-const temp___162 Int)

(declare-const temp___167 Int)

(declare-const temp___166 Int)

(declare-const result Int)

(declare-const t1 Int)

(declare-const result1 Int)

(declare-const index2 Int)

(declare-const t2 Int)

(declare-const index3 Int)

(declare-const result2 Int)

(declare-const t3 Int)

(declare-const t4 Int)

(declare-const index4 Int)

(declare-const t5 Int)

(declare-const index5 Int)

(declare-const t6 Int)

(declare-const index6 Int)

(declare-const t7 Int)

(declare-const index7 Int)

(declare-const result3 Int)

(declare-const t8 Int)

(declare-const result4 Int)

(declare-const index8 Int)

(declare-const t9 Int)

(declare-const index9 Int)

(declare-const result5 Int)

(declare-const t10 Int)

(declare-const t11 int__ref)

(declare-const index10 int__ref)

(declare-const t12 Int)

(declare-const index11 Int)

(declare-const t13 int__ref)

(declare-const index12 int__ref)

(declare-const t14 Int)

(declare-const index13 Int)

;; H
  (assert (= result t))

;; H
  (assert (= t1 0))

;; H
  (assert (in_range1 t1))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref index)))

;; H
  (assert (= index2 1))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= temp___163 index2)))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= temp___162 t1)))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= t2 (- index3 1))))

;; H
  (assert
  (=> (and (<= 1 index2) (<= index2 10))
  (and
  (and (=> (<= (- 2147483648) 2147483647) (in_range1 t2))
  (=> (<= 1 10) (in_range2 index3))) (and (<= 1 index3) (<= index3 10)))))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= t2 result2)))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= t3 index3)))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= index3 10)))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= index3 index4)))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= t3 t4)))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= index5 index3)))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= t5 t3)))

;; H
  (assert
  (=> (and (<= 1 index2) (<= index2 10))
  (= (mk_int__ref index6) (mk_int__ref index4))))

;; H
  (assert
  (=> (and (<= 1 index2) (<= index2 10))
  (= (mk_int__ref t6) (mk_int__ref t4))))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= index7 index5)))

;; H
  (assert (=> (and (<= 1 index2) (<= index2 10)) (= t7 t5)))

;; H
  (assert (=> (not (and (<= 1 index2) (<= index2 10))) (= index2 index6)))

;; H
  (assert (=> (not (and (<= 1 index2) (<= index2 10))) (= t1 t6)))

;; H
  (assert (=> (not (and (<= 1 index2) (<= index2 10))) (= index7 index2)))

;; H
  (assert (=> (not (and (<= 1 index2) (<= index2 10))) (= t7 t1)))

;; H
  (assert (= t6 10))

;; H
  (assert (= result3 t6))

;; H
  (assert (= t8 11))

;; H
  (assert (= (mk_int__ref result4) (mk_int__ref index1)))

;; H
  (assert (= index8 10))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= temp___167 t8)))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= temp___166 index8)))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= t9 (+ index9 1))))

;; H
  (assert
  (=> (and (<= 1 index8) (<= index8 10))
  (and
  (and (=> (<= 1 10) (in_range3 index9))
  (=> (<= (- 2147483648) 2147483647) (in_range1 t9)))
  (and (<= 1 index9) (<= index9 10)))))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= t9 result5)))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= t10 index9)))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= index9 1)))

;; H
  (assert
  (=> (and (<= 1 index8) (<= index8 10)) (= index10 (mk_int__ref index9))))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= t11 (mk_int__ref t10))))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= index11 index9)))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= t12 t10)))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= index12 index10)))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= t13 t11)))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= index13 index11)))

;; H
  (assert (=> (and (<= 1 index8) (<= index8 10)) (= t14 t12)))

;; H
  (assert
  (=> (not (and (<= 1 index8) (<= index8 10)))
  (= index12 (mk_int__ref index8))))

;; H
  (assert
  (=> (not (and (<= 1 index8) (<= index8 10))) (= t13 (mk_int__ref t8))))

;; H
  (assert (=> (not (and (<= 1 index8) (<= index8 10))) (= index13 index8)))

;; H
  (assert (=> (not (and (<= 1 index8) (<= index8 10))) (= t14 t8)))

(assert
;; WP_parameter_def
 ;; File "s.adb", line 3, characters 0-0
  (not (= (int__content t13) 1)))
(check-sat)
(exit)
