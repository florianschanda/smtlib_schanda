;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort unsigned_byte 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (unsigned_byte unsigned_byte) Bool)

(declare-const dummy unsigned_byte)

(declare-datatypes ()
((unsigned_byte__ref
 (mk_unsigned_byte__ref (unsigned_byte__content unsigned_byte)))))
(define-fun unsigned_byte__ref___projection ((a unsigned_byte__ref)) unsigned_byte
  (unsigned_byte__content a))

(define-fun dynamic_invariant ((temp___expr_180 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)) Bool (=>
                                      (or (= temp___is_init_177 true)
                                      (<= 0 255)) (in_range temp___expr_180)))

(declare-fun to_rep (unsigned_byte) Int)

(declare-fun of_rep (Int) unsigned_byte)

;; inversion_axiom
  (assert
  (forall ((x unsigned_byte))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x unsigned_byte)) (! (in_range
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__records_prooffuncs__pair__a unsigned_byte)(rec__records_prooffuncs__pair__b unsigned_byte)))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) unsigned_byte
  (rec__records_prooffuncs__pair__a a))

(define-fun us_split_fields_B__projection ((a us_split_fields)) unsigned_byte
  (rec__records_prooffuncs__pair__b a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__records_prooffuncs__pair__a
                           (us_split_fields1 a))) (to_rep
                                                  (rec__records_prooffuncs__pair__a
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__records_prooffuncs__pair__b
                           (us_split_fields1 a))) (to_rep
                                                  (rec__records_prooffuncs__pair__b
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const records_prooffuncs__pair__a__first__bit Int)

(declare-const records_prooffuncs__pair__a__last__bit Int)

(declare-const records_prooffuncs__pair__a__position Int)

;; records_prooffuncs__pair__a__first__bit_axiom
  (assert (<= 0 records_prooffuncs__pair__a__first__bit))

;; records_prooffuncs__pair__a__last__bit_axiom
  (assert
  (< records_prooffuncs__pair__a__first__bit records_prooffuncs__pair__a__last__bit))

;; records_prooffuncs__pair__a__position_axiom
  (assert (<= 0 records_prooffuncs__pair__a__position))

(declare-const records_prooffuncs__pair__b__first__bit Int)

(declare-const records_prooffuncs__pair__b__last__bit Int)

(declare-const records_prooffuncs__pair__b__position Int)

;; records_prooffuncs__pair__b__first__bit_axiom
  (assert (<= 0 records_prooffuncs__pair__b__first__bit))

;; records_prooffuncs__pair__b__last__bit_axiom
  (assert
  (< records_prooffuncs__pair__b__first__bit records_prooffuncs__pair__b__last__bit))

;; records_prooffuncs__pair__b__position_axiom
  (assert (<= 0 records_prooffuncs__pair__b__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((pair__ref (mk_pair__ref (pair__content us_rep)))))
(define-fun pair__ref___projection ((a pair__ref)) us_rep (pair__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__records_prooffuncs__optional_pair__exists Bool)(rec__records_prooffuncs__optional_pair__the_pair us_rep)))))
(define-fun us_split_fields_Exists__projection ((a us_split_fields2)) Bool
  (rec__records_prooffuncs__optional_pair__exists a))

(define-fun us_split_fields_The_Pair__projection ((a us_split_fields2)) us_rep
  (rec__records_prooffuncs__optional_pair__the_pair a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (rec__records_prooffuncs__optional_pair__exists
                            (us_split_fields3 a)) (rec__records_prooffuncs__optional_pair__exists
                                                  (us_split_fields3 b)))
                         (= (bool_eq
                            (rec__records_prooffuncs__optional_pair__the_pair
                            (us_split_fields3 a))
                            (rec__records_prooffuncs__optional_pair__the_pair
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const records_prooffuncs__optional_pair__exists__first__bit Int)

(declare-const records_prooffuncs__optional_pair__exists__last__bit Int)

(declare-const records_prooffuncs__optional_pair__exists__position Int)

;; records_prooffuncs__optional_pair__exists__first__bit_axiom
  (assert (<= 0 records_prooffuncs__optional_pair__exists__first__bit))

;; records_prooffuncs__optional_pair__exists__last__bit_axiom
  (assert
  (< records_prooffuncs__optional_pair__exists__first__bit records_prooffuncs__optional_pair__exists__last__bit))

;; records_prooffuncs__optional_pair__exists__position_axiom
  (assert (<= 0 records_prooffuncs__optional_pair__exists__position))

(declare-const records_prooffuncs__optional_pair__the_pair__first__bit Int)

(declare-const records_prooffuncs__optional_pair__the_pair__last__bit Int)

(declare-const records_prooffuncs__optional_pair__the_pair__position Int)

;; records_prooffuncs__optional_pair__the_pair__first__bit_axiom
  (assert (<= 0 records_prooffuncs__optional_pair__the_pair__first__bit))

;; records_prooffuncs__optional_pair__the_pair__last__bit_axiom
  (assert
  (< records_prooffuncs__optional_pair__the_pair__first__bit records_prooffuncs__optional_pair__the_pair__last__bit))

;; records_prooffuncs__optional_pair__the_pair__position_axiom
  (assert (<= 0 records_prooffuncs__optional_pair__the_pair__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ()
((optional_pair__ref
 (mk_optional_pair__ref (optional_pair__content us_rep1)))))
(define-fun optional_pair__ref___projection ((a optional_pair__ref)) us_rep1
  (optional_pair__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const x__split_fields Bool)

(declare-const x__split_fields1 unsigned_byte)

(declare-const x__split_fields2 unsigned_byte)

(declare-const tmp Int)

(declare-const o unsigned_byte)

(declare-const o1 unsigned_byte)

(declare-const o2 unsigned_byte)

(declare-const o3 unsigned_byte)

(declare-const o4 unsigned_byte)

(declare-const o5 Bool)

(declare-const o6 unsigned_byte)

(declare-const o7 unsigned_byte)

(declare-const temp___355 Bool)

(declare-const temp___3551 unsigned_byte)

(declare-const temp___3552 unsigned_byte)

(declare-const o8 unsigned_byte)

(declare-const o9 unsigned_byte)

(declare-const o10 unsigned_byte)

(declare-const o11 unsigned_byte)

(declare-const o12 unsigned_byte)

(declare-const o13 Bool)

(declare-const o14 unsigned_byte)

(declare-const o15 unsigned_byte)

(declare-const temp___358 us_rep1)

(declare-const x__split_fields3 us_split_fields2)

(declare-const tmp1 Int)

(declare-const result int__ref)

(declare-const tmp2 Int)

(declare-const result1 us_split_fields__ref1)

(declare-const x__split_fields4 us_split_fields2)

(declare-const result2 us_split_fields__ref1)

(declare-const x__split_fields5 us_split_fields2)

(declare-const x__split_fields6 us_split_fields__ref1)

(declare-const tmp3 int__ref)

(declare-const x__split_fields7 us_split_fields2)

(declare-const tmp4 Int)

;; H
  (assert (=> (<= 0 255) (in_range tmp)))

;; H
  (assert (=> (= x__split_fields true) (= result (mk_int__ref tmp))))

;; H
  (assert (=> (= x__split_fields true) (= tmp2 (to_rep x__split_fields1))))

;; H
  (assert
  (=> (= x__split_fields true) (= (to_rep o) (to_rep x__split_fields2))))

;; H
  (assert (=> (= x__split_fields true) (= o o1)))

;; H
  (assert (=> (= x__split_fields true) (= x__split_fields2 o2)))

;; H
  (assert (=> (= x__split_fields true) (= o3 o1)))

;; H
  (assert (=> (= x__split_fields true) (= o4 o2)))

;; H
  (assert (=> (= x__split_fields true) (= x__split_fields o5)))

;; H
  (assert (=> (= x__split_fields true) (= o6 o3)))

;; H
  (assert (=> (= x__split_fields true) (= o7 o4)))

;; H
  (assert (=> (= x__split_fields true) (= temp___355 o5)))

;; H
  (assert (=> (= x__split_fields true) (= temp___3551 o6)))

;; H
  (assert (=> (= x__split_fields true) (= temp___3552 o7)))

;; H
  (assert
  (=> (= x__split_fields true)
  (= result1 (mk___split_fields__ref1
             (mk___split_fields1 x__split_fields
             (mk___rep (mk___split_fields x__split_fields1 x__split_fields2)))))))

;; H
  (assert
  (=> (= x__split_fields true)
  (= x__split_fields4 (mk___split_fields1 temp___355
                      (mk___rep (mk___split_fields temp___3551 temp___3552))))))

;; H
  (assert (=> (= x__split_fields true) (= (to_rep o8) tmp2)))

;; H
  (assert
  (=> (= x__split_fields true)
  (= (rec__records_prooffuncs__pair__a
     (us_split_fields1
     (rec__records_prooffuncs__optional_pair__the_pair x__split_fields4)))
  o9)))

;; H
  (assert (=> (= x__split_fields true) (= o8 o10)))

;; H
  (assert (=> (= x__split_fields true) (= o11 o9)))

;; H
  (assert (=> (= x__split_fields true) (= o12 o10)))

;; H
  (assert
  (=> (= x__split_fields true)
  (= (rec__records_prooffuncs__optional_pair__exists x__split_fields4)
  o13)))

;; H
  (assert (=> (= x__split_fields true) (= o14 o11)))

;; H
  (assert (=> (= x__split_fields true) (= o15 o12)))

;; H
  (assert
  (=> (= x__split_fields true)
  (= temp___358 (mk___rep1
                (mk___split_fields1 o13
                (mk___rep (mk___split_fields o14 o15)))))))

;; H
  (assert
  (=> (= x__split_fields true)
  (= result2 (mk___split_fields__ref1 x__split_fields4))))

;; H
  (assert
  (=> (= x__split_fields true)
  (= x__split_fields5 (us_split_fields3 temp___358))))

;; H
  (assert (=> (not (= x__split_fields true)) (= tmp2 tmp)))

;; H
  (assert
  (=> (not (= x__split_fields true))
  (= x__split_fields5 (mk___split_fields1 x__split_fields
                      (mk___rep
                      (mk___split_fields x__split_fields1 x__split_fields2))))))

;; H
  (assert (=> (not (= x__split_fields true)) (= tmp2 tmp1)))

;; H
  (assert
  (=> (not (= x__split_fields true)) (= x__split_fields5 x__split_fields3)))

;; H
  (assert (= tmp3 (mk_int__ref tmp2)))

;; H
  (assert (= x__split_fields6 (mk___split_fields__ref1 x__split_fields5)))

;; H
  (assert (= tmp4 tmp2))

;; H
  (assert (= x__split_fields7 x__split_fields5))

(assert
;; WP_parameter_def
 ;; File "records.adb", line 254, characters 0-0
  (not
  (= (bool_eq1 (mk___rep1 (us_split_fields__content1 x__split_fields6))
     (mk___rep1
     (mk___split_fields1 x__split_fields
     (mk___rep (mk___split_fields x__split_fields2 x__split_fields1))))) true)))
(check-sat)
(exit)
