(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type count_type

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__my_lists__my_lists__list__capacity : count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__my_lists__my_lists__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__my_lists__my_lists__list : us_main_type
}

function us_split_fields_List__projection(a: us_split_fields) : us_main_type =
  (a).rec__my_lists__my_lists__list

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__my_lists__my_lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__my_lists__my_lists__list,
  ((b).us_split_fields1).rec__my_lists__my_lists__list) = true)) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity) = to_rep(((b).us_split_discrs1).rec__my_lists__my_lists__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__my_lists__my_lists__list,
  ((b).us_split_fields1).rec__my_lists__my_lists__list) = true))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

logic my_lists__my_lists__list__capacity__first__bit : int

logic my_lists__my_lists__list__capacity__last__bit : int

logic my_lists__my_lists__list__capacity__position : int

axiom my_lists__my_lists__list__capacity__first__bit_axiom :
  (0 <= my_lists__my_lists__list__capacity__first__bit)

axiom my_lists__my_lists__list__capacity__last__bit_axiom :
  (my_lists__my_lists__list__capacity__first__bit <  my_lists__my_lists__list__capacity__last__bit)

axiom my_lists__my_lists__list__capacity__position_axiom :
  (0 <= my_lists__my_lists__list__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : count_type

logic dummy2 : us_main_type

type list__ref = { list__content : us_rep
}

function list__ref___projection(a: list__ref) : us_rep = (a).list__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

predicate in_range1(rec__my_lists__my_lists__list__capacity1: int,
  a: us_rep) =
  (rec__my_lists__my_lists__list__capacity1 = to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size1({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment1({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

logic my_lists__my_lists__list__capacity__first__bit1 : int

logic my_lists__my_lists__list__capacity__last__bit1 : int

logic my_lists__my_lists__list__capacity__position1 : int

axiom my_lists__my_lists__list__capacity__first__bit_axiom1 :
  (0 <= my_lists__my_lists__list__capacity__first__bit1)

axiom my_lists__my_lists__list__capacity__last__bit_axiom1 :
  (my_lists__my_lists__list__capacity__first__bit1 <  my_lists__my_lists__list__capacity__last__bit1)

axiom my_lists__my_lists__list__capacity__position_axiom1 :
  (0 <= my_lists__my_lists__list__capacity__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy3 : count_type

logic dummy4 : us_main_type

type c_list1__ref = { c_list1__content : us_rep
}

function c_list1__ref___projection(a: c_list1__ref) : us_rep =
  (a).c_list1__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

predicate in_range2(rec__my_lists__my_lists__list__capacity1: int,
  a: us_rep) =
  (rec__my_lists__my_lists__list__capacity1 = to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size2({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment2({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

logic my_lists__my_lists__list__capacity__first__bit2 : int

logic my_lists__my_lists__list__capacity__last__bit2 : int

logic my_lists__my_lists__list__capacity__position2 : int

axiom my_lists__my_lists__list__capacity__first__bit_axiom2 :
  (0 <= my_lists__my_lists__list__capacity__first__bit2)

axiom my_lists__my_lists__list__capacity__last__bit_axiom2 :
  (my_lists__my_lists__list__capacity__first__bit2 <  my_lists__my_lists__list__capacity__last__bit2)

axiom my_lists__my_lists__list__capacity__position_axiom2 :
  (0 <= my_lists__my_lists__list__capacity__position2)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy5 : count_type

logic dummy6 : us_main_type

type c_list2__ref = { c_list2__content : us_rep
}

function c_list2__ref___projection(a: c_list2__ref) : us_rep =
  (a).c_list2__content

predicate in_range3(rec__my_lists__my_lists__list__capacity1: int,
  a: us_rep) =
  (rec__my_lists__my_lists__list__capacity1 = to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size3({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment3({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

logic my_lists__my_lists__list__capacity__first__bit3 : int

logic my_lists__my_lists__list__capacity__last__bit3 : int

logic my_lists__my_lists__list__capacity__position3 : int

axiom my_lists__my_lists__list__capacity__first__bit_axiom3 :
  (0 <= my_lists__my_lists__list__capacity__first__bit3)

axiom my_lists__my_lists__list__capacity__last__bit_axiom3 :
  (my_lists__my_lists__list__capacity__first__bit3 <  my_lists__my_lists__list__capacity__last__bit3)

axiom my_lists__my_lists__list__capacity__position_axiom3 :
  (0 <= my_lists__my_lists__list__capacity__position3)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy7 : count_type

logic dummy8 : us_main_type

type c_list11__ref = { c_list11__content : us_rep
}

function c_list11__ref___projection(a: c_list11__ref) : us_rep =
  (a).c_list11__content

predicate in_range4(rec__my_lists__my_lists__list__capacity1: int,
  a: us_rep) =
  (rec__my_lists__my_lists__list__capacity1 = to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size4({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment4({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

logic my_lists__my_lists__list__capacity__first__bit4 : int

logic my_lists__my_lists__list__capacity__last__bit4 : int

logic my_lists__my_lists__list__capacity__position4 : int

axiom my_lists__my_lists__list__capacity__first__bit_axiom4 :
  (0 <= my_lists__my_lists__list__capacity__first__bit4)

axiom my_lists__my_lists__list__capacity__last__bit_axiom4 :
  (my_lists__my_lists__list__capacity__first__bit4 <  my_lists__my_lists__list__capacity__last__bit4)

axiom my_lists__my_lists__list__capacity__position_axiom4 :
  (0 <= my_lists__my_lists__list__capacity__position4)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy9 : count_type

logic dummy10 : us_main_type

type c_list12__ref = { c_list12__content : us_rep
}

function c_list12__ref___projection(a: c_list12__ref) : us_rep =
  (a).c_list12__content

predicate in_range5(rec__my_lists__my_lists__list__capacity1: int,
  a: us_rep) =
  (rec__my_lists__my_lists__list__capacity1 = to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size5({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment5({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

logic my_lists__my_lists__list__capacity__first__bit5 : int

logic my_lists__my_lists__list__capacity__last__bit5 : int

logic my_lists__my_lists__list__capacity__position5 : int

axiom my_lists__my_lists__list__capacity__first__bit_axiom5 :
  (0 <= my_lists__my_lists__list__capacity__first__bit5)

axiom my_lists__my_lists__list__capacity__last__bit_axiom5 :
  (my_lists__my_lists__list__capacity__first__bit5 <  my_lists__my_lists__list__capacity__last__bit5)

axiom my_lists__my_lists__list__capacity__position_axiom5 :
  (0 <= my_lists__my_lists__list__capacity__position5)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy11 : count_type

logic dummy12 : us_main_type

type c_list21__ref = { c_list21__content : us_rep
}

function c_list21__ref___projection(a: c_list21__ref) : us_rep =
  (a).c_list21__content

predicate in_range6(rec__my_lists__my_lists__list__capacity1: int,
  a: us_rep) =
  (rec__my_lists__my_lists__list__capacity1 = to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity))

logic value__size6 : int

logic object__size6 : us_rep -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size6({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment6({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

logic my_lists__my_lists__list__capacity__first__bit6 : int

logic my_lists__my_lists__list__capacity__last__bit6 : int

logic my_lists__my_lists__list__capacity__position6 : int

axiom my_lists__my_lists__list__capacity__first__bit_axiom6 :
  (0 <= my_lists__my_lists__list__capacity__first__bit6)

axiom my_lists__my_lists__list__capacity__last__bit_axiom6 :
  (my_lists__my_lists__list__capacity__first__bit6 <  my_lists__my_lists__list__capacity__last__bit6)

axiom my_lists__my_lists__list__capacity__position_axiom6 :
  (0 <= my_lists__my_lists__list__capacity__position6)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy13 : count_type

logic dummy14 : us_main_type

type c_list22__ref = { c_list22__content : us_rep
}

function c_list22__ref___projection(a: c_list22__ref) : us_rep =
  (a).c_list22__content

predicate in_range7(rec__my_lists__my_lists__list__capacity1: int,
  a: us_rep) =
  (rec__my_lists__my_lists__list__capacity1 = to_rep(((a).us_split_discrs1).rec__my_lists__my_lists__list__capacity))

logic value__size7 : int

logic object__size7 : us_rep -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size7({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment7({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = a };
  us_split_fields1 = { rec__my_lists__my_lists__list = a1 } })))

logic my_lists__my_lists__list__capacity__first__bit7 : int

logic my_lists__my_lists__list__capacity__last__bit7 : int

logic my_lists__my_lists__list__capacity__position7 : int

axiom my_lists__my_lists__list__capacity__first__bit_axiom7 :
  (0 <= my_lists__my_lists__list__capacity__first__bit7)

axiom my_lists__my_lists__list__capacity__last__bit_axiom7 :
  (my_lists__my_lists__list__capacity__first__bit7 <  my_lists__my_lists__list__capacity__last__bit7)

axiom my_lists__my_lists__list__capacity__position_axiom7 :
  (0 <= my_lists__my_lists__list__capacity__position7)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy15 : count_type

logic dummy16 : us_main_type

type tl1S__ref = { tl1S__content : us_rep
}

function tl1S__ref___projection(a: tl1S__ref) : us_rep = (a).tl1S__content

logic l1__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS : int

logic l2__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic l3__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS2 : int

logic l4__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS3 : int

logic l5__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS4 : int

logic l6__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS5 : int

logic l7__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS6 : int

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__my_lists__my_lists__list = container1 } })].
  ((length({ us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__my_lists__my_lists__list =
  container1 } }) <= to_rep(container)) and in_range(length({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__my_lists__my_lists__list = container1 } }))))

axiom is_empty__post_axiom :
  (forall container:count_type. forall container1:us_main_type [is_empty({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity = container };
  us_split_fields1 = { rec__my_lists__my_lists__list = container1 } })].
  ((is_empty({ us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  container }; us_split_fields1 = { rec__my_lists__my_lists__list =
  container1 } }) = true) <-> (length({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = container }; us_split_fields1 = {
  rec__my_lists__my_lists__list = container1 } }) = 0)))

 (* File "a-contai.ads", line 20, characters 0-0 *)
goal WP_parameter_def :
  (forall l1__split_fields:us_main_type.
  forall l2__split_fields:us_main_type. forall l3__split_fields:us_main_type.
  forall l4__split_fields:us_main_type. forall l5__split_fields:us_main_type.
  forall l6__split_fields:us_main_type. forall l7__split_fields:us_main_type.
  forall us:int. forall result:us_main_type.
  forall l2__split_fields1:us_main_type.
  forall my_lists__my_lists__clear__container__fields:us_main_type.
  forall result1:us_main_type. forall l1__split_fields1:us_main_type.
  forall my_lists__my_lists__clear__container__fields1:us_main_type.
  forall result2:us_main_type. forall l2__split_fields2:us_main_type.
  forall my_lists__my_lists__clear__container__fields2:us_main_type.
  forall result3:us_main_type. forall l3__split_fields1:us_main_type.
  forall my_lists__my_lists__clear__container__fields3:us_main_type.
  forall result4:us_main_type. forall l4__split_fields1:us_main_type.
  forall my_lists__my_lists__clear__container__fields4:us_main_type.
  forall result5:us_main_type. forall l5__split_fields1:us_main_type.
  forall my_lists__my_lists__clear__container__fields5:us_main_type.
  forall result6:us_main_type. forall l6__split_fields1:us_main_type.
  forall my_lists__my_lists__clear__container__fields6:us_main_type.
  forall result7:us_split_fields__ref.
  forall l7__split_fields1:us_split_fields. (((us = 100) and
  in_range(100)) -> (((to_rep(l1__split_discrs) = 100) and (is_empty({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  l1__split_discrs }; us_split_fields1 = { rec__my_lists__my_lists__list =
  l1__split_fields } }) = true)) -> ((100 = to_rep(l1__split_discrs)) ->
  ((((result = l2__split_fields) and
  (l1__split_fields = l2__split_fields1)) and
  (l2__split_discrs = l1__split_discrs)) ->
  ((100 = to_rep(l2__split_discrs)) -> (((to_rep(l3__split_discrs) = 100) and
  (is_empty({ us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  l3__split_discrs }; us_split_fields1 = { rec__my_lists__my_lists__list =
  l3__split_fields } }) = true)) -> ((100 = to_rep(l3__split_discrs)) ->
  (((to_rep(l4__split_discrs) = 100) and (is_empty({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = l4__split_discrs };
  us_split_fields1 = { rec__my_lists__my_lists__list = l4__split_fields }
  }) = true)) -> ((100 = to_rep(l4__split_discrs)) ->
  (((to_rep(l5__split_discrs) = 100) and (is_empty({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = l5__split_discrs };
  us_split_fields1 = { rec__my_lists__my_lists__list = l5__split_fields }
  }) = true)) -> ((100 = to_rep(l5__split_discrs)) ->
  (((to_rep(l6__split_discrs) = 100) and (is_empty({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = l6__split_discrs };
  us_split_fields1 = { rec__my_lists__my_lists__list = l6__split_fields }
  }) = true)) -> ((100 = to_rep(l6__split_discrs)) ->
  (((to_rep(l7__split_discrs) = 100) and (is_empty({ us_split_discrs1 = {
  rec__my_lists__my_lists__list__capacity = l7__split_discrs };
  us_split_fields1 = { rec__my_lists__my_lists__list = l7__split_fields }
  }) = true)) -> ((100 = to_rep(l7__split_discrs)) -> (((length({
  us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  l1__split_discrs }; us_split_fields1 = { rec__my_lists__my_lists__list =
  my_lists__my_lists__clear__container__fields } }) = 0) and
  ((result1 = l1__split_fields) and
  (l1__split_fields1 = my_lists__my_lists__clear__container__fields))) ->
  (((length({ us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  l2__split_discrs }; us_split_fields1 = { rec__my_lists__my_lists__list =
  my_lists__my_lists__clear__container__fields1 } }) = 0) and
  ((result2 = l2__split_fields1) and
  (l2__split_fields2 = my_lists__my_lists__clear__container__fields1))) ->
  (((length({ us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  l3__split_discrs }; us_split_fields1 = { rec__my_lists__my_lists__list =
  my_lists__my_lists__clear__container__fields2 } }) = 0) and
  ((result3 = l3__split_fields) and
  (l3__split_fields1 = my_lists__my_lists__clear__container__fields2))) ->
  (((length({ us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  l4__split_discrs }; us_split_fields1 = { rec__my_lists__my_lists__list =
  my_lists__my_lists__clear__container__fields3 } }) = 0) and
  ((result4 = l4__split_fields) and
  (l4__split_fields1 = my_lists__my_lists__clear__container__fields3))) ->
  (((length({ us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  l5__split_discrs }; us_split_fields1 = { rec__my_lists__my_lists__list =
  my_lists__my_lists__clear__container__fields4 } }) = 0) and
  ((result5 = l5__split_fields) and
  (l5__split_fields1 = my_lists__my_lists__clear__container__fields4))) ->
  (((length({ us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  l6__split_discrs }; us_split_fields1 = { rec__my_lists__my_lists__list =
  my_lists__my_lists__clear__container__fields5 } }) = 0) and
  ((result6 = l6__split_fields) and
  (l6__split_fields1 = my_lists__my_lists__clear__container__fields5))) ->
  (((length({ us_split_discrs1 = { rec__my_lists__my_lists__list__capacity =
  l7__split_discrs }; us_split_fields1 = { rec__my_lists__my_lists__list =
  my_lists__my_lists__clear__container__fields6 } }) = 0) and ((result7 = {
  us_split_fields__content = { rec__my_lists__my_lists__list =
  l7__split_fields } }) and (l7__split_fields1 = {
  rec__my_lists__my_lists__list =
  my_lists__my_lists__clear__container__fields6 }))) ->
  ((to_rep(l1__split_discrs) = 100) -> ((to_rep(l2__split_discrs) = 100) ->
  ((to_rep(l3__split_discrs) = 100) -> ((to_rep(l4__split_discrs) = 100) ->
  (to_rep(l5__split_discrs) = 100))))))))))))))))))))))))))))
