(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__discr__with_default__c : natural
}

function us_split_discrs_4__projection(a: us_split_discrs) : natural =
  (a).rec__discr__with_default__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref_4__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs; attr__constrained : bool
}

function us_rep_8__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_9__projection(a: us_rep) : bool = (a).attr__constrained

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_discrs1).rec__discr__with_default__c) = to_rep(((b).us_split_discrs1).rec__discr__with_default__c)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_discrs1).rec__discr__with_default__c) = to_rep(((b).us_split_discrs1).rec__discr__with_default__c))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:bool. (0 <= object__size({ us_split_discrs1 =
  { rec__discr__with_default__c = a }; attr__constrained = a1 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:bool. (0 <= object__alignment({
  us_split_discrs1 = { rec__discr__with_default__c = a }; attr__constrained =
  a1 })))

logic discr__with_default__c__first__bit : int

logic discr__with_default__c__last__bit : int

logic discr__with_default__c__position : int

axiom discr__with_default__c__first__bit_axiom :
  (0 <= discr__with_default__c__first__bit)

axiom discr__with_default__c__last__bit_axiom :
  (discr__with_default__c__first__bit <  discr__with_default__c__last__bit)

axiom discr__with_default__c__position_axiom :
  (0 <= discr__with_default__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : natural

logic dummy2 : bool

type with_default__ref = { with_default__content : us_rep
}

function with_default__ref___projection(a: with_default__ref) : us_rep =
  (a).with_default__content

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range1(rec__discr__with_default__c1: int, a: us_rep) =
  (rec__discr__with_default__c1 = to_rep(((a).us_split_discrs1).rec__discr__with_default__c))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:natural. forall a1:bool. (0 <= object__size1({ us_split_discrs1 =
  { rec__discr__with_default__c = a }; attr__constrained = a1 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:natural. forall a1:bool. (0 <= object__alignment1({
  us_split_discrs1 = { rec__discr__with_default__c = a }; attr__constrained =
  a1 })))

logic discr__with_default__c__first__bit1 : int

logic discr__with_default__c__last__bit1 : int

logic discr__with_default__c__position1 : int

axiom discr__with_default__c__first__bit_axiom1 :
  (0 <= discr__with_default__c__first__bit1)

axiom discr__with_default__c__last__bit_axiom1 :
  (discr__with_default__c__first__bit1 <  discr__with_default__c__last__bit1)

axiom discr__with_default__c__position_axiom1 :
  (0 <= discr__with_default__c__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy3 : natural

logic dummy4 : bool

type t4b__ref = { t4b__content : us_rep
}

function t4b__ref___projection(a: t4b__ref) : us_rep = (a).t4b__content

logic d__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range2(rec__discr__with_default__c1: int, a: us_rep) =
  (rec__discr__with_default__c1 = to_rep(((a).us_split_discrs1).rec__discr__with_default__c))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural. forall a1:bool. (0 <= object__size2({ us_split_discrs1 =
  { rec__discr__with_default__c = a }; attr__constrained = a1 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural. forall a1:bool. (0 <= object__alignment2({
  us_split_discrs1 = { rec__discr__with_default__c = a }; attr__constrained =
  a1 })))

logic discr__with_default__c__first__bit2 : int

logic discr__with_default__c__last__bit2 : int

logic discr__with_default__c__position2 : int

axiom discr__with_default__c__first__bit_axiom2 :
  (0 <= discr__with_default__c__first__bit2)

axiom discr__with_default__c__last__bit_axiom2 :
  (discr__with_default__c__first__bit2 <  discr__with_default__c__last__bit2)

axiom discr__with_default__c__position_axiom2 :
  (0 <= discr__with_default__c__position2)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy5 : natural

logic dummy6 : bool

type td1S__ref = { td1S__content : us_rep
}

function td1S__ref___projection(a: td1S__ref) : us_rep = (a).td1S__content

logic d1__split_discrs : natural

logic d1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic d2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate in_range3(rec__discr__with_default__c1: int, a: us_rep) =
  (rec__discr__with_default__c1 = to_rep(((a).us_split_discrs1).rec__discr__with_default__c))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:natural. forall a1:bool. (0 <= object__size3({ us_split_discrs1 =
  { rec__discr__with_default__c = a }; attr__constrained = a1 })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:natural. forall a1:bool. (0 <= object__alignment3({
  us_split_discrs1 = { rec__discr__with_default__c = a }; attr__constrained =
  a1 })))

logic discr__with_default__c__first__bit3 : int

logic discr__with_default__c__last__bit3 : int

logic discr__with_default__c__position3 : int

axiom discr__with_default__c__first__bit_axiom3 :
  (0 <= discr__with_default__c__first__bit3)

axiom discr__with_default__c__last__bit_axiom3 :
  (discr__with_default__c__first__bit3 <  discr__with_default__c__last__bit3)

axiom discr__with_default__c__position_axiom3 :
  (0 <= discr__with_default__c__position3)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy7 : natural

logic dummy8 : bool

type t5b__ref = { t5b__content : us_rep
}

function t5b__ref___projection(a: t5b__ref) : us_rep = (a).t5b__content

predicate in_range4(rec__discr__with_default__c1: int, a: us_rep) =
  (rec__discr__with_default__c1 = to_rep(((a).us_split_discrs1).rec__discr__with_default__c))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:natural. forall a1:bool. (0 <= object__size4({ us_split_discrs1 =
  { rec__discr__with_default__c = a }; attr__constrained = a1 })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:natural. forall a1:bool. (0 <= object__alignment4({
  us_split_discrs1 = { rec__discr__with_default__c = a }; attr__constrained =
  a1 })))

logic discr__with_default__c__first__bit4 : int

logic discr__with_default__c__last__bit4 : int

logic discr__with_default__c__position4 : int

axiom discr__with_default__c__first__bit_axiom4 :
  (0 <= discr__with_default__c__first__bit4)

axiom discr__with_default__c__last__bit_axiom4 :
  (discr__with_default__c__first__bit4 <  discr__with_default__c__last__bit4)

axiom discr__with_default__c__position_axiom4 :
  (0 <= discr__with_default__c__position4)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy9 : natural

logic dummy10 : bool

type t6b__ref = { t6b__content : us_rep
}

function t6b__ref___projection(a: t6b__ref) : us_rep = (a).t6b__content

predicate in_range5(rec__discr__with_default__c1: int, a: us_rep) =
  (rec__discr__with_default__c1 = to_rep(((a).us_split_discrs1).rec__discr__with_default__c))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:natural. forall a1:bool. (0 <= object__size5({ us_split_discrs1 =
  { rec__discr__with_default__c = a }; attr__constrained = a1 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:natural. forall a1:bool. (0 <= object__alignment5({
  us_split_discrs1 = { rec__discr__with_default__c = a }; attr__constrained =
  a1 })))

logic discr__with_default__c__first__bit5 : int

logic discr__with_default__c__last__bit5 : int

logic discr__with_default__c__position5 : int

axiom discr__with_default__c__first__bit_axiom5 :
  (0 <= discr__with_default__c__first__bit5)

axiom discr__with_default__c__last__bit_axiom5 :
  (discr__with_default__c__first__bit5 <  discr__with_default__c__last__bit5)

axiom discr__with_default__c__position_axiom5 :
  (0 <= discr__with_default__c__position5)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy11 : natural

logic dummy12 : bool

type t7b__ref = { t7b__content : us_rep
}

function t7b__ref___projection(a: t7b__ref) : us_rep = (a).t7b__content

 (* File "discr.adb", line 4, characters 0-0 *)
goal WP_parameter_def :
  (forall d__split_discrs:natural. forall d2__split_discrs:natural.
  forall o:natural. forall o1:natural. forall discr__r2__d__assume:natural.
  forall discr__r2__d__assume1:bool. forall us:int. forall o2:natural.
  forall o3:natural. forall temp___272:natural. forall temp___2721:bool.
  forall usq_:natural. forall usq_1:bool. forall temp___274:natural.
  forall temp___2741:bool. forall o4:natural. forall o5:natural.
  forall temp___275:natural. forall temp___2751:bool. forall result:natural.
  forall d__split_discrs1:natural. forall result1:natural.
  forall d__split_discrs2:natural. (in_range(c) -> (((((to_rep(o) = c) and
  (o = o1)) and ((discr__r2__d__assume = o1) and
  (true = discr__r2__d__assume1))) and (((result = d__split_discrs) and
  (discr__r2__d__assume = d__split_discrs1)) and
  (d__attr__constrained = false))) -> (((us = c) and in_range(c)) ->
  (((d1__attr__constrained = true) and (to_rep(d1__split_discrs) = c)) ->
  (((c = to_rep(d1__split_discrs)) and (d1__attr__constrained = true)) ->
  (((d2__attr__constrained = false) and (to_rep(d2__split_discrs) = 0)) ->
  ((not (d__attr__constrained = true)) -> ((d1__attr__constrained = true) ->
  ((bool_eq2({ us_split_discrs1 = { rec__discr__with_default__c =
  d__split_discrs1 }; attr__constrained = d__attr__constrained }, {
  us_split_discrs1 = { rec__discr__with_default__c = d1__split_discrs };
  attr__constrained = d1__attr__constrained }) = true) ->
  (((((((to_rep(o2) = c) and (o2 = o3)) and ((temp___272 = o3) and
  (true = temp___2721))) and ((((d__attr__constrained = true) and
  (temp___272 = d__split_discrs1)) or
  (not (d__attr__constrained = true))) and ((usq_ = temp___272) and
  (usq_1 = temp___2721)))) and ((usq_ = temp___274) and
  (d__attr__constrained = temp___2741))) and
  ((result1 = d__split_discrs1) and (temp___274 = d__split_discrs2))) ->
  ((((to_rep(o4) = 0) and (o4 = o5)) and ((temp___275 = o5) and
  (true = temp___2751))) -> ((d__attr__constrained = true) ->
  (temp___275 = d__split_discrs2))))))))))))))
