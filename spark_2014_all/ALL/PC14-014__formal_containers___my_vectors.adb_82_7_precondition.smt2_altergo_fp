(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type index_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_type, index_type -> bool

logic dummy2 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index

predicate in_range4(x: int) = ((0 <= x) and (x <= 11))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : extended_index, extended_index -> bool

logic dummy3 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

type capacity_range

predicate in_range5(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : capacity_range, capacity_range -> bool

logic dummy4 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__my_vectors__v__vector__capacity :
capacity_range
}

function us_split_discrs___projection(a: us_split_discrs) : capacity_range =
  (a).rec__my_vectors__v__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__my_vectors__v__vector : us_main_type
}

function us_split_fields_Vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__my_vectors__v__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = a };
  us_split_fields1 = { rec__my_vectors__v__vector = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = a };
  us_split_fields1 = { rec__my_vectors__v__vector = a1 } })))

logic my_vectors__v__vector__capacity__first__bit : int

logic my_vectors__v__vector__capacity__last__bit : int

logic my_vectors__v__vector__capacity__position : int

axiom my_vectors__v__vector__capacity__first__bit_axiom :
  (0 <= my_vectors__v__vector__capacity__first__bit)

axiom my_vectors__v__vector__capacity__last__bit_axiom :
  (my_vectors__v__vector__capacity__first__bit <  my_vectors__v__vector__capacity__last__bit)

axiom my_vectors__v__vector__capacity__position_axiom :
  (0 <= my_vectors__v__vector__capacity__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : capacity_range

logic dummy6 : us_main_type

type vector__ref = { vector__content : us_rep
}

function vector__ref___projection(a: vector__ref) : us_rep =
  (a).vector__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic to_rep : capacity_range -> int

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range5(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range5(x) ->
  (to_rep(of_rep(x)) = x)))

logic capacity__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
  us_split_fields1 = { rec__my_vectors__v__vector = container1 } })].
  ((((of_int(0) = true) -> (length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }) <= to_rep(container))) and
  ((not (of_int(0) = true)) -> (length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }) <= 10))) and
  in_range5(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq7 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref___projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic length1 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

logic last__function_guard : int, us_rep1 -> prop

logic model__ : us_rep -> us_rep1

logic model____function_guard : us_rep1, us_rep -> prop

logic last_index__function_guard : int, us_rep -> prop

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom is_empty__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type
  [is_empty({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  container }; us_split_fields1 = { rec__my_vectors__v__vector = container1 }
  })]. ((is_empty({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }) = true) <-> (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
  us_split_fields1 = { rec__my_vectors__v__vector = container1 } }) = 0)))

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

logic copy : us_rep, int -> us_rep

logic copy__function_guard : us_rep, us_rep, int -> prop

axiom copy__post_axiom :
  (forall source:capacity_range. forall source1:us_main_type.
  (forall capacity:int [copy({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = source }; us_split_fields1 = {
  rec__my_vectors__v__vector = source1 } }, capacity)].
  ((in_range5(capacity) and ((of_int(0) = true) -> ((capacity = 0) or
  (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  source }; us_split_fields1 = { rec__my_vectors__v__vector = source1 }
  }) <= capacity)))) -> ((((bool_eq1(length1(model__(copy({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = source };
  us_split_fields1 = { rec__my_vectors__v__vector = source1 } }, capacity))),
  length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = source }; us_split_fields1 = {
  rec__my_vectors__v__vector = source1 } }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__(copy({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = source };
  us_split_fields1 = { rec__my_vectors__v__vector = source1 } },
  capacity)))))) -> (get(model__(copy({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = source }; us_split_fields1 = {
  rec__my_vectors__v__vector = source1 } }, capacity)), n) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = source };
  us_split_fields1 = { rec__my_vectors__v__vector = source1 } }), n))))) and
  (not (bool_eq1(length1(model__(copy({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = source }; us_split_fields1 = {
  rec__my_vectors__v__vector = source1 } }, capacity))), length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = source };
  us_split_fields1 = { rec__my_vectors__v__vector = source1 }
  }))) = false))) and (((capacity = 0) -> (to_rep(((copy({ us_split_discrs1 =
  { rec__my_vectors__v__vector__capacity = source }; us_split_fields1 = {
  rec__my_vectors__v__vector = source1 } },
  capacity)).us_split_discrs1).rec__my_vectors__v__vector__capacity) = length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = source };
  us_split_fields1 = { rec__my_vectors__v__vector = source1 } }))) and
  ((not (capacity = 0)) -> (to_rep(((copy({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = source }; us_split_fields1 = {
  rec__my_vectors__v__vector = source1 } },
  capacity)).us_split_discrs1).rec__my_vectors__v__vector__capacity) = capacity)))))))

logic equal_except__function_guard : bool, us_rep1, us_rep1, int -> prop

logic first_index__function_guard : int, us_rep -> prop

logic range_equal__function_guard : bool, us_rep1, us_rep1, int, int -> prop

logic range_shifted__function_guard : bool, us_rep1, us_rep1, int, int,
  int -> prop

logic constant_range__function_guard : bool, us_rep1, int, int, int -> prop

logic olt__function_guard : bool, us_rep1, us_rep1 -> prop

logic ole__function_guard : bool, us_rep1, us_rep1 -> prop

logic m_elements_reversed__function_guard : bool, us_rep1, us_rep1 -> prop

logic equal_except__2__function_guard : bool, us_rep1, us_rep1, int,
  int -> prop

logic m_elements_swapped__function_guard : bool, us_rep1, us_rep1, int,
  int -> prop

logic find_index : us_rep, int, int -> int

logic find_index__function_guard : int, us_rep, int, int -> prop

type element_type

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : element_type, element_type -> bool

logic dummy8 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic contains__function_guard : bool, us_rep1, int, int, int -> prop

axiom find_index__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type.
  (forall item:int. forall index:int [find_index({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }, item, index)].
  ((in_range6(item) and in_range3(index)) -> ((((((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
  us_split_fields1 = { rec__my_vectors__v__vector = container1 }
  }))) <  index) or
  (not (exists i:int. (((index <= i) and (i <= (0 + length1(model__({
       us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container
       }; us_split_fields1 = { rec__my_vectors__v__vector = container1 }
       }))))) and (get(model__({ us_split_discrs1 = {
       rec__my_vectors__v__vector__capacity = container }; us_split_fields1 =
       { rec__my_vectors__v__vector = container1 } }), i) = item))))) ->
  (find_index({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  container }; us_split_fields1 = { rec__my_vectors__v__vector = container1 }
  }, item, index) = 0)) and ((not (((0 + length1(model__({ us_split_discrs1 =
  { rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }))) <  index) or
  (not (exists i:int. (((index <= i) and (i <= (0 + length1(model__({
       us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container
       }; us_split_fields1 = { rec__my_vectors__v__vector = container1 }
       }))))) and (get(model__({ us_split_discrs1 = {
       rec__my_vectors__v__vector__capacity = container }; us_split_fields1 =
       { rec__my_vectors__v__vector = container1 } }), i) = item)))))) ->
  ((((index <= find_index({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }, item, index)) and
  (find_index({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  container }; us_split_fields1 = { rec__my_vectors__v__vector = container1 }
  }, item, index) <= (0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }))))) and (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
  us_split_fields1 = { rec__my_vectors__v__vector = container1 } }),
  find_index({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  container }; us_split_fields1 = { rec__my_vectors__v__vector = container1 }
  }, item, index)) = item)) and
  (not (exists i:int. (((index <= i) and (i <= (find_index({
       us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container
       }; us_split_fields1 = { rec__my_vectors__v__vector = container1 } },
       item, index) - 1))) and (get(model__({ us_split_discrs1 = {
       rec__my_vectors__v__vector__capacity = container }; us_split_fields1 =
       { rec__my_vectors__v__vector = container1 } }), i) = item))))))) and
  in_range4(find_index({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }, item, index))))))

logic reverse_find_index : us_rep, int, int -> int

logic reverse_find_index__function_guard : int, us_rep, int, int -> prop

axiom reverse_find_index__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type.
  (forall item:int. forall index:int [reverse_find_index({ us_split_discrs1 =
  { rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }, item, index)].
  ((in_range6(item) and in_range3(index)) ->
  ((((not (exists i:int. (((1 <= i) and (((index <= (0 + length1(model__({
          us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
          container }; us_split_fields1 = { rec__my_vectors__v__vector =
          container1 } })))) -> (i <= index)) and
          ((not (index <= (0 + length1(model__({ us_split_discrs1 = {
          rec__my_vectors__v__vector__capacity = container };
          us_split_fields1 = { rec__my_vectors__v__vector = container1 }
          }))))) -> (i <= (0 + length1(model__({ us_split_discrs1 = {
          rec__my_vectors__v__vector__capacity = container };
          us_split_fields1 = { rec__my_vectors__v__vector = container1 }
          }))))))) and (get(model__({ us_split_discrs1 = {
          rec__my_vectors__v__vector__capacity = container };
          us_split_fields1 = { rec__my_vectors__v__vector = container1 } }),
          i) = item)))) ->
  (reverse_find_index({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }, item, index) = 0)) and
  ((exists i:int. (((1 <= i) and (((index <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
   us_split_fields1 = { rec__my_vectors__v__vector = container1 } })))) and
   (i <= index)) or ((not (index <= (0 + length1(model__({ us_split_discrs1 =
   { rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
   rec__my_vectors__v__vector = container1 } }))))) and
   (i <= (0 + length1(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
   rec__my_vectors__v__vector = container1 } }))))))) and (get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
   us_split_fields1 = { rec__my_vectors__v__vector = container1 } }),
   i) = item))) ->
  (((((1 <= reverse_find_index({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }, item, index)) and
  (reverse_find_index({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }, item, index) <= index)) and
  (reverse_find_index({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }, item,
  index) <= (0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }))))) and (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
  us_split_fields1 = { rec__my_vectors__v__vector = container1 } }),
  reverse_find_index({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }, item, index)) = item)) and
  (not (exists i:int. ((((reverse_find_index({ us_split_discrs1 = {
       rec__my_vectors__v__vector__capacity = container }; us_split_fields1 =
       { rec__my_vectors__v__vector = container1 } }, item,
       index) + 1) <= i) and (((index <= (0 + length1(model__({
       us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container
       }; us_split_fields1 = { rec__my_vectors__v__vector = container1 }
       })))) and (i <= index)) or ((not (index <= (0 + length1(model__({
       us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container
       }; us_split_fields1 = { rec__my_vectors__v__vector = container1 }
       }))))) and (i <= (0 + length1(model__({ us_split_discrs1 = {
       rec__my_vectors__v__vector__capacity = container }; us_split_fields1 =
       { rec__my_vectors__v__vector = container1 } }))))))) and
       (get(model__({ us_split_discrs1 = {
       rec__my_vectors__v__vector__capacity = container }; us_split_fields1 =
       { rec__my_vectors__v__vector = container1 } }), i) = item))))))) and
  in_range4(reverse_find_index({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }, item, index))))))

logic is_sorted : us_rep -> bool

logic is_sorted__function_guard : bool, us_rep -> prop

logic m_elements_sorted__function_guard : bool, us_rep1 -> prop

axiom is_sorted__post_axiom :
  (forall container:capacity_range. forall container1:us_main_type
  [is_sorted({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  container }; us_split_fields1 = { rec__my_vectors__v__vector = container1 }
  })]. ((is_sorted({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }) = true) <->
  (forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
  us_split_fields1 = { rec__my_vectors__v__vector = container1 } }))))) ->
  (forall j:int. (((i <= j) and (j <= (0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
  us_split_fields1 = { rec__my_vectors__v__vector = container1 } }))))) ->
  ((get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  container }; us_split_fields1 = { rec__my_vectors__v__vector = container1 }
  }), i) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }), j)) or (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
  us_split_fields1 = { rec__my_vectors__v__vector = container1 } }),
  i) <  get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } }), j)))))))))

logic m_elements_included__function_guard : bool, us_rep1, int, int, us_rep1,
  int, int -> prop

logic m_elements_in_union__function_guard : bool, us_rep1, us_rep1,
  us_rep1 -> prop

predicate in_range7(rec__my_vectors__v__vector__capacity1: int, a: us_rep) =
  (rec__my_vectors__v__vector__capacity1 = to_rep(((a).us_split_discrs1).rec__my_vectors__v__vector__capacity))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size2({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = a };
  us_split_fields1 = { rec__my_vectors__v__vector = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = a }; us_split_fields1 = {
  rec__my_vectors__v__vector = a1 } })))

logic my_vectors__v__vector__capacity__first__bit1 : int

logic my_vectors__v__vector__capacity__last__bit1 : int

logic my_vectors__v__vector__capacity__position1 : int

axiom my_vectors__v__vector__capacity__first__bit_axiom1 :
  (0 <= my_vectors__v__vector__capacity__first__bit1)

axiom my_vectors__v__vector__capacity__last__bit_axiom1 :
  (my_vectors__v__vector__capacity__first__bit1 <  my_vectors__v__vector__capacity__last__bit1)

axiom my_vectors__v__vector__capacity__position_axiom1 :
  (0 <= my_vectors__v__vector__capacity__position1)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy9 : capacity_range

logic dummy10 : us_main_type

type tlS__ref = { tlS__content : us_rep
}

function tlS__ref___projection(a: tlS__ref) : us_rep = (a).tlS__content

logic l__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range8(rec__my_vectors__v__vector__capacity1: int, a: us_rep) =
  (rec__my_vectors__v__vector__capacity1 = to_rep(((a).us_split_discrs1).rec__my_vectors__v__vector__capacity))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:capacity_range. forall a1:us_main_type. (0 <= object__size3({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = a };
  us_split_fields1 = { rec__my_vectors__v__vector = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:capacity_range. forall a1:us_main_type.
  (0 <= object__alignment3({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = a }; us_split_fields1 = {
  rec__my_vectors__v__vector = a1 } })))

logic my_vectors__v__vector__capacity__first__bit2 : int

logic my_vectors__v__vector__capacity__last__bit2 : int

logic my_vectors__v__vector__capacity__position2 : int

axiom my_vectors__v__vector__capacity__first__bit_axiom2 :
  (0 <= my_vectors__v__vector__capacity__first__bit2)

axiom my_vectors__v__vector__capacity__last__bit_axiom2 :
  (my_vectors__v__vector__capacity__first__bit2 <  my_vectors__v__vector__capacity__last__bit2)

axiom my_vectors__v__vector__capacity__position_axiom2 :
  (0 <= my_vectors__v__vector__capacity__position2)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy11 : capacity_range

logic dummy12 : us_main_type

type tkS__ref = { tkS__content : us_rep
}

function tkS__ref___projection(a: tkS__ref) : us_rep = (a).tkS__content

logic k__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic i__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS3 : int

type count_type

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : count_type, count_type -> bool

logic dummy13 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq6(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length1(a), length1(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length1(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq6(a, b) = match_bool(bool_eq1(length1(a), length1(b)), false,
  false)))))

axiom model____post_axiom :
  (forall container:capacity_range. forall container1:us_main_type [model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = container };
  us_split_fields1 = { rec__my_vectors__v__vector = container1 } })].
  (length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } })) = length({ us_split_discrs1 =
  { rec__my_vectors__v__vector__capacity = container }; us_split_fields1 = {
  rec__my_vectors__v__vector = container1 } })))

type extended_index1

predicate in_range10(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : extended_index1, extended_index1 -> bool

logic dummy14 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

axiom length__post_axiom1 :
  (forall container:us_rep1 [length1(container)].
  (((0 + length1(container)) <= 10) and in_range9(length1(container))))

type element_type1

predicate in_range11(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq12 : element_type1, element_type1 -> bool

logic dummy15 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)]. ((in_range10(position) and
  ((1 <= position) and (position <= (0 + length1(container))))) ->
  in_range11(get(container, position)))))

 (* File "a-cofove.ads", line 855, characters 0-0 *)
goal WP_parameter_def :
  (forall l__split_fields:us_main_type. forall k__split_fields:us_main_type.
  forall c:int. forall i__split_fields:us_main_type. forall us:int.
  forall us1:int. forall o:int. forall o1:int. forall o2:int. forall o3:int.
  forall o4:int. forall o5:int. forall o6:int.
  forall my_vectors__test_vectors__B_1__i__assume:capacity_range.
  forall my_vectors__test_vectors__B_1__i__assume1:us_main_type.
  forall o7:int. forall o8:int. forall o9:int. forall o10:int.
  forall o11:int. forall o12:int. forall o13:int. forall o14:int.
  forall o15:int. forall o16:int. forall o17:int. forall o18:int.
  forall o19:int. forall o20:int. forall o21:int. forall o22:int.
  forall o23:int. forall o24:int. forall o25:int. forall o26:int.
  forall result:int. forall c1:int.
  forall my_vectors__v__append__2__container__fields:us_main_type.
  forall result1:us_main_type. forall l__split_fields1:us_main_type.
  forall my_vectors__v__append__3__container__fields:us_main_type.
  forall result2:us_main_type. forall l__split_fields2:us_main_type.
  forall my_vectors__v__delete_last__container__fields:us_main_type.
  forall result3:us_main_type. forall l__split_fields3:us_main_type.
  forall my_vectors__v__delete_last__2__container__fields:us_main_type.
  forall result4:us_main_type. forall l__split_fields4:us_main_type.
  forall my_vectors__v__delete_last__2__container__fields1:us_main_type.
  forall result5:us_main_type. forall l__split_fields5:us_main_type.
  forall my_vectors__v__clear__container__fields:us_main_type.
  forall result6:us_main_type. forall l__split_fields6:us_main_type.
  forall my_vectors__v__prepend__2__container__fields:us_main_type.
  forall result7:us_main_type. forall l__split_fields7:us_main_type.
  forall my_vectors__v__prepend__3__container__fields:us_main_type.
  forall result8:us_main_type. forall l__split_fields8:us_main_type.
  forall my_vectors__v__delete_first__container__fields:us_split_fields.
  forall result9:us_split_fields__ref.
  forall l__split_fields9:us_split_fields.
  forall my_vectors__v__delete_first__2__container__fields:us_split_fields.
  forall result10:us_split_fields__ref.
  forall l__split_fields10:us_split_fields.
  forall my_vectors__v__delete_first__2__container__fields1:us_split_fields.
  forall result11:us_split_fields__ref.
  forall l__split_fields11:us_split_fields.
  forall my_vectors__v__clear__container__fields1:us_split_fields.
  forall result12:us_split_fields__ref.
  forall l__split_fields12:us_split_fields. forall result13:int__ref.
  forall c2:int.
  forall my_vectors__v__insert__2__container__fields:us_split_fields.
  forall result14:us_split_fields__ref.
  forall l__split_fields13:us_split_fields.
  forall my_vectors__v__insert__3__container__fields:us_split_fields.
  forall result15:us_split_fields__ref.
  forall l__split_fields14:us_split_fields. forall result16:int__ref.
  forall c3:int.
  forall my_vectors__v__insert__2__container__fields1:us_split_fields.
  forall result17:us_split_fields__ref.
  forall l__split_fields15:us_split_fields.
  forall my_vectors__v__insert__3__container__fields1:us_split_fields.
  forall result18:us_split_fields__ref.
  forall l__split_fields16:us_split_fields.
  forall result19:us_split_fields__ref.
  forall i__split_fields1:us_split_fields.
  forall i__split_fields2:us_split_fields.
  forall my_vectors__v__move__target__fields:us_split_fields.
  forall result20:us_split_fields__ref.
  forall k__split_fields1:us_split_fields.
  forall my_vectors__v__delete__2__container__fields:us_split_fields.
  forall result21:us_split_fields__ref.
  forall l__split_fields17:us_split_fields.
  forall my_vectors__v__delete__container__fields:us_split_fields.
  forall result22:us_split_fields__ref.
  forall l__split_fields18:us_split_fields.
  forall my_vectors__v__delete__2__container__fields1:us_split_fields.
  forall result23:us_split_fields__ref.
  forall l__split_fields19:us_split_fields.
  forall my_vectors__v__delete__2__container__fields2:us_split_fields.
  forall result24:us_split_fields__ref.
  forall l__split_fields20:us_split_fields.
  forall my_vectors__v__clear__container__fields2:us_split_fields.
  forall result25:us_split_fields__ref.
  forall l__split_fields21:us_split_fields. forall result26:int__ref.
  forall c4:int.
  forall my_vectors__v__delete_first__2__container__fields2:us_split_fields.
  forall result27:us_split_fields__ref.
  forall k__split_fields2:us_split_fields.
  forall my_vectors__v__insert__container__fields:us_split_fields.
  forall result28:us_split_fields__ref.
  forall k__split_fields3:us_split_fields.
  forall my_vectors__v__insert__container__fields1:us_split_fields.
  forall result29:us_split_fields__ref.
  forall l__split_fields22:us_split_fields.
  forall my_vectors__v__insert__container__fields2:us_split_fields.
  forall result30:us_split_fields__ref.
  forall l__split_fields23:us_split_fields. forall result31:int__ref.
  forall c5:int.
  forall my_vectors__v__delete_last__2__container__fields2:us_split_fields.
  forall result32:us_split_fields__ref.
  forall l__split_fields24:us_split_fields.
  forall my_vectors__v__insert__container__fields3:us_split_fields.
  forall result33:us_split_fields__ref.
  forall k__split_fields4:us_split_fields.
  forall my_vectors__v__clear__container__fields3:us_split_fields.
  forall result34:us_split_fields__ref.
  forall l__split_fields25:us_split_fields. forall result35:int__ref.
  forall c6:int.
  forall my_vectors__v__insert__2__container__fields2:us_split_fields.
  forall result36:us_split_fields__ref.
  forall l__split_fields26:us_split_fields.
  forall my_vectors__v__insert__3__container__fields2:us_split_fields.
  forall result37:us_split_fields__ref.
  forall l__split_fields27:us_split_fields. forall result38:int__ref.
  forall c7:int.
  forall my_vectors__v__insert__2__container__fields3:us_split_fields.
  forall result39:us_split_fields__ref.
  forall l__split_fields28:us_split_fields.
  forall my_vectors__v__insert__3__container__fields3:us_split_fields.
  forall result40:us_split_fields__ref.
  forall l__split_fields29:us_split_fields.
  forall my_vectors__v__insert__3__container__fields4:us_split_fields.
  forall result41:us_split_fields__ref.
  forall l__split_fields30:us_split_fields. (((us = 1) and in_range5(1)) ->
  (((to_rep(l__split_discrs) = 1) and (is_empty({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields }
  }) = true)) -> ((1 = to_rep(l__split_discrs)) -> (((us1 = 1) and
  in_range5(1)) -> (((to_rep(k__split_discrs) = 1) and (is_empty({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = k__split_fields }
  }) = true)) -> ((1 = to_rep(k__split_discrs)) -> (((result = c) and
  (c1 = 0)) -> (in_range2(c1) -> ((is_empty({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields }
  }) = true) -> (((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__append__2__container__fields } }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields }
  }) + 1)) and ((bool_lt(length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields } })),
  length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__append__2__container__fields } }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields }
  }))))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__append__2__container__fields } }), n)))))) and
  (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__append__2__container__fields } }), ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields }
  }))) + 1)) = 10)) and (({ us_split_fields__content = {
  rec__my_vectors__v__vector = result1 } } = { us_split_fields__content = {
  rec__my_vectors__v__vector = l__split_fields } }) and ({
  rec__my_vectors__v__vector = l__split_fields1 } = {
  rec__my_vectors__v__vector = my_vectors__v__append__2__container__fields
  }))) -> (((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__append__3__container__fields } }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields1 }
  }) + 4)) and ((bool_le(length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields1 } })),
  length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__append__3__container__fields } }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields1 }
  }))))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields1 } }),
  n) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__append__3__container__fields } }), n)))))) and ((0 <  4) ->
  (forall i:int. (((((0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields1 }
  }))) + 1) <= i) and (i <= ((0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields1 }
  }))) + 4))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__append__3__container__fields } }), i) = 9))))) and
  ((result2 = l__split_fields1) and ({ rec__my_vectors__v__vector =
  l__split_fields2 } = { rec__my_vectors__v__vector =
  my_vectors__v__append__3__container__fields }))) -> ((((length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__container__fields } }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields2 }
  }) - 1)) and ((bool_lt(length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__container__fields } })), length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields2 }
  }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__container__fields } }))))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__container__fields } }), n) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields2 } }),
  n)))))) and ((result3 = l__split_fields2) and ({
  rec__my_vectors__v__vector = l__split_fields3 } = {
  rec__my_vectors__v__vector = my_vectors__v__delete_last__container__fields
  }))) -> ((3 <  length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields3 } })) ->
  (((((bool_le(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields3 } }),
  3) = true) and (length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields } }) = 0)) or
  ((not (bool_le(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields3 } }),
  3) = true)) and ((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields } }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields3 }
  }) - 3)) and ((bool_le(length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields } })), length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields3 }
  }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields } }))))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields } }), n) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields3 } }),
  n)))))))) and ((result4 = l__split_fields3) and ({
  rec__my_vectors__v__vector = l__split_fields4 } = {
  rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields }))) -> ((length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields4 }
  }) <= 3) -> (((((bool_le(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields4 } }),
  3) = true) and (length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields1 } }) = 0)) or
  ((not (bool_le(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields4 } }),
  3) = true)) and ((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields1 } }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields4 }
  }) - 3)) and ((bool_le(length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields1 } })), length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields4 }
  }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields1 } }))))) ->
  (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields1 } }), n) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields4 } }),
  n)))))))) and ((result5 = l__split_fields4) and ({
  rec__my_vectors__v__vector = l__split_fields5 } = {
  rec__my_vectors__v__vector =
  my_vectors__v__delete_last__2__container__fields1 }))) -> (((length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__clear__container__fields } }) = 0) and
  ((result6 = l__split_fields5) and ({ rec__my_vectors__v__vector =
  l__split_fields6 } = { rec__my_vectors__v__vector =
  my_vectors__v__clear__container__fields }))) -> (((((length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__prepend__2__container__fields } }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields6 }
  }) + 1)) and (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__prepend__2__container__fields } }), 1) = 10)) and
  ((forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = { rec__my_vectors__v__vector =
   l__split_fields6 } }))))) -> (get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields6 } }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = { rec__my_vectors__v__vector =
   my_vectors__v__prepend__2__container__fields } }), (i + 1))))) and
  (forall i:int. ((((1 + 1) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields6 }
  }))) + 1))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields6 } }),
  (i - 1)) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__prepend__2__container__fields } }), i)))))) and
  ((result7 = l__split_fields6) and ({ rec__my_vectors__v__vector =
  l__split_fields7 } = { rec__my_vectors__v__vector =
  my_vectors__v__prepend__2__container__fields }))) -> (((((length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__prepend__3__container__fields } }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields7 }
  }) + 4)) and
  (forall i:int. (((1 <= i) and (i <= (1 + (4 - 1)))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__prepend__3__container__fields } }), i) = 9)))) and
  ((forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = { rec__my_vectors__v__vector =
   l__split_fields7 } }))))) -> (get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields7 } }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = { rec__my_vectors__v__vector =
   my_vectors__v__prepend__3__container__fields } }), (i + 4))))) and
  (forall i:int. ((((1 + 4) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields7 }
  }))) + 4))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields7 } }),
  (i - 4)) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__v__prepend__3__container__fields } }), i)))))) and
  ((result8 = l__split_fields7) and ({ rec__my_vectors__v__vector =
  l__split_fields8 } = { rec__my_vectors__v__vector =
  my_vectors__v__prepend__3__container__fields }))) -> ((((length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__container__fields
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = { rec__my_vectors__v__vector =
  l__split_fields8 } }) - 1)) and
  ((forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete_first__container__fields }))))) -> (get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete_first__container__fields }), i) = get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = { rec__my_vectors__v__vector =
   l__split_fields8 } }), (i + 1))))) and
  (forall i:int. ((((1 + 1) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__container__fields
  }))) + 1))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete_first__container__fields }),
  (i - 1)) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = { rec__my_vectors__v__vector = l__split_fields8 } }),
  i)))))) and ((result9 = { us_split_fields__content = {
  rec__my_vectors__v__vector = l__split_fields8 } }) and
  (l__split_fields9 = my_vectors__v__delete_first__container__fields))) ->
  ((3 <  length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields9 })) ->
  (((((bool_le(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields9 }), 3) = true) and (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__2__container__fields
  }) = 0)) or ((not (bool_le(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields9 }), 3) = true)) and ((length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__2__container__fields
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields9 }) - 3)) and
  ((forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete_first__2__container__fields }))))) -> (get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete_first__2__container__fields }), i) = get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields9 }), (i + 3))))) and
  (forall i:int. ((((1 + 3) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__2__container__fields
  }))) + 3))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete_first__2__container__fields }),
  (i - 3)) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields9 }), i)))))))) and ((result10 = {
  us_split_fields__content = l__split_fields9 }) and
  (l__split_fields10 = my_vectors__v__delete_first__2__container__fields))) ->
  ((length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields10 }) <= 3) ->
  (((((bool_le(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields10 }), 3) = true) and (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__2__container__fields1
  }) = 0)) or ((not (bool_le(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields10 }), 3) = true)) and ((length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__2__container__fields1
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields10 }) - 3)) and
  ((forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete_first__2__container__fields1 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete_first__2__container__fields1 }), i) = get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields10 }), (i + 3))))) and
  (forall i:int. ((((1 + 3) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__2__container__fields1
  }))) + 3))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete_first__2__container__fields1 }),
  (i - 3)) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields10 }), i)))))))) and ((result11 = {
  us_split_fields__content = l__split_fields10 }) and
  (l__split_fields11 = my_vectors__v__delete_first__2__container__fields1))) ->
  (((length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__clear__container__fields1 }) = 0) and ((result12 = {
  us_split_fields__content = l__split_fields11 }) and
  (l__split_fields12 = my_vectors__v__clear__container__fields1))) ->
  (((result13 = { int__content = c1 }) and (c2 = 1)) -> (((((o = c2) and
  in_range4(c2)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__2__container__fields
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields12 }) + 1)) and
  (forall i:int. (((1 <= i) and (i <= (o - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields12 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__2__container__fields }), i))))) and
  (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__insert__2__container__fields }), o) = 8)) and
  ((forall i:int. (((o <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields12 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields12 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__2__container__fields }),
   (i + 1))))) and
  (forall i:int. ((((o + 1) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields12 }))) + 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields12 }), (i - 1)) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__2__container__fields }), i))))))) and
  ((result14 = { us_split_fields__content = l__split_fields12 }) and
  (l__split_fields13 = my_vectors__v__insert__2__container__fields))) ->
  (((((o1 = c2) and in_range4(c2)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__3__container__fields
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields13 }) + 4)) and
  (forall i:int. (((1 <= i) and (i <= (o1 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields13 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields }), i))))) and
  ((0 <  4) ->
  (forall i:int. (((o1 <= i) and (i <= (o1 + (4 - 1)))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields }),
  i) = 7))))) and
  ((forall i:int. (((o1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields13 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields13 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__3__container__fields }),
   (i + 4))))) and
  (forall i:int. ((((o1 + 4) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields13 }))) + 4))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields13 }), (i - 4)) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields }), i))))))) and
  ((result15 = { us_split_fields__content = l__split_fields13 }) and
  (l__split_fields14 = my_vectors__v__insert__3__container__fields))) ->
  ((not (is_empty({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields14 }) = true)) ->
  ((((((o2 = (0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields14 })))) and (in_range4(o2) and
  (o2 = (0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields14 })))))) and (o3 = (o2 - 1))) and
  ((o4 = o3) and in_range2(o3))) and ((result16 = { int__content = c2 }) and
  (c3 = o4))) -> ((not (c3 = 0)) -> (((((o5 = c3) and in_range4(c3)) and
  ((((length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__insert__2__container__fields1 }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields14 }) + 1)) and
  (forall i:int. (((1 <= i) and (i <= (o5 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields14 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__2__container__fields1 }),
  i))))) and (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__2__container__fields1 }),
  o5) = 10)) and
  ((forall i:int. (((o5 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields14 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields14 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__2__container__fields1 }),
   (i + 1))))) and
  (forall i:int. ((((o5 + 1) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields14 }))) + 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields14 }), (i - 1)) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__2__container__fields1 }),
  i))))))) and ((result17 = { us_split_fields__content = l__split_fields14
  }) and
  (l__split_fields15 = my_vectors__v__insert__2__container__fields1))) ->
  (((((o6 = c3) and in_range4(c3)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__3__container__fields1
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields15 }) + 4)) and
  (forall i:int. (((1 <= i) and (i <= (o6 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields15 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields1 }),
  i))))) and ((0 <  4) ->
  (forall i:int. (((o6 <= i) and (i <= (o6 + (4 - 1)))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields1 }),
  i) = 9))))) and
  ((forall i:int. (((o6 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields15 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields15 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__3__container__fields1 }),
   (i + 4))))) and
  (forall i:int. ((((o6 + 4) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields15 }))) + 4))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields15 }), (i - 4)) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields1 }),
  i))))))) and ((result18 = { us_split_fields__content = l__split_fields15
  }) and
  (l__split_fields16 = my_vectors__v__insert__3__container__fields1))) ->
  ((((({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  my_vectors__test_vectors__B_1__i__assume }; us_split_fields1 = {
  rec__my_vectors__v__vector = my_vectors__test_vectors__B_1__i__assume1 }
  } = copy({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields16 }, 0)) and
  (((bool_eq1(length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity =
  my_vectors__test_vectors__B_1__i__assume }; us_split_fields1 = {
  rec__my_vectors__v__vector = my_vectors__test_vectors__B_1__i__assume1 }
  })), length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields16 }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  my_vectors__test_vectors__B_1__i__assume }; us_split_fields1 = {
  rec__my_vectors__v__vector = my_vectors__test_vectors__B_1__i__assume1 }
  }))))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity =
  my_vectors__test_vectors__B_1__i__assume }; us_split_fields1 = {
  rec__my_vectors__v__vector = my_vectors__test_vectors__B_1__i__assume1 }
  }), n) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields16 }), n))))) and
  (to_rep(my_vectors__test_vectors__B_1__i__assume) = length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields16 })))) and (((result19 = {
  us_split_fields__content = { rec__my_vectors__v__vector = i__split_fields }
  }) and (i__split_fields1 = { rec__my_vectors__v__vector =
  my_vectors__test_vectors__B_1__i__assume1 })) and
  (i__split_discrs = my_vectors__test_vectors__B_1__i__assume))) and
  ((((bool_eq1(length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = my_vectors__v__move__target__fields })),
  length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = i__split_discrs };
  us_split_fields1 = i__split_fields1 }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = my_vectors__v__move__target__fields }))))) ->
  (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  k__split_discrs }; us_split_fields1 = my_vectors__v__move__target__fields
  }), n) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = i__split_discrs };
  us_split_fields1 = i__split_fields1 }), n))))) and (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = i__split_discrs
  }; us_split_fields1 = i__split_fields2 }) = 0)) and ((result20 = {
  us_split_fields__content = { rec__my_vectors__v__vector = k__split_fields }
  }) and (k__split_fields1 = my_vectors__v__move__target__fields)))) ->
  (((((o7 = c3) and in_range4(c3)) and (((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields16 }) - 0) <= length({ us_split_discrs1 =
  { rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete__2__container__fields })) and
  (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__delete__2__container__fields }) <= length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields16 }))) and
  (forall i:int. (((1 <= i) and (i <= (o7 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields16 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete__2__container__fields }), i))))) and
  (((bool_le((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields16 }) - 0), (o7 - 1)) = true) and
  (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__delete__2__container__fields }) = (o7 - 1))) or
  ((not (bool_le((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields16 }) - 0), (o7 - 1)) = true)) and
  ((length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__delete__2__container__fields }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields16 }) - 0)) and
  ((forall i:int. (((o7 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete__2__container__fields }))))) -> (get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete__2__container__fields }), i) = get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields16 }), (i + 0))))) and
  (forall i:int. ((((o7 + 0) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete__2__container__fields
  }))) + 0))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete__2__container__fields }),
  (i - 0)) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields16 }), i)))))))))) and ((result21 = {
  us_split_fields__content = l__split_fields16 }) and
  (l__split_fields17 = my_vectors__v__delete__2__container__fields))) ->
  (((((o8 = c3) and in_range4(c3)) and (((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete__container__fields }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields17 }) - 1)) and
  (forall i:int. (((1 <= i) and (i <= (o8 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields17 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete__container__fields }), i))))) and
  ((forall i:int. (((o8 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete__container__fields }))))) -> (get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete__container__fields }), i) = get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields17 }), (i + 1))))) and
  (forall i:int. ((((o8 + 1) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete__container__fields
  }))) + 1))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete__container__fields }),
  (i - 1)) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields17 }), i))))))) and ((result22 = {
  us_split_fields__content = l__split_fields17 }) and
  (l__split_fields18 = my_vectors__v__delete__container__fields))) ->
  (((c3 + 3) <  (0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields18 })))) -> (((((o9 = c3) and
  in_range4(c3)) and (((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields18 }) - 3) <= length({ us_split_discrs1 =
  { rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete__2__container__fields1 })) and
  (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__delete__2__container__fields1 }) <= length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields18 }))) and
  (forall i:int. (((1 <= i) and (i <= (o9 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields18 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete__2__container__fields1 }),
  i))))) and (((bool_le((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields18 }) - 3), (o9 - 1)) = true) and
  (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__delete__2__container__fields1 }) = (o9 - 1))) or
  ((not (bool_le((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields18 }) - 3), (o9 - 1)) = true)) and
  ((length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__delete__2__container__fields1 }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields18 }) - 3)) and
  ((forall i:int. (((o9 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete__2__container__fields1 }))))) -> (get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete__2__container__fields1 }), i) = get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields18 }), (i + 3))))) and
  (forall i:int. ((((o9 + 3) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete__2__container__fields1
  }))) + 3))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete__2__container__fields1 }),
  (i - 3)) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields18 }), i)))))))))) and ((result23 = {
  us_split_fields__content = l__split_fields18 }) and
  (l__split_fields19 = my_vectors__v__delete__2__container__fields1))) ->
  (((0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields19 }))) <= (c3 + 3)) ->
  (((((o10 = c3) and in_range4(c3)) and (((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields19 }) - 3) <= length({ us_split_discrs1 =
  { rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete__2__container__fields2 })) and
  (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__delete__2__container__fields2 }) <= length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields19 }))) and
  (forall i:int. (((1 <= i) and (i <= (o10 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields19 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete__2__container__fields2 }),
  i))))) and (((bool_le((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields19 }) - 3), (o10 - 1)) = true) and
  (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__delete__2__container__fields2 }) = (o10 - 1))) or
  ((not (bool_le((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields19 }) - 3), (o10 - 1)) = true)) and
  ((length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__delete__2__container__fields2 }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields19 }) - 3)) and
  ((forall i:int. (((o10 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete__2__container__fields2 }))))) -> (get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 =
   my_vectors__v__delete__2__container__fields2 }), i) = get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields19 }), (i + 3))))) and
  (forall i:int. ((((o10 + 3) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete__2__container__fields2
  }))) + 3))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete__2__container__fields2 }),
  (i - 3)) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields19 }), i)))))))))) and ((result24 = {
  us_split_fields__content = l__split_fields19 }) and
  (l__split_fields20 = my_vectors__v__delete__2__container__fields2))) ->
  (((length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__clear__container__fields2 }) = 0) and ((result25 = {
  us_split_fields__content = l__split_fields20 }) and
  (l__split_fields21 = my_vectors__v__clear__container__fields2))) ->
  (((result26 = { int__content = c3 }) and (c4 = 1)) -> (((((bool_le(length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields1 }), 5) = true) and (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__2__container__fields2
  }) = 0)) or ((not (bool_le(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields1 }), 5) = true)) and ((length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__2__container__fields2
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  k__split_discrs }; us_split_fields1 = k__split_fields1 }) - 5)) and
  ((forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 =
   my_vectors__v__delete_first__2__container__fields2 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 =
   my_vectors__v__delete_first__2__container__fields2 }), i) = get(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields1 }), (i + 5))))) and
  (forall i:int. ((((1 + 5) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_first__2__container__fields2
  }))) + 5))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = my_vectors__v__delete_first__2__container__fields2 }),
  (i - 5)) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields1 }), i)))))))) and ((result27 = {
  us_split_fields__content = k__split_fields1 }) and
  (k__split_fields2 = my_vectors__v__delete_first__2__container__fields2))) ->
  (((((o11 = c4) and in_range4(c4)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = my_vectors__v__insert__container__fields }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields2 }) + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields21 }))) and
  (forall i:int. (((1 <= i) and (i <= (o11 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields2 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__container__fields }), i))))) and
  ((0 <  length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields21 })) ->
  ((forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields21 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields21 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = k__split_discrs };
   us_split_fields1 = my_vectors__v__insert__container__fields }),
   (i + (o11 - 1)))))) and
  (forall i:int. ((((1 + (o11 - 1)) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields21 }))) + (o11 - 1)))) ->
  (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields21 }),
  (i - (o11 - 1))) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = my_vectors__v__insert__container__fields }), i))))))) and
  ((forall i:int. (((o11 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields2 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields2 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = k__split_discrs };
   us_split_fields1 = my_vectors__v__insert__container__fields }),
   (i + length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields21 })))))) and
  (forall i:int. ((((o11 + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields21 })) <= i) and
  (i <= ((0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields2 }))) + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields21 })))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields2 }), (i - length({ us_split_discrs1 =
  { rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields21 }))) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__container__fields }), i))))))) and
  ((result28 = { us_split_fields__content = k__split_fields2 }) and
  (k__split_fields3 = my_vectors__v__insert__container__fields))) ->
  (((((o12 = c4) and in_range4(c4)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__container__fields1 }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields21 }) + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields3 }))) and
  (forall i:int. (((1 <= i) and (i <= (o12 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields21 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__container__fields1 }), i))))) and
  ((0 <  length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  k__split_discrs }; us_split_fields1 = k__split_fields3 })) ->
  ((forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields3 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields3 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__container__fields1 }),
   (i + (o12 - 1)))))) and
  (forall i:int. ((((1 + (o12 - 1)) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields3 }))) + (o12 - 1)))) ->
  (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  k__split_discrs }; us_split_fields1 = k__split_fields3 }),
  (i - (o12 - 1))) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__container__fields1 }), i))))))) and
  ((forall i:int. (((o12 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields21 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields21 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__container__fields1 }),
   (i + length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields3 })))))) and
  (forall i:int. ((((o12 + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields3 })) <= i) and
  (i <= ((0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields21 }))) + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields3 })))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields21 }), (i - length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields3 }))) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__container__fields1 }), i))))))) and
  ((result29 = { us_split_fields__content = l__split_fields21 }) and
  (l__split_fields22 = my_vectors__v__insert__container__fields1))) ->
  (((((o13 = c4) and in_range4(c4)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__container__fields2 }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields22 }) + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields3 }))) and
  (forall i:int. (((1 <= i) and (i <= (o13 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields22 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__container__fields2 }), i))))) and
  ((0 <  length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  k__split_discrs }; us_split_fields1 = k__split_fields3 })) ->
  ((forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields3 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields3 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__container__fields2 }),
   (i + (o13 - 1)))))) and
  (forall i:int. ((((1 + (o13 - 1)) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields3 }))) + (o13 - 1)))) ->
  (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  k__split_discrs }; us_split_fields1 = k__split_fields3 }),
  (i - (o13 - 1))) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__container__fields2 }), i))))))) and
  ((forall i:int. (((o13 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields22 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields22 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__container__fields2 }),
   (i + length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields3 })))))) and
  (forall i:int. ((((o13 + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields3 })) <= i) and
  (i <= ((0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields22 }))) + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields3 })))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields22 }), (i - length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields3 }))) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__container__fields2 }), i))))))) and
  ((result30 = { us_split_fields__content = l__split_fields22 }) and
  (l__split_fields23 = my_vectors__v__insert__container__fields2))) ->
  ((((((o14 = (0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields3 })))) and (in_range4(o14) and
  (o14 = (0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields3 })))))) and (o15 = (o14 - 1))) and
  ((o16 = o15) and in_range2(o15))) and ((result31 = { int__content = c4
  }) and (c5 = o16))) -> ((not (c5 = 0)) -> (((((bool_le(length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields23 }), 5) = true) and (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_last__2__container__fields2
  }) = 0)) or ((not (bool_le(length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields23 }), 5) = true)) and ((length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_last__2__container__fields2
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields23 }) - 5)) and
  ((bool_le(length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete_last__2__container__fields2 })),
  length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields23 }))) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__delete_last__2__container__fields2
  }))))) -> (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__delete_last__2__container__fields2 }),
  n) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields23 }), n)))))))) and ((result32 = {
  us_split_fields__content = l__split_fields23 }) and
  (l__split_fields24 = my_vectors__v__delete_last__2__container__fields2))) ->
  (((((o17 = c5) and in_range4(c5)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = my_vectors__v__insert__container__fields3 }) = (length({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields3 }) + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields24 }))) and
  (forall i:int. (((1 <= i) and (i <= (o17 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields3 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__container__fields3 }), i))))) and
  ((0 <  length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields24 })) ->
  ((forall i:int. (((1 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields24 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields24 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = k__split_discrs };
   us_split_fields1 = my_vectors__v__insert__container__fields3 }),
   (i + (o17 - 1)))))) and
  (forall i:int. ((((1 + (o17 - 1)) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields24 }))) + (o17 - 1)))) ->
  (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields24 }),
  (i - (o17 - 1))) = get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = my_vectors__v__insert__container__fields3 }), i))))))) and
  ((forall i:int. (((o17 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields3 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   k__split_discrs }; us_split_fields1 = k__split_fields3 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = k__split_discrs };
   us_split_fields1 = my_vectors__v__insert__container__fields3 }),
   (i + length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields24 })))))) and
  (forall i:int. ((((o17 + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields24 })) <= i) and
  (i <= ((0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = k__split_discrs };
  us_split_fields1 = k__split_fields3 }))) + length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields24 })))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = k__split_fields3 }), (i - length({ us_split_discrs1 =
  { rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields24 }))) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = k__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__container__fields3 }), i))))))) and
  ((result33 = { us_split_fields__content = k__split_fields3 }) and
  (k__split_fields4 = my_vectors__v__insert__container__fields3))) ->
  (((length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 =
  my_vectors__v__clear__container__fields3 }) = 0) and ((result34 = {
  us_split_fields__content = l__split_fields24 }) and
  (l__split_fields25 = my_vectors__v__clear__container__fields3))) ->
  (((result35 = { int__content = c5 }) and (c6 = 1)) -> (((((o18 = c6) and
  in_range4(c6)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__2__container__fields2
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields25 }) + 1)) and
  (forall i:int. (((1 <= i) and (i <= (o18 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields25 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__2__container__fields2 }),
  i))))) and (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__2__container__fields2 }),
  o18) = 8)) and
  ((forall i:int. (((o18 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields25 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields25 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__2__container__fields2 }),
   (i + 1))))) and
  (forall i:int. ((((o18 + 1) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields25 }))) + 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields25 }), (i - 1)) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__2__container__fields2 }),
  i))))))) and ((result36 = { us_split_fields__content = l__split_fields25
  }) and
  (l__split_fields26 = my_vectors__v__insert__2__container__fields2))) ->
  (((((o19 = c6) and in_range4(c6)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__3__container__fields2
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields26 }) + 4)) and
  (forall i:int. (((1 <= i) and (i <= (o19 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields26 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields2 }),
  i))))) and ((0 <  4) ->
  (forall i:int. (((o19 <= i) and (i <= (o19 + (4 - 1)))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields2 }),
  i) = 7))))) and
  ((forall i:int. (((o19 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields26 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields26 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__3__container__fields2 }),
   (i + 4))))) and
  (forall i:int. ((((o19 + 4) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields26 }))) + 4))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields26 }), (i - 4)) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields2 }),
  i))))))) and ((result37 = { us_split_fields__content = l__split_fields26
  }) and
  (l__split_fields27 = my_vectors__v__insert__3__container__fields2))) ->
  ((((((o20 = (0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields27 })))) and (in_range4(o20) and
  (o20 = (0 + length1(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = l__split_fields27 })))))) and (o21 = (o20 - 1))) and
  ((o22 = o21) and in_range2(o21))) and ((result38 = { int__content = c6
  }) and (c7 = o22))) -> ((not (c7 = 0)) -> (((((o23 = c7) and
  in_range4(c7)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__2__container__fields3
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields27 }) + 1)) and
  (forall i:int. (((1 <= i) and (i <= (o23 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields27 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__2__container__fields3 }),
  i))))) and (get(model__({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__2__container__fields3 }),
  o23) = 10)) and
  ((forall i:int. (((o23 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields27 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields27 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__2__container__fields3 }),
   (i + 1))))) and
  (forall i:int. ((((o23 + 1) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields27 }))) + 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields27 }), (i - 1)) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__2__container__fields3 }),
  i))))))) and ((result39 = { us_split_fields__content = l__split_fields27
  }) and
  (l__split_fields28 = my_vectors__v__insert__2__container__fields3))) ->
  (((((o24 = c7) and in_range4(c7)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__3__container__fields3
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields28 }) + 4)) and
  (forall i:int. (((1 <= i) and (i <= (o24 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields28 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields3 }),
  i))))) and ((0 <  4) ->
  (forall i:int. (((o24 <= i) and (i <= (o24 + (4 - 1)))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields3 }),
  i) = 9))))) and
  ((forall i:int. (((o24 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields28 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields28 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__3__container__fields3 }),
   (i + 4))))) and
  (forall i:int. ((((o24 + 4) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields28 }))) + 4))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields28 }), (i - 4)) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields3 }),
  i))))))) and ((result40 = { us_split_fields__content = l__split_fields28
  }) and
  (l__split_fields29 = my_vectors__v__insert__3__container__fields3))) ->
  (((((o25 = c7) and in_range4(c7)) and ((((length({ us_split_discrs1 = {
  rec__my_vectors__v__vector__capacity = l__split_discrs };
  us_split_fields1 = my_vectors__v__insert__3__container__fields4
  }) = (length({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
  l__split_discrs }; us_split_fields1 = l__split_fields29 }) + 0)) and
  (forall i:int. (((1 <= i) and (i <= (o25 - 1))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields29 }), i) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields4 }),
  i))))) and ((0 <  0) ->
  (forall i:int. (((o25 <= i) and (i <= (o25 + (0 - 1)))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields4 }),
  i) = 8))))) and
  ((forall i:int. (((o25 <= i) and (i <= (0 + length1(model__({
   us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields29 }))))) ->
   (get(model__({ us_split_discrs1 = { rec__my_vectors__v__vector__capacity =
   l__split_discrs }; us_split_fields1 = l__split_fields29 }),
   i) = get(model__({ us_split_discrs1 = {
   rec__my_vectors__v__vector__capacity = l__split_discrs };
   us_split_fields1 = my_vectors__v__insert__3__container__fields4 }),
   (i + 0))))) and
  (forall i:int. ((((o25 + 0) <= i) and (i <= ((0 + length1(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields29 }))) + 0))) -> (get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = l__split_fields29 }), (i - 0)) = get(model__({
  us_split_discrs1 = { rec__my_vectors__v__vector__capacity = l__split_discrs
  }; us_split_fields1 = my_vectors__v__insert__3__container__fields4 }),
  i))))))) and ((result41 = { us_split_fields__content = l__split_fields29
  }) and
  (l__split_fields30 = my_vectors__v__insert__3__container__fields4))) ->
  (((o26 = c7) and in_range3(c7)) ->
  (1 <= o26))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
