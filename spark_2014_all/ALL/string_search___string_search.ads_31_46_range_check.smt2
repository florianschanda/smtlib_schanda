;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-fun dummy2 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-fun dummy3 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-fun dummy4 () us_t)

(declare-datatypes () ((text__ref (mk_text__ref (text__content us_t)))))
(define-fun text__ref___projection ((a text__ref)) us_t (text__content a))

(define-fun dynamic_invariant ((temp___expr_136 us_t)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_134 true))
                                      (dynamic_property 1 2147483647
                                      (first1 temp___expr_136)
                                      (last1 temp___expr_136)))
                                      (=> (= temp___do_toplevel_135 true)
                                      (=> (= temp___is_init_133 true)
                                      (= (first1 temp___expr_136) 1)))))

(define-fun dynamic_predicate ((temp___139 us_t)) Bool (= (first1 temp___139) 1))

(declare-fun partial_match_at (us_t us_t Int Int) Bool)

(declare-fun partial_match_at__function_guard (Bool us_t us_t Int Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

;; partial_match_at__post_axiom
  (assert true)

;; partial_match_at__def_axiom
  (assert
  (forall ((needle us_t) (haystack us_t))
  (forall ((loc Int) (len Int))
  (! (= (= (partial_match_at needle haystack loc len) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i len))
     (= (to_rep (select (to_array needle) i)) (to_rep
                                              (select (to_array haystack) (+ loc (- i 1)))))))) :pattern (
  (partial_match_at needle haystack loc len)) ))))

(declare-fun match_at (us_t us_t Int) Bool)

(declare-fun match_at__function_guard (Bool us_t us_t Int) Bool)

;; match_at__post_axiom
  (assert true)

;; match_at__def_axiom
  (assert
  (forall ((needle us_t) (haystack us_t))
  (forall ((loc Int))
  (! (= (= (match_at needle haystack loc) true)
     (and (<= (- loc 1) (- (length haystack) (length needle)))
     (= (partial_match_at needle haystack loc (length needle)) true))) :pattern (
  (match_at needle haystack loc)) ))))

(declare-fun needle () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun haystack () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-fun dummy5 () integer)

(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content integer)))))
(define-fun t3b__ref___projection ((a t3b__ref)) integer (t3b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-fun dummy6 () integer)

(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content integer)))))
(define-fun t4b__ref___projection ((a t4b__ref)) integer (t4b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range4 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun diff () Bool)

(declare-fun i () Int)

(declare-fun j () Int)

(declare-fun string_search__brute_force__result () Int)

(declare-fun temp___272 () Int)

(declare-fun o () Int)

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun temp___273 () Int)

(declare-fun temp___271 () Int)

(declare-fun temp___270 () Bool)

(declare-fun temp___266 () Int)

(declare-fun temp___265 () Bool)

(declare-fun temp___264 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () character)

(declare-fun o7 () Int)

(declare-fun o8 () Bool)

(declare-fun o9 () Bool)

(declare-fun temp___2641 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () character)

(declare-fun o12 () Int)

(declare-fun o13 () Bool)

(declare-fun o14 () Bool)

(declare-fun temp___2661 () Int)

(declare-fun temp___2651 () Bool)

(declare-fun temp___2642 () Int)

(declare-fun o15 () Int)

(declare-fun o16 () character)

(declare-fun o17 () Int)

(declare-fun o18 () Bool)

(declare-fun o19 () Bool)

(declare-fun temp___2643 () Int)

(declare-fun o20 () Int)

(declare-fun o21 () character)

(declare-fun o22 () Int)

(declare-fun o23 () Bool)

(declare-fun o24 () Bool)

(declare-fun k () Int)

(declare-fun o25 () Int)

(declare-fun o26 () Int)

(declare-fun o27 () Int)

(declare-fun o28 () Int)

(declare-fun o29 () Int)

(declare-fun o30 () Int)

(declare-fun o31 () Bool)

(declare-fun diff1 () Bool)

(declare-fun j1 () Int)

(declare-fun string_search__brute_force__result1 () Int)

(declare-fun result () Int)

(declare-fun i1 () Int)

(declare-fun result1 () Bool)

(declare-fun diff2 () Bool)

(declare-fun result2 () Int)

(declare-fun j2 () Int)

(declare-fun result3 () Bool)

(declare-fun diff3 () Bool)

(declare-fun diff4 () Bool)

(declare-fun j3 () Int)

(declare-fun result4 () Int)

(declare-fun j4 () Int)

(declare-fun result5 () Bool)

(declare-fun diff5 () Bool)

(declare-fun diff6 () Bool)

(declare-fun j5 () Int)

(declare-fun diff7 () Bool)

(declare-fun j6 () Int)

(declare-fun diff8 () Bool)

(declare-fun j7 () Int)

(declare-fun diff9 () Bool)

(declare-fun j8 () Int)

(declare-fun diff10 () Bool)

(declare-fun j9 () Int)

(declare-fun diff11 () Bool)

(declare-fun j10 () Int)

(declare-fun diff12 () Bool)

(declare-fun j11 () Int)

(declare-fun diff13 () Bool)

(declare-fun j12 () Int)

(declare-fun result6 () Int)

(declare-fun string_search__brute_force__result2 () Int)

(declare-fun string_search__brute_force__result3 () int__ref)

(declare-fun string_search__brute_force__result4 () Int)

(declare-fun diff14 () Bool)

(declare-fun i2 () Int)

(declare-fun j13 () Int)

(declare-fun string_search__brute_force__result5 () Int)

(declare-fun result7 () int__ref)

(declare-fun i3 () Int)

(declare-fun result8 () bool__ref)

(declare-fun diff15 () Bool)

(declare-fun result9 () int__ref)

(declare-fun j14 () Int)

(declare-fun result10 () bool__ref)

(declare-fun diff16 () Bool)

(declare-fun diff17 () Bool)

(declare-fun j15 () Int)

(declare-fun result11 () int__ref)

(declare-fun j16 () Int)

(declare-fun result12 () bool__ref)

(declare-fun diff18 () Bool)

(declare-fun diff19 () bool__ref)

(declare-fun j17 () int__ref)

(declare-fun diff20 () Bool)

(declare-fun j18 () Int)

(declare-fun diff21 () bool__ref)

(declare-fun j19 () int__ref)

(declare-fun diff22 () Bool)

(declare-fun j20 () Int)

(declare-fun diff23 () bool__ref)

(declare-fun j21 () int__ref)

(declare-fun diff24 () Bool)

(declare-fun j22 () Int)

(declare-fun diff25 () bool__ref)

(declare-fun j23 () int__ref)

(declare-fun diff26 () Bool)

(declare-fun j24 () Int)

(declare-fun result13 () int__ref)

(declare-fun string_search__brute_force__result6 () Int)

(declare-fun diff27 () bool__ref)

(declare-fun i4 () int__ref)

(declare-fun j25 () int__ref)

(declare-fun string_search__brute_force__result7 () int__ref)

(declare-fun diff28 () Bool)

(declare-fun i5 () Int)

(declare-fun j26 () Int)

(declare-fun string_search__brute_force__result8 () Int)

(declare-fun diff29 () bool__ref)

(declare-fun i6 () int__ref)

(declare-fun j27 () int__ref)

(declare-fun string_search__brute_force__result9 () int__ref)

(declare-fun diff30 () Bool)

(declare-fun i7 () Int)

(declare-fun j28 () Int)

(declare-fun string_search__brute_force__result10 () Int)

(declare-fun diff31 () bool__ref)

(declare-fun i8 () int__ref)

(declare-fun j29 () int__ref)

(declare-fun string_search__brute_force__result11 () int__ref)

(declare-fun diff32 () Bool)

(declare-fun i9 () Int)

(declare-fun j30 () Int)

(declare-fun string_search__brute_force__result12 () Int)

(declare-fun result14 () int__ref)

(declare-fun string_search__brute_force__result13 () Int)

(declare-fun string_search__brute_force__result14 () int__ref)

(declare-fun string_search__brute_force__result15 () Int)

(declare-fun diff33 () bool__ref)

(declare-fun i10 () int__ref)

(declare-fun j31 () int__ref)

(declare-fun string_search__brute_force__result16 () int__ref)

(declare-fun diff34 () Bool)

(declare-fun i11 () Int)

(declare-fun j32 () Int)

(declare-fun string_search__brute_force__result17 () Int)

(declare-fun diff35 () bool__ref)

(declare-fun i12 () int__ref)

(declare-fun j33 () int__ref)

(declare-fun string_search__brute_force__result18 () int__ref)

(declare-fun diff36 () Bool)

(declare-fun i13 () Int)

(declare-fun j34 () Int)

(declare-fun string_search__brute_force__result19 () Int)

(declare-fun result15 () Bool)

(define-fun j35 () int__ref (mk_int__ref j11))

(define-fun diff37 () bool__ref (mk_bool__ref diff12))

(define-fun j36 () int__ref (mk_int__ref j9))

(define-fun diff38 () bool__ref (mk_bool__ref diff10))

(define-fun j37 () int__ref (mk_int__ref j7))

(define-fun diff39 () bool__ref (mk_bool__ref diff8))

(define-fun j38 () int__ref (mk_int__ref j5))

(define-fun diff40 () bool__ref (mk_bool__ref diff6))

(define-fun result16 () int__ref (mk_int__ref result2))

(define-fun result17 () bool__ref (mk_bool__ref result1))

(define-fun result18 () int__ref (mk_int__ref result))

(define-fun string_search__brute_force__result20 () int__ref (mk_int__ref
                                                             string_search__brute_force__result))

(define-fun j39 () int__ref (mk_int__ref j))

(define-fun i14 () int__ref (mk_int__ref i))

(define-fun diff41 () bool__ref (mk_bool__ref diff))

;; H
  (assert (dynamic_invariant needle true false true))

;; H
  (assert (dynamic_invariant haystack true false true))

;; H
  (assert
  (and (<= 1 (length needle)) (<= (length needle) (length haystack))))

;; H
  (assert
  (or
  (and
  (and
  (and
  (= string_search__brute_force__result16 string_search__brute_force__result7)
  (and (= j31 j25) (and (= i10 i4) (= diff33 diff27))))
  (and
  (= string_search__brute_force__result17 string_search__brute_force__result8)
  (and (= j32 j26) (and (= i11 i5) (= diff34 diff28)))))
  (and (= temp___272 1)
  (and
  (and
  (and
  (and
  (and (and (= o (length needle)) (in_range1 (length needle)))
  (and (and (= o1 (length haystack)) (in_range1 (length haystack)))
  (= o2 (- o1 o)))) (and (= o3 o2) (in_range1 o2))) (= o4 (+ o3 1)))
  (and (= temp___273 o4) (in_range1 o4)))
  (and (and (= result18 i14) (= i1 temp___272))
  (and (and (<= temp___272 i1) (<= i1 temp___273))
  (and (= temp___271 i1)
  (and (= temp___270 diff)
  (and (and (= result17 diff41) (= diff2 (of_int 0)))
  (and
  (and (and (= result16 j39) (= j2 (to_rep1 (first (rt needle)))))
  (ite (and (<= (to_rep1 (first (rt needle))) j2)
       (<= j2 (to_rep1 (last (rt needle)))))
  (and
  (and
  (and (= temp___266 j2)
  (and (= temp___265 diff2)
  (and
  (and
  (and
  (and
  (and
  (and
  (and (and (= temp___264 (+ j2 (- i1 1))) (in_range1 (+ j2 (- i1 1))))
  (and
  (and (<= (to_rep1 (first (rt haystack))) temp___264)
  (<= temp___264 (to_rep1 (last (rt haystack))))) (= o5 temp___264)))
  (= o6 (select (elts haystack) o5))) (= o7 (to_rep o6)))
  (= o8 (ite (= (to_rep (select (elts needle) j2)) o7) true false)))
  (= o9 (ite (not (= o8 true)) true false)))
  (and (= diff2 result3) (= diff3 o9)))
  (or
  (and (and (and (= j2 j7) (= diff3 diff8)) (and (= j8 j2) (= diff9 diff3)))
  (= diff3 true))
  (and (not (= diff3 true))
  (and
  (and (and (= j37 j38) (= diff39 diff40)) (and (= j8 j6) (= diff9 diff7)))
  (and
  (and (= (partial_match_at needle haystack i1 j3) true)
  (= (= diff4 true)
  (not
  (= (to_rep (select (elts needle) j3)) (to_rep
                                        (select (elts haystack) (+ j3 (-
                                        i1 1))))))))
  (and
  (and
  (=> (<= (to_rep1 (first (rt needle))) (to_rep1 (last (rt needle))))
  (dynamic_property2 (to_rep1 (first (rt needle)))
  (to_rep1 (last (rt needle))) j3))
  (and (<= (to_rep1 (first (rt needle))) j3)
  (<= j3 (to_rep1 (last (rt needle))))))
  (or
  (and (and (and (= j3 j5) (= diff4 diff6)) (and (= j6 j3) (= diff7 diff4)))
  (= j3 (to_rep1 (last (rt needle)))))
  (and (not (= j3 (to_rep1 (last (rt needle)))))
  (and (and (and (= j4 j5) (= diff5 diff6)) (and (= j6 j4) (= diff7 diff5)))
  (and (and (= j3 result4) (= j4 (+ j3 1)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (and (= temp___2641 (+ j4 (- i1 1))) (in_range1 (+ j4 (- i1 1))))
  (and
  (and (<= (to_rep1 (first (rt haystack))) temp___2641)
  (<= temp___2641 (to_rep1 (last (rt haystack))))) (= o10 temp___2641)))
  (= o11 (select (elts haystack) o10))) (= o12 (to_rep o11)))
  (= o13 (ite (= (to_rep (select (elts needle) j4)) o12) true false)))
  (= o14 (ite (not (= o13 true)) true false)))
  (and (= diff4 result5) (= diff5 o14))) (= diff5 true))))))))))))))
  (and (and (= j36 j37) (= diff38 diff39)) (and (= j10 j8) (= diff11 diff9))))
  (and (and (= j35 j36) (= diff37 diff38))
  (and (= j12 j10) (= diff13 diff11))))
  (and (and (= j2 j11) (= diff2 diff12)) (and (= j12 j2) (= diff13 diff2)))))
  (or
  (and
  (and
  (and
  (= string_search__brute_force__result7 (mk_int__ref
                                         string_search__brute_force__result2))
  (and (= j25 j35) (and (= i4 (mk_int__ref i1)) (= diff27 diff37))))
  (and
  (= string_search__brute_force__result8 string_search__brute_force__result2)
  (and (= j26 j12) (and (= i5 i1) (= diff28 diff13)))))
  (and (not (= diff12 true))
  (and (= (mk_int__ref result6) string_search__brute_force__result20)
  (= string_search__brute_force__result2 i1))))
  (and
  (and (= diff12 true)
  (and
  (= string_search__brute_force__result3 string_search__brute_force__result20)
  (= string_search__brute_force__result4 string_search__brute_force__result1)))
  (and
  (and
  (and
  (= string_search__brute_force__result7 (mk_int__ref
                                         string_search__brute_force__result6))
  (and (= j25 j23) (and (= i4 (mk_int__ref i3)) (= diff27 diff25))))
  (and
  (= string_search__brute_force__result8 string_search__brute_force__result6)
  (and (= j26 j24) (and (= i5 i3) (= diff28 diff26)))))
  (and
  (forall ((k1 Int))
  (=> (and (<= 1 k1) (<= k1 i2))
  (not (= (match_at needle haystack k1) true))))
  (and
  (and
  (=> (<= 1 (+ (- (length haystack) (length needle)) 1)) (dynamic_property1 1
  (+ (- (length haystack) (length needle)) 1) i2))
  (and (<= 1 i2) (<= i2 (+ (- (length haystack) (length needle)) 1))))
  (and (not (= i2 temp___273))
  (and (and (= result7 (mk_int__ref i2)) (= i3 (+ i2 1)))
  (and (and (= result8 (mk_bool__ref diff14)) (= diff15 (of_int 0)))
  (and
  (and
  (and (= result9 (mk_int__ref j13)) (= j14 (to_rep1 (first (rt needle)))))
  (ite (and (<= (to_rep1 (first (rt needle))) j14)
       (<= j14 (to_rep1 (last (rt needle)))))
  (and
  (and
  (and (= temp___2661 j14)
  (and (= temp___2651 diff15)
  (and
  (and
  (and
  (and
  (and
  (and
  (and (and (= temp___2642 (+ j14 (- i3 1))) (in_range1 (+ j14 (- i3 1))))
  (and
  (and (<= (to_rep1 (first (rt haystack))) temp___2642)
  (<= temp___2642 (to_rep1 (last (rt haystack))))) (= o15 temp___2642)))
  (= o16 (select (elts haystack) o15))) (= o17 (to_rep o16)))
  (= o18 (ite (= (to_rep (select (elts needle) j14)) o17) true false)))
  (= o19 (ite (not (= o18 true)) true false)))
  (and (= result10 (mk_bool__ref diff15)) (= diff16 o19)))
  (or
  (and
  (and (and (= j19 (mk_int__ref j14)) (= diff21 (mk_bool__ref diff16)))
  (and (= j20 j14) (= diff22 diff16))) (= diff16 true))
  (and (not (= diff16 true))
  (and
  (and (and (= j19 j17) (= diff21 diff19))
  (and (= j20 j18) (= diff22 diff20)))
  (and
  (and (= (partial_match_at needle haystack i3 j15) true)
  (= (= diff17 true)
  (not
  (= (to_rep (select (elts needle) j15)) (to_rep
                                         (select (elts haystack) (+ j15 (-
                                         i3 1))))))))
  (and
  (and
  (=> (<= (to_rep1 (first (rt needle))) (to_rep1 (last (rt needle))))
  (dynamic_property2 (to_rep1 (first (rt needle)))
  (to_rep1 (last (rt needle))) j15))
  (and (<= (to_rep1 (first (rt needle))) j15)
  (<= j15 (to_rep1 (last (rt needle))))))
  (or
  (and
  (and (and (= j17 (mk_int__ref j15)) (= diff19 (mk_bool__ref diff17)))
  (and (= j18 j15) (= diff20 diff17))) (= j15 (to_rep1 (last (rt needle)))))
  (and (not (= j15 (to_rep1 (last (rt needle)))))
  (and
  (and (and (= j17 (mk_int__ref j16)) (= diff19 (mk_bool__ref diff18)))
  (and (= j18 j16) (= diff20 diff18)))
  (and (and (= result11 (mk_int__ref j15)) (= j16 (+ j15 1)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (and (= temp___2643 (+ j16 (- i3 1))) (in_range1 (+ j16 (- i3 1))))
  (and
  (and (<= (to_rep1 (first (rt haystack))) temp___2643)
  (<= temp___2643 (to_rep1 (last (rt haystack))))) (= o20 temp___2643)))
  (= o21 (select (elts haystack) o20))) (= o22 (to_rep o21)))
  (= o23 (ite (= (to_rep (select (elts needle) j16)) o22) true false)))
  (= o24 (ite (not (= o23 true)) true false)))
  (and (= result12 (mk_bool__ref diff17)) (= diff18 o24))) (= diff18 true))))))))))))))
  (and (and (= j21 j19) (= diff23 diff21))
  (and (= j22 j20) (= diff24 diff22))))
  (and (and (= j23 j21) (= diff25 diff23))
  (and (= j24 j22) (= diff26 diff24))))
  (and (and (= j23 (mk_int__ref j14)) (= diff25 (mk_bool__ref diff15)))
  (and (= j24 j14) (= diff26 diff15)))))
  (and (not (= (bool__content diff25) true))
  (and (= result13 (mk_int__ref string_search__brute_force__result5))
  (= string_search__brute_force__result6 i3)))))))))))))))))))))
  (and
  (and
  (and
  (and
  (and
  (and (and (= o (length needle)) (in_range1 (length needle)))
  (and (and (= o1 (length haystack)) (in_range1 (length haystack)))
  (= o2 (- o1 o)))) (and (= o3 o2) (in_range1 o2))) (= o4 (+ o3 1)))
  (and (= temp___273 o4) (in_range1 o4)))
  (and (and (= result18 i14) (= i1 1))
  (ite (and (<= 1 i1) (<= i1 temp___273))
  (and
  (and
  (and (= temp___271 i1)
  (and (= temp___270 diff)
  (and (and (= result17 diff41) (= diff2 (of_int 0)))
  (and
  (and (and (= result16 j39) (= j2 (to_rep1 (first (rt needle)))))
  (ite (and (<= (to_rep1 (first (rt needle))) j2)
       (<= j2 (to_rep1 (last (rt needle)))))
  (and
  (and
  (and (= temp___266 j2)
  (and (= temp___265 diff2)
  (and
  (and
  (and
  (and
  (and
  (and
  (and (and (= temp___264 (+ j2 (- i1 1))) (in_range1 (+ j2 (- i1 1))))
  (and
  (and (<= (to_rep1 (first (rt haystack))) temp___264)
  (<= temp___264 (to_rep1 (last (rt haystack))))) (= o5 temp___264)))
  (= o6 (select (elts haystack) o5))) (= o7 (to_rep o6)))
  (= o8 (ite (= (to_rep (select (elts needle) j2)) o7) true false)))
  (= o9 (ite (not (= o8 true)) true false)))
  (and (= diff2 result3) (= diff3 o9)))
  (or
  (and (and (and (= j2 j7) (= diff3 diff8)) (and (= j8 j2) (= diff9 diff3)))
  (= diff3 true))
  (and (not (= diff3 true))
  (and
  (and (and (= j37 j38) (= diff39 diff40)) (and (= j8 j6) (= diff9 diff7)))
  (and
  (and (= (partial_match_at needle haystack i1 j3) true)
  (= (= diff4 true)
  (not
  (= (to_rep (select (elts needle) j3)) (to_rep
                                        (select (elts haystack) (+ j3 (-
                                        i1 1))))))))
  (and
  (and
  (=> (<= (to_rep1 (first (rt needle))) (to_rep1 (last (rt needle))))
  (dynamic_property2 (to_rep1 (first (rt needle)))
  (to_rep1 (last (rt needle))) j3))
  (and (<= (to_rep1 (first (rt needle))) j3)
  (<= j3 (to_rep1 (last (rt needle))))))
  (or
  (and (and (and (= j3 j5) (= diff4 diff6)) (and (= j6 j3) (= diff7 diff4)))
  (= j3 (to_rep1 (last (rt needle)))))
  (and (not (= j3 (to_rep1 (last (rt needle)))))
  (and (and (and (= j4 j5) (= diff5 diff6)) (and (= j6 j4) (= diff7 diff5)))
  (and (and (= j3 result4) (= j4 (+ j3 1)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (and (= temp___2641 (+ j4 (- i1 1))) (in_range1 (+ j4 (- i1 1))))
  (and
  (and (<= (to_rep1 (first (rt haystack))) temp___2641)
  (<= temp___2641 (to_rep1 (last (rt haystack))))) (= o10 temp___2641)))
  (= o11 (select (elts haystack) o10))) (= o12 (to_rep o11)))
  (= o13 (ite (= (to_rep (select (elts needle) j4)) o12) true false)))
  (= o14 (ite (not (= o13 true)) true false)))
  (and (= diff4 result5) (= diff5 o14))) (= diff5 true))))))))))))))
  (and (and (= j36 j37) (= diff38 diff39)) (and (= j10 j8) (= diff11 diff9))))
  (and (and (= j35 j36) (= diff37 diff38))
  (and (= j12 j10) (= diff13 diff11))))
  (and (and (= j2 j11) (= diff2 diff12)) (and (= j12 j2) (= diff13 diff2)))))
  (and
  (and (= diff12 true)
  (and
  (= string_search__brute_force__result3 string_search__brute_force__result20)
  (= string_search__brute_force__result4 string_search__brute_force__result1)))
  (and
  (forall ((k1 Int))
  (=> (and (<= 1 k1) (<= k1 i2))
  (not (= (match_at needle haystack k1) true))))
  (and
  (and
  (=> (<= 1 (+ (- (length haystack) (length needle)) 1)) (dynamic_property1 1
  (+ (- (length haystack) (length needle)) 1) i2))
  (and (<= 1 i2) (<= i2 (+ (- (length haystack) (length needle)) 1))))
  (= i2 temp___273))))))))
  (and
  (and
  (= string_search__brute_force__result9 (mk_int__ref
                                         string_search__brute_force__result5))
  (and (= j27 (mk_int__ref j13))
  (and (= i6 (mk_int__ref i2)) (= diff29 (mk_bool__ref diff14)))))
  (and
  (= string_search__brute_force__result10 string_search__brute_force__result5)
  (and (= j28 j13) (and (= i7 i2) (= diff30 diff14))))))
  (and
  (and
  (= string_search__brute_force__result11 string_search__brute_force__result9)
  (and (= j29 j27) (and (= i8 i6) (= diff31 diff29))))
  (and
  (= string_search__brute_force__result12 string_search__brute_force__result10)
  (and (= j30 j28) (and (= i9 i7) (= diff32 diff30))))))
  (and
  (and
  (= string_search__brute_force__result11 string_search__brute_force__result20)
  (and (= j29 j39) (and (= i8 (mk_int__ref i1)) (= diff31 diff41))))
  (and
  (= string_search__brute_force__result12 string_search__brute_force__result1)
  (and (= j30 j1) (and (= i9 i1) (= diff32 diff1))))))))
  (and
  (and
  (and
  (= string_search__brute_force__result16 string_search__brute_force__result14)
  (and (= j31 j29) (and (= i10 i8) (= diff33 diff31))))
  (and
  (= string_search__brute_force__result17 string_search__brute_force__result15)
  (and (= j32 j30) (and (= i11 i9) (= diff34 diff32)))))
  (and
  (and
  (= string_search__brute_force__result14 (mk_int__ref
                                          string_search__brute_force__result13))
  (= string_search__brute_force__result15 string_search__brute_force__result13))
  (and (= result14 string_search__brute_force__result11)
  (= string_search__brute_force__result13 0)))))))

;; H
  (assert
  (= string_search__brute_force__result18 string_search__brute_force__result16))

;; H
  (assert (= j33 j31))

;; H
  (assert (= i12 i10))

;; H
  (assert (= diff35 diff33))

;; H
  (assert
  (= string_search__brute_force__result19 string_search__brute_force__result17))

;; H
  (assert (= j34 j32))

;; H
  (assert (= i13 i11))

;; H
  (assert (= diff36 diff34))

;; H
  (assert (and (= o25 (length needle)) (in_range1 (length needle))))

;; H
  (assert (and (= o26 (length haystack)) (in_range1 (length haystack))))

;; H
  (assert (= o27 (- o26 o25)))

;; H
  (assert (and (= o28 o27) (in_range1 o27)))

;; H
  (assert (= o29 (+ o28 1)))

;; H
  (assert (and (= o30 o29) (in_range1 o29)))

;; H
  (assert
  (= o31 (ite (<= (int__content string_search__brute_force__result18)
         o30) true false)))

;; H
  (assert
  (= result15 (ite (<= 0 (int__content string_search__brute_force__result18))
              o31 false)))

;; H
  (assert (= result15 true))

;; H
  (assert (not (< 0 (int__content string_search__brute_force__result18))))

;; H
  (assert (<= (to_rep1 (first (rt haystack))) k))

;; H
  (assert (<= k (to_rep1 (last (rt haystack)))))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (in_range3 k)))
(check-sat)
(exit)
