;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv x ((_ int2bv 64) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ()
((unsigned64__ref (mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_201 (_ BitVec 64))
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool true)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (= (= (inrange64 var bottom range_size) true)
     (exists ((n (_ BitVec 64)))
     (and (and (bvule ((_ int2bv 64) 0) n) (bvule n range_size))
     (= var (bvadd bottom n)))))) :pattern ((inrange64 var bottom range_size)) )))

(declare-const var1 (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const var1_range_size (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const var2 (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const var2_range_size (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const res Bool)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort unsigned_64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (unsigned_64 unsigned_64) Bool)

(declare-const dummy1 unsigned_64)

(declare-datatypes ()
((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64
  (unsigned_64__content a))

(declare-fun to_rep (unsigned_64) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) unsigned_64)

;; inversion_axiom
  (assert
  (forall ((x unsigned_64))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x unsigned_64)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_64)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

(define-fun dynamic_property ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (unsigned_64 unsigned_64) Bool)

(declare-const dummy2 unsigned_64)

(declare-datatypes ()
((t101b__ref (mk_t101b__ref (t101b__content unsigned_64)))))
(define-fun t101b__ref___projection ((a t101b__ref)) unsigned_64 (t101b__content
                                                                 a))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))

(define-fun dynamic_property1 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (unsigned_64 unsigned_64) Bool)

(declare-const dummy3 unsigned_64)

(declare-datatypes ()
((t122b__ref (mk_t122b__ref (t122b__content unsigned_64)))))
(define-fun t122b__ref___projection ((a t122b__ref)) unsigned_64 (t122b__content
                                                                 a))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))

(define-fun dynamic_property2 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned_64 unsigned_64) Bool)

(declare-const dummy4 unsigned_64)

(declare-datatypes ()
((t131b__ref (mk_t131b__ref (t131b__content unsigned_64)))))
(define-fun t131b__ref___projection ((a t131b__ref)) unsigned_64 (t131b__content
                                                                 a))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun dynamic_invariant1 ((temp___expr_183 (_ BitVec 64))
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)) Bool true)

(declare-const n (_ BitVec 64))

(declare-const n1 (_ BitVec 64))

(declare-const n2 (_ BitVec 64))

(declare-const n11 (_ BitVec 64))

(declare-const n21 (_ BitVec 64))

(declare-const n3 (_ BitVec 64))

(declare-const x86__rangesintersect__result Bool)

(declare-const x86__rangesintersect__B100b__res__assume Bool)

(declare-const temp___211 (_ BitVec 64))

(declare-const temp___208 (_ BitVec 64))

(declare-const temp___205 (_ BitVec 64))

(declare-const temp___204 (_ BitVec 64))

(declare-const o (_ BitVec 64))

(declare-const o1 Bool)

(declare-const n4 (_ BitVec 64))

(declare-const n12 (_ BitVec 64))

(declare-const n22 (_ BitVec 64))

(declare-const n13 (_ BitVec 64))

(declare-const n23 (_ BitVec 64))

(declare-const n5 (_ BitVec 64))

(declare-const result (_ BitVec 64))

(declare-const n6 (_ BitVec 64))

(declare-const result1 (_ BitVec 64))

(declare-const n14 (_ BitVec 64))

(declare-const result2 (_ BitVec 64))

(declare-const n24 (_ BitVec 64))

(declare-const result3 (_ BitVec 64))

(declare-const n15 (_ BitVec 64))

(declare-const result4 (_ BitVec 64))

(declare-const n25 (_ BitVec 64))

(declare-const result5 (_ BitVec 64))

(declare-const n16 (_ BitVec 64))

(declare-const result6 (_ BitVec 64))

(declare-const n26 (_ BitVec 64))

(declare-const n7 (_ BitVec 64))

(declare-const n17 (_ BitVec 64))

(declare-const n27 (_ BitVec 64))

(declare-const n8 t__ref)

(declare-const n18 t__ref)

(declare-const n28 t__ref)

(declare-const n9 (_ BitVec 64))

(declare-const n19 (_ BitVec 64))

(declare-const n29 (_ BitVec 64))

(declare-const n10 t__ref)

(declare-const n110 t__ref)

(declare-const n210 t__ref)

(declare-const n20 (_ BitVec 64))

(declare-const n111 (_ BitVec 64))

(declare-const n211 (_ BitVec 64))

(declare-const result7 t__ref)

(declare-const n112 (_ BitVec 64))

(declare-const n113 (_ BitVec 64))

(declare-const n212 (_ BitVec 64))

(declare-const n30 (_ BitVec 64))

(declare-const result8 t__ref)

(declare-const n213 (_ BitVec 64))

(declare-const result9 t__ref)

(declare-const n31 (_ BitVec 64))

(declare-const n214 (_ BitVec 64))

(declare-const n32 (_ BitVec 64))

(declare-const n215 t__ref)

(declare-const n33 t__ref)

(declare-const n216 (_ BitVec 64))

(declare-const n34 (_ BitVec 64))

(declare-const n217 t__ref)

(declare-const n35 t__ref)

(declare-const n218 (_ BitVec 64))

(declare-const n36 (_ BitVec 64))

(declare-const n114 t__ref)

(declare-const n219 t__ref)

(declare-const n37 t__ref)

(declare-const n115 (_ BitVec 64))

(declare-const n220 (_ BitVec 64))

(declare-const n38 (_ BitVec 64))

(declare-const n116 t__ref)

(declare-const n221 t__ref)

(declare-const n39 t__ref)

(declare-const n117 (_ BitVec 64))

(declare-const n222 (_ BitVec 64))

(declare-const n40 (_ BitVec 64))

(declare-const n41 t__ref)

(declare-const n118 t__ref)

(declare-const n223 t__ref)

(declare-const n119 t__ref)

(declare-const n224 t__ref)

(declare-const n42 t__ref)

(declare-const n43 (_ BitVec 64))

(declare-const n120 (_ BitVec 64))

(declare-const n225 (_ BitVec 64))

(declare-const n121 (_ BitVec 64))

(declare-const n226 (_ BitVec 64))

(declare-const n44 (_ BitVec 64))

(declare-const result10 bool__ref)

(declare-const x86__rangesintersect__result1 Bool)

(declare-const x86__rangesintersect__result2 bool__ref)

(declare-const x86__rangesintersect__result3 Bool)

(declare-const n45 t__ref)

(declare-const n122 t__ref)

(declare-const n227 t__ref)

(declare-const n123 t__ref)

(declare-const n228 t__ref)

(declare-const n46 t__ref)

(declare-const x86__rangesintersect__result4 bool__ref)

(declare-const n47 (_ BitVec 64))

(declare-const n124 (_ BitVec 64))

(declare-const n229 (_ BitVec 64))

(declare-const n125 (_ BitVec 64))

(declare-const n230 (_ BitVec 64))

(declare-const n48 (_ BitVec 64))

(declare-const x86__rangesintersect__result5 Bool)

(define-fun n49 () t__ref (mk_t__ref n3))

(define-fun n231 () t__ref (mk_t__ref n21))

(define-fun n126 () t__ref (mk_t__ref n11))

(define-fun n232 () t__ref (mk_t__ref n2))

(define-fun n127 () t__ref (mk_t__ref n1))

(define-fun n50 () t__ref (mk_t__ref n))

(declare-const result11 Bool)

;; H
  (assert
  (bvule var1_range_size (bvsub ((_ int2bv 64) 18446744073709551615)
  var2_range_size)))

;; H
  (assert
  (and
  (= x86__rangesintersect__B100b__res__assume (inrange64 var1
                                              (bvsub var2 var1_range_size)
                                              (bvadd var1_range_size
                                              var2_range_size)))
  (= (= x86__rangesintersect__B100b__res__assume true)
  (exists ((n51 (_ BitVec 64)))
  (and
  (and (bvule ((_ int2bv 64) 0) n51)
  (bvule n51 (bvadd var1_range_size var2_range_size)))
  (= var1 (bvadd (bvsub var2 var1_range_size) n51)))))))

;; H
  (assert (= x86__rangesintersect__B100b__res__assume res))

;; H
  (assert (=> (= res true) (= (mk_t__ref result) n50)))

;; H
  (assert (=> (= res true) (= n6 ((_ int2bv 64) 0))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= temp___211 n6))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (bvugt n6 var1_range_size) (= (mk_t__ref result1) n127))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (bvugt n6 var1_range_size) (= n14 ((_ int2bv 64) 0)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (bvugt n6 var1_range_size) (= (mk_t__ref result2) n232))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (bvugt n6 var1_range_size) (= n24 (bvsub n6 var1_range_size)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (bvugt n6 var1_range_size) (bvule n24 var2_range_size))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size))
  (=> (bvult n6 var2_range_size) (= (mk_t__ref result3) n127)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size))
  (=> (bvult n6 var2_range_size) (= n15 var1_range_size)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size))
  (=> (bvult n6 var2_range_size) (= (mk_t__ref result4) n232)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size))
  (=> (bvult n6 var2_range_size) (= n25 n6)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size))
  (=> (not (bvult n6 var2_range_size)) (= (mk_t__ref result5) n127)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size))
  (=> (not (bvult n6 var2_range_size)) (= n16 (bvsub var1_range_size n6))))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size))
  (=> (not (bvult n6 var2_range_size)) (= (mk_t__ref result6) n232)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size))
  (=> (not (bvult n6 var2_range_size)) (= n26 ((_ int2bv 64) 0))))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size))
  (=> (not (bvult n6 var2_range_size)) (= n25 n26)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size))
  (=> (not (bvult n6 var2_range_size)) (= n15 n16)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size)) (= n24 n25))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (=> (not (bvugt n6 var1_range_size)) (= n14 n15))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (and
  (and (and (bvule ((_ int2bv 64) 0) n14) (bvule n14 var1_range_size))
  (and (bvule ((_ int2bv 64) 0) n24) (bvule n24 var2_range_size)))
  (= (bvadd var1 n14) (bvadd var2 n24)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (= var1 (bvadd (bvsub var2 var1_range_size) n6))
  (exists ((i (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) i) (bvule i var1_range_size))
  (exists ((j (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (= (bvadd var1 i) (bvadd var2 j))))))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (not (= var1 (bvadd (bvsub var2 var1_range_size) n6))) (= n24 n2)))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (not (= var1 (bvadd (bvsub var2 var1_range_size) n6))) (= n14 n1)))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (not (= var1 (bvadd (bvsub var2 var1_range_size) n6))) (= n24 n22)))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (=> (not (= var1 (bvadd (bvsub var2 var1_range_size) n6))) (= n14 n12)))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (or
  (forall ((m (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) m) (bvule m n7))
  (not (= var1 (bvadd (bvsub var2 var1_range_size) m)))))
  (exists ((i (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) i) (bvule i var1_range_size))
  (exists ((j (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (= (bvadd var1 i) (bvadd var2 j))))))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (and
  (=> (bvule ((_ int2bv 64) 0) (bvadd var1_range_size var2_range_size))
  (dynamic_property ((_ int2bv 64) 0) (bvadd var1_range_size var2_range_size)
  n7))
  (and (bvule ((_ int2bv 64) 0) n7)
  (bvule n7 (bvadd var1_range_size var2_range_size)))))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (= n7 (bvadd var1_range_size var2_range_size)))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (= n28 (mk_t__ref n27)))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))
  (= n18 (mk_t__ref n17)))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n8 (mk_t__ref n7)))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n29 n27))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n19 n17))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n9 n7))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n210 n28))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n110 n18))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n10 n8))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n211 n29))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n111 n19))))

;; H
  (assert
  (=> (= res true)
  (=>
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))) (= n20 n9))))

;; H
  (assert
  (=> (= res true)
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))) (= n210 n232))))

;; H
  (assert
  (=> (= res true)
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))) (= n110 n127))))

;; H
  (assert
  (=> (= res true)
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size))))
  (= n10 (mk_t__ref n6)))))

;; H
  (assert
  (=> (= res true)
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))) (= n211 n22))))

;; H
  (assert
  (=> (= res true)
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))) (= n111 n12))))

;; H
  (assert
  (=> (= res true)
  (=>
  (not
  (and (bvule ((_ int2bv 64) 0) n6)
  (bvule n6 (bvadd var1_range_size var2_range_size)))) (= n20 n6))))

;; H
  (assert
  (=> (= res true)
  (exists ((i (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) i) (bvule i var1_range_size))
  (exists ((j (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (= (bvadd var1 i) (bvadd var2 j))))))))

;; H
  (assert (=> (= res true) (= n42 n49)))

;; H
  (assert (=> (= res true) (= n224 n231)))

;; H
  (assert (=> (= res true) (= n119 n126)))

;; H
  (assert (=> (= res true) (= n223 n210)))

;; H
  (assert (=> (= res true) (= n118 n110)))

;; H
  (assert (=> (= res true) (= n41 n10)))

;; H
  (assert (=> (= res true) (= n44 n5)))

;; H
  (assert (=> (= res true) (= n226 n23)))

;; H
  (assert (=> (= res true) (= n121 n13)))

;; H
  (assert (=> (= res true) (= n225 n211)))

;; H
  (assert (=> (= res true) (= n120 n111)))

;; H
  (assert (=> (= res true) (= n43 n20)))

;; H
  (assert (=> (not (= res true)) (= result7 n126)))

;; H
  (assert (=> (not (= res true)) (= n112 ((_ int2bv 64) 0))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= temp___208 n112))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (not (= n113 ((_ int2bv 64) 0)))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i) (bvule i (bvsub n113 ((_ int2bv 64) 1))))
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (not (= (bvadd var1 i) (bvadd var2 j)))))))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (and
  (=> (bvule ((_ int2bv 64) 0) var1_range_size) (dynamic_property1
  ((_ int2bv 64) 0) var1_range_size n113))
  (and (bvule ((_ int2bv 64) 0) n113) (bvule n113 var1_range_size))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= result8 (mk_t__ref n212)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n213 ((_ int2bv 64) 0)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= temp___205 n30)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= temp___204 n213)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= o (bvadd n213 (bvsub var1_range_size n113)))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= result9 (mk_t__ref n30))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= n31 o)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (and (bvule ((_ int2bv 64) 0) n31)
  (bvule n31 (bvadd var1_range_size var2_range_size)))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (not (= var1 (bvadd (bvsub var2 var1_range_size) n31)))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (not (= (bvadd var1 n113) (bvadd var2 n213)))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j n214))
  (not (= (bvadd var1 n113) (bvadd var2 j)))))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (and
  (=> (bvule ((_ int2bv 64) 0) var2_range_size) (dynamic_property2
  ((_ int2bv 64) 0) var2_range_size n214))
  (and (bvule ((_ int2bv 64) 0) n214) (bvule n214 var2_range_size)))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= n214 var2_range_size)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= n33 (mk_t__ref n32))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= n215 (mk_t__ref n214))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= n34 n32)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= n216 n214)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= n35 n33)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= n217 n215)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= n36 n34)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size))
  (= n218 n216)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (not (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size)))
  (= n35 (mk_t__ref n30))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (not (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size)))
  (= n217 (mk_t__ref n213))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (not (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size)))
  (= n36 n30)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (not (and (bvule ((_ int2bv 64) 0) n213) (bvule n213 var2_range_size)))
  (= n218 n213)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (not (= (bvadd var1 n113) (bvadd var2 j))))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (=> (not (= n113 ((_ int2bv 64) 0)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i n113))
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (not (= (bvadd var1 i) (bvadd var2 j)))))))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i n113))
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (not (= (bvadd var1 i) (bvadd var2 j))))))))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n113 var1_range_size))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n37 n35))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n219 n217))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n114 (mk_t__ref n113)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n38 n36))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n220 n218))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n115 n113))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n39 n37))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n221 n219))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n116 n114))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n40 n38))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n222 n220))))

;; H
  (assert
  (=> (not (= res true))
  (=> (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size))
  (= n117 n115))))

;; H
  (assert
  (=> (not (= res true))
  (=> (not (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size)))
  (= n39 n49))))

;; H
  (assert
  (=> (not (= res true))
  (=> (not (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size)))
  (= n221 n231))))

;; H
  (assert
  (=> (not (= res true))
  (=> (not (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size)))
  (= n116 (mk_t__ref n112)))))

;; H
  (assert
  (=> (not (= res true))
  (=> (not (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size)))
  (= n40 n5))))

;; H
  (assert
  (=> (not (= res true))
  (=> (not (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size)))
  (= n222 n23))))

;; H
  (assert
  (=> (not (= res true))
  (=> (not (and (bvule ((_ int2bv 64) 0) n112) (bvule n112 var1_range_size)))
  (= n117 n112))))

;; H
  (assert
  (=> (not (= res true))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i var1_range_size))
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (not (= (bvadd var1 i) (bvadd var2 j)))))))))

;; H
  (assert (=> (not (= res true)) (= n42 n39)))

;; H
  (assert (=> (not (= res true)) (= n224 n221)))

;; H
  (assert (=> (not (= res true)) (= n119 n116)))

;; H
  (assert (=> (not (= res true)) (= n223 n232)))

;; H
  (assert (=> (not (= res true)) (= n118 n127)))

;; H
  (assert (=> (not (= res true)) (= n41 n50)))

;; H
  (assert (=> (not (= res true)) (= n44 n40)))

;; H
  (assert (=> (not (= res true)) (= n226 n222)))

;; H
  (assert (=> (not (= res true)) (= n121 n117)))

;; H
  (assert (=> (not (= res true)) (= n225 n22)))

;; H
  (assert (=> (not (= res true)) (= n120 n12)))

;; H
  (assert (=> (not (= res true)) (= n43 n4)))

;; H
  (assert
  (= x86__rangesintersect__result2 (mk_bool__ref
                                   x86__rangesintersect__result1)))

;; H
  (assert (= x86__rangesintersect__result3 x86__rangesintersect__result1))

;; H
  (assert
  (and
  (= o1 (inrange64 var1 (bvsub var2 var1_range_size)
        (bvadd var1_range_size var2_range_size)))
  (= (= o1 true)
  (exists ((n51 (_ BitVec 64)))
  (and
  (and (bvule ((_ int2bv 64) 0) n51)
  (bvule n51 (bvadd var1_range_size var2_range_size)))
  (= var1 (bvadd (bvsub var2 var1_range_size) n51)))))))

;; H
  (assert (= result10 (mk_bool__ref x86__rangesintersect__result)))

;; H
  (assert (= x86__rangesintersect__result1 o1))

;; H
  (assert (= x86__rangesintersect__result4 x86__rangesintersect__result2))

;; H
  (assert (= n46 n42))

;; H
  (assert (= n228 n224))

;; H
  (assert (= n123 n119))

;; H
  (assert (= n227 n223))

;; H
  (assert (= n122 n118))

;; H
  (assert (= n45 n41))

;; H
  (assert (= x86__rangesintersect__result5 x86__rangesintersect__result3))

;; H
  (assert (= n48 n44))

;; H
  (assert (= n230 n226))

;; H
  (assert (= n125 n121))

;; H
  (assert (= n229 n225))

;; H
  (assert (= n124 n120))

;; H
  (assert (= n47 n43))

;; H
  (assert (= result11 (bool__content x86__rangesintersect__result4)))

;; H
  (assert (= (bool__content x86__rangesintersect__result4) true))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 19, characters 0-0
  (not
  (exists ((i (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) i) (bvule i var1_range_size))
  (exists ((j (_ BitVec 64)))
  (and (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (= (bvadd var1 i) (bvadd var2 j))))))))
(check-sat)
(exit)
