;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort priority 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 97)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (priority priority) Bool)

(declare-fun dummy () priority)

(declare-datatypes ()
((priority__ref (mk_priority__ref (priority__content priority)))))
(define-fun priority__ref___projection ((a priority__ref)) priority (priority__content
                                                                    a))

(declare-sort message_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (message_type message_type) Bool)

(declare-fun dummy1 () message_type)

(declare-datatypes ()
((message_type__ref
 (mk_message_type__ref (message_type__content message_type)))))
(define-fun message_type__ref___projection ((a message_type__ref)) message_type
  (message_type__content a))

(define-fun dynamic_invariant ((temp___expr_172 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)) Bool (=>
                                      (or (= temp___is_init_169 true)
                                      (<= 0 1)) (in_range1 temp___expr_172)))

(declare-sort message_index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (message_index_type message_index_type) Bool)

(declare-fun dummy2 () message_index_type)

(declare-datatypes ()
((message_index_type__ref
 (mk_message_index_type__ref
 (message_index_type__content message_index_type)))))
(define-fun message_index_type__ref___projection ((a message_index_type__ref)) message_index_type
  (message_index_type__content a))

(declare-sort message_count_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (message_count_type message_count_type) Bool)

(declare-fun dummy3 () message_count_type)

(declare-datatypes ()
((message_count_type__ref
 (mk_message_count_type__ref
 (message_count_type__content message_count_type)))))
(define-fun message_count_type__ref___projection ((a message_count_type__ref)) message_count_type
  (message_count_type__content a))

(declare-fun to_rep (message_type) Int)

(declare-fun of_rep (Int) message_type)

;; inversion_axiom
  (assert
  (forall ((x message_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x message_type)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int message_type))))))
(declare-fun slide ((Array Int message_type) Int
  Int) (Array Int message_type))

;; slide_eq
  (assert
  (forall ((a (Array Int message_type)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int message_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int message_type) Int Int
  (Array Int message_type) Int Int) (Array Int message_type))

;; concat_def
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (message_type Int) (Array Int message_type))

;; singleton_def
  (assert
  (forall ((v message_type))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int message_type)) (a__first Int)
  (a__last Int) (b (Array Int message_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int message_type) Int Int
  (Array Int message_type) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__tasking__mailboxT__next_in message_index_type)(rec__tasking__mailboxT__next_out message_index_type)(rec__tasking__mailboxT__count message_count_type)(rec__tasking__mailboxT__non_empty Bool)(rec__tasking__mailboxT__message_array (Array Int message_type))))))
(define-fun us_split_fields_Next_In__projection ((a us_split_fields)) message_index_type
  (rec__tasking__mailboxT__next_in a))

(define-fun us_split_fields_Next_Out__projection ((a us_split_fields)) message_index_type
  (rec__tasking__mailboxT__next_out a))

(define-fun us_split_fields_Count__projection ((a us_split_fields)) message_count_type
  (rec__tasking__mailboxT__count a))

(define-fun us_split_fields_Non_Empty__projection ((a us_split_fields)) Bool
  (rec__tasking__mailboxT__non_empty a))

(define-fun us_split_fields_Message_Array__projection ((a us_split_fields)) (Array Int message_type)
  (rec__tasking__mailboxT__message_array a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun tasking__mailboxT__next_in__first__bit () Int)

(declare-fun tasking__mailboxT__next_in__last__bit () Int)

(declare-fun tasking__mailboxT__next_in__position () Int)

;; tasking__mailboxT__next_in__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__next_in__first__bit))

;; tasking__mailboxT__next_in__last__bit_axiom
  (assert
  (< tasking__mailboxT__next_in__first__bit tasking__mailboxT__next_in__last__bit))

;; tasking__mailboxT__next_in__position_axiom
  (assert (<= 0 tasking__mailboxT__next_in__position))

(declare-fun tasking__mailboxT__next_out__first__bit () Int)

(declare-fun tasking__mailboxT__next_out__last__bit () Int)

(declare-fun tasking__mailboxT__next_out__position () Int)

;; tasking__mailboxT__next_out__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__next_out__first__bit))

;; tasking__mailboxT__next_out__last__bit_axiom
  (assert
  (< tasking__mailboxT__next_out__first__bit tasking__mailboxT__next_out__last__bit))

;; tasking__mailboxT__next_out__position_axiom
  (assert (<= 0 tasking__mailboxT__next_out__position))

(declare-fun tasking__mailboxT__count__first__bit () Int)

(declare-fun tasking__mailboxT__count__last__bit () Int)

(declare-fun tasking__mailboxT__count__position () Int)

;; tasking__mailboxT__count__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__count__first__bit))

;; tasking__mailboxT__count__last__bit_axiom
  (assert
  (< tasking__mailboxT__count__first__bit tasking__mailboxT__count__last__bit))

;; tasking__mailboxT__count__position_axiom
  (assert (<= 0 tasking__mailboxT__count__position))

(declare-fun tasking__mailboxT__non_empty__first__bit () Int)

(declare-fun tasking__mailboxT__non_empty__last__bit () Int)

(declare-fun tasking__mailboxT__non_empty__position () Int)

;; tasking__mailboxT__non_empty__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__non_empty__first__bit))

;; tasking__mailboxT__non_empty__last__bit_axiom
  (assert
  (< tasking__mailboxT__non_empty__first__bit tasking__mailboxT__non_empty__last__bit))

;; tasking__mailboxT__non_empty__position_axiom
  (assert (<= 0 tasking__mailboxT__non_empty__position))

(declare-fun tasking__mailboxT__message_array__first__bit () Int)

(declare-fun tasking__mailboxT__message_array__last__bit () Int)

(declare-fun tasking__mailboxT__message_array__position () Int)

;; tasking__mailboxT__message_array__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__message_array__first__bit))

;; tasking__mailboxT__message_array__last__bit_axiom
  (assert
  (< tasking__mailboxT__message_array__first__bit tasking__mailboxT__message_array__last__bit))

;; tasking__mailboxT__message_array__position_axiom
  (assert (<= 0 tasking__mailboxT__message_array__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-datatypes ()
((mailboxT__ref (mk_mailboxT__ref (mailboxT__content us_rep)))))
(define-fun mailboxT__ref___projection ((a mailboxT__ref)) us_rep (mailboxT__content
                                                                  a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range4 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Bool)

(declare-fun to_rep1 (message_index_type) Int)

(declare-fun of_rep1 (Int) message_index_type)

;; inversion_axiom
  (assert
  (forall ((x message_index_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x message_index_type)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun to_rep2 (message_count_type) Int)

(declare-fun of_rep2 (Int) message_count_type)

;; inversion_axiom
  (assert
  (forall ((x message_count_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x message_count_type)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun temp___203 (Int) (Array Int message_type))

;; def_axiom
  (assert
  (forall ((temp___205 Int))
  (forall ((temp___206 Int))
  (= (select (temp___203 temp___205) temp___206) (of_rep temp___205)))))

(define-fun default_initial_assumption ((temp___expr_201 us_rep)
  (temp___skip_top_level_202 Bool)) Bool (and
                                         (and
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__tasking__mailboxT__next_in
                                            (us_split_fields1
                                            temp___expr_201))) 1)
                                         (= (to_rep1
                                            (rec__tasking__mailboxT__next_out
                                            (us_split_fields1
                                            temp___expr_201))) 1))
                                         (= (to_rep2
                                            (rec__tasking__mailboxT__count
                                            (us_split_fields1
                                            temp___expr_201))) 0))
                                         (= (rec__tasking__mailboxT__non_empty
                                            (us_split_fields1
                                            temp___expr_201)) (of_int 0)))
                                         (= (rec__tasking__mailboxT__message_array
                                            (us_split_fields1
                                            temp___expr_201)) (temp___203 1))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun dynamic_invariant1 ((temp___expr_178 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)) Bool (=>
                                      (or (= temp___is_init_175 true)
                                      (<= 1 64)) (in_range2 temp___expr_178)))

(define-fun dynamic_invariant2 ((temp___expr_184 Int)
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)) Bool (=>
                                      (or (= temp___is_init_181 true)
                                      (<= 0 64)) (in_range3 temp___expr_184)))

(define-fun dynamic_invariant3 ((temp___expr_160 Int)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)) Bool (=>
                                      (or (= temp___is_init_157 true)
                                      (<= 0 97)) (in_range temp___expr_160)))

(assert
;; WP_parameter_def
 ;; File "single_implicit.ads", line 5, characters 0-0
  (not (<= 97 97)))
(check-sat)
(exit)
