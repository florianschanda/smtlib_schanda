;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort character 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (character character) Bool)

(declare-const dummy character)

(declare-datatypes ((character__ref 0))
(((mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort datalengtht 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 78)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (datalengtht datalengtht) Bool)

(declare-const dummy1 datalengtht)

(declare-datatypes ((datalengtht__ref 0))
(((mk_datalengtht__ref (datalengtht__content datalengtht)))))
(define-fun datalengtht__ref___projection ((a datalengtht__ref)) datalengtht
  (datalengtht__content a))

(declare-fun to_rep1 (datalengtht) Int)

(declare-fun of_rep1 (Int) datalengtht)

;; inversion_axiom
  (assert
  (forall ((x datalengtht))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x datalengtht)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort datai 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 78)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (datai datai) Bool)

(declare-const dummy2 datai)

(declare-datatypes ((datai__ref 0))
(((mk_datai__ref (datai__content datai)))))
(define-fun datai__ref___projection ((a datai__ref)) datai (datai__content a))

(declare-const dummy3 (Array Int character))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(declare-fun user_eq3 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__keyboard__datat__length datalengtht)(rec__keyboard__datat__text (Array Int character))))))
(define-fun us_split_fields_Length__projection ((a us_split_fields)) datalengtht
  (rec__keyboard__datat__length a))

(define-fun us_split_fields_Text__projection ((a us_split_fields)) (Array Int character)
  (rec__keyboard__datat__text a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__keyboard__datat__length
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__keyboard__datat__length
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__keyboard__datat__text (us_split_fields1 a))
                           1 78
                           (rec__keyboard__datat__text (us_split_fields1 b))
                           1 78) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const keyboard__datat__length__first__bit Int)

(declare-const keyboard__datat__length__last__bit Int)

(declare-const keyboard__datat__length__position Int)

;; keyboard__datat__length__first__bit_axiom
  (assert (<= 0 keyboard__datat__length__first__bit))

;; keyboard__datat__length__last__bit_axiom
  (assert
  (< keyboard__datat__length__first__bit keyboard__datat__length__last__bit))

;; keyboard__datat__length__position_axiom
  (assert (<= 0 keyboard__datat__length__position))

(declare-const keyboard__datat__text__first__bit Int)

(declare-const keyboard__datat__text__last__bit Int)

(declare-const keyboard__datat__text__position Int)

;; keyboard__datat__text__first__bit_axiom
  (assert (<= 0 keyboard__datat__text__first__bit))

;; keyboard__datat__text__last__bit_axiom
  (assert
  (< keyboard__datat__text__first__bit keyboard__datat__text__last__bit))

;; keyboard__datat__text__position_axiom
  (assert (<= 0 keyboard__datat__text__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((datat__ref 0))
(((mk_datat__ref (datat__content us_rep)))))
(define-fun datat__ref___projection ((a datat__ref)) us_rep (datat__content
                                                            a))

(declare-sort opt 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (opt opt) Bool)

(declare-const dummy5 opt)

(declare-datatypes ((opt__ref 0)) (((mk_opt__ref (opt__content opt)))))
(define-fun opt__ref___projection ((a opt__ref)) opt (opt__content a))

(define-fun dynamic_invariant ((temp___expr_257 Int)
  (temp___is_init_254 Bool) (temp___skip_constant_255 Bool)
  (temp___do_toplevel_256 Bool)) Bool (=>
                                      (or (= temp___is_init_254 true)
                                      (<= 1 4)) (in_range4 temp___expr_257)))

(declare-const keyedop us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const op Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort datalengtht1 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 18)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (datalengtht1 datalengtht1) Bool)

(declare-const dummy6 datalengtht1)

(declare-datatypes ((datalengtht__ref1 0))
(((mk_datalengtht__ref1 (datalengtht__content1 datalengtht1)))))
(define-fun datalengtht__ref___2__projection ((a datalengtht__ref1)) datalengtht1
  (datalengtht__content1 a))

(declare-fun to_rep2 (datalengtht1) Int)

(declare-fun of_rep2 (Int) datalengtht1)

;; inversion_axiom
  (assert
  (forall ((x datalengtht1))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x datalengtht1)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort datai1 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 18)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (datai1 datai1) Bool)

(declare-const dummy7 datai1)

(declare-datatypes ((datai__ref1 0))
(((mk_datai__ref1 (datai__content1 datai1)))))
(define-fun datai__ref___2__projection ((a datai__ref1)) datai1 (datai__content1
                                                                a))

(declare-fun to_rep3 (datai1) Int)

(declare-fun of_rep3 (Int) datai1)

;; inversion_axiom
  (assert
  (forall ((x datai1))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x datai1)) (! (in_range6 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-const dummy8 (Array Int character))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq8 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__admin__datat__length datalengtht1)(rec__admin__datat__minmatchlength datai1)(rec__admin__datat__text (Array Int character))))))
(define-fun us_split_fields_Length__2__projection ((a us_split_fields2)) datalengtht1
  (rec__admin__datat__length a))

(define-fun us_split_fields_MinMatchLength__projection ((a us_split_fields2)) datai1
  (rec__admin__datat__minmatchlength a))

(define-fun us_split_fields_Text__2__projection ((a us_split_fields2)) (Array Int character)
  (rec__admin__datat__text a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep2
                            (rec__admin__datat__length (us_split_fields3 a)))
                         (to_rep2
                         (rec__admin__datat__length (us_split_fields3 b))))
                         (= (to_rep3
                            (rec__admin__datat__minmatchlength
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__admin__datat__minmatchlength
                                                   (us_split_fields3 b)))))
                         (= (bool_eq
                            (rec__admin__datat__text (us_split_fields3 a)) 1
                            18 (rec__admin__datat__text (us_split_fields3 b))
                            1 18) true))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const admin__datat__length__first__bit Int)

(declare-const admin__datat__length__last__bit Int)

(declare-const admin__datat__length__position Int)

;; admin__datat__length__first__bit_axiom
  (assert (<= 0 admin__datat__length__first__bit))

;; admin__datat__length__last__bit_axiom
  (assert
  (< admin__datat__length__first__bit admin__datat__length__last__bit))

;; admin__datat__length__position_axiom
  (assert (<= 0 admin__datat__length__position))

(declare-const admin__datat__minmatchlength__first__bit Int)

(declare-const admin__datat__minmatchlength__last__bit Int)

(declare-const admin__datat__minmatchlength__position Int)

;; admin__datat__minmatchlength__first__bit_axiom
  (assert (<= 0 admin__datat__minmatchlength__first__bit))

;; admin__datat__minmatchlength__last__bit_axiom
  (assert
  (< admin__datat__minmatchlength__first__bit admin__datat__minmatchlength__last__bit))

;; admin__datat__minmatchlength__position_axiom
  (assert (<= 0 admin__datat__minmatchlength__position))

(declare-const admin__datat__text__first__bit Int)

(declare-const admin__datat__text__last__bit Int)

(declare-const admin__datat__text__position Int)

;; admin__datat__text__first__bit_axiom
  (assert (<= 0 admin__datat__text__first__bit))

;; admin__datat__text__last__bit_axiom
  (assert (< admin__datat__text__first__bit admin__datat__text__last__bit))

;; admin__datat__text__position_axiom
  (assert (<= 0 admin__datat__text__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ((datat__ref1 0))
(((mk_datat__ref1 (datat__content1 us_rep1)))))
(define-fun datat__ref___2__projection ((a datat__ref1)) us_rep1 (datat__content1
                                                                 a))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq2 (select a temp___idx_155)
                              (select b (+ (- b__first a__first) temp___idx_155))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq2 (select a temp___idx_155)
     (select b (+ (- b__first a__first) temp___idx_155))) true))))))))

(declare-const optokeyed (Array Int us_rep1))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun admin__optokeyed__aggregate_def (us_rep1 us_rep1 us_rep1
  us_rep1) (Array Int us_rep1))

;; def_axiom
  (assert
  (forall ((temp___157 us_rep1) (temp___158 us_rep1) (temp___159 us_rep1)
  (temp___160 us_rep1))
  (let ((temp___156 (admin__optokeyed__aggregate_def temp___157 temp___158
                    temp___159 temp___160)))
  (and
  (and
  (and (= (select temp___156 1) temp___157)
  (= (select temp___156 2) temp___158)) (= (select temp___156 3) temp___159))
  (= (select temp___156 4) temp___160)))))

(declare-fun temp___String_Literal_162 (tuple0) (Array Int character))

;; temp___String_Literal_162__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 2)) 82))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 3)) 67))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 4)) 72))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 5)) 73))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 6)) 86))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 7)) 69))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 9)) 76))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 10)) 79))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 11)) 71))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 18)) 32)) :pattern (
  (temp___String_Literal_162 us_void_param)) )))

(declare-fun temp___String_Literal_163 (tuple0) (Array Int character))

;; temp___String_Literal_163__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 1)) 85)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 2)) 80))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 3)) 68))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 4)) 65))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 5)) 84))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 6)) 69))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 8)) 67))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 9)) 79))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 10)) 78))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 11)) 70))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 12)) 73))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 13)) 71))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 15)) 68))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 16)) 65))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 17)) 84))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 18)) 65)) :pattern (
  (temp___String_Literal_163 us_void_param)) )))

(declare-fun temp___String_Literal_164 (tuple0) (Array Int character))

;; temp___String_Literal_164__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 1)) 79)
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 2)) 86))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 3)) 69))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 4)) 82))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 5)) 82))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 6)) 73))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 7)) 68))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 8)) 69))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 10)) 76))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 11)) 79))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 12)) 67))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 13)) 75))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_164 us_void_param) 18)) 32)) :pattern (
  (temp___String_Literal_164 us_void_param)) )))

(declare-fun temp___String_Literal_165 (tuple0) (Array Int character))

;; temp___String_Literal_165__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 1)) 83)
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 2)) 72))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 3)) 85))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 4)) 84))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 5)) 68))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 6)) 79))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 7)) 87))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 8)) 78))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_165 us_void_param) 18)) 32)) :pattern (
  (temp___String_Literal_165 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range1 temp___expr_63)))

(define-fun dynamic_invariant2 ((temp___expr_302 Int)
  (temp___is_init_299 Bool) (temp___skip_constant_300 Bool)
  (temp___do_toplevel_301 Bool)) Bool (=>
                                      (or (= temp___is_init_299 true)
                                      (<= 0 18)) (in_range5 temp___expr_302)))

(define-fun dynamic_invariant3 ((temp___expr_308 Int)
  (temp___is_init_305 Bool) (temp___skip_constant_306 Bool)
  (temp___do_toplevel_307 Bool)) Bool (=>
                                      (or (= temp___is_init_305 true)
                                      (<= 1 18)) (in_range6 temp___expr_308)))

;; optokeyed__def_axiom
  (assert
  (= optokeyed (admin__optokeyed__aggregate_def
               (mk___rep1
               (mk___split_fields1 (of_rep2 11) (of_rep3 7)
               (temp___String_Literal_162 Tuple0)))
               (mk___rep1
               (mk___split_fields1 (of_rep2 18) (of_rep3 6)
               (temp___String_Literal_163 Tuple0)))
               (mk___rep1
               (mk___split_fields1 (of_rep2 13) (of_rep3 8)
               (temp___String_Literal_164 Tuple0)))
               (mk___rep1
               (mk___split_fields1 (of_rep2 8) (of_rep3 8)
               (temp___String_Literal_165 Tuple0))))))

(define-fun dynamic_invariant4 ((temp___expr_218 Int)
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)) Bool (=>
                                      (or (= temp___is_init_215 true)
                                      (<= 0 78)) (in_range2 temp___expr_218)))

(define-fun dynamic_invariant5 ((temp___expr_224 Int)
  (temp___is_init_221 Bool) (temp___skip_constant_222 Bool)
  (temp___do_toplevel_223 Bool)) Bool (=>
                                      (or (= temp___is_init_221 true)
                                      (<= 1 78)) (in_range3 temp___expr_224)))

(declare-const o datai1)

(declare-const o1 datalengtht1)

(declare-const o2 datalengtht1)

(declare-const o3 datai1)

(declare-const o4 (Array Int character))

(declare-const o5 datai1)

(declare-const o6 datalengtht1)

(declare-const o7 datalengtht1)

(declare-const o8 datai1)

(declare-const o9 (Array Int character))

(declare-const o10 datai1)

(declare-const o11 datalengtht1)

(declare-const o12 datalengtht1)

(declare-const o13 datai1)

(declare-const o14 (Array Int character))

(declare-const o15 datai1)

(declare-const o16 datalengtht1)

(declare-const o17 datalengtht1)

(declare-const o18 datai1)

(declare-const o19 (Array Int character))

(declare-const o20 datalengtht1)

(declare-const o21 datai1)

(declare-const o22 (Array Int character))

(declare-const o23 datalengtht1)

(declare-const o24 datai1)

(declare-const o25 (Array Int character))

(declare-const o26 datalengtht1)

(declare-const o27 datai1)

(declare-const o28 (Array Int character))

(declare-const o29 datalengtht1)

(declare-const o30 datai1)

(declare-const o31 (Array Int character))

(declare-const temp___353 (Array Int us_rep1))

(declare-const i Int)

;; H
  (assert (= (to_rep3 o15) 8))

;; H
  (assert (= (to_rep2 o16) 8))

;; H
  (assert (= o16 o17))

;; H
  (assert (= o15 o18))

;; H
  (assert (= (temp___String_Literal_165 Tuple0) o19))

;; H
  (assert (= o20 o17))

;; H
  (assert (= o21 o18))

;; H
  (assert (= o22 o19))

;; H
  (assert (= (to_rep3 o10) 8))

;; H
  (assert (= (to_rep2 o11) 13))

;; H
  (assert (= o11 o12))

;; H
  (assert (= o10 o13))

;; H
  (assert (= (temp___String_Literal_164 Tuple0) o14))

;; H
  (assert (= o23 o12))

;; H
  (assert (= o24 o13))

;; H
  (assert (= o25 o14))

;; H
  (assert (= (to_rep3 o5) 6))

;; H
  (assert (= (to_rep2 o6) 18))

;; H
  (assert (= o6 o7))

;; H
  (assert (= o5 o8))

;; H
  (assert (= (temp___String_Literal_163 Tuple0) o9))

;; H
  (assert (= o26 o7))

;; H
  (assert (= o27 o8))

;; H
  (assert (= o28 o9))

;; H
  (assert (= (to_rep3 o) 7))

;; H
  (assert (= (to_rep2 o1) 11))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= (temp___String_Literal_162 Tuple0) o4))

;; H
  (assert (= o29 o2))

;; H
  (assert (= o30 o3))

;; H
  (assert (= o31 o4))

;; H
  (assert
  (= temp___353 (admin__optokeyed__aggregate_def
                (mk___rep1 (mk___split_fields1 o29 o30 o31))
                (mk___rep1 (mk___split_fields1 o26 o27 o28))
                (mk___rep1 (mk___split_fields1 o23 o24 o25))
                (mk___rep1 (mk___split_fields1 o20 o21 o22)))))

;; H
  (assert (= temp___353 optokeyed))

;; H
  (assert (in_range4 op))

;; H
  (assert
  (<= (to_rep3
      (rec__admin__datat__minmatchlength
      (us_split_fields3 (select optokeyed op)))) (to_rep1
                                                 (rec__keyboard__datat__length
                                                 (us_split_fields1 keyedop)))))

;; H
  (assert
  (<= (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop)))
  (to_rep2
  (rec__admin__datat__length (us_split_fields3 (select optokeyed op))))))

;; H
  (assert (<= 1 i))

;; H
  (assert
  (<= i (to_rep1 (rec__keyboard__datat__length (us_split_fields1 keyedop)))))

(assert
;; WP_parameter_def
 ;; File "admin.ads", line 77, characters 0-0
  (not (<= 1 i)))
(check-sat)
(exit)
