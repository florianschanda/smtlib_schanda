(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs_int(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs_int(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs_int((comp_div(x,y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type index

predicate in_range4(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic all_elements_in : (int,integer) farray, int -> bool

logic all_elements_in__function_guard : bool, (int,integer) farray,
  int -> prop

axiom all_elements_in__post_axiom : true

axiom all_elements_in__def_axiom :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)]. ((all_elements_in(a,
  max) = true) <->
  (forall k:int. (((0 <= k) and (k <= 7)) -> (((-max) <= to_rep((a[k]))) and
  (to_rep((a[k])) <= max)))))))

logic all_left_elements_in : (int,integer) farray, int, int -> bool

logic all_left_elements_in__function_guard : bool, (int,integer) farray, int,
  int -> prop

axiom all_left_elements_in__post_axiom : true

axiom all_left_elements_in__def_axiom :
  (forall a:(int,integer) farray.
  (forall right:int. forall max:int [all_left_elements_in(a, right, max)].
  ((all_left_elements_in(a, right, max) = true) <->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((k <  right) ->
  (((-max) <= to_rep((a[k]))) and (to_rep((a[k])) <= max))))))))

logic all_right_elements_in : (int,integer) farray, int, int -> bool

logic all_right_elements_in__function_guard : bool, (int,integer) farray,
  int, int -> prop

axiom all_right_elements_in__post_axiom : true

axiom all_right_elements_in__def_axiom :
  (forall a:(int,integer) farray.
  (forall left:int. forall max:int [all_right_elements_in(a, left, max)].
  ((all_right_elements_in(a, left, max) = true) <->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((left <  k) ->
  (((-max) <= to_rep((a[k]))) and (to_rep((a[k])) <= max))))))))

logic intermediate_form : (int,integer) farray, (int,integer) farray -> bool

logic intermediate_form__function_guard : bool, (int,integer) farray,
  (int,integer) farray -> prop

axiom intermediate_form__post_axiom : true

axiom intermediate_form__def_axiom :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. (((intermediate_form(a, b) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> (((mod((k + 1), 8) = 0) ->
  (to_rep((a[k])) = (((((((to_rep((b[0])) + to_rep((b[1]))) + to_rep((b[2]))) + to_rep((b[3]))) + to_rep((b[4]))) + to_rep((b[5]))) + to_rep((b[6]))) + to_rep((b[7]))))) and
  ((not (mod((k + 1), 8) = 0)) -> (((mod((k + 1), 4) = 0) ->
  (to_rep((a[k])) = (((to_rep((b[k])) + to_rep((b[(k - 1)]))) + to_rep((b[(k - 2)]))) + to_rep((b[(k - 3)]))))) and
  ((not (mod((k + 1), 4) = 0)) -> (((mod((k + 1), 2) = 0) ->
  (to_rep((a[k])) = (to_rep((b[k])) + to_rep((b[(k - 1)]))))) and
  ((not (mod((k + 1), 2) = 0)) -> (to_rep((a[k])) = to_rep((b[k])))))))))))) and
  ((forall k:int. (((0 <= k) and (k <= 7)) -> (((mod((k + 1), 8) = 0) and
   (to_rep((a[k])) = (((((((to_rep((b[0])) + to_rep((b[1]))) + to_rep((b[2]))) + to_rep((b[3]))) + to_rep((b[4]))) + to_rep((b[5]))) + to_rep((b[6]))) + to_rep((b[7]))))) or
   ((not (mod((k + 1), 8) = 0)) and (((mod((k + 1), 4) = 0) and
   (to_rep((a[k])) = (((to_rep((b[k])) + to_rep((b[(k - 1)]))) + to_rep((b[(k - 2)]))) + to_rep((b[(k - 3)]))))) or
   ((not (mod((k + 1), 4) = 0)) and (((mod((k + 1), 2) = 0) and
   (to_rep((a[k])) = (to_rep((b[k])) + to_rep((b[(k - 1)]))))) or
   ((not (mod((k + 1), 2) = 0)) and (to_rep((a[k])) = to_rep((b[k]))))))))))) ->
  (intermediate_form(a, b) = true))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "prefixsum.ads", line 24, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,integer) farray. forall output_space:int. forall space:int.
  forall left:int. forall right:int. forall temp___179:(int,integer) farray.
  forall temp___175:int. forall temp___173:(int,integer) farray.
  forall temp___177:(int,integer) farray. forall temp___172:int.
  forall temp___176:(int,integer) farray. forall temp___180:int.
  forall o:int. forall o1:int. forall o2:integer. forall o3:int.
  forall o4:integer. forall o5:int. forall o6:int. forall o7:int.
  forall o8:int. forall o9:integer. forall o10:int.
  forall o11:(int,integer) farray. forall o12:int. forall o13:int.
  forall o14:int. forall o15:int. forall o16:int. forall o17:int.
  forall result:int. forall space1:int. forall a1:(int,integer) farray.
  forall space2:int. forall left1:int. forall right1:int.
  forall temp___205:int. forall rho:int. forall result1:int.
  forall temp___2051:int. forall result2:int. forall left2:int.
  forall a2:(int,integer) farray. forall left3:int. forall right2:int.
  forall temp___1801:int. forall result3:int. forall temp___1802:int.
  forall result4:int. forall right3:int. forall result5:(int,integer) farray.
  forall a3:(int,integer) farray. forall result6:int. forall left4:int.
  forall a4:(int,integer) farray. forall left5:int. forall right4:int.
  forall a5:(int,integer) farray. forall left6:int. forall right5:int.
  forall rho1:int. forall a6:(int,integer) farray. forall left7:int.
  forall right6:int. forall a7:(int,integer) farray. forall left8:int.
  forall right7:int. forall rho2:int. forall result7:int. forall space3:int.
  (((1 <= 2147483647) -> in_range3(output_space)) -> ((all_elements_in(a,
  1000000) = true) -> ((({ int__content = result } = { int__content = space
  }) and (space1 = 1)) -> (in_range3(space1) -> (((0 <= 2147483647) ->
  in_range2(left)) -> (((0 <= 2147483647) -> in_range2(right)) ->
  ((space1 <  8) -> ((((all_elements_in(a1, (space2 * 1000000)) = true) and
  (((space2 = 1) or (space2 = 2)) or (space2 = 4))) and
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((((mod((k + 1), 8) = 0) and
  (space2 = 8)) and
  (to_rep((a1[k])) = (((((((to_rep((a[0])) + to_rep((a[1]))) + to_rep((a[2]))) + to_rep((a[3]))) + to_rep((a[4]))) + to_rep((a[5]))) + to_rep((a[6]))) + to_rep((a[7]))))) or
  ((not ((mod((k + 1), 8) = 0) and (space2 = 8))) and ((((mod((k + 1),
  4) = 0) and (4 <= space2)) and
  (to_rep((a1[k])) = (((to_rep((a[k])) + to_rep((a[(k - 1)]))) + to_rep((a[(k - 2)]))) + to_rep((a[(k - 3)]))))) or
  ((not ((mod((k + 1), 4) = 0) and (4 <= space2))) and ((((mod((k + 1),
  2) = 0) and (2 <= space2)) and
  (to_rep((a1[k])) = (to_rep((a[k])) + to_rep((a[(k - 1)]))))) or
  ((not ((mod((k + 1), 2) = 0) and (2 <= space2))) and
  (to_rep((a1[k])) = to_rep((a[k])))))))))))) -> ((((((1 <= 2147483647) ->
  in_range3(space2)) and ((0 <= 2147483647) -> in_range2(left1))) and
  ((0 <= 2147483647) -> in_range2(right1))) and (space2 <  8)) ->
  (((temp___205 = result1) and (temp___2051 = space2)) ->
  (((left1 = result2) and (left2 = (space2 - 1))) -> ((((left2 <  8) and
  ((((temp___179 = a1) and ((temp___175 = right1) and ((temp___173 = a1) and
  ((temp___177 = a1) and ((temp___172 = left2) and ((temp___176 = a1) and
  ((0 = temp___180) and (((((((mod((left3 + 1), space2) = 0) and
  (all_left_elements_in(a2, left3, ((space2 * 2) * 1000000)) = true)) and
  (all_right_elements_in(a2, (left3 - 1), (space2 * 1000000)) = true)) and
  (mod((left3 + 1), (space2 * 2)) = space2)) and (not (8 <= left3))) and
  (forall k:int. (((0 <= k) and (k <= 7)) -> (((((0 <= k) and
  (k <= (left3 - space2))) and (mod((k + 1), (2 * space2)) = 0)) and
  (to_rep((a2[k])) = (to_rep((temp___176[k])) + to_rep((temp___177[(k - space2)]))))) or
  ((not (((0 <= k) and (k <= (left3 - space2))) and (mod((k + 1),
  (2 * space2)) = 0))) and (to_rep((a2[k])) = to_rep((temp___179[k])))))))) and
  (((((0 <= 2147483647) -> in_range2(left3)) and ((0 <= 2147483647) ->
  in_range2(right2))) and (left3 <  8)) and (((temp___1801 = result3) and
  (temp___1802 = left3)) and ((((o = (left3 + space2)) and
  in_range1((left3 + space2))) and ((right2 = result4) and (right3 = o))) and
  (((((((((((0 <= right3) and (right3 <= 7)) and (o3 = right3)) and
  (o4 = (a2[o3]))) and (o5 = to_rep(o4))) and ((((((0 <= left3) and
  (left3 <= 7)) and (o1 = left3)) and (o2 = (a2[o1]))) and
  (o6 = to_rep(o2))) and (o7 = (o6 + o5)))) and ((o8 = o7) and
  in_range1(o7))) and (to_rep(o9) = o8)) and ((((0 <= right3) and
  (right3 <= 7)) and (o10 = right3)) and (o11 = (a2[o10 <- o9])))) and
  ((a2 = result5) and (a3 = o11))) and (((((((o12 = (space2 * 2)) and
  in_range1((space2 * 2))) and (o13 = (left3 + o12))) and ((o14 = o13) and
  in_range1(o13))) and ((o15 = o14) and in_range2(o14))) and
  ((left3 = result6) and (left4 = o15))) and
  (not (left4 <  8))))))))))))))) and (((right3 = right4) and
  ((left4 = left5) and (a3 = a4))) and ((rho1 = temp___1802) and
  ((right5 = right3) and ((left6 = left4) and (a5 = a3)))))) and ((({
  int__content = right6 } = { int__content = right4 }) and (({ int__content =
  left7 } = { int__content = left5 }) and ({ map__content = a6 } = {
  map__content = a4 }))) and ((rho2 = rho1) and ((right7 = right5) and
  ((left8 = left6) and (a7 = a5))))))) or ((not (left2 <  8)) and
  (((right1 = right6) and ((left2 = left7) and (a1 = a6))) and
  ((rho2 = rho) and ((right7 = right1) and ((left8 = left2) and
  (a7 = a1))))))) -> (((((o16 = (space2 * 2)) and
  in_range1((space2 * 2))) and ((o17 = o16) and in_range3(o16))) and
  ((result7 = space2) and (space3 = o17))) -> ((space3 <  8) ->
  (temp___2051 <  space3))))))))))))))))
