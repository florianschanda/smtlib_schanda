;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-sort square_root_domain 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 1000000)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (square_root_domain square_root_domain) Bool)

(declare-const dummy square_root_domain)

(declare-datatypes ()
((square_root_domain__ref
 (mk_square_root_domain__ref
 (square_root_domain__content square_root_domain)))))
(define-fun square_root_domain__ref___projection ((a square_root_domain__ref)) square_root_domain
  (square_root_domain__content a))

(define-fun dynamic_invariant ((temp___expr_135 Int)
  (temp___is_init_132 Bool) (temp___skip_constant_133 Bool)
  (temp___do_toplevel_134 Bool)) Bool (=>
                                      (or (= temp___is_init_132 true)
                                      (<= 0 1000000)) (in_range
                                      temp___expr_135)))

(declare-sort square_root_range 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (square_root_range square_root_range) Bool)

(declare-const dummy1 square_root_range)

(declare-datatypes ()
((square_root_range__ref
 (mk_square_root_range__ref (square_root_range__content square_root_range)))))
(define-fun square_root_range__ref___projection ((a square_root_range__ref)) square_root_range
  (square_root_range__content a))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_141 Int)
  (temp___is_init_138 Bool) (temp___skip_constant_139 Bool)
  (temp___do_toplevel_140 Bool)) Bool (=>
                                      (or (= temp___is_init_138 true)
                                      (<= 0 1000)) (in_range1
                                      temp___expr_141)))

(declare-const q Int)

(declare-const r Int)

(declare-const temp___145 Int)

(declare-const temp___144 Int)

(declare-const o Int)

(declare-const r1 Int)

(declare-const result Int)

(declare-const q1 Int)

(declare-const q2 Int)

(declare-const r2 Int)

(declare-const result1 Int)

(declare-const r3 Int)

(declare-const q3 Int)

(declare-const q4 Int)

(declare-const q5 Int)

(declare-const r4 Int)

(declare-const q6 Int)

(declare-const r5 Int)

(declare-const q7 Int)

(declare-const r6 Int)

(declare-const q8 Int)

(declare-const r7 Int)

(declare-const q9 Int)

(declare-const r8 Int)

(declare-const q10 Int)

(declare-const r9 Int)

(define-fun r10 () int__ref (mk_int__ref r8))

(define-fun r11 () int__ref (mk_int__ref r6))

(define-fun q11 () int__ref (mk_int__ref q7))

(define-fun q12 () int__ref (mk_int__ref q5))

;; H
  (assert (in_range n))

;; H
  (assert (=> (<= 0 1000000) (in_range q)))

;; H
  (assert (=> (<= 0 1000000) (in_range r)))

;; H
  (assert (= result q))

;; H
  (assert (= q1 n))

;; H
  (assert (=> (< 0 q1) (= temp___145 q1)))

;; H
  (assert (=> (< 0 q1) (= temp___144 r)))

;; H
  (assert
  (=> (< 0 q1)
  (and (=> (<= 0 1000000) (in_range r2)) (=> (<= 0 1000000) (in_range q2)))))

;; H
  (assert (=> (< 0 q1) (and (= o (div1 n q2)) (in_range (div1 n q2)))))

;; H
  (assert (=> (< 0 q1) (= r2 result1)))

;; H
  (assert (=> (< 0 q1) (= r3 o)))

;; H
  (assert (=> (< 0 q1) (= q2 q3)))

;; H
  (assert (=> (< 0 q1) (= q4 q2)))

;; H
  (assert (=> (< 0 q1) (<= q2 r3)))

;; H
  (assert (=> (< 0 q1) (= r3 r4)))

;; H
  (assert (=> (< 0 q1) (= q12 (mk_int__ref q3))))

;; H
  (assert (=> (< 0 q1) (= r5 r3)))

;; H
  (assert (=> (< 0 q1) (= q6 q4)))

;; H
  (assert (=> (< 0 q1) (= r11 (mk_int__ref r4))))

;; H
  (assert (=> (< 0 q1) (= q11 q12)))

;; H
  (assert (=> (< 0 q1) (= r7 r5)))

;; H
  (assert (=> (< 0 q1) (= q8 q6)))

;; H
  (assert (=> (< 0 q1) (= r10 r11)))

;; H
  (assert (=> (< 0 q1) (= (mk_int__ref q9) q11)))

;; H
  (assert (=> (< 0 q1) (= r9 r7)))

;; H
  (assert (=> (< 0 q1) (= q10 q8)))

;; H
  (assert (=> (not (< 0 q1)) (= r10 (mk_int__ref r))))

;; H
  (assert (=> (not (< 0 q1)) (= q1 q9)))

;; H
  (assert (=> (not (< 0 q1)) (= r9 r1)))

;; H
  (assert (=> (not (< 0 q1)) (= q10 q1)))

(assert
;; WP_parameter_def
 ;; File "simple_math.ads", line 6, characters 0-0
  (not (in_range1 q9)))
(check-sat)
(exit)
