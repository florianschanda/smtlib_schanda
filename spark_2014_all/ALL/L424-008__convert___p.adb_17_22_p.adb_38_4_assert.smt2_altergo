(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq2 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq2(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq2(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq2(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq2(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq2(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type tTmy_s1SP1

predicate in_range1(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tTmy_s1SP1, tTmy_s1SP1 -> bool

logic dummy1 : tTmy_s1SP1

type tTmy_s1SP1__ref = { tTmy_s1SP1__content : tTmy_s1SP1
}

function tTmy_s1SP1__ref_5__projection(a: tTmy_s1SP1__ref) : tTmy_s1SP1 =
  (a).tTmy_s1SP1__content

logic attr__ATTRIBUTE_ADDRESS : int

type tTmy_s2SP1

predicate in_range2(x: int) = ((2 <= x) and (x <= 4))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tTmy_s2SP1, tTmy_s2SP1 -> bool

logic dummy2 : tTmy_s2SP1

type tTmy_s2SP1__ref = { tTmy_s2SP1__content : tTmy_s2SP1
}

function tTmy_s2SP1__ref_5__projection(a: tTmy_s2SP1__ref) : tTmy_s2SP1 =
  (a).tTmy_s2SP1__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type tTmy_s1SP11

predicate in_range3(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tTmy_s1SP11, tTmy_s1SP11 -> bool

logic dummy3 : tTmy_s1SP11

type tTmy_s1SP1__ref1 = { tTmy_s1SP1__content1 : tTmy_s1SP11
}

function tTmy_s1SP1__ref_6__projection(a: tTmy_s1SP1__ref1) : tTmy_s1SP11 =
  (a).tTmy_s1SP1__content1

logic attr__ATTRIBUTE_ADDRESS2 : int

type tTmy_s2SP11

predicate in_range4(x: int) = ((2 <= x) and (x <= 4))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tTmy_s2SP11, tTmy_s2SP11 -> bool

logic dummy4 : tTmy_s2SP11

type tTmy_s2SP1__ref1 = { tTmy_s2SP1__content1 : tTmy_s2SP11
}

function tTmy_s2SP1__ref_6__projection(a: tTmy_s2SP1__ref1) : tTmy_s2SP11 =
  (a).tTmy_s2SP1__content1

logic attr__ATTRIBUTE_ADDRESS3 : int

type tTmy_s1SP12

predicate in_range5(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tTmy_s1SP12, tTmy_s1SP12 -> bool

logic dummy5 : tTmy_s1SP12

type tTmy_s1SP1__ref2 = { tTmy_s1SP1__content2 : tTmy_s1SP12
}

function tTmy_s1SP1__ref_7__projection(a: tTmy_s1SP1__ref2) : tTmy_s1SP12 =
  (a).tTmy_s1SP1__content2

logic attr__ATTRIBUTE_ADDRESS4 : int

type tTmy_s2SP12

predicate in_range6(x: int) = ((2 <= x) and (x <= 4))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tTmy_s2SP12, tTmy_s2SP12 -> bool

logic dummy6 : tTmy_s2SP12

type tTmy_s2SP1__ref2 = { tTmy_s2SP1__content2 : tTmy_s2SP12
}

function tTmy_s2SP1__ref_7__projection(a: tTmy_s2SP1__ref2) : tTmy_s2SP12 =
  (a).tTmy_s2SP1__content2

logic attr__ATTRIBUTE_ADDRESS5 : int

type tTmy_s1SP13

predicate in_range7(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : tTmy_s1SP13, tTmy_s1SP13 -> bool

logic dummy7 : tTmy_s1SP13

type tTmy_s1SP1__ref3 = { tTmy_s1SP1__content3 : tTmy_s1SP13
}

function tTmy_s1SP1__ref_8__projection(a: tTmy_s1SP1__ref3) : tTmy_s1SP13 =
  (a).tTmy_s1SP1__content3

logic attr__ATTRIBUTE_ADDRESS6 : int

type tTmy_s2SP13

predicate in_range8(x: int) = ((2 <= x) and (x <= 4))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : tTmy_s2SP13, tTmy_s2SP13 -> bool

logic dummy8 : tTmy_s2SP13

type tTmy_s2SP1__ref3 = { tTmy_s2SP1__content3 : tTmy_s2SP13
}

function tTmy_s2SP1__ref_8__projection(a: tTmy_s2SP1__ref3) : tTmy_s2SP13 =
  (a).tTmy_s2SP1__content3

logic attr__ATTRIBUTE_ADDRESS7 : int

logic p__B19b__my_s1__aggregate_def : int, int, int -> (int,integer) farray

axiom def_axiom :
  (forall temp___319:int. forall temp___320:int. forall temp___321:int.
  ((((p__B19b__my_s1__aggregate_def(temp___319, temp___320,
  temp___321)[1]) = of_rep(temp___319)) and
  ((p__B19b__my_s1__aggregate_def(temp___319, temp___320,
  temp___321)[2]) = of_rep(temp___320))) and
  ((p__B19b__my_s1__aggregate_def(temp___319, temp___320,
  temp___321)[3]) = of_rep(temp___321))))

logic p__B22b__my_s1__aggregate_def : int, int, int -> (int,integer) farray

axiom def_axiom1 :
  (forall temp___324:int. forall temp___325:int. forall temp___326:int.
  ((((p__B22b__my_s1__aggregate_def(temp___324, temp___325,
  temp___326)[1]) = of_rep(temp___324)) and
  ((p__B22b__my_s1__aggregate_def(temp___324, temp___325,
  temp___326)[2]) = of_rep(temp___325))) and
  ((p__B22b__my_s1__aggregate_def(temp___324, temp___325,
  temp___326)[3]) = of_rep(temp___326))))

logic p__B25b__my_s1__aggregate_def : int, int, int -> (int,integer) farray

axiom def_axiom2 :
  (forall temp___329:int. forall temp___330:int. forall temp___331:int.
  ((((p__B25b__my_s1__aggregate_def(temp___329, temp___330,
  temp___331)[1]) = of_rep(temp___329)) and
  ((p__B25b__my_s1__aggregate_def(temp___329, temp___330,
  temp___331)[2]) = of_rep(temp___330))) and
  ((p__B25b__my_s1__aggregate_def(temp___329, temp___330,
  temp___331)[3]) = of_rep(temp___331))))

logic p__B28b__my_s1__aggregate_def : int, int, int -> (int,integer) farray

axiom def_axiom3 :
  (forall temp___334:int. forall temp___335:int. forall temp___336:int.
  ((((p__B28b__my_s1__aggregate_def(temp___334, temp___335,
  temp___336)[1]) = of_rep(temp___334)) and
  ((p__B28b__my_s1__aggregate_def(temp___334, temp___335,
  temp___336)[2]) = of_rep(temp___335))) and
  ((p__B28b__my_s1__aggregate_def(temp___334, temp___335,
  temp___336)[3]) = of_rep(temp___336))))

 (* File "p.adb", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall my_s1:(int,integer) farray. forall my_s2:(int,integer) farray.
  forall my_s11:(int,integer) farray. forall my_s21:(int,integer) farray.
  forall result:(int,integer) farray. forall my_s12:(int,integer) farray.
  forall result1:(int,integer) farray. forall my_s22:(int,integer) farray.
  forall result2:(int,integer) farray. forall my_s13:(int,integer) farray.
  forall result3:(int,integer) farray. forall my_s23:(int,integer) farray.
  (((({ map__content = result } = { map__content = my_s1 }) and
  (my_s12 = p__B19b__my_s1__aggregate_def(1, 2, 3))) and ((({ map__content =
  result1 } = { map__content = my_s2 }) and (my_s22 = slide(my_s12, 1,
  2))) and (to_rep((my_s22[2])) = 1))) -> ((({ map__content = result2 } = {
  map__content = my_s11 }) and (my_s13 = p__B22b__my_s1__aggregate_def(1, 2,
  3))) -> ((({ map__content = result3 } = { map__content = my_s21 }) and
  (my_s23 = slide(my_s13, 1, 2))) -> (not (to_rep((my_s23[2])) = 1))))))
