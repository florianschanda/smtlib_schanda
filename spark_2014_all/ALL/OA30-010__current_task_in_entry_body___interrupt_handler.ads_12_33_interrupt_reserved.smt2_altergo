(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic attr__ATTRIBUTE_ADDRESS : int

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type task_id__ref = { task_id__content : us_rep
}

function task_id__ref___projection(a: task_id__ref) : us_rep =
  (a).task_id__content

type us_split_fields = { rec__interrupt_handler__po__t : us_rep
}

function us_split_fields_T__projection(a: us_split_fields) : us_rep =
  (a).rec__interrupt_handler__po__t

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_28__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep_29__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. (0 <= object__size1({ us_split_fields1 = {
  rec__interrupt_handler__po__t = a } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. (0 <= object__alignment1({ us_split_fields1 = {
  rec__interrupt_handler__po__t = a } })))

logic interrupt_handler__po__t__first__bit : int

logic interrupt_handler__po__t__last__bit : int

logic interrupt_handler__po__t__position : int

axiom interrupt_handler__po__t__first__bit_axiom :
  (0 <= interrupt_handler__po__t__first__bit)

axiom interrupt_handler__po__t__last__bit_axiom :
  (interrupt_handler__po__t__first__bit <  interrupt_handler__po__t__last__bit)

axiom interrupt_handler__po__t__position_axiom :
  (0 <= interrupt_handler__po__t__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

type po__ref = { po__content : us_rep1
}

function po__ref___projection(a: po__ref) : us_rep1 = (a).po__content

logic self__ : us_rep

 (* File "interrupt_handler.ads", line 9, characters 0-0 *)
goal WP_parameter_def : (forall temp___1538:bool. (temp___1538 = false))
