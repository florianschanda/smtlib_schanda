;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-fun dummy4 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(declare-sort classt 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (classt classt) Bool)

(declare-fun dummy5 () classt)

(declare-datatypes ()
((classt__ref (mk_classt__ref (classt__content classt)))))
(define-fun classt__ref___projection ((a classt__ref)) classt (classt__content
                                                              a))

(define-fun dynamic_invariant1 ((temp___expr_309 Int)
  (temp___is_init_306 Bool) (temp___skip_constant_307 Bool)
  (temp___do_toplevel_308 Bool)) Bool (=>
                                      (or (= temp___is_init_306 true)
                                      (<= 0 5)) (in_range5 temp___expr_309)))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq2 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun dummy6 () us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-sort classtexti 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (classtexti classtexti) Bool)

(declare-fun dummy7 () classtexti)

(declare-datatypes ()
((classtexti__ref (mk_classtexti__ref (classtexti__content classtexti)))))
(define-fun classtexti__ref___projection ((a classtexti__ref)) classtexti
  (classtexti__content a))

(declare-fun to_rep2 (classtexti) Int)

(declare-fun of_rep2 (Int) classtexti)

;; inversion_axiom
  (assert
  (forall ((x classtexti))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x classtexti)) (! (in_range6
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun dummy8 () (Array Int character))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq8 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__configdata__classstringt__text (Array Int character))(rec__configdata__classstringt__length classtexti)))))
(define-fun us_split_fields_Text__projection ((a us_split_fields)) (Array Int character)
  (rec__configdata__classstringt__text a))

(define-fun us_split_fields_Length2__projection ((a us_split_fields)) classtexti
  (rec__configdata__classstringt__length a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_7__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_8__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                               a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq
                            (rec__configdata__classstringt__text
                            (us_split_fields1 a)) 1 12
                            (rec__configdata__classstringt__text
                            (us_split_fields1 b)) 1 12) true)
                         (= (to_rep2
                            (rec__configdata__classstringt__length
                            (us_split_fields1 a))) (to_rep2
                                                   (rec__configdata__classstringt__length
                                                   (us_split_fields1 b)))))
                    true false))

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-fun configdata__classstringt__text__first__bit () Int)

(declare-fun configdata__classstringt__text__last__bit () Int)

(declare-fun configdata__classstringt__text__position () Int)

;; configdata__classstringt__text__first__bit_axiom
  (assert (<= 0 configdata__classstringt__text__first__bit))

;; configdata__classstringt__text__last__bit_axiom
  (assert
  (< configdata__classstringt__text__first__bit configdata__classstringt__text__last__bit))

;; configdata__classstringt__text__position_axiom
  (assert (<= 0 configdata__classstringt__text__position))

(declare-fun configdata__classstringt__length__first__bit () Int)

(declare-fun configdata__classstringt__length__last__bit () Int)

(declare-fun configdata__classstringt__length__position () Int)

;; configdata__classstringt__length__first__bit_axiom
  (assert (<= 0 configdata__classstringt__length__first__bit))

;; configdata__classstringt__length__last__bit_axiom
  (assert
  (< configdata__classstringt__length__first__bit configdata__classstringt__length__last__bit))

;; configdata__classstringt__length__position_axiom
  (assert (<= 0 configdata__classstringt__length__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-fun dummy9 () us_rep1)

(declare-datatypes ()
((classstringt__ref (mk_classstringt__ref (classstringt__content us_rep1)))))
(define-fun classstringt__ref___projection ((a classstringt__ref)) us_rep1
  (classstringt__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_162 Int))
                           (=>
                           (and (<= a__first temp___idx_162)
                           (<= temp___idx_162 a__last))
                           (= (bool_eq3 (select a temp___idx_162)
                              (select b (+ (- b__first a__first) temp___idx_162))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_162 Int))
  (=> (and (<= a__first temp___idx_162) (<= temp___idx_162 a__last))
  (= (bool_eq3 (select a temp___idx_162)
     (select b (+ (- b__first a__first) temp___idx_162))) true))))))))

(declare-fun classstringlookup () (Array Int us_rep1))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun configdata__classstringlookup__aggregate_def (us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1) (Array Int us_rep1))

;; def_axiom
  (assert
  (forall ((temp___164 us_rep1) (temp___165 us_rep1) (temp___166 us_rep1)
  (temp___167 us_rep1) (temp___168 us_rep1) (temp___169 us_rep1))
  (let ((temp___163 (configdata__classstringlookup__aggregate_def temp___164
                    temp___165 temp___166 temp___167 temp___168 temp___169)))
  (and
  (and
  (and
  (and
  (and (= (select temp___163 0) temp___164)
  (= (select temp___163 1) temp___165)) (= (select temp___163 2) temp___166))
  (= (select temp___163 3) temp___167)) (= (select temp___163 4) temp___168))
  (= (select temp___163 5) temp___169)))))

(declare-fun temp___String_Literal_171 (tuple0) (Array Int character))

;; temp___String_Literal_171__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 1)) 117)
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 2)) 110))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 3)) 109))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 5)) 114))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 6)) 107))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 7)) 101))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 8)) 100))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_171 us_void_param) 12)) 32)) :pattern (
  (temp___String_Literal_171 us_void_param)) )))

(declare-fun temp___String_Literal_172 (tuple0) (Array Int character))

;; temp___String_Literal_172__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 1)) 117)
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 2)) 110))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 3)) 99))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 5)) 97))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 6)) 115))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 7)) 115))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 8)) 105))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 9)) 102))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 10)) 105))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 11)) 101))
     (= (to_rep (select (temp___String_Literal_172 us_void_param) 12)) 100)) :pattern (
  (temp___String_Literal_172 us_void_param)) )))

(declare-fun temp___String_Literal_173 (tuple0) (Array Int character))

;; temp___String_Literal_173__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 1)) 114)
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 3)) 115))
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 5)) 114))
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 6)) 105))
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 7)) 99))
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 8)) 116))
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 9)) 101))
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 10)) 100))
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_173 us_void_param) 12)) 32)) :pattern (
  (temp___String_Literal_173 us_void_param)) )))

(declare-fun temp___String_Literal_174 (tuple0) (Array Int character))

;; temp___String_Literal_174__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 1)) 99)
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 3)) 110))
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 4)) 102))
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 5)) 105))
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 6)) 100))
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 7)) 101))
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 8)) 110))
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 10)) 105))
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 11)) 97))
     (= (to_rep (select (temp___String_Literal_174 us_void_param) 12)) 108)) :pattern (
  (temp___String_Literal_174 us_void_param)) )))

(declare-fun temp___String_Literal_175 (tuple0) (Array Int character))

;; temp___String_Literal_175__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 1)) 115)
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 2)) 101))
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 3)) 99))
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 4)) 114))
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 6)) 116))
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_175 us_void_param) 12)) 32)) :pattern (
  (temp___String_Literal_175 us_void_param)) )))

(declare-fun temp___String_Literal_176 (tuple0) (Array Int character))

;; temp___String_Literal_176__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 1)) 116)
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 3)) 112))
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 6)) 99))
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 7)) 114))
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 8)) 101))
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_176 us_void_param) 12)) 32)) :pattern (
  (temp___String_Literal_176 us_void_param)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (integer integer) Bool)

(declare-fun dummy10 () integer)

(declare-datatypes () ((t31b__ref (mk_t31b__ref (t31b__content integer)))))
(define-fun t31b__ref___projection ((a t31b__ref)) integer (t31b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant6 ((temp___expr_1053 Int)
  (temp___is_init_1050 Bool) (temp___skip_constant_1051 Bool)
  (temp___do_toplevel_1052 Bool)) Bool (=>
                                       (or (= temp___is_init_1050 true)
                                       (<= 1 12)) (in_range6
                                       temp___expr_1053)))

;; classstringlookup__def_axiom
  (assert
  (= classstringlookup (configdata__classstringlookup__aggregate_def
                       (mk___rep
                       (mk___split_fields (temp___String_Literal_171 Tuple0)
                       (of_rep2 8)))
                       (mk___rep
                       (mk___split_fields (temp___String_Literal_172 Tuple0)
                       (of_rep2 12)))
                       (mk___rep
                       (mk___split_fields (temp___String_Literal_173 Tuple0)
                       (of_rep2 10)))
                       (mk___rep
                       (mk___split_fields (temp___String_Literal_174 Tuple0)
                       (of_rep2 12)))
                       (mk___rep
                       (mk___split_fields (temp___String_Literal_175 Tuple0)
                       (of_rep2 6)))
                       (mk___rep
                       (mk___split_fields (temp___String_Literal_176 Tuple0)
                       (of_rep2 9))))))

(declare-fun value () Int)

(declare-fun rawclass () (Array Int character))

(declare-fun stop () Int)

(declare-fun matched () Bool)

(declare-fun c () Int)

(declare-fun r30b () Int)

(declare-fun o () classtexti)

(declare-fun o1 () (Array Int character))

(declare-fun o2 () classtexti)

(declare-fun o3 () classtexti)

(declare-fun o4 () (Array Int character))

(declare-fun o5 () classtexti)

(declare-fun o6 () classtexti)

(declare-fun o7 () (Array Int character))

(declare-fun o8 () classtexti)

(declare-fun o9 () classtexti)

(declare-fun o10 () (Array Int character))

(declare-fun o11 () classtexti)

(declare-fun o12 () classtexti)

(declare-fun o13 () (Array Int character))

(declare-fun o14 () classtexti)

(declare-fun o15 () classtexti)

(declare-fun o16 () (Array Int character))

(declare-fun o17 () classtexti)

(declare-fun o18 () (Array Int character))

(declare-fun o19 () classtexti)

(declare-fun o20 () (Array Int character))

(declare-fun o21 () classtexti)

(declare-fun o22 () (Array Int character))

(declare-fun o23 () classtexti)

(declare-fun o24 () (Array Int character))

(declare-fun o25 () classtexti)

(declare-fun o26 () us_rep1)

(declare-fun o27 () us_rep1)

(declare-fun temp___1186 () (Array Int us_rep1))

(declare-fun o28 () integer)

(declare-fun o29 () integer)

(declare-fun result () bool__ref)

(declare-fun matched1 () Bool)

(declare-fun result1 () int__ref)

(declare-fun value1 () Int)

(declare-fun stop1 () Int)

(declare-fun file__getline__item () (Array Int character))

(declare-fun result2 () map__ref)

(declare-fun rawclass1 () (Array Int character))

(declare-fun result3 () int__ref)

(declare-fun c1 () Int)

(declare-fun result4 () bool__ref)

(declare-fun matched2 () Bool)

(declare-fun result5 () int__ref)

(declare-fun r30b1 () Int)

;; H
  (assert (= (to_rep2 o15) 9))

;; H
  (assert (= (temp___String_Literal_176 Tuple0) o16))

;; H
  (assert (= o15 o17))

;; H
  (assert (= o18 o16))

;; H
  (assert (= o19 o17))

;; H
  (assert (= (to_rep2 o12) 6))

;; H
  (assert (= (temp___String_Literal_175 Tuple0) o13))

;; H
  (assert (= o12 o14))

;; H
  (assert (= o20 o13))

;; H
  (assert (= o21 o14))

;; H
  (assert (= (to_rep2 o9) 12))

;; H
  (assert (= (temp___String_Literal_174 Tuple0) o10))

;; H
  (assert (= o9 o11))

;; H
  (assert (= o22 o10))

;; H
  (assert (= o23 o11))

;; H
  (assert (= (to_rep2 o6) 10))

;; H
  (assert (= (temp___String_Literal_173 Tuple0) o7))

;; H
  (assert (= o6 o8))

;; H
  (assert (= o24 o7))

;; H
  (assert (= o25 o8))

;; H
  (assert (= (to_rep2 o3) 12))

;; H
  (assert (= (temp___String_Literal_172 Tuple0) o4))

;; H
  (assert (= o3 o5))

;; H
  (assert (= o26 (mk___rep (mk___split_fields o4 o5))))

;; H
  (assert (= (to_rep2 o) 8))

;; H
  (assert (= (temp___String_Literal_171 Tuple0) o1))

;; H
  (assert (= o o2))

;; H
  (assert (= o27 (mk___rep (mk___split_fields o1 o2))))

;; H
  (assert
  (= temp___1186 (configdata__classstringlookup__aggregate_def o27 o26
                 (mk___rep (mk___split_fields o24 o25))
                 (mk___rep (mk___split_fields o22 o23))
                 (mk___rep (mk___split_fields o20 o21))
                 (mk___rep (mk___split_fields o18 o19)))))

;; H
  (assert (= temp___1186 classstringlookup))

;; H
  (assert (=> (<= 0 5) (in_range5 value)))

;; H
  (assert (=> (<= 0 2147483647) (in_range4 stop)))

;; H
  (assert (= result (mk_bool__ref matched)))

;; H
  (assert (= matched1 (of_int 0)))

;; H
  (assert (= result1 (mk_int__ref value)))

;; H
  (assert (= value1 0))

;; H
  (assert (= (to_rep1 o29) 12))

;; H
  (assert (= (to_rep1 o28) 1))

;; H
  (assert (in_range4 stop1))

;; H
  (assert (= result2 (mk_map__ref rawclass)))

;; H
  (assert
  (= rawclass1 (slide file__getline__item (to_rep1 (first (mk 1 12))) 1)))

;; H
  (assert (= result3 (mk_int__ref c)))

;; H
  (assert (= c1 0))

;; H
  (assert
  (= stop1 (to_rep2
           (rec__configdata__classstringt__length
           (us_split_fields1 (select classstringlookup c1))))))

;; H
  (assert (= result4 (mk_bool__ref matched1)))

;; H
  (assert (= matched2 (of_int 1)))

;; H
  (assert (= result5 (mk_int__ref r30b)))

;; H
  (assert (= r30b1 stop1))

;; H
  (assert (in_range4 r30b1))

;; H
  (assert (<= 1 r30b1))

(assert
;; WP_parameter_def
 ;; File "configdata.adb", line 256, characters 0-0
  (not (<= 1 1)))
(check-sat)
(exit)
