(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__dispatching_result__root__f1 : natural;
rec__ext__ : us_private
}

function us_split_fields_F1__projection(a: us_split_fields) : natural =
  (a).rec__dispatching_result__root__f1

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  (((to_rep(((a).us_split_fields1).rec__dispatching_result__root__f1) = to_rep(((b).us_split_fields1).rec__dispatching_result__root__f1)) ->
  (bool_eq2(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields1).rec__dispatching_result__root__f1) = to_rep(((b).us_split_fields1).rec__dispatching_result__root__f1))) ->
  (bool_eq2(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__size({ us_split_fields1 = {
  rec__dispatching_result__root__f1 = a; rec__ext__ = a1 }; attr__tag = a2
  })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:natural. forall a1:us_private. forall a2:int.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__dispatching_result__root__f1 = a; rec__ext__ = a1 }; attr__tag = a2
  })))

logic dispatching_result__root__f1__first__bit : int

logic dispatching_result__root__f1__last__bit : int

logic dispatching_result__root__f1__position : int

axiom dispatching_result__root__f1__first__bit_axiom :
  (0 <= dispatching_result__root__f1__first__bit)

axiom dispatching_result__root__f1__last__bit_axiom :
  (dispatching_result__root__f1__first__bit <  dispatching_result__root__f1__last__bit)

axiom dispatching_result__root__f1__position_axiom :
  (0 <= dispatching_result__root__f1__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : natural

logic dummy2 : us_private

logic dummy3 : int

type root__ref = { root__content : us_rep
}

function root__ref___projection(a: root__ref) : us_rep = (a).root__content

logic v : int

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "dispatching_result.ads", line 2, characters 0-0 *)
goal WP_parameter_def :
  (forall dispatching_result__init__result:natural.
  forall dispatching_result__init__result1:us_private.
  forall dispatching_result__init__result2:int. forall o:natural.
  forall o1:natural. forall o2:us_private. forall o3:natural.
  forall o4:us_private. forall o5:int. forall result:natural.
  forall result1:us_private. forall result2:int.
  forall dispatching_result__init__result3:natural.
  forall dispatching_result__init__result4:us_private.
  forall dispatching_result__init__result5:int.
  forall dispatching_result__init__result6:natural.
  forall dispatching_result__init__result7:us_private.
  forall dispatching_result__init__result8:int.
  forall dispatching_result__init__result9:natural.
  forall dispatching_result__init__result10:us_private.
  forall dispatching_result__init__result11:int.
  forall dispatching_result__init__result12:natural.
  forall dispatching_result__init__result13:us_private.
  forall dispatching_result__init__result14:int.
  forall dispatching_result__init__result15:natural.
  forall dispatching_result__init__result16:us_private.
  forall dispatching_result__init__result17:int.
  (forall result3:natural. forall result4:us_private. forall result5:int.
  ((in_range(v) and
  (((((((dispatching_result__init__result6 = dispatching_result__init__result3) and
  (dispatching_result__init__result7 = dispatching_result__init__result4)) and
  (dispatching_result__init__result8 = dispatching_result__init__result5)) and
  (((dispatching_result__init__result9 = dispatching_result__init__result3) and
  (dispatching_result__init__result10 = dispatching_result__init__result4)) and
  (dispatching_result__init__result11 = dispatching_result__init__result5))) and
  ((((to_rep(o) = v) and ((o = o1) and (us_null_ext__ = o2))) and
  (((o3 = o1) and (o4 = o2)) and (us_tag = o5))) and
  ((((result = dispatching_result__init__result) and
  (result1 = dispatching_result__init__result1)) and
  (result2 = dispatching_result__init__result2)) and
  (((o3 = dispatching_result__init__result3) and
  (o4 = dispatching_result__init__result4)) and
  (o5 = dispatching_result__init__result5))))) and
  ((((dispatching_result__init__result12 = dispatching_result__init__result6) and
  (dispatching_result__init__result13 = dispatching_result__init__result7)) and
  (dispatching_result__init__result14 = dispatching_result__init__result8)) and
  (((dispatching_result__init__result15 = dispatching_result__init__result9) and
  (dispatching_result__init__result16 = dispatching_result__init__result10)) and
  (dispatching_result__init__result17 = dispatching_result__init__result11)))) and
  (((result3 = dispatching_result__init__result12) and
  (result4 = dispatching_result__init__result13)) and
  (result5 = dispatching_result__init__result14)))) ->
  (to_rep(dispatching_result__init__result12) = v))))
