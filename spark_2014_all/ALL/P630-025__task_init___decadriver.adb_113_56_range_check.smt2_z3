;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort bits_3 0)

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 7))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (bits_3 bits_3) Bool)

(declare-const dummy2 bits_3)

(declare-datatypes ((bits_3__ref 0))
(((mk_bits_3__ref (bits_3__content bits_3)))))
(define-fun bits_3__ref___projection ((a bits_3__ref)) bits_3 (bits_3__content
                                                              a))

(declare-fun to_rep2 (bits_3) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) bits_3)

;; inversion_axiom
  (assert
  (forall ((x bits_3))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_3)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 8))))
     (=> (in_range3 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2
                                                               (of_rep2 x))) )))

(define-fun to_int4 ((x bits_3)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_3)) (! (in_range_int
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort bits_7 0)

(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 127))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))

(declare-fun user_eq3 (bits_7 bits_7) Bool)

(declare-const dummy3 bits_7)

(declare-datatypes ((bits_7__ref 0))
(((mk_bits_7__ref (bits_7__content bits_7)))))
(define-fun bits_7__ref___projection ((a bits_7__ref)) bits_7 (bits_7__content
                                                              a))

(declare-fun to_rep3 (bits_7) (_ BitVec 8))

(declare-fun of_rep3 ((_ BitVec 8)) bits_7)

;; inversion_axiom
  (assert
  (forall ((x bits_7))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_7)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 128))))
     (=> (in_range4 y) (= (to_rep3 (of_rep3 x)) y))) :pattern ((to_rep3
                                                               (of_rep3 x))) )))

(define-fun to_int5 ((x bits_7)) Int (bv2int (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_7)) (! (in_range_int1
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort bits_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))

(declare-fun user_eq4 (bits_8 bits_8) Bool)

(declare-const dummy4 bits_8)

(declare-datatypes ((bits_8__ref 0))
(((mk_bits_8__ref (bits_8__content bits_8)))))
(define-fun bits_8__ref___projection ((a bits_8__ref)) bits_8 (bits_8__content
                                                              a))

(declare-fun to_rep4 (bits_8) (_ BitVec 8))

(declare-fun of_rep4 ((_ BitVec 8)) bits_8)

;; inversion_axiom
  (assert
  (forall ((x bits_8))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))) )))

(define-fun to_int6 ((x bits_8)) Int (bv2int (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_8)) (! (uint_in_range
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int bits_8))))))
(declare-fun slide ((Array Int bits_8) Int Int) (Array Int bits_8))

;; slide_eq
  (assert
  (forall ((a (Array Int bits_8)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int bits_8)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int bits_8) Int Int (Array Int bits_8) Int
  Int) (Array Int bits_8))

;; concat_def
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (bits_8 Int) (Array Int bits_8))

;; singleton_def
  (assert
  (forall ((v bits_8))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int bits_8)) (a__first Int) (a__last Int)
  (b (Array Int bits_8)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep4 (select a temp___idx_132)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep4 (select a temp___idx_132)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int bits_8) Int Int (Array Int bits_8) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep4 (select a (+ i 1))) (to_rep4 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep4 (select a (+ j 1))) (to_rep4 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0)) (((mk___t (elts (Array Int bits_8))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int bits_8) (elts a))

(define-fun of_array ((a (Array Int bits_8)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int bits_8)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int bits_8)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int bits_8)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int bits_8))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-const dummy5 us_t)

(declare-datatypes ((byte_array__ref 0))
(((mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content
                                                                    a))

(declare-sort bits_1 0)

(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 1))))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq6 (bits_1 bits_1) Bool)

(declare-const dummy6 bits_1)

(declare-datatypes ((bits_1__ref 0))
(((mk_bits_1__ref (bits_1__content bits_1)))))
(define-fun bits_1__ref___projection ((a bits_1__ref)) bits_1 (bits_1__content
                                                              a))

(declare-fun to_rep5 (bits_1) (_ BitVec 8))

(declare-fun of_rep5 ((_ BitVec 8)) bits_1)

;; inversion_axiom
  (assert
  (forall ((x bits_1))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_1)) (! (in_range5 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 2))))
     (=> (in_range5 y) (= (to_rep5 (of_rep5 x)) y))) :pattern ((to_rep5
                                                               (of_rep5 x))) )))

(define-fun to_int7 ((x bits_1)) Int (bv2int (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_1)) (! (in_range_int2
  (to_int7 x)) :pattern ((to_int7 x)) )))

(declare-sort bits_2 0)

(define-fun in_range6 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 3))))

(define-fun in_range_int3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))

(declare-fun user_eq7 (bits_2 bits_2) Bool)

(declare-const dummy7 bits_2)

(declare-datatypes ((bits_2__ref 0))
(((mk_bits_2__ref (bits_2__content bits_2)))))
(define-fun bits_2__ref___projection ((a bits_2__ref)) bits_2 (bits_2__content
                                                              a))

(declare-fun to_rep6 (bits_2) (_ BitVec 8))

(declare-fun of_rep6 ((_ BitVec 8)) bits_2)

;; inversion_axiom
  (assert
  (forall ((x bits_2))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_2)) (! (in_range6 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 4))))
     (=> (in_range6 y) (= (to_rep6 (of_rep6 x)) y))) :pattern ((to_rep6
                                                               (of_rep6 x))) )))

(define-fun to_int8 ((x bits_2)) Int (bv2int (to_rep6 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_2)) (! (in_range_int3
  (to_int8 x)) :pattern ((to_int8 x)) )))

(declare-sort bits_12 0)

(define-fun in_range7 ((x (_ BitVec 16))) Bool (and
                                               (bvule ((_ int2bv 16) 0) x)
                                               (bvule x ((_ int2bv 16) 4095))))

(define-fun in_range_int4 ((x Int)) Bool (and (<= 0 x) (<= x 4095)))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 16))

(declare-fun user_eq8 (bits_12 bits_12) Bool)

(declare-const dummy8 bits_12)

(declare-datatypes ((bits_12__ref 0))
(((mk_bits_12__ref (bits_12__content bits_12)))))
(define-fun bits_12__ref___projection ((a bits_12__ref)) bits_12 (bits_12__content
                                                                 a))

(declare-fun to_rep7 (bits_12) (_ BitVec 16))

(declare-fun of_rep7 ((_ BitVec 16)) bits_12)

;; inversion_axiom
  (assert
  (forall ((x bits_12))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_12)) (! (in_range7 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (let ((y (bvurem x ((_ int2bv 16) 4096))))
     (=> (in_range7 y) (= (to_rep7 (of_rep7 x)) y))) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(define-fun to_int9 ((x bits_12)) Int (bv2int (to_rep7 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_12)) (! (in_range_int4
  (to_int9 x)) :pattern ((to_int9 x)) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__dw1000__register_types__rx_finfo_type__rxflen bits_7)(rec__dw1000__register_types__rx_finfo_type__rxfle bits_3)(rec__dw1000__register_types__rx_finfo_type__rxnspl bits_2)(rec__dw1000__register_types__rx_finfo_type__rxbr bits_2)(rec__dw1000__register_types__rx_finfo_type__rng bits_1)(rec__dw1000__register_types__rx_finfo_type__rxprf bits_2)(rec__dw1000__register_types__rx_finfo_type__rxpsr bits_2)(rec__dw1000__register_types__rx_finfo_type__rxpacc bits_12)(rec__dw1000__register_types__rx_finfo_type__reserved bits_1)))))
(define-fun us_split_fields_RXFLEN__projection ((a us_split_fields)) bits_7
  (rec__dw1000__register_types__rx_finfo_type__rxflen a))

(define-fun us_split_fields_RXFLE__projection ((a us_split_fields)) bits_3
  (rec__dw1000__register_types__rx_finfo_type__rxfle a))

(define-fun us_split_fields_RXNSPL__projection ((a us_split_fields)) bits_2
  (rec__dw1000__register_types__rx_finfo_type__rxnspl a))

(define-fun us_split_fields_RXBR__projection ((a us_split_fields)) bits_2
  (rec__dw1000__register_types__rx_finfo_type__rxbr a))

(define-fun us_split_fields_RNG__projection ((a us_split_fields)) bits_1
  (rec__dw1000__register_types__rx_finfo_type__rng a))

(define-fun us_split_fields_RXPRF__projection ((a us_split_fields)) bits_2
  (rec__dw1000__register_types__rx_finfo_type__rxprf a))

(define-fun us_split_fields_RXPSR__projection ((a us_split_fields)) bits_2
  (rec__dw1000__register_types__rx_finfo_type__rxpsr a))

(define-fun us_split_fields_RXPACC__projection ((a us_split_fields)) bits_12
  (rec__dw1000__register_types__rx_finfo_type__rxpacc a))

(define-fun us_split_fields_Reserved__projection ((a us_split_fields)) bits_1
  (rec__dw1000__register_types__rx_finfo_type__reserved a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___13__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___13__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (= (to_rep3
                           (rec__dw1000__register_types__rx_finfo_type__rxflen
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__dw1000__register_types__rx_finfo_type__rxflen
                                                  (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__dw1000__register_types__rx_finfo_type__rxfle
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__dw1000__register_types__rx_finfo_type__rxfle
                                                  (us_split_fields1 b)))))
                        (= (to_rep6
                           (rec__dw1000__register_types__rx_finfo_type__rxnspl
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__dw1000__register_types__rx_finfo_type__rxnspl
                                                  (us_split_fields1 b)))))
                        (= (to_rep6
                           (rec__dw1000__register_types__rx_finfo_type__rxbr
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__dw1000__register_types__rx_finfo_type__rxbr
                                                  (us_split_fields1 b)))))
                        (= (to_rep5
                           (rec__dw1000__register_types__rx_finfo_type__rng
                           (us_split_fields1 a))) (to_rep5
                                                  (rec__dw1000__register_types__rx_finfo_type__rng
                                                  (us_split_fields1 b)))))
                        (= (to_rep6
                           (rec__dw1000__register_types__rx_finfo_type__rxprf
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__dw1000__register_types__rx_finfo_type__rxprf
                                                  (us_split_fields1 b)))))
                        (= (to_rep6
                           (rec__dw1000__register_types__rx_finfo_type__rxpsr
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__dw1000__register_types__rx_finfo_type__rxpsr
                                                  (us_split_fields1 b)))))
                        (= (to_rep7
                           (rec__dw1000__register_types__rx_finfo_type__rxpacc
                           (us_split_fields1 a))) (to_rep7
                                                  (rec__dw1000__register_types__rx_finfo_type__rxpacc
                                                  (us_split_fields1 b)))))
                        (= (to_rep5
                           (rec__dw1000__register_types__rx_finfo_type__reserved
                           (us_split_fields1 a))) (to_rep5
                                                  (rec__dw1000__register_types__rx_finfo_type__reserved
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const dw1000__register_types__rx_finfo_type__rxflen__first__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxflen__last__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxflen__position Int)

;; dw1000__register_types__rx_finfo_type__rxflen__first__bit_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxflen__first__bit))

;; dw1000__register_types__rx_finfo_type__rxflen__last__bit_axiom
  (assert
  (< dw1000__register_types__rx_finfo_type__rxflen__first__bit dw1000__register_types__rx_finfo_type__rxflen__last__bit))

;; dw1000__register_types__rx_finfo_type__rxflen__position_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxflen__position))

(declare-const dw1000__register_types__rx_finfo_type__rxfle__first__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxfle__last__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxfle__position Int)

;; dw1000__register_types__rx_finfo_type__rxfle__first__bit_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxfle__first__bit))

;; dw1000__register_types__rx_finfo_type__rxfle__last__bit_axiom
  (assert
  (< dw1000__register_types__rx_finfo_type__rxfle__first__bit dw1000__register_types__rx_finfo_type__rxfle__last__bit))

;; dw1000__register_types__rx_finfo_type__rxfle__position_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxfle__position))

(declare-const dw1000__register_types__rx_finfo_type__rxnspl__first__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxnspl__last__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxnspl__position Int)

;; dw1000__register_types__rx_finfo_type__rxnspl__first__bit_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxnspl__first__bit))

;; dw1000__register_types__rx_finfo_type__rxnspl__last__bit_axiom
  (assert
  (< dw1000__register_types__rx_finfo_type__rxnspl__first__bit dw1000__register_types__rx_finfo_type__rxnspl__last__bit))

;; dw1000__register_types__rx_finfo_type__rxnspl__position_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxnspl__position))

(declare-const dw1000__register_types__rx_finfo_type__rxbr__first__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxbr__last__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxbr__position Int)

;; dw1000__register_types__rx_finfo_type__rxbr__first__bit_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxbr__first__bit))

;; dw1000__register_types__rx_finfo_type__rxbr__last__bit_axiom
  (assert
  (< dw1000__register_types__rx_finfo_type__rxbr__first__bit dw1000__register_types__rx_finfo_type__rxbr__last__bit))

;; dw1000__register_types__rx_finfo_type__rxbr__position_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxbr__position))

(declare-const dw1000__register_types__rx_finfo_type__rng__first__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rng__last__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rng__position Int)

;; dw1000__register_types__rx_finfo_type__rng__first__bit_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rng__first__bit))

;; dw1000__register_types__rx_finfo_type__rng__last__bit_axiom
  (assert
  (< dw1000__register_types__rx_finfo_type__rng__first__bit dw1000__register_types__rx_finfo_type__rng__last__bit))

;; dw1000__register_types__rx_finfo_type__rng__position_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rng__position))

(declare-const dw1000__register_types__rx_finfo_type__rxprf__first__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxprf__last__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxprf__position Int)

;; dw1000__register_types__rx_finfo_type__rxprf__first__bit_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxprf__first__bit))

;; dw1000__register_types__rx_finfo_type__rxprf__last__bit_axiom
  (assert
  (< dw1000__register_types__rx_finfo_type__rxprf__first__bit dw1000__register_types__rx_finfo_type__rxprf__last__bit))

;; dw1000__register_types__rx_finfo_type__rxprf__position_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxprf__position))

(declare-const dw1000__register_types__rx_finfo_type__rxpsr__first__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxpsr__last__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxpsr__position Int)

;; dw1000__register_types__rx_finfo_type__rxpsr__first__bit_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxpsr__first__bit))

;; dw1000__register_types__rx_finfo_type__rxpsr__last__bit_axiom
  (assert
  (< dw1000__register_types__rx_finfo_type__rxpsr__first__bit dw1000__register_types__rx_finfo_type__rxpsr__last__bit))

;; dw1000__register_types__rx_finfo_type__rxpsr__position_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxpsr__position))

(declare-const dw1000__register_types__rx_finfo_type__rxpacc__first__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxpacc__last__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__rxpacc__position Int)

;; dw1000__register_types__rx_finfo_type__rxpacc__first__bit_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxpacc__first__bit))

;; dw1000__register_types__rx_finfo_type__rxpacc__last__bit_axiom
  (assert
  (< dw1000__register_types__rx_finfo_type__rxpacc__first__bit dw1000__register_types__rx_finfo_type__rxpacc__last__bit))

;; dw1000__register_types__rx_finfo_type__rxpacc__position_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__rxpacc__position))

(declare-const dw1000__register_types__rx_finfo_type__reserved__first__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__reserved__last__bit Int)

(declare-const dw1000__register_types__rx_finfo_type__reserved__position Int)

;; dw1000__register_types__rx_finfo_type__reserved__first__bit_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__reserved__first__bit))

;; dw1000__register_types__rx_finfo_type__reserved__last__bit_axiom
  (assert
  (< dw1000__register_types__rx_finfo_type__reserved__first__bit dw1000__register_types__rx_finfo_type__reserved__last__bit))

;; dw1000__register_types__rx_finfo_type__reserved__position_axiom
  (assert (<= 0 dw1000__register_types__rx_finfo_type__reserved__position))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((rx_finfo_type__ref 0))
(((mk_rx_finfo_type__ref (rx_finfo_type__content us_rep)))))
(define-fun rx_finfo_type__ref___projection ((a rx_finfo_type__ref)) us_rep
  (rx_finfo_type__content a))

(declare-datatypes ((register_type__ref 0))
(((mk_register_type__ref (register_type__content us_rep)))))
(define-fun register_type__ref___13__projection ((a register_type__ref)) us_rep
  (register_type__content a))

(declare-sort frame_length 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1024)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (frame_length frame_length) Bool)

(declare-const dummy10 frame_length)

(declare-datatypes ((frame_length__ref 0))
(((mk_frame_length__ref (frame_length__content frame_length)))))
(define-fun frame_length__ref___projection ((a frame_length__ref)) frame_length
  (frame_length__content a))

(declare-fun to_rep8 (frame_length) Int)

(declare-fun of_rep8 (Int) frame_length)

;; inversion_axiom
  (assert
  (forall ((x frame_length))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x frame_length)) (! (in_range8
  (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep8 (of_rep8 x)) x)) :pattern ((to_rep8
                                                              (of_rep8 x))) )))

(declare-sort rx_errors 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq11 (rx_errors rx_errors) Bool)

(declare-const dummy11 rx_errors)

(declare-datatypes ((rx_errors__ref 0))
(((mk_rx_errors__ref (rx_errors__content rx_errors)))))
(define-fun rx_errors__ref___projection ((a rx_errors__ref)) rx_errors
  (rx_errors__content a))

(declare-fun to_rep9 (rx_errors) Int)

(declare-fun of_rep9 (Int) rx_errors)

;; inversion_axiom
  (assert
  (forall ((x rx_errors))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x rx_errors)) (! (in_range9
  (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep9 (of_rep9 x)) x)) :pattern ((to_rep9
                                                              (of_rep9 x))) )))

(declare-const dummy12 (Array Int bits_8))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int bits_8)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int bits_8)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int bits_8)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int bits_8))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq12 ((Array Int bits_8) (Array Int bits_8)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__decadriver__rx_frame_type__size frame_length)(rec__decadriver__rx_frame_type__frame (Array Int bits_8))(rec__decadriver__rx_frame_type__error rx_errors)(rec__decadriver__rx_frame_type__overrun Bool)))))
(define-fun us_split_fields_Size__2__projection ((a us_split_fields2)) frame_length
  (rec__decadriver__rx_frame_type__size a))

(define-fun us_split_fields_Frame__projection ((a us_split_fields2)) (Array Int bits_8)
  (rec__decadriver__rx_frame_type__frame a))

(define-fun us_split_fields_Error__projection ((a us_split_fields2)) rx_errors
  (rec__decadriver__rx_frame_type__error a))

(define-fun us_split_fields_Overrun__projection ((a us_split_fields2)) Bool
  (rec__decadriver__rx_frame_type__overrun a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___137__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___138__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                    a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (to_rep8
                            (rec__decadriver__rx_frame_type__size
                            (us_split_fields3 a))) (to_rep8
                                                   (rec__decadriver__rx_frame_type__size
                                                   (us_split_fields3 b))))
                         (= (bool_eq
                            (rec__decadriver__rx_frame_type__frame
                            (us_split_fields3 a)) 0 1024
                            (rec__decadriver__rx_frame_type__frame
                            (us_split_fields3 b)) 0 1024) true))
                         (= (to_rep9
                            (rec__decadriver__rx_frame_type__error
                            (us_split_fields3 a))) (to_rep9
                                                   (rec__decadriver__rx_frame_type__error
                                                   (us_split_fields3 b)))))
                         (= (rec__decadriver__rx_frame_type__overrun
                            (us_split_fields3 a)) (rec__decadriver__rx_frame_type__overrun
                                                  (us_split_fields3 b))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const decadriver__rx_frame_type__size__first__bit Int)

(declare-const decadriver__rx_frame_type__size__last__bit Int)

(declare-const decadriver__rx_frame_type__size__position Int)

;; decadriver__rx_frame_type__size__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__size__first__bit))

;; decadriver__rx_frame_type__size__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__size__first__bit decadriver__rx_frame_type__size__last__bit))

;; decadriver__rx_frame_type__size__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__size__position))

(declare-const decadriver__rx_frame_type__frame__first__bit Int)

(declare-const decadriver__rx_frame_type__frame__last__bit Int)

(declare-const decadriver__rx_frame_type__frame__position Int)

;; decadriver__rx_frame_type__frame__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__frame__first__bit))

;; decadriver__rx_frame_type__frame__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__frame__first__bit decadriver__rx_frame_type__frame__last__bit))

;; decadriver__rx_frame_type__frame__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__frame__position))

(declare-const decadriver__rx_frame_type__error__first__bit Int)

(declare-const decadriver__rx_frame_type__error__last__bit Int)

(declare-const decadriver__rx_frame_type__error__position Int)

;; decadriver__rx_frame_type__error__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__error__first__bit))

;; decadriver__rx_frame_type__error__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__error__first__bit decadriver__rx_frame_type__error__last__bit))

;; decadriver__rx_frame_type__error__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__error__position))

(declare-const decadriver__rx_frame_type__overrun__first__bit Int)

(declare-const decadriver__rx_frame_type__overrun__last__bit Int)

(declare-const decadriver__rx_frame_type__overrun__position Int)

;; decadriver__rx_frame_type__overrun__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__overrun__first__bit))

;; decadriver__rx_frame_type__overrun__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__overrun__first__bit decadriver__rx_frame_type__overrun__last__bit))

;; decadriver__rx_frame_type__overrun__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__overrun__position))

(declare-fun user_eq13 (us_rep1 us_rep1) Bool)

(declare-const dummy13 us_rep1)

(declare-datatypes ((rx_frame_type__ref 0))
(((mk_rx_frame_type__ref (rx_frame_type__content us_rep1)))))
(define-fun rx_frame_type__ref___projection ((a rx_frame_type__ref)) us_rep1
  (rx_frame_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_4419 us_rep1)
  (temp___is_init_4416 Bool) (temp___skip_constant_4417 Bool)
  (temp___do_toplevel_4418 Bool)) Bool (=> (= temp___do_toplevel_4418 true)
                                       (=> (= temp___is_init_4416 true)
                                       (ite (= (to_rep9
                                               (rec__decadriver__rx_frame_type__error
                                               (us_split_fields3
                                               temp___expr_4419))) 0)
                                       (< 0 (to_rep8
                                            (rec__decadriver__rx_frame_type__size
                                            (us_split_fields3
                                            temp___expr_4419))))
                                       (= (to_rep8
                                          (rec__decadriver__rx_frame_type__size
                                          (us_split_fields3 temp___expr_4419))) 0)))))

(define-fun dynamic_predicate ((temp___4430 us_rep1)) Bool (ite (= (to_rep9
                                                                   (rec__decadriver__rx_frame_type__error
                                                                   (us_split_fields3
                                                                   temp___4430))) 0)
                                                           (< 0 (to_rep8
                                                                (rec__decadriver__rx_frame_type__size
                                                                (us_split_fields3
                                                                temp___4430))))
                                                           (= (to_rep8
                                                              (rec__decadriver__rx_frame_type__size
                                                              (us_split_fields3
                                                              temp___4430))) 0)))

(declare-sort rx_frame_queue_index 0)

(define-fun in_range10 ((x (_ BitVec 8))) Bool (and
                                               (bvule ((_ int2bv 8) 0) x)
                                               (bvule x ((_ int2bv 8) 1))))

(define-fun in_range_int5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE11 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) (_ BitVec 8))

(declare-fun user_eq14 (rx_frame_queue_index rx_frame_queue_index) Bool)

(declare-const dummy14 rx_frame_queue_index)

(declare-datatypes ((rx_frame_queue_index__ref 0))
(((mk_rx_frame_queue_index__ref
  (rx_frame_queue_index__content rx_frame_queue_index)))))
(define-fun rx_frame_queue_index__ref___projection ((a rx_frame_queue_index__ref)) rx_frame_queue_index
  (rx_frame_queue_index__content a))

(define-fun dynamic_invariant2 ((temp___expr_4437 (_ BitVec 8))
  (temp___is_init_4434 Bool) (temp___skip_constant_4435 Bool)
  (temp___do_toplevel_4436 Bool)) Bool (=>
                                       (or (= temp___is_init_4434 true)
                                       (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 1)))
                                       (in_range10 temp___expr_4437)))

(declare-fun to_rep10 (rx_frame_queue_index) (_ BitVec 8))

(declare-fun of_rep10 ((_ BitVec 8)) rx_frame_queue_index)

;; inversion_axiom
  (assert
  (forall ((x rx_frame_queue_index))
  (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; range_axiom
  (assert
  (forall ((x rx_frame_queue_index)) (! (in_range10
  (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 2))))
     (=> (in_range10 y) (= (to_rep10 (of_rep10 x)) y))) :pattern ((to_rep10
                                                                  (of_rep10
                                                                  x))) )))

(define-fun to_int10 ((x rx_frame_queue_index)) Int (bv2int (to_rep10 x)))

;; range_int_axiom
  (assert
  (forall ((x rx_frame_queue_index)) (! (in_range_int5
  (to_int10 x)) :pattern ((to_int10 x)) )))

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 (Array (_ BitVec 8) us_rep1))))))
(declare-fun slide1 ((Array (_ BitVec 8) us_rep1) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep1)))
  (forall ((first2 (_ BitVec 8)))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep1)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array (_ BitVec 8) us_rep1) (_ BitVec 8) (_ BitVec 8)
  (Array (_ BitVec 8) us_rep1) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep1))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep1)) (b (Array (_ BitVec 8) us_rep1)))
  (forall ((a_first (_ BitVec 8)) (a_last (_ BitVec 8))
  (b_first (_ BitVec 8)) (b_last (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x01)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (us_rep1 (_ BitVec 8)) (Array (_ BitVec 8) us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i (_ BitVec 8)))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq4 ((a (Array (_ BitVec 8) us_rep1))
  (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b (Array (_ BitVec 8) us_rep1)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_183 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_183)
                                    (bvule temp___idx_183 a__last))
                                    (= (bool_eq3 (select a temp___idx_183)
                                       (select b (bvadd (bvsub b__first a__first) temp___idx_183))) true))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep1)) (b (Array (_ BitVec 8) us_rep1)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_183 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_183) (bvule temp___idx_183 a__last))
  (= (bool_eq3 (select a temp___idx_183)
     (select b (bvadd (bvsub b__first a__first) temp___idx_183))) true))))))))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2
  (rec__decadriver__receiver_type__frame_queue (Array (_ BitVec 8) us_rep1))(rec__decadriver__receiver_type__queue_head rx_frame_queue_index)(rec__decadriver__receiver_type__rx_count natural)(rec__decadriver__receiver_type__overrun_occurred Bool)(rec__decadriver__receiver_type__frame_ready Bool)))))
(define-fun us_split_fields_Frame_Queue__projection ((a us_split_fields4)) (Array (_ BitVec 8) us_rep1)
  (rec__decadriver__receiver_type__frame_queue a))

(define-fun us_split_fields_Queue_Head__projection ((a us_split_fields4)) rx_frame_queue_index
  (rec__decadriver__receiver_type__queue_head a))

(define-fun us_split_fields_Rx_Count__projection ((a us_split_fields4)) natural
  (rec__decadriver__receiver_type__rx_count a))

(define-fun us_split_fields_Overrun_Occurred__projection ((a us_split_fields4)) Bool
  (rec__decadriver__receiver_type__overrun_occurred a))

(define-fun us_split_fields_Frame_Ready__projection ((a us_split_fields4)) Bool
  (rec__decadriver__receiver_type__frame_ready a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___138__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___139__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                    a))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const decadriver__receiver_type__frame_queue__first__bit Int)

(declare-const decadriver__receiver_type__frame_queue__last__bit Int)

(declare-const decadriver__receiver_type__frame_queue__position Int)

;; decadriver__receiver_type__frame_queue__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__frame_queue__first__bit))

;; decadriver__receiver_type__frame_queue__last__bit_axiom
  (assert
  (< decadriver__receiver_type__frame_queue__first__bit decadriver__receiver_type__frame_queue__last__bit))

;; decadriver__receiver_type__frame_queue__position_axiom
  (assert (<= 0 decadriver__receiver_type__frame_queue__position))

(declare-const decadriver__receiver_type__queue_head__first__bit Int)

(declare-const decadriver__receiver_type__queue_head__last__bit Int)

(declare-const decadriver__receiver_type__queue_head__position Int)

;; decadriver__receiver_type__queue_head__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__queue_head__first__bit))

;; decadriver__receiver_type__queue_head__last__bit_axiom
  (assert
  (< decadriver__receiver_type__queue_head__first__bit decadriver__receiver_type__queue_head__last__bit))

;; decadriver__receiver_type__queue_head__position_axiom
  (assert (<= 0 decadriver__receiver_type__queue_head__position))

(declare-const decadriver__receiver_type__rx_count__first__bit Int)

(declare-const decadriver__receiver_type__rx_count__last__bit Int)

(declare-const decadriver__receiver_type__rx_count__position Int)

;; decadriver__receiver_type__rx_count__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__rx_count__first__bit))

;; decadriver__receiver_type__rx_count__last__bit_axiom
  (assert
  (< decadriver__receiver_type__rx_count__first__bit decadriver__receiver_type__rx_count__last__bit))

;; decadriver__receiver_type__rx_count__position_axiom
  (assert (<= 0 decadriver__receiver_type__rx_count__position))

(declare-const decadriver__receiver_type__overrun_occurred__first__bit Int)

(declare-const decadriver__receiver_type__overrun_occurred__last__bit Int)

(declare-const decadriver__receiver_type__overrun_occurred__position Int)

;; decadriver__receiver_type__overrun_occurred__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__overrun_occurred__first__bit))

;; decadriver__receiver_type__overrun_occurred__last__bit_axiom
  (assert
  (< decadriver__receiver_type__overrun_occurred__first__bit decadriver__receiver_type__overrun_occurred__last__bit))

;; decadriver__receiver_type__overrun_occurred__position_axiom
  (assert (<= 0 decadriver__receiver_type__overrun_occurred__position))

(declare-const decadriver__receiver_type__frame_ready__first__bit Int)

(declare-const decadriver__receiver_type__frame_ready__last__bit Int)

(declare-const decadriver__receiver_type__frame_ready__position Int)

;; decadriver__receiver_type__frame_ready__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__frame_ready__first__bit))

;; decadriver__receiver_type__frame_ready__last__bit_axiom
  (assert
  (< decadriver__receiver_type__frame_ready__first__bit decadriver__receiver_type__frame_ready__last__bit))

;; decadriver__receiver_type__frame_ready__position_axiom
  (assert (<= 0 decadriver__receiver_type__frame_ready__position))

(declare-fun user_eq15 (us_rep2 us_rep2) Bool)

(declare-datatypes ((receiver_type__ref 0))
(((mk_receiver_type__ref (receiver_type__content us_rep2)))))
(define-fun receiver_type__ref___projection ((a receiver_type__ref)) us_rep2
  (receiver_type__content a))

(declare-fun temp___4475 (us_rep1) (Array (_ BitVec 8) us_rep1))

;; def_axiom
  (assert
  (forall ((temp___4477 us_rep1))
  (forall ((temp___4478 (_ BitVec 8)))
  (= (select (temp___4475 temp___4477) temp___4478) temp___4477))))

(declare-fun temp___4479 ((_ BitVec 8)) (Array Int bits_8))

;; def_axiom
  (assert
  (forall ((temp___4481 (_ BitVec 8)))
  (forall ((temp___4482 Int))
  (= (select (temp___4479 temp___4481) temp___4482) (of_rep4 temp___4481)))))

(define-fun dynamic_invariant3 ((temp___expr_4469 us_rep2)
  (temp___is_init_4466 Bool) (temp___skip_constant_4467 Bool)
  (temp___do_toplevel_4468 Bool)) Bool (forall ((temp___4470 (_ BitVec 8)))
                                       (=>
                                       (and
                                       (bvule ((_ int2bv 8) 0) temp___4470)
                                       (bvule temp___4470 ((_ int2bv 8) 1)))
                                       (let ((temp___4471 (select (rec__decadriver__receiver_type__frame_queue
                                                                  (us_split_fields5
                                                                  temp___expr_4469)) temp___4470)))
                                       (ite (= (to_rep9
                                               (rec__decadriver__rx_frame_type__error
                                               (us_split_fields3 temp___4471))) 0)
                                       (< 0 (to_rep8
                                            (rec__decadriver__rx_frame_type__size
                                            (us_split_fields3 temp___4471))))
                                       (= (to_rep8
                                          (rec__decadriver__rx_frame_type__size
                                          (us_split_fields3 temp___4471))) 0))))))

(define-fun default_initial_assumption ((temp___expr_4473 us_rep2)
  (temp___skip_top_level_4474 Bool)) Bool (and
                                          (and
                                          (and
                                          (and
                                          (= (rec__decadriver__receiver_type__frame_queue
                                             (us_split_fields5
                                             temp___expr_4473)) (temp___4475
                                                                (mk___rep1
                                                                (mk___split_fields1
                                                                (of_rep8 0)
                                                                (temp___4479
                                                                ((_ int2bv 8) 0))
                                                                (of_rep9 0)
                                                                (of_int 0)))))
                                          (= (to_rep10
                                             (rec__decadriver__receiver_type__queue_head
                                             (us_split_fields5
                                             temp___expr_4473))) ((_ int2bv 8) 1)))
                                          (= (to_rep
                                             (rec__decadriver__receiver_type__rx_count
                                             (us_split_fields5
                                             temp___expr_4473))) 0))
                                          (= (rec__decadriver__receiver_type__overrun_occurred
                                             (us_split_fields5
                                             temp___expr_4473)) (of_int 0)))
                                          (= (rec__decadriver__receiver_type__frame_ready
                                             (us_split_fields5
                                             temp___expr_4473)) (of_int 0))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r15b Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq16 (integer integer) Bool)

(declare-const dummy15 integer)

(declare-datatypes ((t16b__ref 0))
(((mk_t16b__ref (t16b__content integer)))))
(define-fun t16b__ref___projection ((a t16b__ref)) integer (t16b__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int bits_8))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int bits_8) (elts1 a))

(define-fun of_array1 ((a (Array Int bits_8)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size5 Int)

(declare-fun object__size5 ((Array Int bits_8)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int bits_8)) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 ((Array Int bits_8)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int bits_8))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment5 a))))

(define-fun bool_eq5 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq17 (us_t1 us_t1) Bool)

(declare-const dummy16 us_t1)

(declare-datatypes ((t17b__ref 0)) (((mk_t17b__ref (t17b__content us_t1)))))
(define-fun t17b__ref___projection ((a t17b__ref)) us_t1 (t17b__content a))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant5 ((temp___expr_4407 Int)
  (temp___is_init_4404 Bool) (temp___skip_constant_4405 Bool)
  (temp___do_toplevel_4406 Bool)) Bool (=>
                                       (or (= temp___is_init_4404 true)
                                       (<= 0 1024)) (in_range8
                                       temp___expr_4407)))

(define-fun dynamic_invariant6 ((temp___expr_4413 Int)
  (temp___is_init_4410 Bool) (temp___skip_constant_4411 Bool)
  (temp___do_toplevel_4412 Bool)) Bool (=>
                                       (or (= temp___is_init_4410 true)
                                       (<= 0 5)) (in_range9
                                       temp___expr_4413)))

(define-fun dynamic_invariant7 ((temp___expr_281 (_ BitVec 8))
  (temp___is_init_278 Bool) (temp___skip_constant_279 Bool)
  (temp___do_toplevel_280 Bool)) Bool (=>
                                      (or (= temp___is_init_278 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 1)))
                                      (in_range5 temp___expr_281)))

(define-fun dynamic_invariant8 ((temp___expr_287 (_ BitVec 8))
  (temp___is_init_284 Bool) (temp___skip_constant_285 Bool)
  (temp___do_toplevel_286 Bool)) Bool (=>
                                      (or (= temp___is_init_284 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 3)))
                                      (in_range6 temp___expr_287)))

(define-fun dynamic_invariant9 ((temp___expr_293 (_ BitVec 8))
  (temp___is_init_290 Bool) (temp___skip_constant_291 Bool)
  (temp___do_toplevel_292 Bool)) Bool (=>
                                      (or (= temp___is_init_290 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 7)))
                                      (in_range3 temp___expr_293)))

(define-fun dynamic_invariant10 ((temp___expr_317 (_ BitVec 8))
  (temp___is_init_314 Bool) (temp___skip_constant_315 Bool)
  (temp___do_toplevel_316 Bool)) Bool (=>
                                      (or (= temp___is_init_314 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 127)))
                                      (in_range4 temp___expr_317)))

(define-fun dynamic_invariant11 ((temp___expr_323 (_ BitVec 8))
  (temp___is_init_320 Bool) (temp___skip_constant_321 Bool)
  (temp___do_toplevel_322 Bool)) Bool true)

(define-fun dynamic_invariant12 ((temp___expr_347 (_ BitVec 16))
  (temp___is_init_344 Bool) (temp___skip_constant_345 Bool)
  (temp___do_toplevel_346 Bool)) Bool (=>
                                      (or (= temp___is_init_344 true)
                                      (bvule ((_ int2bv 16) 0) ((_ int2bv 16) 4095)))
                                      (in_range7 temp___expr_347)))

(define-fun dynamic_invariant13 ((temp___expr_665 us_t)
  (temp___is_init_662 Bool) (temp___skip_constant_663 Bool)
  (temp___do_toplevel_664 Bool)) Bool (=>
                                      (not (= temp___skip_constant_663 true))
                                      (dynamic_property 0 2147483647
                                      (first1 temp___expr_665)
                                      (last1 temp___expr_665))))

(declare-const rx_finfo_reg__split_fields bits_7)

(declare-const rx_finfo_reg__split_fields1 bits_3)

(declare-const rx_finfo_reg__split_fields2 bits_2)

(declare-const rx_finfo_reg__split_fields3 bits_2)

(declare-const rx_finfo_reg__split_fields4 bits_1)

(declare-const rx_finfo_reg__split_fields5 bits_2)

(declare-const rx_finfo_reg__split_fields6 bits_2)

(declare-const rx_finfo_reg__split_fields7 bits_12)

(declare-const rx_finfo_reg__split_fields8 bits_1)

(declare-const frame_length1 Int)

(declare-const next_idx (_ BitVec 8))

(declare-const self__ (Array (_ BitVec 8) us_rep1))

(declare-const self__1 rx_frame_queue_index)

(declare-const self__2 natural)

(declare-const self__3 Bool)

(declare-const self__4 Bool)

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 (_ BitVec 8))

(declare-const o6 (_ BitVec 8))

(declare-const o7 (_ BitVec 8))

(declare-const o8 Int)

(declare-const o9 natural)

(declare-const o10 (Array (_ BitVec 8) us_rep1))

(declare-const o11 rx_frame_queue_index)

(declare-const o12 natural)

(declare-const o13 Bool)

(declare-const o14 Bool)

(declare-const o15 (Array (_ BitVec 8) us_rep1))

(declare-const o16 rx_frame_queue_index)

(declare-const o17 natural)

(declare-const o18 Bool)

(declare-const o19 Bool)

(declare-const o20 (Array Int bits_8))

(declare-const dw1000__register_driver__read_register__data__compl (Array Int bits_8))

(declare-const dw1000__register_driver__read_register__data__compl1 t1)

(declare-const o21 integer)

(declare-const o22 integer)

(declare-const o23 (Array Int bits_8))

(declare-const o24 frame_length)

(declare-const o25 (Array Int bits_8))

(declare-const o26 rx_errors)

(declare-const o27 Bool)

(declare-const temp___4573 frame_length)

(declare-const temp___45731 (Array Int bits_8))

(declare-const temp___45732 rx_errors)

(declare-const temp___45733 Bool)

(declare-const o28 frame_length)

(declare-const o29 (Array Int bits_8))

(declare-const o30 rx_errors)

(declare-const o31 Bool)

(declare-const o32 (Array (_ BitVec 8) us_rep1))

(declare-const o33 (Array (_ BitVec 8) us_rep1))

(declare-const o34 rx_frame_queue_index)

(declare-const o35 natural)

(declare-const o36 Bool)

(declare-const o37 Bool)

(declare-const o38 (Array (_ BitVec 8) us_rep1))

(declare-const o39 rx_frame_queue_index)

(declare-const o40 natural)

(declare-const o41 Bool)

(declare-const o42 Bool)

(declare-const o43 Int)

(declare-const o44 frame_length)

(declare-const o45 frame_length)

(declare-const o46 (Array Int bits_8))

(declare-const o47 rx_errors)

(declare-const o48 Bool)

(declare-const temp___4577 frame_length)

(declare-const temp___45771 (Array Int bits_8))

(declare-const temp___45772 rx_errors)

(declare-const temp___45773 Bool)

(declare-const o49 us_rep1)

(declare-const o50 (Array (_ BitVec 8) us_rep1))

(declare-const o51 us_split_fields4)

(declare-const o52 us_rep2)

(declare-const o53 rx_errors)

(declare-const o54 us_split_fields2)

(declare-const temp___4581 us_rep1)

(declare-const o55 us_rep1)

(declare-const o56 (Array (_ BitVec 8) us_rep1))

(declare-const o57 us_split_fields4)

(declare-const o58 us_rep2)

(declare-const dw1000__registers__rx_finfo__read__reg__fields us_split_fields)

(declare-const result us_split_fields__ref)

(declare-const rx_finfo_reg__split_fields9 us_split_fields)

(declare-const result1 int__ref)

(declare-const frame_length2 Int)

(declare-const result2 t__ref)

(declare-const next_idx1 (_ BitVec 8))

(declare-const result3 receiver_type__ref)

(declare-const self__5 us_rep2)

(declare-const dw1000__register_driver__read_register__data (Array Int bits_8))

(declare-const result4 receiver_type__ref)

(declare-const self__6 us_rep2)

(declare-const result5 receiver_type__ref)

(declare-const self__7 us_rep2)

(declare-const result6 receiver_type__ref)

(declare-const self__8 us_rep2)

(define-fun temp___45774 () us_rep1 (mk___rep1
                                    (mk___split_fields1 temp___4577
                                    temp___45771 temp___45772 temp___45773)))

(define-fun o59 () us_rep1 (mk___rep1 (mk___split_fields1 o28 o29 o30 o31)))

(define-fun temp___45734 () us_rep1 (mk___rep1
                                    (mk___split_fields1 temp___4573
                                    temp___45731 temp___45732 temp___45733)))

;; H
  (assert (dynamic_invariant3
  (mk___rep2 (mk___split_fields2 self__ self__1 self__2 self__3 self__4))
  true false true))

;; H
  (assert (=> (<= 0 2147483647) (in_range2 frame_length1)))

;; H
  (assert
  (=> (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 1)) (in_range10 next_idx)))

;; H
  (assert
  (= result (mk___split_fields__ref
            (mk___split_fields rx_finfo_reg__split_fields
            rx_finfo_reg__split_fields1 rx_finfo_reg__split_fields2
            rx_finfo_reg__split_fields3 rx_finfo_reg__split_fields4
            rx_finfo_reg__split_fields5 rx_finfo_reg__split_fields6
            rx_finfo_reg__split_fields7 rx_finfo_reg__split_fields8))))

;; H
  (assert
  (= rx_finfo_reg__split_fields9 dw1000__registers__rx_finfo__read__reg__fields))

;; H
  (assert
  (and
  (= o (* (bv2int (to_rep2
                  (rec__dw1000__register_types__rx_finfo_type__rxfle
                  rx_finfo_reg__split_fields9))) 128))
  (in_range1
  (* (bv2int (to_rep2
             (rec__dw1000__register_types__rx_finfo_type__rxfle
             rx_finfo_reg__split_fields9))) 128))))

;; H
  (assert
  (= o1 (+ (bv2int (to_rep3
                   (rec__dw1000__register_types__rx_finfo_type__rxflen
                   rx_finfo_reg__split_fields9))) o)))

;; H
  (assert (and (= o2 o1) (in_range1 o1)))

(assert
;; WP_parameter_def
 ;; File "decadriver.ads", line 77, characters 0-0
  (not (in_range2 o2)))
(check-sat)
(exit)
