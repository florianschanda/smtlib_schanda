;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort descriptioni 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 150)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (descriptioni descriptioni) Bool)

(declare-const dummy4 descriptioni)

(declare-datatypes ()
((descriptioni__ref
 (mk_descriptioni__ref (descriptioni__content descriptioni)))))
(define-fun descriptioni__ref___projection ((a descriptioni__ref)) descriptioni
  (descriptioni__content a))

(declare-const nouser (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun temp___String_Literal_135 (tuple0) (Array Int character))

;; temp___String_Literal_135__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 1)) 78)
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 3)) 85))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 6)) 114))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 9)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 11)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 12)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 20)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 24)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 25)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 26)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 27)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 28)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 32)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 33)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 34)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 35)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 36)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 37)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 38)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 39)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 40)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 41)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 42)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 43)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 44)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 45)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 46)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 47)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 48)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 49)) 32))
     (= (to_rep (select (temp___String_Literal_135 us_void_param) 50)) 32)) :pattern (
  (temp___String_Literal_135 us_void_param)) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq2 (us_rep us_rep) Bool)

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(declare-fun construct (us_t) us_rep)

(declare-fun construct__function_guard (us_rep us_t) Bool)

(declare-sort statust 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (statust statust) Bool)

(declare-const dummy6 statust)

(declare-datatypes ()
((statust__ref (mk_statust__ref (statust__content statust)))))
(define-fun statust__ref___projection ((a statust__ref)) statust (statust__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_874 Int)
  (temp___is_init_871 Bool) (temp___skip_constant_872 Bool)
  (temp___do_toplevel_873 Bool)) Bool (=>
                                      (or (= temp___is_init_871 true)
                                      (<= 0 1)) (in_range5 temp___expr_874)))

(declare-sort fileentrycountt 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1024)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (fileentrycountt fileentrycountt) Bool)

(declare-const dummy7 fileentrycountt)

(declare-datatypes ()
((fileentrycountt__ref
 (mk_fileentrycountt__ref (fileentrycountt__content fileentrycountt)))))
(define-fun fileentrycountt__ref___projection ((a fileentrycountt__ref)) fileentrycountt
  (fileentrycountt__content a))

(declare-fun to_rep2 (fileentrycountt) Int)

(declare-fun of_rep2 (Int) fileentrycountt)

;; inversion_axiom
  (assert
  (forall ((x fileentrycountt))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x fileentrycountt)) (! (in_range6
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int fileentrycountt))))))
(declare-fun slide1 ((Array Int fileentrycountt) Int
  Int) (Array Int fileentrycountt))

;; slide_eq
  (assert
  (forall ((a (Array Int fileentrycountt)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int fileentrycountt)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int fileentrycountt) Int Int
  (Array Int fileentrycountt) Int Int) (Array Int fileentrycountt))

;; concat_def
  (assert
  (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (fileentrycountt Int) (Array Int fileentrycountt))

;; singleton_def
  (assert
  (forall ((v fileentrycountt))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int fileentrycountt)) (a__first Int)
  (a__last Int) (b (Array Int fileentrycountt)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_162 Int))
                           (=>
                           (and (<= a__first temp___idx_162)
                           (<= temp___idx_162 a__last))
                           (= (to_rep2 (select a temp___idx_162)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_162)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_162 Int))
  (=> (and (<= a__first temp___idx_162) (<= temp___idx_162 a__last))
  (= (to_rep2 (select a temp___idx_162)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_162)))))))))))

(declare-fun compare1 ((Array Int fileentrycountt) Int Int
  (Array Int fileentrycountt) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int fileentrycountt)) (b (Array Int fileentrycountt)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort logfilecountt 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 17)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (logfilecountt logfilecountt) Bool)

(declare-const dummy8 logfilecountt)

(declare-datatypes ()
((logfilecountt__ref
 (mk_logfilecountt__ref (logfilecountt__content logfilecountt)))))
(define-fun logfilecountt__ref___projection ((a logfilecountt__ref)) logfilecountt
  (logfilecountt__content a))

(declare-fun to_rep3 (logfilecountt) Int)

(declare-fun of_rep3 (Int) logfilecountt)

;; inversion_axiom
  (assert
  (forall ((x logfilecountt))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x logfilecountt)) (! (in_range7
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort logfileindext 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 17)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (logfileindext logfileindext) Bool)

(declare-const dummy9 logfileindext)

(declare-datatypes ()
((logfileindext__ref
 (mk_logfileindext__ref (logfileindext__content logfileindext)))))
(define-fun logfileindext__ref___projection ((a logfileindext__ref)) logfileindext
  (logfileindext__content a))

(declare-fun to_rep4 (logfileindext) Int)

(declare-fun of_rep4 (Int) logfileindext)

;; inversion_axiom
  (assert
  (forall ((x logfileindext))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x logfileindext)) (! (in_range8
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int logfileindext))))))
(declare-fun slide2 ((Array Int logfileindext) Int
  Int) (Array Int logfileindext))

;; slide_eq
  (assert
  (forall ((a (Array Int logfileindext)))
  (forall ((first2 Int))
  (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int logfileindext)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int logfileindext) Int Int
  (Array Int logfileindext) Int Int) (Array Int logfileindext))

;; concat_def
  (assert
  (forall ((a (Array Int logfileindext)) (b (Array Int logfileindext)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (logfileindext Int) (Array Int logfileindext))

;; singleton_def
  (assert
  (forall ((v logfileindext))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int logfileindext)) (a__first Int)
  (a__last Int) (b (Array Int logfileindext)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_152 Int))
                           (=>
                           (and (<= a__first temp___idx_152)
                           (<= temp___idx_152 a__last))
                           (= (to_rep4 (select a temp___idx_152)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_152)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int logfileindext)) (b (Array Int logfileindext)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_152 Int))
  (=> (and (<= a__first temp___idx_152) (<= temp___idx_152 a__last))
  (= (to_rep4 (select a temp___idx_152)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_152)))))))))))

(declare-fun compare2 ((Array Int logfileindext) Int Int
  (Array Int logfileindext) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int logfileindext)) (b (Array Int logfileindext)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare2 a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int logfileindext)) (b (Array Int logfileindext)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare2 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep4 (select a (+ i 1))) (to_rep4 (select b (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int logfileindext)) (b (Array Int logfileindext)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare2 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep4 (select b (+ i 1))) (to_rep4 (select a (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

(declare-const dummy10 (Array Int logfileindext))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int logfileindext)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int logfileindext)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int logfileindext)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int logfileindext))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int logfileindext)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert
  (forall ((a (Array Int logfileindext))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq10 ((Array Int logfileindext)
  (Array Int logfileindext)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__auditlog__logfilelistt__list (Array Int logfileindext))(rec__auditlog__logfilelistt__head logfileindext)(rec__auditlog__logfilelistt__lasti logfileindext)(rec__auditlog__logfilelistt__length logfilecountt)))))
(define-fun us_split_fields_List__projection ((a us_split_fields)) (Array Int logfileindext)
  (rec__auditlog__logfilelistt__list a))

(define-fun us_split_fields_Head__projection ((a us_split_fields)) logfileindext
  (rec__auditlog__logfilelistt__head a))

(define-fun us_split_fields_LastI__projection ((a us_split_fields)) logfileindext
  (rec__auditlog__logfilelistt__lasti a))

(define-fun us_split_fields_Length__2__projection ((a us_split_fields)) logfilecountt
  (rec__auditlog__logfilelistt__length a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___7__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___8__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                                 a))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq4
                            (rec__auditlog__logfilelistt__list
                            (us_split_fields1 a)) 1 17
                            (rec__auditlog__logfilelistt__list
                            (us_split_fields1 b)) 1 17) true)
                         (= (to_rep4
                            (rec__auditlog__logfilelistt__head
                            (us_split_fields1 a))) (to_rep4
                                                   (rec__auditlog__logfilelistt__head
                                                   (us_split_fields1 b)))))
                         (= (to_rep4
                            (rec__auditlog__logfilelistt__lasti
                            (us_split_fields1 a))) (to_rep4
                                                   (rec__auditlog__logfilelistt__lasti
                                                   (us_split_fields1 b)))))
                         (= (to_rep3
                            (rec__auditlog__logfilelistt__length
                            (us_split_fields1 a))) (to_rep3
                                                   (rec__auditlog__logfilelistt__length
                                                   (us_split_fields1 b)))))
                    true false))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const auditlog__logfilelistt__list__first__bit Int)

(declare-const auditlog__logfilelistt__list__last__bit Int)

(declare-const auditlog__logfilelistt__list__position Int)

;; auditlog__logfilelistt__list__first__bit_axiom
  (assert (<= 0 auditlog__logfilelistt__list__first__bit))

;; auditlog__logfilelistt__list__last__bit_axiom
  (assert
  (< auditlog__logfilelistt__list__first__bit auditlog__logfilelistt__list__last__bit))

;; auditlog__logfilelistt__list__position_axiom
  (assert (<= 0 auditlog__logfilelistt__list__position))

(declare-const auditlog__logfilelistt__head__first__bit Int)

(declare-const auditlog__logfilelistt__head__last__bit Int)

(declare-const auditlog__logfilelistt__head__position Int)

;; auditlog__logfilelistt__head__first__bit_axiom
  (assert (<= 0 auditlog__logfilelistt__head__first__bit))

;; auditlog__logfilelistt__head__last__bit_axiom
  (assert
  (< auditlog__logfilelistt__head__first__bit auditlog__logfilelistt__head__last__bit))

;; auditlog__logfilelistt__head__position_axiom
  (assert (<= 0 auditlog__logfilelistt__head__position))

(declare-const auditlog__logfilelistt__lasti__first__bit Int)

(declare-const auditlog__logfilelistt__lasti__last__bit Int)

(declare-const auditlog__logfilelistt__lasti__position Int)

;; auditlog__logfilelistt__lasti__first__bit_axiom
  (assert (<= 0 auditlog__logfilelistt__lasti__first__bit))

;; auditlog__logfilelistt__lasti__last__bit_axiom
  (assert
  (< auditlog__logfilelistt__lasti__first__bit auditlog__logfilelistt__lasti__last__bit))

;; auditlog__logfilelistt__lasti__position_axiom
  (assert (<= 0 auditlog__logfilelistt__lasti__position))

(declare-const auditlog__logfilelistt__length__first__bit Int)

(declare-const auditlog__logfilelistt__length__last__bit Int)

(declare-const auditlog__logfilelistt__length__position Int)

;; auditlog__logfilelistt__length__first__bit_axiom
  (assert (<= 0 auditlog__logfilelistt__length__first__bit))

;; auditlog__logfilelistt__length__last__bit_axiom
  (assert
  (< auditlog__logfilelistt__length__first__bit auditlog__logfilelistt__length__last__bit))

;; auditlog__logfilelistt__length__position_axiom
  (assert (<= 0 auditlog__logfilelistt__length__position))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-const dummy11 us_rep1)

(declare-datatypes ()
((logfilelistt__ref (mk_logfilelistt__ref (logfilelistt__content us_rep1)))))
(define-fun logfilelistt__ref___projection ((a logfilelistt__ref)) us_rep1
  (logfilelistt__content a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun valid_numberlogentries ((Array Int fileentrycountt) Int Int
  us_split_fields) Bool)

(declare-fun valid_numberlogentries__function_guard (Bool
  (Array Int fileentrycountt) Int Int us_split_fields) Bool)

(define-fun dynamic_invariant1 ((temp___expr_925 Int)
  (temp___is_init_922 Bool) (temp___skip_constant_923 Bool)
  (temp___do_toplevel_924 Bool)) Bool (=>
                                      (or (= temp___is_init_922 true)
                                      (<= 1 17)) (in_range8 temp___expr_925)))

(declare-sort logentrycountt 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 17408)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (logentrycountt logentrycountt) Bool)

(declare-const dummy12 logentrycountt)

(declare-datatypes ()
((logentrycountt__ref
 (mk_logentrycountt__ref (logentrycountt__content logentrycountt)))))
(define-fun logentrycountt__ref___projection ((a logentrycountt__ref)) logentrycountt
  (logentrycountt__content a))

(define-fun dynamic_invariant2 ((temp___expr_1049 Int)
  (temp___is_init_1046 Bool) (temp___skip_constant_1047 Bool)
  (temp___do_toplevel_1048 Bool)) Bool (=>
                                       (or (= temp___is_init_1046 true)
                                       (<= 0 17408)) (in_range9
                                       temp___expr_1049)))

;; valid_numberlogentries__post_axiom
  (assert true)

;; valid_numberlogentries__def_axiom
  (assert
  (forall ((auditlog__logfileentries (Array Int fileentrycountt)))
  (forall ((auditlog__numberlogentries Int) (auditlog__currentlogfile Int))
  (forall ((auditlog__usedlogfiles__fields us_split_fields))
  (! (=
     (= (valid_numberlogentries auditlog__logfileentries
        auditlog__numberlogentries auditlog__currentlogfile
        auditlog__usedlogfiles__fields) true)
     (and
     (<= 1 (to_rep3
           (rec__auditlog__logfilelistt__length
           (us_split_fields1 (mk___rep auditlog__usedlogfiles__fields)))))
     (= auditlog__numberlogentries (+ (* (- (to_rep3
                                            (rec__auditlog__logfilelistt__length
                                            (us_split_fields1
                                            (mk___rep
                                            auditlog__usedlogfiles__fields)))) 1) 1024)
     (to_rep2 (select auditlog__logfileentries auditlog__currentlogfile)))))) :pattern (
  (valid_numberlogentries auditlog__logfileentries auditlog__numberlogentries
  auditlog__currentlogfile auditlog__usedlogfiles__fields)) )))))

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int us_rep))))))
(declare-fun slide3 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first2 Int))
  (! (= (slide3 a first2 first2) a) :pattern ((slide3 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat4 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat4 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton4 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_149 Int))
                           (=>
                           (and (<= a__first temp___idx_149)
                           (<= temp___idx_149 a__last))
                           (= (bool_eq2 (select a temp___idx_149)
                              (select b (+ (- b__first a__first) temp___idx_149))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_149 Int))
  (=> (and (<= a__first temp___idx_149) (<= temp___idx_149 a__last))
  (= (bool_eq2 (select a temp___idx_149)
     (select b (+ (- b__first a__first) temp___idx_149))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-sort filestatust 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (filestatust filestatust) Bool)

(declare-const dummy13 filestatust)

(declare-datatypes ()
((filestatust__ref (mk_filestatust__ref (filestatust__content filestatust)))))
(define-fun filestatust__ref___projection ((a filestatust__ref)) filestatust
  (filestatust__content a))

(declare-fun to_rep5 (filestatust) Int)

(declare-fun of_rep5 (Int) filestatust)

;; inversion_axiom
  (assert
  (forall ((x filestatust))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x filestatust)) (! (in_range10
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                               (of_rep5 x))) )))

(declare-datatypes ()
((map__ref4 (mk_map__ref4 (map__content4 (Array Int filestatust))))))
(declare-fun slide4 ((Array Int filestatust) Int
  Int) (Array Int filestatust))

;; slide_eq
  (assert
  (forall ((a (Array Int filestatust)))
  (forall ((first2 Int))
  (! (= (slide4 a first2 first2) a) :pattern ((slide4 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int filestatust)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide4 a old_first new_first) i)) ))))))

(declare-fun concat5 ((Array Int filestatust) Int Int (Array Int filestatust)
  Int Int) (Array Int filestatust))

;; concat_def
  (assert
  (forall ((a (Array Int filestatust)) (b (Array Int filestatust)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat5 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton5 (filestatust Int) (Array Int filestatust))

;; singleton_def
  (assert
  (forall ((v filestatust))
  (forall ((i Int))
  (! (= (select (singleton5 v i) i) v) :pattern ((select (singleton5 v i) i)) ))))

(define-fun bool_eq7 ((a (Array Int filestatust)) (a__first Int)
  (a__last Int) (b (Array Int filestatust)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_150 Int))
                           (=>
                           (and (<= a__first temp___idx_150)
                           (<= temp___idx_150 a__last))
                           (= (to_rep5 (select a temp___idx_150)) (to_rep5
                                                                  (select b (+ (- b__first a__first) temp___idx_150)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int filestatust)) (b (Array Int filestatust)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq7 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_150 Int))
  (=> (and (<= a__first temp___idx_150) (<= temp___idx_150 a__last))
  (= (to_rep5 (select a temp___idx_150)) (to_rep5
                                         (select b (+ (- b__first a__first) temp___idx_150)))))))))))

(declare-fun compare3 ((Array Int filestatust) Int Int
  (Array Int filestatust) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int filestatust)) (b (Array Int filestatust)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare3 a a_first a_last b b_first b_last) 0)
     (= (bool_eq7 a a_first a_last b b_first b_last) true)) :pattern (
  (compare3 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int filestatust)) (b (Array Int filestatust)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare3 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq7 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep5 (select a (+ i 1))) (to_rep5 (select b (+ j 1))))))))))) :pattern (
  (compare3 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int filestatust)) (b (Array Int filestatust)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare3 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq7 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep5 (select b (+ i 1))) (to_rep5 (select a (+ j 1))))))))))) :pattern (
  (compare3 a a_first a_last b b_first b_last)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const user (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun dynamic_invariant3 ((temp___expr_919 Int)
  (temp___is_init_916 Bool) (temp___skip_constant_917 Bool)
  (temp___do_toplevel_918 Bool)) Bool (=>
                                      (or (= temp___is_init_916 true)
                                      (<= 0 17)) (in_range7 temp___expr_919)))

(declare-sort archivefilestringi 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 17)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq14 (archivefilestringi archivefilestringi) Bool)

(declare-const dummy14 archivefilestringi)

(declare-datatypes ()
((archivefilestringi__ref
 (mk_archivefilestringi__ref
 (archivefilestringi__content archivefilestringi)))))
(define-fun archivefilestringi__ref___projection ((a archivefilestringi__ref)) archivefilestringi
  (archivefilestringi__content a))

(declare-const archivefilename (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-fun temp___String_Literal_158 (tuple0) (Array Int character))

;; temp___String_Literal_158__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 1)) 46)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 2)) 47))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 3)) 76))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 4)) 111))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 5)) 103))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 6)) 47))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 7)) 97))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 8)) 114))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 9)) 99))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 10)) 104))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 11)) 105))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 12)) 118))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 13)) 101))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 14)) 46))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 15)) 108))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 16)) 111))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 17)) 103)) :pattern (
  (temp___String_Literal_158 us_void_param)) )))

(declare-sort tlogentrycounttB 0)

(define-fun in_range12 ((x Int)) Bool (and (<= (- 32768) x) (<= x 32767)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq15 (tlogentrycounttB tlogentrycounttB) Bool)

(declare-const dummy15 tlogentrycounttB)

(declare-datatypes ()
((tlogentrycounttB__ref
 (mk_tlogentrycounttB__ref (tlogentrycounttB__content tlogentrycounttB)))))
(define-fun tlogentrycounttB__ref___projection ((a tlogentrycounttB__ref)) tlogentrycounttB
  (tlogentrycounttB__content a))

(declare-fun nextlistindex (Int) Int)

(declare-fun nextlistindex__function_guard (Int Int) Bool)

;; nextlistindex__post_axiom
  (assert
  (forall ((value Int))
  (! (=> (dynamic_invariant1 value true true true) (dynamic_invariant1
     (nextlistindex value) true false true)) :pattern ((nextlistindex value)) )))

;; nextlistindex__def_axiom
  (assert
  (forall ((value Int))
  (! (=> (dynamic_invariant1 value true true true)
     (= (nextlistindex value) (ite (= value 17) 1 (+ value 1)))) :pattern (
  (nextlistindex value)) )))

(define-fun dynamic_invariant4 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-fun converttoauditdescription (us_t) (Array Int character))

(declare-fun converttoauditdescription__function_guard ((Array Int character)
  us_t) Bool)

;; converttoauditdescription__post_axiom
  (assert true)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-fun temp___String_Literal_1256 (tuple0) (Array Int character))

;; temp___String_Literal_1256__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 1)) 78)
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 3)) 116))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 4)) 104))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 5)) 105))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 6)) 110))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 7)) 103))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 9)) 97))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 10)) 114))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 11)) 99))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 12)) 104))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 13)) 105))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 14)) 118))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 15)) 101))
     (= (to_rep (select (temp___String_Literal_1256 us_void_param) 16)) 100)) :pattern (
  (temp___String_Literal_1256 us_void_param)) )))

(declare-fun temp___String_Literal_1272 (tuple0) (Array Int character))

;; temp___String_Literal_1272__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 1)) 70)
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 2)) 97))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 3)) 117))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 5)) 116))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 6)) 32))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 7)) 99))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 8)) 114))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 9)) 101))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 10)) 97))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 11)) 116))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 12)) 105))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 13)) 110))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 14)) 103))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 16)) 97))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 17)) 114))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 18)) 99))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 19)) 104))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 20)) 105))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 21)) 118))
     (= (to_rep (select (temp___String_Literal_1272 us_void_param) 22)) 101)) :pattern (
  (temp___String_Literal_1272 us_void_param)) )))

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant6 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant7 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant8 ((temp___expr_931 Int)
  (temp___is_init_928 Bool) (temp___skip_constant_929 Bool)
  (temp___do_toplevel_930 Bool)) Bool (=>
                                      (or (= temp___is_init_928 true)
                                      (<= 0 2)) (in_range10 temp___expr_931)))

(define-fun dynamic_invariant9 ((temp___expr_1019 Int)
  (temp___is_init_1016 Bool) (temp___skip_constant_1017 Bool)
  (temp___do_toplevel_1018 Bool)) Bool (=>
                                       (or (= temp___is_init_1016 true)
                                       (<= 1 17)) (in_range11
                                       temp___expr_1019)))

;; archivefilename__def_axiom
  (assert (= archivefilename (temp___String_Literal_158 Tuple0)))

(define-fun dynamic_invariant10 ((temp___expr_1055 Int)
  (temp___is_init_1052 Bool) (temp___skip_constant_1053 Bool)
  (temp___do_toplevel_1054 Bool)) Bool (=>
                                       (or (= temp___is_init_1052 true)
                                       (<= 0 1024)) (in_range6
                                       temp___expr_1055)))

(define-fun dynamic_invariant11 ((temp___expr_325 Int)
  (temp___is_init_322 Bool) (temp___skip_constant_323 Bool)
  (temp___do_toplevel_324 Bool)) Bool (=>
                                      (or (= temp___is_init_322 true)
                                      (<= 1 150)) (in_range4
                                      temp___expr_325)))

;; nouser__def_axiom
  (assert (= nouser (temp___String_Literal_135 Tuple0)))

(declare-const currentlogfile Int)

(declare-const numberlogentries Int)

(declare-const usedlogfiles__split_fields (Array Int logfileindext))

(declare-const usedlogfiles__split_fields1 logfileindext)

(declare-const usedlogfiles__split_fields2 logfileindext)

(declare-const usedlogfiles__split_fields3 logfilecountt)

(declare-const logfileentries (Array Int fileentrycountt))

(declare-const auditalarm Int)

(declare-const currentlogfile1 int__ref)

(declare-const numberlogentries1 int__ref)

(declare-const usedlogfiles__split_fields4 us_split_fields__ref)

(declare-const logfileentries1 map__ref1)

(declare-const auditalarm1 int__ref)

;; H
  (assert (= (temp___String_Literal_158 Tuple0) archivefilename))

;; H
  (assert (= (temp___String_Literal_135 Tuple0) nouser))

;; H
  (assert (in_range8 currentlogfile))

;; H
  (assert (in_range9 numberlogentries))

;; H
  (assert (in_range5 auditalarm))

;; H
  (assert
  (= (valid_numberlogentries logfileentries numberlogentries currentlogfile
     (mk___split_fields usedlogfiles__split_fields
     usedlogfiles__split_fields1 usedlogfiles__split_fields2
     usedlogfiles__split_fields3)) true))

;; H
  (assert
  (and
  (<= 1 (to_rep3
        (rec__auditlog__logfilelistt__length
        (us_split_fields__content usedlogfiles__split_fields4))))
  (= (int__content numberlogentries1) (+ (* (- (to_rep3
                                               (rec__auditlog__logfilelistt__length
                                               (us_split_fields__content
                                               usedlogfiles__split_fields4))) 1) 1024)
  (to_rep2
  (select (map__content1 logfileentries1) (int__content currentlogfile1)))))))

;; H
  (assert
  (and
  (and (in_range9 (int__content numberlogentries1)) (in_range5
  (int__content auditalarm1))) (in_range8 (int__content currentlogfile1))))

(assert
;; WP_parameter_def
 ;; File "auditlog.ads", line 33, characters 0-0
  (not
  (= (valid_numberlogentries (map__content1 logfileentries1)
     (int__content numberlogentries1) (int__content currentlogfile1)
     (us_split_fields__content usedlogfiles__split_fields4)) true)))
(check-sat)
(exit)
