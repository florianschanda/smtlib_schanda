;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int3 ((_ BitVec 32)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int4 ((_ BitVec 64)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort u16 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 16))

(declare-fun user_eq (u16 u16) Bool)

(declare-fun dummy () u16)

(declare-datatypes () ((u16__ref (mk_u16__ref (u16__content u16)))))
(define-fun u16__ref___projection ((a u16__ref)) u16 (u16__content a))

(declare-fun to_rep (u16) (_ BitVec 16))

(declare-fun of_rep ((_ BitVec 16)) u16)

;; inversion_axiom
  (assert
  (forall ((x u16)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int6 ((x u16)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x u16)) (! (uint_in_range1 (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-sort u32 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (u32 u32) Bool)

(declare-fun dummy1 () u32)

(declare-datatypes () ((u32__ref (mk_u32__ref (u32__content u32)))))
(define-fun u32__ref___projection ((a u32__ref)) u32 (u32__content a))

(define-fun dynamic_invariant ((temp___expr_302 (_ BitVec 32))
  (temp___is_init_299 Bool) (temp___skip_constant_300 Bool)
  (temp___do_toplevel_301 Bool)) Bool true)

(declare-fun to_rep1 (u32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) u32)

;; inversion_axiom
  (assert
  (forall ((x u32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int7 ((x u32)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x u32)) (! (uint_in_range2 (to_int7 x)) :pattern ((to_int7 x)) )))

(declare-sort u64 0)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (u64 u64) Bool)

(declare-fun dummy2 () u64)

(declare-datatypes () ((u64__ref (mk_u64__ref (u64__content u64)))))
(define-fun u64__ref___projection ((a u64__ref)) u64 (u64__content a))

(define-fun dynamic_invariant1 ((temp___expr_308 (_ BitVec 64))
  (temp___is_init_305 Bool) (temp___skip_constant_306 Bool)
  (temp___do_toplevel_307 Bool)) Bool true)

(declare-fun to_rep2 (u64) (_ BitVec 64))

(declare-fun of_rep2 ((_ BitVec 64)) u64)

;; inversion_axiom
  (assert
  (forall ((x u64)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int8 ((x u64)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x u64)) (! (uint_in_range3 (to_int8 x)) :pattern ((to_int8 x)) )))

(declare-sort hash_bit_length 0)

(declare-fun attr__ATTRIBUTE_MODULUS3 () (_ BitVec 64))

(define-fun in_range1 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 18446744073709551608))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x)
                                        (<= x 18446744073709551608)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (hash_bit_length hash_bit_length) Bool)

(declare-fun dummy3 () hash_bit_length)

(declare-datatypes ()
((hash_bit_length__ref
 (mk_hash_bit_length__ref (hash_bit_length__content hash_bit_length)))))
(define-fun hash_bit_length__ref___projection ((a hash_bit_length__ref)) hash_bit_length
  (hash_bit_length__content a))

(declare-fun to_rep3 (hash_bit_length) (_ BitVec 64))

(declare-fun of_rep3 ((_ BitVec 64)) hash_bit_length)

;; inversion_axiom
  (assert
  (forall ((x hash_bit_length))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x hash_bit_length)) (! (in_range1
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (=> (in_range1 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun to_int9 ((x hash_bit_length)) Int (bv2int (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_bit_length)) (! (in_range_int
  (to_int9 x)) :pattern ((to_int9 x)) )))

(declare-sort unsigned_64 0)

(declare-fun attr__ATTRIBUTE_MODULUS4 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy4 () unsigned_64)

(declare-datatypes ()
((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64
  (unsigned_64__content a))

(declare-fun to_rep4 (unsigned_64) (_ BitVec 64))

(declare-fun of_rep4 ((_ BitVec 64)) unsigned_64)

;; inversion_axiom
  (assert
  (forall ((x unsigned_64))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))) )))

(define-fun to_int10 ((x unsigned_64)) Int (bv2int (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_64)) (! (uint_in_range3
  (to_int10 x)) :pattern ((to_int10 x)) )))

(declare-sort byte 0)

(declare-fun attr__ATTRIBUTE_MODULUS5 () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq5 (byte byte) Bool)

(declare-fun dummy5 () byte)

(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))

(declare-fun to_rep5 (byte) (_ BitVec 8))

(declare-fun of_rep5 ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep5 (of_rep5 x)) x) :pattern ((to_rep5 (of_rep5 x))) )))

(define-fun to_int11 ((x byte)) Int (bv2int (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range
  (to_int11 x)) :pattern ((to_int11 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) byte))))))
(declare-fun slide ((Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (byte (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; singleton_def
  (assert
  (forall ((v byte))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) byte)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) byte))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep5 (select a temp___idx_132))
                                     (to_rep5
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep5 (select a temp___idx_132)) (to_rep5
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) byte) (_ BitVec 64) (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep5 (select a (bvadd i #x0000000000000001))) (to_rep5
                                                              (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep5 (select a (bvadd j #x0000000000000001))) (to_rep5
                                                              (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) unsigned_64)

(declare-fun last (t) unsigned_64)

(declare-fun mk ((_ BitVec 64) (_ BitVec 64)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (and (= (to_rep4 (first (mk f l))) f) (= (to_rep4 (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool true)

(declare-datatypes ()
((us_t (mk___t (elts (Array (_ BitVec 64) byte))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) byte) (elts a))

(define-fun of_array ((a (Array (_ BitVec 64) byte)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 64) (to_rep4 (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 64) (to_rep4 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2int (last1 a)) (bv2int (first1 a))) 1)
                                  0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array (_ BitVec 64) byte)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array (_ BitVec 64) byte)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep4 (first (rt x)))
                 (to_rep4 (last (rt x))) (elts y) (to_rep4 (first (rt y)))
                 (to_rep4 (last (rt y)))))

(declare-fun user_eq6 (us_t us_t) Bool)

(declare-fun dummy6 () us_t)

(declare-datatypes ()
((byte_seq__ref (mk_byte_seq__ref (byte_seq__content us_t)))))
(define-fun byte_seq__ref___projection ((a byte_seq__ref)) us_t (byte_seq__content
                                                                a))

(declare-sort skein_512_block_bytes_index 0)

(declare-fun attr__ATTRIBUTE_MODULUS6 () (_ BitVec 64))

(define-fun in_range2 ((x (_ BitVec 64))) Bool (and
                                               (bvule ((_ int2bv 64) 0) x)
                                               (bvule x ((_ int2bv 64) 63))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 64))

(declare-fun user_eq7 (skein_512_block_bytes_index
  skein_512_block_bytes_index) Bool)

(declare-fun dummy7 () skein_512_block_bytes_index)

(declare-datatypes ()
((skein_512_block_bytes_index__ref
 (mk_skein_512_block_bytes_index__ref
 (skein_512_block_bytes_index__content skein_512_block_bytes_index)))))
(define-fun skein_512_block_bytes_index__ref___projection ((a skein_512_block_bytes_index__ref)) skein_512_block_bytes_index
  (skein_512_block_bytes_index__content a))

(define-fun dynamic_invariant2 ((temp___expr_559 (Array (_ BitVec 64) byte))
  (temp___is_init_556 Bool) (temp___skip_constant_557 Bool)
  (temp___do_toplevel_558 Bool)) Bool (=> (= temp___do_toplevel_558 true)
                                      (=> (= temp___is_init_556 true)
                                      (bvult (last1
                                             (of_array temp___expr_559
                                             ((_ int2bv 64) 0)
                                             ((_ int2bv 64) 63))) ((_ int2bv 64) 18446744073709551615)))))

(define-fun dynamic_predicate ((temp___567 (Array (_ BitVec 64) byte))) Bool (bvult
  (last1 (of_array temp___567 ((_ int2bv 64) 0) ((_ int2bv 64) 63))) ((_ int2bv 64) 18446744073709551615)))

(declare-sort u7 0)

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 127))))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 8))

(declare-fun user_eq8 (u7 u7) Bool)

(declare-fun dummy8 () u7)

(declare-datatypes () ((u7__ref (mk_u7__ref (u7__content u7)))))
(define-fun u7__ref___projection ((a u7__ref)) u7 (u7__content a))

(declare-fun to_rep6 (u7) (_ BitVec 8))

(declare-fun of_rep6 ((_ BitVec 8)) u7)

;; inversion_axiom
  (assert
  (forall ((x u7)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x u7)) (! (in_range3 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 128))))
     (=> (in_range3 y) (= (to_rep6 (of_rep6 x)) y))) :pattern ((to_rep6
                                                               (of_rep6 x))) )))

(define-fun to_int12 ((x u7)) Int (bv2int (to_rep6 x)))

;; range_int_axiom
  (assert
  (forall ((x u7)) (! (in_range_int2 (to_int12 x)) :pattern ((to_int12 x)) )))

(declare-sort u6 0)

(define-fun in_range4 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 63))))

(define-fun in_range_int3 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 8))

(declare-fun user_eq9 (u6 u6) Bool)

(declare-fun dummy9 () u6)

(declare-datatypes () ((u6__ref (mk_u6__ref (u6__content u6)))))
(define-fun u6__ref___projection ((a u6__ref)) u6 (u6__content a))

(define-fun dynamic_invariant3 ((temp___expr_615 (_ BitVec 8))
  (temp___is_init_612 Bool) (temp___skip_constant_613 Bool)
  (temp___do_toplevel_614 Bool)) Bool (=>
                                      (or (= temp___is_init_612 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 63)))
                                      (in_range4 temp___expr_615)))

(declare-fun to_rep7 (u6) (_ BitVec 8))

(declare-fun of_rep7 ((_ BitVec 8)) u6)

;; inversion_axiom
  (assert
  (forall ((x u6)) (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x u6)) (! (in_range4 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 64))))
     (=> (in_range4 y) (= (to_rep7 (of_rep7 x)) y))) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(define-fun to_int13 ((x u6)) Int (bv2int (to_rep7 x)))

;; range_int_axiom
  (assert
  (forall ((x u6)) (! (in_range_int3 (to_int13 x)) :pattern ((to_int13 x)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__skein__tweak_value__byte_count_lsb u64)(rec__skein__tweak_value__byte_count_msb u32)(rec__skein__tweak_value__reserved u16)(rec__skein__tweak_value__tree_level u7)(rec__skein__tweak_value__bit_pad Bool)(rec__skein__tweak_value__field_type u6)(rec__skein__tweak_value__first_block Bool)(rec__skein__tweak_value__final_block Bool)))))
(define-fun us_split_fields_Byte_Count_LSB__projection ((a us_split_fields)) u64
  (rec__skein__tweak_value__byte_count_lsb a))

(define-fun us_split_fields_Byte_Count_MSB__projection ((a us_split_fields)) u32
  (rec__skein__tweak_value__byte_count_msb a))

(define-fun us_split_fields_Reserved__projection ((a us_split_fields)) u16
  (rec__skein__tweak_value__reserved a))

(define-fun us_split_fields_Tree_Level__projection ((a us_split_fields)) u7
  (rec__skein__tweak_value__tree_level a))

(define-fun us_split_fields_Bit_Pad__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__bit_pad a))

(define-fun us_split_fields_Field_Type__projection ((a us_split_fields)) u6
  (rec__skein__tweak_value__field_type a))

(define-fun us_split_fields_First_Block__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__first_block a))

(define-fun us_split_fields_Final_Block__projection ((a us_split_fields)) Bool
  (rec__skein__tweak_value__final_block a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (and
                        (= (to_rep2
                           (rec__skein__tweak_value__byte_count_lsb
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__skein__tweak_value__byte_count_lsb
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__skein__tweak_value__byte_count_msb
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__skein__tweak_value__byte_count_msb
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__skein__tweak_value__reserved
                           (us_split_fields1 a))) (to_rep
                                                  (rec__skein__tweak_value__reserved
                                                  (us_split_fields1 b)))))
                        (= (to_rep6
                           (rec__skein__tweak_value__tree_level
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__skein__tweak_value__tree_level
                                                  (us_split_fields1 b)))))
                        (= (rec__skein__tweak_value__bit_pad
                           (us_split_fields1 a)) (rec__skein__tweak_value__bit_pad
                                                 (us_split_fields1 b))))
                        (= (to_rep7
                           (rec__skein__tweak_value__field_type
                           (us_split_fields1 a))) (to_rep7
                                                  (rec__skein__tweak_value__field_type
                                                  (us_split_fields1 b)))))
                        (= (rec__skein__tweak_value__first_block
                           (us_split_fields1 a)) (rec__skein__tweak_value__first_block
                                                 (us_split_fields1 b))))
                        (= (rec__skein__tweak_value__final_block
                           (us_split_fields1 a)) (rec__skein__tweak_value__final_block
                                                 (us_split_fields1 b))))
                   true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun skein__tweak_value__byte_count_lsb__first__bit () Int)

(declare-fun skein__tweak_value__byte_count_lsb__last__bit () Int)

(declare-fun skein__tweak_value__byte_count_lsb__position () Int)

;; skein__tweak_value__byte_count_lsb__first__bit_axiom
  (assert (<= 0 skein__tweak_value__byte_count_lsb__first__bit))

;; skein__tweak_value__byte_count_lsb__last__bit_axiom
  (assert
  (< skein__tweak_value__byte_count_lsb__first__bit skein__tweak_value__byte_count_lsb__last__bit))

;; skein__tweak_value__byte_count_lsb__position_axiom
  (assert (<= 0 skein__tweak_value__byte_count_lsb__position))

(declare-fun skein__tweak_value__byte_count_msb__first__bit () Int)

(declare-fun skein__tweak_value__byte_count_msb__last__bit () Int)

(declare-fun skein__tweak_value__byte_count_msb__position () Int)

;; skein__tweak_value__byte_count_msb__first__bit_axiom
  (assert (<= 0 skein__tweak_value__byte_count_msb__first__bit))

;; skein__tweak_value__byte_count_msb__last__bit_axiom
  (assert
  (< skein__tweak_value__byte_count_msb__first__bit skein__tweak_value__byte_count_msb__last__bit))

;; skein__tweak_value__byte_count_msb__position_axiom
  (assert (<= 0 skein__tweak_value__byte_count_msb__position))

(declare-fun skein__tweak_value__reserved__first__bit () Int)

(declare-fun skein__tweak_value__reserved__last__bit () Int)

(declare-fun skein__tweak_value__reserved__position () Int)

;; skein__tweak_value__reserved__first__bit_axiom
  (assert (<= 0 skein__tweak_value__reserved__first__bit))

;; skein__tweak_value__reserved__last__bit_axiom
  (assert
  (< skein__tweak_value__reserved__first__bit skein__tweak_value__reserved__last__bit))

;; skein__tweak_value__reserved__position_axiom
  (assert (<= 0 skein__tweak_value__reserved__position))

(declare-fun skein__tweak_value__tree_level__first__bit () Int)

(declare-fun skein__tweak_value__tree_level__last__bit () Int)

(declare-fun skein__tweak_value__tree_level__position () Int)

;; skein__tweak_value__tree_level__first__bit_axiom
  (assert (<= 0 skein__tweak_value__tree_level__first__bit))

;; skein__tweak_value__tree_level__last__bit_axiom
  (assert
  (< skein__tweak_value__tree_level__first__bit skein__tweak_value__tree_level__last__bit))

;; skein__tweak_value__tree_level__position_axiom
  (assert (<= 0 skein__tweak_value__tree_level__position))

(declare-fun skein__tweak_value__bit_pad__first__bit () Int)

(declare-fun skein__tweak_value__bit_pad__last__bit () Int)

(declare-fun skein__tweak_value__bit_pad__position () Int)

;; skein__tweak_value__bit_pad__first__bit_axiom
  (assert (<= 0 skein__tweak_value__bit_pad__first__bit))

;; skein__tweak_value__bit_pad__last__bit_axiom
  (assert
  (< skein__tweak_value__bit_pad__first__bit skein__tweak_value__bit_pad__last__bit))

;; skein__tweak_value__bit_pad__position_axiom
  (assert (<= 0 skein__tweak_value__bit_pad__position))

(declare-fun skein__tweak_value__field_type__first__bit () Int)

(declare-fun skein__tweak_value__field_type__last__bit () Int)

(declare-fun skein__tweak_value__field_type__position () Int)

;; skein__tweak_value__field_type__first__bit_axiom
  (assert (<= 0 skein__tweak_value__field_type__first__bit))

;; skein__tweak_value__field_type__last__bit_axiom
  (assert
  (< skein__tweak_value__field_type__first__bit skein__tweak_value__field_type__last__bit))

;; skein__tweak_value__field_type__position_axiom
  (assert (<= 0 skein__tweak_value__field_type__position))

(declare-fun skein__tweak_value__first_block__first__bit () Int)

(declare-fun skein__tweak_value__first_block__last__bit () Int)

(declare-fun skein__tweak_value__first_block__position () Int)

;; skein__tweak_value__first_block__first__bit_axiom
  (assert (<= 0 skein__tweak_value__first_block__first__bit))

;; skein__tweak_value__first_block__last__bit_axiom
  (assert
  (< skein__tweak_value__first_block__first__bit skein__tweak_value__first_block__last__bit))

;; skein__tweak_value__first_block__position_axiom
  (assert (<= 0 skein__tweak_value__first_block__position))

(declare-fun skein__tweak_value__final_block__first__bit () Int)

(declare-fun skein__tweak_value__final_block__last__bit () Int)

(declare-fun skein__tweak_value__final_block__position () Int)

;; skein__tweak_value__final_block__first__bit_axiom
  (assert (<= 0 skein__tweak_value__final_block__first__bit))

;; skein__tweak_value__final_block__last__bit_axiom
  (assert
  (< skein__tweak_value__final_block__first__bit skein__tweak_value__final_block__last__bit))

;; skein__tweak_value__final_block__position_axiom
  (assert (<= 0 skein__tweak_value__final_block__position))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-fun dummy10 () us_rep)

(declare-datatypes ()
((tweak_value__ref (mk_tweak_value__ref (tweak_value__content us_rep)))))
(define-fun tweak_value__ref___projection ((a tweak_value__ref)) us_rep
  (tweak_value__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__skein__context_header__tweak_words us_rep)(rec__skein__context_header__hash_bit_len hash_bit_length)(rec__skein__context_header__byte_count u64)))))
(define-fun us_split_fields_Tweak_Words__projection ((a us_split_fields2)) us_rep
  (rec__skein__context_header__tweak_words a))

(define-fun us_split_fields_Hash_Bit_Len__projection ((a us_split_fields2)) hash_bit_length
  (rec__skein__context_header__hash_bit_len a))

(define-fun us_split_fields_Byte_Count__projection ((a us_split_fields2)) u64
  (rec__skein__context_header__byte_count a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq2
                            (rec__skein__context_header__tweak_words
                            (us_split_fields3 a))
                            (rec__skein__context_header__tweak_words
                            (us_split_fields3 b))) true)
                         (= (to_rep3
                            (rec__skein__context_header__hash_bit_len
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__skein__context_header__hash_bit_len
                                                   (us_split_fields3 b)))))
                         (= (to_rep2
                            (rec__skein__context_header__byte_count
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__skein__context_header__byte_count
                                                   (us_split_fields3 b)))))
                    true false))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun skein__context_header__tweak_words__first__bit () Int)

(declare-fun skein__context_header__tweak_words__last__bit () Int)

(declare-fun skein__context_header__tweak_words__position () Int)

;; skein__context_header__tweak_words__first__bit_axiom
  (assert (<= 0 skein__context_header__tweak_words__first__bit))

;; skein__context_header__tweak_words__last__bit_axiom
  (assert
  (< skein__context_header__tweak_words__first__bit skein__context_header__tweak_words__last__bit))

;; skein__context_header__tweak_words__position_axiom
  (assert (<= 0 skein__context_header__tweak_words__position))

(declare-fun skein__context_header__hash_bit_len__first__bit () Int)

(declare-fun skein__context_header__hash_bit_len__last__bit () Int)

(declare-fun skein__context_header__hash_bit_len__position () Int)

;; skein__context_header__hash_bit_len__first__bit_axiom
  (assert (<= 0 skein__context_header__hash_bit_len__first__bit))

;; skein__context_header__hash_bit_len__last__bit_axiom
  (assert
  (< skein__context_header__hash_bit_len__first__bit skein__context_header__hash_bit_len__last__bit))

;; skein__context_header__hash_bit_len__position_axiom
  (assert (<= 0 skein__context_header__hash_bit_len__position))

(declare-fun skein__context_header__byte_count__first__bit () Int)

(declare-fun skein__context_header__byte_count__last__bit () Int)

(declare-fun skein__context_header__byte_count__position () Int)

;; skein__context_header__byte_count__first__bit_axiom
  (assert (<= 0 skein__context_header__byte_count__first__bit))

;; skein__context_header__byte_count__last__bit_axiom
  (assert
  (< skein__context_header__byte_count__first__bit skein__context_header__byte_count__last__bit))

;; skein__context_header__byte_count__position_axiom
  (assert (<= 0 skein__context_header__byte_count__position))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-fun dummy11 () us_rep1)

(declare-datatypes ()
((context_header__ref
 (mk_context_header__ref (context_header__content us_rep1)))))
(define-fun context_header__ref___projection ((a context_header__ref)) us_rep1
  (context_header__content a))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array (_ BitVec 64) u64))))))
(declare-fun slide1 ((Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((first2 (_ BitVec 64)))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (u64 (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; singleton_def
  (assert
  (forall ((v u64))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq4 ((a (Array (_ BitVec 64) u64)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) u64))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_133 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_133)
                                     (bvule temp___idx_133 a__last))
                                     (= (to_rep2 (select a temp___idx_133))
                                     (to_rep2
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_133)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_133 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_133) (bvule temp___idx_133 a__last))
  (= (to_rep2 (select a temp___idx_133)) (to_rep2
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_133)))))))))))

(declare-fun compare1 ((Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) u64) (_ BitVec 64) (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq4 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq4 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep2 (select a (bvadd i #x0000000000000001))) (to_rep2
                                                              (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq4 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep2 (select a (bvadd j #x0000000000000001))) (to_rep2
                                                              (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun dummy12 () (Array (_ BitVec 64) u64))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array (_ BitVec 64) u64)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array (_ BitVec 64) u64)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array (_ BitVec 64) u64)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) u64))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq12 ((Array (_ BitVec 64) u64)
  (Array (_ BitVec 64) u64)) Bool)

(declare-fun dummy13 () (Array (_ BitVec 64) byte))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array (_ BitVec 64) byte)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array (_ BitVec 64) byte)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array (_ BitVec 64) byte)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert
  (forall ((a (Array (_ BitVec 64) byte))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq13 ((Array (_ BitVec 64) byte)
  (Array (_ BitVec 64) byte)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__skein__skein_512_context__h us_rep1)(rec__skein__skein_512_context__x (Array (_ BitVec 64) u64))(rec__skein__skein_512_context__b (Array (_ BitVec 64) byte))))))
(define-fun us_split_fields_H__projection ((a us_split_fields4)) us_rep1
  (rec__skein__skein_512_context__h a))

(define-fun us_split_fields_X__projection ((a us_split_fields4)) (Array (_ BitVec 64) u64)
  (rec__skein__skein_512_context__x a))

(define-fun us_split_fields_B__projection ((a us_split_fields4)) (Array (_ BitVec 64) byte)
  (rec__skein__skein_512_context__b a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq5 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (bool_eq3
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 a))
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 b))) true)
                         (= (bool_eq4
                            (rec__skein__skein_512_context__x
                            (us_split_fields5 a)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 7)
                            (rec__skein__skein_512_context__x
                            (us_split_fields5 b)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 7)) true))
                         (= (bool_eq
                            (rec__skein__skein_512_context__b
                            (us_split_fields5 a)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 63)
                            (rec__skein__skein_512_context__b
                            (us_split_fields5 b)) ((_ int2bv 64) 0)
                            ((_ int2bv 64) 63)) true))
                    true false))

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-fun skein__skein_512_context__h__first__bit () Int)

(declare-fun skein__skein_512_context__h__last__bit () Int)

(declare-fun skein__skein_512_context__h__position () Int)

;; skein__skein_512_context__h__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__h__first__bit))

;; skein__skein_512_context__h__last__bit_axiom
  (assert
  (< skein__skein_512_context__h__first__bit skein__skein_512_context__h__last__bit))

;; skein__skein_512_context__h__position_axiom
  (assert (<= 0 skein__skein_512_context__h__position))

(declare-fun skein__skein_512_context__x__first__bit () Int)

(declare-fun skein__skein_512_context__x__last__bit () Int)

(declare-fun skein__skein_512_context__x__position () Int)

;; skein__skein_512_context__x__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__x__first__bit))

;; skein__skein_512_context__x__last__bit_axiom
  (assert
  (< skein__skein_512_context__x__first__bit skein__skein_512_context__x__last__bit))

;; skein__skein_512_context__x__position_axiom
  (assert (<= 0 skein__skein_512_context__x__position))

(declare-fun skein__skein_512_context__b__first__bit () Int)

(declare-fun skein__skein_512_context__b__last__bit () Int)

(declare-fun skein__skein_512_context__b__position () Int)

;; skein__skein_512_context__b__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__b__first__bit))

;; skein__skein_512_context__b__last__bit_axiom
  (assert
  (< skein__skein_512_context__b__first__bit skein__skein_512_context__b__last__bit))

;; skein__skein_512_context__b__position_axiom
  (assert (<= 0 skein__skein_512_context__b__position))

(declare-fun user_eq14 (us_rep2 us_rep2) Bool)

(declare-fun dummy14 () us_rep2)

(declare-datatypes ()
((skein_512_context__ref
 (mk_skein_512_context__ref (skein_512_context__content us_rep2)))))
(define-fun skein_512_context__ref___projection ((a skein_512_context__ref)) us_rep2
  (skein_512_context__content a))

(define-fun dynamic_invariant4 ((temp___expr_652 us_rep2)
  (temp___is_init_649 Bool) (temp___skip_constant_650 Bool)
  (temp___do_toplevel_651 Bool)) Bool (=> (= temp___is_init_649 true)
                                      (bvult (last1
                                             (of_array
                                             (rec__skein__skein_512_context__b
                                             (us_split_fields5
                                             temp___expr_652))
                                             ((_ int2bv 64) 0)
                                             ((_ int2bv 64) 63))) ((_ int2bv 64) 18446744073709551615))))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int Bool))))))
(declare-fun slide2 ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first2 Int))
  (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq6 ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_134 Int))
                           (=>
                           (and (<= a__first temp___idx_134)
                           (<= temp___idx_134 a__last))
                           (= (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_134 Int))
  (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last))
  (= (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134))))))))))

(declare-fun compare2 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare2 a a_first a_last b b_first b_last) 0)
     (= (bool_eq6 a a_first a_last b b_first b_last) true)) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare2 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq6 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int5 (select a (+ i 1))) (to_int5 (select b (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare2 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq6 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int5 (select b (+ i 1))) (to_int5 (select a (+ j 1))))))))))) :pattern (
  (compare2 a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-fun debug_none () (Array Int Bool))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun skein__debug_none__aggregate_def (Bool) (Array Int Bool))

;; def_axiom
  (assert
  (forall ((temp___136 Bool))
  (forall ((temp___137 Int))
  (= (select (skein__debug_none__aggregate_def temp___136) temp___137) temp___136))))

(declare-fun debug_final () (Array Int Bool))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun skein__debug_final__aggregate_def (Bool Bool) (Array Int Bool))

;; def_axiom
  (assert
  (forall ((temp___139 Bool) (temp___140 Bool))
  (let ((temp___138 (skein__debug_final__aggregate_def temp___139 temp___140)))
  (forall ((temp___141 Int))
  (ite (= temp___141 9) (= (select temp___138 temp___141) temp___139)
  (= (select temp___138 temp___141) temp___140))))))

(declare-fun debug_all () (Array Int Bool))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun skein__debug_all__aggregate_def (Bool Bool
  Bool) (Array Int Bool))

;; def_axiom
  (assert
  (forall ((temp___143 Bool) (temp___144 Bool) (temp___145 Bool))
  (let ((temp___142 (skein__debug_all__aggregate_def temp___143 temp___144
                    temp___145)))
  (forall ((temp___146 Int))
  (ite (= temp___146 12) (= (select temp___142 temp___146) temp___144)
  (ite (= temp___146 11) (= (select temp___142 temp___146) temp___143)
  (= (select temp___142 temp___146) temp___145)))))))

(declare-fun threefish_debug_all () (Array Int Bool))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun skein__threefish_debug_all__aggregate_def (Bool
  Bool) (Array Int Bool))

;; def_axiom
  (assert
  (forall ((temp___148 Bool) (temp___149 Bool))
  (let ((temp___147 (skein__threefish_debug_all__aggregate_def temp___148
                    temp___149)))
  (forall ((temp___150 Int))
  (ite (= temp___150 12) (= (select temp___147 temp___150) temp___148)
  (= (select temp___147 temp___150) temp___149))))))

(declare-fun skein_block_type_key () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun skein_block_type_cfg () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun skein_block_type_pers () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun skein_block_type_pk () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun skein_block_type_kdf () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun skein_block_type_nonce () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun skein_block_type_msg () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun skein_block_type_out () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun skein_block_type_mask () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun null_tweak_value () us_rep)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun null_context_header () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun null_skein_512_context () us_rep2)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun temp___151 ((_ BitVec 64)) (Array (_ BitVec 64) u64))

;; def_axiom
  (assert
  (forall ((temp___153 (_ BitVec 64)))
  (forall ((temp___154 (_ BitVec 64)))
  (= (select (temp___151 temp___153) temp___154) (of_rep2 temp___153)))))

(declare-fun temp___155 ((_ BitVec 8)) (Array (_ BitVec 64) byte))

;; def_axiom
  (assert
  (forall ((temp___157 (_ BitVec 8)))
  (forall ((temp___158 (_ BitVec 64)))
  (= (select (temp___155 temp___157) temp___158) (of_rep5 temp___157)))))

(declare-sort rotation_count 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 2 x) (<= x 60)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq15 (rotation_count rotation_count) Bool)

(declare-fun dummy15 () rotation_count)

(declare-datatypes ()
((rotation_count__ref
 (mk_rotation_count__ref (rotation_count__content rotation_count)))))
(define-fun rotation_count__ref___projection ((a rotation_count__ref)) rotation_count
  (rotation_count__content a))

(define-fun dynamic_invariant5 ((temp___expr_1107 Int)
  (temp___is_init_1104 Bool) (temp___skip_constant_1105 Bool)
  (temp___do_toplevel_1106 Bool)) Bool (=>
                                       (or (= temp___is_init_1104 true)
                                       (<= 2 60)) (in_range5
                                       temp___expr_1107)))

(declare-fun r_512_0_0 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun r_512_0_1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun r_512_0_2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun r_512_0_3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun r_512_1_0 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun r_512_1_1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun r_512_1_2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun r_512_1_3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun r_512_2_0 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-fun r_512_2_1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS25 () Int)

(declare-fun r_512_2_2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS26 () Int)

(declare-fun r_512_2_3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS27 () Int)

(declare-fun r_512_3_0 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS28 () Int)

(declare-fun r_512_3_1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS29 () Int)

(declare-fun r_512_3_2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS30 () Int)

(declare-fun r_512_3_3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS31 () Int)

(declare-fun r_512_4_0 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS32 () Int)

(declare-fun r_512_4_1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS33 () Int)

(declare-fun r_512_4_2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS34 () Int)

(declare-fun r_512_4_3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS35 () Int)

(declare-fun r_512_5_0 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS36 () Int)

(declare-fun r_512_5_1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS37 () Int)

(declare-fun r_512_5_2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS38 () Int)

(declare-fun r_512_5_3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS39 () Int)

(declare-fun r_512_6_0 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS40 () Int)

(declare-fun r_512_6_1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS41 () Int)

(declare-fun r_512_6_2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS42 () Int)

(declare-fun r_512_6_3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS43 () Int)

(declare-fun r_512_7_0 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS44 () Int)

(declare-fun r_512_7_1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS45 () Int)

(declare-fun r_512_7_2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS46 () Int)

(declare-fun r_512_7_3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS47 () Int)

(declare-fun skein_id_string_le () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_ADDRESS48 () Int)

(declare-fun skein_schema_ver () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS49 () Int)

(declare-fun skein_ks_parity () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_ADDRESS50 () Int)

;; r_512_0_0__def_axiom
  (assert (= r_512_0_0 46))

;; r_512_0_1__def_axiom
  (assert (= r_512_0_1 36))

;; r_512_0_2__def_axiom
  (assert (= r_512_0_2 19))

;; r_512_0_3__def_axiom
  (assert (= r_512_0_3 37))

;; r_512_1_0__def_axiom
  (assert (= r_512_1_0 33))

;; r_512_1_1__def_axiom
  (assert (= r_512_1_1 27))

;; r_512_1_2__def_axiom
  (assert (= r_512_1_2 14))

;; r_512_1_3__def_axiom
  (assert (= r_512_1_3 42))

;; r_512_2_0__def_axiom
  (assert (= r_512_2_0 17))

;; r_512_2_1__def_axiom
  (assert (= r_512_2_1 49))

;; r_512_2_2__def_axiom
  (assert (= r_512_2_2 36))

;; r_512_2_3__def_axiom
  (assert (= r_512_2_3 39))

;; r_512_3_0__def_axiom
  (assert (= r_512_3_0 44))

;; r_512_3_1__def_axiom
  (assert (= r_512_3_1 9))

;; r_512_3_2__def_axiom
  (assert (= r_512_3_2 54))

;; r_512_3_3__def_axiom
  (assert (= r_512_3_3 56))

;; r_512_4_0__def_axiom
  (assert (= r_512_4_0 39))

;; r_512_4_1__def_axiom
  (assert (= r_512_4_1 30))

;; r_512_4_2__def_axiom
  (assert (= r_512_4_2 34))

;; r_512_4_3__def_axiom
  (assert (= r_512_4_3 24))

;; r_512_5_0__def_axiom
  (assert (= r_512_5_0 13))

;; r_512_5_1__def_axiom
  (assert (= r_512_5_1 50))

;; r_512_5_2__def_axiom
  (assert (= r_512_5_2 10))

;; r_512_5_3__def_axiom
  (assert (= r_512_5_3 17))

;; r_512_6_0__def_axiom
  (assert (= r_512_6_0 25))

;; r_512_6_1__def_axiom
  (assert (= r_512_6_1 29))

;; r_512_6_2__def_axiom
  (assert (= r_512_6_2 39))

;; r_512_6_3__def_axiom
  (assert (= r_512_6_3 43))

;; r_512_7_0__def_axiom
  (assert (= r_512_7_0 8))

;; r_512_7_1__def_axiom
  (assert (= r_512_7_1 35))

;; r_512_7_2__def_axiom
  (assert (= r_512_7_2 56))

;; r_512_7_3__def_axiom
  (assert (= r_512_7_3 22))

;; skein_id_string_le__def_axiom
  (assert (= skein_id_string_le ((_ int2bv 32) 859916371)))

;; skein_schema_ver__def_axiom
  (assert (= skein_schema_ver ((_ int2bv 64) 5154883667)))

;; skein_ks_parity__def_axiom
  (assert (= skein_ks_parity ((_ int2bv 64) 2004413935125273122)))

(define-fun dynamic_invariant6 ((temp___expr_290 (_ BitVec 8))
  (temp___is_init_287 Bool) (temp___skip_constant_288 Bool)
  (temp___do_toplevel_289 Bool)) Bool true)

(define-fun dynamic_invariant7 ((temp___expr_296 (_ BitVec 16))
  (temp___is_init_293 Bool) (temp___skip_constant_294 Bool)
  (temp___do_toplevel_295 Bool)) Bool true)

(define-fun dynamic_invariant8 ((temp___expr_368 us_t)
  (temp___is_init_365 Bool) (temp___skip_constant_366 Bool)
  (temp___do_toplevel_367 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_366 true))
                                      (dynamic_property ((_ int2bv 64) 0)
                                      ((_ int2bv 64) 18446744073709551615)
                                      (first1 temp___expr_368)
                                      (last1 temp___expr_368)))
                                      (=> (= temp___do_toplevel_367 true)
                                      (=> (= temp___is_init_365 true)
                                      (bvult (last1 temp___expr_368) ((_ int2bv 64) 18446744073709551615))))))

(define-fun dynamic_predicate1 ((temp___371 us_t)) Bool (bvult (last1
                                                               temp___371) ((_ int2bv 64) 18446744073709551615)))

(define-fun dynamic_invariant9 ((temp___expr_520 (_ BitVec 64))
  (temp___is_init_517 Bool) (temp___skip_constant_518 Bool)
  (temp___do_toplevel_519 Bool)) Bool (=>
                                      (or (= temp___is_init_517 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 18446744073709551608)))
                                      (in_range1 temp___expr_520)))

(define-fun dynamic_invariant10 ((temp___expr_553 (_ BitVec 64))
  (temp___is_init_550 Bool) (temp___skip_constant_551 Bool)
  (temp___do_toplevel_552 Bool)) Bool (=>
                                      (or (= temp___is_init_550 true)
                                      (bvule ((_ int2bv 64) 0) ((_ int2bv 64) 63)))
                                      (in_range2 temp___expr_553)))

;; debug_none__def_axiom
  (assert (= debug_none (skein__debug_none__aggregate_def (of_int 0))))

;; debug_final__def_axiom
  (assert
  (= debug_final (skein__debug_final__aggregate_def (of_int 1) (of_int 0))))

;; debug_all__def_axiom
  (assert
  (= debug_all (skein__debug_all__aggregate_def (of_int 0) (of_int 0)
               (of_int 1))))

;; threefish_debug_all__def_axiom
  (assert
  (= threefish_debug_all (skein__threefish_debug_all__aggregate_def
                         (of_int 0) (of_int 1))))

(define-fun dynamic_invariant11 ((temp___expr_609 (_ BitVec 8))
  (temp___is_init_606 Bool) (temp___skip_constant_607 Bool)
  (temp___do_toplevel_608 Bool)) Bool (=>
                                      (or (= temp___is_init_606 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 127)))
                                      (in_range3 temp___expr_609)))

;; skein_block_type_key__def_axiom
  (assert (= skein_block_type_key ((_ int2bv 8) 0)))

;; skein_block_type_cfg__def_axiom
  (assert (= skein_block_type_cfg ((_ int2bv 8) 4)))

;; skein_block_type_pers__def_axiom
  (assert (= skein_block_type_pers ((_ int2bv 8) 8)))

;; skein_block_type_pk__def_axiom
  (assert (= skein_block_type_pk ((_ int2bv 8) 12)))

;; skein_block_type_kdf__def_axiom
  (assert (= skein_block_type_kdf ((_ int2bv 8) 16)))

;; skein_block_type_nonce__def_axiom
  (assert (= skein_block_type_nonce ((_ int2bv 8) 20)))

;; skein_block_type_msg__def_axiom
  (assert (= skein_block_type_msg ((_ int2bv 8) 48)))

;; skein_block_type_out__def_axiom
  (assert (= skein_block_type_out ((_ int2bv 8) 63)))

;; skein_block_type_mask__def_axiom
  (assert (= skein_block_type_mask ((_ int2bv 8) 63)))

;; null_tweak_value__def_axiom
  (assert
  (= null_tweak_value (mk___rep
                      (mk___split_fields (of_rep2 ((_ int2bv 64) 0))
                      (of_rep1 ((_ int2bv 32) 0)) (of_rep ((_ int2bv 16) 0))
                      (of_rep6 ((_ int2bv 8) 0)) (of_int 0)
                      (of_rep7 ((_ int2bv 8) 0)) (of_int 0) (of_int 0)))))

;; null_context_header__def_axiom
  (assert
  (= null_context_header (mk___rep1
                         (mk___split_fields1 null_tweak_value
                         (of_rep3 ((_ int2bv 64) 0))
                         (of_rep2 ((_ int2bv 64) 0))))))

;; null_skein_512_context__def_axiom
  (assert
  (= null_skein_512_context (mk___rep2
                            (mk___split_fields2 null_context_header
                            (temp___151 ((_ int2bv 64) 0))
                            (temp___155 ((_ int2bv 8) 0))))))

(define-fun dynamic_invariant12 ((temp___expr_266 (_ BitVec 64))
  (temp___is_init_263 Bool) (temp___skip_constant_264 Bool)
  (temp___do_toplevel_265 Bool)) Bool true)

(declare-fun o () u6)

(declare-fun o1 () u7)

(declare-fun o2 () u16)

(declare-fun o3 () u32)

(declare-fun o4 () u64)

(declare-fun o5 () u64)

(declare-fun o6 () u32)

(declare-fun o7 () u16)

(declare-fun o8 () u7)

(declare-fun o9 () Bool)

(declare-fun o10 () u6)

(declare-fun o11 () Bool)

(declare-fun o12 () Bool)

(declare-fun skein__null_tweak_value__assume () u64)

(declare-fun skein__null_tweak_value__assume1 () u32)

(declare-fun skein__null_tweak_value__assume2 () u16)

(declare-fun skein__null_tweak_value__assume3 () u7)

(declare-fun skein__null_tweak_value__assume4 () Bool)

(declare-fun skein__null_tweak_value__assume5 () u6)

(declare-fun skein__null_tweak_value__assume6 () Bool)

(declare-fun skein__null_tweak_value__assume7 () Bool)

(declare-fun o13 () u64)

(declare-fun o14 () hash_bit_length)

(declare-fun o15 () u64)

(declare-fun o16 () u32)

(declare-fun o17 () u16)

(declare-fun o18 () u7)

(declare-fun o19 () Bool)

(declare-fun o20 () u6)

(declare-fun o21 () Bool)

(declare-fun o22 () Bool)

(declare-fun o23 () hash_bit_length)

(declare-fun o24 () u64)

(declare-fun skein__null_context_header__assume () u64)

(declare-fun skein__null_context_header__assume1 () u32)

(declare-fun skein__null_context_header__assume2 () u16)

(declare-fun skein__null_context_header__assume3 () u7)

(declare-fun skein__null_context_header__assume4 () Bool)

(declare-fun skein__null_context_header__assume5 () u6)

(declare-fun skein__null_context_header__assume6 () Bool)

(declare-fun skein__null_context_header__assume7 () Bool)

(declare-fun skein__null_context_header__assume8 () hash_bit_length)

(declare-fun skein__null_context_header__assume9 () u64)

;; H
  (assert (= (skein__debug_none__aggregate_def (of_int 0)) debug_none))

;; H
  (assert
  (= (skein__debug_final__aggregate_def (of_int 1) (of_int 0)) debug_final))

;; H
  (assert
  (= (skein__debug_all__aggregate_def (of_int 0) (of_int 0) (of_int 1))
  debug_all))

;; H
  (assert
  (= (skein__threefish_debug_all__aggregate_def (of_int 0) (of_int 1))
  threefish_debug_all))

;; H
  (assert (in_range4 skein_block_type_key))

;; H
  (assert (in_range4 skein_block_type_cfg))

;; H
  (assert (in_range4 skein_block_type_pers))

;; H
  (assert (in_range4 skein_block_type_pk))

;; H
  (assert (in_range4 skein_block_type_kdf))

;; H
  (assert (in_range4 skein_block_type_nonce))

;; H
  (assert (in_range4 skein_block_type_msg))

;; H
  (assert (in_range4 skein_block_type_out))

;; H
  (assert (in_range4 skein_block_type_mask))

;; H
  (assert (= (to_rep7 o) ((_ int2bv 8) 0)))

;; H
  (assert (= (to_rep6 o1) ((_ int2bv 8) 0)))

;; H
  (assert (= (to_rep o2) ((_ int2bv 16) 0)))

;; H
  (assert (= (to_rep1 o3) ((_ int2bv 32) 0)))

;; H
  (assert (= (to_rep2 o4) ((_ int2bv 64) 0)))

;; H
  (assert (= o4 o5))

;; H
  (assert (= o3 o6))

;; H
  (assert (= o2 o7))

;; H
  (assert (= o1 o8))

;; H
  (assert (= (of_int 0) o9))

;; H
  (assert (= o o10))

;; H
  (assert (= (of_int 0) o11))

;; H
  (assert (= (of_int 0) o12))

;; H
  (assert (= skein__null_tweak_value__assume o5))

;; H
  (assert (= skein__null_tweak_value__assume1 o6))

;; H
  (assert (= skein__null_tweak_value__assume2 o7))

;; H
  (assert (= skein__null_tweak_value__assume3 o8))

;; H
  (assert (= skein__null_tweak_value__assume4 o9))

;; H
  (assert (= skein__null_tweak_value__assume5 o10))

;; H
  (assert (= skein__null_tweak_value__assume6 o11))

;; H
  (assert (= skein__null_tweak_value__assume7 o12))

;; H
  (assert
  (= (mk___rep
     (mk___split_fields skein__null_tweak_value__assume
     skein__null_tweak_value__assume1 skein__null_tweak_value__assume2
     skein__null_tweak_value__assume3 skein__null_tweak_value__assume4
     skein__null_tweak_value__assume5 skein__null_tweak_value__assume6
     skein__null_tweak_value__assume7)) null_tweak_value))

;; H
  (assert (= (to_rep2 o13) ((_ int2bv 64) 0)))

;; H
  (assert (= (to_rep3 o14) ((_ int2bv 64) 0)))

;; H
  (assert
  (= null_tweak_value (mk___rep
                      (mk___split_fields o15 o16 o17 o18 o19 o20 o21 o22))))

;; H
  (assert (= o14 o23))

;; H
  (assert (= o13 o24))

;; H
  (assert (= skein__null_context_header__assume o15))

;; H
  (assert (= skein__null_context_header__assume1 o16))

;; H
  (assert (= skein__null_context_header__assume2 o17))

;; H
  (assert (= skein__null_context_header__assume3 o18))

;; H
  (assert (= skein__null_context_header__assume4 o19))

;; H
  (assert (= skein__null_context_header__assume5 o20))

;; H
  (assert (= skein__null_context_header__assume6 o21))

;; H
  (assert (= skein__null_context_header__assume7 o22))

;; H
  (assert (= skein__null_context_header__assume8 o23))

;; H
  (assert (= skein__null_context_header__assume9 o24))

;; H
  (assert
  (= (mk___rep1
     (mk___split_fields1
     (mk___rep
     (mk___split_fields skein__null_context_header__assume
     skein__null_context_header__assume1 skein__null_context_header__assume2
     skein__null_context_header__assume3 skein__null_context_header__assume4
     skein__null_context_header__assume5 skein__null_context_header__assume6
     skein__null_context_header__assume7))
     skein__null_context_header__assume8 skein__null_context_header__assume9))
  null_context_header))

(assert
;; WP_parameter_def
 ;; File "skein.adb", line 308, characters 0-0
  (not (dynamic_predicate (temp___155 ((_ int2bv 8) 0)))))
(check-sat)
(exit)
