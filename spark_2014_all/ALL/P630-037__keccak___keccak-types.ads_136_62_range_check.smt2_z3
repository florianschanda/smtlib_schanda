;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort natural 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_33)))

(declare-sort unsigned_4 0)

(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 15))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 15)))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned_4 unsigned_4) Bool)

(declare-const dummy1 unsigned_4)

(declare-datatypes ()
((unsigned_4__ref (mk_unsigned_4__ref (unsigned_4__content unsigned_4)))))
(define-fun unsigned_4__ref___projection ((a unsigned_4__ref)) unsigned_4
  (unsigned_4__content a))

(define-fun dynamic_invariant1 ((temp___expr_214 (_ BitVec 8))
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)) Bool (=>
                                      (or (= temp___is_init_211 true)
                                      (bvule ((_ int2bv 8) 0) ((_ int2bv 8) 15)))
                                      (in_range1 temp___expr_214)))

(declare-fun shift_left_4 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun shift_left_4__function_guard ((_ BitVec 8) (_ BitVec 8)
  Int) Bool)

;; shift_left_4__post_axiom
  (assert
  (forall ((value (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and
     (and (dynamic_invariant1 value true true true) (dynamic_invariant amount
     true true true)) (<= amount 4)) (dynamic_invariant1
     (shift_left_4 value amount) true false true)) :pattern ((shift_left_4
                                                             value amount)) ))))

;; shift_left_4__def_axiom
  (assert
  (forall ((value (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant1 value true true true) (dynamic_invariant amount
     true true true))
     (= (shift_left_4 value amount) (bvand (ite (< amount 8)
                                           (bvshl value ((_ int2bv 8) amount))
                                           ((_ int2bv 8) 0)) ((_ int2bv 8) 15)))) :pattern (
  (shift_left_4 value amount)) ))))

(declare-fun shift_right_4 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun shift_right_4__function_guard ((_ BitVec 8) (_ BitVec 8)
  Int) Bool)

;; shift_right_4__post_axiom
  (assert
  (forall ((value (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and
     (and (dynamic_invariant1 value true true true) (dynamic_invariant amount
     true true true)) (<= amount 4)) (dynamic_invariant1
     (shift_right_4 value amount) true false true)) :pattern ((shift_right_4
                                                              value amount)) ))))

;; shift_right_4__def_axiom
  (assert
  (forall ((value (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant1 value true true true) (dynamic_invariant amount
     true true true))
     (= (shift_right_4 value amount) (bvand (ite (< amount 8)
                                            (bvlshr value ((_ int2bv 8) amount))
                                            ((_ int2bv 8) 0)) ((_ int2bv 8) 15)))) :pattern (
  (shift_right_4 value amount)) ))))

(declare-const value (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const amount Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const o Int)

(declare-const o1 (_ BitVec 8))

(declare-const o2 (_ BitVec 8))

;; H
  (assert (in_range1 value))

;; H
  (assert (in_range amount))

;; H
  (assert (<= amount 4))

(assert
;; WP_parameter_def
 ;; File "keccak-types.ads", line 41, characters 0-0
  (not (in_range (- 4 amount))))
(check-sat)
(exit)
