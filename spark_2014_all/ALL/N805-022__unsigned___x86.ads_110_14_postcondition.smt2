;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536))
  (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun to_int3 ((_ BitVec 32)) Int)

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr2 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr2 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl2 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left3 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right3 v (bv2nat n)))))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv2 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth2 x (bv2nat i)) (nth_bv2 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))

(declare-datatypes () ((t__ref2 (mk_t__ref2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun to_int4 ((_ BitVec 64)) Int)

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr3 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr3 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl3 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left4 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right4 v (bv2nat n)))))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv3 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth3 x (bv2nat i)) (nth_bv3 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv3 x ((_ int2bv 64) i)) (nth3 x i)))))

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))

(declare-datatypes () ((t__ref3 (mk_t__ref3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int5 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned_8 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (unsigned_8 unsigned_8) Bool)

(declare-fun dummy () unsigned_8)

(declare-datatypes ()
((unsigned_8__ref (mk_unsigned_8__ref (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref___projection ((a unsigned_8__ref)) unsigned_8
  (unsigned_8__content a))

(define-fun dynamic_invariant ((temp___expr_155 (_ BitVec 8))
  (temp___is_init_152 Bool) (temp___skip_constant_153 Bool)
  (temp___do_toplevel_154 Bool)) Bool true)

(declare-fun to_rep (unsigned_8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned_8)

;; inversion_axiom
  (assert
  (forall ((x unsigned_8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int6 ((x unsigned_8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_8)) (! (uint_in_range
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array (_ BitVec 64) unsigned_8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned_8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned_8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned_8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned_8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array (_ BitVec 64) unsigned_8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned_8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned_8))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned_8))
  (b (Array (_ BitVec 64) unsigned_8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0000000000000001)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (unsigned_8
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned_8))

;; singleton_def
  (assert
  (forall ((v unsigned_8))
  (forall ((i (_ BitVec 64)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned_8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned_8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_132 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_132)
                                     (bvule temp___idx_132 a__last))
                                     (= (to_rep (select a temp___idx_132))
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned_8))
  (b (Array (_ BitVec 64) unsigned_8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_132 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_132) (bvule temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array (_ BitVec 64) unsigned_8) (_ BitVec 64)
  (_ BitVec 64) (Array (_ BitVec 64) unsigned_8) (_ BitVec 64)
  (_ BitVec 64)) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned_8))
  (b (Array (_ BitVec 64) unsigned_8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned_8))
  (b (Array (_ BitVec 64) unsigned_8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i a_last)
     (and (bvult j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (bvult i a_last)
     (bvult (to_rep (select a (bvadd i #x0000000000000001))) (to_rep
                                                             (select b (bvadd j #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned_8))
  (b (Array (_ BitVec 64) unsigned_8)))
  (forall ((a_first (_ BitVec 64)) (a_last (_ BitVec 64))
  (b_first (_ BitVec 64)) (b_last (_ BitVec 64)))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i (_ BitVec 64)) (j (_ BitVec 64)))
     (and (bvule i b_last)
     (and (bvult j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (bvult i b_last)
     (bvugt (to_rep (select a (bvadd j #x0000000000000001))) (to_rep
                                                             (select b (bvadd i #x0000000000000001))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int unsigned_8))))))
(declare-fun slide1 ((Array Int unsigned_8) Int Int) (Array Int unsigned_8))

;; slide_eq
  (assert
  (forall ((a (Array Int unsigned_8)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int unsigned_8)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int unsigned_8) Int Int (Array Int unsigned_8)
  Int Int) (Array Int unsigned_8))

;; concat_def
  (assert
  (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (unsigned_8 Int) (Array Int unsigned_8))

;; singleton_def
  (assert
  (forall ((v unsigned_8))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int unsigned_8)) (a__first Int) (a__last Int)
  (b (Array Int unsigned_8)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_133 Int))
                           (=>
                           (and (<= a__first temp___idx_133)
                           (<= temp___idx_133 a__last))
                           (= (to_rep (select a temp___idx_133)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_133)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_133 Int))
  (=> (and (<= a__first temp___idx_133) (<= temp___idx_133 a__last))
  (= (to_rep (select a temp___idx_133)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_133)))))))))))

(declare-fun compare1 ((Array Int unsigned_8) Int Int (Array Int unsigned_8)
  Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq1 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int unsigned_8)) (b (Array Int unsigned_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq1 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep (select a (+ j 1))) (to_rep (select b (+ i 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun ecx ((Array Int unsigned_8)) (_ BitVec 32))

(declare-fun ecx__function_guard ((_ BitVec 32) (Array Int unsigned_8)) Bool)

(declare-sort unsigned_32 0)

(declare-fun attr__ATTRIBUTE_MODULUS1 () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (unsigned_32 unsigned_32) Bool)

(declare-fun dummy1 () unsigned_32)

(declare-datatypes ()
((unsigned_32__ref (mk_unsigned_32__ref (unsigned_32__content unsigned_32)))))
(define-fun unsigned_32__ref___projection ((a unsigned_32__ref)) unsigned_32
  (unsigned_32__content a))

(define-fun dynamic_invariant1 ((temp___expr_143 (_ BitVec 32))
  (temp___is_init_140 Bool) (temp___skip_constant_141 Bool)
  (temp___do_toplevel_142 Bool)) Bool true)

;; ecx__post_axiom
  (assert
  (forall ((x86__xcx (Array Int unsigned_8)))
  (! (let ((result (ecx x86__xcx)))
     (and
     (= result (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep
                                                        (select x86__xcx 0))) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__xcx 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__xcx 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__xcx 3))) ((_ int2bv 32) 16777216))))
     (dynamic_invariant1 result true false true))) :pattern ((ecx x86__xcx)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun esi ((Array Int unsigned_8)) (_ BitVec 32))

(declare-fun esi__function_guard ((_ BitVec 32) (Array Int unsigned_8)) Bool)

;; esi__post_axiom
  (assert
  (forall ((x86__xsi (Array Int unsigned_8)))
  (! (let ((result (esi x86__xsi)))
     (and
     (= result (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep
                                                        (select x86__xsi 0))) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__xsi 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__xsi 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__xsi 3))) ((_ int2bv 32) 16777216))))
     (dynamic_invariant1 result true false true))) :pattern ((esi x86__xsi)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun edi ((Array Int unsigned_8)) (_ BitVec 32))

(declare-fun edi__function_guard ((_ BitVec 32) (Array Int unsigned_8)) Bool)

;; edi__post_axiom
  (assert
  (forall ((x86__xdi (Array Int unsigned_8)))
  (! (let ((result (edi x86__xdi)))
     (and
     (= result (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep
                                                        (select x86__xdi 0))) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__xdi 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__xdi 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
     (to_rep (select x86__xdi 3))) ((_ int2bv 32) 16777216))))
     (dynamic_invariant1 result true false true))) :pattern ((edi x86__xdi)) )))

(declare-sort unsigned_64 0)

(declare-fun attr__ATTRIBUTE_MODULUS2 () (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (unsigned_64 unsigned_64) Bool)

(declare-fun dummy2 () unsigned_64)

(declare-datatypes ()
((unsigned_64__ref (mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64
  (unsigned_64__content a))

(define-fun dynamic_invariant2 ((temp___expr_137 (_ BitVec 64))
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool true)

(declare-fun readmem8 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned_8)) (_ BitVec 8))

(declare-fun readmem8__function_guard ((_ BitVec 8) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned_8)) Bool)

;; readmem8__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned_8)))
  (! (=> (dynamic_invariant2 addr true true true)
     (let ((result (readmem8 addr x86__memory)))
     (and
     (and (= result (to_rep (select x86__memory addr)))
     (bvuge result ((_ int2bv 8) 0))) (dynamic_invariant result true false
     true)))) :pattern ((readmem8 addr x86__memory)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun zeroflag () Bool)

(declare-fun carryflag () Bool)

(declare-fun memory () (Array (_ BitVec 64) unsigned_8))

(declare-fun xcx () (Array Int unsigned_8))

(declare-fun xsi () (Array Int unsigned_8))

(declare-fun xdi () (Array Int unsigned_8))

(declare-fun val1 () (_ BitVec 8))

(declare-fun val2 () (_ BitVec 8))

(declare-fun o () (_ BitVec 32))

(declare-fun o1 () Bool)

(declare-fun temp___257 () Bool)

(declare-fun temp___256 () (_ BitVec 8))

(declare-fun temp___255 () Bool)

(declare-fun temp___254 () (_ BitVec 8))

(declare-fun temp___253 () (Array Int unsigned_8))

(declare-fun temp___252 () (Array Int unsigned_8))

(declare-fun temp___251 () (Array Int unsigned_8))

(declare-fun o2 () (_ BitVec 32))

(declare-fun o3 () (_ BitVec 64))

(declare-fun o4 () (_ BitVec 8))

(declare-fun o5 () (_ BitVec 32))

(declare-fun o6 () (_ BitVec 64))

(declare-fun o7 () (_ BitVec 8))

(declare-fun o8 () (_ BitVec 32))

(declare-fun o9 () (_ BitVec 32))

(declare-fun o10 () (_ BitVec 32))

(declare-fun o11 () Bool)

(declare-fun o12 () (_ BitVec 32))

(declare-fun o13 () (_ BitVec 32))

(declare-fun o14 () (_ BitVec 32))

(declare-fun o15 () (_ BitVec 32))

(declare-fun o16 () (_ BitVec 32))

(declare-fun o17 () Bool)

(declare-fun o18 () Bool)

(declare-fun zeroflag1 () Bool)

(declare-fun carryflag1 () Bool)

(declare-fun xcx1 () (Array Int unsigned_8))

(declare-fun xsi1 () (Array Int unsigned_8))

(declare-fun xdi1 () (Array Int unsigned_8))

(declare-fun val11 () (_ BitVec 8))

(declare-fun val21 () (_ BitVec 8))

(declare-fun result () Bool)

(declare-fun zeroflag2 () Bool)

(declare-fun carryflag2 () Bool)

(declare-fun xcx2 () (Array Int unsigned_8))

(declare-fun xsi2 () (Array Int unsigned_8))

(declare-fun xdi2 () (Array Int unsigned_8))

(declare-fun val12 () (_ BitVec 8))

(declare-fun val22 () (_ BitVec 8))

(declare-fun result1 () (_ BitVec 8))

(declare-fun val13 () (_ BitVec 8))

(declare-fun result2 () (_ BitVec 8))

(declare-fun val23 () (_ BitVec 8))

(declare-fun result3 () Bool)

(declare-fun zeroflag3 () Bool)

(declare-fun result4 () Bool)

(declare-fun carryflag3 () Bool)

(declare-fun xcx3 () (Array Int unsigned_8))

(declare-fun result5 () Bool)

(declare-fun xsi3 () (Array Int unsigned_8))

(declare-fun xdi3 () (Array Int unsigned_8))

(declare-fun result6 () Bool)

(declare-fun xsi4 () (Array Int unsigned_8))

(declare-fun xdi4 () (Array Int unsigned_8))

(declare-fun xsi5 () (Array Int unsigned_8))

(declare-fun xdi5 () (Array Int unsigned_8))

(declare-fun zeroflag4 () bool__ref)

(declare-fun carryflag4 () bool__ref)

(declare-fun xcx4 () map__ref1)

(declare-fun xsi6 () map__ref1)

(declare-fun xdi6 () map__ref1)

(declare-fun val14 () t__ref)

(declare-fun val24 () t__ref)

(declare-fun zeroflag5 () Bool)

(declare-fun carryflag5 () Bool)

(declare-fun xcx5 () (Array Int unsigned_8))

(declare-fun xsi7 () (Array Int unsigned_8))

(declare-fun xdi7 () (Array Int unsigned_8))

(declare-fun val15 () (_ BitVec 8))

(declare-fun val25 () (_ BitVec 8))

(declare-fun zeroflag6 () bool__ref)

(declare-fun carryflag6 () bool__ref)

(declare-fun xcx6 () map__ref1)

(declare-fun xsi8 () map__ref1)

(declare-fun xdi8 () map__ref1)

(declare-fun val16 () t__ref)

(declare-fun val26 () t__ref)

(declare-fun zeroflag7 () Bool)

(declare-fun carryflag7 () Bool)

(declare-fun xcx7 () (Array Int unsigned_8))

(declare-fun xsi9 () (Array Int unsigned_8))

(declare-fun xdi9 () (Array Int unsigned_8))

(declare-fun val17 () (_ BitVec 8))

(declare-fun val27 () (_ BitVec 8))

(declare-fun zeroflag8 () bool__ref)

(declare-fun carryflag8 () bool__ref)

(declare-fun xcx8 () map__ref1)

(declare-fun xsi10 () map__ref1)

(declare-fun xdi10 () map__ref1)

(declare-fun val18 () t__ref)

(declare-fun val28 () t__ref)

(declare-fun zeroflag9 () Bool)

(declare-fun carryflag9 () Bool)

(declare-fun xcx9 () (Array Int unsigned_8))

(declare-fun xsi11 () (Array Int unsigned_8))

(declare-fun xdi11 () (Array Int unsigned_8))

(declare-fun val19 () (_ BitVec 8))

(declare-fun val29 () (_ BitVec 8))

;; H
  (assert
  (and (= o (ecx xcx))
  (= o (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xcx 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx 3))) ((_ int2bv 32) 16777216))))))

;; H
  (assert (= o1 (ite (= o ((_ int2bv 32) 0)) true false)))

;; H
  (assert (= result (ite (not (= o1 true)) true false)))

;; H
  (assert (=> (= result true) (= temp___257 carryflag)))

;; H
  (assert (=> (= result true) (= temp___256 val2)))

;; H
  (assert (=> (= result true) (= temp___255 zeroflag)))

;; H
  (assert (=> (= result true) (= temp___254 val1)))

;; H
  (assert (=> (= result true) (= temp___253 xdi)))

;; H
  (assert (=> (= result true) (= temp___252 xsi)))

;; H
  (assert (=> (= result true) (= temp___251 xcx)))

;; H
  (assert (=> (= result true) (not (= (ecx xcx2) ((_ int2bv 32) 0)))))

;; H
  (assert (=> (= result true) (not (= (ecx xcx2) ((_ int2bv 32) 0)))))

;; H
  (assert
  (=> (= result true)
  (and (= o2 (esi xsi2))
  (= o2 (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xsi2 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xsi2 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xsi2 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xsi2 3))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert (=> (= result true) (= o3 ((_ zero_extend 32) o2))))

;; H
  (assert
  (=> (= result true)
  (and (= o4 (readmem8 o3 memory))
  (and (= o4 (to_rep (select memory o3))) (bvuge o4 ((_ int2bv 8) 0))))))

;; H
  (assert (=> (= result true) (= result1 val12)))

;; H
  (assert (=> (= result true) (= val13 o4)))

;; H
  (assert
  (=> (= result true)
  (and (= o5 (edi xdi2))
  (= o5 (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xdi2 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xdi2 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xdi2 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xdi2 3))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert (=> (= result true) (= o6 ((_ zero_extend 32) o5))))

;; H
  (assert
  (=> (= result true)
  (and (= o7 (readmem8 o6 memory))
  (and (= o7 (to_rep (select memory o6))) (bvuge o7 ((_ int2bv 8) 0))))))

;; H
  (assert (=> (= result true) (= result2 val22)))

;; H
  (assert (=> (= result true) (= val23 o7)))

;; H
  (assert (=> (= result true) (= result3 zeroflag2)))

;; H
  (assert
  (=> (= result true)
  (= zeroflag3 (ite (= (bvsub val13 val23) ((_ int2bv 8) 0)) true false))))

;; H
  (assert (=> (= result true) (= result4 carryflag2)))

;; H
  (assert
  (=> (= result true)
  (= carryflag3 (ite (bvugt (bvadd ((_ zero_extend 8) val13) ((_ zero_extend 8)
                val23)) ((_ zero_extend 8) (bvadd val13 val23))) true false))))

;; H
  (assert
  (=> (= result true)
  (and (= o8 (ecx xcx2))
  (= o8 (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xcx2 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx2 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx2 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx2 3))) ((_ int2bv 32) 16777216)))))))

;; H
  (assert (=> (= result true) (= o9 (bvsub o8 ((_ int2bv 32) 1)))))

;; H
  (assert
  (=> (= result true)
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xcx3 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 3))) ((_ int2bv 32) 16777216))) o9)
  (forall ((i Int))
  (=> (and (<= 4 i) (<= i 7))
  (= (to_rep (select xcx3 i)) (to_rep (select xcx2 i))))))))

;; H
  (assert
  (=> (= result true)
  (or
  (and
  (and (and (= xdi2 xdi4) (= xsi2 xsi4)) (and (= xdi5 xdi2) (= xsi5 xsi2)))
  (and
  (and
  (and
  (and (= o10 (ecx xcx3))
  (= o10 (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xcx3 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 3))) ((_ int2bv 32) 16777216)))))
  (= o11 (ite (= o10 ((_ int2bv 32) 0)) true false)))
  (= result5 (ite (= o11 false) (ite (not (= zeroflag3 true)) true false) true)))
  (= result5 true)))
  (and
  (and
  (and
  (and
  (and (= o10 (ecx xcx3))
  (= o10 (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xcx3 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 3))) ((_ int2bv 32) 16777216)))))
  (= o11 (ite (= o10 ((_ int2bv 32) 0)) true false)))
  (= result5 (ite (= o11 false) (ite (not (= zeroflag3 true)) true false) true)))
  (not (= result5 true)))
  (and
  (and (and (= xdi3 xdi4) (= xsi3 xsi4)) (and (= xdi5 xdi3) (= xsi5 xsi3)))
  (and
  (and
  (and
  (and (= o12 (esi xsi2))
  (= o12 (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xsi2 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xsi2 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xsi2 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xsi2 3))) ((_ int2bv 32) 16777216)))))
  (= o13 (bvadd o12 ((_ int2bv 32) 1))))
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xsi3 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xsi3 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xsi3 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xsi3 3))) ((_ int2bv 32) 16777216))) o13)
  (forall ((i Int))
  (=> (and (<= 4 i) (<= i 7))
  (= (to_rep (select xsi3 i)) (to_rep (select xsi2 i)))))))
  (and
  (and
  (and
  (and (= o14 (edi xdi2))
  (= o14 (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xdi2 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xdi2 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xdi2 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xdi2 3))) ((_ int2bv 32) 16777216)))))
  (= o15 (bvadd o14 ((_ int2bv 32) 1))))
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xdi3 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xdi3 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xdi3 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xdi3 3))) ((_ int2bv 32) 16777216))) o15)
  (forall ((i Int))
  (=> (and (<= 4 i) (<= i 7))
  (= (to_rep (select xdi3 i)) (to_rep (select xdi2 i)))))))
  (and
  (and
  (and
  (and
  (and (= o16 (ecx xcx3))
  (= o16 (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select xcx3 0))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 1))) ((_ int2bv 32) 256))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 2))) ((_ int2bv 32) 65536))) (bvmul ((_ zero_extend 24)
  (to_rep (select xcx3 3))) ((_ int2bv 32) 16777216)))))
  (= o17 (ite (= o16 ((_ int2bv 32) 0)) true false)))
  (= o18 (ite (not (= o17 true)) true false)))
  (= result6 (ite (not (= o18 true)) true false))) (= result6 true)))))))))

;; H
  (assert (=> (= result true) (= val24 (mk_t__ref val23))))

;; H
  (assert (=> (= result true) (= val14 (mk_t__ref val13))))

;; H
  (assert (=> (= result true) (= xdi6 (mk_map__ref1 xdi4))))

;; H
  (assert (=> (= result true) (= xsi6 (mk_map__ref1 xsi4))))

;; H
  (assert (=> (= result true) (= xcx4 (mk_map__ref1 xcx3))))

;; H
  (assert (=> (= result true) (= carryflag4 (mk_bool__ref carryflag3))))

;; H
  (assert (=> (= result true) (= zeroflag4 (mk_bool__ref zeroflag3))))

;; H
  (assert (=> (= result true) (= val25 val23)))

;; H
  (assert (=> (= result true) (= val15 val13)))

;; H
  (assert (=> (= result true) (= xdi7 xdi5)))

;; H
  (assert (=> (= result true) (= xsi7 xsi5)))

;; H
  (assert (=> (= result true) (= xcx5 xcx3)))

;; H
  (assert (=> (= result true) (= carryflag5 carryflag3)))

;; H
  (assert (=> (= result true) (= zeroflag5 zeroflag3)))

;; H
  (assert (=> (= result true) (= val26 val24)))

;; H
  (assert (=> (= result true) (= val16 val14)))

;; H
  (assert (=> (= result true) (= xdi8 xdi6)))

;; H
  (assert (=> (= result true) (= xsi8 xsi6)))

;; H
  (assert (=> (= result true) (= xcx6 xcx4)))

;; H
  (assert (=> (= result true) (= carryflag6 carryflag4)))

;; H
  (assert (=> (= result true) (= zeroflag6 zeroflag4)))

;; H
  (assert (=> (= result true) (= val27 val25)))

;; H
  (assert (=> (= result true) (= val17 val15)))

;; H
  (assert (=> (= result true) (= xdi9 xdi7)))

;; H
  (assert (=> (= result true) (= xsi9 xsi7)))

;; H
  (assert (=> (= result true) (= xcx7 xcx5)))

;; H
  (assert (=> (= result true) (= carryflag7 carryflag5)))

;; H
  (assert (=> (= result true) (= zeroflag7 zeroflag5)))

;; H
  (assert (=> (not (= result true)) (= val26 (mk_t__ref val2))))

;; H
  (assert (=> (not (= result true)) (= val16 (mk_t__ref val1))))

;; H
  (assert (=> (not (= result true)) (= xdi8 (mk_map__ref1 xdi))))

;; H
  (assert (=> (not (= result true)) (= xsi8 (mk_map__ref1 xsi))))

;; H
  (assert (=> (not (= result true)) (= xcx6 (mk_map__ref1 xcx))))

;; H
  (assert (=> (not (= result true)) (= carryflag6 (mk_bool__ref carryflag))))

;; H
  (assert (=> (not (= result true)) (= zeroflag6 (mk_bool__ref zeroflag))))

;; H
  (assert (=> (not (= result true)) (= val27 val21)))

;; H
  (assert (=> (not (= result true)) (= val17 val11)))

;; H
  (assert (=> (not (= result true)) (= xdi9 xdi1)))

;; H
  (assert (=> (not (= result true)) (= xsi9 xsi1)))

;; H
  (assert (=> (not (= result true)) (= xcx7 xcx1)))

;; H
  (assert (=> (not (= result true)) (= carryflag7 carryflag1)))

;; H
  (assert (=> (not (= result true)) (= zeroflag7 zeroflag1)))

;; H
  (assert
  (or (= (ecx (map__content1 xcx6)) ((_ int2bv 32) 0))
  (not (= (bool__content zeroflag6) true))))

;; H
  (assert (= val28 val26))

;; H
  (assert (= val18 val16))

;; H
  (assert (= xdi10 xdi8))

;; H
  (assert (= xsi10 xsi8))

;; H
  (assert (= xcx8 xcx6))

;; H
  (assert (= carryflag8 carryflag6))

;; H
  (assert (= zeroflag8 zeroflag6))

;; H
  (assert (= val29 val27))

;; H
  (assert (= val19 val17))

;; H
  (assert (= xdi11 xdi9))

;; H
  (assert (= xsi11 xsi9))

;; H
  (assert (= xcx9 xcx7))

;; H
  (assert (= carryflag9 carryflag7))

;; H
  (assert (= zeroflag9 zeroflag7))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not
  (or (= (ecx (map__content1 xcx8)) ((_ int2bv 32) 0))
  (not (= (bool__content zeroflag8) true)))))
(check-sat)
(exit)
