;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy1 (Array Int natural))

(declare-const value__size Int)

(declare-fun object__size ((Array Int natural)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))

(declare-fun user_eq1 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__composite_cursors__cont1__content (Array Int natural))(rec__composite_cursors__cont1__length natural)))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int natural)
  (rec__composite_cursors__cont1__content a))

(define-fun us_split_fields_Length__projection ((a us_split_fields)) natural
  (rec__composite_cursors__cont1__length a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq
                           (rec__composite_cursors__cont1__content
                           (us_split_fields1 a)) 1 100
                           (rec__composite_cursors__cont1__content
                           (us_split_fields1 b)) 1 100) true)
                        (= (to_rep
                           (rec__composite_cursors__cont1__length
                           (us_split_fields1 a))) (to_rep
                                                  (rec__composite_cursors__cont1__length
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const composite_cursors__cont1__content__first__bit Int)

(declare-const composite_cursors__cont1__content__last__bit Int)

(declare-const composite_cursors__cont1__content__position Int)

;; composite_cursors__cont1__content__first__bit_axiom
  (assert (<= 0 composite_cursors__cont1__content__first__bit))

;; composite_cursors__cont1__content__last__bit_axiom
  (assert
  (< composite_cursors__cont1__content__first__bit composite_cursors__cont1__content__last__bit))

;; composite_cursors__cont1__content__position_axiom
  (assert (<= 0 composite_cursors__cont1__content__position))

(declare-const composite_cursors__cont1__length__first__bit Int)

(declare-const composite_cursors__cont1__length__last__bit Int)

(declare-const composite_cursors__cont1__length__position Int)

;; composite_cursors__cont1__length__first__bit_axiom
  (assert (<= 0 composite_cursors__cont1__length__first__bit))

;; composite_cursors__cont1__length__last__bit_axiom
  (assert
  (< composite_cursors__cont1__length__first__bit composite_cursors__cont1__length__last__bit))

;; composite_cursors__cont1__length__position_axiom
  (assert (<= 0 composite_cursors__cont1__length__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((cont1__ref (mk_cont1__ref (cont1__content us_rep)))))
(define-fun cont1__ref___projection ((a cont1__ref)) us_rep (cont1__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_150 us_rep)
  (temp___is_init_147 Bool) (temp___skip_constant_148 Bool)
  (temp___do_toplevel_149 Bool)) Bool (=> (= temp___do_toplevel_149 true)
                                      (=> (= temp___is_init_147 true)
                                      (<= (to_rep
                                          (rec__composite_cursors__cont1__length
                                          (us_split_fields1 temp___expr_150))) 100))))

(define-fun dynamic_predicate ((temp___159 us_rep)) Bool (<= (to_rep
                                                             (rec__composite_cursors__cont1__length
                                                             (us_split_fields1
                                                             temp___159))) 100))

(declare-fun first (us_rep) (Array Int natural))

(declare-fun first__function_guard ((Array Int natural) us_rep) Bool)

(declare-fun temp___164 (Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___166 Int))
  (= (select (temp___164 temp___166) 1) (of_rep temp___166))))

;; first__post_axiom
  (assert true)

;; first__def_axiom
  (assert
  (forall ((c us_rep))
  (! (=> (dynamic_invariant c true true true) (= (first c) (temp___164 1))) :pattern (
  (first c)) )))

(declare-fun has_element (us_rep (Array Int natural)) Bool)

(declare-fun has_element__function_guard (Bool us_rep
  (Array Int natural)) Bool)

;; has_element__post_axiom
  (assert true)

;; has_element__def_axiom
  (assert
  (forall ((c us_rep))
  (forall ((p (Array Int natural)))
  (! (= (= (has_element c p) true)
     (and (<= 1 (to_rep (select p 1)))
     (<= (to_rep (select p 1)) (to_rep
                               (rec__composite_cursors__cont1__length
                               (us_split_fields1 c)))))) :pattern ((has_element
                                                                   c p)) ))))

(declare-fun next (us_rep (Array Int natural)) (Array Int natural))

(declare-fun next__function_guard ((Array Int natural) us_rep
  (Array Int natural)) Bool)

(declare-fun temp___176 (Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___178 Int))
  (= (select (temp___176 temp___178) 1) (of_rep temp___178))))

;; next__post_axiom
  (assert true)

;; next__def_axiom
  (assert
  (forall ((c us_rep))
  (forall ((p (Array Int natural)))
  (! (=> (dynamic_invariant c true true true)
     (= (next c p) (temp___176 (+ (to_rep (select p 1)) 1)))) :pattern (
  (next c p)) ))))

(declare-fun element (us_rep (Array Int natural)) Int)

(declare-fun element__function_guard (Int us_rep (Array Int natural)) Bool)

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

;; element__post_axiom
  (assert
  (forall ((c us_rep))
  (forall ((p (Array Int natural)))
  (! (=>
     (and (dynamic_invariant c true true true) (= (has_element c p) true))
     (dynamic_invariant1 (element c p) true false true)) :pattern ((element c
                                                                   p)) ))))

;; element__def_axiom
  (assert
  (forall ((c us_rep))
  (forall ((p (Array Int natural)))
  (! (=> (dynamic_invariant c true true true)
     (= (element c p) (to_rep
                      (let ((temp___190 (rec__composite_cursors__cont1__content
                                        (us_split_fields1 c))))
                      (select temp___190 (to_rep (select p 1))))))) :pattern (
  (element c p)) ))))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__composite_cursors__rec_cursor__content natural)))))
(define-fun us_split_fields_Content__2__projection ((a us_split_fields2)) natural
  (rec__composite_cursors__rec_cursor__content a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__composite_cursors__rec_cursor__content
                            (us_split_fields3 a))) (to_rep
                                                   (rec__composite_cursors__rec_cursor__content
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const composite_cursors__rec_cursor__content__first__bit Int)

(declare-const composite_cursors__rec_cursor__content__last__bit Int)

(declare-const composite_cursors__rec_cursor__content__position Int)

;; composite_cursors__rec_cursor__content__first__bit_axiom
  (assert (<= 0 composite_cursors__rec_cursor__content__first__bit))

;; composite_cursors__rec_cursor__content__last__bit_axiom
  (assert
  (< composite_cursors__rec_cursor__content__first__bit composite_cursors__rec_cursor__content__last__bit))

;; composite_cursors__rec_cursor__content__position_axiom
  (assert (<= 0 composite_cursors__rec_cursor__content__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ()
((rec_cursor__ref (mk_rec_cursor__ref (rec_cursor__content us_rep1)))))
(define-fun rec_cursor__ref___projection ((a rec_cursor__ref)) us_rep1
  (rec_cursor__content a))

(declare-const dummy4 (Array Int natural))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int natural)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int natural)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment3 a))))

(declare-fun user_eq4 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__composite_cursors__cont2__content (Array Int natural))(rec__composite_cursors__cont2__length natural)))))
(define-fun us_split_fields_Content__3__projection ((a us_split_fields4)) (Array Int natural)
  (rec__composite_cursors__cont2__content a))

(define-fun us_split_fields_Length__2__projection ((a us_split_fields4)) natural
  (rec__composite_cursors__cont2__length a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                  a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (bool_eq
                            (rec__composite_cursors__cont2__content
                            (us_split_fields5 a)) 1 100
                            (rec__composite_cursors__cont2__content
                            (us_split_fields5 b)) 1 100) true)
                         (= (to_rep
                            (rec__composite_cursors__cont2__length
                            (us_split_fields5 a))) (to_rep
                                                   (rec__composite_cursors__cont2__length
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-const composite_cursors__cont2__content__first__bit Int)

(declare-const composite_cursors__cont2__content__last__bit Int)

(declare-const composite_cursors__cont2__content__position Int)

;; composite_cursors__cont2__content__first__bit_axiom
  (assert (<= 0 composite_cursors__cont2__content__first__bit))

;; composite_cursors__cont2__content__last__bit_axiom
  (assert
  (< composite_cursors__cont2__content__first__bit composite_cursors__cont2__content__last__bit))

;; composite_cursors__cont2__content__position_axiom
  (assert (<= 0 composite_cursors__cont2__content__position))

(declare-const composite_cursors__cont2__length__first__bit Int)

(declare-const composite_cursors__cont2__length__last__bit Int)

(declare-const composite_cursors__cont2__length__position Int)

;; composite_cursors__cont2__length__first__bit_axiom
  (assert (<= 0 composite_cursors__cont2__length__first__bit))

;; composite_cursors__cont2__length__last__bit_axiom
  (assert
  (< composite_cursors__cont2__length__first__bit composite_cursors__cont2__length__last__bit))

;; composite_cursors__cont2__length__position_axiom
  (assert (<= 0 composite_cursors__cont2__length__position))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-const dummy5 us_rep2)

(declare-datatypes ()
((cont2__ref (mk_cont2__ref (cont2__content us_rep2)))))
(define-fun cont2__ref___projection ((a cont2__ref)) us_rep2 (cont2__content
                                                             a))

(define-fun dynamic_invariant2 ((temp___expr_201 us_rep2)
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool (=> (= temp___do_toplevel_200 true)
                                      (=> (= temp___is_init_198 true)
                                      (<= (to_rep
                                          (rec__composite_cursors__cont2__length
                                          (us_split_fields5 temp___expr_201))) 100))))

(define-fun dynamic_predicate1 ((temp___210 us_rep2)) Bool (<= (to_rep
                                                               (rec__composite_cursors__cont2__length
                                                               (us_split_fields5
                                                               temp___210))) 100))

(declare-fun first__2 (us_rep2) us_rep1)

(declare-fun first__2__function_guard (us_rep1 us_rep2) Bool)

;; first__2__post_axiom
  (assert true)

;; first__2__def_axiom
  (assert
  (forall ((c us_rep2))
  (! (=> (dynamic_invariant2 c true true true)
     (= (first__2 c) (mk___rep1 (mk___split_fields1 (of_rep 1))))) :pattern (
  (first__2 c)) )))

(declare-fun has_element__2 (us_rep2 us_rep1) Bool)

(declare-fun has_element__2__function_guard (Bool us_rep2 us_rep1) Bool)

;; has_element__2__post_axiom
  (assert true)

;; has_element__2__def_axiom
  (assert
  (forall ((c us_rep2))
  (forall ((p us_rep1))
  (! (= (= (has_element__2 c p) true)
     (and
     (<= 1 (to_rep
           (rec__composite_cursors__rec_cursor__content (us_split_fields3 p))))
     (<= (to_rep
         (rec__composite_cursors__rec_cursor__content (us_split_fields3 p)))
     (to_rep (rec__composite_cursors__cont2__length (us_split_fields5 c)))))) :pattern (
  (has_element__2 c p)) ))))

(declare-fun next__2 (us_rep2 us_rep1) us_rep1)

(declare-fun next__2__function_guard (us_rep1 us_rep2 us_rep1) Bool)

;; next__2__post_axiom
  (assert true)

;; next__2__def_axiom
  (assert
  (forall ((c us_rep2))
  (forall ((p us_rep1))
  (! (=> (dynamic_invariant2 c true true true)
     (= (next__2 c p) (mk___rep1
                      (mk___split_fields1
                      (of_rep
                      (+ (to_rep
                         (rec__composite_cursors__rec_cursor__content
                         (us_split_fields3 p))) 1)))))) :pattern ((next__2 c
                                                                  p)) ))))

(declare-fun element__2 (us_rep2 us_rep1) Int)

(declare-fun element__2__function_guard (Int us_rep2 us_rep1) Bool)

;; element__2__post_axiom
  (assert
  (forall ((c us_rep2))
  (forall ((p us_rep1))
  (! (=>
     (and (dynamic_invariant2 c true true true)
     (= (has_element__2 c p) true)) (dynamic_invariant1 (element__2 c p) true
     false true)) :pattern ((element__2 c p)) ))))

;; element__2__def_axiom
  (assert
  (forall ((c us_rep2))
  (forall ((p us_rep1))
  (! (=> (dynamic_invariant2 c true true true)
     (= (element__2 c p) (to_rep
                         (let ((temp___223 (rec__composite_cursors__cont2__content
                                           (us_split_fields5 c))))
                         (select temp___223 (to_rep
                                            (rec__composite_cursors__rec_cursor__content
                                            (us_split_fields3 p)))))))) :pattern (
  (element__2 c p)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun temp___260 (Int Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___262 Int) (temp___263 Int))
  (let ((temp___261 (temp___260 temp___262 temp___263)))
  (forall ((temp___264 Int))
  (ite (and (<= 1 temp___264) (<= temp___264 10))
  (= (select temp___261 temp___264) (of_rep temp___262))
  (= (select temp___261 temp___264) (of_rep temp___263)))))))

(declare-fun temp___266 (Int Int) (Array Int natural))

;; def_axiom
  (assert
  (forall ((temp___268 Int) (temp___269 Int))
  (let ((temp___267 (temp___266 temp___268 temp___269)))
  (forall ((temp___270 Int))
  (ite (and (<= 1 temp___270) (<= temp___270 10))
  (= (select temp___267 temp___270) (of_rep temp___268))
  (= (select temp___267 temp___270) (of_rep temp___269)))))))

(declare-const c1__split_fields (Array Int natural))

(declare-const c1__split_fields1 natural)

(declare-const c2__split_fields (Array Int natural))

(declare-const c2__split_fields1 natural)

(declare-const e Int)

(declare-const o natural)

(declare-const o1 (Array Int natural))

(declare-const o2 natural)

(declare-const temp___265 (Array Int natural))

(declare-const temp___2651 natural)

(declare-const loop_iterable__c1__assume (Array Int natural))

(declare-const loop_iterable__c1__assume1 natural)

(declare-const o3 natural)

(declare-const o4 (Array Int natural))

(declare-const o5 natural)

(declare-const temp___271 (Array Int natural))

(declare-const temp___2711 natural)

(declare-const loop_iterable__c2__assume (Array Int natural))

(declare-const loop_iterable__c2__assume1 natural)

(declare-const o6 (Array Int natural))

(declare-const temp___274 (Array Int natural))

(declare-const o7 Int)

(declare-const o8 (Array Int natural))

(declare-const o9 Bool)

(declare-const o10 (Array Int natural))

(declare-const e1 Int)

(declare-const result us_split_fields__ref)

(declare-const c1__split_fields2 us_split_fields)

(declare-const result1 us_split_fields__ref2)

(declare-const c2__split_fields2 us_split_fields4)

(declare-const result2 Bool)

(declare-const result3 int__ref)

(declare-const e2 Int)

(declare-const result4 Bool)

(declare-const e3 Int)

(declare-const temp___2741 (Array Int natural))

(declare-const result5 Bool)

(declare-const result6 map__ref)

(declare-const temp___2742 (Array Int natural))

(declare-const result7 Bool)

;; H
  (assert (= (to_rep o) 10))

;; H
  (assert (= (temp___260 1 0) o1))

;; H
  (assert (= o o2))

;; H
  (assert (= temp___265 o1))

;; H
  (assert (= temp___2651 o2))

;; H
  (assert (<= (to_rep temp___2651) 100))

;; H
  (assert
  (= (mk___rep
     (mk___split_fields loop_iterable__c1__assume loop_iterable__c1__assume1))
  (mk___rep (mk___split_fields temp___265 temp___2651))))

;; H
  (assert
  (= result (mk___split_fields__ref
            (mk___split_fields c1__split_fields c1__split_fields1))))

;; H
  (assert
  (= c1__split_fields2 (mk___split_fields loop_iterable__c1__assume
                       loop_iterable__c1__assume1)))

;; H
  (assert
  (<= (to_rep (rec__composite_cursors__cont1__length c1__split_fields2)) 100))

;; H
  (assert (= (to_rep o3) 10))

;; H
  (assert (= (temp___266 1 0) o4))

;; H
  (assert (= o3 o5))

;; H
  (assert (= temp___271 o4))

;; H
  (assert (= temp___2711 o5))

;; H
  (assert (<= (to_rep temp___2711) 100))

;; H
  (assert
  (= (mk___rep2
     (mk___split_fields2 loop_iterable__c2__assume
     loop_iterable__c2__assume1)) (mk___rep2
                                  (mk___split_fields2 temp___271 temp___2711))))

;; H
  (assert
  (= result1 (mk___split_fields__ref2
             (mk___split_fields2 c2__split_fields c2__split_fields1))))

;; H
  (assert
  (= c2__split_fields2 (mk___split_fields2 loop_iterable__c2__assume
                       loop_iterable__c2__assume1)))

;; H
  (assert
  (<= (to_rep (rec__composite_cursors__cont2__length c2__split_fields2)) 100))

;; H
  (assert
  (and (= o6 (first (mk___rep c1__split_fields2))) (= o6 (temp___164 1))))

;; H
  (assert (= o6 temp___274))

;; H
  (assert
  (and (= result2 (has_element (mk___rep c1__split_fields2) temp___274))
  (= (= result2 true)
  (and (<= 1 (to_rep (select temp___274 1)))
  (<= (to_rep (select temp___274 1)) (to_rep
                                     (rec__composite_cursors__cont1__length
                                     c1__split_fields2)))))))

;; H
  (assert
  (=> (= result2 true)
  (and (= o7 (element (mk___rep c1__split_fields2) temp___274))
  (and (in_range1 o7)
  (= o7 (to_rep
        (select (rec__composite_cursors__cont1__content c1__split_fields2)
        (to_rep (select temp___274 1)))))))))

;; H
  (assert (=> (= result2 true) (= result3 (mk_int__ref e))))

;; H
  (assert (=> (= result2 true) (= e2 o7)))

;; H
  (assert (=> (not (= result2 true)) (= e2 e)))

;; H
  (assert (=> (not (= result2 true)) (= e2 e1)))

;; H
  (assert
  (and (= result4 (has_element (mk___rep c1__split_fields2) temp___274))
  (= (= result4 true)
  (and (<= 1 (to_rep (select temp___274 1)))
  (<= (to_rep (select temp___274 1)) (to_rep
                                     (rec__composite_cursors__cont1__length
                                     c1__split_fields2)))))))

;; H
  (assert (= result4 true))

;; H
  (assert
  (and (= (has_element (mk___rep c1__split_fields2) temp___2741) true)
  (= e3 (element (mk___rep c1__split_fields2) temp___2741))))

;; H
  (assert (= e3 1))

;; H
  (assert
  (and (= o8 (next (mk___rep c1__split_fields2) temp___2741))
  (= o8 (temp___176 (+ (to_rep (select temp___2741 1)) 1)))))

;; H
  (assert
  (and (= o9 (has_element (mk___rep c1__split_fields2) o8))
  (= (= o9 true)
  (and (<= 1 (to_rep (select o8 1)))
  (<= (to_rep (select o8 1)) (to_rep
                             (rec__composite_cursors__cont1__length
                             c1__split_fields2)))))))

;; H
  (assert (= result5 (ite (not (= o9 true)) true false)))

;; H
  (assert (not (= result5 true)))

;; H
  (assert
  (and (= o10 (next (mk___rep c1__split_fields2) temp___2741))
  (= o10 (temp___176 (+ (to_rep (select temp___2741 1)) 1)))))

;; H
  (assert (= result6 (mk_map__ref temp___2741)))

;; H
  (assert (= temp___2742 o10))

;; H
  (assert
  (and (= result7 (has_element (mk___rep c1__split_fields2) temp___2742))
  (= (= result7 true)
  (and (<= 1 (to_rep (select temp___2742 1)))
  (<= (to_rep (select temp___2742 1)) (to_rep
                                      (rec__composite_cursors__cont1__length
                                      c1__split_fields2)))))))

;; H
  (assert (= result7 true))

(assert
;; WP_parameter_def
 ;; File "loop_iterable.adb", line 2, characters 0-0
  (not (= (has_element (mk___rep c1__split_fields2) temp___2742) true)))
(check-sat)
(exit)
