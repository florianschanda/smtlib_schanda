(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic power : int, int -> int

axiom Power_0 : (forall x:int. (power(x, 0) = 1))

axiom Power_s :
  (forall x:int. forall n:int. ((0 <= n) -> (power(x,
  (n + 1)) = (x * power(x, n)))))

axiom Power_s_alt :
  (forall x:int. forall n:int. ((0 <  n) -> (power(x, n) = (x * power(x,
  (n - 1))))))

axiom Power_1 : (forall x:int. (power(x, 1) = x))

axiom Power_sum :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = (power(x, n) * power(x, m))))))

axiom Power_mult :
  (forall x:int. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:int. forall y:int. forall n:int. ((0 <= n) -> (power((x * y),
  n) = (power(x, n) * power(y, n)))))

axiom Power_non_neg :
  (forall x:int. forall y:int. (((0 <= x) and (0 <= y)) -> (0 <= power(x,
  y))))

axiom Power_monotonic :
  (forall x:int. forall n:int. forall m:int. (((0 <  x) and ((0 <= n) and
  (n <= m))) -> (power(x, n) <= power(x, m))))

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic a1 : int

logic attr__ATTRIBUTE_ADDRESS : int

logic a2 : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic n1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic n2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall p1:int. forall p2:int. forall b1:int. forall b2:int. forall k1:int.
  forall k2:int. forall temp___187:int. forall temp___186:int.
  forall temp___185:int. forall temp___188:int. forall o:int. forall o1:int.
  forall o2:int. forall result:int. forall p11:int. forall result1:int.
  forall b11:int. forall result2:int. forall k11:int. forall p12:int.
  forall b12:int. forall k12:int. forall temp___1881:int. forall result3:int.
  forall temp___1882:int. forall result4:int. forall k13:int.
  forall result5:int. forall b13:int. forall result6:int. forall k14:int.
  forall result7:int. forall p13:int. forall p14:int. forall b14:int.
  forall k15:int. forall p15:int. forall b15:int. forall k16:int.
  forall p16:int. forall b16:int. forall k17:int. forall p17:int.
  forall b17:int. forall k18:int. forall result8:int. forall p21:int.
  forall result9:int. forall b21:int. forall result10:int. forall k21:int.
  forall p22:int. forall b22:int. forall k22:int. forall temp___194:int.
  forall result11:int. forall temp___1941:int. (in_range1(a1) ->
  (in_range1(a2) -> (in_range2(n1) -> (in_range2(n2) ->
  ((((-2147483648) <= 2147483647) -> in_range1(p1)) ->
  ((((-2147483648) <= 2147483647) -> in_range1(p2)) -> (((a1 = a2) and
  ((n1 = n2) and (((not (a1 = 0)) or (not (n1 = 0))) and (power(a1,
  n1) <  2147483647)))) -> ((((-2147483648) <= 2147483647) ->
  in_range1(b1)) -> ((((-2147483648) <= 2147483647) -> in_range1(b2)) ->
  (((0 <= 2147483647) -> in_range2(k1)) -> (((0 <= 2147483647) ->
  in_range2(k2)) -> ((({ int__content = result } = { int__content = p1 }) and
  (p11 = 1)) -> ((({ int__content = result1 } = { int__content = b1 }) and
  (b11 = a1)) -> ((({ int__content = result2 } = { int__content = k1 }) and
  (k11 = n1)) -> ((((0 <  k11) and ((((temp___187 = p11) and
  ((temp___186 = k11) and ((temp___185 = b11) and ((0 = temp___188) and
  (((power(a1, n1) = (p12 * power(b12, k12))) and (0 <= k12)) and
  (((((((-2147483648) <= 2147483647) -> in_range1(b12)) and
  ((0 <= 2147483647) -> in_range2(k12))) and
  (((-2147483648) <= 2147483647) -> in_range1(p12))) and (0 <  k12)) and
  (((temp___1881 = result3) and (temp___1882 = k12)) and
  ((((comp_mod(k12,2) = 0) and ((((p12 * power((b12 * b12),
  comp_div(k12,2))) = power(a1, n1)) and (((k12 = result4) and
  (k13 = comp_div(k12,2))) and (((o = (b12 * b12)) and
  in_range1((b12 * b12))) and ((b12 = result5) and (b13 = o))))) and
  (p13 = p12))) or ((not (comp_mod(k12,2) = 0)) and
  (((((p12 * b12) * power(b12, (k12 - 1))) = power(a1, n1)) and
  ((((o1 = (k12 - 1)) and in_range2((k12 - 1))) and ((k12 = result6) and
  (k14 = o1))) and (((o2 = (b12 * p12)) and in_range1((b12 * p12))) and
  ((p12 = result7) and (p13 = o2))))) and ((k13 = k14) and
  (b13 = b12))))) and (not (0 <  k13)))))))))) and (((k13 = k15) and
  ((b13 = b14) and (p13 = p14))) and ((k16 = k13) and ((b15 = b13) and
  (p15 = p13))))) and ((({ int__content = k17 } = { int__content = k15 }) and
  (({ int__content = b16 } = { int__content = b14 }) and ({ int__content =
  p16 } = { int__content = p14 }))) and ((k18 = k16) and ((b17 = b15) and
  (p17 = p15)))))) or ((not (0 <  k11)) and (((k11 = k17) and
  ((b11 = b16) and (p11 = p16))) and ((k18 = k11) and ((b17 = b11) and
  (p17 = p11)))))) -> (((result8 = p2) and (p21 = 1)) -> (((result9 = b2) and
  (b21 = a2)) -> (((result10 = k2) and (k21 = n2)) -> ((0 <  k21) ->
  (((((power(a2, n2) = (p22 * power(b22, k22))) and (0 <= k17)) and
  (p22 <= power(a2, n2))) and (b22 <= power(a2, n2))) ->
  (((((((-2147483648) <= 2147483647) -> in_range1(p22)) and
  (((-2147483648) <= 2147483647) -> in_range1(b22))) and
  ((0 <= 2147483647) -> in_range2(k22))) and (0 <  k22)) ->
  (((result11 = temp___194) and (temp___1941 = k22)) ->
  ((comp_mod(k22,2) = 0) -> (((p22 * power((b22 * b22),
  comp_div(k22,2))) = power(a2, n2)) ->
  (not (2 = 0)))))))))))))))))))))))))))
