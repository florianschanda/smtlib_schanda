;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-fun dummy2 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq3 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq3 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq3 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-fun dummy3 () us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq5 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-fun dummy4 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant3 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq6 (us_rep us_rep) Bool)

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun dummy5 () us_rep)

(declare-datatypes () ((file__ref (mk_file__ref (file__content us_rep)))))
(define-fun file__ref___projection ((a file__ref)) us_rep (file__content a))

(declare-sort read_status 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (read_status read_status) Bool)

(declare-fun dummy6 () read_status)

(declare-datatypes ()
((read_status__ref (mk_read_status__ref (read_status__content read_status)))))
(define-fun read_status__ref___projection ((a read_status__ref)) read_status 
  (read_status__content a))

(declare-fun to_rep3 (read_status) Int)

(declare-fun of_rep3 (Int) read_status)

;; inversion_axiom
  (assert
  (forall ((x read_status))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x read_status)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__file_io__read_result__status read_status)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) read_status 
  (rec__file_io__read_result__status a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__file_io__read_result__c character)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) character 
  (rec__file_io__read_result__c a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__constrained Bool)))))
(define-fun us_rep_3__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_4__projection ((a us_rep1)) us_split_fields (us_split_fields1
                                                               a))

(define-fun us_rep_5__projection ((a us_rep1)) Bool (attr__constrained a))

(define-fun file_io__read_result__c__pred ((a us_rep1)) Bool (= (to_rep3
                                                                (rec__file_io__read_result__status
                                                                (us_split_discrs1
                                                                a))) 0))

(define-fun bool_eq8 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep3
                            (rec__file_io__read_result__status
                            (us_split_discrs1 a))) (to_rep3
                                                   (rec__file_io__read_result__status
                                                   (us_split_discrs1 b))))
                         (=> (file_io__read_result__c__pred a)
                         (= (to_rep
                            (rec__file_io__read_result__c
                            (us_split_fields1 a))) (to_rep
                                                   (rec__file_io__read_result__c
                                                   (us_split_fields1 b))))))
                    true false))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun file_io__read_result__status__first__bit () Int)

(declare-fun file_io__read_result__status__last__bit () Int)

(declare-fun file_io__read_result__status__position () Int)

;; file_io__read_result__status__first__bit_axiom
  (assert (<= 0 file_io__read_result__status__first__bit))

;; file_io__read_result__status__last__bit_axiom
  (assert
  (< file_io__read_result__status__first__bit file_io__read_result__status__last__bit))

;; file_io__read_result__status__position_axiom
  (assert (<= 0 file_io__read_result__status__position))

(declare-fun file_io__read_result__c__first__bit () Int)

(declare-fun file_io__read_result__c__last__bit () Int)

(declare-fun file_io__read_result__c__position () Int)

;; file_io__read_result__c__first__bit_axiom
  (assert (<= 0 file_io__read_result__c__first__bit))

;; file_io__read_result__c__last__bit_axiom
  (assert
  (< file_io__read_result__c__first__bit file_io__read_result__c__last__bit))

;; file_io__read_result__c__position_axiom
  (assert (<= 0 file_io__read_result__c__position))

(declare-fun dummy7 () us_rep1)

(declare-datatypes ()
((read_result__ref (mk_read_result__ref (read_result__content us_rep1)))))
(define-fun read_result__ref___projection ((a read_result__ref)) us_rep1 
  (read_result__content a))

(define-fun default_initial_assumption ((temp___expr_469 us_rep1)
  (temp___skip_top_level_470 Bool)) Bool (and
                                         (= (attr__constrained
                                            temp___expr_469) false)
                                         (= (to_rep3
                                            (rec__file_io__read_result__status
                                            (us_split_discrs1
                                            temp___expr_469))) 2)))

(declare-sort capacity_range 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (capacity_range capacity_range) Bool)

(declare-fun dummy8 () capacity_range)

(declare-datatypes ()
((capacity_range__ref
 (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ()
((us_split_discrs2
 (mk___split_discrs1
 (rec__unbounded_strings__char_vectors__vector__capacity capacity_range)))))
(define-fun us_split_discrs_2__projection ((a us_split_discrs2)) capacity_range 
  (rec__unbounded_strings__char_vectors__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref1
 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref_2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__unbounded_strings__char_vectors__vector us_main_type1)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type1 
  (rec__unbounded_strings__char_vectors__vector a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2
 (mk___rep1
 (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep_6__projection ((a us_rep2)) us_split_discrs2 (us_split_discrs3
                                                                a))

(define-fun us_rep_7__projection ((a us_rep2)) us_split_fields2 (us_split_fields3
                                                                a))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-fun to_rep4 (capacity_range) Int)

(declare-fun of_rep4 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep2) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))

(declare-fun unbounded_strings__char_vectors__vector__capacity__first__bit () Int)

(declare-fun unbounded_strings__char_vectors__vector__capacity__last__bit () Int)

(declare-fun unbounded_strings__char_vectors__vector__capacity__position () Int)

;; unbounded_strings__char_vectors__vector__capacity__first__bit_axiom
  (assert
  (<= 0 unbounded_strings__char_vectors__vector__capacity__first__bit))

;; unbounded_strings__char_vectors__vector__capacity__last__bit_axiom
  (assert
  (< unbounded_strings__char_vectors__vector__capacity__first__bit unbounded_strings__char_vectors__vector__capacity__last__bit))

;; unbounded_strings__char_vectors__vector__capacity__position_axiom
  (assert (<= 0 unbounded_strings__char_vectors__vector__capacity__position))

(declare-fun dummy9 () us_rep2)

(declare-datatypes ()
((vector__ref (mk_vector__ref (vector__content us_rep2)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep2 (vector__content
                                                               a))

(define-fun in_range7 ((rec__unbounded_strings__char_vectors__vector__capacity1 Int)
  (a us_rep2)) Bool (= rec__unbounded_strings__char_vectors__vector__capacity1 
  (to_rep4
  (rec__unbounded_strings__char_vectors__vector__capacity
  (us_split_discrs3 a)))))

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep2) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))

(declare-fun unbounded_strings__char_vectors__vector__capacity__first__bit1 () Int)

(declare-fun unbounded_strings__char_vectors__vector__capacity__last__bit1 () Int)

(declare-fun unbounded_strings__char_vectors__vector__capacity__position1 () Int)

;; unbounded_strings__char_vectors__vector__capacity__first__bit_axiom
  (assert
  (<= 0 unbounded_strings__char_vectors__vector__capacity__first__bit1))

;; unbounded_strings__char_vectors__vector__capacity__last__bit_axiom
  (assert
  (< unbounded_strings__char_vectors__vector__capacity__first__bit1 unbounded_strings__char_vectors__vector__capacity__last__bit1))

;; unbounded_strings__char_vectors__vector__capacity__position_axiom
  (assert
  (<= 0 unbounded_strings__char_vectors__vector__capacity__position1))

(declare-fun dummy10 () us_rep2)

(declare-datatypes ()
((unbounded_string__ref
 (mk_unbounded_string__ref (unbounded_string__content us_rep2)))))
(define-fun unbounded_string__ref___projection ((a unbounded_string__ref)) us_rep2 
  (unbounded_string__content a))

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun dynamic_invariant4 ((temp___expr_502 us_rep2)
  (temp___is_init_499 Bool) (temp___skip_constant_500 Bool)
  (temp___do_toplevel_501 Bool)) Bool (=>
                                      (not (= temp___skip_constant_500 true))
                                      (in_range7 32 temp___expr_502)))

(define-fun default_initial_assumption1 ((temp___expr_504 us_rep2)
  (temp___skip_top_level_505 Bool)) Bool (and
                                         (= (to_rep4
                                            (rec__unbounded_strings__char_vectors__vector__capacity
                                            (us_split_discrs3
                                            temp___expr_504))) 32)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_505 true))
                                         (= (is_empty temp___expr_504) true))))

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard (Int us_rep2) Bool)

;; length__post_axiom
  (assert
  (forall ((s us_rep2))
  (! (=> (dynamic_invariant4 s true true true) (dynamic_invariant (length1 s)
     true false true)) :pattern ((length1 s)) )))

(declare-fun to_string1 (us_rep2) us_t)

(declare-fun to_string__function_guard (us_t us_rep2) Bool)

;; to_string__post_axiom
  (assert
  (forall ((s us_rep2))
  (! (=> (dynamic_invariant4 s true true true)
     (let ((result (to_string1 s)))
     (and (and (= (length result) (length1 s)) (= (first1 result) 1))
     (dynamic_invariant3 result true false true)))) :pattern ((to_string1 s)) )))

(declare-sort name_id 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq10 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (name_id name_id) Bool)

(declare-fun dummy11 () name_id)

(declare-datatypes ()
((name_id__ref (mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content
                                                                 a))

(define-fun dynamic_invariant5 ((temp___expr_563 Int)
  (temp___is_init_560 Bool) (temp___skip_constant_561 Bool)
  (temp___do_toplevel_562 Bool)) Bool (=>
                                      (or (= temp___is_init_560 true)
                                      (<= 0 2147483647)) (in_range8
                                      temp___expr_563)))

(declare-sort token_kind 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(define-fun bool_eq11 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (token_kind token_kind) Bool)

(declare-fun dummy12 () token_kind)

(declare-datatypes ()
((token_kind__ref (mk_token_kind__ref (token_kind__content token_kind)))))
(define-fun token_kind__ref___projection ((a token_kind__ref)) token_kind 
  (token_kind__content a))

(define-fun dynamic_invariant6 ((temp___expr_572 Int)
  (temp___is_init_569 Bool) (temp___skip_constant_570 Bool)
  (temp___do_toplevel_571 Bool)) Bool (=>
                                      (or (= temp___is_init_569 true)
                                      (<= 0 8)) (in_range9 temp___expr_572)))

(declare-fun to_rep5 (token_kind) Int)

(declare-fun of_rep5 (Int) token_kind)

;; inversion_axiom
  (assert
  (forall ((x token_kind))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x token_kind)) (! (in_range9
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort valued_tokens 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 3 x) (<= x 8)))

(define-fun bool_eq12 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (valued_tokens valued_tokens) Bool)

(declare-fun dummy13 () valued_tokens)

(declare-datatypes ()
((valued_tokens__ref
 (mk_valued_tokens__ref (valued_tokens__content valued_tokens)))))
(define-fun valued_tokens__ref___projection ((a valued_tokens__ref)) valued_tokens 
  (valued_tokens__content a))

(define-fun dynamic_invariant7 ((temp___expr_578 Int)
  (temp___is_init_575 Bool) (temp___skip_constant_576 Bool)
  (temp___do_toplevel_577 Bool)) Bool (=>
                                      (or (= temp___is_init_575 true)
                                      (<= 3 8)) (in_range10 temp___expr_578)))

(declare-fun to_rep6 (name_id) Int)

(declare-fun of_rep6 (Int) name_id)

;; inversion_axiom
  (assert
  (forall ((x name_id))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x name_id)) (! (in_range8 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-datatypes ()
((us_split_discrs4 (mk___split_discrs2 (rec__lexer__token__kind token_kind)))))
(define-fun us_split_discrs_3__projection ((a us_split_discrs4)) token_kind 
  (rec__lexer__token__kind a))

(declare-datatypes ()
((us_split_discrs__ref2
 (mk___split_discrs__ref2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref_3__projection ((a us_split_discrs__ref2)) us_split_discrs4 
  (us_split_discrs__content2 a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__lexer__token__line natural)(rec__lexer__token__col natural)(rec__lexer__token__length natural)(rec__lexer__token__value name_id)))))
(define-fun us_split_fields_Line__projection ((a us_split_fields4)) natural 
  (rec__lexer__token__line a))

(define-fun us_split_fields_Col__projection ((a us_split_fields4)) natural 
  (rec__lexer__token__col a))

(define-fun us_split_fields_Length__projection ((a us_split_fields4)) natural 
  (rec__lexer__token__length a))

(define-fun us_split_fields_Value__projection ((a us_split_fields4)) name_id 
  (rec__lexer__token__value a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep3
 (mk___rep2
 (us_split_discrs5 us_split_discrs4)(us_split_fields5 us_split_fields4)(attr__constrained1 Bool)))))
(define-fun us_rep_8__projection ((a us_rep3)) us_split_discrs4 (us_split_discrs5
                                                                a))

(define-fun us_rep_9__projection ((a us_rep3)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun us_rep_10__projection ((a us_rep3)) Bool (attr__constrained1 a))

(define-fun lexer__token__value__pred ((a us_rep3)) Bool (and
                                                         (<= 3 (to_rep5
                                                               (rec__lexer__token__kind
                                                               (us_split_discrs5
                                                               a))))
                                                         (<= (to_rep5
                                                             (rec__lexer__token__kind
                                                             (us_split_discrs5
                                                             a))) 8)))

(define-fun bool_eq13 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (and
                         (and
                         (= (to_rep5
                            (rec__lexer__token__kind (us_split_discrs5 a))) 
                         (to_rep5
                         (rec__lexer__token__kind (us_split_discrs5 b))))
                         (= (to_rep2
                            (rec__lexer__token__line (us_split_fields5 a))) 
                         (to_rep2
                         (rec__lexer__token__line (us_split_fields5 b)))))
                         (= (to_rep2
                            (rec__lexer__token__col (us_split_fields5 a))) 
                         (to_rep2
                         (rec__lexer__token__col (us_split_fields5 b)))))
                         (= (to_rep2
                            (rec__lexer__token__length (us_split_fields5 a))) 
                         (to_rep2
                         (rec__lexer__token__length (us_split_fields5 b)))))
                         (=> (lexer__token__value__pred a)
                         (= (to_rep6
                            (rec__lexer__token__value (us_split_fields5 a))) 
                         (to_rep6
                         (rec__lexer__token__value (us_split_fields5 b))))))
                    true false))

(declare-fun user_eq13 (us_rep3 us_rep3) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep3) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))

(declare-fun lexer__token__kind__first__bit () Int)

(declare-fun lexer__token__kind__last__bit () Int)

(declare-fun lexer__token__kind__position () Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit lexer__token__kind__last__bit))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position))

(declare-fun lexer__token__line__first__bit () Int)

(declare-fun lexer__token__line__last__bit () Int)

(declare-fun lexer__token__line__position () Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit lexer__token__line__last__bit))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position))

(declare-fun lexer__token__col__first__bit () Int)

(declare-fun lexer__token__col__last__bit () Int)

(declare-fun lexer__token__col__position () Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit lexer__token__col__last__bit))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position))

(declare-fun lexer__token__length__first__bit () Int)

(declare-fun lexer__token__length__last__bit () Int)

(declare-fun lexer__token__length__position () Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit lexer__token__length__last__bit))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position))

(declare-fun lexer__token__value__first__bit () Int)

(declare-fun lexer__token__value__last__bit () Int)

(declare-fun lexer__token__value__position () Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit))

;; lexer__token__value__last__bit_axiom
  (assert (< lexer__token__value__first__bit lexer__token__value__last__bit))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position))

(declare-fun dummy14 () us_rep3)

(declare-datatypes ()
((token__ref (mk_token__ref (token__content us_rep3)))))
(define-fun token__ref___projection ((a token__ref)) us_rep3 (token__content
                                                             a))

(define-fun default_initial_assumption2 ((temp___expr_586 us_rep3)
  (temp___skip_top_level_587 Bool)) Bool (and
                                         (= (attr__constrained1
                                            temp___expr_586) false)
                                         (= (to_rep5
                                            (rec__lexer__token__kind
                                            (us_split_discrs5
                                            temp___expr_586))) 0)))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun current_read__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun next_read__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun local_invariant (us_rep us_split_fields us_split_discrs Int
  us_split_fields us_split_discrs Int) Bool)

(declare-fun local_invariant__function_guard (Bool us_rep us_split_fields
  us_split_discrs Int us_split_fields us_split_discrs Int) Bool)

(declare-fun size (us_rep) Int)

(declare-fun size__function_guard (Int us_rep) Bool)

(declare-fun index (us_rep) Int)

(declare-fun index__function_guard (Int us_rep) Bool)

;; local_invariant__def_axiom
  (assert
  (forall ((lexer__the_file us_rep))
  (forall ((lexer__current_read__fields us_split_fields)
  (lexer__next_read__fields us_split_fields))
  (forall ((lexer__current_read__discrs us_split_discrs)
  (lexer__next_read__discrs us_split_discrs))
  (forall ((lexer__current_idx Int) (lexer__next_idx Int))
  (! (=
     (= (local_invariant lexer__the_file lexer__current_read__fields
        lexer__current_read__discrs lexer__current_idx
        lexer__next_read__fields lexer__next_read__discrs lexer__next_idx) true)
     (and
     (and
     (and
     (and
     (and
     (and
     (not
     (= (attr__constrained
        (mk___rep lexer__current_read__discrs lexer__current_read__fields
        current_read__attr__constrained)) true))
     (not
     (= (attr__constrained
        (mk___rep lexer__next_read__discrs lexer__next_read__fields
        next_read__attr__constrained)) true)))
     (<= lexer__current_idx (size lexer__the_file)))
     (<= lexer__next_idx (size lexer__the_file)))
     (= lexer__next_idx (index lexer__the_file)))
     (<= lexer__current_idx lexer__next_idx))
     (ite (= (to_rep3
             (rec__file_io__read_result__status
             (us_split_discrs1
             (mk___rep lexer__next_read__discrs lexer__next_read__fields
             next_read__attr__constrained)))) 0)
     (and
     (= (to_rep3
        (rec__file_io__read_result__status
        (us_split_discrs1
        (mk___rep lexer__current_read__discrs lexer__current_read__fields
        current_read__attr__constrained)))) 0)
     (= lexer__current_idx (- lexer__next_idx 1)))
     (= lexer__current_idx lexer__next_idx)))) :pattern ((local_invariant
                                                         lexer__the_file
                                                         lexer__current_read__fields
                                                         lexer__current_read__discrs
                                                         lexer__current_idx
                                                         lexer__next_read__fields
                                                         lexer__next_read__discrs
                                                         lexer__next_idx)) ))))))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun invariant__ (us_private Int us_rep us_split_fields
  us_split_discrs Int Int Int us_split_fields us_split_discrs Int) Bool)

(declare-fun invariant____function_guard (Bool us_private Int us_rep
  us_split_fields us_split_discrs Int Int Int us_split_fields us_split_discrs
  Int) Bool)

(declare-fun invariant__1 (us_private) Bool)

(declare-fun invariant____function_guard1 (Bool us_private) Bool)

;; invariant____def_axiom
  (assert
  (forall ((names__name_table us_private))
  (forall ((lexer__the_filename Int) (lexer__current_line Int)
  (lexer__current_col Int) (lexer__current_idx Int) (lexer__next_idx Int))
  (forall ((lexer__the_file us_rep))
  (forall ((lexer__current_read__fields us_split_fields)
  (lexer__next_read__fields us_split_fields))
  (forall ((lexer__current_read__discrs us_split_discrs)
  (lexer__next_read__discrs us_split_discrs))
  (! (=
     (= (invariant__ names__name_table lexer__the_filename lexer__the_file
        lexer__current_read__fields lexer__current_read__discrs
        lexer__current_line lexer__current_col lexer__current_idx
        lexer__next_read__fields lexer__next_read__discrs lexer__next_idx) true)
     (and (= (invariant__1 names__name_table) true)
     (= (local_invariant lexer__the_file lexer__current_read__fields
        lexer__current_read__discrs lexer__current_idx
        lexer__next_read__fields lexer__next_read__discrs lexer__next_idx) true))) :pattern (
  (invariant__ names__name_table lexer__the_filename lexer__the_file
  lexer__current_read__fields lexer__current_read__discrs lexer__current_line
  lexer__current_col lexer__current_idx lexer__next_read__fields
  lexer__next_read__discrs lexer__next_idx)) )))))))

(declare-fun t__attr__constrained () Bool)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun s__split_discrs () us_split_discrs2)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-sort parse_state 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 9)))

(define-fun bool_eq14 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq14 (parse_state parse_state) Bool)

(declare-fun dummy15 () parse_state)

(declare-datatypes ()
((parse_state__ref (mk_parse_state__ref (parse_state__content parse_state)))))
(define-fun parse_state__ref___projection ((a parse_state__ref)) parse_state 
  (parse_state__content a))

(define-fun dynamic_invariant8 ((temp___expr_670 Int)
  (temp___is_init_667 Bool) (temp___skip_constant_668 Bool)
  (temp___do_toplevel_669 Bool)) Bool (=>
                                      (or (= temp___is_init_667 true)
                                      (<= 0 9)) (in_range11 temp___expr_670)))

(declare-sort terminal_states 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 9)))

(define-fun bool_eq15 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq15 (terminal_states terminal_states) Bool)

(declare-fun dummy16 () terminal_states)

(declare-datatypes ()
((terminal_states__ref
 (mk_terminal_states__ref (terminal_states__content terminal_states)))))
(define-fun terminal_states__ref___projection ((a terminal_states__ref)) terminal_states 
  (terminal_states__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(define-fun in_range13 ((rec__lexer__token__kind1 Int)
  (a us_rep3)) Bool (= rec__lexer__token__kind1 (to_rep5
                                                (rec__lexer__token__kind
                                                (us_split_discrs5 a)))))

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep3) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment6 a))))

(declare-fun lexer__token__kind__first__bit1 () Int)

(declare-fun lexer__token__kind__last__bit1 () Int)

(declare-fun lexer__token__kind__position1 () Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit1))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit1 lexer__token__kind__last__bit1))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position1))

(declare-fun lexer__token__value__first__bit1 () Int)

(declare-fun lexer__token__value__last__bit1 () Int)

(declare-fun lexer__token__value__position1 () Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit1))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit1 lexer__token__value__last__bit1))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position1))

(declare-fun lexer__token__line__first__bit1 () Int)

(declare-fun lexer__token__line__last__bit1 () Int)

(declare-fun lexer__token__line__position1 () Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit1))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit1 lexer__token__line__last__bit1))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position1))

(declare-fun lexer__token__col__first__bit1 () Int)

(declare-fun lexer__token__col__last__bit1 () Int)

(declare-fun lexer__token__col__position1 () Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit1))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit1 lexer__token__col__last__bit1))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position1))

(declare-fun lexer__token__length__first__bit1 () Int)

(declare-fun lexer__token__length__last__bit1 () Int)

(declare-fun lexer__token__length__position1 () Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit1))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit1 lexer__token__length__last__bit1))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position1))

(declare-fun dummy17 () us_rep3)

(declare-datatypes () ((t58b__ref (mk_t58b__ref (t58b__content us_rep3)))))
(define-fun t58b__ref___projection ((a t58b__ref)) us_rep3 (t58b__content a))

(declare-fun tmp () us_t)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq16 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq16 (integer integer) Bool)

(declare-fun dummy18 () integer)

(declare-datatypes () ((t66b__ref (mk_t66b__ref (t66b__content integer)))))
(define-fun t66b__ref___projection ((a t66b__ref)) integer (t66b__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int character))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))

(define-fun of_array1 ((a (Array Int character)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length2 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size7 () Int)

(declare-fun object__size7 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size7 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment7 a))))

(define-fun bool_eq17 ((x us_t1)
  (y us_t1)) Bool (bool_eq3 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq17 (us_t1 us_t1) Bool)

(declare-fun dummy19 () us_t1)

(declare-datatypes () ((t67b__ref (mk_t67b__ref (t67b__content us_t1)))))
(define-fun t67b__ref___projection ((a t67b__ref)) us_t1 (t67b__content a))

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq18 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq18 (integer integer) Bool)

(declare-fun dummy20 () integer)

(declare-datatypes () ((t69b__ref (mk_t69b__ref (t69b__content integer)))))
(define-fun t69b__ref___projection ((a t69b__ref)) integer (t69b__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ()
((us_t2 (mk___t2 (elts2 (Array Int character))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int character) (elts2 a))

(define-fun of_array2 ((a (Array Int character)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))

(define-fun length3 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-fun value__size8 () Int)

(declare-fun object__size8 ((Array Int character)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int character)) Int)

(declare-fun value__alignment8 () Int)

(declare-fun object__alignment8 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size8 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment8))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment8 a))))

(define-fun bool_eq19 ((x us_t2)
  (y us_t2)) Bool (bool_eq3 (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq19 (us_t2 us_t2) Bool)

(declare-fun dummy21 () us_t2)

(declare-datatypes () ((t70b__ref (mk_t70b__ref (t70b__content us_t2)))))
(define-fun t70b__ref___projection ((a t70b__ref)) us_t2 (t70b__content a))

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(define-fun bool_eq20 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq20 (integer integer) Bool)

(declare-fun dummy22 () integer)

(declare-datatypes () ((t73b__ref (mk_t73b__ref (t73b__content integer)))))
(define-fun t73b__ref___projection ((a t73b__ref)) integer (t73b__content a))

(declare-sort t3 0)

(declare-fun first6 (t3) integer)

(declare-fun last6 (t3) integer)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first6 (mk3 f l))) f)
     (= (to_rep1 (last6 (mk3 f l))) l)))) :pattern ((mk3 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property5 range_first range_last low)
                   (dynamic_property5 range_first range_last high))))))

(declare-datatypes ()
((us_t3 (mk___t3 (elts3 (Array Int character))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int character) (elts3 a))

(define-fun of_array3 ((a (Array Int character)) (f Int)
  (l Int)) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) Int (to_rep1 (first6 (rt3 a))))

(define-fun last7 ((a us_t3)) Int (to_rep1 (last6 (rt3 a))))

(define-fun length4 ((a us_t3)) Int (ite (<= (first7 a) (last7 a))
                                    (+ (- (last7 a) (first7 a)) 1) 0))

(declare-fun value__size9 () Int)

(declare-fun object__size9 ((Array Int character)) Int)

(declare-fun value__component__size3 () Int)

(declare-fun object__component__size3 ((Array Int character)) Int)

(declare-fun value__alignment9 () Int)

(declare-fun object__alignment9 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size9 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment9))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment9 a))))

(define-fun bool_eq21 ((x us_t3)
  (y us_t3)) Bool (bool_eq3 (elts3 x) (to_rep1 (first6 (rt3 x)))
                  (to_rep1 (last6 (rt3 x))) (elts3 y)
                  (to_rep1 (first6 (rt3 y))) (to_rep1 (last6 (rt3 y)))))

(declare-fun user_eq21 (us_t3 us_t3) Bool)

(declare-fun dummy23 () us_t3)

(declare-datatypes () ((t74b__ref (mk_t74b__ref (t74b__content us_t3)))))
(define-fun t74b__ref___projection ((a t74b__ref)) us_t3 (t74b__content a))

(declare-fun str__first () integer)

(declare-fun str__last () integer)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun temp___String_Literal_761 (tuple0) (Array Int character))

;; temp___String_Literal_761__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 1)) 105)
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 2)) 110))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 3)) 118))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 6)) 105))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 7)) 100))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 9)) 99))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 10)) 104))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 11)) 97))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 12)) 114))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 13)) 97))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 14)) 99))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 15)) 116))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 17)) 114))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_761 us_void_param) 19)) 39)) :pattern (
  (temp___String_Literal_761 us_void_param)) )))

(declare-fun temp___String_Literal_763 (tuple0) (Array Int character))

;; temp___String_Literal_763__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (to_rep (select (temp___String_Literal_763 us_void_param) 1)) 39) :pattern (
  (temp___String_Literal_763 us_void_param)) )))

(declare-fun temp___String_Literal_781 (tuple0) (Array Int character))

;; temp___String_Literal_781__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 1)) 105)
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 2)) 110))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 3)) 118))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 5)) 108))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 6)) 105))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 7)) 100))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 9)) 102))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 10)) 111))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 11)) 114))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 12)) 109))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 13)) 97))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 14)) 116))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 15)) 44))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 17)) 109))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 18)) 117))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 19)) 115))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 20)) 116))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 22)) 98))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 23)) 101))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 24)) 32))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 25)) 39))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 26)) 98))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 27)) 39))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 28)) 32))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 29)) 111))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 30)) 114))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 32)) 39))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 33)) 120))
     (= (to_rep (select (temp___String_Literal_781 us_void_param) 34)) 39)) :pattern (
  (temp___String_Literal_781 us_void_param)) )))

(declare-fun temp___String_Literal_801 (tuple0) (Array Int character))

;; temp___String_Literal_801__def_axiom
  (assert true)

(declare-fun temp___String_Literal_806 (tuple0) (Array Int character))

;; temp___String_Literal_806__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 1)) 113)
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 2)) 117))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 3)) 111))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 5)) 101))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 6)) 100))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 8)) 115))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 9)) 121))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 10)) 109))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 11)) 98))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 12)) 111))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 13)) 108))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 15)) 105))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 16)) 115))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 17)) 32))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 18)) 110))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 19)) 111))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 20)) 116))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 22)) 116))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 23)) 101))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 24)) 114))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 25)) 109))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 26)) 105))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 27)) 110))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 28)) 97))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 29)) 116))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 30)) 101))
     (= (to_rep (select (temp___String_Literal_806 us_void_param) 31)) 100)) :pattern (
  (temp___String_Literal_806 us_void_param)) )))

(declare-fun temp___String_Literal_807 (tuple0) (Array Int character))

;; temp___String_Literal_807__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 1)) 98)
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 2)) 105))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 3)) 110))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 5)) 114))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 6)) 121))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 8)) 111))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 9)) 114))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 11)) 104))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 12)) 101))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 13)) 120))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 14)) 32))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 15)) 115))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 16)) 121))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 17)) 109))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 18)) 98))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 19)) 111))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 20)) 108))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 21)) 32))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 22)) 105))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 23)) 115))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 24)) 32))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 25)) 110))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 26)) 111))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 27)) 116))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 28)) 32))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 29)) 102))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 30)) 105))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 31)) 110))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 32)) 105))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 33)) 115))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 34)) 104))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 35)) 101))
     (= (to_rep (select (temp___String_Literal_807 us_void_param) 36)) 100)) :pattern (
  (temp___String_Literal_807 us_void_param)) )))

(declare-fun temp___String_Literal_808 (tuple0) (Array Int character))

;; temp___String_Literal_808__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 1)) 115)
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 2)) 116))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 3)) 114))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 4)) 105))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 5)) 110))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 6)) 103))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 8)) 108))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 10)) 116))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 11)) 101))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 12)) 114))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 13)) 97))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 14)) 108))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 15)) 32))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 16)) 105))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 17)) 115))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 18)) 32))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 19)) 110))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 20)) 111))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 21)) 116))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 22)) 32))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 23)) 116))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 24)) 101))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 25)) 114))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 26)) 109))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 27)) 105))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 28)) 110))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 29)) 97))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 30)) 116))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 31)) 101))
     (= (to_rep (select (temp___String_Literal_808 us_void_param) 32)) 100)) :pattern (
  (temp___String_Literal_808 us_void_param)) )))

(define-fun dynamic_invariant9 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant10 ((temp___expr_676 Int)
  (temp___is_init_673 Bool) (temp___skip_constant_674 Bool)
  (temp___do_toplevel_675 Bool)) Bool (and
                                      (=>
                                      (or (= temp___is_init_673 true)
                                      (<= 0 9)) (in_range12 temp___expr_676))
                                      (=> (= temp___do_toplevel_675 true)
                                      (=> (= temp___is_init_673 true)
                                      (or
                                      (and (<= 2 temp___expr_676)
                                      (<= temp___expr_676 2))
                                      (and (<= 9 temp___expr_676)
                                      (<= temp___expr_676 9)))))))

(define-fun dynamic_predicate ((temp___680 Int)) Bool (or
                                                      (and (<= 2 temp___680)
                                                      (<= temp___680 2))
                                                      (and (<= 9 temp___680)
                                                      (<= temp___680 9))))

;; invariant____post_axiom
  (assert true)

(define-fun dynamic_invariant11 ((temp___expr_461 Int)
  (temp___is_init_458 Bool) (temp___skip_constant_459 Bool)
  (temp___do_toplevel_460 Bool)) Bool (=>
                                      (or (= temp___is_init_458 true)
                                      (<= 0 2)) (in_range5 temp___expr_461)))

(define-fun dynamic_invariant12 ((temp___expr_491 Int)
  (temp___is_init_488 Bool) (temp___skip_constant_489 Bool)
  (temp___do_toplevel_490 Bool)) Bool (=>
                                      (or (= temp___is_init_488 true)
                                      (<= 0 2147483647)) (in_range6
                                      temp___expr_491)))

(define-fun capacity ((container us_rep2)) Int (ite (= (of_int 0) true)
                                               (to_rep4
                                               (rec__unbounded_strings__char_vectors__vector__capacity
                                               (us_split_discrs3 container)))
                                               2147483647))

(declare-fun capacity__function_guard (Int us_rep2) Bool)

(declare-fun length5 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length5 container)))
     (and (<= result (capacity container)) (dynamic_invariant12 result true
     false true))) :pattern ((length5 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true) (= (length5 container) 0)) :pattern (
  (is_empty container)) )))

(declare-fun name_table () us_private)

(declare-fun t__split_fields () natural)

(declare-fun t__split_fields1 () natural)

(declare-fun t__split_fields2 () natural)

(declare-fun t__split_fields3 () name_id)

(declare-fun t__split_discrs () token_kind)

(declare-fun the_filename () Int)

(declare-fun the_file () us_rep)

(declare-fun current_read__split_fields () character)

(declare-fun current_read__split_discrs () read_status)

(declare-fun current_line () Int)

(declare-fun current_col () Int)

(declare-fun current_idx () Int)

(declare-fun next_read__split_fields () character)

(declare-fun next_read__split_discrs () read_status)

(declare-fun next_idx () Int)

(declare-fun s__split_fields () us_main_type1)

(declare-fun first_line () int__ref)

(declare-fun first_col () int__ref)

(declare-fun first_idx () int__ref)

(declare-fun state () int__ref)

(declare-fun c () int__ref)

(declare-fun r57b () int__ref)

(declare-fun o () character)

(declare-fun o1 () (Array Int character))

(declare-fun o2 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun o5 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () (Array Int character))

(declare-fun temp___764 () us_t)

(declare-fun o8 () Int)

(declare-fun o9 () Int)

(declare-fun o10 () Int)

(declare-fun o11 () Int)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () us_t)

(declare-fun t__split_fields4 () us_split_fields4)

(declare-fun t__split_discrs1 () us_split_discrs4)

(declare-fun r57b1 () Int)

(declare-fun the_file1 () us_rep)

(declare-fun current_read__split_fields1 () us_split_fields)

(declare-fun current_read__split_discrs1 () us_split_discrs)

(declare-fun current_line1 () Int)

(declare-fun current_col1 () Int)

(declare-fun current_idx1 () Int)

(declare-fun next_read__split_fields1 () us_split_fields)

(declare-fun next_read__split_discrs1 () us_split_discrs)

(declare-fun next_idx1 () Int)

(declare-fun r57b2 () Int)

(declare-fun t__split_fields5 () us_split_fields4)

(declare-fun t__split_discrs2 () us_split_discrs4)

(declare-fun t__split_fields6 () us_split_fields4)

(declare-fun t__split_discrs3 () us_split_discrs4)

(declare-fun the_file2 () us_rep)

(declare-fun current_read__split_fields2 () us_split_fields)

(declare-fun current_read__split_discrs2 () us_split_discrs)

(declare-fun current_line2 () Int)

(declare-fun current_col2 () Int)

(declare-fun current_idx2 () Int)

(declare-fun next_read__split_fields2 () us_split_fields)

(declare-fun next_read__split_discrs2 () us_split_discrs)

(declare-fun next_idx2 () Int)

(declare-fun first_line1 () Int)

(declare-fun first_col1 () Int)

(declare-fun first_idx1 () Int)

(declare-fun state1 () Int)

(declare-fun c1 () Int)

(declare-fun r57b3 () Int)

(declare-fun temp___780 () Int)

(declare-fun result () int__ref)

(declare-fun temp___7801 () Int)

(declare-fun result1 () int__ref)

(declare-fun first_line2 () Int)

(declare-fun result2 () int__ref)

(declare-fun first_col2 () Int)

(declare-fun result3 () int__ref)

(declare-fun first_idx2 () Int)

(declare-fun result4 () int__ref)

(declare-fun c2 () Int)

(declare-fun s__split_fields1 () us_split_fields2)

(declare-fun the_file3 () us_rep)

(declare-fun current_read__split_fields3 () us_split_fields)

(declare-fun current_read__split_discrs3 () us_split_discrs)

(declare-fun current_line3 () Int)

(declare-fun current_col3 () Int)

(declare-fun current_idx3 () Int)

(declare-fun next_read__split_fields3 () us_split_fields)

(declare-fun next_read__split_discrs3 () us_split_discrs)

(declare-fun next_idx3 () Int)

(declare-fun s__split_fields2 () us_split_fields2)

(declare-fun t__split_fields7 () us_split_fields4)

(declare-fun t__split_discrs4 () us_split_discrs4)

(declare-fun t__split_fields8 () us_split_fields4)

(declare-fun t__split_discrs5 () us_split_discrs4)

(declare-fun state2 () Int)

(declare-fun state3 () Int)

(declare-fun state4 () Int)

(declare-fun state5 () Int)

(declare-fun state6 () Int)

(declare-fun the_file4 () us_rep)

(declare-fun current_read__split_fields4 () us_split_fields)

(declare-fun current_read__split_discrs4 () us_split_discrs)

(declare-fun current_line4 () Int)

(declare-fun current_col4 () Int)

(declare-fun current_idx4 () Int)

(declare-fun next_read__split_fields4 () us_split_fields)

(declare-fun next_read__split_discrs4 () us_split_discrs)

(declare-fun next_idx4 () Int)

(declare-fun r57b4 () Int)

(declare-fun t__split_fields9 () us_split_fields4)

(declare-fun t__split_discrs6 () us_split_discrs4)

;; H
  (assert (in_range8 the_filename))

;; H
  (assert (= current_read__attr__constrained false))

;; H
  (assert (in_range2 current_line))

;; H
  (assert (in_range4 current_col))

;; H
  (assert (in_range4 current_idx))

;; H
  (assert (= next_read__attr__constrained false))

;; H
  (assert (in_range4 next_idx))

;; H
  (assert
  (and
  (= (invariant__ name_table the_filename the_file
     (mk___split_fields current_read__split_fields)
     (mk___split_discrs current_read__split_discrs) current_line current_col
     current_idx (mk___split_fields next_read__split_fields)
     (mk___split_discrs next_read__split_discrs) next_idx) true)
  (not (= t__attr__constrained true))))

;; H
  (assert (default_initial_assumption1
  (mk___rep1 s__split_discrs (mk___split_fields1 s__split_fields)) false))

;; H
  (assert
  (= 32 (to_rep4
        (rec__unbounded_strings__char_vectors__vector__capacity
        s__split_discrs))))

;; H
  (assert (=> (<= 0 2147483647) (in_range4 (int__content first_line))))

;; H
  (assert (=> (<= 0 2147483647) (in_range4 (int__content first_col))))

;; H
  (assert (=> (<= 0 2147483647) (in_range4 (int__content first_idx))))

;; H
  (assert (=> (<= 0 9) (in_range11 (int__content state))))

;; H
  (assert (=> (<= 0 255) (in_range3 (int__content c))))

;; H
  (assert
  (and
  (and
  (= (local_invariant the_file1 current_read__split_fields1
     current_read__split_discrs1 current_idx1 next_read__split_fields1
     next_read__split_discrs1 next_idx1) true)
  (<= current_idx current_idx1))
  (and
  (and (and (in_range2 current_line1) (in_range4 current_col1)) (in_range4
  current_idx1)) (in_range4 next_idx1))))

;; H
  (assert
  (not
  (= (to_rep3
     (rec__file_io__read_result__status current_read__split_discrs1)) 1)))

;; H
  (assert
  (not
  (= (to_rep3
     (rec__file_io__read_result__status current_read__split_discrs1)) 2)))

;; H
  (assert (= (let ((subject r57b)) (mk_int__ref r57b2)) r57b))

;; H
  (assert (= t__split_discrs2 (mk___split_discrs2 t__split_discrs)))

;; H
  (assert
  (= t__split_fields5 (mk___split_fields2 t__split_fields t__split_fields1
                      t__split_fields2 t__split_fields3)))

;; H
  (assert (= r57b2 r57b1))

;; H
  (assert (= t__split_discrs2 t__split_discrs1))

;; H
  (assert (= t__split_fields5 t__split_fields4))

;; H
  (assert
  (and
  (= (local_invariant the_file2 current_read__split_fields2
     current_read__split_discrs2 current_idx2 next_read__split_fields2
     next_read__split_discrs2 next_idx2) true)
  (= (to_rep3
     (rec__file_io__read_result__status current_read__split_discrs2)) 0)))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (=> (<= 0 2147483647) (in_range4 (let ((subject first_idx)) first_idx1)))
  (in_range2 current_line2)) (in_range4 current_col2)) (in_range4
  current_idx2)) (=> (<= 0 9) (in_range11 (let ((subject state)) state1))))
  (=> (<= 0 255) (in_range3 (let ((subject c)) c1))))
  (=> (<= 0 2147483647) (in_range4 (let ((subject first_line)) first_line1))))
  (in_range4 next_idx2))
  (=> (<= 0 2147483647) (in_range4 (let ((subject first_col)) first_col1)))))

;; H
  (assert (= result (mk_int__ref temp___780)))

;; H
  (assert (= temp___7801 current_idx2))

;; H
  (assert (= result1 (let ((subject first_line)) (mk_int__ref first_line1))))

;; H
  (assert (= (let ((subject first_line)) first_line2) current_line2))

;; H
  (assert (= result2 (let ((subject first_col)) (mk_int__ref first_col1))))

;; H
  (assert (= (let ((subject first_col)) first_col2) current_col2))

;; H
  (assert (= result3 (let ((subject first_idx)) (mk_int__ref first_idx1))))

;; H
  (assert (= (let ((subject first_idx)) first_idx2) current_idx2))

;; H
  (assert (= result4 (let ((subject c)) (mk_int__ref c1))))

;; H
  (assert
  (= (let ((subject c)) c2) (to_rep
                            (rec__file_io__read_result__c
                            current_read__split_fields2))))

;; H
  (assert (= (length1 (mk___rep1 s__split_discrs s__split_fields1)) 0))

;; H
  (assert
  (and
  (and
  (and
  (= (local_invariant the_file3 current_read__split_fields3
     current_read__split_discrs3 current_idx3 next_read__split_fields3
     next_read__split_discrs3 next_idx3) true)
  (= (length1 (mk___rep1 s__split_discrs s__split_fields2)) (+ (length1
                                                               (mk___rep1
                                                               s__split_discrs
                                                               s__split_fields1)) 1)))
  (ite (= (to_rep3
          (rec__file_io__read_result__status current_read__split_discrs3)) 0)
  (= current_idx3 (+ current_idx2 1)) (= current_idx3 current_idx2)))
  (and
  (and (and (in_range2 current_line3) (in_range4 current_col3)) (in_range4
  current_idx3)) (in_range4 next_idx3))))

;; H
  (assert (not (= (let ((subject c)) c2) 40)))

;; H
  (assert (not (= (let ((subject c)) c2) 41)))

;; H
  (assert (not (= (let ((subject c)) c2) 124)))

;; H
  (assert (not (= (let ((subject c)) c2) 35)))

;; H
  (assert
  (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))))

;; H
  (assert
  (not
  (and (<= 0 (let ((subject c)) c2))
  (not (not (<= (let ((subject c)) c2) 255))))))

;; H
  (assert
  (not
  (and (<= 0 (let ((subject c)) c2))
  (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255)))))

;; H
  (assert
  (not
  (and (not (<= 0 (let ((subject c)) c2)))
  (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255)))))

;; H
  (assert (not (= (let ((subject c)) c2) 34)))

;; H
  (assert (=> (<= 1 19) (= o2 (+ (- 19 1) 1))))

;; H
  (assert (=> (not (<= 1 19)) (= o2 0)))

;; H
  (assert (= o3 (+ o2 1)))

;; H
  (assert (= o4 (+ 1 o3)))

;; H
  (assert (= o5 (- o4 1)))

;; H
  (assert (and (= o6 o5) (in_range2 o5)))

;; H
  (assert (= (to_rep o) (let ((subject c)) c2)))

;; H
  (assert (= o1 (singleton1 o 1)))

;; H
  (assert (= o7 (concat1 (temp___String_Literal_761 Tuple0) 1 19 o1 1 1)))

;; H
  (assert (= temp___764 (mk___t o7 (mk 1 o6))))

;; H
  (assert
  (=> (= (length temp___764) 0)
  (= o14 (mk___t (temp___String_Literal_763 Tuple0) (mk 1 1)))))

;; H
  (assert
  (=> (not (= (length temp___764) 0)) (=> (<= 1 1) (= o8 (+ (- 1 1) 1)))))

;; H
  (assert (=> (not (= (length temp___764) 0)) (=> (not (<= 1 1)) (= o8 0))))

;; H
  (assert
  (=> (not (= (length temp___764) 0))
  (=> (<= (to_rep1 (first (rt temp___764))) (to_rep1 (last (rt temp___764))))
  (= o9 (+ (- (to_rep1 (last (rt temp___764))) (to_rep1
                                               (first (rt temp___764)))) 1)))))

;; H
  (assert
  (=> (not (= (length temp___764) 0))
  (=>
  (not
  (<= (to_rep1 (first (rt temp___764))) (to_rep1 (last (rt temp___764)))))
  (= o9 0))))

;; H
  (assert (=> (not (= (length temp___764) 0)) (= o10 (+ o9 o8))))

;; H
  (assert
  (=> (not (= (length temp___764) 0))
  (= o11 (+ (to_rep1 (first (rt temp___764))) o10))))

;; H
  (assert (=> (not (= (length temp___764) 0)) (= o12 (- o11 1))))

;; H
  (assert
  (=> (not (= (length temp___764) 0)) (and (= o13 o12) (in_range2 o12))))

;; H
  (assert
  (=> (not (= (length temp___764) 0))
  (= o14 (mk___t
         (concat1 (elts temp___764) (to_rep1 (first (rt temp___764)))
         (to_rep1 (last (rt temp___764))) (temp___String_Literal_763 Tuple0)
         1 1) (mk (to_rep1 (first (rt temp___764))) o13)))))

;; H
  (assert
  (= (let ((subject state)) (mk_int__ref state6)) (let ((subject state))
                                                  (mk_int__ref state1))))

;; H
  (assert (= state6 state1))

;; H
  (assert
  (= (let ((subject state)) (mk_int__ref state5)) (let ((subject state))
                                                  (mk_int__ref state6))))

;; H
  (assert (= state5 state6))

;; H
  (assert
  (= (let ((subject state)) (mk_int__ref state4)) (let ((subject state))
                                                  (mk_int__ref state5))))

;; H
  (assert (= state4 state5))

;; H
  (assert
  (= (let ((subject state)) (mk_int__ref state3)) (let ((subject state))
                                                  (mk_int__ref state4))))

;; H
  (assert (= state3 state4))

;; H
  (assert
  (= (let ((subject state)) (mk_int__ref state2)) (let ((subject state))
                                                  (mk_int__ref state3))))

;; H
  (assert (= state2 state3))

;; H
  (assert (= t__split_discrs5 t__split_discrs3))

;; H
  (assert (= t__split_fields8 t__split_fields6))

;; H
  (assert (= t__split_discrs4 t__split_discrs5))

;; H
  (assert (= t__split_fields7 t__split_fields8))

;; H
  (assert
  (and
  (and
  (= (local_invariant the_file4 current_read__split_fields4
     current_read__split_discrs4 current_idx4 next_read__split_fields4
     next_read__split_discrs4 next_idx4) true)
  (<= current_idx3 current_idx4))
  (and
  (and (and (in_range2 current_line4) (in_range4 current_col4)) (in_range4
  current_idx4)) (in_range4 next_idx4))))

;; H
  (assert
  (not
  (= (to_rep3
     (rec__file_io__read_result__status current_read__split_discrs4)) 1)))

;; H
  (assert
  (not
  (= (to_rep3
     (rec__file_io__read_result__status current_read__split_discrs4)) 2)))

;; H
  (assert
  (= (let ((subject r57b)) (mk_int__ref r57b4)) (let ((subject r57b))
                                                (mk_int__ref r57b3))))

;; H
  (assert (= t__split_discrs6 t__split_discrs4))

;; H
  (assert (= t__split_fields9 t__split_fields7))

;; H
  (assert (= r57b4 r57b3))

;; H
  (assert (= t__split_discrs6 t__split_discrs4))

;; H
  (assert (= t__split_fields9 t__split_fields7))

(assert
;; WP_parameter_def
 ;; File "lexer.ads", line 65, characters 0-0
  (not (< temp___7801 current_idx4)))
(check-sat)
