;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 8)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun to_int2 ((_ BitVec 16)) Int)

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes ((t__ref1 0))
(((mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort tdigit_count_typeB 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (tdigit_count_typeB tdigit_count_typeB) Bool)

(declare-const dummy tdigit_count_typeB)

(declare-datatypes ((tdigit_count_typeB__ref 0))
(((mk_tdigit_count_typeB__ref
  (tdigit_count_typeB__content tdigit_count_typeB)))))
(define-fun tdigit_count_typeB__ref___projection ((a tdigit_count_typeB__ref)) tdigit_count_typeB
  (tdigit_count_typeB__content a))

(declare-sort digit_index_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 65536)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (digit_index_type digit_index_type) Bool)

(declare-const dummy1 digit_index_type)

(declare-datatypes ((digit_index_type__ref 0))
(((mk_digit_index_type__ref (digit_index_type__content digit_index_type)))))
(define-fun digit_index_type__ref___projection ((a digit_index_type__ref)) digit_index_type
  (digit_index_type__content a))

(define-fun dynamic_invariant ((temp___expr_204 Int)
  (temp___is_init_201 Bool) (temp___skip_constant_202 Bool)
  (temp___do_toplevel_203 Bool)) Bool (=>
                                      (or (= temp___is_init_201 true)
                                      (<= 1 65536)) (in_range2
                                      temp___expr_204)))

(declare-fun to_rep (digit_index_type) Int)

(declare-fun of_rep (Int) digit_index_type)

;; inversion_axiom
  (assert
  (forall ((x digit_index_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x digit_index_type)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort octet 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (octet octet) Bool)

(declare-const dummy2 octet)

(declare-datatypes ((octet__ref 0))
(((mk_octet__ref (octet__content octet)))))
(define-fun octet__ref___projection ((a octet__ref)) octet (octet__content a))

(declare-fun to_rep1 (octet) (_ BitVec 8))

(declare-fun of_rep1 ((_ BitVec 8)) octet)

;; inversion_axiom
  (assert
  (forall ((x octet))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x octet)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x octet)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int octet))))))
(declare-fun slide ((Array Int octet) Int Int) (Array Int octet))

;; slide_eq
  (assert
  (forall ((a (Array Int octet)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int octet)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int octet) Int Int (Array Int octet) Int
  Int) (Array Int octet))

;; concat_def
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (octet Int) (Array Int octet))

;; singleton_def
  (assert
  (forall ((v octet))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int octet)) (a__first Int) (a__last Int)
  (b (Array Int octet)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int octet) Int Int (Array Int octet) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep2 (tdigit_count_typeB) Int)

(declare-fun of_rep2 (Int) tdigit_count_typeB)

;; inversion_axiom
  (assert
  (forall ((x tdigit_count_typeB))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x tdigit_count_typeB)) (! (in_range1
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (tdigit_count_typeB tdigit_count_typeB) Bool)

(declare-const dummy3 tdigit_count_typeB)

(declare-datatypes ((t17s__ref 0))
(((mk_t17s__ref (t17s__content tdigit_count_typeB)))))
(define-fun t17s__ref___projection ((a t17s__ref)) tdigit_count_typeB
  (t17s__content a))

(declare-sort t 0)

(declare-fun first (t) tdigit_count_typeB)

(declare-fun last (t) tdigit_count_typeB)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-datatypes ((us_t 0)) (((mk___t (elts (Array Int octet))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int octet) (elts a))

(define-fun of_array ((a (Array Int octet)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int octet)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int octet)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int octet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int octet))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((t18s__ref 0)) (((mk_t18s__ref (t18s__content us_t)))))
(define-fun t18s__ref___projection ((a t18s__ref)) us_t (t18s__content a))

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__very_longs__very_long__length digit_index_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) digit_index_type
  (rec__very_longs__very_long__length a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__very_longs__very_long__long_digits us_t)))))
(define-fun us_split_fields_Long_Digits__projection ((a us_split_fields)) us_t
  (rec__very_longs__very_long__long_digits a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__very_longs__very_long__length
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__very_longs__very_long__length
                                                  (us_split_discrs1 b))))
                        (= (bool_eq1
                           (rec__very_longs__very_long__long_digits
                           (us_split_fields1 a))
                           (rec__very_longs__very_long__long_digits
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const very_longs__very_long__length__first__bit Int)

(declare-const very_longs__very_long__length__last__bit Int)

(declare-const very_longs__very_long__length__position Int)

;; very_longs__very_long__length__first__bit_axiom
  (assert (<= 0 very_longs__very_long__length__first__bit))

;; very_longs__very_long__length__last__bit_axiom
  (assert
  (< very_longs__very_long__length__first__bit very_longs__very_long__length__last__bit))

;; very_longs__very_long__length__position_axiom
  (assert (<= 0 very_longs__very_long__length__position))

(declare-const very_longs__very_long__long_digits__first__bit Int)

(declare-const very_longs__very_long__long_digits__last__bit Int)

(declare-const very_longs__very_long__long_digits__position Int)

;; very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 very_longs__very_long__long_digits__first__bit))

;; very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< very_longs__very_long__long_digits__first__bit very_longs__very_long__long_digits__last__bit))

;; very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 very_longs__very_long__long_digits__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((very_long__ref 0))
(((mk_very_long__ref (very_long__content us_rep)))))
(define-fun very_long__ref___projection ((a very_long__ref)) us_rep (very_long__content
                                                                    a))

(define-fun dynamic_invariant1 ((temp___expr_221 us_rep)
  (temp___is_init_218 Bool) (temp___skip_constant_219 Bool)
  (temp___do_toplevel_220 Bool)) Bool (let ((temp___222 (rec__very_longs__very_long__length
                                                        (us_split_discrs1
                                                        temp___expr_221))))
                                      (and (dynamic_property1 1
                                      (to_rep temp___222)
                                      (first1
                                      (rec__very_longs__very_long__long_digits
                                      (us_split_fields1 temp___expr_221)))
                                      (last1
                                      (rec__very_longs__very_long__long_digits
                                      (us_split_fields1 temp___expr_221))))
                                      (and
                                      (= (first1
                                         (rec__very_longs__very_long__long_digits
                                         (us_split_fields1 temp___expr_221))) 1)
                                      (= (last1
                                         (rec__very_longs__very_long__long_digits
                                         (us_split_fields1 temp___expr_221)))
                                      (to_rep temp___222))))))

(declare-const dividend us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const divisor us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort double_octet 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))

(declare-fun user_eq6 (double_octet double_octet) Bool)

(declare-const dummy6 double_octet)

(declare-datatypes ((double_octet__ref 0))
(((mk_double_octet__ref (double_octet__content double_octet)))))
(define-fun double_octet__ref___projection ((a double_octet__ref)) double_octet
  (double_octet__content a))

(define-fun dynamic_invariant2 ((temp___expr_312 (_ BitVec 16))
  (temp___is_init_309 Bool) (temp___skip_constant_310 Bool)
  (temp___do_toplevel_311 Bool)) Bool true)

(declare-const last2 Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (tdigit_count_typeB tdigit_count_typeB) Bool)

(declare-const dummy7 tdigit_count_typeB)

(declare-datatypes ((divisor_digits_count_type__ref 0))
(((mk_divisor_digits_count_type__ref
  (divisor_digits_count_type__content tdigit_count_typeB)))))
(define-fun divisor_digits_count_type__ref___projection ((a divisor_digits_count_type__ref)) tdigit_count_typeB
  (divisor_digits_count_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_690 Int)
  (temp___is_init_687 Bool) (temp___skip_constant_688 Bool)
  (temp___do_toplevel_689 Bool)) Bool (=>
                                      (or (= temp___is_init_687 true)
                                      (<= 1 last2)) (dynamic_property2 1
                                      last2 temp___expr_690)))

;; last__def_axiom
  (assert
  (= last2 (to_rep
           (rec__very_longs__very_long__length (us_split_discrs1 divisor)))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (tdigit_count_typeB tdigit_count_typeB) Bool)

(declare-const dummy8 tdigit_count_typeB)

(declare-datatypes ((tT108bP1__ref 0))
(((mk_tT108bP1__ref (tT108bP1__content tdigit_count_typeB)))))
(define-fun tT108bP1__ref___projection ((a tT108bP1__ref)) tdigit_count_typeB
  (tT108bP1__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) tdigit_count_typeB)

(declare-fun last3 (t1) tdigit_count_typeB)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep2 (first2 (mk1 f l))) f)
     (= (to_rep2 (last3 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((mk___t1 (elts1 (Array Int octet))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int octet) (elts1 a))

(define-fun of_array1 ((a (Array Int octet)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep2 (first2 (rt1 a))))

(define-fun last4 ((a us_t1)) Int (to_rep2 (last3 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last4 a))
                                    (+ (- (last4 a) (first3 a)) 1) 0))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int octet)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int octet)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int octet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int octet))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep2 (first2 (rt1 x)))
                  (to_rep2 (last3 (rt1 x))) (elts1 y)
                  (to_rep2 (first2 (rt1 y))) (to_rep2 (last3 (rt1 y)))))

(declare-fun user_eq9 (us_t1 us_t1) Bool)

(declare-const dummy9 us_t1)

(declare-datatypes ((t108b__ref 0))
(((mk_t108b__ref (t108b__content us_t1)))))
(define-fun t108b__ref___projection ((a t108b__ref)) us_t1 (t108b__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__very_longs__very_long__long_digits1 us_t1)))))
(define-fun us_split_fields_Long_Digits__30__projection ((a us_split_fields2)) us_t1
  (rec__very_longs__very_long__long_digits1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___30__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1
  (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___59__projection ((a us_rep1)) us_split_discrs (us_split_discrs2
                                                                  a))

(define-fun us_rep___60__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                   a))

(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a)
                                         (mk___split_fields
                                         (let ((temp___190 (rec__very_longs__very_long__long_digits1
                                                           (us_split_fields3
                                                           a))))
                                         (of_array (to_array1 temp___190)
                                         (first3 temp___190)
                                         (last4 temp___190))))))

(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r)
                                         (mk___split_fields1
                                         (let ((temp___189 (rec__very_longs__very_long__long_digits
                                                           (us_split_fields1
                                                           r))))
                                         (of_array1 (to_array temp___189)
                                         (first1 temp___189)
                                         (last1 temp___189))))))

(define-fun bool_eq4 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__very_longs__very_long__length
                            (us_split_discrs2 a))) (to_rep
                                                   (rec__very_longs__very_long__length
                                                   (us_split_discrs2 b))))
                         (= (bool_eq3
                            (rec__very_longs__very_long__long_digits1
                            (us_split_fields3 a))
                            (rec__very_longs__very_long__long_digits1
                            (us_split_fields3 b))) true))
                    true false))

(define-fun in_range3 ((rec__very_longs__very_long__length1 Int)
  (a us_rep)) Bool (= rec__very_longs__very_long__length1 (to_rep
                                                          (rec__very_longs__very_long__length
                                                          (us_split_discrs1
                                                          a)))))

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-const very_longs__very_long__length__first__bit1 Int)

(declare-const very_longs__very_long__length__last__bit1 Int)

(declare-const very_longs__very_long__length__position1 Int)

;; very_longs__very_long__length__first__bit_axiom
  (assert (<= 0 very_longs__very_long__length__first__bit1))

;; very_longs__very_long__length__last__bit_axiom
  (assert
  (< very_longs__very_long__length__first__bit1 very_longs__very_long__length__last__bit1))

;; very_longs__very_long__length__position_axiom
  (assert (<= 0 very_longs__very_long__length__position1))

(declare-const very_longs__very_long__long_digits__first__bit1 Int)

(declare-const very_longs__very_long__long_digits__last__bit1 Int)

(declare-const very_longs__very_long__long_digits__position1 Int)

;; very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 very_longs__very_long__long_digits__first__bit1))

;; very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< very_longs__very_long__long_digits__first__bit1 very_longs__very_long__long_digits__last__bit1))

;; very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 very_longs__very_long__long_digits__position1))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-const dummy10 us_rep1)

(declare-datatypes ((tuS__ref 0)) (((mk_tuS__ref (tuS__content us_rep1)))))
(define-fun tuS__ref___projection ((a tuS__ref)) us_rep1 (tuS__content a))

(define-fun dynamic_invariant4 ((temp___expr_708 us_rep1)
  (temp___is_init_705 Bool) (temp___skip_constant_706 Bool)
  (temp___do_toplevel_707 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_706 true))
                                      (in_range3
                                      (+ (to_rep
                                         (rec__very_longs__very_long__length
                                         (us_split_discrs1 dividend))) 1)
                                      (to_base temp___expr_708)))
                                      (and (dynamic_property4 1
                                      (+ (to_rep
                                         (rec__very_longs__very_long__length
                                         (us_split_discrs1 dividend))) 1)
                                      (first3
                                      (rec__very_longs__very_long__long_digits1
                                      (us_split_fields3 temp___expr_708)))
                                      (last4
                                      (rec__very_longs__very_long__long_digits1
                                      (us_split_fields3 temp___expr_708))))
                                      (and
                                      (= (first3
                                         (rec__very_longs__very_long__long_digits1
                                         (us_split_fields3 temp___expr_708))) 1)
                                      (= (last4
                                         (rec__very_longs__very_long__long_digits1
                                         (us_split_fields3 temp___expr_708))) (+
                                      (to_rep
                                      (rec__very_longs__very_long__length
                                      (us_split_discrs1 dividend))) 1))))))

(define-fun default_initial_assumption ((temp___expr_711 us_rep1)
  (temp___skip_top_level_712 Bool)) Bool (= (to_rep
                                            (rec__very_longs__very_long__length
                                            (us_split_discrs2
                                            temp___expr_711))) (+ (to_rep
                                                                  (rec__very_longs__very_long__length
                                                                  (us_split_discrs1
                                                                  dividend))) 1)))

(declare-const u__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (tdigit_count_typeB tdigit_count_typeB) Bool)

(declare-const dummy11 tdigit_count_typeB)

(declare-datatypes ((tT109bP1__ref 0))
(((mk_tT109bP1__ref (tT109bP1__content tdigit_count_typeB)))))
(define-fun tT109bP1__ref___projection ((a tT109bP1__ref)) tdigit_count_typeB
  (tT109bP1__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) tdigit_count_typeB)

(declare-fun last5 (t2) tdigit_count_typeB)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep2 (first4 (mk2 f l))) f)
     (= (to_rep2 (last5 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property5 range_first range_last low)
                   (dynamic_property5 range_first range_last high))))))

(declare-datatypes ((us_t2 0))
(((mk___t2 (elts2 (Array Int octet))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int octet) (elts2 a))

(define-fun of_array2 ((a (Array Int octet)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep2 (first4 (rt2 a))))

(define-fun last6 ((a us_t2)) Int (to_rep2 (last5 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last6 a))
                                    (+ (- (last6 a) (first5 a)) 1) 0))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int octet)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int octet)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int octet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int octet))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq5 ((x us_t2)
  (y us_t2)) Bool (bool_eq (elts2 x) (to_rep2 (first4 (rt2 x)))
                  (to_rep2 (last5 (rt2 x))) (elts2 y)
                  (to_rep2 (first4 (rt2 y))) (to_rep2 (last5 (rt2 y)))))

(declare-fun user_eq12 (us_t2 us_t2) Bool)

(declare-const dummy12 us_t2)

(declare-datatypes ((t109b__ref 0))
(((mk_t109b__ref (t109b__content us_t2)))))
(define-fun t109b__ref___projection ((a t109b__ref)) us_t2 (t109b__content a))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2 (rec__very_longs__very_long__long_digits2 us_t2)))))
(define-fun us_split_fields_Long_Digits__31__projection ((a us_split_fields4)) us_t2
  (rec__very_longs__very_long__long_digits2 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___31__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2
  (us_split_discrs3 us_split_discrs)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___61__projection ((a us_rep2)) us_split_discrs (us_split_discrs3
                                                                  a))

(define-fun us_rep___62__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                   a))

(define-fun to_base1 ((a us_rep2)) us_rep (mk___rep (us_split_discrs3 a)
                                          (mk___split_fields
                                          (let ((temp___192 (rec__very_longs__very_long__long_digits2
                                                            (us_split_fields5
                                                            a))))
                                          (of_array (to_array2 temp___192)
                                          (first5 temp___192)
                                          (last6 temp___192))))))

(define-fun of_base1 ((r us_rep)) us_rep2 (mk___rep2 (us_split_discrs1 r)
                                          (mk___split_fields2
                                          (let ((temp___191 (rec__very_longs__very_long__long_digits
                                                            (us_split_fields1
                                                            r))))
                                          (of_array2 (to_array temp___191)
                                          (first1 temp___191)
                                          (last1 temp___191))))))

(define-fun bool_eq6 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep
                            (rec__very_longs__very_long__length
                            (us_split_discrs3 a))) (to_rep
                                                   (rec__very_longs__very_long__length
                                                   (us_split_discrs3 b))))
                         (= (bool_eq5
                            (rec__very_longs__very_long__long_digits2
                            (us_split_fields5 a))
                            (rec__very_longs__very_long__long_digits2
                            (us_split_fields5 b))) true))
                    true false))

(define-fun in_range4 ((rec__very_longs__very_long__length1 Int)
  (a us_rep)) Bool (= rec__very_longs__very_long__length1 (to_rep
                                                          (rec__very_longs__very_long__length
                                                          (us_split_discrs1
                                                          a)))))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-const very_longs__very_long__length__first__bit2 Int)

(declare-const very_longs__very_long__length__last__bit2 Int)

(declare-const very_longs__very_long__length__position2 Int)

;; very_longs__very_long__length__first__bit_axiom
  (assert (<= 0 very_longs__very_long__length__first__bit2))

;; very_longs__very_long__length__last__bit_axiom
  (assert
  (< very_longs__very_long__length__first__bit2 very_longs__very_long__length__last__bit2))

;; very_longs__very_long__length__position_axiom
  (assert (<= 0 very_longs__very_long__length__position2))

(declare-const very_longs__very_long__long_digits__first__bit2 Int)

(declare-const very_longs__very_long__long_digits__last__bit2 Int)

(declare-const very_longs__very_long__long_digits__position2 Int)

;; very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 very_longs__very_long__long_digits__first__bit2))

;; very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< very_longs__very_long__long_digits__first__bit2 very_longs__very_long__long_digits__last__bit2))

;; very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 very_longs__very_long__long_digits__position2))

(declare-fun user_eq13 (us_rep2 us_rep2) Bool)

(declare-const dummy13 us_rep2)

(declare-datatypes ((tvS__ref 0)) (((mk_tvS__ref (tvS__content us_rep2)))))
(define-fun tvS__ref___projection ((a tvS__ref)) us_rep2 (tvS__content a))

(define-fun dynamic_invariant5 ((temp___expr_720 us_rep2)
  (temp___is_init_717 Bool) (temp___skip_constant_718 Bool)
  (temp___do_toplevel_719 Bool)) Bool (and
                                      (=>
                                      (not (= temp___skip_constant_718 true))
                                      (in_range4
                                      (to_rep
                                      (rec__very_longs__very_long__length
                                      (us_split_discrs1 divisor)))
                                      (to_base1 temp___expr_720)))
                                      (and (dynamic_property6 1
                                      (to_rep
                                      (rec__very_longs__very_long__length
                                      (us_split_discrs1 divisor)))
                                      (first5
                                      (rec__very_longs__very_long__long_digits2
                                      (us_split_fields5 temp___expr_720)))
                                      (last6
                                      (rec__very_longs__very_long__long_digits2
                                      (us_split_fields5 temp___expr_720))))
                                      (and
                                      (= (first5
                                         (rec__very_longs__very_long__long_digits2
                                         (us_split_fields5 temp___expr_720))) 1)
                                      (= (last6
                                         (rec__very_longs__very_long__long_digits2
                                         (us_split_fields5 temp___expr_720)))
                                      (to_rep
                                      (rec__very_longs__very_long__length
                                      (us_split_discrs1 divisor))))))))

(define-fun default_initial_assumption1 ((temp___expr_723 us_rep2)
  (temp___skip_top_level_724 Bool)) Bool (= (to_rep
                                            (rec__very_longs__very_long__length
                                            (us_split_discrs3
                                            temp___expr_723))) (to_rep
                                                               (rec__very_longs__very_long__length
                                                               (us_split_discrs1
                                                               divisor)))))

(declare-const v__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const j Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(define-fun dynamic_invariant6 ((temp___expr_210 (_ BitVec 8))
  (temp___is_init_207 Bool) (temp___skip_constant_208 Bool)
  (temp___do_toplevel_209 Bool)) Bool true)

(declare-const n Int)

(declare-const u__split_fields (Array Int octet))

(declare-const u__split_fields1 t1)

(declare-const v__split_fields (Array Int octet))

(declare-const v__split_fields1 t2)

(declare-const q_hat (_ BitVec 16))

(declare-const temporary_digit (_ BitVec 16))

(declare-const r_hat (_ BitVec 16))

(declare-const o Int)

(declare-const temp___1245 Int)

(declare-const o1 Int)

(declare-const o2 octet)

(declare-const o3 (_ BitVec 8))

(declare-const o4 (_ BitVec 16))

(declare-const o5 Int)

(declare-const temp___1247 Int)

(declare-const o6 Int)

(declare-const o7 octet)

(declare-const o8 (_ BitVec 8))

(declare-const o9 (_ BitVec 16))

(declare-const o10 (_ BitVec 16))

(declare-const o11 (_ BitVec 16))

(declare-const o12 Int)

(declare-const o13 octet)

(declare-const o14 (_ BitVec 8))

(declare-const o15 (_ BitVec 16))

(declare-const o16 (_ BitVec 16))

(declare-const o17 Int)

(declare-const o18 octet)

(declare-const o19 (_ BitVec 8))

(declare-const o20 (_ BitVec 16))

(declare-const o21 (_ BitVec 16))

(declare-const o22 Int)

(declare-const o23 octet)

(declare-const o24 (_ BitVec 8))

(declare-const o25 (_ BitVec 16))

(declare-const o26 Int)

(declare-const temp___1253 Int)

(declare-const o27 Int)

(declare-const o28 octet)

(declare-const o29 (_ BitVec 8))

(declare-const o30 (_ BitVec 16))

(declare-const o31 (_ BitVec 16))

(declare-const o32 (_ BitVec 16))

(declare-const o33 Bool)

(declare-const o34 Int)

(declare-const o35 octet)

(declare-const o36 (_ BitVec 8))

(declare-const o37 (_ BitVec 16))

(declare-const o38 (_ BitVec 16))

(declare-const o39 Int)

(declare-const temp___1258 Int)

(declare-const o40 Int)

(declare-const o41 octet)

(declare-const o42 (_ BitVec 8))

(declare-const o43 (_ BitVec 16))

(declare-const o44 (_ BitVec 16))

(declare-const result (_ BitVec 16))

(declare-const temporary_digit1 (_ BitVec 16))

(declare-const result1 (_ BitVec 16))

(declare-const q_hat1 (_ BitVec 16))

(declare-const result2 (_ BitVec 16))

(declare-const r_hat1 (_ BitVec 16))

(declare-const result3 Bool)

(declare-const result4 (_ BitVec 16))

(declare-const q_hat2 (_ BitVec 16))

(declare-const result5 (_ BitVec 16))

(declare-const r_hat2 (_ BitVec 16))

;; H
  (assert (dynamic_invariant1 dividend true false true))

;; H
  (assert (dynamic_invariant1 divisor true false true))

;; H
  (assert (dynamic_property2 1 last2 n))

;; H
  (assert (dynamic_invariant4
  (mk___rep1 u__split_discrs
  (mk___split_fields1 (mk___t1 u__split_fields u__split_fields1))) true false
  true))

;; H
  (assert (dynamic_invariant5
  (mk___rep2 v__split_discrs
  (mk___split_fields2 (mk___t2 v__split_fields v__split_fields1))) true false
  true))

;; H
  (assert true)

;; H
  (assert (in_range2 j))

;; H
  (assert
  (and (< 1 n)
  (<= (+ j n) (to_rep (rec__very_longs__very_long__length u__split_discrs)))))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert (and (= o5 (+ j n)) (in_range1 (+ j n))))

;; H
  (assert (= temp___1247 (- o5 1)))

;; H
  (assert
  (and (<= (to_rep2 (first2 u__split_fields1)) temp___1247)
  (<= temp___1247 (to_rep2 (last3 u__split_fields1)))))

;; H
  (assert (= o6 temp___1247))

;; H
  (assert (= o7 (select u__split_fields o6)))

;; H
  (assert (= o8 (to_rep1 o7)))

;; H
  (assert (= o9 ((_ zero_extend 8) o8)))

;; H
  (assert (and (= temp___1245 (+ j n)) (in_range1 (+ j n))))

(assert
;; WP_parameter_def
 ;; File "very_longs.adb", line 420, characters 0-0
  (not (<= (to_rep2 (first2 u__split_fields1)) temp___1245)))
(check-sat)
(exit)
