;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort my_int 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (my_int my_int) Bool)

(declare-const dummy my_int)

(declare-datatypes ()
((my_int__ref (mk_my_int__ref (my_int__content my_int)))))
(define-fun my_int__ref___projection ((a my_int__ref)) my_int (my_int__content
                                                              a))

(declare-fun to_rep (my_int) Int)

(declare-fun of_rep (Int) my_int)

;; inversion_axiom
  (assert
  (forall ((x my_int)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x my_int)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__test_equal__my_int_mod__content my_int)))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) my_int
  (rec__test_equal__my_int_mod__content a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__test_equal__my_int_mod__content
                           (us_split_fields1 a))) (to_rep
                                                  (rec__test_equal__my_int_mod__content
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const test_equal__my_int_mod__content__first__bit Int)

(declare-const test_equal__my_int_mod__content__last__bit Int)

(declare-const test_equal__my_int_mod__content__position Int)

;; test_equal__my_int_mod__content__first__bit_axiom
  (assert (<= 0 test_equal__my_int_mod__content__first__bit))

;; test_equal__my_int_mod__content__last__bit_axiom
  (assert
  (< test_equal__my_int_mod__content__first__bit test_equal__my_int_mod__content__last__bit))

;; test_equal__my_int_mod__content__position_axiom
  (assert (<= 0 test_equal__my_int_mod__content__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((my_int_mod__ref (mk_my_int_mod__ref (my_int_mod__content us_rep)))))
(define-fun my_int_mod__ref___projection ((a my_int_mod__ref)) us_rep
  (my_int_mod__content a))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__test_equal__my_rec__content us_rep)))))
(define-fun us_split_fields_Content__2__projection ((a us_split_fields2)) us_rep
  (rec__test_equal__my_rec__content a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (user_eq1
                            (rec__test_equal__my_rec__content
                            (us_split_fields3 a))
                            (rec__test_equal__my_rec__content
                            (us_split_fields3 b))) true)
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const test_equal__my_rec__content__first__bit Int)

(declare-const test_equal__my_rec__content__last__bit Int)

(declare-const test_equal__my_rec__content__position Int)

;; test_equal__my_rec__content__first__bit_axiom
  (assert (<= 0 test_equal__my_rec__content__first__bit))

;; test_equal__my_rec__content__last__bit_axiom
  (assert
  (< test_equal__my_rec__content__first__bit test_equal__my_rec__content__last__bit))

;; test_equal__my_rec__content__position_axiom
  (assert (<= 0 test_equal__my_rec__content__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ()
((my_rec__ref (mk_my_rec__ref (my_rec__content us_rep1)))))
(define-fun my_rec__ref___projection ((a my_rec__ref)) us_rep1 (my_rec__content
                                                               a))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x us_rep) (y us_rep))
  (! (= (= (oeq x y) true)
     (or
     (= (to_rep (rec__test_equal__my_int_mod__content (us_split_fields1 x)))
     (to_rep (rec__test_equal__my_int_mod__content (us_split_fields1 y))))
     (ite (< (to_rep
             (rec__test_equal__my_int_mod__content (us_split_fields1 x)))
     (to_rep (rec__test_equal__my_int_mod__content (us_split_fields1 y))))
     (= (- (to_rep
           (rec__test_equal__my_int_mod__content (us_split_fields1 y)))
     (to_rep (rec__test_equal__my_int_mod__content (us_split_fields1 x)))) 4)
     (= (- (to_rep
           (rec__test_equal__my_int_mod__content (us_split_fields1 x)))
     (to_rep (rec__test_equal__my_int_mod__content (us_split_fields1 y)))) 4)))) :pattern (
  (oeq x y)) )))

(declare-const content_x us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const content_y us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const x us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const y us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant ((temp___expr_171 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)) Bool (=>
                                      (or (= temp___is_init_168 true)
                                      (<= 0 7)) (in_range temp___expr_171)))

;; content_x__def_axiom
  (assert (= content_x (mk___rep (mk___split_fields (of_rep 1)))))

;; content_y__def_axiom
  (assert (= content_y (mk___rep (mk___split_fields (of_rep 5)))))

;; x__def_axiom
  (assert (= x (mk___rep1 (mk___split_fields1 content_x))))

;; y__def_axiom
  (assert (= y (mk___rep1 (mk___split_fields1 content_y))))

(declare-const o my_int)

(declare-const o1 my_int)

(declare-const test_equal__content_x__assume my_int)

(declare-const o2 my_int)

(declare-const o3 my_int)

(declare-const test_equal__content_y__assume my_int)

;; H
  (assert (= (to_rep o) 1))

;; H
  (assert (= o o1))

;; H
  (assert (= test_equal__content_x__assume o1))

;; H
  (assert
  (= (mk___rep (mk___split_fields test_equal__content_x__assume)) content_x))

;; H
  (assert (= (to_rep o2) 5))

;; H
  (assert (= o2 o3))

;; H
  (assert (= test_equal__content_y__assume o3))

;; H
  (assert
  (= (mk___rep (mk___split_fields test_equal__content_y__assume)) content_y))

;; H
  (assert (= (mk___rep1 (mk___split_fields1 content_x)) x))

;; H
  (assert (= (mk___rep1 (mk___split_fields1 content_y)) y))

;; H
  (assert (= (oeq content_x content_y) true))

(assert
;; WP_parameter_def
 ;; File "test_equal.adb", line 14, characters 0-0
  (not (not (= (bool_eq1 x y) true))))
(check-sat)
(exit)
