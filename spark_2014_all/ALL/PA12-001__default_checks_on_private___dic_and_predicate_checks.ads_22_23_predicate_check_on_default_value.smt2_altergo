(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__dic_and_predicate_checks__r__f : integer;
rec__dic_and_predicate_checks__r__g : integer
}

function us_split_fields_F__projection(a: us_split_fields) : integer =
  (a).rec__dic_and_predicate_checks__r__f

function us_split_fields_G__projection(a: us_split_fields) : integer =
  (a).rec__dic_and_predicate_checks__r__g

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq2 : us_rep, us_rep -> bool

axiom bool_eq_def1 :
  (forall a:us_rep. forall b:us_rep [bool_eq2(a, b)].
  ((((to_rep(((a).us_split_fields1).rec__dic_and_predicate_checks__r__f) = to_rep(((b).us_split_fields1).rec__dic_and_predicate_checks__r__f)) and
  (to_rep(((a).us_split_fields1).rec__dic_and_predicate_checks__r__g) = to_rep(((b).us_split_fields1).rec__dic_and_predicate_checks__r__g))) ->
  (bool_eq2(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields1).rec__dic_and_predicate_checks__r__f) = to_rep(((b).us_split_fields1).rec__dic_and_predicate_checks__r__f)) and
  (to_rep(((a).us_split_fields1).rec__dic_and_predicate_checks__r__g) = to_rep(((b).us_split_fields1).rec__dic_and_predicate_checks__r__g)))) ->
  (bool_eq2(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__size({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = a;
  rec__dic_and_predicate_checks__r__g = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:integer. forall a1:integer. (0 <= object__alignment({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = a;
  rec__dic_and_predicate_checks__r__g = a1 } })))

logic dic_and_predicate_checks__r__f__first__bit : int

logic dic_and_predicate_checks__r__f__last__bit : int

logic dic_and_predicate_checks__r__f__position : int

axiom dic_and_predicate_checks__r__f__first__bit_axiom :
  (0 <= dic_and_predicate_checks__r__f__first__bit)

axiom dic_and_predicate_checks__r__f__last__bit_axiom :
  (dic_and_predicate_checks__r__f__first__bit <  dic_and_predicate_checks__r__f__last__bit)

axiom dic_and_predicate_checks__r__f__position_axiom :
  (0 <= dic_and_predicate_checks__r__f__position)

logic dic_and_predicate_checks__r__g__first__bit : int

logic dic_and_predicate_checks__r__g__last__bit : int

logic dic_and_predicate_checks__r__g__position : int

axiom dic_and_predicate_checks__r__g__first__bit_axiom :
  (0 <= dic_and_predicate_checks__r__g__first__bit)

axiom dic_and_predicate_checks__r__g__last__bit_axiom :
  (dic_and_predicate_checks__r__g__first__bit <  dic_and_predicate_checks__r__g__last__bit)

axiom dic_and_predicate_checks__r__g__position_axiom :
  (0 <= dic_and_predicate_checks__r__g__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : integer

logic dummy2 : integer

type t__ref = { t__content : us_rep
}

function t__ref___projection(a: t__ref) : us_rep = (a).t__content

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:integer. forall a1:integer. (0 <= object__size1({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = a;
  rec__dic_and_predicate_checks__r__g = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:integer. forall a1:integer. (0 <= object__alignment1({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = a;
  rec__dic_and_predicate_checks__r__g = a1 } })))

logic dic_and_predicate_checks__r__f__first__bit1 : int

logic dic_and_predicate_checks__r__f__last__bit1 : int

logic dic_and_predicate_checks__r__f__position1 : int

axiom dic_and_predicate_checks__r__f__first__bit_axiom1 :
  (0 <= dic_and_predicate_checks__r__f__first__bit1)

axiom dic_and_predicate_checks__r__f__last__bit_axiom1 :
  (dic_and_predicate_checks__r__f__first__bit1 <  dic_and_predicate_checks__r__f__last__bit1)

axiom dic_and_predicate_checks__r__f__position_axiom1 :
  (0 <= dic_and_predicate_checks__r__f__position1)

logic dic_and_predicate_checks__r__g__first__bit1 : int

logic dic_and_predicate_checks__r__g__last__bit1 : int

logic dic_and_predicate_checks__r__g__position1 : int

axiom dic_and_predicate_checks__r__g__first__bit_axiom1 :
  (0 <= dic_and_predicate_checks__r__g__first__bit1)

axiom dic_and_predicate_checks__r__g__last__bit_axiom1 :
  (dic_and_predicate_checks__r__g__first__bit1 <  dic_and_predicate_checks__r__g__last__bit1)

axiom dic_and_predicate_checks__r__g__position_axiom1 :
  (0 <= dic_and_predicate_checks__r__g__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy3 : integer

logic dummy4 : integer

type r__ref = { r__content : us_rep
}

function r__ref___projection(a: r__ref) : us_rep = (a).r__content

logic is_valid : us_rep -> bool

logic is_valid__function_guard : bool, us_rep -> prop

logic is_valid1 : us_rep -> bool

logic is_valid__function_guard1 : bool, us_rep -> prop

type us_split_fields2 = { rec__dic_and_predicate_checks__nested_2__r__f :
integer
}

function us_split_fields_F2__projection(a: us_split_fields2) : integer =
  (a).rec__dic_and_predicate_checks__nested_2__r__f

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep_2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq3 : us_rep1, us_rep1 -> bool

axiom bool_eq_def2 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq3(a, b)].
  (((to_rep(((a).us_split_fields3).rec__dic_and_predicate_checks__nested_2__r__f) = to_rep(((b).us_split_fields3).rec__dic_and_predicate_checks__nested_2__r__f)) ->
  (bool_eq3(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__dic_and_predicate_checks__nested_2__r__f) = to_rep(((b).us_split_fields3).rec__dic_and_predicate_checks__nested_2__r__f))) ->
  (bool_eq3(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:integer. (0 <= object__size2({ us_split_fields3 = {
  rec__dic_and_predicate_checks__nested_2__r__f = a } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:integer. (0 <= object__alignment2({ us_split_fields3 = {
  rec__dic_and_predicate_checks__nested_2__r__f = a } })))

logic dic_and_predicate_checks__nested_2__r__f__first__bit : int

logic dic_and_predicate_checks__nested_2__r__f__last__bit : int

logic dic_and_predicate_checks__nested_2__r__f__position : int

axiom dic_and_predicate_checks__nested_2__r__f__first__bit_axiom :
  (0 <= dic_and_predicate_checks__nested_2__r__f__first__bit)

axiom dic_and_predicate_checks__nested_2__r__f__last__bit_axiom :
  (dic_and_predicate_checks__nested_2__r__f__first__bit <  dic_and_predicate_checks__nested_2__r__f__last__bit)

axiom dic_and_predicate_checks__nested_2__r__f__position_axiom :
  (0 <= dic_and_predicate_checks__nested_2__r__f__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy5 : integer

type t__ref1 = { t__content1 : us_rep1
}

function t__ref_2__projection(a: t__ref1) : us_rep1 = (a).t__content1

logic value__size3 : int

logic object__size3 : us_rep1 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep1 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:integer. (0 <= object__size3({ us_split_fields3 = {
  rec__dic_and_predicate_checks__nested_2__r__f = a } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:integer. (0 <= object__alignment3({ us_split_fields3 = {
  rec__dic_and_predicate_checks__nested_2__r__f = a } })))

logic dic_and_predicate_checks__nested_2__r__f__first__bit1 : int

logic dic_and_predicate_checks__nested_2__r__f__last__bit1 : int

logic dic_and_predicate_checks__nested_2__r__f__position1 : int

axiom dic_and_predicate_checks__nested_2__r__f__first__bit_axiom1 :
  (0 <= dic_and_predicate_checks__nested_2__r__f__first__bit1)

axiom dic_and_predicate_checks__nested_2__r__f__last__bit_axiom1 :
  (dic_and_predicate_checks__nested_2__r__f__first__bit1 <  dic_and_predicate_checks__nested_2__r__f__last__bit1)

axiom dic_and_predicate_checks__nested_2__r__f__position_axiom1 :
  (0 <= dic_and_predicate_checks__nested_2__r__f__position1)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy6 : integer

type r__ref1 = { r__content1 : us_rep1
}

function r__ref_2__projection(a: r__ref1) : us_rep1 = (a).r__content1

logic is_valid2 : us_rep1 -> bool

logic is_valid__function_guard2 : bool, us_rep1 -> prop

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:integer. forall a1:integer. (0 <= object__size4({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = a;
  rec__dic_and_predicate_checks__r__g = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:integer. forall a1:integer. (0 <= object__alignment4({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = a;
  rec__dic_and_predicate_checks__r__g = a1 } })))

logic dic_and_predicate_checks__r__f__first__bit2 : int

logic dic_and_predicate_checks__r__f__last__bit2 : int

logic dic_and_predicate_checks__r__f__position2 : int

axiom dic_and_predicate_checks__r__f__first__bit_axiom2 :
  (0 <= dic_and_predicate_checks__r__f__first__bit2)

axiom dic_and_predicate_checks__r__f__last__bit_axiom2 :
  (dic_and_predicate_checks__r__f__first__bit2 <  dic_and_predicate_checks__r__f__last__bit2)

axiom dic_and_predicate_checks__r__f__position_axiom2 :
  (0 <= dic_and_predicate_checks__r__f__position2)

logic dic_and_predicate_checks__r__g__first__bit2 : int

logic dic_and_predicate_checks__r__g__last__bit2 : int

logic dic_and_predicate_checks__r__g__position2 : int

axiom dic_and_predicate_checks__r__g__first__bit_axiom2 :
  (0 <= dic_and_predicate_checks__r__g__first__bit2)

axiom dic_and_predicate_checks__r__g__last__bit_axiom2 :
  (dic_and_predicate_checks__r__g__first__bit2 <  dic_and_predicate_checks__r__g__last__bit2)

axiom dic_and_predicate_checks__r__g__position_axiom2 :
  (0 <= dic_and_predicate_checks__r__g__position2)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy7 : integer

logic dummy8 : integer

type nested_3_t__ref = { nested_3_t__content : us_rep
}

function nested_3_t__ref___projection(a: nested_3_t__ref) : us_rep =
  (a).nested_3_t__content

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:integer. forall a1:integer. (0 <= object__size5({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = a;
  rec__dic_and_predicate_checks__r__g = a1 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:integer. forall a1:integer. (0 <= object__alignment5({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = a;
  rec__dic_and_predicate_checks__r__g = a1 } })))

logic dic_and_predicate_checks__r__f__first__bit3 : int

logic dic_and_predicate_checks__r__f__last__bit3 : int

logic dic_and_predicate_checks__r__f__position3 : int

axiom dic_and_predicate_checks__r__f__first__bit_axiom3 :
  (0 <= dic_and_predicate_checks__r__f__first__bit3)

axiom dic_and_predicate_checks__r__f__last__bit_axiom3 :
  (dic_and_predicate_checks__r__f__first__bit3 <  dic_and_predicate_checks__r__f__last__bit3)

axiom dic_and_predicate_checks__r__f__position_axiom3 :
  (0 <= dic_and_predicate_checks__r__f__position3)

logic dic_and_predicate_checks__r__g__first__bit3 : int

logic dic_and_predicate_checks__r__g__last__bit3 : int

logic dic_and_predicate_checks__r__g__position3 : int

axiom dic_and_predicate_checks__r__g__first__bit_axiom3 :
  (0 <= dic_and_predicate_checks__r__g__first__bit3)

axiom dic_and_predicate_checks__r__g__last__bit_axiom3 :
  (dic_and_predicate_checks__r__g__first__bit3 <  dic_and_predicate_checks__r__g__last__bit3)

axiom dic_and_predicate_checks__r__g__position_axiom3 :
  (0 <= dic_and_predicate_checks__r__g__position3)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy9 : integer

logic dummy10 : integer

type p__ref = { p__content : us_rep
}

function p__ref___projection(a: p__ref) : us_rep = (a).p__content

logic is_valid3 : us_rep -> bool

logic is_valid__function_guard3 : bool, us_rep -> prop

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep2

logic bool_eq4 : us_rep2, us_rep2 -> bool

logic value__size6 : int

logic object__size6 : us_rep2 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep2 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (forall a:us_rep2. (0 <= object__size6(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:us_rep2. (0 <= object__alignment6(a)))

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep2

type t__ref2 = { t__content2 : us_rep2
}

function t__ref_3__projection(a: t__ref2) : us_rep2 = (a).t__content2

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom is_valid__post_axiom : true

axiom is_valid__def_axiom :
  (forall x:integer. forall x1:integer [is_valid({ us_split_fields1 = {
  rec__dic_and_predicate_checks__r__f = x;
  rec__dic_and_predicate_checks__r__g = x1 } })]. ((is_valid({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = x;
  rec__dic_and_predicate_checks__r__g = x1 } }) = true) <->
  (0 <  to_rep(x))))

axiom is_valid__post_axiom1 : true

axiom is_valid__def_axiom1 :
  (forall x:integer. forall x1:integer [is_valid1({ us_split_fields1 = {
  rec__dic_and_predicate_checks__r__f = x;
  rec__dic_and_predicate_checks__r__g = x1 } })]. ((is_valid1({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = x;
  rec__dic_and_predicate_checks__r__g = x1 } }) = true) <-> (is_valid({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = x;
  rec__dic_and_predicate_checks__r__g = x1 } }) = true)))

axiom is_valid__post_axiom2 : true

axiom is_valid__def_axiom2 :
  (forall x:integer [is_valid2({ us_split_fields3 = {
  rec__dic_and_predicate_checks__nested_2__r__f = x } })]. ((is_valid2({
  us_split_fields3 = { rec__dic_and_predicate_checks__nested_2__r__f = x }
  }) = true) <-> (0 <  to_rep(x))))

axiom is_valid__post_axiom3 : true

axiom is_valid__def_axiom3 :
  (forall x:integer. forall x1:integer [is_valid3({ us_split_fields1 = {
  rec__dic_and_predicate_checks__r__f = x;
  rec__dic_and_predicate_checks__r__g = x1 } })]. ((is_valid3({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = x;
  rec__dic_and_predicate_checks__r__g = x1 } }) = true) <-> (is_valid({
  us_split_fields1 = { rec__dic_and_predicate_checks__r__f = x;
  rec__dic_and_predicate_checks__r__g = x1 } }) = true)))

 (* File "dic_and_predicate_checks.ads", line 41, characters 0-0 *)
goal WP_parameter_def :
  (forall x1__split_fields:integer. forall x1__split_fields1:integer.
  forall temp___210:integer. (((to_rep(x1__split_fields1) = 0) and
  (is_valid1({ us_split_fields1 = { rec__dic_and_predicate_checks__r__f =
  x1__split_fields; rec__dic_and_predicate_checks__r__g = x1__split_fields1 }
  }) = true)) -> (0 <  to_rep(temp___210))))
