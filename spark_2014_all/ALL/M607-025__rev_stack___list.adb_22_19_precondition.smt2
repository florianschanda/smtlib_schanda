;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep (select a temp___idx_132)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep (select a temp___idx_132)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort r1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (r1 r1) Bool)

(declare-fun dummy1 () r1)

(declare-datatypes () ((r1__ref (mk_r1__ref (r1__content r1)))))
(define-fun r1__ref___projection ((a r1__ref)) r1 (r1__content a))

(declare-fun to_rep1 (r1) Int)

(declare-fun of_rep1 (Int) r1)

;; inversion_axiom
  (assert
  (forall ((x r1)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x r1)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-fun dummy2 () (Array Int integer))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__stack__stack__top r1)(rec__stack__stack__content (Array Int integer))))))
(define-fun us_split_fields_Top__projection ((a us_split_fields)) r1
  (rec__stack__stack__top a))

(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int integer)
  (rec__stack__stack__content a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__stack__stack__top (us_split_fields1 a)))
                        (to_rep1
                        (rec__stack__stack__top (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__stack__stack__content (us_split_fields1 a))
                           1 100
                           (rec__stack__stack__content (us_split_fields1 b))
                           1 100) true))
                   true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun stack__stack__top__first__bit () Int)

(declare-fun stack__stack__top__last__bit () Int)

(declare-fun stack__stack__top__position () Int)

;; stack__stack__top__first__bit_axiom
  (assert (<= 0 stack__stack__top__first__bit))

;; stack__stack__top__last__bit_axiom
  (assert (< stack__stack__top__first__bit stack__stack__top__last__bit))

;; stack__stack__top__position_axiom
  (assert (<= 0 stack__stack__top__position))

(declare-fun stack__stack__content__first__bit () Int)

(declare-fun stack__stack__content__last__bit () Int)

(declare-fun stack__stack__content__position () Int)

;; stack__stack__content__first__bit_axiom
  (assert (<= 0 stack__stack__content__first__bit))

;; stack__stack__content__last__bit_axiom
  (assert
  (< stack__stack__content__first__bit stack__stack__content__last__bit))

;; stack__stack__content__position_axiom
  (assert (<= 0 stack__stack__content__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-fun dummy3 () us_rep)

(declare-datatypes () ((stack__ref (mk_stack__ref (stack__content us_rep)))))
(define-fun stack__ref___projection ((a stack__ref)) us_rep (stack__content
                                                            a))

(declare-sort positive 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (positive positive) Bool)

(declare-fun dummy4 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int integer)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int integer)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-fun dummy5 () us_t)

(declare-datatypes () ((m__ref (mk_m__ref (m__content us_t)))))
(define-fun m__ref___projection ((a m__ref)) us_t (m__content a))

(declare-fun to__ (us_rep) us_t)

(declare-fun to____function_guard (us_t us_rep) Bool)

(define-fun dynamic_invariant1 ((temp___expr_164 us_t)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (not (= temp___skip_constant_162 true))
                                      (dynamic_property 1 2147483647
                                      (first1 temp___expr_164)
                                      (last1 temp___expr_164))))

;; to____post_axiom
  (assert
  (forall ((s us_rep))
  (! (let ((result (to__ s)))
     (and (and (= (first1 result) 1) (<= 0 (last1 result)))
     (dynamic_invariant1 result true false true))) :pattern ((to__ s)) )))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(declare-fun empty_stack (tuple0) us_rep)

(declare-fun empty_stack__function_guard (us_rep tuple0) Bool)

;; empty_stack__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (is_empty (empty_stack us_void_param)) true) :pattern ((empty_stack
                                                               us_void_param)) )))

(declare-fun top (us_rep) Int)

(declare-fun top__function_guard (Int us_rep) Bool)

;; top__post_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (not (= (is_empty s) true))
     (let ((result (top s)))
     (and
     (= result (to_rep
               (let ((temp___179 (to__ s)))
               (select (to_array temp___179) (last1 (to__ s))))))
     (dynamic_invariant result true false true)))) :pattern ((top s)) )))

;; top__def_axiom
  (assert
  (forall ((s us_rep))
  (! (= (top s) (to_rep
                (let ((temp___181 (rec__stack__stack__content
                                  (us_split_fields1 s))))
                (select temp___181 (to_rep1
                                   (rec__stack__stack__top
                                   (us_split_fields1 s))))))) :pattern (
  (top s)) )))

(declare-fun is_full (us_rep) Bool)

(declare-fun is_full__function_guard (Bool us_rep) Bool)

(declare-sort t12s 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (t12s t12s) Bool)

(declare-fun dummy6 () t12s)

(declare-datatypes () ((t12s__ref (mk_t12s__ref (t12s__content t12s)))))
(define-fun t12s__ref___projection ((a t12s__ref)) t12s (t12s__content a))

(declare-fun temp___182 (Int) (Array Int integer))

;; def_axiom
  (assert
  (forall ((temp___184 Int))
  (= (select (temp___182 temp___184) 1) (of_rep temp___184))))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-fun dummy7 () integer)

(declare-datatypes () ((t14s__ref (mk_t14s__ref (t14s__content integer)))))
(define-fun t14s__ref___projection ((a t14s__ref)) integer (t14s__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes ()
((us_t1 (mk___t1 (elts1 (Array Int integer))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))

(define-fun of_array1 ((a (Array Int integer)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-fun value__size3 () Int)

(declare-fun object__size3 ((Array Int integer)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int integer)) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq8 (us_t1 us_t1) Bool)

(declare-fun dummy8 () us_t1)

(declare-datatypes () ((t15s__ref (mk_t15s__ref (t15s__content us_t1)))))
(define-fun t15s__ref___projection ((a t15s__ref)) us_t1 (t15s__content a))

(declare-sort index_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (index_type index_type) Bool)

(declare-fun dummy9 () index_type)

(declare-datatypes ()
((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type
  (index_type__content a))

(declare-sort capacity_range 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (capacity_range capacity_range) Bool)

(declare-fun dummy10 () capacity_range)

(declare-datatypes ()
((capacity_range__ref
 (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__list__my_lists__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range
  (rec__list__my_lists__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__list__my_lists__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type
  (rec__list__my_lists__vector a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                               a))

(define-fun us_rep_3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep1) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))

(declare-fun list__my_lists__vector__capacity__first__bit () Int)

(declare-fun list__my_lists__vector__capacity__last__bit () Int)

(declare-fun list__my_lists__vector__capacity__position () Int)

;; list__my_lists__vector__capacity__first__bit_axiom
  (assert (<= 0 list__my_lists__vector__capacity__first__bit))

;; list__my_lists__vector__capacity__last__bit_axiom
  (assert
  (< list__my_lists__vector__capacity__first__bit list__my_lists__vector__capacity__last__bit))

;; list__my_lists__vector__capacity__position_axiom
  (assert (<= 0 list__my_lists__vector__capacity__position))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-fun dummy11 () us_rep1)

(declare-datatypes ()
((vector__ref (mk_vector__ref (vector__content us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep1 (vector__content
                                                               a))

(declare-fun length2 (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(define-fun dynamic_invariant2 ((temp___expr_274 Int)
  (temp___is_init_271 Bool) (temp___skip_constant_272 Bool)
  (temp___do_toplevel_273 Bool)) Bool (=>
                                      (or (= temp___is_init_271 true)
                                      (<= 0 100)) (in_range6
                                      temp___expr_274)))

(declare-fun to_rep2 (capacity_range) Int)

(declare-fun of_rep2 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range6
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun capacity ((container us_rep1)) Int (ite (= (of_int 1) true)
                                               (to_rep2
                                               (rec__list__my_lists__vector__capacity
                                               (us_split_discrs1 container)))
                                               100))

(declare-fun capacity__function_guard (Int us_rep1) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length2 container)))
     (and (<= result (capacity container)) (dynamic_invariant2 result true
     false true))) :pattern ((length2 container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq4 (us_rep2 us_rep2) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-fun dummy12 () us_rep2)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content
                                                                   a))

(declare-fun length3 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(define-fun last4 ((container us_rep2)) Int (+ 0 (length3 container)))

(declare-fun last__function_guard (Int us_rep2) Bool)

(declare-fun model__ (us_rep1) us_rep2)

(declare-fun model____function_guard (us_rep2 us_rep1) Bool)

(define-fun last_index ((container us_rep1)) Int (last4 (model__ container)))

(declare-fun last_index__function_guard (Int us_rep1) Bool)

(declare-sort extended_index 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 101)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq13 (extended_index extended_index) Bool)

(declare-fun dummy13 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(define-fun dynamic_invariant3 ((temp___expr_268 Int)
  (temp___is_init_265 Bool) (temp___skip_constant_266 Bool)
  (temp___do_toplevel_267 Bool)) Bool (=>
                                      (or (= temp___is_init_265 true)
                                      (<= 0 101)) (in_range7
                                      temp___expr_268)))

(declare-fun first_index__function_guard (Int us_rep1) Bool)

(define-fun dynamic_invariant4 ((temp___expr_256 Int)
  (temp___is_init_253 Bool) (temp___skip_constant_254 Bool)
  (temp___do_toplevel_255 Bool)) Bool (=>
                                      (or (= temp___is_init_253 true)
                                      (<= 1 100)) (in_range5
                                      temp___expr_256)))

(declare-fun get (us_rep2 Int) Int)

(declare-fun get__function_guard (Int us_rep2 Int) Bool)

(define-fun element ((container us_rep1)
  (index Int)) Int (get (model__ container) index))

(declare-fun element__function_guard (Int us_rep1 Int) Bool)

(declare-sort element_type 0)

(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq14 (element_type element_type) Bool)

(declare-fun dummy14 () element_type)

(declare-datatypes ()
((element_type__ref
 (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant5 ((temp___expr_262 Int)
  (temp___is_init_259 Bool) (temp___skip_constant_260 Bool)
  (temp___do_toplevel_261 Bool)) Bool (=>
                                      (or (= temp___is_init_259 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range8 temp___expr_262)))

(define-fun olt ((left us_rep2)
  (right us_rep2)) Bool (and (< (length3 left) (length3 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last4 left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun olt__function_guard (Bool us_rep2 us_rep2) Bool)

(define-fun in_range9 ((rec__list__my_lists__vector__capacity1 Int)
  (a us_rep1)) Bool (= rec__list__my_lists__vector__capacity1 (to_rep2
                                                              (rec__list__my_lists__vector__capacity
                                                              (us_split_discrs1
                                                              a)))))

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep1) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment6 a))))

(declare-fun list__my_lists__vector__capacity__first__bit1 () Int)

(declare-fun list__my_lists__vector__capacity__last__bit1 () Int)

(declare-fun list__my_lists__vector__capacity__position1 () Int)

;; list__my_lists__vector__capacity__first__bit_axiom
  (assert (<= 0 list__my_lists__vector__capacity__first__bit1))

;; list__my_lists__vector__capacity__last__bit_axiom
  (assert
  (< list__my_lists__vector__capacity__first__bit1 list__my_lists__vector__capacity__last__bit1))

;; list__my_lists__vector__capacity__position_axiom
  (assert (<= 0 list__my_lists__vector__capacity__position1))

(declare-fun user_eq15 (us_rep1 us_rep1) Bool)

(declare-fun dummy15 () us_rep1)

(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep1)))))
(define-fun list__ref___projection ((a list__ref)) us_rep1 (list__content a))

(declare-fun is_empty1 (us_rep1) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)

(define-fun dynamic_invariant6 ((temp___expr_398 us_rep1)
  (temp___is_init_395 Bool) (temp___skip_constant_396 Bool)
  (temp___do_toplevel_397 Bool)) Bool (=>
                                      (not (= temp___skip_constant_396 true))
                                      (in_range9 100 temp___expr_398)))

(define-fun default_initial_assumption ((temp___expr_400 us_rep1)
  (temp___skip_top_level_401 Bool)) Bool (and
                                         (= (to_rep2
                                            (rec__list__my_lists__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_400))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_401 true))
                                         (= (is_empty1 temp___expr_400) true))))

(declare-fun l () us_rep1)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun first4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun last5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun res__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq16 (integer integer) Bool)

(declare-fun dummy16 () integer)

(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content integer)))))
(define-fun t2b__ref___projection ((a t2b__ref)) integer (t2b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_property4 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq17 (integer integer) Bool)

(declare-fun dummy17 () integer)

(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content integer)))))
(define-fun t7b__ref___projection ((a t7b__ref)) integer (t7b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant7 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_39)))

;; first__def_axiom
  (assert (= first4 1))

;; last__def_axiom
  (assert (= last5 (last_index l)))

(declare-sort count_type 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq18 (count_type count_type) Bool)

(declare-fun dummy18 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(define-fun dynamic_invariant8 ((temp___expr_208 Int)
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)) Bool (=>
                                      (or (= temp___is_init_205 true)
                                      (<= 0 2147483647)) (in_range10
                                      temp___expr_208)))

;; is_full__post_axiom
  (assert true)

;; is_full__def_axiom
  (assert
  (forall ((s us_rep))
  (! (= (= (is_full s) true) (<= 100 (last1 (to__ s)))) :pattern ((is_full s)) )))

;; is_empty__post_axiom
  (assert true)

;; is_empty__def_axiom
  (assert
  (forall ((s us_rep))
  (! (= (= (is_empty s) true) (< (last1 (to__ s)) 1)) :pattern ((is_empty s)) )))

(define-fun dynamic_invariant9 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 100)) (in_range2
                                      temp___expr_136)))

(define-fun oeq ((left us_rep2)
  (right us_rep2)) Bool (and (= (length3 left) (length3 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last4 left)))
                                                                (= (get left
                                                                   n)
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq12 a b) (oeq a b)) :pattern ((user_eq12 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_308 us_rep2)
  (temp___skip_top_level_309 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_309 true))
                                         (= (length3 temp___expr_308) 0)))

;; model____post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length3 (model__ container)) (length2 container)) :pattern (
  (model__ container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty1 container) true) (= (length2 container) 0)) :pattern (
  (is_empty1 container)) )))

(declare-sort extended_index1 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq19 (extended_index1 extended_index1) Bool)

(declare-fun dummy19 () extended_index1)

(declare-datatypes ()
((extended_index__ref1
 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_2__projection ((a extended_index__ref1)) extended_index1
  (extended_index__content1 a))

(define-fun dynamic_invariant10 ((temp___expr_301 Int)
  (temp___is_init_298 Bool) (temp___skip_constant_299 Bool)
  (temp___do_toplevel_300 Bool)) Bool (=>
                                      (or (= temp___is_init_298 true)
                                      (<= 0 100)) (in_range11
                                      temp___expr_301)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length3 container)))
     (and (<= (+ 0 result) 100) (dynamic_invariant8 result true false true))) :pattern (
  (length3 container)) )))

(declare-sort element_type1 0)

(define-fun in_range12 ((x Int)) Bool (and (<= (- 2147483648) x)
                                      (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq20 (element_type1 element_type1) Bool)

(declare-fun dummy20 () element_type1)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_2__projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant11 ((temp___expr_295 Int)
  (temp___is_init_292 Bool) (temp___skip_constant_293 Bool)
  (temp___do_toplevel_294 Bool)) Bool (=>
                                      (or (= temp___is_init_292 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range12 temp___expr_295)))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant10 position true true true)
     (and (<= 1 position) (<= position (last4 container))))
     (dynamic_invariant11 (get container position) true false true)) :pattern (
  (get container position)) ))))

(declare-fun s__split_fields () r1)

(declare-fun s__split_fields1 () (Array Int integer))

(declare-fun res__split_fields () us_main_type)

(declare-fun i () Int)

(declare-fun list__reverse_list__s__assume () r1)

(declare-fun list__reverse_list__s__assume1 () (Array Int integer))

(declare-fun list__reverse_list__first__assume () Int)

(declare-fun list__reverse_list__last__assume () Int)

(declare-fun o () Int)

(declare-fun result () us_split_fields__ref)

(declare-fun s__split_fields2 () us_split_fields)

(declare-fun list__my_lists__clear__container__fields () us_split_fields2)

(declare-fun result1 () us_split_fields__ref1)

(declare-fun res__split_fields1 () us_split_fields2)

(declare-fun result2 () int__ref)

(declare-fun i1 () Int)

(define-fun list__reverse_list__s__assume2 () us_rep (mk___rep
                                                     (mk___split_fields
                                                     list__reverse_list__s__assume
                                                     list__reverse_list__s__assume1)))

;; H
  (assert
  (= 100 (to_rep2
         (rec__list__my_lists__vector__capacity (us_split_discrs1 l)))))

;; H
  (assert
  (and (= list__reverse_list__s__assume2 (empty_stack Tuple0))
  (= (is_empty list__reverse_list__s__assume2) true)))

;; H
  (assert
  (= result (mk___split_fields__ref
            (mk___split_fields s__split_fields s__split_fields1))))

;; H
  (assert
  (= s__split_fields2 (mk___split_fields list__reverse_list__s__assume
                      list__reverse_list__s__assume1)))

;; H
  (assert
  (and (= list__reverse_list__first__assume 1)
  (and (in_range5 list__reverse_list__first__assume)
  (= list__reverse_list__first__assume 1))))

;; H
  (assert (= list__reverse_list__first__assume first4))

;; H
  (assert (in_range1 first4))

;; H
  (assert
  (and (= list__reverse_list__last__assume (last4 (model__ l)))
  (and (in_range7 list__reverse_list__last__assume)
  (= list__reverse_list__last__assume (last4 (model__ l))))))

;; H
  (assert (= list__reverse_list__last__assume last5))

;; H
  (assert (in_range1 last5))

;; H
  (assert (default_initial_assumption
  (mk___rep1 res__split_discrs (mk___split_fields1 res__split_fields))
  false))

;; H
  (assert
  (= 100 (to_rep2 (rec__list__my_lists__vector__capacity res__split_discrs))))

;; H
  (assert
  (= (length2
     (mk___rep1 res__split_discrs list__my_lists__clear__container__fields)) 0))

;; H
  (assert
  (= result1 (mk___split_fields__ref1 (mk___split_fields1 res__split_fields))))

;; H
  (assert (= res__split_fields1 list__my_lists__clear__container__fields))

;; H
  (assert (= result2 (mk_int__ref i)))

;; H
  (assert (= i1 first4))

;; H
  (assert (<= first4 i1))

;; H
  (assert (<= i1 last5))

;; H
  (assert (and (= o i1) (in_range5 i1)))

(assert
;; WP_parameter_def
 ;; File "list.ads", line 9, characters 0-0
  (not (<= 1 o)))
(check-sat)
(exit)
