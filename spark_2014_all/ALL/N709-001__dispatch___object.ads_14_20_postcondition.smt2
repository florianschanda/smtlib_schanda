;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields
  (rec__object__t__area integer)(rec__object__t__max_width integer)(rec__object__t__max_height integer)(rec__ext__ us_private)))))
(define-fun us_split_fields_Area__projection ((a us_split_fields)) integer
  (rec__object__t__area a))

(define-fun us_split_fields_Max_Width__projection ((a us_split_fields)) integer
  (rec__object__t__max_width a))

(define-fun us_split_fields_Max_Height__projection ((a us_split_fields)) integer
  (rec__object__t__max_height a))

(define-fun us_split_fields___projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__object__t__area (us_split_fields1 a)))
                        (to_rep (rec__object__t__area (us_split_fields1 b))))
                        (= (to_rep
                           (rec__object__t__max_width (us_split_fields1 a)))
                        (to_rep
                        (rec__object__t__max_width (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__object__t__max_height (us_split_fields1 a)))
                        (to_rep
                        (rec__object__t__max_height (us_split_fields1 b)))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const object__t__area__first__bit Int)

(declare-const object__t__area__last__bit Int)

(declare-const object__t__area__position Int)

;; object__t__area__first__bit_axiom
  (assert (<= 0 object__t__area__first__bit))

;; object__t__area__last__bit_axiom
  (assert (< object__t__area__first__bit object__t__area__last__bit))

;; object__t__area__position_axiom
  (assert (<= 0 object__t__area__position))

(declare-const object__t__max_width__first__bit Int)

(declare-const object__t__max_width__last__bit Int)

(declare-const object__t__max_width__position Int)

;; object__t__max_width__first__bit_axiom
  (assert (<= 0 object__t__max_width__first__bit))

;; object__t__max_width__last__bit_axiom
  (assert
  (< object__t__max_width__first__bit object__t__max_width__last__bit))

;; object__t__max_width__position_axiom
  (assert (<= 0 object__t__max_width__position))

(declare-const object__t__max_height__first__bit Int)

(declare-const object__t__max_height__last__bit Int)

(declare-const object__t__max_height__position Int)

;; object__t__max_height__first__bit_axiom
  (assert (<= 0 object__t__max_height__first__bit))

;; object__t__max_height__last__bit_axiom
  (assert
  (< object__t__max_height__first__bit object__t__max_height__last__bit))

;; object__t__max_height__position_axiom
  (assert (<= 0 object__t__max_height__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content us_rep)))))
(define-fun t__ref___projection ((a t__ref)) us_rep (t__content a))

(define-fun default_initial_assumption ((temp___expr_136 us_rep)
  (temp___skip_top_level_137 Bool)) Bool (and
                                         (= (attr__tag temp___expr_136)
                                         us_tag)
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__object__t__area
                                            (us_split_fields1
                                            temp___expr_136))) (- 1))
                                         (= (to_rep
                                            (rec__object__t__max_width
                                            (us_split_fields1
                                            temp___expr_136))) (- 1)))
                                         (= (to_rep
                                            (rec__object__t__max_height
                                            (us_split_fields1
                                            temp___expr_136))) (- 1)))))

(declare-fun has_stored_area (us_rep) Bool)

(declare-fun has_stored_area__function_guard (Bool us_rep) Bool)

(declare-fun has_stored_area1 (Int us_rep) Bool)

(declare-fun has_stored_area__function_guard1 (Bool Int us_rep) Bool)

(declare-fun get_stored_area (us_rep) Int)

(declare-fun get_stored_area__function_guard (Int us_rep) Bool)

(declare-fun get_stored_area1 (Int us_rep) Int)

(declare-fun get_stored_area__function_guard1 (Int Int us_rep) Bool)

(declare-const obj__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const value Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)

;; has_stored_area__post_axiom
  (assert true)

;; has_stored_area__post__dispatch_axiom
  (assert true)

;; object__t__compat_axiom
  (assert
  (forall ((obj us_rep))
  (! (= (to_int1 (has_stored_area obj)) (to_int1
                                        (has_stored_area1 us_tag obj))) :pattern (
  (has_stored_area1 us_tag obj)) )))

;; has_stored_area__def_axiom
  (assert
  (forall ((obj us_rep))
  (! (= (= (has_stored_area obj) true) (in_range1
     (to_rep (rec__object__t__area (us_split_fields1 obj))))) :pattern (
  (has_stored_area obj)) )))

;; get_stored_area__post_axiom
  (assert
  (forall ((obj us_rep))
  (! (=> (= (has_stored_area obj) true) (dynamic_invariant
     (get_stored_area obj) true false true)) :pattern ((get_stored_area obj)) )))

;; get_stored_area__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((obj us_rep))
  (! (=> (= (has_stored_area1 (attr__tag obj) obj) true) (dynamic_invariant
     (get_stored_area1 attr__tag1 obj) true false true)) :pattern ((get_stored_area1
                                                                   attr__tag1
                                                                   obj)) ))))

;; object__t__compat_axiom
  (assert
  (forall ((obj us_rep))
  (! (= (get_stored_area obj) (get_stored_area1 us_tag obj)) :pattern (
  (get_stored_area1 us_tag obj)) )))

;; get_stored_area__def_axiom
  (assert
  (forall ((obj us_rep))
  (! (= (get_stored_area obj) (to_rep
                              (rec__object__t__area (us_split_fields1 obj)))) :pattern (
  (get_stored_area obj)) )))

(declare-const obj__split_fields integer)

(declare-const obj__split_fields1 integer)

(declare-const obj__split_fields2 integer)

(declare-const obj__split_fields3 us_private)

(declare-const o integer)

(declare-const o1 integer)

(declare-const o2 integer)

(declare-const o3 integer)

(declare-const o4 us_private)

(declare-const temp___146 integer)

(declare-const temp___1461 integer)

(declare-const temp___1462 integer)

(declare-const temp___1463 us_private)

(declare-const temp___1464 Int)

(declare-const result integer)

(declare-const result1 integer)

(declare-const result2 integer)

(declare-const result3 us_private)

(declare-const obj__split_fields4 integer)

(declare-const obj__split_fields5 integer)

(declare-const obj__split_fields6 integer)

(declare-const obj__split_fields7 us_private)

(declare-const obj__split_fields8 integer)

(declare-const obj__split_fields9 integer)

(declare-const obj__split_fields10 integer)

(declare-const obj__split_fields11 us_private)

(declare-const obj__split_fields12 integer)

(declare-const obj__split_fields13 integer)

(declare-const obj__split_fields14 integer)

(declare-const obj__split_fields15 us_private)

;; H
  (assert (in_range1 value))

;; H
  (assert (= (to_rep o) value))

;; H
  (assert (= o o1))

;; H
  (assert (= obj__split_fields1 o2))

;; H
  (assert (= obj__split_fields2 o3))

;; H
  (assert (= obj__split_fields3 o4))

;; H
  (assert (= temp___146 o1))

;; H
  (assert (= temp___1461 o2))

;; H
  (assert (= temp___1462 o3))

;; H
  (assert (= temp___1463 o4))

;; H
  (assert (= obj__attr__tag temp___1464))

;; H
  (assert (= result obj__split_fields))

;; H
  (assert (= result1 obj__split_fields1))

;; H
  (assert (= result2 obj__split_fields2))

;; H
  (assert (= result3 obj__split_fields3))

;; H
  (assert (= temp___146 obj__split_fields4))

;; H
  (assert (= temp___1461 obj__split_fields5))

;; H
  (assert (= temp___1462 obj__split_fields6))

;; H
  (assert (= temp___1463 obj__split_fields7))

;; H
  (assert (= obj__split_fields8 obj__split_fields4))

;; H
  (assert (= obj__split_fields9 obj__split_fields5))

;; H
  (assert (= obj__split_fields10 obj__split_fields6))

;; H
  (assert (= obj__split_fields11 obj__split_fields7))

;; H
  (assert (= obj__split_fields12 obj__split_fields4))

;; H
  (assert (= obj__split_fields13 obj__split_fields5))

;; H
  (assert (= obj__split_fields14 obj__split_fields6))

;; H
  (assert (= obj__split_fields15 obj__split_fields7))

(assert
;; WP_parameter_def
 ;; File "object.ads", line 6, characters 0-0
  (not
  (= (has_stored_area
     (mk___rep
     (mk___split_fields obj__split_fields8 obj__split_fields9
     obj__split_fields10 obj__split_fields11) obj__attr__tag)) true)))
(check-sat)
(exit)
