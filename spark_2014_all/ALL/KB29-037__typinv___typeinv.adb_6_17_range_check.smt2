;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun is_valid (Int) Bool)

(declare-fun is_valid__function_guard (Bool Int) Bool)

(define-fun type_invariant ((temp___132 Int)) Bool (= (is_valid temp___132) true))

(declare-sort t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (t t) Bool)

(declare-const dummy1 t)

(declare-datatypes () ((t__ref (mk_t__ref (t__content t)))))
(define-fun t__ref___projection ((a t__ref)) t (t__content a))

(declare-const x Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant1 ((temp___expr_137 Int)
  (temp___is_init_134 Bool) (temp___skip_constant_135 Bool)
  (temp___do_toplevel_136 Bool)) Bool (=>
                                      (or (= temp___is_init_134 true)
                                      (<= 0 10000)) (in_range1
                                      temp___expr_137)))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x1 Int) (y Int))
  (=> (not (= y 0)) (= x1 (+ (* y (div1 x1 y)) (mod1 x1 y))))))

;; Div_bound
  (assert
  (forall ((x1 Int) (y Int))
  (=> (and (<= 0 x1) (< 0 y)) (and (<= 0 (div1 x1 y)) (<= (div1 x1 y) x1)))))

;; Mod_bound
  (assert
  (forall ((x1 Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs y)) (mod1 x1 y)) (< (mod1 x1 y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x1 Int) (y Int)) (=> (and (<= 0 x1) (< 0 y)) (<= 0 (div1 x1 y)))))

;; Div_sign_neg
  (assert
  (forall ((x1 Int) (y Int)) (=> (and (<= x1 0) (< 0 y)) (<= (div1 x1 y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x1 Int) (y Int))
  (=> (and (<= 0 x1) (not (= y 0))) (<= 0 (mod1 x1 y)))))

;; Mod_sign_neg
  (assert
  (forall ((x1 Int) (y Int))
  (=> (and (<= x1 0) (not (= y 0))) (<= (mod1 x1 y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x1 Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x1 y) y)) (abs x1)))))

;; Div_1
  (assert (forall ((x1 Int)) (= (div1 x1 1) x1)))

;; Mod_1
  (assert (forall ((x1 Int)) (= (mod1 x1 1) 0)))

;; Div_inf
  (assert
  (forall ((x1 Int) (y Int)) (=> (and (<= 0 x1) (< x1 y)) (= (div1 x1 y) 0))))

;; Mod_inf
  (assert
  (forall ((x1 Int) (y Int))
  (=> (and (<= 0 x1) (< x1 y)) (= (mod1 x1 y) x1))))

;; Div_mult
  (assert
  (forall ((x1 Int) (y Int) (z Int))
  (! (=> (and (< 0 x1) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x1 y) z) x1) (+ y (div1 z x1)))) :pattern ((div1
                                                               (+ (* x1 y) z)
                                                               x1)) )))

;; Mod_mult
  (assert
  (forall ((x1 Int) (y Int) (z Int))
  (! (=> (and (< 0 x1) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x1 y) z) x1) (mod1 z x1))) :pattern ((mod1 (+ (* x1 y) z)
                                                         x1)) )))

(define-fun mod2 ((x1 Int)
  (y Int)) Int (ite (< 0 y) (mod x1 y) (+ (mod x1 y) y)))

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((x1 Int))
  (! (= (= (is_valid x1) true) (= (mod2 x1 2) 0)) :pattern ((is_valid x1)) )))

;; H
  (assert (in_range x))

(assert
;; WP_parameter_def
 ;; File "typeinv.ads", line 9, characters 0-0
  (not (in_range1 x)))
(check-sat)
(exit)
