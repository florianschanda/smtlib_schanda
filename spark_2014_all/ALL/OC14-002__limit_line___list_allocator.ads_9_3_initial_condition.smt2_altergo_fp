(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type tresourceB

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : tresourceB, tresourceB -> bool

logic dummy : tresourceB

type tresourceB__ref = { tresourceB__content : tresourceB
}

function tresourceB__ref___projection(a: tresourceB__ref) : tresourceB =
  (a).tresourceB__content

type resource

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : resource, resource -> bool

logic dummy1 : resource

type resource__ref = { resource__content : resource
}

function resource__ref___projection(a: resource__ref) : resource =
  (a).resource__content

logic to_rep : resource -> int

logic of_rep : int -> resource

axiom inversion_axiom :
  (forall x:resource [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:resource [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type valid_resource

predicate in_range3(x: int) = ((1 <= x) and (x <= 3))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : valid_resource, valid_resource -> bool

logic dummy2 : valid_resource

type valid_resource__ref = { valid_resource__content : valid_resource
}

function valid_resource__ref___projection(a: valid_resource__ref) : valid_resource =
  (a).valid_resource__content

logic no_resource : int

logic attr__ATTRIBUTE_ADDRESS : int

type status

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : status, status -> bool

logic dummy3 : status

type status__ref = { status__content : status
}

function status__ref___projection(a: status__ref) : status =
  (a).status__content

logic to_rep1 : status -> int

logic of_rep1 : int -> status

axiom inversion_axiom1 :
  (forall x:status [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:status [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__list_allocator__cell__stat : status;
rec__list_allocator__cell__prev : resource; rec__list_allocator__cell__next :
resource
}

function us_split_fields_Stat__projection(a: us_split_fields) : status =
  (a).rec__list_allocator__cell__stat

function us_split_fields_Prev__projection(a: us_split_fields) : resource =
  (a).rec__list_allocator__cell__prev

function us_split_fields_Next__projection(a: us_split_fields) : resource =
  (a).rec__list_allocator__cell__next

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  (((((to_rep1(((a).us_split_fields1).rec__list_allocator__cell__stat) = to_rep1(((b).us_split_fields1).rec__list_allocator__cell__stat)) and
  (to_rep(((a).us_split_fields1).rec__list_allocator__cell__prev) = to_rep(((b).us_split_fields1).rec__list_allocator__cell__prev))) and
  (to_rep(((a).us_split_fields1).rec__list_allocator__cell__next) = to_rep(((b).us_split_fields1).rec__list_allocator__cell__next))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_fields1).rec__list_allocator__cell__stat) = to_rep1(((b).us_split_fields1).rec__list_allocator__cell__stat)) and
  (to_rep(((a).us_split_fields1).rec__list_allocator__cell__prev) = to_rep(((b).us_split_fields1).rec__list_allocator__cell__prev))) and
  (to_rep(((a).us_split_fields1).rec__list_allocator__cell__next) = to_rep(((b).us_split_fields1).rec__list_allocator__cell__next)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:status. forall a1:resource. forall a2:resource.
  (0 <= object__size({ us_split_fields1 = { rec__list_allocator__cell__stat =
  a; rec__list_allocator__cell__prev = a1; rec__list_allocator__cell__next =
  a2 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:status. forall a1:resource. forall a2:resource.
  (0 <= object__alignment({ us_split_fields1 = {
  rec__list_allocator__cell__stat = a; rec__list_allocator__cell__prev = a1;
  rec__list_allocator__cell__next = a2 } })))

logic list_allocator__cell__stat__first__bit : int

logic list_allocator__cell__stat__last__bit : int

logic list_allocator__cell__stat__position : int

axiom list_allocator__cell__stat__first__bit_axiom :
  (0 <= list_allocator__cell__stat__first__bit)

axiom list_allocator__cell__stat__last__bit_axiom :
  (list_allocator__cell__stat__first__bit <  list_allocator__cell__stat__last__bit)

axiom list_allocator__cell__stat__position_axiom :
  (0 <= list_allocator__cell__stat__position)

logic list_allocator__cell__prev__first__bit : int

logic list_allocator__cell__prev__last__bit : int

logic list_allocator__cell__prev__position : int

axiom list_allocator__cell__prev__first__bit_axiom :
  (0 <= list_allocator__cell__prev__first__bit)

axiom list_allocator__cell__prev__last__bit_axiom :
  (list_allocator__cell__prev__first__bit <  list_allocator__cell__prev__last__bit)

axiom list_allocator__cell__prev__position_axiom :
  (0 <= list_allocator__cell__prev__position)

logic list_allocator__cell__next__first__bit : int

logic list_allocator__cell__next__last__bit : int

logic list_allocator__cell__next__position : int

axiom list_allocator__cell__next__first__bit_axiom :
  (0 <= list_allocator__cell__next__first__bit)

axiom list_allocator__cell__next__last__bit_axiom :
  (list_allocator__cell__next__first__bit <  list_allocator__cell__next__last__bit)

axiom list_allocator__cell__next__position_axiom :
  (0 <= list_allocator__cell__next__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : status

logic dummy5 : resource

logic dummy6 : resource

type cell__ref = { cell__content : us_rep
}

function cell__ref___projection(a: cell__ref) : us_rep = (a).cell__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> (int,us_rep) farray

axiom concat_def :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep, int -> (int,us_rep) farray

axiom singleton_def :
  (forall v:status. forall v1:resource. forall v2:resource.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__list_allocator__cell__stat = v; rec__list_allocator__cell__prev = v1;
  rec__list_allocator__cell__next = v2 } }, i)[i])]. ((singleton({
  us_split_fields1 = { rec__list_allocator__cell__stat = v;
  rec__list_allocator__cell__prev = v1; rec__list_allocator__cell__next = v2
  } }, i)[i]) = { us_split_fields1 = { rec__list_allocator__cell__stat = v;
  rec__list_allocator__cell__prev = v1; rec__list_allocator__cell__next = v2
  } })))

logic bool_eq7 : (int,us_rep) farray, int, int, (int,us_rep) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,us_rep) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq6((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq6((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq6((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic all_available : (int,us_rep) farray -> bool

logic all_available__function_guard : bool, (int,us_rep) farray -> prop

axiom all_available__post_axiom : true

axiom all_available__def_axiom :
  (forall list_allocator__data:(int,us_rep) farray
  [all_available(list_allocator__data)].
  ((all_available(list_allocator__data) = true) <->
  (forall r:int. (((1 <= r) and (r <= 3)) ->
  (to_rep1((((list_allocator__data[r])).us_split_fields1).rec__list_allocator__cell__stat) = 0)))))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep1

logic bool_eq8 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep1. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep1. (0 <= object__alignment1(a)))

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref___projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic length : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic length1 : int, us_rep1 -> int

logic length__function_guard1 : int, int, us_rep1 -> prop

type natural

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : natural, natural -> bool

logic dummy8 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

logic oeq1 : int, us_rep1, us_rep1 -> bool

logic oeq__function_guard1 : bool, int, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq5(a, b)]. (user_eq5(a,
  b) = oeq(a, b)))

axiom length__post_axiom :
  (forall s:us_rep1 [length(s)]. in_range5(length(s)))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall s:us_rep1 [length1(attr__tag, s)]. in_range5(length1(attr__tag,
  s))))

type element_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : element_type, element_type -> bool

logic dummy9 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic is_add : us_rep1, int, us_rep1 -> bool

logic is_add__function_guard : bool, us_rep1, int, us_rep1 -> prop

logic is_add1 : int, us_rep1, int, us_rep1 -> bool

logic is_add__function_guard1 : bool, int, us_rep1, int, us_rep1 -> prop

logic add : us_rep1, int -> us_rep1

logic add__function_guard : us_rep1, us_rep1, int -> prop

logic add1 : int, us_rep1, int -> us_rep1

logic add__function_guard1 : us_rep1, int, us_rep1, int -> prop

axiom add__post_axiom :
  (forall s:us_rep1.
  (forall e:int [add(s, e)]. (in_range6(e) -> (is_add(s, e, add(s,
  e)) = true))))

axiom add__post__dispatch_axiom : true

type us_split_fields2 = { rec__list_allocator__m__t__available : us_rep1;
rec__list_allocator__m__t__allocated : us_rep1
}

function us_split_fields_Available__projection(a: us_split_fields2) : us_rep1 =
  (a).rec__list_allocator__m__t__available

function us_split_fields_Allocated__projection(a: us_split_fields2) : us_rep1 =
  (a).rec__list_allocator__m__t__allocated

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___7__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq11 : us_rep2, us_rep2 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq11(a, b)].
  ((((user_eq5(((a).us_split_fields3).rec__list_allocator__m__t__available,
  ((b).us_split_fields3).rec__list_allocator__m__t__available) = true) and
  (user_eq5(((a).us_split_fields3).rec__list_allocator__m__t__allocated,
  ((b).us_split_fields3).rec__list_allocator__m__t__allocated) = true)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((user_eq5(((a).us_split_fields3).rec__list_allocator__m__t__available,
  ((b).us_split_fields3).rec__list_allocator__m__t__available) = true) and
  (user_eq5(((a).us_split_fields3).rec__list_allocator__m__t__allocated,
  ((b).us_split_fields3).rec__list_allocator__m__t__allocated) = true))) ->
  (bool_eq11(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:us_rep1. forall a1:us_rep1. (0 <= object__size2({
  us_split_fields3 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep1. forall a1:us_rep1. (0 <= object__alignment2({
  us_split_fields3 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } })))

logic list_allocator__m__t__available__first__bit : int

logic list_allocator__m__t__available__last__bit : int

logic list_allocator__m__t__available__position : int

axiom list_allocator__m__t__available__first__bit_axiom :
  (0 <= list_allocator__m__t__available__first__bit)

axiom list_allocator__m__t__available__last__bit_axiom :
  (list_allocator__m__t__available__first__bit <  list_allocator__m__t__available__last__bit)

axiom list_allocator__m__t__available__position_axiom :
  (0 <= list_allocator__m__t__available__position)

logic list_allocator__m__t__allocated__first__bit : int

logic list_allocator__m__t__allocated__last__bit : int

logic list_allocator__m__t__allocated__position : int

axiom list_allocator__m__t__allocated__first__bit_axiom :
  (0 <= list_allocator__m__t__allocated__first__bit)

axiom list_allocator__m__t__allocated__last__bit_axiom :
  (list_allocator__m__t__allocated__first__bit <  list_allocator__m__t__allocated__last__bit)

axiom list_allocator__m__t__allocated__position_axiom :
  (0 <= list_allocator__m__t__allocated__position)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy10 : us_rep1

logic dummy11 : us_rep1

type t__ref = { t__content : us_rep2
}

function t__ref___projection(a: t__ref) : us_rep2 = (a).t__content

logic oeq2 : us_rep2, us_rep2 -> bool

logic oeq__function_guard2 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep1. forall a1:us_rep1. forall b:us_rep1. forall b1:us_rep1
  [user_eq8({ us_split_fields3 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } }, { us_split_fields3 = {
  rec__list_allocator__m__t__available = b;
  rec__list_allocator__m__t__allocated = b1 } })]. (user_eq8({
  us_split_fields3 = { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } }, { us_split_fields3 = {
  rec__list_allocator__m__t__available = b;
  rec__list_allocator__m__t__allocated = b1 } }) = oeq2({ us_split_fields3 =
  { rec__list_allocator__m__t__available = a;
  rec__list_allocator__m__t__allocated = a1 } }, { us_split_fields3 = {
  rec__list_allocator__m__t__available = b;
  rec__list_allocator__m__t__allocated = b1 } })))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic mem : us_rep1, int -> bool

logic mem__function_guard : bool, us_rep1, int -> prop

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

logic get1 : int, us_rep1, int -> int

logic get__function_guard1 : int, int, us_rep1, int -> prop

axiom mem__post_axiom : true

axiom mem__def_axiom :
  (forall s:us_rep1.
  (forall r:int [mem(s, r)]. ((mem(s, r) = true) <->
  (exists j:int. (((1 <= j) and (j <= length(s))) and (get(s, j) = r))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic list_allocator__data__aggregate_def : us_rep -> (int,us_rep) farray

axiom def_axiom :
  (forall temp___369:status. forall temp___3691:resource.
  forall temp___3692:resource.
  (forall temp___370:int. ((list_allocator__data__aggregate_def({
  us_split_fields1 = { rec__list_allocator__cell__stat = temp___369;
  rec__list_allocator__cell__prev = temp___3691;
  rec__list_allocator__cell__next = temp___3692 } })[temp___370]) = {
  us_split_fields1 = { rec__list_allocator__cell__stat = temp___369;
  rec__list_allocator__cell__prev = temp___3691;
  rec__list_allocator__cell__next = temp___3692 } })))

type positive

predicate in_range7(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : positive, positive -> bool

logic dummy12 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

axiom no_resource__def_axiom : (no_resource = 0)

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall x:us_rep1. forall x1:us_rep1. forall y:us_rep1. forall y1:us_rep1
  [oeq2({ us_split_fields3 = { rec__list_allocator__m__t__available = x;
  rec__list_allocator__m__t__allocated = x1 } }, { us_split_fields3 = {
  rec__list_allocator__m__t__available = y;
  rec__list_allocator__m__t__allocated = y1 } })]. ((oeq2({
  us_split_fields3 = { rec__list_allocator__m__t__available = x;
  rec__list_allocator__m__t__allocated = x1 } }, { us_split_fields3 = {
  rec__list_allocator__m__t__available = y;
  rec__list_allocator__m__t__allocated = y1 } }) = true) <-> ((oeq(x,
  y) = true) and (oeq(x1, y1) = true))))

axiom get__post_axiom :
  (forall s:us_rep1.
  (forall n:int [get(s, n)]. ((in_range7(n) and ((1 <= n) and
  (n <= length(s)))) -> in_range6(get(s, n)))))

axiom get__post__dispatch_axiom :
  (forall attr__tag:int. forall n:int.
  (forall s:us_rep1 [get1(attr__tag, s, n)]. (in_range7(n) ->
  in_range6(get1(attr__tag, s, n)))))

axiom oeq__post_axiom1 :
  (forall s1:us_rep1. forall s2:us_rep1 [oeq(s1, s2)]. ((oeq(s1,
  s2) = true) <-> ((length(s1) = length(s2)) and
  (forall n:int. (((1 <= n) and (n <= length(s1))) -> (get(s1, n) = get(s2,
  n)))))))

axiom oeq__post__dispatch_axiom : true

axiom is_add__post_axiom :
  (forall s:us_rep1. forall result__:us_rep1.
  (forall e:int [is_add(s, e, result__)]. (in_range6(e) -> ((is_add(s, e,
  result__) = true) <-> (((length(result__) = (length(s) + 1)) and
  (get(result__, length(result__)) = e)) and
  (forall m:int. (((1 <= m) and (m <= length(s))) -> (get(result__,
  m) = get(s, m)))))))))

axiom is_add__post__dispatch_axiom : true

 (* File "list_allocator.adb", line 16, characters 0-0 *)
goal WP_parameter_def :
  (forall model____split_fields:us_rep1.
  forall model____split_fields1:us_rep1. forall data:(int,us_rep) farray.
  forall first_available:int. forall first_allocated:int. forall r:int.
  forall r1:int. forall o:resource. forall o1:resource. forall o2:status.
  forall o3:status. forall o4:resource. forall o5:resource. forall o6:status.
  forall o7:resource. forall o8:resource. forall o9:(int,us_rep) farray.
  forall temp___359:int. forall temp___357:(int,us_rep) farray.
  forall o10:resource. forall o11:status. forall o12:resource.
  forall o13:resource. forall o14:status. forall o15:resource.
  forall o16:resource. forall o17:(int,us_rep) farray. forall o18:int.
  forall o19:resource. forall o20:status. forall o21:resource.
  forall o22:resource. forall o23:status. forall o24:resource.
  forall o25:resource. forall o26:(int,us_rep) farray. forall temp___365:int.
  forall temp___364:us_rep1. forall temp___3641:us_rep1. forall o27:us_rep1.
  forall o28:us_rep1. forall o29:us_rep1. forall temp___363:us_rep1.
  forall temp___3631:us_rep1. forall model____split_fields2:us_rep1.
  forall model____split_fields3:us_rep1. forall result:(int,us_rep) farray.
  forall data1:(int,us_rep) farray. forall result1:int.
  forall first_available1:int. forall result2:int.
  forall first_allocated1:int. forall result3:int. forall r2:int.
  forall result4:(int,us_rep) farray. forall data2:(int,us_rep) farray.
  forall result5:(int,us_rep) farray. forall data3:(int,us_rep) farray.
  forall data4:(int,us_rep) farray. forall r3:int.
  forall data5:(int,us_rep) farray. forall r4:int.
  forall data6:(int,us_rep) farray. forall r5:int.
  forall data7:(int,us_rep) farray. forall r6:int__ref.
  forall data8:(int,us_rep) farray. forall r7:int. forall result6:int__ref.
  forall r8:int. forall result7:us_split_fields__ref1.
  forall model____split_fields4:us_split_fields2.
  forall model____split_fields5:us_split_fields2. forall r9:int.
  forall model____split_fields6:us_split_fields__ref1. forall r10:int__ref.
  forall model____split_fields7:us_split_fields2. forall r11:int.
  forall model____split_fields8:us_split_fields__ref1. forall r12:int__ref.
  forall model____split_fields9:us_split_fields2. forall r13:int.
  (forall result8:bool. ((in_range2(no_resource) and ((((((to_rep(o) = 0) and
  ((to_rep(o1) = 0) and ((to_rep1(o2) = 0) and ((o2 = o3) and ((o1 = o4) and
  (o = o5)))))) and ((o6 = o3) and ((o7 = o4) and (o8 = o5)))) and
  (o9 = list_allocator__data__aggregate_def({ us_split_fields1 = {
  rec__list_allocator__cell__stat = o6; rec__list_allocator__cell__prev = o7;
  rec__list_allocator__cell__next = o8 } }))) and ((result = data) and
  (data1 = o9))) and (((result1 = first_available) and
  (first_available1 = 1)) and (in_range2(first_available1) and
  (((result2 = first_allocated) and (first_allocated1 = 0)) and
  (in_range2(first_allocated1) and ((((result3 = r) and (r2 = 1)) and
  ((((1 <= r2) and (r2 <= 3)) and ((((temp___359 = r2) and
  ((temp___357 = data1) and ((((1 <  r2) and (((((to_rep(o10) = (r2 - 1)) and
  (((((data1[r2])).us_split_fields1).rec__list_allocator__cell__stat = o11) and
  ((o10 = o12) and
  ((((data1[r2])).us_split_fields1).rec__list_allocator__cell__next = o13)))) and
  ((o14 = o11) and ((o15 = o12) and (o16 = o13)))) and (o17 = (data1[r2 <- {
  us_split_fields1 = { rec__list_allocator__cell__stat = o14;
  rec__list_allocator__cell__prev = o15; rec__list_allocator__cell__next =
  o16 } }]))) and ((result4 = data1) and (data2 = o17)))) or
  ((not (1 <  r2)) and (data2 = data1))) and ((((r2 <  3) and
  (((((((o18 = (r2 + 1)) and in_range2((r2 + 1))) and
  (to_rep(o19) = o18)) and
  (((((data2[r2])).us_split_fields1).rec__list_allocator__cell__stat = o20) and
  (((((data2[r2])).us_split_fields1).rec__list_allocator__cell__prev = o21) and
  (o19 = o22)))) and ((o23 = o20) and ((o24 = o21) and (o25 = o22)))) and
  (o26 = (data2[r2 <- { us_split_fields1 = {
  rec__list_allocator__cell__stat = o23; rec__list_allocator__cell__prev =
  o24; rec__list_allocator__cell__next = o25 } }]))) and
  ((result5 = data2) and (data3 = o26)))) or ((not (r2 <  3)) and
  (data3 = data2))) and
  (((forall rr:int. (((1 <= rr) and (rr <= r3)) -> (((rr = 1) and
    (to_rep((((data4[rr])).us_split_fields1).rec__list_allocator__cell__prev) = 0)) or
    ((not (rr = 1)) and
    (to_rep((((data4[rr])).us_split_fields1).rec__list_allocator__cell__prev) = (rr - 1)))))) and
  ((forall rr:int. (((1 <= rr) and (rr <= r3)) -> (((rr = 3) and
   (to_rep((((data4[rr])).us_split_fields1).rec__list_allocator__cell__next) = 0)) or
   ((not (rr = 3)) and
   (to_rep((((data4[rr])).us_split_fields1).rec__list_allocator__cell__next) = (rr + 1)))))) and
  (forall rr:int. (((1 <= rr) and (rr <= 3)) ->
  (to_rep1((((data4[rr])).us_split_fields1).rec__list_allocator__cell__stat) = 0))))) and
  ((((forall temp___358:int. (((1 <= temp___358) and (temp___358 <= 3)) ->
     (((r3 <  temp___358) and
     ((data4[temp___358]) = (temp___357[temp___358]))) or
     ((not (r3 <  temp___358)) and
     ((((data4[temp___358])).us_split_fields1).rec__list_allocator__cell__stat = (((temp___357[temp___358])).us_split_fields1).rec__list_allocator__cell__stat))))) and
  ((1 <= 3) -> in_range3(r3))) and ((1 <= r3) and (r3 <= 3))) and
  (r3 = 3))))))) and (((r3 = r4) and (data4 = data5)) and ((r5 = r3) and
  (data6 = data4)))) and (((r6 = { int__content = r4 }) and ({ map__content =
  data7 } = { map__content = data5 })) and ((r7 = r5) and
  (data8 = data6))))) or ((not ((1 <= r2) and (r2 <= 3))) and (((r6 = {
  int__content = r2 }) and (data1 = data7)) and ((r7 = r2) and
  (data8 = data1)))))) and ((((result6 = { int__content = r1 }) and
  (r8 = 1)) and ((((1 <= r8) and (r8 <= 3)) and ((((temp___365 = r8) and
  (((model____split_fields = temp___364) and
  (model____split_fields1 = temp___3641)) and
  ((((((o27 = add(model____split_fields, r8)) and
  (is_add(model____split_fields, r8, o27) = true)) and ((o27 = o28) and
  (model____split_fields1 = o29))) and ((temp___363 = o28) and
  (temp___3631 = o29))) and ((result7 = { us_split_fields__content1 = {
  rec__list_allocator__m__t__available = model____split_fields;
  rec__list_allocator__m__t__allocated = model____split_fields1 } }) and
  (model____split_fields4 = { rec__list_allocator__m__t__available =
  temp___363; rec__list_allocator__m__t__allocated = temp___3631 }))) and
  (((forall rr:int. (((1 <= rr) and (rr <= r9)) ->
    (mem((model____split_fields5).rec__list_allocator__m__t__available,
    rr) = true))) and
  (length((model____split_fields5).rec__list_allocator__m__t__allocated) = 0)) and
  (((((model____split_fields5).rec__list_allocator__m__t__allocated = temp___3641) and
  ((1 <= 3) -> in_range3(r9))) and ((1 <= r9) and (r9 <= 3))) and
  (r9 = 3)))))) and (((r10 = { int__content = r9 }) and
  (model____split_fields6 = { us_split_fields__content1 =
  model____split_fields5 })) and ((r11 = r9) and
  (model____split_fields7 = model____split_fields5)))) and (((r12 = r10) and
  (model____split_fields8 = model____split_fields6)) and ((r13 = r11) and
  (model____split_fields9 = model____split_fields7))))) or
  ((not ((1 <= r8) and (r8 <= 3))) and (((r12 = { int__content = r8 }) and
  (model____split_fields8 = { us_split_fields__content1 = {
  rec__list_allocator__m__t__available = model____split_fields;
  rec__list_allocator__m__t__allocated = model____split_fields1 } })) and
  ((r13 = r8) and (model____split_fields9 = {
  rec__list_allocator__m__t__available = model____split_fields2;
  rec__list_allocator__m__t__allocated = model____split_fields3 })))))) and
  ((result8 = all_available(data7)) and ((result8 = true) <->
  (forall r14:int. (((1 <= r14) and (r14 <= 3)) ->
  (to_rep1((((data7[r14])).us_split_fields1).rec__list_allocator__cell__stat) = 0))))))))))))) ->
  (all_available(data7) = true))))
