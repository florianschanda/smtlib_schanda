;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-fun dummy () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(declare-sort true_bool 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(define-fun bool_eq1 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (true_bool true_bool) Bool)

(declare-fun dummy1 () true_bool)

(declare-datatypes ()
((true_bool__ref (mk_true_bool__ref (true_bool__content true_bool)))))
(define-fun true_bool__ref___projection ((a true_bool__ref)) true_bool 
  (true_bool__content a))

(define-fun dynamic_invariant1 ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 1 1)) (in_range2 temp___expr_136)))

(declare-sort integer 0)

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-fun dummy2 () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort natural 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(define-fun bool_eq3 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (natural natural) Bool)

(declare-fun dummy3 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (index index) Bool)

(declare-fun dummy4 () index)

(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))

(declare-fun to_rep1 (natural) Int)

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int natural) Int Int (Array Int natural) Int
  Int) (Array Int natural))

;; concat_def
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (natural Int) (Array Int natural))

;; singleton_def
  (assert
  (forall ((v natural))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int natural) Int Int (Array Int natural) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq5 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq5 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq5 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range3 f)
     (=> (in_range3 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range3 low)
                   (and (in_range3 high)
                   (=> (<= low high) (and (in_range5 low) (in_range5 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int natural)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int natural)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int natural)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))

(define-fun bool_eq6 ((x us_t)
  (y us_t)) Bool (bool_eq5 (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-fun dummy5 () us_t)

(declare-datatypes ()
((nat_array__ref (mk_nat_array__ref (nat_array__content us_t)))))
(define-fun nat_array__ref___projection ((a nat_array__ref)) us_t (nat_array__content
                                                                  a))

(declare-fun is_perm (us_t us_t) Bool)

(declare-fun is_perm__function_guard (Bool us_t us_t) Bool)

(declare-fun invariant__ (us_t) Bool)

(declare-fun invariant____function_guard (Bool us_t) Bool)

(declare-fun remove (us_t Int) us_t)

(declare-fun remove__function_guard (us_t us_t Int) Bool)

;; is_perm__def_axiom
  (assert
  (forall ((a us_t) (b us_t))
  (! (= (= (is_perm a b) true)
     (or (and (= (length a) 0) (= (length b) 0))
     (exists ((ia Int))
     (and (and (<= (first1 a) ia) (<= ia (last1 a)))
     (exists ((ib Int))
     (and (and (<= (first1 b) ib) (<= ib (last1 b)))
     (and
     (= (to_rep1 (select (to_array a) ia)) (to_rep1 (select (to_array b) ib)))
     (= (is_perm (remove a ia) (remove b ib)) true)))))))) :pattern (
  (is_perm a b)) )))

(define-fun dynamic_invariant2 ((temp___expr_148 us_t)
  (temp___is_init_145 Bool) (temp___skip_constant_146 Bool)
  (temp___do_toplevel_147 Bool)) Bool (=>
                                      (not (= temp___skip_constant_146 true))
                                      (dynamic_property 1 100
                                      (first1 temp___expr_148)
                                      (last1 temp___expr_148))))

(declare-fun perm_reflexive (us_t us_t) Int)

(declare-fun perm_reflexive__function_guard (Int us_t us_t) Bool)

;; perm_reflexive__post_axiom
  (assert
  (forall ((a us_t) (b us_t))
  (! (=>
     (and
     (and (dynamic_invariant2 a true true true) (dynamic_invariant2 b true
     true true))
     (and (= (invariant__ a) true)
     (and (= (invariant__ b) true)
     (= (bool_eq5 (to_array a) (first1 a) (last1 a) (to_array b) (first1 b)
        (last1 b)) true))))
     (let ((result (perm_reflexive a b)))
     (and (=> (= (of_int result) true) (= (is_perm a b) true))
     (dynamic_invariant1 result true false true)))) :pattern ((perm_reflexive
                                                              a b)) )))

(declare-fun perm_transitive (us_t us_t us_t) Int)

(declare-fun perm_transitive__function_guard (Int us_t us_t us_t) Bool)

;; perm_transitive__post_axiom
  (assert
  (forall ((a us_t) (b us_t) (c us_t))
  (! (=>
     (and
     (and
     (and (dynamic_invariant2 a true true true) (dynamic_invariant2 b true
     true true)) (dynamic_invariant2 c true true true))
     (and (= (invariant__ a) true)
     (and (= (invariant__ b) true)
     (and (= (invariant__ c) true)
     (and (= (is_perm a b) true) (= (is_perm b c) true))))))
     (let ((result (perm_transitive a b c)))
     (and (=> (= (of_int result) true) (= (is_perm a c) true))
     (dynamic_invariant1 result true false true)))) :pattern ((perm_transitive
                                                              a b c)) )))

(declare-sort tarray_typeP1 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(define-fun bool_eq7 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (tarray_typeP1 tarray_typeP1) Bool)

(declare-fun dummy6 () tarray_typeP1)

(declare-datatypes ()
((tarray_typeP1__ref
 (mk_tarray_typeP1__ref (tarray_typeP1__content tarray_typeP1)))))
(define-fun tarray_typeP1__ref___projection ((a tarray_typeP1__ref)) tarray_typeP1 
  (tarray_typeP1__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(define-fun dynamic_invariant3 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 100)) (in_range5
                                      temp___expr_142)))

(declare-fun index_of_minimum ((Array Int natural) Int Int) Int)

(declare-fun index_of_minimum__function_guard (Int (Array Int natural) Int
  Int) Bool)

;; index_of_minimum__post_axiom
  (assert
  (forall ((values (Array Int natural)))
  (forall ((first2 Int) (last2 Int))
  (! (=>
     (and
     (and (dynamic_invariant3 first2 true true true) (dynamic_invariant3
     last2 true true true))
     (and (<= first2 last2)
     (and (and (<= 1 first2) (<= first2 100))
     (and (<= 1 last2) (<= last2 100)))))
     (let ((result (index_of_minimum values first2 last2)))
     (and (and (<= first2 result) (<= result last2)) (dynamic_invariant
     result true false true)))) :pattern ((index_of_minimum values first2
                                          last2)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun init () (Array Int natural))

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-sort t11b 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 99)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (t11b t11b) Bool)

(declare-fun dummy7 () t11b)

(declare-datatypes () ((t11b__ref (mk_t11b__ref (t11b__content t11b)))))
(define-fun t11b__ref___projection ((a t11b__ref)) t11b (t11b__content a))

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(define-fun dynamic_invariant4 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_33)))

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_15)))

;; invariant____post_axiom
  (assert true)

;; invariant____def_axiom
  (assert
  (forall ((a us_t))
  (! (= (= (invariant__ a) true) (and (= (first1 a) 1) (<= 0 (last1 a)))) :pattern (
  (invariant__ a)) )))

;; remove__post_axiom
  (assert
  (forall ((a us_t))
  (forall ((i Int))
  (! (=>
     (and
     (and (dynamic_invariant2 a true true true) (dynamic_invariant3 i true
     true true))
     (and (= (invariant__ a) true) (and (<= (first1 a) i) (<= i (last1 a)))))
     (let ((result (remove a i)))
     (and
     (and (= (invariant__ result) true)
     (and (= (last1 result) (- (last1 a) 1))
     (and
     (forall ((k Int))
     (=> (and (<= 1 k) (<= k (- i 1)))
     (= (to_rep1 (select (to_array a) k)) (to_rep1
                                          (select (to_array result) k)))))
     (and
     (forall ((k Int))
     (=> (and (<= (+ i 1) k) (<= k (last1 a)))
     (= (to_rep1 (select (to_array a) k)) (to_rep1
                                          (select (to_array result) (- k 1))))))
     (forall ((k Int))
     (=> (and (<= i k) (<= k (- (last1 a) 1)))
     (= (to_rep1 (select (to_array a) (+ k 1))) (to_rep1
                                                (select (to_array result) k)))))))))
     (dynamic_invariant2 result true false true)))) :pattern ((remove a i)) ))))

(declare-fun values () (Array Int natural))

(declare-fun smallest () Int)

(declare-fun prec () (Array Int natural))

(declare-fun hr () Int)

(declare-fun current () Int)

(declare-fun o () Int)

(declare-fun temp___206 () (Array Int natural))

(declare-fun temp___205 () Int)

(declare-fun temp___204 () Int)

(declare-fun temp___203 () (Array Int natural))

(declare-fun temp___202 () Int)

(declare-fun temp___201 () (Array Int natural))

(declare-fun o1 () Int)

(declare-fun o2 () Int)

(declare-fun values1 () (Array Int natural))

(declare-fun smallest1 () Int)

(declare-fun result () (Array Int natural))

(declare-fun prec1 () (Array Int natural))

(declare-fun result1 () Int)

(declare-fun hr1 () Int)

(declare-fun result2 () Int)

(declare-fun current1 () Int)

(declare-fun result3 () Int)

(declare-fun smallest2 () Int)

(declare-fun result4 () (Array Int natural))

(declare-fun prec2 () (Array Int natural))

(declare-fun values2 () (Array Int natural))

(declare-fun result5 () Int)

(declare-fun hr2 () Int)

(declare-fun values3 () (Array Int natural))

(declare-fun smallest3 () Int)

(declare-fun prec3 () (Array Int natural))

(declare-fun hr3 () Int)

(declare-fun current2 () Int)

(declare-fun values4 () (Array Int natural))

(declare-fun smallest4 () int__ref)

(declare-fun prec4 () map__ref)

(declare-fun hr4 () int__ref)

(declare-fun current3 () int__ref)

(declare-fun values5 () (Array Int natural))

(declare-fun smallest5 () Int)

(declare-fun prec5 () (Array Int natural))

(declare-fun hr5 () Int)

(declare-fun current4 () Int)

(declare-fun values6 () map__ref)

(declare-fun smallest6 () int__ref)

(declare-fun prec6 () map__ref)

(declare-fun hr6 () int__ref)

(declare-fun current5 () int__ref)

(declare-fun values7 () (Array Int natural))

(declare-fun smallest7 () Int)

(declare-fun prec7 () (Array Int natural))

(declare-fun hr7 () Int)

(declare-fun current6 () Int)

(declare-fun values8 () map__ref)

(declare-fun smallest8 () int__ref)

(declare-fun prec8 () map__ref)

(declare-fun hr8 () int__ref)

(declare-fun current7 () int__ref)

(declare-fun values9 () (Array Int natural))

(declare-fun smallest9 () Int)

(declare-fun prec9 () (Array Int natural))

(declare-fun hr9 () Int)

(declare-fun current8 () Int)

(define-fun smallest10 () int__ref (mk_int__ref smallest))

;; H
  (assert (=> (<= 1 2147483647) (in_range1 smallest)))

;; H
  (assert (= values init))

;; H
  (assert (= (mk_map__ref result) (mk_map__ref prec)))

;; H
  (assert (= prec1 values))

;; H
  (assert (=> (<= 1 1) (in_range2 hr)))

;; H
  (assert
  (and
  (= o (perm_reflexive (mk___t values (mk 1 100)) (mk___t values (mk 1 100))))
  (and (in_range2 o)
  (=> (= (of_int o) true)
  (= (is_perm (mk___t values (mk 1 100)) (mk___t values (mk 1 100))) true)))))

;; H
  (assert (= (mk_int__ref result1) (mk_int__ref hr)))

;; H
  (assert (= hr1 o))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref current)))

;; H
  (assert (= current1 1))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= temp___206 values)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99)) (= temp___205 current1)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99)) (= temp___204 smallest)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= temp___203 values)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= temp___202 hr1)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= temp___201 prec1)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (and (= o1 (index_of_minimum values current1 100))
  (and (in_range1 o1) (and (<= current1 o1) (<= o1 100))))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (= (mk_int__ref result3) smallest10)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= smallest2 o1)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (= smallest2 current1)) (= prec1 result4))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (= smallest2 current1)) (= prec2 values))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (= smallest2 current1))
  (= (is_perm (mk___t values (mk 1 100)) (mk___t values2 (mk 1 100))) true))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (= smallest2 current1))
  (and
  (= o2 (perm_transitive (mk___t init (mk 1 100)) (mk___t prec2 (mk 1 100))
        (mk___t values2 (mk 1 100))))
  (and (in_range2 o2)
  (=> (= (of_int o2) true)
  (= (is_perm (mk___t init (mk 1 100)) (mk___t values2 (mk 1 100))) true)))))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (= smallest2 current1)) (= hr1 result5))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (= smallest2 current1)) (= hr2 o2))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (not (= smallest2 current1))) (= hr2 hr1))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (not (= smallest2 current1))) (= prec2 prec1))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (not (= smallest2 current1))) (= values2 values))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (not (= smallest2 current1))) (= hr2 hr1))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (not (= smallest2 current1))) (= prec2 prec1))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (=> (not (not (= smallest2 current1))) (= values2 values1))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (= (is_perm (mk___t temp___206 (mk 1 100)) (mk___t values3 (mk 1 100))) true)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (and
  (and
  (and (=> (<= 1 1) (in_range2 hr3))
  (=> (<= 1 2147483647) (in_range1 smallest3)))
  (=> (<= 1 99) (in_range7 current2)))
  (and (<= 1 current2) (<= current2 99)))))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= current2 99)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (= current3 (mk_int__ref current2))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99)) (= hr4 (mk_int__ref hr3))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99)) (= prec4 (mk_map__ref prec3))))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (= smallest4 (mk_int__ref smallest3))))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= values3 values4)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= current4 current2)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= hr5 hr3)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= prec5 prec3)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99)) (= smallest5 smallest3)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= values5 values3)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= current5 current3)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= hr6 hr4)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= prec6 prec4)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99)) (= smallest6 smallest4)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99))
  (= values6 (mk_map__ref values4))))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= current6 current4)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= hr7 hr5)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= prec7 prec5)))

;; H
  (assert
  (=> (and (<= 1 current1) (<= current1 99)) (= smallest7 smallest5)))

;; H
  (assert (=> (and (<= 1 current1) (<= current1 99)) (= values7 values5)))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 99)))
  (= current5 (mk_int__ref current1))))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 99))) (= hr6 (mk_int__ref hr1))))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 99)))
  (= prec6 (mk_map__ref prec1))))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 99))) (= smallest6 smallest10)))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 99)))
  (= values6 (mk_map__ref values))))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 99))) (= current6 current1)))

;; H
  (assert (=> (not (and (<= 1 current1) (<= current1 99))) (= hr7 hr1)))

;; H
  (assert (=> (not (and (<= 1 current1) (<= current1 99))) (= prec7 prec1)))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 99))) (= smallest7 smallest1)))

;; H
  (assert
  (=> (not (and (<= 1 current1) (<= current1 99))) (= values7 values1)))

;; H
  (assert (= current7 current5))

;; H
  (assert (= hr8 hr6))

;; H
  (assert (= prec8 prec6))

;; H
  (assert (= smallest8 smallest6))

;; H
  (assert (= values8 values6))

;; H
  (assert (= current8 current6))

;; H
  (assert (= hr9 hr7))

;; H
  (assert (= prec9 prec7))

;; H
  (assert (= smallest9 smallest7))

;; H
  (assert (= values9 values7))

(assert
;; WP_parameter_def
 ;; File "sort.adb", line 92, characters 0-0
  (not
  (= (is_perm (mk___t values (mk 1 100))
     (mk___t (map__content values8) (mk 1 100))) true)))
(check-sat)
