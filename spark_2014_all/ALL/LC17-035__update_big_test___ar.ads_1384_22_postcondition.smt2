;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort it3 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (it3 it3) Bool)

(declare-const dummy it3)

(declare-datatypes ((it3__ref 0)) (((mk_it3__ref (it3__content it3)))))
(define-fun it3__ref___projection ((a it3__ref)) it3 (it3__content a))

(define-fun dynamic_invariant ((temp___expr_164 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)) Bool (=>
                                      (or (= temp___is_init_161 true)
                                      (<= 1 16)) (in_range1 temp___expr_164)))

(declare-sort et1 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (et1 et1) Bool)

(declare-const dummy1 et1)

(declare-datatypes ((et1__ref 0)) (((mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))

(define-fun dynamic_invariant1 ((temp___expr_176 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)) Bool (=>
                                      (or (= temp___is_init_173 true)
                                      (<= 0 99)) (in_range2 temp___expr_176)))

(declare-fun to_rep (et1) Int)

(declare-fun of_rep (Int) et1)

;; inversion_axiom
  (assert
  (forall ((x et1)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x et1)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort et2 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 25)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (et2 et2) Bool)

(declare-const dummy2 et2)

(declare-datatypes ((et2__ref 0)) (((mk_et2__ref (et2__content et2)))))
(define-fun et2__ref___projection ((a et2__ref)) et2 (et2__content a))

(define-fun dynamic_invariant2 ((temp___expr_182 Int)
  (temp___is_init_179 Bool) (temp___skip_constant_180 Bool)
  (temp___do_toplevel_181 Bool)) Bool (=>
                                      (or (= temp___is_init_179 true)
                                      (<= 1 25)) (in_range3 temp___expr_182)))

(declare-fun to_rep1 (et2) Int)

(declare-fun of_rep1 (Int) et2)

;; inversion_axiom
  (assert
  (forall ((x et2)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x et2)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort et3 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 10 x) (<= x 90)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (et3 et3) Bool)

(declare-const dummy3 et3)

(declare-datatypes ((et3__ref 0)) (((mk_et3__ref (et3__content et3)))))
(define-fun et3__ref___projection ((a et3__ref)) et3 (et3__content a))

(define-fun dynamic_invariant3 ((temp___expr_188 Int)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)) Bool (=>
                                      (or (= temp___is_init_185 true)
                                      (<= 10 90)) (in_range4
                                      temp___expr_188)))

(declare-fun to_rep2 (et3) Int)

(declare-fun of_rep2 (Int) et3)

;; inversion_axiom
  (assert
  (forall ((x et3)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x et3)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort et4 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 50 x) (<= x 59)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (et4 et4) Bool)

(declare-const dummy4 et4)

(declare-datatypes ((et4__ref 0)) (((mk_et4__ref (et4__content et4)))))
(define-fun et4__ref___projection ((a et4__ref)) et4 (et4__content a))

(define-fun dynamic_invariant4 ((temp___expr_194 Int)
  (temp___is_init_191 Bool) (temp___skip_constant_192 Bool)
  (temp___do_toplevel_193 Bool)) Bool (=>
                                      (or (= temp___is_init_191 true)
                                      (<= 50 59)) (in_range5
                                      temp___expr_194)))

(declare-fun to_rep3 (et4) Int)

(declare-fun of_rep3 (Int) et4)

;; inversion_axiom
  (assert
  (forall ((x et4)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x et4)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort enum1ta 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (enum1ta enum1ta) Bool)

(declare-const dummy5 enum1ta)

(declare-datatypes ((enum1ta__ref 0))
(((mk_enum1ta__ref (enum1ta__content enum1ta)))))
(define-fun enum1ta__ref___projection ((a enum1ta__ref)) enum1ta (enum1ta__content
                                                                 a))

(define-fun dynamic_invariant5 ((temp___expr_212 Int)
  (temp___is_init_209 Bool) (temp___skip_constant_210 Bool)
  (temp___do_toplevel_211 Bool)) Bool (=>
                                      (or (= temp___is_init_209 true)
                                      (<= 1 4)) (in_range6 temp___expr_212)))

(declare-fun to_rep4 (enum1ta) Int)

(declare-fun of_rep4 (Int) enum1ta)

;; inversion_axiom
  (assert
  (forall ((x enum1ta))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x enum1ta)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__ar__rec1t__f1 et1)(rec__ar__rec1t__g1 et2)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) et1
  (rec__ar__rec1t__f1 a))

(define-fun us_split_fields_G1__projection ((a us_split_fields)) et2
  (rec__ar__rec1t__g1 a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep (rec__ar__rec1t__f1 (us_split_fields1 a)))
                        (to_rep (rec__ar__rec1t__f1 (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__ar__rec1t__g1 (us_split_fields1 a)))
                        (to_rep1 (rec__ar__rec1t__g1 (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const ar__rec1t__f1__first__bit Int)

(declare-const ar__rec1t__f1__last__bit Int)

(declare-const ar__rec1t__f1__position Int)

;; ar__rec1t__f1__first__bit_axiom
  (assert (<= 0 ar__rec1t__f1__first__bit))

;; ar__rec1t__f1__last__bit_axiom
  (assert (< ar__rec1t__f1__first__bit ar__rec1t__f1__last__bit))

;; ar__rec1t__f1__position_axiom
  (assert (<= 0 ar__rec1t__f1__position))

(declare-const ar__rec1t__g1__first__bit Int)

(declare-const ar__rec1t__g1__last__bit Int)

(declare-const ar__rec1t__g1__position Int)

;; ar__rec1t__g1__first__bit_axiom
  (assert (<= 0 ar__rec1t__g1__first__bit))

;; ar__rec1t__g1__last__bit_axiom
  (assert (< ar__rec1t__g1__first__bit ar__rec1t__g1__last__bit))

;; ar__rec1t__g1__position_axiom
  (assert (<= 0 ar__rec1t__g1__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((rec1t__ref 0))
(((mk_rec1t__ref (rec1t__content us_rep)))))
(define-fun rec1t__ref___projection ((a rec1t__ref)) us_rep (rec1t__content
                                                            a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1
  (rec__ar__rec2t__f2 et3)(rec__ar__rec2t__g2 us_rep)(rec__ar__rec2t__h2 enum1ta)))))
(define-fun us_split_fields_F2__projection ((a us_split_fields2)) et3
  (rec__ar__rec2t__f2 a))

(define-fun us_split_fields_G2__projection ((a us_split_fields2)) us_rep
  (rec__ar__rec2t__g2 a))

(define-fun us_split_fields_H2__projection ((a us_split_fields2)) enum1ta
  (rec__ar__rec2t__h2 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep2
                            (rec__ar__rec2t__f2 (us_split_fields3 a)))
                         (to_rep2 (rec__ar__rec2t__f2 (us_split_fields3 b))))
                         (= (bool_eq
                            (rec__ar__rec2t__g2 (us_split_fields3 a))
                            (rec__ar__rec2t__g2 (us_split_fields3 b))) true))
                         (= (to_rep4
                            (rec__ar__rec2t__h2 (us_split_fields3 a)))
                         (to_rep4 (rec__ar__rec2t__h2 (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const ar__rec2t__f2__first__bit Int)

(declare-const ar__rec2t__f2__last__bit Int)

(declare-const ar__rec2t__f2__position Int)

;; ar__rec2t__f2__first__bit_axiom
  (assert (<= 0 ar__rec2t__f2__first__bit))

;; ar__rec2t__f2__last__bit_axiom
  (assert (< ar__rec2t__f2__first__bit ar__rec2t__f2__last__bit))

;; ar__rec2t__f2__position_axiom
  (assert (<= 0 ar__rec2t__f2__position))

(declare-const ar__rec2t__g2__first__bit Int)

(declare-const ar__rec2t__g2__last__bit Int)

(declare-const ar__rec2t__g2__position Int)

;; ar__rec2t__g2__first__bit_axiom
  (assert (<= 0 ar__rec2t__g2__first__bit))

;; ar__rec2t__g2__last__bit_axiom
  (assert (< ar__rec2t__g2__first__bit ar__rec2t__g2__last__bit))

;; ar__rec2t__g2__position_axiom
  (assert (<= 0 ar__rec2t__g2__position))

(declare-const ar__rec2t__h2__first__bit Int)

(declare-const ar__rec2t__h2__last__bit Int)

(declare-const ar__rec2t__h2__position Int)

;; ar__rec2t__h2__first__bit_axiom
  (assert (<= 0 ar__rec2t__h2__first__bit))

;; ar__rec2t__h2__last__bit_axiom
  (assert (< ar__rec2t__h2__first__bit ar__rec2t__h2__last__bit))

;; ar__rec2t__h2__position_axiom
  (assert (<= 0 ar__rec2t__h2__position))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes ((rec2t__ref 0))
(((mk_rec2t__ref (rec2t__content us_rep1)))))
(define-fun rec2t__ref___projection ((a rec2t__ref)) us_rep1 (rec2t__content
                                                             a))

(declare-datatypes ((us_split_fields4 0))
(((mk___split_fields2 (rec__ar__rec3t__f3 us_rep1)(rec__ar__rec3t__g3 et4)))))
(define-fun us_split_fields_F3__projection ((a us_split_fields4)) us_rep1
  (rec__ar__rec3t__f3 a))

(define-fun us_split_fields_G3__projection ((a us_split_fields4)) et4
  (rec__ar__rec3t__g3 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (bool_eq1
                            (rec__ar__rec3t__f3 (us_split_fields5 a))
                            (rec__ar__rec3t__f3 (us_split_fields5 b))) true)
                         (= (to_rep3
                            (rec__ar__rec3t__g3 (us_split_fields5 a)))
                         (to_rep3 (rec__ar__rec3t__g3 (us_split_fields5 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-const ar__rec3t__f3__first__bit Int)

(declare-const ar__rec3t__f3__last__bit Int)

(declare-const ar__rec3t__f3__position Int)

;; ar__rec3t__f3__first__bit_axiom
  (assert (<= 0 ar__rec3t__f3__first__bit))

;; ar__rec3t__f3__last__bit_axiom
  (assert (< ar__rec3t__f3__first__bit ar__rec3t__f3__last__bit))

;; ar__rec3t__f3__position_axiom
  (assert (<= 0 ar__rec3t__f3__position))

(declare-const ar__rec3t__g3__first__bit Int)

(declare-const ar__rec3t__g3__last__bit Int)

(declare-const ar__rec3t__g3__position Int)

;; ar__rec3t__g3__first__bit_axiom
  (assert (<= 0 ar__rec3t__g3__first__bit))

;; ar__rec3t__g3__last__bit_axiom
  (assert (< ar__rec3t__g3__first__bit ar__rec3t__g3__last__bit))

;; ar__rec3t__g3__position_axiom
  (assert (<= 0 ar__rec3t__g3__position))

(declare-fun user_eq8 (us_rep2 us_rep2) Bool)

(declare-const dummy8 us_rep2)

(declare-datatypes ((rec3t__ref 0))
(((mk_rec3t__ref (rec3t__content us_rep2)))))
(define-fun rec3t__ref___projection ((a rec3t__ref)) us_rep2 (rec3t__content
                                                             a))

(declare-datatypes ((map__ref 0))
(((mk_map__ref (map__content (Array Int us_rep2))))))
(declare-fun slide ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int
  Int) (Array Int us_rep2))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep2 Int) (Array Int us_rep2))

;; singleton_def
  (assert
  (forall ((v us_rep2))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_138 Int))
                           (=>
                           (and (<= a__first temp___idx_138)
                           (<= temp___idx_138 a__last))
                           (= (bool_eq2 (select a temp___idx_138)
                              (select b (+ (- b__first a__first) temp___idx_138))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_138 Int))
  (=> (and (<= a__first temp___idx_138) (<= temp___idx_138 a__last))
  (= (bool_eq2 (select a temp___idx_138)
     (select b (+ (- b__first a__first) temp___idx_138))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const d Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const f Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const g Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const h Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const a (Array Int us_rep2))

(declare-const o et4)

(declare-const o1 et3)

(declare-const o2 et1)

(declare-const o3 et2)

(declare-const o4 enum1ta)

(declare-const o5 et4)

(declare-const o6 et3)

(declare-const o7 et1)

(declare-const o8 et2)

(declare-const o9 enum1ta)

(declare-const o10 et4)

(declare-const o11 (Array Int us_rep2))

(declare-const o12 et3)

(declare-const o13 et3)

(declare-const o14 et1)

(declare-const o15 et2)

(declare-const o16 enum1ta)

(declare-const o17 et3)

(declare-const o18 et1)

(declare-const o19 et2)

(declare-const o20 enum1ta)

(declare-const o21 et3)

(declare-const o22 et1)

(declare-const o23 et2)

(declare-const o24 enum1ta)

(declare-const o25 et4)

(declare-const o26 us_rep2)

(declare-const o27 (Array Int us_rep2))

(declare-const o28 et1)

(declare-const o29 us_split_fields)

(declare-const o30 us_rep)

(declare-const o31 us_split_fields2)

(declare-const o32 us_rep1)

(declare-const o33 us_split_fields4)

(declare-const o34 us_rep2)

(declare-const o35 (Array Int us_rep2))

(declare-const o36 et2)

(declare-const o37 us_split_fields)

(declare-const o38 us_rep)

(declare-const o39 us_split_fields2)

(declare-const o40 us_rep1)

(declare-const o41 us_split_fields4)

(declare-const o42 us_rep2)

(declare-const o43 (Array Int us_rep2))

(declare-const o44 enum1ta)

(declare-const o45 us_split_fields2)

(declare-const o46 us_rep1)

(declare-const o47 us_split_fields4)

(declare-const o48 us_rep2)

(declare-const o49 (Array Int us_rep2))

(declare-const result map__ref)

(declare-const a1 (Array Int us_rep2))

(declare-const result1 map__ref)

(declare-const a2 (Array Int us_rep2))

(declare-const result2 map__ref)

(declare-const a3 (Array Int us_rep2))

(declare-const result3 map__ref)

(declare-const a4 (Array Int us_rep2))

(declare-const result4 map__ref)

(declare-const a5 (Array Int us_rep2))

(declare-const a6 map__ref)

(declare-const a7 (Array Int us_rep2))

;; H
  (assert (in_range1 i))

;; H
  (assert (in_range5 d))

;; H
  (assert (in_range4 e))

;; H
  (assert (in_range2 f))

;; H
  (assert (in_range3 g))

;; H
  (assert (in_range6 h))

;; H
  (assert (= (to_rep3 o) d))

;; H
  (assert
  (= (rec__ar__rec3t__f3 (us_split_fields5 (select a i))) (mk___rep1
                                                          (mk___split_fields1
                                                          o1
                                                          (mk___rep
                                                          (mk___split_fields
                                                          o2 o3)) o4))))

;; H
  (assert (= o o5))

;; H
  (assert (= o6 o1))

;; H
  (assert (= o7 o2))

;; H
  (assert (= o8 o3))

;; H
  (assert (= o9 o4))

;; H
  (assert (= o10 o5))

;; H
  (assert
  (= o11 (store a i (mk___rep2
                    (mk___split_fields2
                    (mk___rep1
                    (mk___split_fields1 o6
                    (mk___rep (mk___split_fields o7 o8)) o9)) o10)))))

;; H
  (assert (= result (mk_map__ref a)))

;; H
  (assert (= a1 o11))

;; H
  (assert (= (to_rep2 o12) e))

;; H
  (assert (= o12 o13))

;; H
  (assert
  (= (rec__ar__rec2t__g2
     (us_split_fields3 (rec__ar__rec3t__f3 (us_split_fields5 (select a1 i)))))
  (mk___rep (mk___split_fields o14 o15))))

;; H
  (assert
  (= (rec__ar__rec2t__h2
     (us_split_fields3 (rec__ar__rec3t__f3 (us_split_fields5 (select a1 i)))))
  o16))

;; H
  (assert (= o17 o13))

;; H
  (assert (= o18 o14))

;; H
  (assert (= o19 o15))

;; H
  (assert (= o20 o16))

;; H
  (assert (= o21 o17))

;; H
  (assert (= o22 o18))

;; H
  (assert (= o23 o19))

;; H
  (assert (= o24 o20))

;; H
  (assert (= (rec__ar__rec3t__g3 (us_split_fields5 (select a1 i))) o25))

;; H
  (assert
  (= o26 (mk___rep2
         (mk___split_fields2
         (mk___rep1
         (mk___split_fields1 o21 (mk___rep (mk___split_fields o22 o23)) o24))
         o25))))

;; H
  (assert (= o27 (store a1 i o26)))

;; H
  (assert (= result1 (mk_map__ref a1)))

;; H
  (assert (= a2 o27))

;; H
  (assert (= (to_rep o28) f))

;; H
  (assert
  (= o29 (mk___split_fields o28
         (rec__ar__rec1t__g1
         (us_split_fields1
         (rec__ar__rec2t__g2
         (us_split_fields3
         (rec__ar__rec3t__f3 (us_split_fields5 (select a2 i))))))))))

;; H
  (assert (= o30 (mk___rep o29)))

;; H
  (assert
  (= o31 (mk___split_fields1
         (rec__ar__rec2t__f2
         (us_split_fields3
         (rec__ar__rec3t__f3 (us_split_fields5 (select a2 i))))) o30
         (rec__ar__rec2t__h2
         (us_split_fields3
         (rec__ar__rec3t__f3 (us_split_fields5 (select a2 i))))))))

;; H
  (assert (= o32 (mk___rep1 o31)))

;; H
  (assert
  (= o33 (mk___split_fields2 o32
         (rec__ar__rec3t__g3 (us_split_fields5 (select a2 i))))))

;; H
  (assert (= o34 (mk___rep2 o33)))

;; H
  (assert (= o35 (store a2 i o34)))

;; H
  (assert (= result2 (mk_map__ref a2)))

;; H
  (assert (= a3 o35))

;; H
  (assert (= (to_rep1 o36) g))

;; H
  (assert
  (= o37 (mk___split_fields
         (rec__ar__rec1t__f1
         (us_split_fields1
         (rec__ar__rec2t__g2
         (us_split_fields3
         (rec__ar__rec3t__f3 (us_split_fields5 (select a3 i))))))) o36)))

;; H
  (assert (= o38 (mk___rep o37)))

;; H
  (assert
  (= o39 (mk___split_fields1
         (rec__ar__rec2t__f2
         (us_split_fields3
         (rec__ar__rec3t__f3 (us_split_fields5 (select a3 i))))) o38
         (rec__ar__rec2t__h2
         (us_split_fields3
         (rec__ar__rec3t__f3 (us_split_fields5 (select a3 i))))))))

;; H
  (assert (= o40 (mk___rep1 o39)))

;; H
  (assert
  (= o41 (mk___split_fields2 o40
         (rec__ar__rec3t__g3 (us_split_fields5 (select a3 i))))))

;; H
  (assert (= o42 (mk___rep2 o41)))

;; H
  (assert (= o43 (store a3 i o42)))

;; H
  (assert (= result3 (mk_map__ref a3)))

;; H
  (assert (= a4 o43))

;; H
  (assert (= (to_rep4 o44) h))

;; H
  (assert
  (= o45 (mk___split_fields1
         (rec__ar__rec2t__f2
         (us_split_fields3
         (rec__ar__rec3t__f3 (us_split_fields5 (select a4 i)))))
         (rec__ar__rec2t__g2
         (us_split_fields3
         (rec__ar__rec3t__f3 (us_split_fields5 (select a4 i))))) o44)))

;; H
  (assert (= o46 (mk___rep1 o45)))

;; H
  (assert
  (= o47 (mk___split_fields2 o46
         (rec__ar__rec3t__g3 (us_split_fields5 (select a4 i))))))

;; H
  (assert (= o48 (mk___rep2 o47)))

;; H
  (assert (= o49 (store a4 i o48)))

;; H
  (assert (= result4 (mk_map__ref a4)))

;; H
  (assert (= a5 o49))

;; H
  (assert (= a6 (mk_map__ref a5)))

;; H
  (assert (= a7 a5))

(declare-const n Int)

;; H
  (assert (<= 1 n))

;; H
  (assert (<= n 16))

(assert
;; WP_parameter_def
 ;; File "ar.ads", line 1378, characters 0-0
  (not (in_range4
  (to_rep2
  (rec__ar__rec2t__f2
  (us_split_fields3
  (rec__ar__rec3t__f3 (us_split_fields5 (select (map__content a6) n)))))))))
(check-sat)
(exit)
