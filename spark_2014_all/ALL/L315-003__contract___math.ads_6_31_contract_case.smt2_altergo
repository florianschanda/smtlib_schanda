(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall res:int. forall math__sqrt__result:int. forall o:int.
  forall o1:int. forall o2:int. forall o3:int. forall temp___134:int.
  forall o4:int. forall o5:int. forall o6:int. forall o7:int. forall o8:int.
  forall o9:bool. forall result:int. forall res1:int. forall result1:bool.
  forall res2:int. forall result2:int. forall res3:int. forall result3:bool.
  forall res4:int. forall res5:int. forall res6:int. forall res7:int.
  forall result4:int. forall math__sqrt__result1:int.
  forall math__sqrt__result2:int. forall math__sqrt__result3:int.
  forall res8:int. forall math__sqrt__result4:int. forall res9:int.
  forall math__sqrt__result5:int. (in_range1(x) -> ((0 <= x) -> ((((({
  int__content = result } = { int__content = res }) and (res1 = 0)) and
  (in_range1(res1) and (((((((o = (res1 + 1)) and in_range1((res1 + 1))) and
  (((o1 = (res1 + 1)) and in_range1((res1 + 1))) and (o2 = (o1 * o)))) and
  ((o3 = o2) and in_range1(o2))) and (((o3 <= x) and (result1 = true)) or
  ((not (o3 <= x)) and (result1 = false)))) and (((result1 = true) and
  ((((temp___134 = res1) and (((((-2147483648) <= 2147483647) ->
  in_range1(res2)) and (((res2 + 1) * (res2 + 1)) <= x)) and
  ((((o4 = (res2 + 1)) and in_range1((res2 + 1))) and ((res2 = result2) and
  (res3 = o4))) and (((((((o5 = (res3 + 1)) and in_range1((res3 + 1))) and
  (((o6 = (res3 + 1)) and in_range1((res3 + 1))) and (o7 = (o6 * o5)))) and
  ((o8 = o7) and in_range1(o7))) and (((o8 <= x) and (o9 = true)) or
  ((not (o8 <= x)) and (o9 = false)))) and (((not (o9 = true)) and
  (result3 = true)) or ((o9 = true) and (result3 = false)))) and
  (result3 = true))))) and ((res3 = res4) and (res5 = res3))) and (({
  int__content = res6 } = { int__content = res4 }) and (res7 = res5)))) or
  ((not (result1 = true)) and ((res1 = res6) and (res7 = res1))))) and
  (((math__sqrt__result1 = math__sqrt__result2) and
  (math__sqrt__result3 = math__sqrt__result1)) and (({ int__content = result4
  } = { int__content = math__sqrt__result }) and
  (math__sqrt__result1 = res6)))))) and ((({ int__content =
  math__sqrt__result4 } = { int__content = math__sqrt__result2 }) and ({
  int__content = res8 } = { int__content = res6 })) and
  ((math__sqrt__result5 = math__sqrt__result3) and (res9 = res7)))) ->
  ((bool_eq(x, 0) = true) -> (math__sqrt__result4 = 0))))))
