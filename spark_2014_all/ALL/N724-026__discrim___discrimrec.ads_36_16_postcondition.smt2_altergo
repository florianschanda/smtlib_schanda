(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 4294967295)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic to_int : t -> int

logic of_int : int -> t

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  4294967296)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom1 :
  (forall i:t1. ((0 <= tqtint1(i)) and (tqtint1(i) <= 18446744073709551615)))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (64 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  64)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_and1(v1, v2), n) = match_bool(nth1(v1, n), nth1(v2, n), false))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_or1(v1, v2), n) = match_bool(nth1(v1, n), true, nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  64)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  64)) -> (nth1(bw_not1(v),
  n) = match_bool(nth1(v, n), false, true))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  64) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((64 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> (((n + s) <  64) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  64)) -> ((64 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (64 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  64))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 64))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  64)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 64))))))

logic to_int1 : t1 -> int

logic of_int1 : int -> t1

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 18446744073709551615))

axiom to_uint_bounds1 :
  (forall v:t1. ((0 <= tqtint1(v)) and (tqtint1(v) <  18446744073709551616)))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 64)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 18446744073709551615)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  18446744073709551616) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  18446744073709551616)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 18446744073709551616)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  18446744073709551616) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 18446744073709551616)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  18446744073709551616)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) <-> eq_sub_bv1(a, b, i, n)))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 64)]. (eq_sub1(x, y, 0, 64) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

logic bool_eq1 : t1, t1 -> bool

axiom bool_eq_def1 :
  (forall x:t1. forall y:t1 [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic bool_ne1 : t1, t1 -> bool

axiom bool_ne_def1 :
  (forall x:t1. forall y:t1 [bool_ne1(x, y)]. (((not (x = y)) -> (bool_ne1(x,
  y) = true)) and ((x = y) -> (bool_ne1(x, y) = false))))

logic bool_lt1 : t1, t1 -> bool

axiom bool_lt_def1 :
  (forall x:t1. forall y:t1 [bool_lt1(x, y)]. ((ult1(x, y) -> (bool_lt1(x,
  y) = true)) and ((not ult1(x, y)) -> (bool_lt1(x, y) = false))))

logic bool_le1 : t1, t1 -> bool

axiom bool_le_def1 :
  (forall x:t1. forall y:t1 [bool_le1(x, y)]. ((ule1(x, y) -> (bool_le1(x,
  y) = true)) and ((not ule1(x, y)) -> (bool_le1(x, y) = false))))

logic bool_gt1 : t1, t1 -> bool

axiom bool_gt_def1 :
  (forall x:t1. forall y:t1 [bool_gt1(x, y)]. ((ugt1(x, y) -> (bool_gt1(x,
  y) = true)) and ((not ugt1(x, y)) -> (bool_gt1(x, y) = false))))

logic bool_ge1 : t1, t1 -> bool

axiom bool_ge_def1 :
  (forall x:t1. forall y:t1 [bool_ge1(x, y)]. ((uge1(x, y) -> (bool_ge1(x,
  y) = true)) and ((not uge1(x, y)) -> (bool_ge1(x, y) = false))))

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

logic bv_min1 : t1, t1 -> t1

axiom bv_min_def1 :
  (forall x:t1. forall y:t1 [bv_min1(x, y)]. ((ule1(x, y) -> (bv_min1(x,
  y) = x)) and ((not ule1(x, y)) -> (bv_min1(x, y) = y))))

logic bv_max1 : t1, t1 -> t1

axiom bv_max_def1 :
  (forall x:t1. forall y:t1 [bv_max1(x, y)]. ((ule1(x, y) -> (bv_max1(x,
  y) = y)) and ((not ule1(x, y)) -> (bv_max1(x, y) = x))))

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

type unsigned_64

logic attr__ATTRIBUTE_MODULUS : t1

logic bool_eq2 : int, int -> bool

logic bool_ne2 : int, int -> bool

logic bool_lt2 : int, int -> bool

logic bool_le2 : int, int -> bool

logic bool_gt2 : int, int -> bool

logic bool_ge2 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne2(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt2(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le2(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt2(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge2(x, y) = true) <-> (y <= x))))

logic bool_eq3 : t1, t1 -> bool

axiom bool_eq_def2 :
  (forall x:t1. forall y:t1 [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> t1

logic user_eq : unsigned_64, unsigned_64 -> bool

logic dummy : unsigned_64

type unsigned_64__ref = { unsigned_64__content : unsigned_64
}

function unsigned_64__ref___projection(a: unsigned_64__ref) : unsigned_64 =
  (a).unsigned_64__content

logic to_rep : unsigned_64 -> t1

logic of_rep : t1 -> unsigned_64

axiom inversion_axiom :
  (forall x:unsigned_64 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : true

axiom coerce_axiom :
  (forall x:t1 [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int2(x: unsigned_64) : int = tqtint1(to_rep(x))

axiom range_int_axiom :
  (forall x:unsigned_64 [to_int2(x)]. uint_in_range1(to_int2(x)))

type unsigned_32

logic attr__ATTRIBUTE_MODULUS1 : t

logic bool_eq4 : t, t -> bool

axiom bool_eq_def3 :
  (forall x:t. forall y:t [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq1 : unsigned_32, unsigned_32 -> bool

logic dummy1 : unsigned_32

type unsigned_32__ref = { unsigned_32__content : unsigned_32
}

function unsigned_32__ref___projection(a: unsigned_32__ref) : unsigned_32 =
  (a).unsigned_32__content

logic to_rep1 : unsigned_32 -> t

logic of_rep1 : t -> unsigned_32

axiom inversion_axiom1 :
  (forall x:unsigned_32 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int3(x: unsigned_32) : int = tqtint(to_rep1(x))

axiom range_int_axiom1 :
  (forall x:unsigned_32 [to_int3(x)]. uint_in_range(to_int3(x)))

type t2

logic tqtint2 : t2 -> int

axiom tqtaxiom2 :
  (forall i:t2. ((0 <= tqtint2(i)) and (tqtint2(i) <= 65535)))

logic nth2 : t2, int -> bool

axiom nth_out_of_bound2 :
  (forall x:t2. forall n:int. (((n <  0) or (16 <= n)) -> (nth2(x,
  n) = false)))

logic zeros2 : t2

axiom Nth_zeros2 : (forall n:int. (nth2(zeros2, n) = false))

logic one2 : t2

logic ones2 : t2

axiom Nth_ones2 :
  (forall n:int. (((0 <= n) and (n <  16)) -> (nth2(ones2, n) = true)))

logic bw_and2 : t2, t2 -> t2

axiom Nth_bw_and2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth2(bw_and2(v1, v2), n) = match_bool(nth2(v1, n), nth2(v2, n), false))))

logic bw_or2 : t2, t2 -> t2

axiom Nth_bw_or2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth2(bw_or2(v1, v2), n) = match_bool(nth2(v1, n), true, nth2(v2, n)))))

logic bw_xor2 : t2, t2 -> t2

axiom Nth_bw_xor2 :
  (forall v1:t2. forall v2:t2. forall n:int. (((0 <= n) and (n <  16)) ->
  (nth2(bw_xor2(v1, v2), n) = xorb(nth2(v1, n), nth2(v2, n)))))

logic bw_not2 : t2 -> t2

axiom Nth_bw_not2 :
  (forall v:t2. forall n:int. (((0 <= n) and (n <  16)) -> (nth2(bw_not2(v),
  n) = match_bool(nth2(v, n), false, true))))

logic lsr2 : t2, int -> t2

axiom Lsr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  16) -> (nth2(lsr2(b, s), n) = nth2(b, (n + s)))))))

axiom Lsr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((16 <= (n + s)) -> (nth2(lsr2(b, s), n) = false)))))

axiom lsr_zeros2 : (forall x:t2. (lsr2(x, 0) = x))

logic asr2 : t2, int -> t2

axiom Asr_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> (((n + s) <  16) -> (nth2(asr2(b, s), n) = nth2(b,
  (n + s)))))))

axiom Asr_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  16)) -> ((16 <= (n + s)) -> (nth2(asr2(b, s), n) = nth2(b,
  (16 - 1)))))))

axiom asr_zeros2 : (forall x:t2. (asr2(x, 0) = x))

logic lsl2 : t2, int -> t2

axiom Lsl_nth_high2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  16))) -> (nth2(lsl2(b, s), n) = nth2(b, (n - s)))))

axiom Lsl_nth_low2 :
  (forall b:t2. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth2(lsl2(b, s), n) = false)))

axiom lsl_zeros2 : (forall x:t2. (lsl2(x, 0) = x))

logic rotate_right2 : t2, int -> t2

axiom Nth_rotate_right2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth2(rotate_right2(v, n), i) = nth2(v, ((i + n) % 16))))))

logic rotate_left2 : t2, int -> t2

axiom Nth_rotate_left2 :
  (forall v:t2. forall n:int. forall i:int. (((0 <= i) and (i <  16)) ->
  ((0 <= n) -> (nth2(rotate_left2(v, n), i) = nth2(v, ((i - n) % 16))))))

logic to_int4 : t2 -> int

logic of_int2 : int -> t2

axiom to_uint_extensionality2 :
  (forall v:t2. forall vqt:t2. ((tqtint2(v) = tqtint2(vqt)) -> (v = vqt)))

axiom to_int_extensionality2 :
  (forall v:t2. forall vqt:t2. ((to_int4(v) = to_int4(vqt)) -> (v = vqt)))

predicate uint_in_range2(i: int) = ((0 <= i) and (i <= 65535))

axiom to_uint_bounds2 :
  (forall v:t2. ((0 <= tqtint2(v)) and (tqtint2(v) <  65536)))

axiom to_uint_of_int2 :
  (forall i:int. (((0 <= i) and (i <  65536)) -> (tqtint2(of_int2(i)) = i)))

logic size_bv2 : t2

axiom to_uint_size_bv2 : (tqtint2(size_bv2) = 16)

axiom to_uint_zeros2 : (tqtint2(zeros2) = 0)

axiom to_uint_one2 : (tqtint2(one2) = 1)

axiom to_uint_ones2 : (tqtint2(ones2) = 65535)

predicate ult2(x: t2, y: t2) = (tqtint2(x) <  tqtint2(y))

predicate ule2(x: t2, y: t2) = (tqtint2(x) <= tqtint2(y))

predicate ugt2(x: t2, y: t2) = (tqtint2(y) <  tqtint2(x))

predicate uge2(x: t2, y: t2) = (tqtint2(y) <= tqtint2(x))

predicate slt2(v1: t2, v2: t2) = (to_int4(v1) <  to_int4(v2))

predicate sle2(v1: t2, v2: t2) = (to_int4(v1) <= to_int4(v2))

predicate sgt2(v1: t2, v2: t2) = (to_int4(v2) <  to_int4(v1))

predicate sge2(v1: t2, v2: t2) = (to_int4(v2) <= to_int4(v1))

logic add2 : t2, t2 -> t2

axiom to_uint_add_bounded2 :
  (forall v1:t2. forall v2:t2. (((tqtint2(v1) + tqtint2(v2)) <  65536) ->
  (tqtint2(add2(v1, v2)) = (tqtint2(v1) + tqtint2(v2)))))

logic sub2 : t2, t2 -> t2

axiom to_uint_sub_bounded2 :
  (forall v1:t2. forall v2:t2. (((0 <= (tqtint2(v1) - tqtint2(v2))) and
  ((tqtint2(v1) - tqtint2(v2)) <  65536)) -> (tqtint2(sub2(v1,
  v2)) = (tqtint2(v1) - tqtint2(v2)))))

logic neg2 : t2 -> t2

axiom to_uint_neg2 :
  (forall v:t2. (tqtint2(neg2(v)) = ((-tqtint2(v)) % 65536)))

logic mul2 : t2, t2 -> t2

axiom to_uint_mul_bounded2 :
  (forall v1:t2. forall v2:t2. (((tqtint2(v1) * tqtint2(v2)) <  65536) ->
  (tqtint2(mul2(v1, v2)) = (tqtint2(v1) * tqtint2(v2)))))

logic udiv2 : t2, t2 -> t2

axiom to_uint_udiv2 :
  (forall v1:t2. forall v2:t2. (tqtint2(udiv2(v1,
  v2)) = (tqtint2(v1) / tqtint2(v2))))

logic urem2 : t2, t2 -> t2

axiom to_uint_urem2 :
  (forall v1:t2. forall v2:t2. (tqtint2(urem2(v1,
  v2)) = (tqtint2(v1) % tqtint2(v2))))

logic lsr_bv2 : t2, t2 -> t2

axiom lsr_bv_is_lsr2 :
  (forall x:t2. forall n:t2. (lsr_bv2(x, n) = lsr2(x, tqtint2(n))))

axiom to_uint_lsr2 :
  (forall v:t2. forall n:t2. (tqtint2(lsr_bv2(v,
  n)) = (tqtint2(v) / pow2(tqtint2(n)))))

logic asr_bv2 : t2, t2 -> t2

axiom asr_bv_is_asr2 :
  (forall x:t2. forall n:t2. (asr_bv2(x, n) = asr2(x, tqtint2(n))))

logic lsl_bv2 : t2, t2 -> t2

axiom lsl_bv_is_lsl2 :
  (forall x:t2. forall n:t2. (lsl_bv2(x, n) = lsl2(x, tqtint2(n))))

axiom to_uint_lsl2 :
  (forall v:t2. forall n:t2. (tqtint2(lsl_bv2(v,
  n)) = ((tqtint2(v) * pow2(tqtint2(n))) % 65536)))

logic rotate_right_bv2 : t2, t2 -> t2

logic rotate_left_bv2 : t2, t2 -> t2

axiom rotate_left_bv_is_rotate_left2 :
  (forall v:t2. forall n:t2. (rotate_left_bv2(v, n) = rotate_left2(v,
  tqtint2(n))))

axiom rotate_right_bv_is_rotate_right2 :
  (forall v:t2. forall n:t2. (rotate_right_bv2(v, n) = rotate_right2(v,
  tqtint2(n))))

logic nth_bv2 : t2, t2 -> bool

axiom Nth_bv_is_nth3 :
  (forall x:t2. forall i:t2. (nth2(x, tqtint2(i)) = nth_bv2(x, i)))

axiom Nth_bv_is_nth22 :
  (forall x:t2. forall i:int. (((0 <= i) and (i <  65536)) -> (nth_bv2(x,
  of_int2(i)) = nth2(x, i))))

logic eq_sub_bv2 : t2, t2, t2, t2 -> prop

predicate eq_sub2(a: t2, b: t2, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth2(a, j) = nth2(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t2. forall b:t2. forall i:t2. forall n:t2. (eq_sub2(a, b,
  tqtint2(i), tqtint2(n)) <-> eq_sub_bv2(a, b, i, n)))

axiom Extensionality2 :
  (forall x:t2. forall y:t2 [eq_sub2(x, y, 0, 16)]. (eq_sub2(x, y, 0, 16) ->
  (x = y)))

type t__ref2 = { t__content2 : t2
}

logic bool_eq5 : t2, t2 -> bool

axiom bool_eq_def4 :
  (forall x:t2. forall y:t2 [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic bool_ne3 : t2, t2 -> bool

axiom bool_ne_def2 :
  (forall x:t2. forall y:t2 [bool_ne3(x, y)]. (((not (x = y)) -> (bool_ne3(x,
  y) = true)) and ((x = y) -> (bool_ne3(x, y) = false))))

logic bool_lt3 : t2, t2 -> bool

axiom bool_lt_def2 :
  (forall x:t2. forall y:t2 [bool_lt3(x, y)]. ((ult2(x, y) -> (bool_lt3(x,
  y) = true)) and ((not ult2(x, y)) -> (bool_lt3(x, y) = false))))

logic bool_le3 : t2, t2 -> bool

axiom bool_le_def2 :
  (forall x:t2. forall y:t2 [bool_le3(x, y)]. ((ule2(x, y) -> (bool_le3(x,
  y) = true)) and ((not ule2(x, y)) -> (bool_le3(x, y) = false))))

logic bool_gt3 : t2, t2 -> bool

axiom bool_gt_def2 :
  (forall x:t2. forall y:t2 [bool_gt3(x, y)]. ((ugt2(x, y) -> (bool_gt3(x,
  y) = true)) and ((not ugt2(x, y)) -> (bool_gt3(x, y) = false))))

logic bool_ge3 : t2, t2 -> bool

axiom bool_ge_def2 :
  (forall x:t2. forall y:t2 [bool_ge3(x, y)]. ((uge2(x, y) -> (bool_ge3(x,
  y) = true)) and ((not uge2(x, y)) -> (bool_ge3(x, y) = false))))

logic power2 : t2, int -> t2

axiom Power_03 : (forall x:t2. (power2(x, 0) = one2))

axiom Power_13 : (forall x:t2. (power2(x, 1) = x))

axiom Power_s3 :
  (forall x:t2. forall n:int. ((0 <= n) -> (power2(x, (n + 1)) = mul2(x,
  power2(x, n)))))

axiom Power_s_alt2 :
  (forall x:t2. forall n:int. ((0 <  n) -> (power2(x, n) = mul2(x, power2(x,
  (n - 1))))))

axiom Power_sum3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n + m)) = mul2(power2(x, n), power2(x, m))))))

axiom Power_mult3 :
  (forall x:t2. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power2(x, (n * m)) = power2(power2(x, n), m)))))

axiom Power_mult22 :
  (forall x:t2. forall y:t2. forall n:int. ((0 <= n) -> (power2(mul2(x, y),
  n) = mul2(power2(x, n), power2(y, n)))))

logic bv_min2 : t2, t2 -> t2

axiom bv_min_def2 :
  (forall x:t2. forall y:t2 [bv_min2(x, y)]. ((ule2(x, y) -> (bv_min2(x,
  y) = x)) and ((not ule2(x, y)) -> (bv_min2(x, y) = y))))

logic bv_max2 : t2, t2 -> t2

axiom bv_max_def2 :
  (forall x:t2. forall y:t2 [bv_max2(x, y)]. ((ule2(x, y) -> (bv_max2(x,
  y) = y)) and ((not ule2(x, y)) -> (bv_max2(x, y) = x))))

axiom bv_min_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_min2(x, y)) = min(tqtint2(x),
  tqtint2(y))))

axiom bv_max_to_uint2 :
  (forall x:t2. forall y:t2. (tqtint2(bv_max2(x, y)) = max(tqtint2(x),
  tqtint2(y))))

type unsigned_16

logic attr__ATTRIBUTE_MODULUS2 : t2

logic bool_eq6 : t2, t2 -> bool

axiom bool_eq_def5 :
  (forall x:t2. forall y:t2 [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : t2 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t2

logic user_eq2 : unsigned_16, unsigned_16 -> bool

logic dummy2 : unsigned_16

type unsigned_16__ref = { unsigned_16__content : unsigned_16
}

function unsigned_16__ref___projection(a: unsigned_16__ref) : unsigned_16 =
  (a).unsigned_16__content

type t3

logic tqtint3 : t3 -> int

axiom tqtaxiom3 : (forall i:t3. ((0 <= tqtint3(i)) and (tqtint3(i) <= 255)))

logic nth3 : t3, int -> bool

axiom nth_out_of_bound3 :
  (forall x:t3. forall n:int. (((n <  0) or (8 <= n)) -> (nth3(x,
  n) = false)))

logic zeros3 : t3

axiom Nth_zeros3 : (forall n:int. (nth3(zeros3, n) = false))

logic one3 : t3

logic ones3 : t3

axiom Nth_ones3 :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth3(ones3, n) = true)))

logic bw_and3 : t3, t3 -> t3

axiom Nth_bw_and3 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth3(bw_and3(v1, v2), n) = match_bool(nth3(v1, n), nth3(v2, n), false))))

logic bw_or3 : t3, t3 -> t3

axiom Nth_bw_or3 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth3(bw_or3(v1, v2), n) = match_bool(nth3(v1, n), true, nth3(v2, n)))))

logic bw_xor3 : t3, t3 -> t3

axiom Nth_bw_xor3 :
  (forall v1:t3. forall v2:t3. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth3(bw_xor3(v1, v2), n) = xorb(nth3(v1, n), nth3(v2, n)))))

logic bw_not3 : t3 -> t3

axiom Nth_bw_not3 :
  (forall v:t3. forall n:int. (((0 <= n) and (n <  8)) -> (nth3(bw_not3(v),
  n) = match_bool(nth3(v, n), false, true))))

logic lsr3 : t3, int -> t3

axiom Lsr_nth_low3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth3(lsr3(b, s), n) = nth3(b, (n + s)))))))

axiom Lsr_nth_high3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth3(lsr3(b, s), n) = false)))))

axiom lsr_zeros3 : (forall x:t3. (lsr3(x, 0) = x))

logic asr3 : t3, int -> t3

axiom Asr_nth_low3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth3(asr3(b, s), n) = nth3(b,
  (n + s)))))))

axiom Asr_nth_high3 :
  (forall b:t3. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth3(asr3(b, s), n) = nth3(b,
  (8 - 1)))))))

axiom asr_zeros3 : (forall x:t3. (asr3(x, 0) = x))

logic lsl3 : t3, int -> t3

axiom Lsl_nth_high3 :
  (forall b:t3. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth3(lsl3(b, s), n) = nth3(b, (n - s)))))

axiom Lsl_nth_low3 :
  (forall b:t3. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth3(lsl3(b, s), n) = false)))

axiom lsl_zeros3 : (forall x:t3. (lsl3(x, 0) = x))

logic rotate_right3 : t3, int -> t3

axiom Nth_rotate_right3 :
  (forall v:t3. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth3(rotate_right3(v, n), i) = nth3(v, ((i + n) % 8))))))

logic rotate_left3 : t3, int -> t3

axiom Nth_rotate_left3 :
  (forall v:t3. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth3(rotate_left3(v, n), i) = nth3(v, ((i - n) % 8))))))

logic to_int5 : t3 -> int

logic of_int3 : int -> t3

axiom to_uint_extensionality3 :
  (forall v:t3. forall vqt:t3. ((tqtint3(v) = tqtint3(vqt)) -> (v = vqt)))

axiom to_int_extensionality3 :
  (forall v:t3. forall vqt:t3. ((to_int5(v) = to_int5(vqt)) -> (v = vqt)))

predicate uint_in_range3(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds3 :
  (forall v:t3. ((0 <= tqtint3(v)) and (tqtint3(v) <  256)))

axiom to_uint_of_int3 :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint3(of_int3(i)) = i)))

logic size_bv3 : t3

axiom to_uint_size_bv3 : (tqtint3(size_bv3) = 8)

axiom to_uint_zeros3 : (tqtint3(zeros3) = 0)

axiom to_uint_one3 : (tqtint3(one3) = 1)

axiom to_uint_ones3 : (tqtint3(ones3) = 255)

predicate ult3(x: t3, y: t3) = (tqtint3(x) <  tqtint3(y))

predicate ule3(x: t3, y: t3) = (tqtint3(x) <= tqtint3(y))

predicate ugt3(x: t3, y: t3) = (tqtint3(y) <  tqtint3(x))

predicate uge3(x: t3, y: t3) = (tqtint3(y) <= tqtint3(x))

predicate slt3(v1: t3, v2: t3) = (to_int5(v1) <  to_int5(v2))

predicate sle3(v1: t3, v2: t3) = (to_int5(v1) <= to_int5(v2))

predicate sgt3(v1: t3, v2: t3) = (to_int5(v2) <  to_int5(v1))

predicate sge3(v1: t3, v2: t3) = (to_int5(v2) <= to_int5(v1))

logic add3 : t3, t3 -> t3

axiom to_uint_add_bounded3 :
  (forall v1:t3. forall v2:t3. (((tqtint3(v1) + tqtint3(v2)) <  256) ->
  (tqtint3(add3(v1, v2)) = (tqtint3(v1) + tqtint3(v2)))))

logic sub3 : t3, t3 -> t3

axiom to_uint_sub_bounded3 :
  (forall v1:t3. forall v2:t3. (((0 <= (tqtint3(v1) - tqtint3(v2))) and
  ((tqtint3(v1) - tqtint3(v2)) <  256)) -> (tqtint3(sub3(v1,
  v2)) = (tqtint3(v1) - tqtint3(v2)))))

logic neg3 : t3 -> t3

axiom to_uint_neg3 :
  (forall v:t3. (tqtint3(neg3(v)) = ((-tqtint3(v)) % 256)))

logic mul3 : t3, t3 -> t3

axiom to_uint_mul_bounded3 :
  (forall v1:t3. forall v2:t3. (((tqtint3(v1) * tqtint3(v2)) <  256) ->
  (tqtint3(mul3(v1, v2)) = (tqtint3(v1) * tqtint3(v2)))))

logic udiv3 : t3, t3 -> t3

axiom to_uint_udiv3 :
  (forall v1:t3. forall v2:t3. (tqtint3(udiv3(v1,
  v2)) = (tqtint3(v1) / tqtint3(v2))))

logic urem3 : t3, t3 -> t3

axiom to_uint_urem3 :
  (forall v1:t3. forall v2:t3. (tqtint3(urem3(v1,
  v2)) = (tqtint3(v1) % tqtint3(v2))))

logic lsr_bv3 : t3, t3 -> t3

axiom lsr_bv_is_lsr3 :
  (forall x:t3. forall n:t3. (lsr_bv3(x, n) = lsr3(x, tqtint3(n))))

axiom to_uint_lsr3 :
  (forall v:t3. forall n:t3. (tqtint3(lsr_bv3(v,
  n)) = (tqtint3(v) / pow2(tqtint3(n)))))

logic asr_bv3 : t3, t3 -> t3

axiom asr_bv_is_asr3 :
  (forall x:t3. forall n:t3. (asr_bv3(x, n) = asr3(x, tqtint3(n))))

logic lsl_bv3 : t3, t3 -> t3

axiom lsl_bv_is_lsl3 :
  (forall x:t3. forall n:t3. (lsl_bv3(x, n) = lsl3(x, tqtint3(n))))

axiom to_uint_lsl3 :
  (forall v:t3. forall n:t3. (tqtint3(lsl_bv3(v,
  n)) = ((tqtint3(v) * pow2(tqtint3(n))) % 256)))

logic rotate_right_bv3 : t3, t3 -> t3

logic rotate_left_bv3 : t3, t3 -> t3

axiom rotate_left_bv_is_rotate_left3 :
  (forall v:t3. forall n:t3. (rotate_left_bv3(v, n) = rotate_left3(v,
  tqtint3(n))))

axiom rotate_right_bv_is_rotate_right3 :
  (forall v:t3. forall n:t3. (rotate_right_bv3(v, n) = rotate_right3(v,
  tqtint3(n))))

logic nth_bv3 : t3, t3 -> bool

axiom Nth_bv_is_nth4 :
  (forall x:t3. forall i:t3. (nth3(x, tqtint3(i)) = nth_bv3(x, i)))

axiom Nth_bv_is_nth23 :
  (forall x:t3. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv3(x,
  of_int3(i)) = nth3(x, i))))

logic eq_sub_bv3 : t3, t3, t3, t3 -> prop

predicate eq_sub3(a: t3, b: t3, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth3(a, j) = nth3(b,
  j))))

axiom eq_sub_equiv3 :
  (forall a:t3. forall b:t3. forall i:t3. forall n:t3. (eq_sub3(a, b,
  tqtint3(i), tqtint3(n)) <-> eq_sub_bv3(a, b, i, n)))

axiom Extensionality3 :
  (forall x:t3. forall y:t3 [eq_sub3(x, y, 0, 8)]. (eq_sub3(x, y, 0, 8) ->
  (x = y)))

type t__ref3 = { t__content3 : t3
}

logic bool_eq7 : t3, t3 -> bool

axiom bool_eq_def6 :
  (forall x:t3. forall y:t3 [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic bool_ne4 : t3, t3 -> bool

axiom bool_ne_def3 :
  (forall x:t3. forall y:t3 [bool_ne4(x, y)]. (((not (x = y)) -> (bool_ne4(x,
  y) = true)) and ((x = y) -> (bool_ne4(x, y) = false))))

logic bool_lt4 : t3, t3 -> bool

axiom bool_lt_def3 :
  (forall x:t3. forall y:t3 [bool_lt4(x, y)]. ((ult3(x, y) -> (bool_lt4(x,
  y) = true)) and ((not ult3(x, y)) -> (bool_lt4(x, y) = false))))

logic bool_le4 : t3, t3 -> bool

axiom bool_le_def3 :
  (forall x:t3. forall y:t3 [bool_le4(x, y)]. ((ule3(x, y) -> (bool_le4(x,
  y) = true)) and ((not ule3(x, y)) -> (bool_le4(x, y) = false))))

logic bool_gt4 : t3, t3 -> bool

axiom bool_gt_def3 :
  (forall x:t3. forall y:t3 [bool_gt4(x, y)]. ((ugt3(x, y) -> (bool_gt4(x,
  y) = true)) and ((not ugt3(x, y)) -> (bool_gt4(x, y) = false))))

logic bool_ge4 : t3, t3 -> bool

axiom bool_ge_def3 :
  (forall x:t3. forall y:t3 [bool_ge4(x, y)]. ((uge3(x, y) -> (bool_ge4(x,
  y) = true)) and ((not uge3(x, y)) -> (bool_ge4(x, y) = false))))

logic power3 : t3, int -> t3

axiom Power_04 : (forall x:t3. (power3(x, 0) = one3))

axiom Power_14 : (forall x:t3. (power3(x, 1) = x))

axiom Power_s4 :
  (forall x:t3. forall n:int. ((0 <= n) -> (power3(x, (n + 1)) = mul3(x,
  power3(x, n)))))

axiom Power_s_alt3 :
  (forall x:t3. forall n:int. ((0 <  n) -> (power3(x, n) = mul3(x, power3(x,
  (n - 1))))))

axiom Power_sum4 :
  (forall x:t3. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power3(x, (n + m)) = mul3(power3(x, n), power3(x, m))))))

axiom Power_mult4 :
  (forall x:t3. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power3(x, (n * m)) = power3(power3(x, n), m)))))

axiom Power_mult23 :
  (forall x:t3. forall y:t3. forall n:int. ((0 <= n) -> (power3(mul3(x, y),
  n) = mul3(power3(x, n), power3(y, n)))))

logic bv_min3 : t3, t3 -> t3

axiom bv_min_def3 :
  (forall x:t3. forall y:t3 [bv_min3(x, y)]. ((ule3(x, y) -> (bv_min3(x,
  y) = x)) and ((not ule3(x, y)) -> (bv_min3(x, y) = y))))

logic bv_max3 : t3, t3 -> t3

axiom bv_max_def3 :
  (forall x:t3. forall y:t3 [bv_max3(x, y)]. ((ule3(x, y) -> (bv_max3(x,
  y) = y)) and ((not ule3(x, y)) -> (bv_max3(x, y) = x))))

axiom bv_min_to_uint3 :
  (forall x:t3. forall y:t3. (tqtint3(bv_min3(x, y)) = min(tqtint3(x),
  tqtint3(y))))

axiom bv_max_to_uint3 :
  (forall x:t3. forall y:t3. (tqtint3(bv_max3(x, y)) = max(tqtint3(x),
  tqtint3(y))))

type unsigned_8

logic attr__ATTRIBUTE_MODULUS3 : t3

logic bool_eq8 : t3, t3 -> bool

axiom bool_eq_def7 :
  (forall x:t3. forall y:t3 [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : t3 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t3

logic user_eq3 : unsigned_8, unsigned_8 -> bool

logic dummy3 : unsigned_8

type unsigned_8__ref = { unsigned_8__content : unsigned_8
}

function unsigned_8__ref___projection(a: unsigned_8__ref) : unsigned_8 =
  (a).unsigned_8__content

type register_option

predicate in_range(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : register_option, register_option -> bool

logic dummy4 : register_option

type register_option__ref = { register_option__content : register_option
}

function register_option__ref___projection(a: register_option__ref) : register_option =
  (a).register_option__content

logic to_rep2 : register_option -> int

logic of_rep2 : int -> register_option

axiom inversion_axiom2 :
  (forall x:register_option [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:register_option [to_rep2(x)]. in_range(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic to_rep3 : unsigned_16 -> t2

logic of_rep3 : t2 -> unsigned_16

axiom inversion_axiom3 :
  (forall x:unsigned_16 [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : true

axiom coerce_axiom3 :
  (forall x:t2 [to_rep3(of_rep3(x))]. (to_rep3(of_rep3(x)) = x))

function to_int6(x: unsigned_16) : int = tqtint2(to_rep3(x))

axiom range_int_axiom2 :
  (forall x:unsigned_16 [to_int6(x)]. uint_in_range2(to_int6(x)))

logic to_rep4 : unsigned_8 -> t3

logic of_rep4 : t3 -> unsigned_8

axiom inversion_axiom4 :
  (forall x:unsigned_8 [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : true

axiom coerce_axiom4 :
  (forall x:t3 [to_rep4(of_rep4(x))]. (to_rep4(of_rep4(x)) = x))

function to_int7(x: unsigned_8) : int = tqtint3(to_rep4(x))

axiom range_int_axiom3 :
  (forall x:unsigned_8 [to_int7(x)]. uint_in_range3(to_int7(x)))

type us_split_discrs = { rec__discrimrec__register_type__option :
register_option
}

function us_split_discrs___projection(a: us_split_discrs) : register_option =
  (a).rec__discrimrec__register_type__option

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__discrimrec__register_type__value_64 :
unsigned_64; rec__discrimrec__register_type__ignore_32a : unsigned_32;
rec__discrimrec__register_type__value_32 : unsigned_32;
rec__discrimrec__register_type__ignore_32b : unsigned_32;
rec__discrimrec__register_type__ignore_16a : unsigned_16;
rec__discrimrec__register_type__value_16 : unsigned_16;
rec__discrimrec__register_type__ignore_32c : unsigned_32;
rec__discrimrec__register_type__ignore_16b : unsigned_16;
rec__discrimrec__register_type__value_high : unsigned_8;
rec__discrimrec__register_type__value_low : unsigned_8
}

function us_split_fields_Value_64__projection(a: us_split_fields) : unsigned_64 =
  (a).rec__discrimrec__register_type__value_64

function us_split_fields_Ignore_32a__projection(a: us_split_fields) : unsigned_32 =
  (a).rec__discrimrec__register_type__ignore_32a

function us_split_fields_Value_32__projection(a: us_split_fields) : unsigned_32 =
  (a).rec__discrimrec__register_type__value_32

function us_split_fields_Ignore_32b__projection(a: us_split_fields) : unsigned_32 =
  (a).rec__discrimrec__register_type__ignore_32b

function us_split_fields_Ignore_16a__projection(a: us_split_fields) : unsigned_16 =
  (a).rec__discrimrec__register_type__ignore_16a

function us_split_fields_Value_16__projection(a: us_split_fields) : unsigned_16 =
  (a).rec__discrimrec__register_type__value_16

function us_split_fields_Ignore_32c__projection(a: us_split_fields) : unsigned_32 =
  (a).rec__discrimrec__register_type__ignore_32c

function us_split_fields_Ignore_16b__projection(a: us_split_fields) : unsigned_16 =
  (a).rec__discrimrec__register_type__ignore_16b

function us_split_fields_Value_High__projection(a: us_split_fields) : unsigned_8 =
  (a).rec__discrimrec__register_type__value_high

function us_split_fields_Value_Low__projection(a: us_split_fields) : unsigned_8 =
  (a).rec__discrimrec__register_type__value_low

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_3__projection(a: us_rep) : bool = (a).attr__constrained

predicate discrimrec__register_type__value_64__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = 0)

predicate discrimrec__register_type__ignore_32a__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = 1)

predicate discrimrec__register_type__value_32__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = 1)

predicate discrimrec__register_type__ignore_32b__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = 2)

predicate discrimrec__register_type__ignore_16a__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = 2)

predicate discrimrec__register_type__value_16__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = 2)

predicate discrimrec__register_type__ignore_32c__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = 3)

predicate discrimrec__register_type__ignore_16b__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = 3)

predicate discrimrec__register_type__value_high__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = 3)

predicate discrimrec__register_type__value_low__pred(a: us_rep) =
  (to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = 3)

logic bool_eq10 : us_rep, us_rep -> bool

axiom bool_eq_def9 :
  (forall a:us_rep. forall b:us_rep [bool_eq10(a, b)].
  (((((((((((((to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = to_rep2(((b).us_split_discrs1).rec__discrimrec__register_type__option)) and
  (discrimrec__register_type__value_64__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__discrimrec__register_type__value_64) = to_rep(((b).us_split_fields1).rec__discrimrec__register_type__value_64)))) and
  (discrimrec__register_type__ignore_32a__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__discrimrec__register_type__ignore_32a) = to_rep1(((b).us_split_fields1).rec__discrimrec__register_type__ignore_32a)))) and
  (discrimrec__register_type__value_32__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__discrimrec__register_type__value_32) = to_rep1(((b).us_split_fields1).rec__discrimrec__register_type__value_32)))) and
  (discrimrec__register_type__ignore_32b__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__discrimrec__register_type__ignore_32b) = to_rep1(((b).us_split_fields1).rec__discrimrec__register_type__ignore_32b)))) and
  (discrimrec__register_type__ignore_16a__pred(a) ->
  (to_rep3(((a).us_split_fields1).rec__discrimrec__register_type__ignore_16a) = to_rep3(((b).us_split_fields1).rec__discrimrec__register_type__ignore_16a)))) and
  (discrimrec__register_type__value_16__pred(a) ->
  (to_rep3(((a).us_split_fields1).rec__discrimrec__register_type__value_16) = to_rep3(((b).us_split_fields1).rec__discrimrec__register_type__value_16)))) and
  (discrimrec__register_type__ignore_32c__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__discrimrec__register_type__ignore_32c) = to_rep1(((b).us_split_fields1).rec__discrimrec__register_type__ignore_32c)))) and
  (discrimrec__register_type__ignore_16b__pred(a) ->
  (to_rep3(((a).us_split_fields1).rec__discrimrec__register_type__ignore_16b) = to_rep3(((b).us_split_fields1).rec__discrimrec__register_type__ignore_16b)))) and
  (discrimrec__register_type__value_high__pred(a) ->
  (to_rep4(((a).us_split_fields1).rec__discrimrec__register_type__value_high) = to_rep4(((b).us_split_fields1).rec__discrimrec__register_type__value_high)))) and
  (discrimrec__register_type__value_low__pred(a) ->
  (to_rep4(((a).us_split_fields1).rec__discrimrec__register_type__value_low) = to_rep4(((b).us_split_fields1).rec__discrimrec__register_type__value_low)))) ->
  (bool_eq10(a, b) = true)) and
  ((not (((((((((((to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option) = to_rep2(((b).us_split_discrs1).rec__discrimrec__register_type__option)) and
  (discrimrec__register_type__value_64__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__discrimrec__register_type__value_64) = to_rep(((b).us_split_fields1).rec__discrimrec__register_type__value_64)))) and
  (discrimrec__register_type__ignore_32a__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__discrimrec__register_type__ignore_32a) = to_rep1(((b).us_split_fields1).rec__discrimrec__register_type__ignore_32a)))) and
  (discrimrec__register_type__value_32__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__discrimrec__register_type__value_32) = to_rep1(((b).us_split_fields1).rec__discrimrec__register_type__value_32)))) and
  (discrimrec__register_type__ignore_32b__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__discrimrec__register_type__ignore_32b) = to_rep1(((b).us_split_fields1).rec__discrimrec__register_type__ignore_32b)))) and
  (discrimrec__register_type__ignore_16a__pred(a) ->
  (to_rep3(((a).us_split_fields1).rec__discrimrec__register_type__ignore_16a) = to_rep3(((b).us_split_fields1).rec__discrimrec__register_type__ignore_16a)))) and
  (discrimrec__register_type__value_16__pred(a) ->
  (to_rep3(((a).us_split_fields1).rec__discrimrec__register_type__value_16) = to_rep3(((b).us_split_fields1).rec__discrimrec__register_type__value_16)))) and
  (discrimrec__register_type__ignore_32c__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__discrimrec__register_type__ignore_32c) = to_rep1(((b).us_split_fields1).rec__discrimrec__register_type__ignore_32c)))) and
  (discrimrec__register_type__ignore_16b__pred(a) ->
  (to_rep3(((a).us_split_fields1).rec__discrimrec__register_type__ignore_16b) = to_rep3(((b).us_split_fields1).rec__discrimrec__register_type__ignore_16b)))) and
  (discrimrec__register_type__value_high__pred(a) ->
  (to_rep4(((a).us_split_fields1).rec__discrimrec__register_type__value_high) = to_rep4(((b).us_split_fields1).rec__discrimrec__register_type__value_high)))) and
  (discrimrec__register_type__value_low__pred(a) ->
  (to_rep4(((a).us_split_fields1).rec__discrimrec__register_type__value_low) = to_rep4(((b).us_split_fields1).rec__discrimrec__register_type__value_low))))) ->
  (bool_eq10(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__size({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__alignment({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

logic discrimrec__register_type__option__first__bit : int

logic discrimrec__register_type__option__last__bit : int

logic discrimrec__register_type__option__position : int

axiom discrimrec__register_type__option__first__bit_axiom :
  (0 <= discrimrec__register_type__option__first__bit)

axiom discrimrec__register_type__option__last__bit_axiom :
  (discrimrec__register_type__option__first__bit <  discrimrec__register_type__option__last__bit)

axiom discrimrec__register_type__option__position_axiom :
  (0 <= discrimrec__register_type__option__position)

logic discrimrec__register_type__value_64__first__bit : int

logic discrimrec__register_type__value_64__last__bit : int

logic discrimrec__register_type__value_64__position : int

axiom discrimrec__register_type__value_64__first__bit_axiom :
  (0 <= discrimrec__register_type__value_64__first__bit)

axiom discrimrec__register_type__value_64__last__bit_axiom :
  (discrimrec__register_type__value_64__first__bit <  discrimrec__register_type__value_64__last__bit)

axiom discrimrec__register_type__value_64__position_axiom :
  (0 <= discrimrec__register_type__value_64__position)

logic discrimrec__register_type__ignore_32a__first__bit : int

logic discrimrec__register_type__ignore_32a__last__bit : int

logic discrimrec__register_type__ignore_32a__position : int

axiom discrimrec__register_type__ignore_32a__first__bit_axiom :
  (0 <= discrimrec__register_type__ignore_32a__first__bit)

axiom discrimrec__register_type__ignore_32a__last__bit_axiom :
  (discrimrec__register_type__ignore_32a__first__bit <  discrimrec__register_type__ignore_32a__last__bit)

axiom discrimrec__register_type__ignore_32a__position_axiom :
  (0 <= discrimrec__register_type__ignore_32a__position)

logic discrimrec__register_type__value_32__first__bit : int

logic discrimrec__register_type__value_32__last__bit : int

logic discrimrec__register_type__value_32__position : int

axiom discrimrec__register_type__value_32__first__bit_axiom :
  (0 <= discrimrec__register_type__value_32__first__bit)

axiom discrimrec__register_type__value_32__last__bit_axiom :
  (discrimrec__register_type__value_32__first__bit <  discrimrec__register_type__value_32__last__bit)

axiom discrimrec__register_type__value_32__position_axiom :
  (0 <= discrimrec__register_type__value_32__position)

logic discrimrec__register_type__ignore_32b__first__bit : int

logic discrimrec__register_type__ignore_32b__last__bit : int

logic discrimrec__register_type__ignore_32b__position : int

axiom discrimrec__register_type__ignore_32b__first__bit_axiom :
  (0 <= discrimrec__register_type__ignore_32b__first__bit)

axiom discrimrec__register_type__ignore_32b__last__bit_axiom :
  (discrimrec__register_type__ignore_32b__first__bit <  discrimrec__register_type__ignore_32b__last__bit)

axiom discrimrec__register_type__ignore_32b__position_axiom :
  (0 <= discrimrec__register_type__ignore_32b__position)

logic discrimrec__register_type__ignore_16a__first__bit : int

logic discrimrec__register_type__ignore_16a__last__bit : int

logic discrimrec__register_type__ignore_16a__position : int

axiom discrimrec__register_type__ignore_16a__first__bit_axiom :
  (0 <= discrimrec__register_type__ignore_16a__first__bit)

axiom discrimrec__register_type__ignore_16a__last__bit_axiom :
  (discrimrec__register_type__ignore_16a__first__bit <  discrimrec__register_type__ignore_16a__last__bit)

axiom discrimrec__register_type__ignore_16a__position_axiom :
  (0 <= discrimrec__register_type__ignore_16a__position)

logic discrimrec__register_type__value_16__first__bit : int

logic discrimrec__register_type__value_16__last__bit : int

logic discrimrec__register_type__value_16__position : int

axiom discrimrec__register_type__value_16__first__bit_axiom :
  (0 <= discrimrec__register_type__value_16__first__bit)

axiom discrimrec__register_type__value_16__last__bit_axiom :
  (discrimrec__register_type__value_16__first__bit <  discrimrec__register_type__value_16__last__bit)

axiom discrimrec__register_type__value_16__position_axiom :
  (0 <= discrimrec__register_type__value_16__position)

logic discrimrec__register_type__ignore_32c__first__bit : int

logic discrimrec__register_type__ignore_32c__last__bit : int

logic discrimrec__register_type__ignore_32c__position : int

axiom discrimrec__register_type__ignore_32c__first__bit_axiom :
  (0 <= discrimrec__register_type__ignore_32c__first__bit)

axiom discrimrec__register_type__ignore_32c__last__bit_axiom :
  (discrimrec__register_type__ignore_32c__first__bit <  discrimrec__register_type__ignore_32c__last__bit)

axiom discrimrec__register_type__ignore_32c__position_axiom :
  (0 <= discrimrec__register_type__ignore_32c__position)

logic discrimrec__register_type__ignore_16b__first__bit : int

logic discrimrec__register_type__ignore_16b__last__bit : int

logic discrimrec__register_type__ignore_16b__position : int

axiom discrimrec__register_type__ignore_16b__first__bit_axiom :
  (0 <= discrimrec__register_type__ignore_16b__first__bit)

axiom discrimrec__register_type__ignore_16b__last__bit_axiom :
  (discrimrec__register_type__ignore_16b__first__bit <  discrimrec__register_type__ignore_16b__last__bit)

axiom discrimrec__register_type__ignore_16b__position_axiom :
  (0 <= discrimrec__register_type__ignore_16b__position)

logic discrimrec__register_type__value_high__first__bit : int

logic discrimrec__register_type__value_high__last__bit : int

logic discrimrec__register_type__value_high__position : int

axiom discrimrec__register_type__value_high__first__bit_axiom :
  (0 <= discrimrec__register_type__value_high__first__bit)

axiom discrimrec__register_type__value_high__last__bit_axiom :
  (discrimrec__register_type__value_high__first__bit <  discrimrec__register_type__value_high__last__bit)

axiom discrimrec__register_type__value_high__position_axiom :
  (0 <= discrimrec__register_type__value_high__position)

logic discrimrec__register_type__value_low__first__bit : int

logic discrimrec__register_type__value_low__last__bit : int

logic discrimrec__register_type__value_low__position : int

axiom discrimrec__register_type__value_low__first__bit_axiom :
  (0 <= discrimrec__register_type__value_low__first__bit)

axiom discrimrec__register_type__value_low__last__bit_axiom :
  (discrimrec__register_type__value_low__first__bit <  discrimrec__register_type__value_low__last__bit)

axiom discrimrec__register_type__value_low__position_axiom :
  (0 <= discrimrec__register_type__value_low__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : register_option

logic dummy6 : unsigned_64

logic dummy7 : unsigned_32

logic dummy8 : unsigned_32

logic dummy9 : unsigned_32

logic dummy10 : unsigned_16

logic dummy11 : unsigned_16

logic dummy12 : unsigned_32

logic dummy13 : unsigned_16

logic dummy14 : unsigned_8

logic dummy15 : unsigned_8

logic dummy16 : bool

type register_type__ref = { register_type__content : us_rep
}

function register_type__ref___projection(a: register_type__ref) : us_rep =
  (a).register_type__content

predicate in_range1(rec__discrimrec__register_type__option1: int,
  a: us_rep) =
  (rec__discrimrec__register_type__option1 = to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__size1({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__alignment1({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

logic discrimrec__register_type__option__first__bit1 : int

logic discrimrec__register_type__option__last__bit1 : int

logic discrimrec__register_type__option__position1 : int

axiom discrimrec__register_type__option__first__bit_axiom1 :
  (0 <= discrimrec__register_type__option__first__bit1)

axiom discrimrec__register_type__option__last__bit_axiom1 :
  (discrimrec__register_type__option__first__bit1 <  discrimrec__register_type__option__last__bit1)

axiom discrimrec__register_type__option__position_axiom1 :
  (0 <= discrimrec__register_type__option__position1)

logic discrimrec__register_type__ignore_32a__first__bit1 : int

logic discrimrec__register_type__ignore_32a__last__bit1 : int

logic discrimrec__register_type__ignore_32a__position1 : int

axiom discrimrec__register_type__ignore_32a__first__bit_axiom1 :
  (0 <= discrimrec__register_type__ignore_32a__first__bit1)

axiom discrimrec__register_type__ignore_32a__last__bit_axiom1 :
  (discrimrec__register_type__ignore_32a__first__bit1 <  discrimrec__register_type__ignore_32a__last__bit1)

axiom discrimrec__register_type__ignore_32a__position_axiom1 :
  (0 <= discrimrec__register_type__ignore_32a__position1)

logic discrimrec__register_type__value_32__first__bit1 : int

logic discrimrec__register_type__value_32__last__bit1 : int

logic discrimrec__register_type__value_32__position1 : int

axiom discrimrec__register_type__value_32__first__bit_axiom1 :
  (0 <= discrimrec__register_type__value_32__first__bit1)

axiom discrimrec__register_type__value_32__last__bit_axiom1 :
  (discrimrec__register_type__value_32__first__bit1 <  discrimrec__register_type__value_32__last__bit1)

axiom discrimrec__register_type__value_32__position_axiom1 :
  (0 <= discrimrec__register_type__value_32__position1)

logic discrimrec__register_type__ignore_32b__first__bit1 : int

logic discrimrec__register_type__ignore_32b__last__bit1 : int

logic discrimrec__register_type__ignore_32b__position1 : int

axiom discrimrec__register_type__ignore_32b__first__bit_axiom1 :
  (0 <= discrimrec__register_type__ignore_32b__first__bit1)

axiom discrimrec__register_type__ignore_32b__last__bit_axiom1 :
  (discrimrec__register_type__ignore_32b__first__bit1 <  discrimrec__register_type__ignore_32b__last__bit1)

axiom discrimrec__register_type__ignore_32b__position_axiom1 :
  (0 <= discrimrec__register_type__ignore_32b__position1)

logic discrimrec__register_type__ignore_16a__first__bit1 : int

logic discrimrec__register_type__ignore_16a__last__bit1 : int

logic discrimrec__register_type__ignore_16a__position1 : int

axiom discrimrec__register_type__ignore_16a__first__bit_axiom1 :
  (0 <= discrimrec__register_type__ignore_16a__first__bit1)

axiom discrimrec__register_type__ignore_16a__last__bit_axiom1 :
  (discrimrec__register_type__ignore_16a__first__bit1 <  discrimrec__register_type__ignore_16a__last__bit1)

axiom discrimrec__register_type__ignore_16a__position_axiom1 :
  (0 <= discrimrec__register_type__ignore_16a__position1)

logic discrimrec__register_type__value_16__first__bit1 : int

logic discrimrec__register_type__value_16__last__bit1 : int

logic discrimrec__register_type__value_16__position1 : int

axiom discrimrec__register_type__value_16__first__bit_axiom1 :
  (0 <= discrimrec__register_type__value_16__first__bit1)

axiom discrimrec__register_type__value_16__last__bit_axiom1 :
  (discrimrec__register_type__value_16__first__bit1 <  discrimrec__register_type__value_16__last__bit1)

axiom discrimrec__register_type__value_16__position_axiom1 :
  (0 <= discrimrec__register_type__value_16__position1)

logic discrimrec__register_type__ignore_32c__first__bit1 : int

logic discrimrec__register_type__ignore_32c__last__bit1 : int

logic discrimrec__register_type__ignore_32c__position1 : int

axiom discrimrec__register_type__ignore_32c__first__bit_axiom1 :
  (0 <= discrimrec__register_type__ignore_32c__first__bit1)

axiom discrimrec__register_type__ignore_32c__last__bit_axiom1 :
  (discrimrec__register_type__ignore_32c__first__bit1 <  discrimrec__register_type__ignore_32c__last__bit1)

axiom discrimrec__register_type__ignore_32c__position_axiom1 :
  (0 <= discrimrec__register_type__ignore_32c__position1)

logic discrimrec__register_type__ignore_16b__first__bit1 : int

logic discrimrec__register_type__ignore_16b__last__bit1 : int

logic discrimrec__register_type__ignore_16b__position1 : int

axiom discrimrec__register_type__ignore_16b__first__bit_axiom1 :
  (0 <= discrimrec__register_type__ignore_16b__first__bit1)

axiom discrimrec__register_type__ignore_16b__last__bit_axiom1 :
  (discrimrec__register_type__ignore_16b__first__bit1 <  discrimrec__register_type__ignore_16b__last__bit1)

axiom discrimrec__register_type__ignore_16b__position_axiom1 :
  (0 <= discrimrec__register_type__ignore_16b__position1)

logic discrimrec__register_type__value_high__first__bit1 : int

logic discrimrec__register_type__value_high__last__bit1 : int

logic discrimrec__register_type__value_high__position1 : int

axiom discrimrec__register_type__value_high__first__bit_axiom1 :
  (0 <= discrimrec__register_type__value_high__first__bit1)

axiom discrimrec__register_type__value_high__last__bit_axiom1 :
  (discrimrec__register_type__value_high__first__bit1 <  discrimrec__register_type__value_high__last__bit1)

axiom discrimrec__register_type__value_high__position_axiom1 :
  (0 <= discrimrec__register_type__value_high__position1)

logic discrimrec__register_type__value_low__first__bit1 : int

logic discrimrec__register_type__value_low__last__bit1 : int

logic discrimrec__register_type__value_low__position1 : int

axiom discrimrec__register_type__value_low__first__bit_axiom1 :
  (0 <= discrimrec__register_type__value_low__first__bit1)

axiom discrimrec__register_type__value_low__last__bit_axiom1 :
  (discrimrec__register_type__value_low__first__bit1 <  discrimrec__register_type__value_low__last__bit1)

axiom discrimrec__register_type__value_low__position_axiom1 :
  (0 <= discrimrec__register_type__value_low__position1)

logic discrimrec__register_type__value_64__first__bit1 : int

logic discrimrec__register_type__value_64__last__bit1 : int

logic discrimrec__register_type__value_64__position1 : int

axiom discrimrec__register_type__value_64__first__bit_axiom1 :
  (0 <= discrimrec__register_type__value_64__first__bit1)

axiom discrimrec__register_type__value_64__last__bit_axiom1 :
  (discrimrec__register_type__value_64__first__bit1 <  discrimrec__register_type__value_64__last__bit1)

axiom discrimrec__register_type__value_64__position_axiom1 :
  (0 <= discrimrec__register_type__value_64__position1)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy17 : register_option

logic dummy18 : unsigned_64

logic dummy19 : unsigned_32

logic dummy20 : unsigned_32

logic dummy21 : unsigned_32

logic dummy22 : unsigned_16

logic dummy23 : unsigned_16

logic dummy24 : unsigned_32

logic dummy25 : unsigned_16

logic dummy26 : unsigned_8

logic dummy27 : unsigned_8

logic dummy28 : bool

type traxS__ref = { traxS__content : us_rep
}

function traxS__ref___projection(a: traxS__ref) : us_rep = (a).traxS__content

logic rax__split_discrs : register_option

logic rax__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range2(rec__discrimrec__register_type__option1: int,
  a: us_rep) =
  (rec__discrimrec__register_type__option1 = to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__size2({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__alignment2({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

logic discrimrec__register_type__option__first__bit2 : int

logic discrimrec__register_type__option__last__bit2 : int

logic discrimrec__register_type__option__position2 : int

axiom discrimrec__register_type__option__first__bit_axiom2 :
  (0 <= discrimrec__register_type__option__first__bit2)

axiom discrimrec__register_type__option__last__bit_axiom2 :
  (discrimrec__register_type__option__first__bit2 <  discrimrec__register_type__option__last__bit2)

axiom discrimrec__register_type__option__position_axiom2 :
  (0 <= discrimrec__register_type__option__position2)

logic discrimrec__register_type__ignore_32a__first__bit2 : int

logic discrimrec__register_type__ignore_32a__last__bit2 : int

logic discrimrec__register_type__ignore_32a__position2 : int

axiom discrimrec__register_type__ignore_32a__first__bit_axiom2 :
  (0 <= discrimrec__register_type__ignore_32a__first__bit2)

axiom discrimrec__register_type__ignore_32a__last__bit_axiom2 :
  (discrimrec__register_type__ignore_32a__first__bit2 <  discrimrec__register_type__ignore_32a__last__bit2)

axiom discrimrec__register_type__ignore_32a__position_axiom2 :
  (0 <= discrimrec__register_type__ignore_32a__position2)

logic discrimrec__register_type__value_32__first__bit2 : int

logic discrimrec__register_type__value_32__last__bit2 : int

logic discrimrec__register_type__value_32__position2 : int

axiom discrimrec__register_type__value_32__first__bit_axiom2 :
  (0 <= discrimrec__register_type__value_32__first__bit2)

axiom discrimrec__register_type__value_32__last__bit_axiom2 :
  (discrimrec__register_type__value_32__first__bit2 <  discrimrec__register_type__value_32__last__bit2)

axiom discrimrec__register_type__value_32__position_axiom2 :
  (0 <= discrimrec__register_type__value_32__position2)

logic discrimrec__register_type__ignore_32b__first__bit2 : int

logic discrimrec__register_type__ignore_32b__last__bit2 : int

logic discrimrec__register_type__ignore_32b__position2 : int

axiom discrimrec__register_type__ignore_32b__first__bit_axiom2 :
  (0 <= discrimrec__register_type__ignore_32b__first__bit2)

axiom discrimrec__register_type__ignore_32b__last__bit_axiom2 :
  (discrimrec__register_type__ignore_32b__first__bit2 <  discrimrec__register_type__ignore_32b__last__bit2)

axiom discrimrec__register_type__ignore_32b__position_axiom2 :
  (0 <= discrimrec__register_type__ignore_32b__position2)

logic discrimrec__register_type__ignore_16a__first__bit2 : int

logic discrimrec__register_type__ignore_16a__last__bit2 : int

logic discrimrec__register_type__ignore_16a__position2 : int

axiom discrimrec__register_type__ignore_16a__first__bit_axiom2 :
  (0 <= discrimrec__register_type__ignore_16a__first__bit2)

axiom discrimrec__register_type__ignore_16a__last__bit_axiom2 :
  (discrimrec__register_type__ignore_16a__first__bit2 <  discrimrec__register_type__ignore_16a__last__bit2)

axiom discrimrec__register_type__ignore_16a__position_axiom2 :
  (0 <= discrimrec__register_type__ignore_16a__position2)

logic discrimrec__register_type__value_16__first__bit2 : int

logic discrimrec__register_type__value_16__last__bit2 : int

logic discrimrec__register_type__value_16__position2 : int

axiom discrimrec__register_type__value_16__first__bit_axiom2 :
  (0 <= discrimrec__register_type__value_16__first__bit2)

axiom discrimrec__register_type__value_16__last__bit_axiom2 :
  (discrimrec__register_type__value_16__first__bit2 <  discrimrec__register_type__value_16__last__bit2)

axiom discrimrec__register_type__value_16__position_axiom2 :
  (0 <= discrimrec__register_type__value_16__position2)

logic discrimrec__register_type__ignore_32c__first__bit2 : int

logic discrimrec__register_type__ignore_32c__last__bit2 : int

logic discrimrec__register_type__ignore_32c__position2 : int

axiom discrimrec__register_type__ignore_32c__first__bit_axiom2 :
  (0 <= discrimrec__register_type__ignore_32c__first__bit2)

axiom discrimrec__register_type__ignore_32c__last__bit_axiom2 :
  (discrimrec__register_type__ignore_32c__first__bit2 <  discrimrec__register_type__ignore_32c__last__bit2)

axiom discrimrec__register_type__ignore_32c__position_axiom2 :
  (0 <= discrimrec__register_type__ignore_32c__position2)

logic discrimrec__register_type__ignore_16b__first__bit2 : int

logic discrimrec__register_type__ignore_16b__last__bit2 : int

logic discrimrec__register_type__ignore_16b__position2 : int

axiom discrimrec__register_type__ignore_16b__first__bit_axiom2 :
  (0 <= discrimrec__register_type__ignore_16b__first__bit2)

axiom discrimrec__register_type__ignore_16b__last__bit_axiom2 :
  (discrimrec__register_type__ignore_16b__first__bit2 <  discrimrec__register_type__ignore_16b__last__bit2)

axiom discrimrec__register_type__ignore_16b__position_axiom2 :
  (0 <= discrimrec__register_type__ignore_16b__position2)

logic discrimrec__register_type__value_high__first__bit2 : int

logic discrimrec__register_type__value_high__last__bit2 : int

logic discrimrec__register_type__value_high__position2 : int

axiom discrimrec__register_type__value_high__first__bit_axiom2 :
  (0 <= discrimrec__register_type__value_high__first__bit2)

axiom discrimrec__register_type__value_high__last__bit_axiom2 :
  (discrimrec__register_type__value_high__first__bit2 <  discrimrec__register_type__value_high__last__bit2)

axiom discrimrec__register_type__value_high__position_axiom2 :
  (0 <= discrimrec__register_type__value_high__position2)

logic discrimrec__register_type__value_low__first__bit2 : int

logic discrimrec__register_type__value_low__last__bit2 : int

logic discrimrec__register_type__value_low__position2 : int

axiom discrimrec__register_type__value_low__first__bit_axiom2 :
  (0 <= discrimrec__register_type__value_low__first__bit2)

axiom discrimrec__register_type__value_low__last__bit_axiom2 :
  (discrimrec__register_type__value_low__first__bit2 <  discrimrec__register_type__value_low__last__bit2)

axiom discrimrec__register_type__value_low__position_axiom2 :
  (0 <= discrimrec__register_type__value_low__position2)

logic discrimrec__register_type__value_64__first__bit2 : int

logic discrimrec__register_type__value_64__last__bit2 : int

logic discrimrec__register_type__value_64__position2 : int

axiom discrimrec__register_type__value_64__first__bit_axiom2 :
  (0 <= discrimrec__register_type__value_64__first__bit2)

axiom discrimrec__register_type__value_64__last__bit_axiom2 :
  (discrimrec__register_type__value_64__first__bit2 <  discrimrec__register_type__value_64__last__bit2)

axiom discrimrec__register_type__value_64__position_axiom2 :
  (0 <= discrimrec__register_type__value_64__position2)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy29 : register_option

logic dummy30 : unsigned_64

logic dummy31 : unsigned_32

logic dummy32 : unsigned_32

logic dummy33 : unsigned_32

logic dummy34 : unsigned_16

logic dummy35 : unsigned_16

logic dummy36 : unsigned_32

logic dummy37 : unsigned_16

logic dummy38 : unsigned_8

logic dummy39 : unsigned_8

logic dummy40 : bool

type register_bit_64__ref = { register_bit_64__content : us_rep
}

function register_bit_64__ref___projection(a: register_bit_64__ref) : us_rep =
  (a).register_bit_64__content

predicate in_range3(rec__discrimrec__register_type__option1: int,
  a: us_rep) =
  (rec__discrimrec__register_type__option1 = to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option))

logic value__size3 : int

logic object__size3 : us_rep -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__size3({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__alignment3({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

logic discrimrec__register_type__option__first__bit3 : int

logic discrimrec__register_type__option__last__bit3 : int

logic discrimrec__register_type__option__position3 : int

axiom discrimrec__register_type__option__first__bit_axiom3 :
  (0 <= discrimrec__register_type__option__first__bit3)

axiom discrimrec__register_type__option__last__bit_axiom3 :
  (discrimrec__register_type__option__first__bit3 <  discrimrec__register_type__option__last__bit3)

axiom discrimrec__register_type__option__position_axiom3 :
  (0 <= discrimrec__register_type__option__position3)

logic discrimrec__register_type__value_64__first__bit3 : int

logic discrimrec__register_type__value_64__last__bit3 : int

logic discrimrec__register_type__value_64__position3 : int

axiom discrimrec__register_type__value_64__first__bit_axiom3 :
  (0 <= discrimrec__register_type__value_64__first__bit3)

axiom discrimrec__register_type__value_64__last__bit_axiom3 :
  (discrimrec__register_type__value_64__first__bit3 <  discrimrec__register_type__value_64__last__bit3)

axiom discrimrec__register_type__value_64__position_axiom3 :
  (0 <= discrimrec__register_type__value_64__position3)

logic discrimrec__register_type__ignore_32b__first__bit3 : int

logic discrimrec__register_type__ignore_32b__last__bit3 : int

logic discrimrec__register_type__ignore_32b__position3 : int

axiom discrimrec__register_type__ignore_32b__first__bit_axiom3 :
  (0 <= discrimrec__register_type__ignore_32b__first__bit3)

axiom discrimrec__register_type__ignore_32b__last__bit_axiom3 :
  (discrimrec__register_type__ignore_32b__first__bit3 <  discrimrec__register_type__ignore_32b__last__bit3)

axiom discrimrec__register_type__ignore_32b__position_axiom3 :
  (0 <= discrimrec__register_type__ignore_32b__position3)

logic discrimrec__register_type__ignore_16a__first__bit3 : int

logic discrimrec__register_type__ignore_16a__last__bit3 : int

logic discrimrec__register_type__ignore_16a__position3 : int

axiom discrimrec__register_type__ignore_16a__first__bit_axiom3 :
  (0 <= discrimrec__register_type__ignore_16a__first__bit3)

axiom discrimrec__register_type__ignore_16a__last__bit_axiom3 :
  (discrimrec__register_type__ignore_16a__first__bit3 <  discrimrec__register_type__ignore_16a__last__bit3)

axiom discrimrec__register_type__ignore_16a__position_axiom3 :
  (0 <= discrimrec__register_type__ignore_16a__position3)

logic discrimrec__register_type__value_16__first__bit3 : int

logic discrimrec__register_type__value_16__last__bit3 : int

logic discrimrec__register_type__value_16__position3 : int

axiom discrimrec__register_type__value_16__first__bit_axiom3 :
  (0 <= discrimrec__register_type__value_16__first__bit3)

axiom discrimrec__register_type__value_16__last__bit_axiom3 :
  (discrimrec__register_type__value_16__first__bit3 <  discrimrec__register_type__value_16__last__bit3)

axiom discrimrec__register_type__value_16__position_axiom3 :
  (0 <= discrimrec__register_type__value_16__position3)

logic discrimrec__register_type__ignore_32c__first__bit3 : int

logic discrimrec__register_type__ignore_32c__last__bit3 : int

logic discrimrec__register_type__ignore_32c__position3 : int

axiom discrimrec__register_type__ignore_32c__first__bit_axiom3 :
  (0 <= discrimrec__register_type__ignore_32c__first__bit3)

axiom discrimrec__register_type__ignore_32c__last__bit_axiom3 :
  (discrimrec__register_type__ignore_32c__first__bit3 <  discrimrec__register_type__ignore_32c__last__bit3)

axiom discrimrec__register_type__ignore_32c__position_axiom3 :
  (0 <= discrimrec__register_type__ignore_32c__position3)

logic discrimrec__register_type__ignore_16b__first__bit3 : int

logic discrimrec__register_type__ignore_16b__last__bit3 : int

logic discrimrec__register_type__ignore_16b__position3 : int

axiom discrimrec__register_type__ignore_16b__first__bit_axiom3 :
  (0 <= discrimrec__register_type__ignore_16b__first__bit3)

axiom discrimrec__register_type__ignore_16b__last__bit_axiom3 :
  (discrimrec__register_type__ignore_16b__first__bit3 <  discrimrec__register_type__ignore_16b__last__bit3)

axiom discrimrec__register_type__ignore_16b__position_axiom3 :
  (0 <= discrimrec__register_type__ignore_16b__position3)

logic discrimrec__register_type__value_high__first__bit3 : int

logic discrimrec__register_type__value_high__last__bit3 : int

logic discrimrec__register_type__value_high__position3 : int

axiom discrimrec__register_type__value_high__first__bit_axiom3 :
  (0 <= discrimrec__register_type__value_high__first__bit3)

axiom discrimrec__register_type__value_high__last__bit_axiom3 :
  (discrimrec__register_type__value_high__first__bit3 <  discrimrec__register_type__value_high__last__bit3)

axiom discrimrec__register_type__value_high__position_axiom3 :
  (0 <= discrimrec__register_type__value_high__position3)

logic discrimrec__register_type__value_low__first__bit3 : int

logic discrimrec__register_type__value_low__last__bit3 : int

logic discrimrec__register_type__value_low__position3 : int

axiom discrimrec__register_type__value_low__first__bit_axiom3 :
  (0 <= discrimrec__register_type__value_low__first__bit3)

axiom discrimrec__register_type__value_low__last__bit_axiom3 :
  (discrimrec__register_type__value_low__first__bit3 <  discrimrec__register_type__value_low__last__bit3)

axiom discrimrec__register_type__value_low__position_axiom3 :
  (0 <= discrimrec__register_type__value_low__position3)

logic discrimrec__register_type__ignore_32a__first__bit3 : int

logic discrimrec__register_type__ignore_32a__last__bit3 : int

logic discrimrec__register_type__ignore_32a__position3 : int

axiom discrimrec__register_type__ignore_32a__first__bit_axiom3 :
  (0 <= discrimrec__register_type__ignore_32a__first__bit3)

axiom discrimrec__register_type__ignore_32a__last__bit_axiom3 :
  (discrimrec__register_type__ignore_32a__first__bit3 <  discrimrec__register_type__ignore_32a__last__bit3)

axiom discrimrec__register_type__ignore_32a__position_axiom3 :
  (0 <= discrimrec__register_type__ignore_32a__position3)

logic discrimrec__register_type__value_32__first__bit3 : int

logic discrimrec__register_type__value_32__last__bit3 : int

logic discrimrec__register_type__value_32__position3 : int

axiom discrimrec__register_type__value_32__first__bit_axiom3 :
  (0 <= discrimrec__register_type__value_32__first__bit3)

axiom discrimrec__register_type__value_32__last__bit_axiom3 :
  (discrimrec__register_type__value_32__first__bit3 <  discrimrec__register_type__value_32__last__bit3)

axiom discrimrec__register_type__value_32__position_axiom3 :
  (0 <= discrimrec__register_type__value_32__position3)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy41 : register_option

logic dummy42 : unsigned_64

logic dummy43 : unsigned_32

logic dummy44 : unsigned_32

logic dummy45 : unsigned_32

logic dummy46 : unsigned_16

logic dummy47 : unsigned_16

logic dummy48 : unsigned_32

logic dummy49 : unsigned_16

logic dummy50 : unsigned_8

logic dummy51 : unsigned_8

logic dummy52 : bool

type register_bit_32__ref = { register_bit_32__content : us_rep
}

function register_bit_32__ref___projection(a: register_bit_32__ref) : us_rep =
  (a).register_bit_32__content

logic toBig : t -> t1

logic toSmall : t1 -> t

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 4294967295)

axiom toSmall_to_uint :
  (forall x:t1. (ule1(x, rliteral) -> (tqtint1(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint1(toBig(x))))

logic convert_bit_64_to_bit_32 : us_rep -> us_rep

logic convert_bit_64_to_bit_32__function_guard : us_rep, us_rep -> prop

predicate in_range4(rec__discrimrec__register_type__option1: int,
  a: us_rep) =
  (rec__discrimrec__register_type__option1 = to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option))

logic value__size4 : int

logic object__size4 : us_rep -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__size4({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__alignment4({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

logic discrimrec__register_type__option__first__bit4 : int

logic discrimrec__register_type__option__last__bit4 : int

logic discrimrec__register_type__option__position4 : int

axiom discrimrec__register_type__option__first__bit_axiom4 :
  (0 <= discrimrec__register_type__option__first__bit4)

axiom discrimrec__register_type__option__last__bit_axiom4 :
  (discrimrec__register_type__option__first__bit4 <  discrimrec__register_type__option__last__bit4)

axiom discrimrec__register_type__option__position_axiom4 :
  (0 <= discrimrec__register_type__option__position4)

logic discrimrec__register_type__value_64__first__bit4 : int

logic discrimrec__register_type__value_64__last__bit4 : int

logic discrimrec__register_type__value_64__position4 : int

axiom discrimrec__register_type__value_64__first__bit_axiom4 :
  (0 <= discrimrec__register_type__value_64__first__bit4)

axiom discrimrec__register_type__value_64__last__bit_axiom4 :
  (discrimrec__register_type__value_64__first__bit4 <  discrimrec__register_type__value_64__last__bit4)

axiom discrimrec__register_type__value_64__position_axiom4 :
  (0 <= discrimrec__register_type__value_64__position4)

logic discrimrec__register_type__ignore_32b__first__bit4 : int

logic discrimrec__register_type__ignore_32b__last__bit4 : int

logic discrimrec__register_type__ignore_32b__position4 : int

axiom discrimrec__register_type__ignore_32b__first__bit_axiom4 :
  (0 <= discrimrec__register_type__ignore_32b__first__bit4)

axiom discrimrec__register_type__ignore_32b__last__bit_axiom4 :
  (discrimrec__register_type__ignore_32b__first__bit4 <  discrimrec__register_type__ignore_32b__last__bit4)

axiom discrimrec__register_type__ignore_32b__position_axiom4 :
  (0 <= discrimrec__register_type__ignore_32b__position4)

logic discrimrec__register_type__ignore_16a__first__bit4 : int

logic discrimrec__register_type__ignore_16a__last__bit4 : int

logic discrimrec__register_type__ignore_16a__position4 : int

axiom discrimrec__register_type__ignore_16a__first__bit_axiom4 :
  (0 <= discrimrec__register_type__ignore_16a__first__bit4)

axiom discrimrec__register_type__ignore_16a__last__bit_axiom4 :
  (discrimrec__register_type__ignore_16a__first__bit4 <  discrimrec__register_type__ignore_16a__last__bit4)

axiom discrimrec__register_type__ignore_16a__position_axiom4 :
  (0 <= discrimrec__register_type__ignore_16a__position4)

logic discrimrec__register_type__value_16__first__bit4 : int

logic discrimrec__register_type__value_16__last__bit4 : int

logic discrimrec__register_type__value_16__position4 : int

axiom discrimrec__register_type__value_16__first__bit_axiom4 :
  (0 <= discrimrec__register_type__value_16__first__bit4)

axiom discrimrec__register_type__value_16__last__bit_axiom4 :
  (discrimrec__register_type__value_16__first__bit4 <  discrimrec__register_type__value_16__last__bit4)

axiom discrimrec__register_type__value_16__position_axiom4 :
  (0 <= discrimrec__register_type__value_16__position4)

logic discrimrec__register_type__ignore_32c__first__bit4 : int

logic discrimrec__register_type__ignore_32c__last__bit4 : int

logic discrimrec__register_type__ignore_32c__position4 : int

axiom discrimrec__register_type__ignore_32c__first__bit_axiom4 :
  (0 <= discrimrec__register_type__ignore_32c__first__bit4)

axiom discrimrec__register_type__ignore_32c__last__bit_axiom4 :
  (discrimrec__register_type__ignore_32c__first__bit4 <  discrimrec__register_type__ignore_32c__last__bit4)

axiom discrimrec__register_type__ignore_32c__position_axiom4 :
  (0 <= discrimrec__register_type__ignore_32c__position4)

logic discrimrec__register_type__ignore_16b__first__bit4 : int

logic discrimrec__register_type__ignore_16b__last__bit4 : int

logic discrimrec__register_type__ignore_16b__position4 : int

axiom discrimrec__register_type__ignore_16b__first__bit_axiom4 :
  (0 <= discrimrec__register_type__ignore_16b__first__bit4)

axiom discrimrec__register_type__ignore_16b__last__bit_axiom4 :
  (discrimrec__register_type__ignore_16b__first__bit4 <  discrimrec__register_type__ignore_16b__last__bit4)

axiom discrimrec__register_type__ignore_16b__position_axiom4 :
  (0 <= discrimrec__register_type__ignore_16b__position4)

logic discrimrec__register_type__value_high__first__bit4 : int

logic discrimrec__register_type__value_high__last__bit4 : int

logic discrimrec__register_type__value_high__position4 : int

axiom discrimrec__register_type__value_high__first__bit_axiom4 :
  (0 <= discrimrec__register_type__value_high__first__bit4)

axiom discrimrec__register_type__value_high__last__bit_axiom4 :
  (discrimrec__register_type__value_high__first__bit4 <  discrimrec__register_type__value_high__last__bit4)

axiom discrimrec__register_type__value_high__position_axiom4 :
  (0 <= discrimrec__register_type__value_high__position4)

logic discrimrec__register_type__value_low__first__bit4 : int

logic discrimrec__register_type__value_low__last__bit4 : int

logic discrimrec__register_type__value_low__position4 : int

axiom discrimrec__register_type__value_low__first__bit_axiom4 :
  (0 <= discrimrec__register_type__value_low__first__bit4)

axiom discrimrec__register_type__value_low__last__bit_axiom4 :
  (discrimrec__register_type__value_low__first__bit4 <  discrimrec__register_type__value_low__last__bit4)

axiom discrimrec__register_type__value_low__position_axiom4 :
  (0 <= discrimrec__register_type__value_low__position4)

logic discrimrec__register_type__ignore_32a__first__bit4 : int

logic discrimrec__register_type__ignore_32a__last__bit4 : int

logic discrimrec__register_type__ignore_32a__position4 : int

axiom discrimrec__register_type__ignore_32a__first__bit_axiom4 :
  (0 <= discrimrec__register_type__ignore_32a__first__bit4)

axiom discrimrec__register_type__ignore_32a__last__bit_axiom4 :
  (discrimrec__register_type__ignore_32a__first__bit4 <  discrimrec__register_type__ignore_32a__last__bit4)

axiom discrimrec__register_type__ignore_32a__position_axiom4 :
  (0 <= discrimrec__register_type__ignore_32a__position4)

logic discrimrec__register_type__value_32__first__bit4 : int

logic discrimrec__register_type__value_32__last__bit4 : int

logic discrimrec__register_type__value_32__position4 : int

axiom discrimrec__register_type__value_32__first__bit_axiom4 :
  (0 <= discrimrec__register_type__value_32__first__bit4)

axiom discrimrec__register_type__value_32__last__bit_axiom4 :
  (discrimrec__register_type__value_32__first__bit4 <  discrimrec__register_type__value_32__last__bit4)

axiom discrimrec__register_type__value_32__position_axiom4 :
  (0 <= discrimrec__register_type__value_32__position4)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy53 : register_option

logic dummy54 : unsigned_64

logic dummy55 : unsigned_32

logic dummy56 : unsigned_32

logic dummy57 : unsigned_32

logic dummy58 : unsigned_16

logic dummy59 : unsigned_16

logic dummy60 : unsigned_32

logic dummy61 : unsigned_16

logic dummy62 : unsigned_8

logic dummy63 : unsigned_8

logic dummy64 : bool

type t5b__ref = { t5b__content : us_rep
}

function t5b__ref___projection(a: t5b__ref) : us_rep = (a).t5b__content

axiom convert_bit_64_to_bit_32__post_axiom :
  (forall reg:register_option. forall reg1:unsigned_64.
  forall reg2:unsigned_32. forall reg3:unsigned_32. forall reg4:unsigned_32.
  forall reg5:unsigned_16. forall reg6:unsigned_16. forall reg7:unsigned_32.
  forall reg8:unsigned_16. forall reg9:unsigned_8. forall reg10:unsigned_8.
  forall reg11:bool [convert_bit_64_to_bit_32({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = reg }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = reg1;
  rec__discrimrec__register_type__ignore_32a = reg2;
  rec__discrimrec__register_type__value_32 = reg3;
  rec__discrimrec__register_type__ignore_32b = reg4;
  rec__discrimrec__register_type__ignore_16a = reg5;
  rec__discrimrec__register_type__value_16 = reg6;
  rec__discrimrec__register_type__ignore_32c = reg7;
  rec__discrimrec__register_type__ignore_16b = reg8;
  rec__discrimrec__register_type__value_high = reg9;
  rec__discrimrec__register_type__value_low = reg10 }; attr__constrained =
  reg11 })]. ((reg11 = true) -> ((1 = to_rep2(((convert_bit_64_to_bit_32({
  us_split_discrs1 = { rec__discrimrec__register_type__option = reg };
  us_split_fields1 = { rec__discrimrec__register_type__value_64 = reg1;
  rec__discrimrec__register_type__ignore_32a = reg2;
  rec__discrimrec__register_type__value_32 = reg3;
  rec__discrimrec__register_type__ignore_32b = reg4;
  rec__discrimrec__register_type__ignore_16a = reg5;
  rec__discrimrec__register_type__value_16 = reg6;
  rec__discrimrec__register_type__ignore_32c = reg7;
  rec__discrimrec__register_type__ignore_16b = reg8;
  rec__discrimrec__register_type__value_high = reg9;
  rec__discrimrec__register_type__value_low = reg10 }; attr__constrained =
  reg11 })).us_split_discrs1).rec__discrimrec__register_type__option)) and
  ((convert_bit_64_to_bit_32({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = reg }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = reg1;
  rec__discrimrec__register_type__ignore_32a = reg2;
  rec__discrimrec__register_type__value_32 = reg3;
  rec__discrimrec__register_type__ignore_32b = reg4;
  rec__discrimrec__register_type__ignore_16a = reg5;
  rec__discrimrec__register_type__value_16 = reg6;
  rec__discrimrec__register_type__ignore_32c = reg7;
  rec__discrimrec__register_type__ignore_16b = reg8;
  rec__discrimrec__register_type__value_high = reg9;
  rec__discrimrec__register_type__value_low = reg10 }; attr__constrained =
  reg11 })).attr__constrained = true))))

axiom convert_bit_64_to_bit_32__def_axiom :
  (forall reg:register_option. forall reg1:unsigned_64.
  forall reg2:unsigned_32. forall reg3:unsigned_32. forall reg4:unsigned_32.
  forall reg5:unsigned_16. forall reg6:unsigned_16. forall reg7:unsigned_32.
  forall reg8:unsigned_16. forall reg9:unsigned_8. forall reg10:unsigned_8.
  forall reg11:bool [convert_bit_64_to_bit_32({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = reg }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = reg1;
  rec__discrimrec__register_type__ignore_32a = reg2;
  rec__discrimrec__register_type__value_32 = reg3;
  rec__discrimrec__register_type__ignore_32b = reg4;
  rec__discrimrec__register_type__ignore_16a = reg5;
  rec__discrimrec__register_type__value_16 = reg6;
  rec__discrimrec__register_type__ignore_32c = reg7;
  rec__discrimrec__register_type__ignore_16b = reg8;
  rec__discrimrec__register_type__value_high = reg9;
  rec__discrimrec__register_type__value_low = reg10 }; attr__constrained =
  reg11 })]. ((reg11 = true) -> (convert_bit_64_to_bit_32({
  us_split_discrs1 = { rec__discrimrec__register_type__option = reg };
  us_split_fields1 = { rec__discrimrec__register_type__value_64 = reg1;
  rec__discrimrec__register_type__ignore_32a = reg2;
  rec__discrimrec__register_type__value_32 = reg3;
  rec__discrimrec__register_type__ignore_32b = reg4;
  rec__discrimrec__register_type__ignore_16a = reg5;
  rec__discrimrec__register_type__value_16 = reg6;
  rec__discrimrec__register_type__ignore_32c = reg7;
  rec__discrimrec__register_type__ignore_16b = reg8;
  rec__discrimrec__register_type__value_high = reg9;
  rec__discrimrec__register_type__value_low = reg10 }; attr__constrained =
  reg11 }) = { us_split_discrs1 = { rec__discrimrec__register_type__option =
  of_rep2(1) }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = dummy;
  rec__discrimrec__register_type__ignore_32a = of_rep1(of_int(0));
  rec__discrimrec__register_type__value_32 =
  of_rep1(toSmall(urem1(to_rep(reg1), of_int1(4294967296))));
  rec__discrimrec__register_type__ignore_32b = dummy1;
  rec__discrimrec__register_type__ignore_16a = dummy2;
  rec__discrimrec__register_type__value_16 = dummy2;
  rec__discrimrec__register_type__ignore_32c = dummy1;
  rec__discrimrec__register_type__ignore_16b = dummy2;
  rec__discrimrec__register_type__value_high = dummy3;
  rec__discrimrec__register_type__value_low = dummy3 }; attr__constrained =
  true })))

predicate in_range5(rec__discrimrec__register_type__option1: int,
  a: us_rep) =
  (rec__discrimrec__register_type__option1 = to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__size5({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__alignment5({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

logic discrimrec__register_type__option__first__bit5 : int

logic discrimrec__register_type__option__last__bit5 : int

logic discrimrec__register_type__option__position5 : int

axiom discrimrec__register_type__option__first__bit_axiom5 :
  (0 <= discrimrec__register_type__option__first__bit5)

axiom discrimrec__register_type__option__last__bit_axiom5 :
  (discrimrec__register_type__option__first__bit5 <  discrimrec__register_type__option__last__bit5)

axiom discrimrec__register_type__option__position_axiom5 :
  (0 <= discrimrec__register_type__option__position5)

logic discrimrec__register_type__value_64__first__bit5 : int

logic discrimrec__register_type__value_64__last__bit5 : int

logic discrimrec__register_type__value_64__position5 : int

axiom discrimrec__register_type__value_64__first__bit_axiom5 :
  (0 <= discrimrec__register_type__value_64__first__bit5)

axiom discrimrec__register_type__value_64__last__bit_axiom5 :
  (discrimrec__register_type__value_64__first__bit5 <  discrimrec__register_type__value_64__last__bit5)

axiom discrimrec__register_type__value_64__position_axiom5 :
  (0 <= discrimrec__register_type__value_64__position5)

logic discrimrec__register_type__ignore_32b__first__bit5 : int

logic discrimrec__register_type__ignore_32b__last__bit5 : int

logic discrimrec__register_type__ignore_32b__position5 : int

axiom discrimrec__register_type__ignore_32b__first__bit_axiom5 :
  (0 <= discrimrec__register_type__ignore_32b__first__bit5)

axiom discrimrec__register_type__ignore_32b__last__bit_axiom5 :
  (discrimrec__register_type__ignore_32b__first__bit5 <  discrimrec__register_type__ignore_32b__last__bit5)

axiom discrimrec__register_type__ignore_32b__position_axiom5 :
  (0 <= discrimrec__register_type__ignore_32b__position5)

logic discrimrec__register_type__ignore_16a__first__bit5 : int

logic discrimrec__register_type__ignore_16a__last__bit5 : int

logic discrimrec__register_type__ignore_16a__position5 : int

axiom discrimrec__register_type__ignore_16a__first__bit_axiom5 :
  (0 <= discrimrec__register_type__ignore_16a__first__bit5)

axiom discrimrec__register_type__ignore_16a__last__bit_axiom5 :
  (discrimrec__register_type__ignore_16a__first__bit5 <  discrimrec__register_type__ignore_16a__last__bit5)

axiom discrimrec__register_type__ignore_16a__position_axiom5 :
  (0 <= discrimrec__register_type__ignore_16a__position5)

logic discrimrec__register_type__value_16__first__bit5 : int

logic discrimrec__register_type__value_16__last__bit5 : int

logic discrimrec__register_type__value_16__position5 : int

axiom discrimrec__register_type__value_16__first__bit_axiom5 :
  (0 <= discrimrec__register_type__value_16__first__bit5)

axiom discrimrec__register_type__value_16__last__bit_axiom5 :
  (discrimrec__register_type__value_16__first__bit5 <  discrimrec__register_type__value_16__last__bit5)

axiom discrimrec__register_type__value_16__position_axiom5 :
  (0 <= discrimrec__register_type__value_16__position5)

logic discrimrec__register_type__ignore_32c__first__bit5 : int

logic discrimrec__register_type__ignore_32c__last__bit5 : int

logic discrimrec__register_type__ignore_32c__position5 : int

axiom discrimrec__register_type__ignore_32c__first__bit_axiom5 :
  (0 <= discrimrec__register_type__ignore_32c__first__bit5)

axiom discrimrec__register_type__ignore_32c__last__bit_axiom5 :
  (discrimrec__register_type__ignore_32c__first__bit5 <  discrimrec__register_type__ignore_32c__last__bit5)

axiom discrimrec__register_type__ignore_32c__position_axiom5 :
  (0 <= discrimrec__register_type__ignore_32c__position5)

logic discrimrec__register_type__ignore_16b__first__bit5 : int

logic discrimrec__register_type__ignore_16b__last__bit5 : int

logic discrimrec__register_type__ignore_16b__position5 : int

axiom discrimrec__register_type__ignore_16b__first__bit_axiom5 :
  (0 <= discrimrec__register_type__ignore_16b__first__bit5)

axiom discrimrec__register_type__ignore_16b__last__bit_axiom5 :
  (discrimrec__register_type__ignore_16b__first__bit5 <  discrimrec__register_type__ignore_16b__last__bit5)

axiom discrimrec__register_type__ignore_16b__position_axiom5 :
  (0 <= discrimrec__register_type__ignore_16b__position5)

logic discrimrec__register_type__value_high__first__bit5 : int

logic discrimrec__register_type__value_high__last__bit5 : int

logic discrimrec__register_type__value_high__position5 : int

axiom discrimrec__register_type__value_high__first__bit_axiom5 :
  (0 <= discrimrec__register_type__value_high__first__bit5)

axiom discrimrec__register_type__value_high__last__bit_axiom5 :
  (discrimrec__register_type__value_high__first__bit5 <  discrimrec__register_type__value_high__last__bit5)

axiom discrimrec__register_type__value_high__position_axiom5 :
  (0 <= discrimrec__register_type__value_high__position5)

logic discrimrec__register_type__value_low__first__bit5 : int

logic discrimrec__register_type__value_low__last__bit5 : int

logic discrimrec__register_type__value_low__position5 : int

axiom discrimrec__register_type__value_low__first__bit_axiom5 :
  (0 <= discrimrec__register_type__value_low__first__bit5)

axiom discrimrec__register_type__value_low__last__bit_axiom5 :
  (discrimrec__register_type__value_low__first__bit5 <  discrimrec__register_type__value_low__last__bit5)

axiom discrimrec__register_type__value_low__position_axiom5 :
  (0 <= discrimrec__register_type__value_low__position5)

logic discrimrec__register_type__ignore_32a__first__bit5 : int

logic discrimrec__register_type__ignore_32a__last__bit5 : int

logic discrimrec__register_type__ignore_32a__position5 : int

axiom discrimrec__register_type__ignore_32a__first__bit_axiom5 :
  (0 <= discrimrec__register_type__ignore_32a__first__bit5)

axiom discrimrec__register_type__ignore_32a__last__bit_axiom5 :
  (discrimrec__register_type__ignore_32a__first__bit5 <  discrimrec__register_type__ignore_32a__last__bit5)

axiom discrimrec__register_type__ignore_32a__position_axiom5 :
  (0 <= discrimrec__register_type__ignore_32a__position5)

logic discrimrec__register_type__value_32__first__bit5 : int

logic discrimrec__register_type__value_32__last__bit5 : int

logic discrimrec__register_type__value_32__position5 : int

axiom discrimrec__register_type__value_32__first__bit_axiom5 :
  (0 <= discrimrec__register_type__value_32__first__bit5)

axiom discrimrec__register_type__value_32__last__bit_axiom5 :
  (discrimrec__register_type__value_32__first__bit5 <  discrimrec__register_type__value_32__last__bit5)

axiom discrimrec__register_type__value_32__position_axiom5 :
  (0 <= discrimrec__register_type__value_32__position5)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy65 : register_option

logic dummy66 : unsigned_64

logic dummy67 : unsigned_32

logic dummy68 : unsigned_32

logic dummy69 : unsigned_32

logic dummy70 : unsigned_16

logic dummy71 : unsigned_16

logic dummy72 : unsigned_32

logic dummy73 : unsigned_16

logic dummy74 : unsigned_8

logic dummy75 : unsigned_8

logic dummy76 : bool

type teaxS__ref = { teaxS__content : us_rep
}

function teaxS__ref___projection(a: teaxS__ref) : us_rep = (a).teaxS__content

logic eax__split_discrs : register_option

logic eax__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range6(rec__discrimrec__register_type__option1: int,
  a: us_rep) =
  (rec__discrimrec__register_type__option1 = to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option))

logic value__size6 : int

logic object__size6 : us_rep -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__size6({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__alignment6({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

logic discrimrec__register_type__option__first__bit6 : int

logic discrimrec__register_type__option__last__bit6 : int

logic discrimrec__register_type__option__position6 : int

axiom discrimrec__register_type__option__first__bit_axiom6 :
  (0 <= discrimrec__register_type__option__first__bit6)

axiom discrimrec__register_type__option__last__bit_axiom6 :
  (discrimrec__register_type__option__first__bit6 <  discrimrec__register_type__option__last__bit6)

axiom discrimrec__register_type__option__position_axiom6 :
  (0 <= discrimrec__register_type__option__position6)

logic discrimrec__register_type__ignore_32a__first__bit6 : int

logic discrimrec__register_type__ignore_32a__last__bit6 : int

logic discrimrec__register_type__ignore_32a__position6 : int

axiom discrimrec__register_type__ignore_32a__first__bit_axiom6 :
  (0 <= discrimrec__register_type__ignore_32a__first__bit6)

axiom discrimrec__register_type__ignore_32a__last__bit_axiom6 :
  (discrimrec__register_type__ignore_32a__first__bit6 <  discrimrec__register_type__ignore_32a__last__bit6)

axiom discrimrec__register_type__ignore_32a__position_axiom6 :
  (0 <= discrimrec__register_type__ignore_32a__position6)

logic discrimrec__register_type__value_32__first__bit6 : int

logic discrimrec__register_type__value_32__last__bit6 : int

logic discrimrec__register_type__value_32__position6 : int

axiom discrimrec__register_type__value_32__first__bit_axiom6 :
  (0 <= discrimrec__register_type__value_32__first__bit6)

axiom discrimrec__register_type__value_32__last__bit_axiom6 :
  (discrimrec__register_type__value_32__first__bit6 <  discrimrec__register_type__value_32__last__bit6)

axiom discrimrec__register_type__value_32__position_axiom6 :
  (0 <= discrimrec__register_type__value_32__position6)

logic discrimrec__register_type__ignore_32b__first__bit6 : int

logic discrimrec__register_type__ignore_32b__last__bit6 : int

logic discrimrec__register_type__ignore_32b__position6 : int

axiom discrimrec__register_type__ignore_32b__first__bit_axiom6 :
  (0 <= discrimrec__register_type__ignore_32b__first__bit6)

axiom discrimrec__register_type__ignore_32b__last__bit_axiom6 :
  (discrimrec__register_type__ignore_32b__first__bit6 <  discrimrec__register_type__ignore_32b__last__bit6)

axiom discrimrec__register_type__ignore_32b__position_axiom6 :
  (0 <= discrimrec__register_type__ignore_32b__position6)

logic discrimrec__register_type__ignore_16a__first__bit6 : int

logic discrimrec__register_type__ignore_16a__last__bit6 : int

logic discrimrec__register_type__ignore_16a__position6 : int

axiom discrimrec__register_type__ignore_16a__first__bit_axiom6 :
  (0 <= discrimrec__register_type__ignore_16a__first__bit6)

axiom discrimrec__register_type__ignore_16a__last__bit_axiom6 :
  (discrimrec__register_type__ignore_16a__first__bit6 <  discrimrec__register_type__ignore_16a__last__bit6)

axiom discrimrec__register_type__ignore_16a__position_axiom6 :
  (0 <= discrimrec__register_type__ignore_16a__position6)

logic discrimrec__register_type__value_16__first__bit6 : int

logic discrimrec__register_type__value_16__last__bit6 : int

logic discrimrec__register_type__value_16__position6 : int

axiom discrimrec__register_type__value_16__first__bit_axiom6 :
  (0 <= discrimrec__register_type__value_16__first__bit6)

axiom discrimrec__register_type__value_16__last__bit_axiom6 :
  (discrimrec__register_type__value_16__first__bit6 <  discrimrec__register_type__value_16__last__bit6)

axiom discrimrec__register_type__value_16__position_axiom6 :
  (0 <= discrimrec__register_type__value_16__position6)

logic discrimrec__register_type__ignore_32c__first__bit6 : int

logic discrimrec__register_type__ignore_32c__last__bit6 : int

logic discrimrec__register_type__ignore_32c__position6 : int

axiom discrimrec__register_type__ignore_32c__first__bit_axiom6 :
  (0 <= discrimrec__register_type__ignore_32c__first__bit6)

axiom discrimrec__register_type__ignore_32c__last__bit_axiom6 :
  (discrimrec__register_type__ignore_32c__first__bit6 <  discrimrec__register_type__ignore_32c__last__bit6)

axiom discrimrec__register_type__ignore_32c__position_axiom6 :
  (0 <= discrimrec__register_type__ignore_32c__position6)

logic discrimrec__register_type__ignore_16b__first__bit6 : int

logic discrimrec__register_type__ignore_16b__last__bit6 : int

logic discrimrec__register_type__ignore_16b__position6 : int

axiom discrimrec__register_type__ignore_16b__first__bit_axiom6 :
  (0 <= discrimrec__register_type__ignore_16b__first__bit6)

axiom discrimrec__register_type__ignore_16b__last__bit_axiom6 :
  (discrimrec__register_type__ignore_16b__first__bit6 <  discrimrec__register_type__ignore_16b__last__bit6)

axiom discrimrec__register_type__ignore_16b__position_axiom6 :
  (0 <= discrimrec__register_type__ignore_16b__position6)

logic discrimrec__register_type__value_high__first__bit6 : int

logic discrimrec__register_type__value_high__last__bit6 : int

logic discrimrec__register_type__value_high__position6 : int

axiom discrimrec__register_type__value_high__first__bit_axiom6 :
  (0 <= discrimrec__register_type__value_high__first__bit6)

axiom discrimrec__register_type__value_high__last__bit_axiom6 :
  (discrimrec__register_type__value_high__first__bit6 <  discrimrec__register_type__value_high__last__bit6)

axiom discrimrec__register_type__value_high__position_axiom6 :
  (0 <= discrimrec__register_type__value_high__position6)

logic discrimrec__register_type__value_low__first__bit6 : int

logic discrimrec__register_type__value_low__last__bit6 : int

logic discrimrec__register_type__value_low__position6 : int

axiom discrimrec__register_type__value_low__first__bit_axiom6 :
  (0 <= discrimrec__register_type__value_low__first__bit6)

axiom discrimrec__register_type__value_low__last__bit_axiom6 :
  (discrimrec__register_type__value_low__first__bit6 <  discrimrec__register_type__value_low__last__bit6)

axiom discrimrec__register_type__value_low__position_axiom6 :
  (0 <= discrimrec__register_type__value_low__position6)

logic discrimrec__register_type__value_64__first__bit6 : int

logic discrimrec__register_type__value_64__last__bit6 : int

logic discrimrec__register_type__value_64__position6 : int

axiom discrimrec__register_type__value_64__first__bit_axiom6 :
  (0 <= discrimrec__register_type__value_64__first__bit6)

axiom discrimrec__register_type__value_64__last__bit_axiom6 :
  (discrimrec__register_type__value_64__first__bit6 <  discrimrec__register_type__value_64__last__bit6)

axiom discrimrec__register_type__value_64__position_axiom6 :
  (0 <= discrimrec__register_type__value_64__position6)

logic user_eq11 : us_rep, us_rep -> bool

logic dummy77 : register_option

logic dummy78 : unsigned_64

logic dummy79 : unsigned_32

logic dummy80 : unsigned_32

logic dummy81 : unsigned_32

logic dummy82 : unsigned_16

logic dummy83 : unsigned_16

logic dummy84 : unsigned_32

logic dummy85 : unsigned_16

logic dummy86 : unsigned_8

logic dummy87 : unsigned_8

logic dummy88 : bool

type t2b__ref = { t2b__content : us_rep
}

function t2b__ref___projection(a: t2b__ref) : us_rep = (a).t2b__content

predicate in_range7(rec__discrimrec__register_type__option1: int,
  a: us_rep) =
  (rec__discrimrec__register_type__option1 = to_rep2(((a).us_split_discrs1).rec__discrimrec__register_type__option))

logic value__size7 : int

logic object__size7 : us_rep -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__size7({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:register_option. forall a1:unsigned_64. forall a2:unsigned_32.
  forall a3:unsigned_32. forall a4:unsigned_32. forall a5:unsigned_16.
  forall a6:unsigned_16. forall a7:unsigned_32. forall a8:unsigned_16.
  forall a9:unsigned_8. forall a10:unsigned_8. forall a11:bool.
  (0 <= object__alignment7({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = a }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = a1;
  rec__discrimrec__register_type__ignore_32a = a2;
  rec__discrimrec__register_type__value_32 = a3;
  rec__discrimrec__register_type__ignore_32b = a4;
  rec__discrimrec__register_type__ignore_16a = a5;
  rec__discrimrec__register_type__value_16 = a6;
  rec__discrimrec__register_type__ignore_32c = a7;
  rec__discrimrec__register_type__ignore_16b = a8;
  rec__discrimrec__register_type__value_high = a9;
  rec__discrimrec__register_type__value_low = a10 }; attr__constrained = a11
  })))

logic discrimrec__register_type__option__first__bit7 : int

logic discrimrec__register_type__option__last__bit7 : int

logic discrimrec__register_type__option__position7 : int

axiom discrimrec__register_type__option__first__bit_axiom7 :
  (0 <= discrimrec__register_type__option__first__bit7)

axiom discrimrec__register_type__option__last__bit_axiom7 :
  (discrimrec__register_type__option__first__bit7 <  discrimrec__register_type__option__last__bit7)

axiom discrimrec__register_type__option__position_axiom7 :
  (0 <= discrimrec__register_type__option__position7)

logic discrimrec__register_type__ignore_32a__first__bit7 : int

logic discrimrec__register_type__ignore_32a__last__bit7 : int

logic discrimrec__register_type__ignore_32a__position7 : int

axiom discrimrec__register_type__ignore_32a__first__bit_axiom7 :
  (0 <= discrimrec__register_type__ignore_32a__first__bit7)

axiom discrimrec__register_type__ignore_32a__last__bit_axiom7 :
  (discrimrec__register_type__ignore_32a__first__bit7 <  discrimrec__register_type__ignore_32a__last__bit7)

axiom discrimrec__register_type__ignore_32a__position_axiom7 :
  (0 <= discrimrec__register_type__ignore_32a__position7)

logic discrimrec__register_type__value_32__first__bit7 : int

logic discrimrec__register_type__value_32__last__bit7 : int

logic discrimrec__register_type__value_32__position7 : int

axiom discrimrec__register_type__value_32__first__bit_axiom7 :
  (0 <= discrimrec__register_type__value_32__first__bit7)

axiom discrimrec__register_type__value_32__last__bit_axiom7 :
  (discrimrec__register_type__value_32__first__bit7 <  discrimrec__register_type__value_32__last__bit7)

axiom discrimrec__register_type__value_32__position_axiom7 :
  (0 <= discrimrec__register_type__value_32__position7)

logic discrimrec__register_type__ignore_32b__first__bit7 : int

logic discrimrec__register_type__ignore_32b__last__bit7 : int

logic discrimrec__register_type__ignore_32b__position7 : int

axiom discrimrec__register_type__ignore_32b__first__bit_axiom7 :
  (0 <= discrimrec__register_type__ignore_32b__first__bit7)

axiom discrimrec__register_type__ignore_32b__last__bit_axiom7 :
  (discrimrec__register_type__ignore_32b__first__bit7 <  discrimrec__register_type__ignore_32b__last__bit7)

axiom discrimrec__register_type__ignore_32b__position_axiom7 :
  (0 <= discrimrec__register_type__ignore_32b__position7)

logic discrimrec__register_type__ignore_16a__first__bit7 : int

logic discrimrec__register_type__ignore_16a__last__bit7 : int

logic discrimrec__register_type__ignore_16a__position7 : int

axiom discrimrec__register_type__ignore_16a__first__bit_axiom7 :
  (0 <= discrimrec__register_type__ignore_16a__first__bit7)

axiom discrimrec__register_type__ignore_16a__last__bit_axiom7 :
  (discrimrec__register_type__ignore_16a__first__bit7 <  discrimrec__register_type__ignore_16a__last__bit7)

axiom discrimrec__register_type__ignore_16a__position_axiom7 :
  (0 <= discrimrec__register_type__ignore_16a__position7)

logic discrimrec__register_type__value_16__first__bit7 : int

logic discrimrec__register_type__value_16__last__bit7 : int

logic discrimrec__register_type__value_16__position7 : int

axiom discrimrec__register_type__value_16__first__bit_axiom7 :
  (0 <= discrimrec__register_type__value_16__first__bit7)

axiom discrimrec__register_type__value_16__last__bit_axiom7 :
  (discrimrec__register_type__value_16__first__bit7 <  discrimrec__register_type__value_16__last__bit7)

axiom discrimrec__register_type__value_16__position_axiom7 :
  (0 <= discrimrec__register_type__value_16__position7)

logic discrimrec__register_type__ignore_32c__first__bit7 : int

logic discrimrec__register_type__ignore_32c__last__bit7 : int

logic discrimrec__register_type__ignore_32c__position7 : int

axiom discrimrec__register_type__ignore_32c__first__bit_axiom7 :
  (0 <= discrimrec__register_type__ignore_32c__first__bit7)

axiom discrimrec__register_type__ignore_32c__last__bit_axiom7 :
  (discrimrec__register_type__ignore_32c__first__bit7 <  discrimrec__register_type__ignore_32c__last__bit7)

axiom discrimrec__register_type__ignore_32c__position_axiom7 :
  (0 <= discrimrec__register_type__ignore_32c__position7)

logic discrimrec__register_type__ignore_16b__first__bit7 : int

logic discrimrec__register_type__ignore_16b__last__bit7 : int

logic discrimrec__register_type__ignore_16b__position7 : int

axiom discrimrec__register_type__ignore_16b__first__bit_axiom7 :
  (0 <= discrimrec__register_type__ignore_16b__first__bit7)

axiom discrimrec__register_type__ignore_16b__last__bit_axiom7 :
  (discrimrec__register_type__ignore_16b__first__bit7 <  discrimrec__register_type__ignore_16b__last__bit7)

axiom discrimrec__register_type__ignore_16b__position_axiom7 :
  (0 <= discrimrec__register_type__ignore_16b__position7)

logic discrimrec__register_type__value_high__first__bit7 : int

logic discrimrec__register_type__value_high__last__bit7 : int

logic discrimrec__register_type__value_high__position7 : int

axiom discrimrec__register_type__value_high__first__bit_axiom7 :
  (0 <= discrimrec__register_type__value_high__first__bit7)

axiom discrimrec__register_type__value_high__last__bit_axiom7 :
  (discrimrec__register_type__value_high__first__bit7 <  discrimrec__register_type__value_high__last__bit7)

axiom discrimrec__register_type__value_high__position_axiom7 :
  (0 <= discrimrec__register_type__value_high__position7)

logic discrimrec__register_type__value_low__first__bit7 : int

logic discrimrec__register_type__value_low__last__bit7 : int

logic discrimrec__register_type__value_low__position7 : int

axiom discrimrec__register_type__value_low__first__bit_axiom7 :
  (0 <= discrimrec__register_type__value_low__first__bit7)

axiom discrimrec__register_type__value_low__last__bit_axiom7 :
  (discrimrec__register_type__value_low__first__bit7 <  discrimrec__register_type__value_low__last__bit7)

axiom discrimrec__register_type__value_low__position_axiom7 :
  (0 <= discrimrec__register_type__value_low__position7)

logic discrimrec__register_type__value_64__first__bit7 : int

logic discrimrec__register_type__value_64__last__bit7 : int

logic discrimrec__register_type__value_64__position7 : int

axiom discrimrec__register_type__value_64__first__bit_axiom7 :
  (0 <= discrimrec__register_type__value_64__first__bit7)

axiom discrimrec__register_type__value_64__last__bit_axiom7 :
  (discrimrec__register_type__value_64__first__bit7 <  discrimrec__register_type__value_64__last__bit7)

axiom discrimrec__register_type__value_64__position_axiom7 :
  (0 <= discrimrec__register_type__value_64__position7)

logic user_eq12 : us_rep, us_rep -> bool

logic dummy89 : register_option

logic dummy90 : unsigned_64

logic dummy91 : unsigned_32

logic dummy92 : unsigned_32

logic dummy93 : unsigned_32

logic dummy94 : unsigned_16

logic dummy95 : unsigned_16

logic dummy96 : unsigned_32

logic dummy97 : unsigned_16

logic dummy98 : unsigned_8

logic dummy99 : unsigned_8

logic dummy100 : bool

type t3b__ref = { t3b__content : us_rep
}

function t3b__ref___projection(a: t3b__ref) : us_rep = (a).t3b__content

 (* File "discrimrec.adb", line 6, characters 0-0 *)
goal WP_parameter_def :
  (forall rax__split_fields:unsigned_64.
  forall rax__split_fields1:unsigned_32.
  forall rax__split_fields2:unsigned_32.
  forall rax__split_fields3:unsigned_32.
  forall rax__split_fields4:unsigned_16.
  forall rax__split_fields5:unsigned_16.
  forall rax__split_fields6:unsigned_32.
  forall rax__split_fields7:unsigned_16.
  forall rax__split_fields8:unsigned_8. forall rax__split_fields9:unsigned_8.
  forall eax__split_fields:unsigned_64.
  forall eax__split_fields1:unsigned_32.
  forall eax__split_fields2:unsigned_32.
  forall eax__split_fields3:unsigned_32.
  forall eax__split_fields4:unsigned_16.
  forall eax__split_fields5:unsigned_16.
  forall eax__split_fields6:unsigned_32.
  forall eax__split_fields7:unsigned_16.
  forall eax__split_fields8:unsigned_8. forall eax__split_fields9:unsigned_8.
  forall us:int. forall o:register_option. forall o1:unsigned_64.
  forall o2:unsigned_64. forall o3:unsigned_32. forall o4:unsigned_32.
  forall o5:unsigned_32. forall o6:unsigned_16. forall o7:unsigned_16.
  forall o8:unsigned_32. forall o9:unsigned_16. forall o10:unsigned_8.
  forall o11:unsigned_8. forall o12:register_option.
  forall o13:register_option. forall o14:unsigned_64. forall o15:unsigned_32.
  forall o16:unsigned_32. forall o17:unsigned_32. forall o18:unsigned_16.
  forall o19:unsigned_16. forall o20:unsigned_32. forall o21:unsigned_16.
  forall o22:unsigned_8. forall o23:unsigned_8. forall o24:bool.
  forall o25:register_option. forall o26:unsigned_64. forall o27:unsigned_32.
  forall o28:unsigned_32. forall o29:unsigned_32. forall o30:unsigned_16.
  forall o31:unsigned_16. forall o32:unsigned_32. forall o33:unsigned_16.
  forall o34:unsigned_8. forall o35:unsigned_8. forall o36:bool.
  forall o37:register_option. forall o38:unsigned_64. forall o39:unsigned_32.
  forall o40:unsigned_32. forall o41:unsigned_32. forall o42:unsigned_16.
  forall o43:unsigned_16. forall o44:unsigned_32. forall o45:unsigned_16.
  forall o46:unsigned_8. forall o47:unsigned_8. forall o48:bool.
  forall temp___260:register_option. forall temp___2601:unsigned_64.
  forall temp___2602:unsigned_32. forall temp___2603:unsigned_32.
  forall temp___2604:unsigned_32. forall temp___2605:unsigned_16.
  forall temp___2606:unsigned_16. forall temp___2607:unsigned_32.
  forall temp___2608:unsigned_16. forall temp___2609:unsigned_8.
  forall temp___26010:unsigned_8. forall temp___26011:bool.
  forall o49:register_option. forall o50:unsigned_64. forall o51:unsigned_32.
  forall o52:unsigned_32. forall o53:unsigned_32. forall o54:unsigned_16.
  forall o55:unsigned_16. forall o56:unsigned_32. forall o57:unsigned_16.
  forall o58:unsigned_8. forall o59:unsigned_8. forall o60:bool.
  forall o61:register_option. forall o62:unsigned_64. forall o63:unsigned_32.
  forall o64:unsigned_32. forall o65:unsigned_32. forall o66:unsigned_16.
  forall o67:unsigned_16. forall o68:unsigned_32. forall o69:unsigned_16.
  forall o70:unsigned_8. forall o71:unsigned_8. forall o72:bool.
  forall o73:register_option. forall o74:unsigned_64. forall o75:unsigned_32.
  forall o76:unsigned_32. forall o77:unsigned_32. forall o78:unsigned_16.
  forall o79:unsigned_16. forall o80:unsigned_32. forall o81:unsigned_16.
  forall o82:unsigned_8. forall o83:unsigned_8. forall o84:bool.
  forall temp___261:register_option. forall temp___2611:unsigned_64.
  forall temp___2612:unsigned_32. forall temp___2613:unsigned_32.
  forall temp___2614:unsigned_32. forall temp___2615:unsigned_16.
  forall temp___2616:unsigned_16. forall temp___2617:unsigned_32.
  forall temp___2618:unsigned_16. forall temp___2619:unsigned_8.
  forall temp___26110:unsigned_8. forall temp___26111:bool.
  forall o85:register_option. forall o86:unsigned_64. forall o87:unsigned_64.
  forall o88:unsigned_32. forall o89:unsigned_32. forall o90:unsigned_32.
  forall o91:unsigned_16. forall o92:unsigned_16. forall o93:unsigned_32.
  forall o94:unsigned_16. forall o95:unsigned_8. forall o96:unsigned_8.
  forall o97:register_option. forall o98:register_option.
  forall o99:unsigned_64. forall o100:unsigned_32. forall o101:unsigned_32.
  forall o102:unsigned_32. forall o103:unsigned_16. forall o104:unsigned_16.
  forall o105:unsigned_32. forall o106:unsigned_16. forall o107:unsigned_8.
  forall o108:unsigned_8. forall o109:bool. forall o110:register_option.
  forall o111:unsigned_64. forall o112:unsigned_32. forall o113:unsigned_32.
  forall o114:unsigned_32. forall o115:unsigned_16. forall o116:unsigned_16.
  forall o117:unsigned_32. forall o118:unsigned_16. forall o119:unsigned_8.
  forall o120:unsigned_8. forall o121:bool. forall o122:register_option.
  forall o123:unsigned_64. forall o124:unsigned_32. forall o125:unsigned_32.
  forall o126:unsigned_32. forall o127:unsigned_16. forall o128:unsigned_16.
  forall o129:unsigned_32. forall o130:unsigned_16. forall o131:unsigned_8.
  forall o132:unsigned_8. forall o133:bool.
  forall temp___262:register_option. forall temp___2621:unsigned_64.
  forall temp___2622:unsigned_32. forall temp___2623:unsigned_32.
  forall temp___2624:unsigned_32. forall temp___2625:unsigned_16.
  forall temp___2626:unsigned_16. forall temp___2627:unsigned_32.
  forall temp___2628:unsigned_16. forall temp___2629:unsigned_8.
  forall temp___26210:unsigned_8. forall temp___26211:bool.
  forall result:us_split_fields__ref.
  forall rax__split_fields10:us_split_fields.
  forall result1:us_split_fields__ref.
  forall eax__split_fields10:us_split_fields.
  forall result2:us_split_fields__ref.
  forall rax__split_fields11:us_split_fields.
  forall rax__split_fields12:us_split_fields__ref.
  forall eax__split_fields11:us_split_fields__ref.
  forall rax__split_fields13:us_split_fields.
  forall eax__split_fields12:us_split_fields.
  ((((0 = to_rep2(rax__split_discrs)) and
  (rax__attr__constrained = true)) and ((((us = 1) and in_range(1)) and
  (((eax__attr__constrained = true) and (to_rep2(eax__split_discrs) = 1)) and
  (((1 = to_rep2(eax__split_discrs)) and (eax__attr__constrained = true)) and
  ((((((((to_rep(o1) = of_int1(16)) and ((o1 = o2) and ((dummy1 = o3) and
  ((dummy1 = o4) and ((dummy1 = o5) and ((dummy2 = o6) and ((dummy2 = o7) and
  ((dummy1 = o8) and ((dummy2 = o9) and ((dummy3 = o10) and
  (dummy3 = o11))))))))))) and (((to_rep2(o) = 0) and (o = o12)) and
  ((o13 = o12) and (((o14 = o2) and ((o15 = o3) and ((o16 = o4) and
  ((o17 = o5) and ((o18 = o6) and ((o19 = o7) and ((o20 = o8) and
  ((o21 = o9) and ((o22 = o10) and (o23 = o11)))))))))) and
  (true = o24))))) and ({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = o25 }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = o26;
  rec__discrimrec__register_type__ignore_32a = o27;
  rec__discrimrec__register_type__value_32 = o28;
  rec__discrimrec__register_type__ignore_32b = o29;
  rec__discrimrec__register_type__ignore_16a = o30;
  rec__discrimrec__register_type__value_16 = o31;
  rec__discrimrec__register_type__ignore_32c = o32;
  rec__discrimrec__register_type__ignore_16b = o33;
  rec__discrimrec__register_type__value_high = o34;
  rec__discrimrec__register_type__value_low = o35 }; attr__constrained = o36
  } = { us_split_discrs1 = { rec__discrimrec__register_type__option = o13 };
  us_split_fields1 = { rec__discrimrec__register_type__value_64 = o14;
  rec__discrimrec__register_type__ignore_32a = o15;
  rec__discrimrec__register_type__value_32 = o16;
  rec__discrimrec__register_type__ignore_32b = o17;
  rec__discrimrec__register_type__ignore_16a = o18;
  rec__discrimrec__register_type__value_16 = o19;
  rec__discrimrec__register_type__ignore_32c = o20;
  rec__discrimrec__register_type__ignore_16b = o21;
  rec__discrimrec__register_type__value_high = o22;
  rec__discrimrec__register_type__value_low = o23 }; attr__constrained = o24
  })) and ({ us_split_discrs1 = { rec__discrimrec__register_type__option =
  o37 }; us_split_fields1 = { rec__discrimrec__register_type__value_64 = o38;
  rec__discrimrec__register_type__ignore_32a = o39;
  rec__discrimrec__register_type__value_32 = o40;
  rec__discrimrec__register_type__ignore_32b = o41;
  rec__discrimrec__register_type__ignore_16a = o42;
  rec__discrimrec__register_type__value_16 = o43;
  rec__discrimrec__register_type__ignore_32c = o44;
  rec__discrimrec__register_type__ignore_16b = o45;
  rec__discrimrec__register_type__value_high = o46;
  rec__discrimrec__register_type__value_low = o47 }; attr__constrained = o48
  } = { us_split_discrs1 = { rec__discrimrec__register_type__option = o25 };
  us_split_fields1 = { rec__discrimrec__register_type__value_64 = o26;
  rec__discrimrec__register_type__ignore_32a = o27;
  rec__discrimrec__register_type__value_32 = o28;
  rec__discrimrec__register_type__ignore_32b = o29;
  rec__discrimrec__register_type__ignore_16a = o30;
  rec__discrimrec__register_type__value_16 = o31;
  rec__discrimrec__register_type__ignore_32c = o32;
  rec__discrimrec__register_type__ignore_16b = o33;
  rec__discrimrec__register_type__value_high = o34;
  rec__discrimrec__register_type__value_low = o35 }; attr__constrained = o36
  })) and ({ us_split_discrs1 = { rec__discrimrec__register_type__option =
  temp___260 }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = temp___2601;
  rec__discrimrec__register_type__ignore_32a = temp___2602;
  rec__discrimrec__register_type__value_32 = temp___2603;
  rec__discrimrec__register_type__ignore_32b = temp___2604;
  rec__discrimrec__register_type__ignore_16a = temp___2605;
  rec__discrimrec__register_type__value_16 = temp___2606;
  rec__discrimrec__register_type__ignore_32c = temp___2607;
  rec__discrimrec__register_type__ignore_16b = temp___2608;
  rec__discrimrec__register_type__value_high = temp___2609;
  rec__discrimrec__register_type__value_low = temp___26010 };
  attr__constrained = temp___26011 } = { us_split_discrs1 = {
  rec__discrimrec__register_type__option = o37 }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = o38;
  rec__discrimrec__register_type__ignore_32a = o39;
  rec__discrimrec__register_type__value_32 = o40;
  rec__discrimrec__register_type__ignore_32b = o41;
  rec__discrimrec__register_type__ignore_16a = o42;
  rec__discrimrec__register_type__value_16 = o43;
  rec__discrimrec__register_type__ignore_32c = o44;
  rec__discrimrec__register_type__ignore_16b = o45;
  rec__discrimrec__register_type__value_high = o46;
  rec__discrimrec__register_type__value_low = o47 }; attr__constrained = o48
  })) and (((result = { us_split_fields__content = {
  rec__discrimrec__register_type__value_64 = rax__split_fields;
  rec__discrimrec__register_type__ignore_32a = rax__split_fields1;
  rec__discrimrec__register_type__value_32 = rax__split_fields2;
  rec__discrimrec__register_type__ignore_32b = rax__split_fields3;
  rec__discrimrec__register_type__ignore_16a = rax__split_fields4;
  rec__discrimrec__register_type__value_16 = rax__split_fields5;
  rec__discrimrec__register_type__ignore_32c = rax__split_fields6;
  rec__discrimrec__register_type__ignore_16b = rax__split_fields7;
  rec__discrimrec__register_type__value_high = rax__split_fields8;
  rec__discrimrec__register_type__value_low = rax__split_fields9 } }) and
  (rax__split_fields10 = { rec__discrimrec__register_type__value_64 =
  temp___2601; rec__discrimrec__register_type__ignore_32a = temp___2602;
  rec__discrimrec__register_type__value_32 = temp___2603;
  rec__discrimrec__register_type__ignore_32b = temp___2604;
  rec__discrimrec__register_type__ignore_16a = temp___2605;
  rec__discrimrec__register_type__value_16 = temp___2606;
  rec__discrimrec__register_type__ignore_32c = temp___2607;
  rec__discrimrec__register_type__ignore_16b = temp___2608;
  rec__discrimrec__register_type__value_high = temp___2609;
  rec__discrimrec__register_type__value_low = temp___26010 })) and
  (rax__split_discrs = temp___260))) and ((((((({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = o49 }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = o50;
  rec__discrimrec__register_type__ignore_32a = o51;
  rec__discrimrec__register_type__value_32 = o52;
  rec__discrimrec__register_type__ignore_32b = o53;
  rec__discrimrec__register_type__ignore_16a = o54;
  rec__discrimrec__register_type__value_16 = o55;
  rec__discrimrec__register_type__ignore_32c = o56;
  rec__discrimrec__register_type__ignore_16b = o57;
  rec__discrimrec__register_type__value_high = o58;
  rec__discrimrec__register_type__value_low = o59 }; attr__constrained = o60
  } = convert_bit_64_to_bit_32({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = rax__split_discrs };
  us_split_fields1 = rax__split_fields10; attr__constrained =
  rax__attr__constrained })) and (((1 = to_rep2(o49)) and (o60 = true)) and
  ((of_rep2(1) = o49) and (((dummy = o50) and ((of_rep1(of_int(0)) = o51) and
  ((of_rep1(toSmall(urem1(to_rep((rax__split_fields10).rec__discrimrec__register_type__value_64),
  of_int1(4294967296)))) = o52) and ((dummy1 = o53) and ((dummy2 = o54) and
  ((dummy2 = o55) and ((dummy1 = o56) and ((dummy2 = o57) and
  ((dummy3 = o58) and (dummy3 = o59)))))))))) and (true = o60))))) and ({
  us_split_discrs1 = { rec__discrimrec__register_type__option = o61 };
  us_split_fields1 = { rec__discrimrec__register_type__value_64 = o62;
  rec__discrimrec__register_type__ignore_32a = o63;
  rec__discrimrec__register_type__value_32 = o64;
  rec__discrimrec__register_type__ignore_32b = o65;
  rec__discrimrec__register_type__ignore_16a = o66;
  rec__discrimrec__register_type__value_16 = o67;
  rec__discrimrec__register_type__ignore_32c = o68;
  rec__discrimrec__register_type__ignore_16b = o69;
  rec__discrimrec__register_type__value_high = o70;
  rec__discrimrec__register_type__value_low = o71 }; attr__constrained = o72
  } = { us_split_discrs1 = { rec__discrimrec__register_type__option = o49 };
  us_split_fields1 = { rec__discrimrec__register_type__value_64 = o50;
  rec__discrimrec__register_type__ignore_32a = o51;
  rec__discrimrec__register_type__value_32 = o52;
  rec__discrimrec__register_type__ignore_32b = o53;
  rec__discrimrec__register_type__ignore_16a = o54;
  rec__discrimrec__register_type__value_16 = o55;
  rec__discrimrec__register_type__ignore_32c = o56;
  rec__discrimrec__register_type__ignore_16b = o57;
  rec__discrimrec__register_type__value_high = o58;
  rec__discrimrec__register_type__value_low = o59 }; attr__constrained = o60
  })) and ({ us_split_discrs1 = { rec__discrimrec__register_type__option =
  o73 }; us_split_fields1 = { rec__discrimrec__register_type__value_64 = o74;
  rec__discrimrec__register_type__ignore_32a = o75;
  rec__discrimrec__register_type__value_32 = o76;
  rec__discrimrec__register_type__ignore_32b = o77;
  rec__discrimrec__register_type__ignore_16a = o78;
  rec__discrimrec__register_type__value_16 = o79;
  rec__discrimrec__register_type__ignore_32c = o80;
  rec__discrimrec__register_type__ignore_16b = o81;
  rec__discrimrec__register_type__value_high = o82;
  rec__discrimrec__register_type__value_low = o83 }; attr__constrained = o84
  } = { us_split_discrs1 = { rec__discrimrec__register_type__option = o61 };
  us_split_fields1 = { rec__discrimrec__register_type__value_64 = o62;
  rec__discrimrec__register_type__ignore_32a = o63;
  rec__discrimrec__register_type__value_32 = o64;
  rec__discrimrec__register_type__ignore_32b = o65;
  rec__discrimrec__register_type__ignore_16a = o66;
  rec__discrimrec__register_type__value_16 = o67;
  rec__discrimrec__register_type__ignore_32c = o68;
  rec__discrimrec__register_type__ignore_16b = o69;
  rec__discrimrec__register_type__value_high = o70;
  rec__discrimrec__register_type__value_low = o71 }; attr__constrained = o72
  })) and ({ us_split_discrs1 = { rec__discrimrec__register_type__option =
  temp___261 }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = temp___2611;
  rec__discrimrec__register_type__ignore_32a = temp___2612;
  rec__discrimrec__register_type__value_32 = temp___2613;
  rec__discrimrec__register_type__ignore_32b = temp___2614;
  rec__discrimrec__register_type__ignore_16a = temp___2615;
  rec__discrimrec__register_type__value_16 = temp___2616;
  rec__discrimrec__register_type__ignore_32c = temp___2617;
  rec__discrimrec__register_type__ignore_16b = temp___2618;
  rec__discrimrec__register_type__value_high = temp___2619;
  rec__discrimrec__register_type__value_low = temp___26110 };
  attr__constrained = temp___26111 } = { us_split_discrs1 = {
  rec__discrimrec__register_type__option = o73 }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = o74;
  rec__discrimrec__register_type__ignore_32a = o75;
  rec__discrimrec__register_type__value_32 = o76;
  rec__discrimrec__register_type__ignore_32b = o77;
  rec__discrimrec__register_type__ignore_16a = o78;
  rec__discrimrec__register_type__value_16 = o79;
  rec__discrimrec__register_type__ignore_32c = o80;
  rec__discrimrec__register_type__ignore_16b = o81;
  rec__discrimrec__register_type__value_high = o82;
  rec__discrimrec__register_type__value_low = o83 }; attr__constrained = o84
  })) and (((result1 = { us_split_fields__content = {
  rec__discrimrec__register_type__value_64 = eax__split_fields;
  rec__discrimrec__register_type__ignore_32a = eax__split_fields1;
  rec__discrimrec__register_type__value_32 = eax__split_fields2;
  rec__discrimrec__register_type__ignore_32b = eax__split_fields3;
  rec__discrimrec__register_type__ignore_16a = eax__split_fields4;
  rec__discrimrec__register_type__value_16 = eax__split_fields5;
  rec__discrimrec__register_type__ignore_32c = eax__split_fields6;
  rec__discrimrec__register_type__ignore_16b = eax__split_fields7;
  rec__discrimrec__register_type__value_high = eax__split_fields8;
  rec__discrimrec__register_type__value_low = eax__split_fields9 } }) and
  (eax__split_fields10 = { rec__discrimrec__register_type__value_64 =
  temp___2611; rec__discrimrec__register_type__ignore_32a = temp___2612;
  rec__discrimrec__register_type__value_32 = temp___2613;
  rec__discrimrec__register_type__ignore_32b = temp___2614;
  rec__discrimrec__register_type__ignore_16a = temp___2615;
  rec__discrimrec__register_type__value_16 = temp___2616;
  rec__discrimrec__register_type__ignore_32c = temp___2617;
  rec__discrimrec__register_type__ignore_16b = temp___2618;
  rec__discrimrec__register_type__value_high = temp___2619;
  rec__discrimrec__register_type__value_low = temp___26110 })) and
  (eax__split_discrs = temp___261))) and
  (((to_rep1((eax__split_fields10).rec__discrimrec__register_type__value_32) = of_int(16)) and
  (((((((to_rep(o86) = of_int1(32)) and ((o86 = o87) and ((dummy1 = o88) and
  ((dummy1 = o89) and ((dummy1 = o90) and ((dummy2 = o91) and
  ((dummy2 = o92) and ((dummy1 = o93) and ((dummy2 = o94) and
  ((dummy3 = o95) and (dummy3 = o96))))))))))) and (((to_rep2(o85) = 0) and
  (o85 = o97)) and ((o98 = o97) and (((o99 = o87) and ((o100 = o88) and
  ((o101 = o89) and ((o102 = o90) and ((o103 = o91) and ((o104 = o92) and
  ((o105 = o93) and ((o106 = o94) and ((o107 = o95) and
  (o108 = o96)))))))))) and (true = o109))))) and ({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = o110 }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = o111;
  rec__discrimrec__register_type__ignore_32a = o112;
  rec__discrimrec__register_type__value_32 = o113;
  rec__discrimrec__register_type__ignore_32b = o114;
  rec__discrimrec__register_type__ignore_16a = o115;
  rec__discrimrec__register_type__value_16 = o116;
  rec__discrimrec__register_type__ignore_32c = o117;
  rec__discrimrec__register_type__ignore_16b = o118;
  rec__discrimrec__register_type__value_high = o119;
  rec__discrimrec__register_type__value_low = o120 }; attr__constrained =
  o121 } = { us_split_discrs1 = { rec__discrimrec__register_type__option =
  o98 }; us_split_fields1 = { rec__discrimrec__register_type__value_64 = o99;
  rec__discrimrec__register_type__ignore_32a = o100;
  rec__discrimrec__register_type__value_32 = o101;
  rec__discrimrec__register_type__ignore_32b = o102;
  rec__discrimrec__register_type__ignore_16a = o103;
  rec__discrimrec__register_type__value_16 = o104;
  rec__discrimrec__register_type__ignore_32c = o105;
  rec__discrimrec__register_type__ignore_16b = o106;
  rec__discrimrec__register_type__value_high = o107;
  rec__discrimrec__register_type__value_low = o108 }; attr__constrained =
  o109 })) and ({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = o122 }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = o123;
  rec__discrimrec__register_type__ignore_32a = o124;
  rec__discrimrec__register_type__value_32 = o125;
  rec__discrimrec__register_type__ignore_32b = o126;
  rec__discrimrec__register_type__ignore_16a = o127;
  rec__discrimrec__register_type__value_16 = o128;
  rec__discrimrec__register_type__ignore_32c = o129;
  rec__discrimrec__register_type__ignore_16b = o130;
  rec__discrimrec__register_type__value_high = o131;
  rec__discrimrec__register_type__value_low = o132 }; attr__constrained =
  o133 } = { us_split_discrs1 = { rec__discrimrec__register_type__option =
  o110 }; us_split_fields1 = { rec__discrimrec__register_type__value_64 =
  o111; rec__discrimrec__register_type__ignore_32a = o112;
  rec__discrimrec__register_type__value_32 = o113;
  rec__discrimrec__register_type__ignore_32b = o114;
  rec__discrimrec__register_type__ignore_16a = o115;
  rec__discrimrec__register_type__value_16 = o116;
  rec__discrimrec__register_type__ignore_32c = o117;
  rec__discrimrec__register_type__ignore_16b = o118;
  rec__discrimrec__register_type__value_high = o119;
  rec__discrimrec__register_type__value_low = o120 }; attr__constrained =
  o121 })) and ({ us_split_discrs1 = {
  rec__discrimrec__register_type__option = temp___262 }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = temp___2621;
  rec__discrimrec__register_type__ignore_32a = temp___2622;
  rec__discrimrec__register_type__value_32 = temp___2623;
  rec__discrimrec__register_type__ignore_32b = temp___2624;
  rec__discrimrec__register_type__ignore_16a = temp___2625;
  rec__discrimrec__register_type__value_16 = temp___2626;
  rec__discrimrec__register_type__ignore_32c = temp___2627;
  rec__discrimrec__register_type__ignore_16b = temp___2628;
  rec__discrimrec__register_type__value_high = temp___2629;
  rec__discrimrec__register_type__value_low = temp___26210 };
  attr__constrained = temp___26211 } = { us_split_discrs1 = {
  rec__discrimrec__register_type__option = o122 }; us_split_fields1 = {
  rec__discrimrec__register_type__value_64 = o123;
  rec__discrimrec__register_type__ignore_32a = o124;
  rec__discrimrec__register_type__value_32 = o125;
  rec__discrimrec__register_type__ignore_32b = o126;
  rec__discrimrec__register_type__ignore_16a = o127;
  rec__discrimrec__register_type__value_16 = o128;
  rec__discrimrec__register_type__ignore_32c = o129;
  rec__discrimrec__register_type__ignore_16b = o130;
  rec__discrimrec__register_type__value_high = o131;
  rec__discrimrec__register_type__value_low = o132 }; attr__constrained =
  o133 })) and (((result2 = { us_split_fields__content = rax__split_fields10
  }) and (rax__split_fields11 = { rec__discrimrec__register_type__value_64 =
  temp___2621; rec__discrimrec__register_type__ignore_32a = temp___2622;
  rec__discrimrec__register_type__value_32 = temp___2623;
  rec__discrimrec__register_type__ignore_32b = temp___2624;
  rec__discrimrec__register_type__ignore_16a = temp___2625;
  rec__discrimrec__register_type__value_16 = temp___2626;
  rec__discrimrec__register_type__ignore_32c = temp___2627;
  rec__discrimrec__register_type__ignore_16b = temp___2628;
  rec__discrimrec__register_type__value_high = temp___2629;
  rec__discrimrec__register_type__value_low = temp___26210 })) and
  (rax__split_discrs = temp___262)))) or
  ((not (to_rep1((eax__split_fields10).rec__discrimrec__register_type__value_32) = of_int(16))) and
  (rax__split_fields11 = rax__split_fields10)))))))) and
  (((eax__split_fields11 = { us_split_fields__content = eax__split_fields10
  }) and (rax__split_fields12 = { us_split_fields__content =
  rax__split_fields11 })) and
  ((eax__split_fields12 = eax__split_fields10) and
  (rax__split_fields13 = rax__split_fields11))))) ->
  (to_rep(((rax__split_fields12).us_split_fields__content).rec__discrimrec__register_type__value_64) = of_int1(32))))
