(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type integer

predicate in_range2(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type fruits_and_weapons

predicate in_range3(x: int) = ((0 <= x) and (x <= 12))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : fruits_and_weapons, fruits_and_weapons -> bool

logic dummy2 : fruits_and_weapons

type fruits_and_weapons__ref = { fruits_and_weapons__content :
fruits_and_weapons
}

function fruits_and_weapons__ref___projection(a: fruits_and_weapons__ref) : fruits_and_weapons =
  (a).fruits_and_weapons__content

logic to_rep1 : fruits_and_weapons -> int

logic of_rep1 : int -> fruits_and_weapons

axiom inversion_axiom1 :
  (forall x:fruits_and_weapons [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:fruits_and_weapons [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type fruits

predicate in_range4(x: int) = ((0 <= x) and (x <= 9))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : fruits, fruits -> bool

logic dummy3 : fruits

type fruits__ref = { fruits__content : fruits
}

function fruits__ref___projection(a: fruits__ref) : fruits =
  (a).fruits__content

logic to_rep2 : fruits -> int

logic of_rep2 : int -> fruits

axiom inversion_axiom2 :
  (forall x:fruits [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:fruits [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic found_none : int -> bool

logic found_none__function_guard : bool, int -> prop

axiom found_none__post_axiom : true

axiom found_none__def_axiom :
  (forall fruit:int [found_none(fruit)]. ((found_none(fruit) = true) <->
  (fruit = 0)))

logic fruits_to_fruits_and_weapons : int -> int

logic fruits_to_fruits_and_weapons__function_guard : int, int -> prop

axiom fruits_to_fruits_and_weapons__post_axiom :
  (forall fruit:int [fruits_to_fruits_and_weapons(fruit)].
  (in_range4(fruit) -> in_range3(fruits_to_fruits_and_weapons(fruit))))

axiom fruits_to_fruits_and_weapons__def_axiom :
  (forall fruit:int [fruits_to_fruits_and_weapons(fruit)].
  (in_range4(fruit) -> (fruits_to_fruits_and_weapons(fruit) = fruit)))

type map__ref = { map__content : (int,fruits) farray
}

logic slide : (int,fruits) farray, int, int -> (int,fruits) farray

axiom slide_eq :
  (forall a:(int,fruits) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,fruits) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,fruits) farray, int, int, (int,fruits) farray, int,
  int -> (int,fruits) farray

axiom concat_def :
  (forall a:(int,fruits) farray. forall b:(int,fruits) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : fruits, int -> (int,fruits) farray

axiom singleton_def :
  (forall v:fruits.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq6 : (int,fruits) farray, int, int, (int,fruits) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,fruits) farray. forall a__first:int. forall a__last:int.
  forall b:(int,fruits) farray. forall b__first:int. forall b__last:int
  [bool_eq6(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq6(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,fruits) farray. forall b:(int,fruits) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare : (int,fruits) farray, int, int, (int,fruits) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,fruits) farray. forall b:(int,fruits) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,fruits) farray. forall b:(int,fruits) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,fruits) farray. forall b:(int,fruits) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

type map__ref1 = { map__content1 : (int,fruits_and_weapons) farray
}

logic slide1 : (int,fruits_and_weapons) farray, int,
  int -> (int,fruits_and_weapons) farray

axiom slide_eq1 :
  (forall a:(int,fruits_and_weapons) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,fruits_and_weapons) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,fruits_and_weapons) farray, int, int,
  (int,fruits_and_weapons) farray, int,
  int -> (int,fruits_and_weapons) farray

axiom concat_def1 :
  (forall a:(int,fruits_and_weapons) farray.
  forall b:(int,fruits_and_weapons) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : fruits_and_weapons, int -> (int,fruits_and_weapons) farray

axiom singleton_def1 :
  (forall v:fruits_and_weapons.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq7 : (int,fruits_and_weapons) farray, int, int,
  (int,fruits_and_weapons) farray, int, int -> bool

axiom bool_eq_def6 :
  (forall a:(int,fruits_and_weapons) farray. forall a__first:int.
  forall a__last:int. forall b:(int,fruits_and_weapons) farray.
  forall b__first:int. forall b__last:int [bool_eq7(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_135:int. ((((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) and
  (to_rep1((a[temp___idx_135])) = to_rep1((b[((b__first - a__first) + temp___idx_135)])))) or
  (not ((a__first <= temp___idx_135) and (temp___idx_135 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep1((a[temp___idx_135])) = to_rep1((b[((b__first - a__first) + temp___idx_135)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,fruits_and_weapons) farray.
  forall b:(int,fruits_and_weapons) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep1((a[temp___idx_135])) = to_rep1((b[((b__first - a__first) + temp___idx_135)])))))))))

logic compare1 : (int,fruits_and_weapons) farray, int, int,
  (int,fruits_and_weapons) farray, int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,fruits_and_weapons) farray.
  forall b:(int,fruits_and_weapons) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,fruits_and_weapons) farray.
  forall b:(int,fruits_and_weapons) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,fruits_and_weapons) farray.
  forall b:(int,fruits_and_weapons) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,fruits) farray; rt : t
}

function to_array(a: us_t) : (int,fruits) farray = (a).elts

function of_array(a: (int,fruits) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,fruits) farray -> int

logic value__component__size : int

logic object__component__size : (int,fruits) farray -> int

logic value__alignment : int

logic object__alignment : (int,fruits) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,fruits) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,fruits) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,fruits) farray. (0 <= object__alignment(a)))

function bool_eq8(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : (int,fruits) farray

logic dummy5 : t

type inventory_t__ref = { inventory_t__content : us_t
}

function inventory_t__ref___projection(a: inventory_t__ref) : us_t =
  (a).inventory_t__content

type new_item_t

predicate in_range5(x: int) = ((0 <= x) and (x <= 12))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : new_item_t, new_item_t -> bool

logic dummy6 : new_item_t

type new_item_t__ref = { new_item_t__content : new_item_t
}

function new_item_t__ref___projection(a: new_item_t__ref) : new_item_t =
  (a).new_item_t__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t1 = { elts1 : (int,fruits_and_weapons) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,fruits_and_weapons) farray = (a).elts1

function of_array1(a: (int,fruits_and_weapons) farray, f: int,
  l: int) : us_t1 = { elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,fruits_and_weapons) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,fruits_and_weapons) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,fruits_and_weapons) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,fruits_and_weapons) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,fruits_and_weapons) farray.
  (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,fruits_and_weapons) farray. (0 <= object__alignment1(a)))

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq7((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq6 : us_t1, us_t1 -> bool

logic dummy7 : (int,fruits_and_weapons) farray

logic dummy8 : t1

type new_inventory_t__ref = { new_inventory_t__content : us_t1
}

function new_inventory_t__ref___projection(a: new_inventory_t__ref) : us_t1 =
  (a).new_inventory_t__content

logic old_inventory : (int,fruits) farray

logic old_inventory1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic new_inventory__first : integer

logic new_inventory__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic new_content : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "test.adb", line 191, characters 0-0 *)
goal WP_parameter_def :
  (forall new_inventory:(int,fruits_and_weapons) farray. forall i:int.
  forall o:fruits_and_weapons. forall result:int. forall i1:int.
  forall new_inventory1:(int,fruits_and_weapons) farray. forall i2:int.
  forall result1:bool. (dynamic_property(1, 2147483647,
  to_rep(first(old_inventory1)), to_rep(last(old_inventory1))) ->
  (dynamic_property1(1, 2147483647, to_rep(new_inventory__first),
  to_rep(new_inventory__last)) -> (in_range5(new_content) ->
  (((to_rep(first(old_inventory1)) = to_rep(new_inventory__first)) and
  (to_rep(last(old_inventory1)) = to_rep(new_inventory__last))) ->
  (((result = i) and (i1 = to_rep(first(old_inventory1)))) ->
  (((to_rep(first(old_inventory1)) <= i1) and
  (i1 <= to_rep(last(old_inventory1)))) ->
  (((forall temp___470:int.
    (((to_rep(new_inventory__first) <= temp___470) and
    (temp___470 <= to_rep(new_inventory__last))) -> ((i2 <= temp___470) ->
    ((new_inventory1[temp___470]) = (new_inventory[temp___470]))))) and
  ((to_rep(first(old_inventory1)) <= i2) and
  (i2 <= to_rep(last(old_inventory1))))) ->
  (((result1 = found_none(to_rep2((old_inventory[i2])))) and
  ((result1 = true) <-> (to_rep2((old_inventory[i2])) = 0))) ->
  ((result1 = true) -> ((to_rep1(o) = new_content) ->
  (to_rep(new_inventory__first) <= i2))))))))))))
