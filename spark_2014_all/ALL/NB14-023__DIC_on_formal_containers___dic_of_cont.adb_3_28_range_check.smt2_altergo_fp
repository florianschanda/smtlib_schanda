(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom :
  (forall i:t. ((0 <= tqtint(i)) and (tqtint(i) <= 4294967295)))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = match_bool(nth(v1, n), nth(v2, n), false))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = match_bool(nth(v1, n), true, nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = match_bool(nth(v, n), false, true))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs_int(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

logic to_int : t -> int

axiom to_int_def :
  (forall x:t [to_int(x)]. ((is_signed_positive(x) ->
  (to_int(x) = tqtint(x))) and ((not is_signed_positive(x)) ->
  (to_int(x) = (-(4294967296 - tqtint(x)))))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds :
  (forall v:t. ((0 <= tqtint(v)) and (tqtint(v) <  4294967296)))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) <-> sge(x, zeros)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) <-> eq_sub_bv(a, b, i, n)))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

logic bool_eq : t, t -> bool

axiom bool_eq_def :
  (forall x:t. forall y:t [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic bool_ne : t, t -> bool

axiom bool_ne_def :
  (forall x:t. forall y:t [bool_ne(x, y)]. (((not (x = y)) -> (bool_ne(x,
  y) = true)) and ((x = y) -> (bool_ne(x, y) = false))))

logic bool_lt : t, t -> bool

axiom bool_lt_def :
  (forall x:t. forall y:t [bool_lt(x, y)]. ((ult(x, y) -> (bool_lt(x,
  y) = true)) and ((not ult(x, y)) -> (bool_lt(x, y) = false))))

logic bool_le : t, t -> bool

axiom bool_le_def :
  (forall x:t. forall y:t [bool_le(x, y)]. ((ule(x, y) -> (bool_le(x,
  y) = true)) and ((not ule(x, y)) -> (bool_le(x, y) = false))))

logic bool_gt : t, t -> bool

axiom bool_gt_def :
  (forall x:t. forall y:t [bool_gt(x, y)]. ((ugt(x, y) -> (bool_gt(x,
  y) = true)) and ((not ugt(x, y)) -> (bool_gt(x, y) = false))))

logic bool_ge : t, t -> bool

axiom bool_ge_def :
  (forall x:t. forall y:t [bool_ge(x, y)]. ((uge(x, y) -> (bool_ge(x,
  y) = true)) and ((not uge(x, y)) -> (bool_ge(x, y) = false))))

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

logic bv_min : t, t -> t

axiom bv_min_def :
  (forall x:t. forall y:t [bv_min(x, y)]. ((ule(x, y) -> (bv_min(x,
  y) = x)) and ((not ule(x, y)) -> (bv_min(x, y) = y))))

logic bv_max : t, t -> t

axiom bv_max_def :
  (forall x:t. forall y:t [bv_max(x, y)]. ((ule(x, y) -> (bv_max(x,
  y) = y)) and ((not ule(x, y)) -> (bv_max(x, y) = x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type hash_type

logic attr__ATTRIBUTE_MODULUS : t

logic bool_eq1 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) <-> (y <= x))))

logic bool_eq2 : t, t -> bool

axiom bool_eq_def1 :
  (forall x:t. forall y:t [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> t

logic user_eq : hash_type, hash_type -> bool

logic dummy : hash_type

type hash_type__ref = { hash_type__content : hash_type
}

function hash_type__ref___projection(a: hash_type__ref) : hash_type =
  (a).hash_type__content

type count_type

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic to_rep : count_type -> int

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__dic_of_cont__my_dlli__list__capacity :
count_type
}

function us_split_discrs___projection(a: us_split_discrs) : count_type =
  (a).rec__dic_of_cont__my_dlli__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__dic_of_cont__my_dlli__list : us_main_type
}

function us_split_fields_List__projection(a: us_split_fields) : us_main_type =
  (a).rec__dic_of_cont__my_dlli__list

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___7__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___8__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((to_rep(((a).us_split_discrs1).rec__dic_of_cont__my_dlli__list__capacity) = to_rep(((b).us_split_discrs1).rec__dic_of_cont__my_dlli__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__dic_of_cont__my_dlli__list,
  ((b).us_split_fields1).rec__dic_of_cont__my_dlli__list) = true)) ->
  (bool_eq4(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs1).rec__dic_of_cont__my_dlli__list__capacity) = to_rep(((b).us_split_discrs1).rec__dic_of_cont__my_dlli__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__dic_of_cont__my_dlli__list,
  ((b).us_split_fields1).rec__dic_of_cont__my_dlli__list) = true))) ->
  (bool_eq4(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size({
  us_split_discrs1 = { rec__dic_of_cont__my_dlli__list__capacity = a };
  us_split_fields1 = { rec__dic_of_cont__my_dlli__list = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment({
  us_split_discrs1 = { rec__dic_of_cont__my_dlli__list__capacity = a };
  us_split_fields1 = { rec__dic_of_cont__my_dlli__list = a1 } })))

logic dic_of_cont__my_dlli__list__capacity__first__bit : int

logic dic_of_cont__my_dlli__list__capacity__last__bit : int

logic dic_of_cont__my_dlli__list__capacity__position : int

axiom dic_of_cont__my_dlli__list__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_dlli__list__capacity__first__bit)

axiom dic_of_cont__my_dlli__list__capacity__last__bit_axiom :
  (dic_of_cont__my_dlli__list__capacity__first__bit <  dic_of_cont__my_dlli__list__capacity__last__bit)

axiom dic_of_cont__my_dlli__list__capacity__position_axiom :
  (0 <= dic_of_cont__my_dlli__list__capacity__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : count_type

logic dummy3 : us_main_type

type list__ref = { list__content : us_rep
}

function list__ref___projection(a: list__ref) : us_rep = (a).list__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

axiom is_empty__post_axiom :
  (forall container:count_type. forall container1:us_main_type [is_empty({
  us_split_discrs1 = { rec__dic_of_cont__my_dlli__list__capacity = container
  }; us_split_fields1 = { rec__dic_of_cont__my_dlli__list = container1 } })].
  ((is_empty({ us_split_discrs1 = {
  rec__dic_of_cont__my_dlli__list__capacity = container }; us_split_fields1 =
  { rec__dic_of_cont__my_dlli__list = container1 } }) = true) <-> (length({
  us_split_discrs1 = { rec__dic_of_cont__my_dlli__list__capacity = container
  }; us_split_fields1 = { rec__dic_of_cont__my_dlli__list = container1 }
  }) = 0)))

logic to_rep1 : hash_type -> t

logic of_rep1 : t -> hash_type

axiom inversion_axiom1 :
  (forall x:hash_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : true

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int1(x: hash_type) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:hash_type [to_int1(x)]. uint_in_range(to_int1(x)))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_discrs2 = { rec__dic_of_cont__my_hama__map__capacity :
count_type; rec__dic_of_cont__my_hama__map__modulus : hash_type
}

function us_split_discrs___2__projection(a: us_split_discrs2) : count_type =
  (a).rec__dic_of_cont__my_hama__map__capacity

function us_split_discrs___3__projection(a: us_split_discrs2) : hash_type =
  (a).rec__dic_of_cont__my_hama__map__modulus

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__dic_of_cont__my_hama__map : us_main_type1
}

function us_split_fields_Map__projection(a: us_split_fields2) : us_main_type1 =
  (a).rec__dic_of_cont__my_hama__map

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___7__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___10__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___11__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq5 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq5(a, b)].
  (((((to_rep(((a).us_split_discrs3).rec__dic_of_cont__my_hama__map__capacity) = to_rep(((b).us_split_discrs3).rec__dic_of_cont__my_hama__map__capacity)) and
  (to_rep1(((a).us_split_discrs3).rec__dic_of_cont__my_hama__map__modulus) = to_rep1(((b).us_split_discrs3).rec__dic_of_cont__my_hama__map__modulus))) and
  (us_main_eq1(((a).us_split_fields3).rec__dic_of_cont__my_hama__map,
  ((b).us_split_fields3).rec__dic_of_cont__my_hama__map) = true)) ->
  (bool_eq5(a, b) = true)) and
  ((not (((to_rep(((a).us_split_discrs3).rec__dic_of_cont__my_hama__map__capacity) = to_rep(((b).us_split_discrs3).rec__dic_of_cont__my_hama__map__capacity)) and
  (to_rep1(((a).us_split_discrs3).rec__dic_of_cont__my_hama__map__modulus) = to_rep1(((b).us_split_discrs3).rec__dic_of_cont__my_hama__map__modulus))) and
  (us_main_eq1(((a).us_split_fields3).rec__dic_of_cont__my_hama__map,
  ((b).us_split_fields3).rec__dic_of_cont__my_hama__map) = true))) ->
  (bool_eq5(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type1.
  (0 <= object__size1({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = a;
  rec__dic_of_cont__my_hama__map__modulus = a1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type1.
  (0 <= object__alignment1({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = a;
  rec__dic_of_cont__my_hama__map__modulus = a1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = a2 } })))

logic dic_of_cont__my_hama__map__capacity__first__bit : int

logic dic_of_cont__my_hama__map__capacity__last__bit : int

logic dic_of_cont__my_hama__map__capacity__position : int

axiom dic_of_cont__my_hama__map__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_hama__map__capacity__first__bit)

axiom dic_of_cont__my_hama__map__capacity__last__bit_axiom :
  (dic_of_cont__my_hama__map__capacity__first__bit <  dic_of_cont__my_hama__map__capacity__last__bit)

axiom dic_of_cont__my_hama__map__capacity__position_axiom :
  (0 <= dic_of_cont__my_hama__map__capacity__position)

logic dic_of_cont__my_hama__map__modulus__first__bit : int

logic dic_of_cont__my_hama__map__modulus__last__bit : int

logic dic_of_cont__my_hama__map__modulus__position : int

axiom dic_of_cont__my_hama__map__modulus__first__bit_axiom :
  (0 <= dic_of_cont__my_hama__map__modulus__first__bit)

axiom dic_of_cont__my_hama__map__modulus__last__bit_axiom :
  (dic_of_cont__my_hama__map__modulus__first__bit <  dic_of_cont__my_hama__map__modulus__last__bit)

axiom dic_of_cont__my_hama__map__modulus__position_axiom :
  (0 <= dic_of_cont__my_hama__map__modulus__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy4 : count_type

logic dummy5 : hash_type

logic dummy6 : us_main_type1

type map__ref = { map__content : us_rep1
}

function map__ref___2__projection(a: map__ref) : us_rep1 = (a).map__content

logic is_empty1 : us_rep1 -> bool

logic is_empty__function_guard1 : bool, us_rep1 -> prop

logic is_empty2 : int, us_rep1 -> bool

logic is_empty__function_guard2 : bool, int, us_rep1 -> prop

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

logic oeq1 : int, us_rep1, us_rep1 -> bool

logic oeq__function_guard1 : bool, int, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type1.
  forall b:count_type. forall b1:hash_type. forall b2:us_main_type1
  [user_eq3({ us_split_discrs3 = { rec__dic_of_cont__my_hama__map__capacity =
  a; rec__dic_of_cont__my_hama__map__modulus = a1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = a2 } }, { us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = b;
  rec__dic_of_cont__my_hama__map__modulus = b1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = b2 } })]. (user_eq3({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = a;
  rec__dic_of_cont__my_hama__map__modulus = a1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = a2 } }, { us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = b;
  rec__dic_of_cont__my_hama__map__modulus = b1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = b2 } }) = oeq({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = a;
  rec__dic_of_cont__my_hama__map__modulus = a1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = a2 } }, { us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = b;
  rec__dic_of_cont__my_hama__map__modulus = b1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = b2 } })))

logic length1 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

logic length2 : int, us_rep1 -> int

logic length__function_guard2 : int, int, us_rep1 -> prop

axiom is_empty__post_axiom1 :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type1 [is_empty1({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = container;
  rec__dic_of_cont__my_hama__map__modulus = container1 }; us_split_fields3 =
  { rec__dic_of_cont__my_hama__map = container2 } })]. ((is_empty1({
  us_split_discrs3 = { rec__dic_of_cont__my_hama__map__capacity = container;
  rec__dic_of_cont__my_hama__map__modulus = container1 }; us_split_fields3 =
  { rec__dic_of_cont__my_hama__map = container2 } }) = true) <-> (length1({
  us_split_discrs3 = { rec__dic_of_cont__my_hama__map__capacity = container;
  rec__dic_of_cont__my_hama__map__modulus = container1 }; us_split_fields3 =
  { rec__dic_of_cont__my_hama__map = container2 } }) = 0)))

axiom is_empty__post__dispatch_axiom : true

logic default_modulus : int -> t

logic default_modulus__function_guard : t, int -> prop

axiom default_modulus__post_axiom : true

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_split_discrs4 = { rec__dic_of_cont__my_hase__set__capacity :
count_type; rec__dic_of_cont__my_hase__set__modulus : hash_type
}

function us_split_discrs___4__projection(a: us_split_discrs4) : count_type =
  (a).rec__dic_of_cont__my_hase__set__capacity

function us_split_discrs___5__projection(a: us_split_discrs4) : hash_type =
  (a).rec__dic_of_cont__my_hase__set__modulus

type us_split_discrs__ref2 = { us_split_discrs__content2 : us_split_discrs4
}

function us_split_discrs__ref___3__projection(a: us_split_discrs__ref2) : us_split_discrs4 =
  (a).us_split_discrs__content2

type us_split_fields4 = { rec__dic_of_cont__my_hase__set : us_main_type2
}

function us_split_fields_Set__projection(a: us_split_fields4) : us_main_type2 =
  (a).rec__dic_of_cont__my_hase__set

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs5 : us_split_discrs4; us_split_fields5 :
us_split_fields4
}

function us_rep___13__projection(a: us_rep2) : us_split_discrs4 =
  (a).us_split_discrs5

function us_rep___14__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq6 : us_rep2, us_rep2 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq6(a, b)].
  (((((to_rep(((a).us_split_discrs5).rec__dic_of_cont__my_hase__set__capacity) = to_rep(((b).us_split_discrs5).rec__dic_of_cont__my_hase__set__capacity)) and
  (to_rep1(((a).us_split_discrs5).rec__dic_of_cont__my_hase__set__modulus) = to_rep1(((b).us_split_discrs5).rec__dic_of_cont__my_hase__set__modulus))) and
  (us_main_eq2(((a).us_split_fields5).rec__dic_of_cont__my_hase__set,
  ((b).us_split_fields5).rec__dic_of_cont__my_hase__set) = true)) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep(((a).us_split_discrs5).rec__dic_of_cont__my_hase__set__capacity) = to_rep(((b).us_split_discrs5).rec__dic_of_cont__my_hase__set__capacity)) and
  (to_rep1(((a).us_split_discrs5).rec__dic_of_cont__my_hase__set__modulus) = to_rep1(((b).us_split_discrs5).rec__dic_of_cont__my_hase__set__modulus))) and
  (us_main_eq2(((a).us_split_fields5).rec__dic_of_cont__my_hase__set,
  ((b).us_split_fields5).rec__dic_of_cont__my_hase__set) = true))) ->
  (bool_eq6(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type2.
  (0 <= object__size2({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = a;
  rec__dic_of_cont__my_hase__set__modulus = a1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = a2 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type2.
  (0 <= object__alignment2({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = a;
  rec__dic_of_cont__my_hase__set__modulus = a1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = a2 } })))

logic dic_of_cont__my_hase__set__capacity__first__bit : int

logic dic_of_cont__my_hase__set__capacity__last__bit : int

logic dic_of_cont__my_hase__set__capacity__position : int

axiom dic_of_cont__my_hase__set__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_hase__set__capacity__first__bit)

axiom dic_of_cont__my_hase__set__capacity__last__bit_axiom :
  (dic_of_cont__my_hase__set__capacity__first__bit <  dic_of_cont__my_hase__set__capacity__last__bit)

axiom dic_of_cont__my_hase__set__capacity__position_axiom :
  (0 <= dic_of_cont__my_hase__set__capacity__position)

logic dic_of_cont__my_hase__set__modulus__first__bit : int

logic dic_of_cont__my_hase__set__modulus__last__bit : int

logic dic_of_cont__my_hase__set__modulus__position : int

axiom dic_of_cont__my_hase__set__modulus__first__bit_axiom :
  (0 <= dic_of_cont__my_hase__set__modulus__first__bit)

axiom dic_of_cont__my_hase__set__modulus__last__bit_axiom :
  (dic_of_cont__my_hase__set__modulus__first__bit <  dic_of_cont__my_hase__set__modulus__last__bit)

axiom dic_of_cont__my_hase__set__modulus__position_axiom :
  (0 <= dic_of_cont__my_hase__set__modulus__position)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy7 : count_type

logic dummy8 : hash_type

logic dummy9 : us_main_type2

type set__ref = { set__content : us_rep2
}

function set__ref___projection(a: set__ref) : us_rep2 = (a).set__content

logic is_empty3 : us_rep2 -> bool

logic is_empty__function_guard3 : bool, us_rep2 -> prop

logic is_empty4 : int, us_rep2 -> bool

logic is_empty__function_guard4 : bool, int, us_rep2 -> prop

logic oeq2 : us_rep2, us_rep2 -> bool

logic oeq__function_guard2 : bool, us_rep2, us_rep2 -> prop

logic oeq3 : int, us_rep2, us_rep2 -> bool

logic oeq__function_guard3 : bool, int, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom1 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type2.
  forall b:count_type. forall b1:hash_type. forall b2:us_main_type2
  [user_eq4({ us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity =
  a; rec__dic_of_cont__my_hase__set__modulus = a1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = a2 } }, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = b;
  rec__dic_of_cont__my_hase__set__modulus = b1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = b2 } })]. (user_eq4({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = a;
  rec__dic_of_cont__my_hase__set__modulus = a1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = a2 } }, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = b;
  rec__dic_of_cont__my_hase__set__modulus = b1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = b2 } }) = oeq2({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = a;
  rec__dic_of_cont__my_hase__set__modulus = a1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = a2 } }, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = b;
  rec__dic_of_cont__my_hase__set__modulus = b1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = b2 } })))

logic length3 : us_rep2 -> int

logic length__function_guard3 : int, us_rep2 -> prop

logic length4 : int, us_rep2 -> int

logic length__function_guard4 : int, int, us_rep2 -> prop

axiom is_empty__post_axiom2 :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type2 [is_empty3({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } })]. ((is_empty3({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }) = true) <-> (length3({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }) = 0)))

axiom is_empty__post__dispatch_axiom1 : true

logic default_modulus1 : int -> t

logic default_modulus__function_guard1 : t, int -> prop

axiom default_modulus__post_axiom1 : true

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_split_discrs6 = { rec__dic_of_cont__my_orma__map__capacity :
count_type
}

function us_split_discrs___6__projection(a: us_split_discrs6) : count_type =
  (a).rec__dic_of_cont__my_orma__map__capacity

type us_split_discrs__ref3 = { us_split_discrs__content3 : us_split_discrs6
}

function us_split_discrs__ref___4__projection(a: us_split_discrs__ref3) : us_split_discrs6 =
  (a).us_split_discrs__content3

type us_split_fields6 = { rec__dic_of_cont__my_orma__map : us_main_type3
}

function us_split_fields_Map__2__projection(a: us_split_fields6) : us_main_type3 =
  (a).rec__dic_of_cont__my_orma__map

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___11__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs7 : us_split_discrs6; us_split_fields7 :
us_split_fields6
}

function us_rep___16__projection(a: us_rep3) : us_split_discrs6 =
  (a).us_split_discrs7

function us_rep___17__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq7 : us_rep3, us_rep3 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq7(a, b)].
  ((((to_rep(((a).us_split_discrs7).rec__dic_of_cont__my_orma__map__capacity) = to_rep(((b).us_split_discrs7).rec__dic_of_cont__my_orma__map__capacity)) and
  (us_main_eq3(((a).us_split_fields7).rec__dic_of_cont__my_orma__map,
  ((b).us_split_fields7).rec__dic_of_cont__my_orma__map) = true)) ->
  (bool_eq7(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs7).rec__dic_of_cont__my_orma__map__capacity) = to_rep(((b).us_split_discrs7).rec__dic_of_cont__my_orma__map__capacity)) and
  (us_main_eq3(((a).us_split_fields7).rec__dic_of_cont__my_orma__map,
  ((b).us_split_fields7).rec__dic_of_cont__my_orma__map) = true))) ->
  (bool_eq7(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:count_type. forall a1:us_main_type3. (0 <= object__size3({
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = a };
  us_split_fields7 = { rec__dic_of_cont__my_orma__map = a1 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:count_type. forall a1:us_main_type3. (0 <= object__alignment3({
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = a };
  us_split_fields7 = { rec__dic_of_cont__my_orma__map = a1 } })))

logic dic_of_cont__my_orma__map__capacity__first__bit : int

logic dic_of_cont__my_orma__map__capacity__last__bit : int

logic dic_of_cont__my_orma__map__capacity__position : int

axiom dic_of_cont__my_orma__map__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_orma__map__capacity__first__bit)

axiom dic_of_cont__my_orma__map__capacity__last__bit_axiom :
  (dic_of_cont__my_orma__map__capacity__first__bit <  dic_of_cont__my_orma__map__capacity__last__bit)

axiom dic_of_cont__my_orma__map__capacity__position_axiom :
  (0 <= dic_of_cont__my_orma__map__capacity__position)

logic user_eq5 : us_rep3, us_rep3 -> bool

logic dummy10 : count_type

logic dummy11 : us_main_type3

type map__ref1 = { map__content1 : us_rep3
}

function map__ref___6__projection(a: map__ref1) : us_rep3 = (a).map__content1

logic is_empty5 : us_rep3 -> bool

logic is_empty__function_guard5 : bool, us_rep3 -> prop

logic is_empty6 : int, us_rep3 -> bool

logic is_empty__function_guard6 : bool, int, us_rep3 -> prop

logic oeq4 : us_rep3, us_rep3 -> bool

logic oeq__function_guard4 : bool, us_rep3, us_rep3 -> prop

logic oeq5 : int, us_rep3, us_rep3 -> bool

logic oeq__function_guard5 : bool, int, us_rep3, us_rep3 -> prop

axiom user_eq__def_axiom2 :
  (forall a:count_type. forall a1:us_main_type3. forall b:count_type.
  forall b1:us_main_type3 [user_eq5({ us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = a }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = a1 } }, { us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = b }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = b1 } })]. (user_eq5({ us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = a }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = a1 } }, { us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = b }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = b1 } }) = oeq4({ us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = a }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = a1 } }, { us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = b }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = b1 } })))

logic length5 : us_rep3 -> int

logic length__function_guard5 : int, us_rep3 -> prop

logic length6 : int, us_rep3 -> int

logic length__function_guard6 : int, int, us_rep3 -> prop

axiom is_empty__post_axiom3 :
  (forall container:count_type. forall container1:us_main_type3 [is_empty5({
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = container
  }; us_split_fields7 = { rec__dic_of_cont__my_orma__map = container1 } })].
  ((is_empty5({ us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = container }; us_split_fields7 =
  { rec__dic_of_cont__my_orma__map = container1 } }) = true) <-> (length5({
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = container
  }; us_split_fields7 = { rec__dic_of_cont__my_orma__map = container1 }
  }) = 0)))

axiom is_empty__post__dispatch_axiom2 : true

type us_main_type4

logic us_main_eq4 : us_main_type4, us_main_type4 -> bool

type us_split_discrs8 = { rec__dic_of_cont__my_orse__set__capacity :
count_type
}

function us_split_discrs___7__projection(a: us_split_discrs8) : count_type =
  (a).rec__dic_of_cont__my_orse__set__capacity

type us_split_discrs__ref4 = { us_split_discrs__content4 : us_split_discrs8
}

function us_split_discrs__ref___5__projection(a: us_split_discrs__ref4) : us_split_discrs8 =
  (a).us_split_discrs__content4

type us_split_fields8 = { rec__dic_of_cont__my_orse__set : us_main_type4
}

function us_split_fields_Set__2__projection(a: us_split_fields8) : us_main_type4 =
  (a).rec__dic_of_cont__my_orse__set

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___13__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_discrs9 : us_split_discrs8; us_split_fields9 :
us_split_fields8
}

function us_rep___19__projection(a: us_rep4) : us_split_discrs8 =
  (a).us_split_discrs9

function us_rep___20__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq8 : us_rep4, us_rep4 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq8(a, b)].
  ((((to_rep(((a).us_split_discrs9).rec__dic_of_cont__my_orse__set__capacity) = to_rep(((b).us_split_discrs9).rec__dic_of_cont__my_orse__set__capacity)) and
  (us_main_eq4(((a).us_split_fields9).rec__dic_of_cont__my_orse__set,
  ((b).us_split_fields9).rec__dic_of_cont__my_orse__set) = true)) ->
  (bool_eq8(a, b) = true)) and
  ((not ((to_rep(((a).us_split_discrs9).rec__dic_of_cont__my_orse__set__capacity) = to_rep(((b).us_split_discrs9).rec__dic_of_cont__my_orse__set__capacity)) and
  (us_main_eq4(((a).us_split_fields9).rec__dic_of_cont__my_orse__set,
  ((b).us_split_fields9).rec__dic_of_cont__my_orse__set) = true))) ->
  (bool_eq8(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep4 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep4 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:count_type. forall a1:us_main_type4. (0 <= object__size4({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = a };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:count_type. forall a1:us_main_type4. (0 <= object__alignment4({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = a };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = a1 } })))

logic dic_of_cont__my_orse__set__capacity__first__bit : int

logic dic_of_cont__my_orse__set__capacity__last__bit : int

logic dic_of_cont__my_orse__set__capacity__position : int

axiom dic_of_cont__my_orse__set__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_orse__set__capacity__first__bit)

axiom dic_of_cont__my_orse__set__capacity__last__bit_axiom :
  (dic_of_cont__my_orse__set__capacity__first__bit <  dic_of_cont__my_orse__set__capacity__last__bit)

axiom dic_of_cont__my_orse__set__capacity__position_axiom :
  (0 <= dic_of_cont__my_orse__set__capacity__position)

logic user_eq6 : us_rep4, us_rep4 -> bool

logic dummy12 : count_type

logic dummy13 : us_main_type4

type set__ref1 = { set__content1 : us_rep4
}

function set__ref___3__projection(a: set__ref1) : us_rep4 = (a).set__content1

logic is_empty7 : us_rep4 -> bool

logic is_empty__function_guard7 : bool, us_rep4 -> prop

logic is_empty8 : int, us_rep4 -> bool

logic is_empty__function_guard8 : bool, int, us_rep4 -> prop

logic oeq6 : us_rep4, us_rep4 -> bool

logic oeq__function_guard6 : bool, us_rep4, us_rep4 -> prop

logic oeq7 : int, us_rep4, us_rep4 -> bool

logic oeq__function_guard7 : bool, int, us_rep4, us_rep4 -> prop

axiom user_eq__def_axiom3 :
  (forall a:count_type. forall a1:us_main_type4. forall b:count_type.
  forall b1:us_main_type4 [user_eq6({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = a }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = a1 } }, { us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = b }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = b1 } })]. (user_eq6({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = a }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = a1 } }, { us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = b }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = b1 } }) = oeq6({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = a }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = a1 } }, { us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = b }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = b1 } })))

logic length7 : us_rep4 -> int

logic length__function_guard7 : int, us_rep4 -> prop

logic length8 : int, us_rep4 -> int

logic length__function_guard8 : int, int, us_rep4 -> prop

axiom is_empty__post_axiom4 :
  (forall container:count_type. forall container1:us_main_type4 [is_empty7({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } })].
  ((is_empty7({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }) = true) <-> (length7({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
  }) = 0)))

axiom is_empty__post__dispatch_axiom3 : true

type capacity_range

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq7 : capacity_range, capacity_range -> bool

logic dummy14 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref___projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

logic to_rep2 : capacity_range -> int

logic of_rep2 : int -> capacity_range

axiom inversion_axiom2 :
  (forall x:capacity_range [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:capacity_range [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_main_type5

logic us_main_eq5 : us_main_type5, us_main_type5 -> bool

type us_split_discrs10 = { rec__dic_of_cont__my_fove__vector__capacity :
capacity_range
}

function us_split_discrs___8__projection(a: us_split_discrs10) : capacity_range =
  (a).rec__dic_of_cont__my_fove__vector__capacity

type us_split_discrs__ref5 = { us_split_discrs__content5 : us_split_discrs10
}

function us_split_discrs__ref___6__projection(a: us_split_discrs__ref5) : us_split_discrs10 =
  (a).us_split_discrs__content5

type us_split_fields10 = { rec__dic_of_cont__my_fove__vector : us_main_type5
}

function us_split_fields_Vector__projection(a: us_split_fields10) : us_main_type5 =
  (a).rec__dic_of_cont__my_fove__vector

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___15__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_discrs11 : us_split_discrs10; us_split_fields11 :
us_split_fields10
}

function us_rep___22__projection(a: us_rep5) : us_split_discrs10 =
  (a).us_split_discrs11

function us_rep___23__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

logic value__size5 : int

logic object__size5 : us_rep5 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep5 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:capacity_range. forall a1:us_main_type5. (0 <= object__size5({
  us_split_discrs11 = { rec__dic_of_cont__my_fove__vector__capacity = a };
  us_split_fields11 = { rec__dic_of_cont__my_fove__vector = a1 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:capacity_range. forall a1:us_main_type5.
  (0 <= object__alignment5({ us_split_discrs11 = {
  rec__dic_of_cont__my_fove__vector__capacity = a }; us_split_fields11 = {
  rec__dic_of_cont__my_fove__vector = a1 } })))

logic dic_of_cont__my_fove__vector__capacity__first__bit : int

logic dic_of_cont__my_fove__vector__capacity__last__bit : int

logic dic_of_cont__my_fove__vector__capacity__position : int

axiom dic_of_cont__my_fove__vector__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_fove__vector__capacity__first__bit)

axiom dic_of_cont__my_fove__vector__capacity__last__bit_axiom :
  (dic_of_cont__my_fove__vector__capacity__first__bit <  dic_of_cont__my_fove__vector__capacity__last__bit)

axiom dic_of_cont__my_fove__vector__capacity__position_axiom :
  (0 <= dic_of_cont__my_fove__vector__capacity__position)

logic user_eq8 : us_rep5, us_rep5 -> bool

logic dummy15 : capacity_range

logic dummy16 : us_main_type5

type vector__ref = { vector__content : us_rep5
}

function vector__ref___projection(a: vector__ref) : us_rep5 =
  (a).vector__content

logic is_empty9 : us_rep5 -> bool

logic is_empty__function_guard9 : bool, us_rep5 -> prop

logic length9 : us_rep5 -> int

logic length__function_guard9 : int, us_rep5 -> prop

axiom is_empty__post_axiom5 :
  (forall container:capacity_range. forall container1:us_main_type5
  [is_empty9({ us_split_discrs11 = {
  rec__dic_of_cont__my_fove__vector__capacity = container };
  us_split_fields11 = { rec__dic_of_cont__my_fove__vector = container1 } })].
  ((is_empty9({ us_split_discrs11 = {
  rec__dic_of_cont__my_fove__vector__capacity = container };
  us_split_fields11 = { rec__dic_of_cont__my_fove__vector = container1 }
  }) = true) <-> (length9({ us_split_discrs11 = {
  rec__dic_of_cont__my_fove__vector__capacity = container };
  us_split_fields11 = { rec__dic_of_cont__my_fove__vector = container1 }
  }) = 0)))

logic capacity : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range2(rec__dic_of_cont__my_dlli__list__capacity1: int,
  a: us_rep) =
  (rec__dic_of_cont__my_dlli__list__capacity1 = to_rep(((a).us_split_discrs1).rec__dic_of_cont__my_dlli__list__capacity))

logic value__size6 : int

logic object__size6 : us_rep -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__size6({
  us_split_discrs1 = { rec__dic_of_cont__my_dlli__list__capacity = a };
  us_split_fields1 = { rec__dic_of_cont__my_dlli__list = a1 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:count_type. forall a1:us_main_type. (0 <= object__alignment6({
  us_split_discrs1 = { rec__dic_of_cont__my_dlli__list__capacity = a };
  us_split_fields1 = { rec__dic_of_cont__my_dlli__list = a1 } })))

logic dic_of_cont__my_dlli__list__capacity__first__bit1 : int

logic dic_of_cont__my_dlli__list__capacity__last__bit1 : int

logic dic_of_cont__my_dlli__list__capacity__position1 : int

axiom dic_of_cont__my_dlli__list__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_dlli__list__capacity__first__bit1)

axiom dic_of_cont__my_dlli__list__capacity__last__bit_axiom1 :
  (dic_of_cont__my_dlli__list__capacity__first__bit1 <  dic_of_cont__my_dlli__list__capacity__last__bit1)

axiom dic_of_cont__my_dlli__list__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_dlli__list__capacity__position1)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy17 : count_type

logic dummy18 : us_main_type

type tdlliS__ref = { tdlliS__content : us_rep
}

function tdlliS__ref___projection(a: tdlliS__ref) : us_rep =
  (a).tdlliS__content

logic dlli__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r2b : t

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range3(rec__dic_of_cont__my_hama__map__capacity1: int,
  rec__dic_of_cont__my_hama__map__modulus1: t, a: us_rep1) =
  ((rec__dic_of_cont__my_hama__map__capacity1 = to_rep(((a).us_split_discrs3).rec__dic_of_cont__my_hama__map__capacity)) and
  (rec__dic_of_cont__my_hama__map__modulus1 = to_rep1(((a).us_split_discrs3).rec__dic_of_cont__my_hama__map__modulus)))

logic value__size7 : int

logic object__size7 : us_rep1 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep1 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type1.
  (0 <= object__size7({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = a;
  rec__dic_of_cont__my_hama__map__modulus = a1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = a2 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type1.
  (0 <= object__alignment7({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = a;
  rec__dic_of_cont__my_hama__map__modulus = a1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = a2 } })))

logic dic_of_cont__my_hama__map__capacity__first__bit1 : int

logic dic_of_cont__my_hama__map__capacity__last__bit1 : int

logic dic_of_cont__my_hama__map__capacity__position1 : int

axiom dic_of_cont__my_hama__map__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_hama__map__capacity__first__bit1)

axiom dic_of_cont__my_hama__map__capacity__last__bit_axiom1 :
  (dic_of_cont__my_hama__map__capacity__first__bit1 <  dic_of_cont__my_hama__map__capacity__last__bit1)

axiom dic_of_cont__my_hama__map__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_hama__map__capacity__position1)

logic dic_of_cont__my_hama__map__modulus__first__bit1 : int

logic dic_of_cont__my_hama__map__modulus__last__bit1 : int

logic dic_of_cont__my_hama__map__modulus__position1 : int

axiom dic_of_cont__my_hama__map__modulus__first__bit_axiom1 :
  (0 <= dic_of_cont__my_hama__map__modulus__first__bit1)

axiom dic_of_cont__my_hama__map__modulus__last__bit_axiom1 :
  (dic_of_cont__my_hama__map__modulus__first__bit1 <  dic_of_cont__my_hama__map__modulus__last__bit1)

axiom dic_of_cont__my_hama__map__modulus__position_axiom1 :
  (0 <= dic_of_cont__my_hama__map__modulus__position1)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy19 : count_type

logic dummy20 : hash_type

logic dummy21 : us_main_type1

type tdhamaS__ref = { tdhamaS__content : us_rep1
}

function tdhamaS__ref___projection(a: tdhamaS__ref) : us_rep1 =
  (a).tdhamaS__content

axiom user_eq__def_axiom4 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type1.
  forall b:count_type. forall b1:hash_type. forall b2:us_main_type1
  [user_eq10({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = a;
  rec__dic_of_cont__my_hama__map__modulus = a1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = a2 } }, { us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = b;
  rec__dic_of_cont__my_hama__map__modulus = b1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = b2 } })]. (user_eq10({ us_split_discrs3 =
  { rec__dic_of_cont__my_hama__map__capacity = a;
  rec__dic_of_cont__my_hama__map__modulus = a1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = a2 } }, { us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = b;
  rec__dic_of_cont__my_hama__map__modulus = b1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = b2 } }) = oeq({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = a;
  rec__dic_of_cont__my_hama__map__modulus = a1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = a2 } }, { us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = b;
  rec__dic_of_cont__my_hama__map__modulus = b1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = b2 } })))

logic dhama__split_discrs : count_type

logic dhama__split_discrs1 : hash_type

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r5b : t

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate in_range4(rec__dic_of_cont__my_hase__set__capacity1: int,
  rec__dic_of_cont__my_hase__set__modulus1: t, a: us_rep2) =
  ((rec__dic_of_cont__my_hase__set__capacity1 = to_rep(((a).us_split_discrs5).rec__dic_of_cont__my_hase__set__capacity)) and
  (rec__dic_of_cont__my_hase__set__modulus1 = to_rep1(((a).us_split_discrs5).rec__dic_of_cont__my_hase__set__modulus)))

logic value__size8 : int

logic object__size8 : us_rep2 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep2 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type2.
  (0 <= object__size8({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = a;
  rec__dic_of_cont__my_hase__set__modulus = a1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = a2 } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type2.
  (0 <= object__alignment8({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = a;
  rec__dic_of_cont__my_hase__set__modulus = a1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = a2 } })))

logic dic_of_cont__my_hase__set__capacity__first__bit1 : int

logic dic_of_cont__my_hase__set__capacity__last__bit1 : int

logic dic_of_cont__my_hase__set__capacity__position1 : int

axiom dic_of_cont__my_hase__set__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_hase__set__capacity__first__bit1)

axiom dic_of_cont__my_hase__set__capacity__last__bit_axiom1 :
  (dic_of_cont__my_hase__set__capacity__first__bit1 <  dic_of_cont__my_hase__set__capacity__last__bit1)

axiom dic_of_cont__my_hase__set__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_hase__set__capacity__position1)

logic dic_of_cont__my_hase__set__modulus__first__bit1 : int

logic dic_of_cont__my_hase__set__modulus__last__bit1 : int

logic dic_of_cont__my_hase__set__modulus__position1 : int

axiom dic_of_cont__my_hase__set__modulus__first__bit_axiom1 :
  (0 <= dic_of_cont__my_hase__set__modulus__first__bit1)

axiom dic_of_cont__my_hase__set__modulus__last__bit_axiom1 :
  (dic_of_cont__my_hase__set__modulus__first__bit1 <  dic_of_cont__my_hase__set__modulus__last__bit1)

axiom dic_of_cont__my_hase__set__modulus__position_axiom1 :
  (0 <= dic_of_cont__my_hase__set__modulus__position1)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy22 : count_type

logic dummy23 : hash_type

logic dummy24 : us_main_type2

type tdhaseS__ref = { tdhaseS__content : us_rep2
}

function tdhaseS__ref___projection(a: tdhaseS__ref) : us_rep2 =
  (a).tdhaseS__content

axiom user_eq__def_axiom5 :
  (forall a:count_type. forall a1:hash_type. forall a2:us_main_type2.
  forall b:count_type. forall b1:hash_type. forall b2:us_main_type2
  [user_eq11({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = a;
  rec__dic_of_cont__my_hase__set__modulus = a1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = a2 } }, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = b;
  rec__dic_of_cont__my_hase__set__modulus = b1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = b2 } })]. (user_eq11({ us_split_discrs5 =
  { rec__dic_of_cont__my_hase__set__capacity = a;
  rec__dic_of_cont__my_hase__set__modulus = a1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = a2 } }, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = b;
  rec__dic_of_cont__my_hase__set__modulus = b1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = b2 } }) = oeq2({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = a;
  rec__dic_of_cont__my_hase__set__modulus = a1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = a2 } }, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = b;
  rec__dic_of_cont__my_hase__set__modulus = b1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = b2 } })))

logic dhase__split_discrs : count_type

logic dhase__split_discrs1 : hash_type

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate in_range5(rec__dic_of_cont__my_orma__map__capacity1: int,
  a: us_rep3) =
  (rec__dic_of_cont__my_orma__map__capacity1 = to_rep(((a).us_split_discrs7).rec__dic_of_cont__my_orma__map__capacity))

logic value__size9 : int

logic object__size9 : us_rep3 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep3 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:count_type. forall a1:us_main_type3. (0 <= object__size9({
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = a };
  us_split_fields7 = { rec__dic_of_cont__my_orma__map = a1 } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:count_type. forall a1:us_main_type3. (0 <= object__alignment9({
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = a };
  us_split_fields7 = { rec__dic_of_cont__my_orma__map = a1 } })))

logic dic_of_cont__my_orma__map__capacity__first__bit1 : int

logic dic_of_cont__my_orma__map__capacity__last__bit1 : int

logic dic_of_cont__my_orma__map__capacity__position1 : int

axiom dic_of_cont__my_orma__map__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_orma__map__capacity__first__bit1)

axiom dic_of_cont__my_orma__map__capacity__last__bit_axiom1 :
  (dic_of_cont__my_orma__map__capacity__first__bit1 <  dic_of_cont__my_orma__map__capacity__last__bit1)

axiom dic_of_cont__my_orma__map__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_orma__map__capacity__position1)

logic user_eq12 : us_rep3, us_rep3 -> bool

logic dummy25 : count_type

logic dummy26 : us_main_type3

type tdormaS__ref = { tdormaS__content : us_rep3
}

function tdormaS__ref___projection(a: tdormaS__ref) : us_rep3 =
  (a).tdormaS__content

axiom user_eq__def_axiom6 :
  (forall a:count_type. forall a1:us_main_type3. forall b:count_type.
  forall b1:us_main_type3 [user_eq12({ us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = a }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = a1 } }, { us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = b }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = b1 } })]. (user_eq12({ us_split_discrs7 =
  { rec__dic_of_cont__my_orma__map__capacity = a }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = a1 } }, { us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = b }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = b1 } }) = oeq4({ us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = a }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = a1 } }, { us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = b }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = b1 } })))

logic dorma__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate in_range6(rec__dic_of_cont__my_orse__set__capacity1: int,
  a: us_rep4) =
  (rec__dic_of_cont__my_orse__set__capacity1 = to_rep(((a).us_split_discrs9).rec__dic_of_cont__my_orse__set__capacity))

logic value__size10 : int

logic object__size10 : us_rep4 -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep4 -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:count_type. forall a1:us_main_type4. (0 <= object__size10({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = a };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = a1 } })))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:count_type. forall a1:us_main_type4. (0 <= object__alignment10({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = a };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = a1 } })))

logic dic_of_cont__my_orse__set__capacity__first__bit1 : int

logic dic_of_cont__my_orse__set__capacity__last__bit1 : int

logic dic_of_cont__my_orse__set__capacity__position1 : int

axiom dic_of_cont__my_orse__set__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_orse__set__capacity__first__bit1)

axiom dic_of_cont__my_orse__set__capacity__last__bit_axiom1 :
  (dic_of_cont__my_orse__set__capacity__first__bit1 <  dic_of_cont__my_orse__set__capacity__last__bit1)

axiom dic_of_cont__my_orse__set__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_orse__set__capacity__position1)

logic user_eq13 : us_rep4, us_rep4 -> bool

logic dummy27 : count_type

logic dummy28 : us_main_type4

type tdorseS__ref = { tdorseS__content : us_rep4
}

function tdorseS__ref___projection(a: tdorseS__ref) : us_rep4 =
  (a).tdorseS__content

axiom user_eq__def_axiom7 :
  (forall a:count_type. forall a1:us_main_type4. forall b:count_type.
  forall b1:us_main_type4 [user_eq13({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = a }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = a1 } }, { us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = b }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = b1 } })]. (user_eq13({ us_split_discrs9 =
  { rec__dic_of_cont__my_orse__set__capacity = a }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = a1 } }, { us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = b }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = b1 } }) = oeq6({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = a }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = a1 } }, { us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = b }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = b1 } })))

logic dorse__split_discrs : count_type

logic attr__ATTRIBUTE_ADDRESS7 : int

predicate in_range7(rec__dic_of_cont__my_fove__vector__capacity1: int,
  a: us_rep5) =
  (rec__dic_of_cont__my_fove__vector__capacity1 = to_rep2(((a).us_split_discrs11).rec__dic_of_cont__my_fove__vector__capacity))

logic value__size11 : int

logic object__size11 : us_rep5 -> int

logic value__alignment11 : int

logic object__alignment11 : us_rep5 -> int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 :
  (forall a:capacity_range. forall a1:us_main_type5. (0 <= object__size11({
  us_split_discrs11 = { rec__dic_of_cont__my_fove__vector__capacity = a };
  us_split_fields11 = { rec__dic_of_cont__my_fove__vector = a1 } })))

axiom value__alignment_axiom11 : (0 <= value__alignment11)

axiom object__alignment_axiom11 :
  (forall a:capacity_range. forall a1:us_main_type5.
  (0 <= object__alignment11({ us_split_discrs11 = {
  rec__dic_of_cont__my_fove__vector__capacity = a }; us_split_fields11 = {
  rec__dic_of_cont__my_fove__vector = a1 } })))

logic dic_of_cont__my_fove__vector__capacity__first__bit1 : int

logic dic_of_cont__my_fove__vector__capacity__last__bit1 : int

logic dic_of_cont__my_fove__vector__capacity__position1 : int

axiom dic_of_cont__my_fove__vector__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_fove__vector__capacity__first__bit1)

axiom dic_of_cont__my_fove__vector__capacity__last__bit_axiom1 :
  (dic_of_cont__my_fove__vector__capacity__first__bit1 <  dic_of_cont__my_fove__vector__capacity__last__bit1)

axiom dic_of_cont__my_fove__vector__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_fove__vector__capacity__position1)

logic user_eq14 : us_rep5, us_rep5 -> bool

logic dummy29 : capacity_range

logic dummy30 : us_main_type5

type tdfoveS__ref = { tdfoveS__content : us_rep5
}

function tdfoveS__ref___projection(a: tdfoveS__ref) : us_rep5 =
  (a).tdfoveS__content

logic dfove__split_discrs : capacity_range

logic attr__ATTRIBUTE_ADDRESS8 : int

axiom length__post_axiom :
  (forall container:count_type. forall container1:us_main_type [length({
  us_split_discrs1 = { rec__dic_of_cont__my_dlli__list__capacity = container
  }; us_split_fields1 = { rec__dic_of_cont__my_dlli__list = container1 } })].
  ((length({ us_split_discrs1 = { rec__dic_of_cont__my_dlli__list__capacity =
  container }; us_split_fields1 = { rec__dic_of_cont__my_dlli__list =
  container1 } }) <= to_rep(container)) and in_range(length({
  us_split_discrs1 = { rec__dic_of_cont__my_dlli__list__capacity = container
  }; us_split_fields1 = { rec__dic_of_cont__my_dlli__list = container1 }
  }))))

axiom length__post_axiom1 :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type1 [length1({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = container;
  rec__dic_of_cont__my_hama__map__modulus = container1 }; us_split_fields3 =
  { rec__dic_of_cont__my_hama__map = container2 } })]. ((length1({
  us_split_discrs3 = { rec__dic_of_cont__my_hama__map__capacity = container;
  rec__dic_of_cont__my_hama__map__modulus = container1 }; us_split_fields3 =
  { rec__dic_of_cont__my_hama__map = container2 }
  }) <= to_rep(container)) and in_range(length1({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = container;
  rec__dic_of_cont__my_hama__map__modulus = container1 }; us_split_fields3 =
  { rec__dic_of_cont__my_hama__map = container2 } }))))

axiom length__post__dispatch_axiom :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type1 [length2(attr__tag, { us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = container;
  rec__dic_of_cont__my_hama__map__modulus = container1 }; us_split_fields3 =
  { rec__dic_of_cont__my_hama__map = container2 } })].
  in_range(length2(attr__tag, { us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = container;
  rec__dic_of_cont__my_hama__map__modulus = container1 }; us_split_fields3 =
  { rec__dic_of_cont__my_hama__map = container2 } }))))

type us_main_type6

logic us_main_eq6 : us_main_type6, us_main_type6 -> bool

type us_rep6

logic bool_eq10 : us_rep6, us_rep6 -> bool

logic value__size12 : int

logic object__size12 : us_rep6 -> int

logic value__alignment12 : int

logic object__alignment12 : us_rep6 -> int

axiom value__size_axiom12 : (0 <= value__size12)

axiom object__size_axiom12 : (forall a:us_rep6. (0 <= object__size12(a)))

axiom value__alignment_axiom12 : (0 <= value__alignment12)

axiom object__alignment_axiom12 :
  (forall a:us_rep6. (0 <= object__alignment12(a)))

logic user_eq15 : us_rep6, us_rep6 -> bool

logic dummy31 : us_rep6

type map__ref2 = { map__content2 : us_rep6
}

function map__ref___3__projection(a: map__ref2) : us_rep6 = (a).map__content2

logic length10 : us_rep6 -> int

logic length__function_guard10 : int, us_rep6 -> prop

logic is_empty10 : us_rep6 -> bool

logic is_empty__function_guard10 : bool, us_rep6 -> prop

logic model__ : us_rep1 -> us_rep6

logic model____function_guard : us_rep6, us_rep1 -> prop

axiom model____post_axiom : true

logic oeq8 : us_rep6, us_rep6 -> bool

logic oeq__function_guard8 : bool, us_rep6, us_rep6 -> prop

axiom oeq__post_axiom :
  (forall left:count_type. forall left1:hash_type.
  forall left2:us_main_type1. forall right:count_type.
  forall right1:hash_type. forall right2:us_main_type1 [oeq({
  us_split_discrs3 = { rec__dic_of_cont__my_hama__map__capacity = left;
  rec__dic_of_cont__my_hama__map__modulus = left1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = left2 } }, { us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = right;
  rec__dic_of_cont__my_hama__map__modulus = right1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = right2 } })]. ((oeq({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = left;
  rec__dic_of_cont__my_hama__map__modulus = left1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = left2 } }, { us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = right;
  rec__dic_of_cont__my_hama__map__modulus = right1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = right2 } }) = true) <-> (oeq8(model__({
  us_split_discrs3 = { rec__dic_of_cont__my_hama__map__capacity = left;
  rec__dic_of_cont__my_hama__map__modulus = left1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = left2 } }), model__({ us_split_discrs3 = {
  rec__dic_of_cont__my_hama__map__capacity = right;
  rec__dic_of_cont__my_hama__map__modulus = right1 }; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = right2 } })) = true)))

axiom oeq__post__dispatch_axiom : true

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq11 : bool, bool -> bool

axiom bool_eq_def9 :
  (forall x:bool. forall y:bool [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic to_int2 : bool -> int

axiom to_int_def1 :
  (forall b:bool [to_int2(b)]. (((b = true) -> (to_int2(b) = 1)) and
  ((not (b = true)) -> (to_int2(b) = 0))))

logic of_int1 : int -> bool

axiom of_int_def :
  (forall i:int [of_int1(i)]. (((i = 0) -> (of_int1(i) = false)) and
  ((not (i = 0)) -> (of_int1(i) = true))))

predicate in_range8(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

type key_type

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq16 : key_type, key_type -> bool

logic dummy32 : key_type

type key_type__ref = { key_type__content : key_type
}

function key_type__ref___3__projection(a: key_type__ref) : key_type =
  (a).key_type__content

logic has_key : us_rep6, int -> bool

logic has_key__function_guard : bool, us_rep6, int -> prop

axiom has_key__post_axiom :
  (forall container:us_rep6.
  (forall key:int [has_key(container, key)]. (in_range9(key) ->
  ((of_int1(1) = true) ->
  ((exists k:int. ((in_range9(k) and (has_key(container, k) = true)) and
   (k = key))) ->
  (has_key(container, key) = true))))))

type element_type

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq17 : element_type, element_type -> bool

logic dummy33 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___5__projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic witness : us_rep6, int -> int

logic witness__function_guard : int, us_rep6, int -> prop

logic w_get : us_rep6, int -> int

logic w_get__function_guard : int, us_rep6, int -> prop

logic get : us_rep6, int -> int

logic get__function_guard : int, us_rep6, int -> prop

axiom get__post_axiom :
  (forall container:us_rep6.
  (forall key:int [get(container, key)]. ((in_range9(key) and
  (has_key(container, key) = true)) -> (((of_int1(1) = true) ->
  ((get(container, key) = w_get(container, witness(container, key))) and
  (forall k:int. ((in_range9(k) and (has_key(container, k) = true)) ->
  ((k = key) <-> (witness(container, key) = witness(container, k))))))) and
  in_range10(get(container, key))))))

axiom length__post_axiom2 :
  (forall container:us_rep6 [length10(container)].
  in_range(length10(container)))

axiom oeq__post_axiom1 :
  (forall left:us_rep6. forall right:us_rep6 [oeq8(left, right)].
  ((oeq8(left, right) = true) <->
  ((forall key:int. ((in_range9(key) and (has_key(left, key) = true)) ->
   ((has_key(right, key) = true) and (get(right, key) = get(left, key))))) and
  (forall key:int. ((in_range9(key) and (has_key(right, key) = true)) ->
  (has_key(left, key) = true))))))

axiom is_empty__post_axiom6 :
  (forall container:us_rep6 [is_empty10(container)].
  ((is_empty10(container) = true) <->
  (forall key:int. (not (in_range9(key) and (has_key(container,
  key) = true))))))

logic has_witness : us_rep6, int -> bool

logic has_witness__function_guard : bool, us_rep6, int -> prop

axiom has_witness__post_axiom : true

axiom witness__post_axiom :
  (forall container:us_rep6.
  (forall key:int [witness(container, key)]. ((in_range9(key) and
  (has_key(container, key) = true)) -> ((has_witness(container,
  witness(container, key)) = true) and in_range(witness(container, key))))))

axiom w_get__post_axiom :
  (forall container:us_rep6.
  (forall witness1:int [w_get(container, witness1)]. ((in_range(witness1) and
  (has_witness(container, witness1) = true)) -> in_range10(w_get(container,
  witness1)))))

axiom length__post_axiom3 :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type2 [length3({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } })]. ((length3({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 }
  }) <= to_rep(container)) and in_range(length3({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }))))

axiom length__post__dispatch_axiom1 :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type2 [length4(attr__tag, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } })].
  in_range(length4(attr__tag, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }))))

type element_type1

predicate in_range11(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq18 : element_type1, element_type1 -> bool

logic dummy34 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___8__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

type us_main_type7

logic us_main_eq7 : us_main_type7, us_main_type7 -> bool

type us_rep7

logic bool_eq15 : us_rep7, us_rep7 -> bool

logic value__size13 : int

logic object__size13 : us_rep7 -> int

logic value__alignment13 : int

logic object__alignment13 : us_rep7 -> int

axiom value__size_axiom13 : (0 <= value__size13)

axiom object__size_axiom13 : (forall a:us_rep7. (0 <= object__size13(a)))

axiom value__alignment_axiom13 : (0 <= value__alignment13)

axiom object__alignment_axiom13 :
  (forall a:us_rep7. (0 <= object__alignment13(a)))

logic user_eq19 : us_rep7, us_rep7 -> bool

logic dummy35 : us_rep7

type sequence__ref = { sequence__content : us_rep7
}

function sequence__ref___3__projection(a: sequence__ref) : us_rep7 =
  (a).sequence__content

logic length11 : us_rep7 -> int

logic length__function_guard11 : int, us_rep7 -> prop

logic last__function_guard : int, us_rep7 -> prop

logic get1 : us_rep7, int -> int

logic get__function_guard1 : int, us_rep7, int -> prop

logic oeq__function_guard9 : bool, us_rep7, us_rep7 -> prop

axiom user_eq__def_axiom8 :
  (forall a:us_rep7. forall b:us_rep7 [user_eq19(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length11(a)))) -> (get1(a,
    n) = get1(b, n)))) ->
  (user_eq19(a, b) = match_bool(bool_eq1(length11(a), length11(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length11(a)))) -> (get1(a,
        n) = get1(b, n))))) ->
  (user_eq19(a, b) = match_bool(bool_eq1(length11(a), length11(b)), false,
  false)))))

logic find : us_rep7, int -> int

logic find__function_guard : int, us_rep7, int -> prop

axiom find__post_axiom :
  (forall container:us_rep7.
  (forall item:int [find(container, item)]. (in_range11(item) ->
  (((0 <  find(container, item)) -> ((find(container,
  item) <= length11(container)) and (item = get1(container, find(container,
  item))))) and in_range(find(container, item))))))

logic e_elements_included__function_guard : bool, us_rep7, us_rep7 -> prop

type us_main_type8

logic us_main_eq8 : us_main_type8, us_main_type8 -> bool

type us_rep8

logic bool_eq16 : us_rep8, us_rep8 -> bool

logic value__size14 : int

logic object__size14 : us_rep8 -> int

logic value__alignment14 : int

logic object__alignment14 : us_rep8 -> int

axiom value__size_axiom14 : (0 <= value__size14)

axiom object__size_axiom14 : (forall a:us_rep8. (0 <= object__size14(a)))

axiom value__alignment_axiom14 : (0 <= value__alignment14)

axiom object__alignment_axiom14 :
  (forall a:us_rep8. (0 <= object__alignment14(a)))

logic user_eq20 : us_rep8, us_rep8 -> bool

logic dummy36 : us_rep8

type set__ref2 = { set__content2 : us_rep8
}

function set__ref___2__projection(a: set__ref2) : us_rep8 = (a).set__content2

logic is_empty11 : us_rep8 -> bool

logic is_empty__function_guard11 : bool, us_rep8 -> prop

logic length12 : us_rep8 -> int

logic length__function_guard12 : int, us_rep8 -> prop

logic model__1 : us_rep2 -> us_rep8

logic model____function_guard1 : us_rep8, us_rep2 -> prop

axiom model____post_axiom1 :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type2 [model__1({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } })]. (length12(model__1({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } })) = length3({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } })))

type element_type2

predicate in_range12(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq21 : element_type2, element_type2 -> bool

logic dummy37 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref___9__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

logic contains : us_rep8, int -> bool

logic contains__function_guard : bool, us_rep8, int -> prop

type extended_index

predicate in_range13(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq22 : extended_index, extended_index -> bool

logic dummy38 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___3__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

logic iter_has_element__function_guard : bool, us_rep7, int -> prop

logic elements : us_rep2 -> us_rep7

logic elements__function_guard : us_rep7, us_rep2 -> prop

axiom elements__post_axiom :
  (forall container:count_type. forall container1:hash_type.
  forall container2:us_main_type2 [elements({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } })].
  (((((length11(elements({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } })) = length3({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } })) and
  (forall temp___845:int. ((in_range13(temp___845) and ((1 <= temp___845) and
  (temp___845 <= (0 + length11(elements({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } })))))) ->
  (contains(model__1({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }), get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }), temp___845)) = true)))) and
  (forall item:int. ((in_range12(item) and (contains(model__1({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }), item) = true)) ->
  ((0 <  find(elements({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }), item)) and
  (get1(elements({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }), find(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }), item)) = item))))) and
  (forall i:int. (((1 <= i) and (i <= length3({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }))) -> (find(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }), get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }), i)) = i)))) and
  (forall i:int. (((1 <= i) and (i <= length3({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }))) ->
  (forall j:int. (((1 <= j) and (j <= length3({ us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }))) -> ((get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }), i) = get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = container;
  rec__dic_of_cont__my_hase__set__modulus = container1 }; us_split_fields5 =
  { rec__dic_of_cont__my_hase__set = container2 } }), j)) -> (i = j))))))))

axiom oeq__post_axiom2 :
  (forall left:count_type. forall left1:hash_type.
  forall left2:us_main_type2. forall right:count_type.
  forall right1:hash_type. forall right2:us_main_type2 [oeq2({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } }, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } })]. (((oeq2({ us_split_discrs5 =
  { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } }, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } }) = true) <-> ((length3({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } }) = length3({ us_split_discrs5 =
  { rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } })) and
  (forall i:int. (((1 <= i) and (i <= length11(elements({ us_split_discrs5 =
  { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } })))) -> ((0 <  find(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } }), get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } }), i))) and (get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } }), find(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } }), get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } }), i))) = get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } }), i))))))) and ((oeq2({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } }, { us_split_discrs5 = {
  rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } }) = true) <->
  ((forall i:int. (((1 <= i) and (i <= length11(elements({ us_split_discrs5 =
   { rec__dic_of_cont__my_hase__set__capacity = left;
   rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
   rec__dic_of_cont__my_hase__set = left2 } })))) -> ((0 <  find(elements({
   us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = right;
   rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
   rec__dic_of_cont__my_hase__set = right2 } }), get1(elements({
   us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
   rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
   rec__dic_of_cont__my_hase__set = left2 } }), i))) and (get1(elements({
   us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = right;
   rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
   rec__dic_of_cont__my_hase__set = right2 } }), find(elements({
   us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = right;
   rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
   rec__dic_of_cont__my_hase__set = right2 } }), get1(elements({
   us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
   rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
   rec__dic_of_cont__my_hase__set = left2 } }), i))) = get1(elements({
   us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
   rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
   rec__dic_of_cont__my_hase__set = left2 } }), i))))) and
  (forall i:int. (((1 <= i) and (i <= length11(elements({ us_split_discrs5 =
  { rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } })))) -> ((0 <  find(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } }), get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } }), i))) and (get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } }), find(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = left;
  rec__dic_of_cont__my_hase__set__modulus = left1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = left2 } }), get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } }), i))) = get1(elements({
  us_split_discrs5 = { rec__dic_of_cont__my_hase__set__capacity = right;
  rec__dic_of_cont__my_hase__set__modulus = right1 }; us_split_fields5 = {
  rec__dic_of_cont__my_hase__set = right2 } }), i)))))))))

axiom oeq__post__dispatch_axiom1 : true

axiom contains__post_axiom :
  (forall container:us_rep8.
  (forall item:int [contains(container, item)]. (in_range12(item) ->
  ((of_int1(1) = true) ->
  ((exists e:int. ((in_range12(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

axiom length__post_axiom4 :
  (forall container:us_rep8 [length12(container)].
  in_range(length12(container)))

axiom is_empty__post_axiom7 :
  (forall container:us_rep8 [is_empty11(container)].
  (((is_empty11(container) = true) <->
  (forall item:int. (not (in_range12(item) and (contains(container,
  item) = true))))) and ((is_empty11(container) = true) <->
  (length12(container) = 0))))

axiom length__post_axiom5 :
  (forall container:us_rep7 [length11(container)].
  (((0 + length11(container)) <= 2147483647) and
  in_range(length11(container))))

type element_type3

predicate in_range14(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq23 : element_type3, element_type3 -> bool

logic dummy39 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref___10__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

axiom get__post_axiom1 :
  (forall container:us_rep7.
  (forall position:int [get1(container, position)].
  ((in_range13(position) and ((1 <= position) and
  (position <= (0 + length11(container))))) -> in_range14(get1(container,
  position)))))

logic equivalent_keys__function_guard : bool, int, int -> prop

axiom length__post_axiom6 :
  (forall container:count_type. forall container1:us_main_type3 [length5({
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = container
  }; us_split_fields7 = { rec__dic_of_cont__my_orma__map = container1 } })].
  ((length5({ us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity =
  container }; us_split_fields7 = { rec__dic_of_cont__my_orma__map =
  container1 } }) <= to_rep(container)) and in_range(length5({
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = container
  }; us_split_fields7 = { rec__dic_of_cont__my_orma__map = container1 } }))))

axiom length__post__dispatch_axiom2 :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type3
  [length6(attr__tag, { us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = container }; us_split_fields7 =
  { rec__dic_of_cont__my_orma__map = container1 } })].
  in_range(length6(attr__tag, { us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = container }; us_split_fields7 =
  { rec__dic_of_cont__my_orma__map = container1 } }))))

type us_main_type9

logic us_main_eq9 : us_main_type9, us_main_type9 -> bool

type us_rep9

logic bool_eq20 : us_rep9, us_rep9 -> bool

logic value__size15 : int

logic object__size15 : us_rep9 -> int

logic value__alignment15 : int

logic object__alignment15 : us_rep9 -> int

axiom value__size_axiom15 : (0 <= value__size15)

axiom object__size_axiom15 : (forall a:us_rep9. (0 <= object__size15(a)))

axiom value__alignment_axiom15 : (0 <= value__alignment15)

axiom object__alignment_axiom15 :
  (forall a:us_rep9. (0 <= object__alignment15(a)))

logic user_eq24 : us_rep9, us_rep9 -> bool

logic dummy40 : us_rep9

type map__ref3 = { map__content3 : us_rep9
}

function map__ref___7__projection(a: map__ref3) : us_rep9 = (a).map__content3

logic length13 : us_rep9 -> int

logic length__function_guard13 : int, us_rep9 -> prop

logic is_empty12 : us_rep9 -> bool

logic is_empty__function_guard12 : bool, us_rep9 -> prop

logic model__2 : us_rep3 -> us_rep9

logic model____function_guard2 : us_rep9, us_rep3 -> prop

axiom model____post_axiom2 : true

logic oeq9 : us_rep9, us_rep9 -> bool

logic oeq__function_guard10 : bool, us_rep9, us_rep9 -> prop

axiom oeq__post_axiom3 :
  (forall left:count_type. forall left1:us_main_type3.
  forall right:count_type. forall right1:us_main_type3 [oeq4({
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = left };
  us_split_fields7 = { rec__dic_of_cont__my_orma__map = left1 } }, {
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = right };
  us_split_fields7 = { rec__dic_of_cont__my_orma__map = right1 } })].
  ((oeq4({ us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity =
  left }; us_split_fields7 = { rec__dic_of_cont__my_orma__map = left1 } }, {
  us_split_discrs7 = { rec__dic_of_cont__my_orma__map__capacity = right };
  us_split_fields7 = { rec__dic_of_cont__my_orma__map = right1 }
  }) = true) <-> (oeq9(model__2({ us_split_discrs7 = {
  rec__dic_of_cont__my_orma__map__capacity = left }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = left1 } }), model__2({ us_split_discrs7 =
  { rec__dic_of_cont__my_orma__map__capacity = right }; us_split_fields7 = {
  rec__dic_of_cont__my_orma__map = right1 } })) = true)))

axiom oeq__post__dispatch_axiom2 : true

type key_type1

predicate in_range15(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq25 : key_type1, key_type1 -> bool

logic dummy41 : key_type1

type key_type__ref1 = { key_type__content1 : key_type1
}

function key_type__ref___7__projection(a: key_type__ref1) : key_type1 =
  (a).key_type__content1

logic has_key1 : us_rep9, int -> bool

logic has_key__function_guard1 : bool, us_rep9, int -> prop

axiom has_key__post_axiom1 :
  (forall container:us_rep9.
  (forall key:int [has_key1(container, key)]. (in_range15(key) ->
  ((of_int1(1) = true) ->
  ((exists k:int. ((in_range15(k) and (has_key1(container, k) = true)) and
   ((bool_lt1(k, key) = false) and (bool_lt1(key, k) = false)))) ->
  (has_key1(container, key) = true))))))

type element_type4

predicate in_range16(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq22(x, y)]. (((x = y) -> (bool_eq22(x,
  y) = true)) and ((not (x = y)) -> (bool_eq22(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq26 : element_type4, element_type4 -> bool

logic dummy42 : element_type4

type element_type__ref4 = { element_type__content4 : element_type4
}

function element_type__ref___13__projection(a: element_type__ref4) : element_type4 =
  (a).element_type__content4

logic witness1 : us_rep9, int -> int

logic witness__function_guard1 : int, us_rep9, int -> prop

logic w_get1 : us_rep9, int -> int

logic w_get__function_guard1 : int, us_rep9, int -> prop

logic get2 : us_rep9, int -> int

logic get__function_guard2 : int, us_rep9, int -> prop

axiom get__post_axiom2 :
  (forall container:us_rep9.
  (forall key:int [get2(container, key)]. ((in_range15(key) and
  (has_key1(container, key) = true)) -> (((of_int1(1) = true) ->
  ((get2(container, key) = w_get1(container, witness1(container, key))) and
  (forall k:int. ((in_range15(k) and (has_key1(container, k) = true)) ->
  ((((bool_lt1(k, key) = false) and (bool_lt1(key, k) = false)) ->
  (witness1(container, key) = witness1(container, k))) and
  ((witness1(container, key) = witness1(container, k)) -> ((not (bool_lt1(k,
  key) = true)) and ((bool_lt1(k, key) = false) -> (not (bool_lt1(key,
  k) = true)))))))))) and in_range16(get2(container, key))))))

axiom length__post_axiom7 :
  (forall container:us_rep9 [length13(container)].
  in_range(length13(container)))

axiom oeq__post_axiom4 :
  (forall left:us_rep9. forall right:us_rep9 [oeq9(left, right)].
  ((oeq9(left, right) = true) <->
  ((forall key:int. ((in_range15(key) and (has_key1(left, key) = true)) ->
   ((has_key1(right, key) = true) and (get2(right, key) = get2(left, key))))) and
  (forall key:int. ((in_range15(key) and (has_key1(right, key) = true)) ->
  (has_key1(left, key) = true))))))

axiom is_empty__post_axiom8 :
  (forall container:us_rep9 [is_empty12(container)].
  ((is_empty12(container) = true) <->
  (forall key:int. (not (in_range15(key) and (has_key1(container,
  key) = true))))))

logic has_witness1 : us_rep9, int -> bool

logic has_witness__function_guard1 : bool, us_rep9, int -> prop

axiom has_witness__post_axiom1 : true

axiom witness__post_axiom1 :
  (forall container:us_rep9.
  (forall key:int [witness1(container, key)]. ((in_range15(key) and
  (has_key1(container, key) = true)) -> ((has_witness1(container,
  witness1(container, key)) = true) and in_range(witness1(container, key))))))

axiom w_get__post_axiom1 :
  (forall container:us_rep9.
  (forall witness2:int [w_get1(container, witness2)].
  ((in_range(witness2) and (has_witness1(container, witness2) = true)) ->
  in_range16(w_get1(container, witness2)))))

logic equivalent_elements__function_guard : bool, int, int -> prop

axiom length__post_axiom8 :
  (forall container:count_type. forall container1:us_main_type4 [length7({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } })].
  ((length7({ us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity =
  container }; us_split_fields9 = { rec__dic_of_cont__my_orse__set =
  container1 } }) <= to_rep(container)) and in_range(length7({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }))))

axiom length__post__dispatch_axiom3 :
  (forall attr__tag:int.
  (forall container:count_type. forall container1:us_main_type4
  [length8(attr__tag, { us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } })].
  in_range(length8(attr__tag, { us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }))))

type us_main_type10

logic us_main_eq10 : us_main_type10, us_main_type10 -> bool

type us_rep10

logic bool_eq23 : us_rep10, us_rep10 -> bool

logic value__size16 : int

logic object__size16 : us_rep10 -> int

logic value__alignment16 : int

logic object__alignment16 : us_rep10 -> int

axiom value__size_axiom16 : (0 <= value__size16)

axiom object__size_axiom16 : (forall a:us_rep10. (0 <= object__size16(a)))

axiom value__alignment_axiom16 : (0 <= value__alignment16)

axiom object__alignment_axiom16 :
  (forall a:us_rep10. (0 <= object__alignment16(a)))

logic user_eq27 : us_rep10, us_rep10 -> bool

logic dummy43 : us_rep10

type sequence__ref1 = { sequence__content1 : us_rep10
}

function sequence__ref___5__projection(a: sequence__ref1) : us_rep10 =
  (a).sequence__content1

logic length14 : us_rep10 -> int

logic length__function_guard14 : int, us_rep10 -> prop

logic get3 : us_rep10, int -> int

logic get__function_guard3 : int, us_rep10, int -> prop

logic e_bigger_than_range__function_guard : bool, us_rep10, int, int,
  int -> prop

logic e_smaller_than_range__function_guard : bool, us_rep10, int, int,
  int -> prop

logic e_is_find__function_guard : bool, us_rep10, int, int -> prop

type element_type5

predicate in_range17(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq24(x, y)]. (((x = y) -> (bool_eq24(x,
  y) = true)) and ((not (x = y)) -> (bool_eq24(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq28 : element_type5, element_type5 -> bool

logic dummy44 : element_type5

type element_type__ref5 = { element_type__content5 : element_type5
}

function element_type__ref___16__projection(a: element_type__ref5) : element_type5 =
  (a).element_type__content5

logic last__function_guard1 : int, us_rep10 -> prop

logic oeq__function_guard11 : bool, us_rep10, us_rep10 -> prop

axiom user_eq__def_axiom9 :
  (forall a:us_rep10. forall b:us_rep10 [user_eq27(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length14(a)))) -> (get3(a,
    n) = get3(b, n)))) ->
  (user_eq27(a, b) = match_bool(bool_eq1(length14(a), length14(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length14(a)))) -> (get3(a,
        n) = get3(b, n))))) ->
  (user_eq27(a, b) = match_bool(bool_eq1(length14(a), length14(b)), false,
  false)))))

logic find1 : us_rep10, int -> int

logic find__function_guard1 : int, us_rep10, int -> prop

axiom find__post_axiom1 :
  (forall container:us_rep10.
  (forall item:int [find1(container, item)]. (in_range17(item) ->
  (((0 <  find1(container, item)) -> ((find1(container,
  item) <= length14(container)) and ((not (bool_lt1(item, get3(container,
  find1(container, item))) = true)) and ((bool_lt1(item, get3(container,
  find1(container, item))) = false) -> (not (bool_lt1(get3(container,
  find1(container, item)), item) = true)))))) and in_range(find1(container,
  item))))))

logic e_elements_included__function_guard1 : bool, us_rep10, us_rep10 -> prop

type us_main_type11

logic us_main_eq11 : us_main_type11, us_main_type11 -> bool

type us_rep11

logic bool_eq25 : us_rep11, us_rep11 -> bool

logic value__size17 : int

logic object__size17 : us_rep11 -> int

logic value__alignment17 : int

logic object__alignment17 : us_rep11 -> int

axiom value__size_axiom17 : (0 <= value__size17)

axiom object__size_axiom17 : (forall a:us_rep11. (0 <= object__size17(a)))

axiom value__alignment_axiom17 : (0 <= value__alignment17)

axiom object__alignment_axiom17 :
  (forall a:us_rep11. (0 <= object__alignment17(a)))

logic user_eq29 : us_rep11, us_rep11 -> bool

logic dummy45 : us_rep11

type set__ref3 = { set__content3 : us_rep11
}

function set__ref___4__projection(a: set__ref3) : us_rep11 =
  (a).set__content3

logic is_empty13 : us_rep11 -> bool

logic is_empty__function_guard13 : bool, us_rep11 -> prop

logic length15 : us_rep11 -> int

logic length__function_guard15 : int, us_rep11 -> prop

logic model__3 : us_rep4 -> us_rep11

logic model____function_guard3 : us_rep11, us_rep4 -> prop

axiom model____post_axiom3 :
  (forall container:count_type. forall container1:us_main_type4 [model__3({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } })].
  (length15(model__3({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } })) = length7({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } })))

type element_type6

predicate in_range18(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq26 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq26(x, y)]. (((x = y) -> (bool_eq26(x,
  y) = true)) and ((not (x = y)) -> (bool_eq26(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq30 : element_type6, element_type6 -> bool

logic dummy46 : element_type6

type element_type__ref6 = { element_type__content6 : element_type6
}

function element_type__ref___17__projection(a: element_type__ref6) : element_type6 =
  (a).element_type__content6

logic contains1 : us_rep11, int -> bool

logic contains__function_guard1 : bool, us_rep11, int -> prop

type extended_index1

predicate in_range19(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq27 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq27(x, y)]. (((x = y) -> (bool_eq27(x,
  y) = true)) and ((not (x = y)) -> (bool_eq27(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq31 : extended_index1, extended_index1 -> bool

logic dummy47 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref___5__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

logic iter_has_element__function_guard1 : bool, us_rep10, int -> prop

logic elements1 : us_rep4 -> us_rep10

logic elements__function_guard1 : us_rep10, us_rep4 -> prop

axiom elements__post_axiom1 :
  (forall container:count_type. forall container1:us_main_type4 [elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } })].
  ((((length14(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } })) = length7({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
  })) and
  (forall temp___1358:int. ((in_range19(temp___1358) and
  ((1 <= temp___1358) and (temp___1358 <= (0 + length14(elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
  })))))) -> (contains1(model__3({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }), get3(elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
  temp___1358)) = true)))) and
  (forall item:int. ((in_range18(item) and (contains1(model__3({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
  item) = true)) -> ((0 <  find1(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }), item)) and
  ((not (bool_lt1(get3(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }), find1(elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
  item)), item) = true)) and ((bool_lt1(get3(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }), find1(elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
  item)), item) = false) -> (not (bool_lt1(item, get3(elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
  find1(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }), item))) = true)))))))) and
  (forall i:int. (((1 <= i) and (i <= length7({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }))) -> ((find1(elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
  }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
  get3(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }), i)) = i) and
  (((0 <  i) ->
  (((forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get3(elements1({
    us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
    }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
    i1) <  get3(elements1({ us_split_discrs9 = {
    rec__dic_of_cont__my_orse__set__capacity = container };
    us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
    i)))) ->
  (((i <  length14(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length14(elements1({
    us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
    }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
    })))) -> (get3(elements1({ us_split_discrs9 = {
    rec__dic_of_cont__my_orse__set__capacity = container };
    us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
    i) <  get3(elements1({ us_split_discrs9 = {
    rec__dic_of_cont__my_orse__set__capacity = container };
    us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
    i1)))) ->
  (match_bool(true, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length14(elements1({
        us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity =
        container }; us_split_fields9 = { rec__dic_of_cont__my_orse__set =
        container1 } })))) -> (get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = container };
        us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
        }), i) <  get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = container };
        us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
        }), i1))))) ->
  (match_bool(true, false, false) = true)))) and
  ((not (i <  length14(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } })))) -> (match_bool(true,
  of_int1(1), false) = true)))) and
  ((not (forall i1:int. (((1 <= i1) and (i1 <= (i - 1))) -> (get3(elements1({
        us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity =
        container }; us_split_fields9 = { rec__dic_of_cont__my_orse__set =
        container1 } }), i1) <  get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = container };
        us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
        }), i))))) ->
  (((i <  length14(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length14(elements1({
    us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
    }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
    })))) -> (get3(elements1({ us_split_discrs9 = {
    rec__dic_of_cont__my_orse__set__capacity = container };
    us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
    i) <  get3(elements1({ us_split_discrs9 = {
    rec__dic_of_cont__my_orse__set__capacity = container };
    us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
    i1)))) ->
  (match_bool(false, true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length14(elements1({
        us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity =
        container }; us_split_fields9 = { rec__dic_of_cont__my_orse__set =
        container1 } })))) -> (get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = container };
        us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
        }), i) <  get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = container };
        us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
        }), i1))))) ->
  (match_bool(false, false, false) = true)))) and
  ((not (i <  length14(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } })))) -> (match_bool(false,
  of_int1(1), false) = true)))))) and ((not (0 <  i)) ->
  (((i <  length14(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } }))) ->
  (((forall i1:int. ((((i + 1) <= i1) and (i1 <= length14(elements1({
    us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = container
    }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
    })))) -> (get3(elements1({ us_split_discrs9 = {
    rec__dic_of_cont__my_orse__set__capacity = container };
    us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
    i) <  get3(elements1({ us_split_discrs9 = {
    rec__dic_of_cont__my_orse__set__capacity = container };
    us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 } }),
    i1)))) ->
  (match_bool(of_int1(1), true, false) = true)) and
  ((not (forall i1:int. ((((i + 1) <= i1) and (i1 <= length14(elements1({
        us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity =
        container }; us_split_fields9 = { rec__dic_of_cont__my_orse__set =
        container1 } })))) -> (get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = container };
        us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
        }), i) <  get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = container };
        us_split_fields9 = { rec__dic_of_cont__my_orse__set = container1 }
        }), i1))))) ->
  (match_bool(of_int1(1), false, false) = true)))) and
  ((not (i <  length14(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = container }; us_split_fields9 =
  { rec__dic_of_cont__my_orse__set = container1 } })))) ->
  (match_bool(of_int1(1), of_int1(1), false) = true))))))))))

axiom oeq__post_axiom5 :
  (forall left:count_type. forall left1:us_main_type4.
  forall right:count_type. forall right1:us_main_type4 [oeq6({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = left };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = left1 } }, {
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = right };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = right1 } })].
  (((oeq6({ us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity =
  left }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = left1 } }, {
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = right };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = right1 }
  }) = true) -> (((bool_eq1(length14(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = left }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = left1 } })), length14(elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = right };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = right1 }
  }))) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length14(elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = left };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = left1 } }))))) ->
  (get3(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = left }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = left1 } }), n) = get3(elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = right };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = right1 } }), n))))) and
  (not (bool_eq1(length14(elements1({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = left }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = left1 } })), length14(elements1({
  us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = right };
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = right1 }
  }))) = false)))) and ((not (oeq6({ us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = left }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = left1 } }, { us_split_discrs9 = {
  rec__dic_of_cont__my_orse__set__capacity = right }; us_split_fields9 = {
  rec__dic_of_cont__my_orse__set = right1 } }) = true)) ->
  ((not (forall i:int. (((1 <= i) and (i <= length14(elements1({
        us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = left
        }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = left1 }
        })))) -> ((0 <  find1(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = right };
        us_split_fields9 = { rec__dic_of_cont__my_orse__set = right1 } }),
        get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = left }; us_split_fields9 =
        { rec__dic_of_cont__my_orse__set = left1 } }), i))) and
        (get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = right };
        us_split_fields9 = { rec__dic_of_cont__my_orse__set = right1 } }),
        find1(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = right };
        us_split_fields9 = { rec__dic_of_cont__my_orse__set = right1 } }),
        get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = left }; us_split_fields9 =
        { rec__dic_of_cont__my_orse__set = left1 } }),
        i))) = get3(elements1({ us_split_discrs9 = {
        rec__dic_of_cont__my_orse__set__capacity = left }; us_split_fields9 =
        { rec__dic_of_cont__my_orse__set = left1 } }), i)))))) or
  (not (forall i:int. (((1 <= i) and (i <= length14(elements1({
       us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = right
       }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = right1 }
       })))) -> ((0 <  find1(elements1({ us_split_discrs9 = {
       rec__dic_of_cont__my_orse__set__capacity = left }; us_split_fields9 =
       { rec__dic_of_cont__my_orse__set = left1 } }), get3(elements1({
       us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = right
       }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = right1 } }),
       i))) and (get3(elements1({ us_split_discrs9 = {
       rec__dic_of_cont__my_orse__set__capacity = left }; us_split_fields9 =
       { rec__dic_of_cont__my_orse__set = left1 } }), find1(elements1({
       us_split_discrs9 = { rec__dic_of_cont__my_orse__set__capacity = left
       }; us_split_fields9 = { rec__dic_of_cont__my_orse__set = left1 } }),
       get3(elements1({ us_split_discrs9 = {
       rec__dic_of_cont__my_orse__set__capacity = right }; us_split_fields9 =
       { rec__dic_of_cont__my_orse__set = right1 } }),
       i))) = get3(elements1({ us_split_discrs9 = {
       rec__dic_of_cont__my_orse__set__capacity = right }; us_split_fields9 =
       { rec__dic_of_cont__my_orse__set = right1 } }), i))))))))))

axiom oeq__post__dispatch_axiom3 : true

axiom contains__post_axiom1 :
  (forall container:us_rep11.
  (forall item:int [contains1(container, item)]. (in_range18(item) ->
  ((of_int1(1) = true) ->
  ((exists e:int. ((in_range18(e) and (contains1(container, e) = true)) and
   ((bool_lt1(e, item) = false) and (bool_lt1(item, e) = false)))) ->
  (contains1(container, item) = true))))))

axiom length__post_axiom9 :
  (forall container:us_rep11 [length15(container)].
  in_range(length15(container)))

axiom is_empty__post_axiom9 :
  (forall container:us_rep11 [is_empty13(container)].
  (((is_empty13(container) = true) <->
  (forall item:int. (not (in_range18(item) and (contains1(container,
  item) = true))))) and ((is_empty13(container) = true) <->
  (length15(container) = 0))))

axiom length__post_axiom10 :
  (forall container:us_rep10 [length14(container)].
  (((0 + length14(container)) <= 2147483647) and
  in_range(length14(container))))

type element_type7

predicate in_range20(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq28 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y:int [bool_eq28(x, y)]. (((x = y) -> (bool_eq28(x,
  y) = true)) and ((not (x = y)) -> (bool_eq28(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq32 : element_type7, element_type7 -> bool

logic dummy48 : element_type7

type element_type__ref7 = { element_type__content7 : element_type7
}

function element_type__ref___18__projection(a: element_type__ref7) : element_type7 =
  (a).element_type__content7

axiom get__post_axiom3 :
  (forall container:us_rep10.
  (forall position:int [get3(container, position)].
  ((in_range19(position) and ((1 <= position) and
  (position <= (0 + length14(container))))) -> in_range20(get3(container,
  position)))))

logic capacity__function_guard : int, us_rep5 -> prop

axiom length__post_axiom11 :
  (forall container:capacity_range. forall container1:us_main_type5
  [length9({ us_split_discrs11 = {
  rec__dic_of_cont__my_fove__vector__capacity = container };
  us_split_fields11 = { rec__dic_of_cont__my_fove__vector = container1 } })].
  ((((of_int1(1) = true) -> (length9({ us_split_discrs11 = {
  rec__dic_of_cont__my_fove__vector__capacity = container };
  us_split_fields11 = { rec__dic_of_cont__my_fove__vector = container1 }
  }) <= to_rep2(container))) and ((not (of_int1(1) = true)) -> (length9({
  us_split_discrs11 = { rec__dic_of_cont__my_fove__vector__capacity =
  container }; us_split_fields11 = { rec__dic_of_cont__my_fove__vector =
  container1 } }) <= 2147483647))) and in_range1(length9({
  us_split_discrs11 = { rec__dic_of_cont__my_fove__vector__capacity =
  container }; us_split_fields11 = { rec__dic_of_cont__my_fove__vector =
  container1 } }))))

 (* File "a-cofove.ads", line 807, characters 0-0 *)
goal WP_parameter_def : (in_range(capacity) -> in_range(capacity))
