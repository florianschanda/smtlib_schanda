;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.6)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 64)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes ((t__ref 0)) (((mk_t__ref (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ((unsigned64__ref 0))
(((mk_unsigned64__ref (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref___projection ((a unsigned64__ref)) unsigned64
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_201 (_ BitVec 64))
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)) Bool true)

(declare-fun inrange64 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inrange64__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; inrange64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (bottom (_ BitVec 64))
  (range_size (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true) (dynamic_invariant bottom
     true true true)) (dynamic_invariant range_size true true true))
     (= (= (inrange64 var bottom range_size) true)
     (exists ((n (_ BitVec 64)))
     (and (and (bvule ((_ int2bv 64) 0) n) (bvule n range_size))
     (= var (bvadd bottom n)))))) :pattern ((inrange64 var bottom range_size)) )))

(declare-const var1 (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const var1_range_size (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const var2 (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const var2_range_size (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const res Bool)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort unsigned_64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (unsigned_64 unsigned_64) Bool)

(declare-const dummy1 unsigned_64)

(declare-datatypes ((unsigned_64__ref 0))
(((mk_unsigned_64__ref (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref___projection ((a unsigned_64__ref)) unsigned_64
  (unsigned_64__content a))

(declare-fun to_rep (unsigned_64) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) unsigned_64)

;; inversion_axiom
  (assert
  (forall ((x unsigned_64))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x unsigned_64)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_64)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

(define-fun dynamic_property ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (unsigned_64 unsigned_64) Bool)

(declare-const dummy2 unsigned_64)

(declare-datatypes ((t101b__ref 0))
(((mk_t101b__ref (t101b__content unsigned_64)))))
(define-fun t101b__ref___projection ((a t101b__ref)) unsigned_64 (t101b__content
                                                                 a))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))

(define-fun dynamic_property1 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (unsigned_64 unsigned_64) Bool)

(declare-const dummy3 unsigned_64)

(declare-datatypes ((t122b__ref 0))
(((mk_t122b__ref (t122b__content unsigned_64)))))
(define-fun t122b__ref___projection ((a t122b__ref)) unsigned_64 (t122b__content
                                                                 a))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 64))

(define-fun dynamic_property2 ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 64))

(declare-fun user_eq4 (unsigned_64 unsigned_64) Bool)

(declare-const dummy4 unsigned_64)

(declare-datatypes ((t131b__ref 0))
(((mk_t131b__ref (t131b__content unsigned_64)))))
(define-fun t131b__ref___projection ((a t131b__ref)) unsigned_64 (t131b__content
                                                                 a))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun dynamic_invariant1 ((temp___expr_183 (_ BitVec 64))
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)) Bool true)

(declare-const n (_ BitVec 64))

(declare-const n1 (_ BitVec 64))

(declare-const n2 (_ BitVec 64))

(declare-const n11 (_ BitVec 64))

(declare-const n21 (_ BitVec 64))

(declare-const n3 (_ BitVec 64))

(declare-const x86__rangesintersect__result Bool)

(declare-const x86__rangesintersect__B100b__res__assume Bool)

(declare-const temp___211 (_ BitVec 64))

(declare-const temp___208 (_ BitVec 64))

(declare-const temp___205 (_ BitVec 64))

(declare-const temp___204 (_ BitVec 64))

(declare-const o (_ BitVec 64))

(declare-const o1 (_ BitVec 64))

(declare-const o2 Bool)

(declare-const n4 (_ BitVec 64))

(declare-const n12 (_ BitVec 64))

(declare-const n22 (_ BitVec 64))

(declare-const n13 (_ BitVec 64))

(declare-const n23 (_ BitVec 64))

(declare-const n5 (_ BitVec 64))

(declare-const result (_ BitVec 64))

(declare-const n6 (_ BitVec 64))

(declare-const result1 (_ BitVec 64))

(declare-const n14 (_ BitVec 64))

(declare-const result2 (_ BitVec 64))

(declare-const n24 (_ BitVec 64))

(declare-const result3 (_ BitVec 64))

(declare-const n15 (_ BitVec 64))

(declare-const result4 (_ BitVec 64))

(declare-const n25 (_ BitVec 64))

(declare-const result5 (_ BitVec 64))

(declare-const n16 (_ BitVec 64))

(declare-const result6 (_ BitVec 64))

(declare-const n26 (_ BitVec 64))

(declare-const n7 (_ BitVec 64))

(declare-const n17 (_ BitVec 64))

(declare-const n27 (_ BitVec 64))

(declare-const result7 (_ BitVec 64))

(declare-const n8 (_ BitVec 64))

(declare-const result8 (_ BitVec 64))

(declare-const n18 (_ BitVec 64))

(declare-const result9 (_ BitVec 64))

(declare-const n28 (_ BitVec 64))

(declare-const result10 (_ BitVec 64))

(declare-const n19 (_ BitVec 64))

(declare-const result11 (_ BitVec 64))

(declare-const n29 (_ BitVec 64))

(declare-const result12 (_ BitVec 64))

(declare-const n110 (_ BitVec 64))

(declare-const result13 (_ BitVec 64))

(declare-const n210 (_ BitVec 64))

(declare-const n9 t__ref)

(declare-const n111 t__ref)

(declare-const n211 t__ref)

(declare-const n10 (_ BitVec 64))

(declare-const n112 (_ BitVec 64))

(declare-const n212 (_ BitVec 64))

(declare-const n20 t__ref)

(declare-const n113 t__ref)

(declare-const n213 t__ref)

(declare-const n30 (_ BitVec 64))

(declare-const n114 (_ BitVec 64))

(declare-const n214 (_ BitVec 64))

(declare-const n31 t__ref)

(declare-const n115 t__ref)

(declare-const n215 t__ref)

(declare-const n32 (_ BitVec 64))

(declare-const n116 (_ BitVec 64))

(declare-const n216 (_ BitVec 64))

(declare-const result14 t__ref)

(declare-const n117 (_ BitVec 64))

(declare-const n118 (_ BitVec 64))

(declare-const n217 (_ BitVec 64))

(declare-const n33 (_ BitVec 64))

(declare-const result15 t__ref)

(declare-const n218 (_ BitVec 64))

(declare-const result16 t__ref)

(declare-const n34 (_ BitVec 64))

(declare-const n219 (_ BitVec 64))

(declare-const n35 (_ BitVec 64))

(declare-const result17 t__ref)

(declare-const n220 (_ BitVec 64))

(declare-const result18 t__ref)

(declare-const n36 (_ BitVec 64))

(declare-const n221 t__ref)

(declare-const n37 t__ref)

(declare-const n222 (_ BitVec 64))

(declare-const n38 (_ BitVec 64))

(declare-const n223 t__ref)

(declare-const n39 t__ref)

(declare-const n224 (_ BitVec 64))

(declare-const n40 (_ BitVec 64))

(declare-const n225 t__ref)

(declare-const n41 t__ref)

(declare-const n226 (_ BitVec 64))

(declare-const n42 (_ BitVec 64))

(declare-const result19 t__ref)

(declare-const n119 (_ BitVec 64))

(declare-const n120 t__ref)

(declare-const n227 t__ref)

(declare-const n43 t__ref)

(declare-const n121 (_ BitVec 64))

(declare-const n228 (_ BitVec 64))

(declare-const n44 (_ BitVec 64))

(declare-const n122 t__ref)

(declare-const n229 t__ref)

(declare-const n45 t__ref)

(declare-const n123 (_ BitVec 64))

(declare-const n230 (_ BitVec 64))

(declare-const n46 (_ BitVec 64))

(declare-const n124 t__ref)

(declare-const n231 t__ref)

(declare-const n47 t__ref)

(declare-const n125 (_ BitVec 64))

(declare-const n232 (_ BitVec 64))

(declare-const n48 (_ BitVec 64))

(declare-const n126 t__ref)

(declare-const n233 t__ref)

(declare-const n49 t__ref)

(declare-const n127 (_ BitVec 64))

(declare-const n234 (_ BitVec 64))

(declare-const n50 (_ BitVec 64))

(declare-const n51 t__ref)

(declare-const n128 t__ref)

(declare-const n235 t__ref)

(declare-const n129 t__ref)

(declare-const n236 t__ref)

(declare-const n52 t__ref)

(declare-const n53 (_ BitVec 64))

(declare-const n130 (_ BitVec 64))

(declare-const n237 (_ BitVec 64))

(declare-const n131 (_ BitVec 64))

(declare-const n238 (_ BitVec 64))

(declare-const n54 (_ BitVec 64))

(declare-const result20 bool__ref)

(declare-const x86__rangesintersect__result1 Bool)

(declare-const x86__rangesintersect__result2 bool__ref)

(declare-const x86__rangesintersect__result3 Bool)

(declare-const n55 t__ref)

(declare-const n132 t__ref)

(declare-const n239 t__ref)

(declare-const n133 t__ref)

(declare-const n240 t__ref)

(declare-const n56 t__ref)

(declare-const x86__rangesintersect__result4 bool__ref)

(declare-const n57 (_ BitVec 64))

(declare-const n134 (_ BitVec 64))

(declare-const n241 (_ BitVec 64))

(declare-const n135 (_ BitVec 64))

(declare-const n242 (_ BitVec 64))

(declare-const n58 (_ BitVec 64))

(declare-const x86__rangesintersect__result5 Bool)

(define-fun result21 () t__ref (mk_t__ref result6))

(define-fun result22 () t__ref (mk_t__ref result5))

(define-fun result23 () t__ref (mk_t__ref result4))

(define-fun result24 () t__ref (mk_t__ref result3))

(define-fun result25 () t__ref (mk_t__ref result2))

(define-fun result26 () t__ref (mk_t__ref result1))

(define-fun result27 () t__ref (mk_t__ref result))

(define-fun n59 () t__ref (mk_t__ref n3))

(define-fun n243 () t__ref (mk_t__ref n21))

(define-fun n136 () t__ref (mk_t__ref n11))

(define-fun n244 () t__ref (mk_t__ref n2))

(define-fun n137 () t__ref (mk_t__ref n1))

(define-fun n60 () t__ref (mk_t__ref n))

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert true)

;; H
  (assert
  (bvule var1_range_size (bvsub ((_ int2bv 64) 18446744073709551615)
  var2_range_size)))

;; H
  (assert
  (and
  (= x86__rangesintersect__B100b__res__assume (inrange64 var1
                                              (bvsub var2 var1_range_size)
                                              (bvadd var1_range_size
                                              var2_range_size)))
  (= (= x86__rangesintersect__B100b__res__assume true)
  (exists ((n61 (_ BitVec 64)))
  (and
  (and (bvule ((_ int2bv 64) 0) n61)
  (bvule n61 (bvadd var1_range_size var2_range_size)))
  (= var1 (bvadd (bvsub var2 var1_range_size) n61)))))))

;; H
  (assert (= x86__rangesintersect__B100b__res__assume res))

;; H
  (assert (not (= res true)))

;; H
  (assert (= result14 n136))

;; H
  (assert (= n117 ((_ int2bv 64) 0)))

;; H
  (assert (bvule ((_ int2bv 64) 0) n117))

;; H
  (assert (bvule n117 var1_range_size))

;; H
  (assert
  (=> (not (= n118 ((_ int2bv 64) 0)))
  (forall ((i (_ BitVec 64)))
  (=>
  (and (bvule ((_ int2bv 64) 0) i) (bvule i (bvsub n118 ((_ int2bv 64) 1))))
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (not (= (bvadd var1 i) (bvadd var2 j)))))))))

;; H
  (assert
  (and
  (=> (bvule ((_ int2bv 64) 0) var1_range_size) (dynamic_property1
  ((_ int2bv 64) 0) var1_range_size n118))
  (and (bvule ((_ int2bv 64) 0) n118) (bvule n118 var1_range_size))))

;; H
  (assert (= result15 (mk_t__ref n217)))

;; H
  (assert (= n218 ((_ int2bv 64) 0)))

;; H
  (assert
  (=> (and (bvule ((_ int2bv 64) 0) n218) (bvule n218 var2_range_size))
  (and
  (and (= temp___205 n33)
  (and (= temp___204 n218)
  (and
  (and (= o (bvadd n218 (bvsub var1_range_size n118)))
  (and (= result16 (mk_t__ref n33)) (= n34 o)))
  (and
  (and (bvule ((_ int2bv 64) 0) n34)
  (bvule n34 (bvadd var1_range_size var2_range_size)))
  (and (not (= var1 (bvadd (bvsub var2 var1_range_size) n34)))
  (and (not (= (bvadd var1 n118) (bvadd var2 n218)))
  (and
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j n219))
  (not (= (bvadd var1 n118) (bvadd var2 j)))))
  (and
  (and
  (=> (bvule ((_ int2bv 64) 0) var2_range_size) (dynamic_property2
  ((_ int2bv 64) 0) var2_range_size n219))
  (and (bvule ((_ int2bv 64) 0) n219) (bvule n219 var2_range_size)))
  (= n219 var2_range_size)))))))))
  (and (and (= n39 (mk_t__ref n35)) (= n223 (mk_t__ref n219)))
  (and (= n40 n35) (= n224 n219))))))

;; H
  (assert
  (=> (and (bvule ((_ int2bv 64) 0) n218) (bvule n218 var2_range_size))
  (= n41 n39)))

;; H
  (assert
  (=> (and (bvule ((_ int2bv 64) 0) n218) (bvule n218 var2_range_size))
  (= n225 n223)))

;; H
  (assert
  (=> (and (bvule ((_ int2bv 64) 0) n218) (bvule n218 var2_range_size))
  (= n42 n40)))

;; H
  (assert
  (=> (and (bvule ((_ int2bv 64) 0) n218) (bvule n218 var2_range_size))
  (= n226 n224)))

;; H
  (assert
  (=> (not (and (bvule ((_ int2bv 64) 0) n218) (bvule n218 var2_range_size)))
  (= n41 (mk_t__ref n33))))

;; H
  (assert
  (=> (not (and (bvule ((_ int2bv 64) 0) n218) (bvule n218 var2_range_size)))
  (= n225 (mk_t__ref n218))))

;; H
  (assert
  (=> (not (and (bvule ((_ int2bv 64) 0) n218) (bvule n218 var2_range_size)))
  (= n42 n33)))

;; H
  (assert
  (=> (not (and (bvule ((_ int2bv 64) 0) n218) (bvule n218 var2_range_size)))
  (= n226 n218)))

;; H
  (assert
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (not (= (bvadd var1 n118) (bvadd var2 j))))))

;; H
  (assert
  (=> (not (= n118 ((_ int2bv 64) 0)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i n118))
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (not (= (bvadd var1 i) (bvadd var2 j)))))))))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) i) (bvule i n118))
  (forall ((j (_ BitVec 64)))
  (=> (and (bvule ((_ int2bv 64) 0) j) (bvule j var2_range_size))
  (not (= (bvadd var1 i) (bvadd var2 j))))))))

;; H
  (assert (not (= n118 var1_range_size)))

;; H
  (assert (= result19 (mk_t__ref n118)))

;; H
  (assert (= n119 (bvadd n118 ((_ int2bv 64) 1))))

;; H
  (assert (= n43 n41))

;; H
  (assert (= n227 n225))

;; H
  (assert (= n120 (mk_t__ref n119)))

;; H
  (assert (= n44 n42))

;; H
  (assert (= n228 n226))

;; H
  (assert (= n121 n119))

;; H
  (assert (not (= (t__content n120) ((_ int2bv 64) 0))))

(declare-const i (_ BitVec 64))

;; H
  (assert (bvule ((_ int2bv 64) 0) i))

;; H
  (assert (bvule i (bvsub (t__content n120) ((_ int2bv 64) 1))))

(declare-const j (_ BitVec 64))

;; H
  (assert (bvule ((_ int2bv 64) 0) j))

;; H
  (assert (bvule j var2_range_size))

(assert
;; WP_parameter_def
 ;; File "x86.ads", line 19, characters 0-0
  (not (not (= (bvadd var1 i) (bvadd var2 j)))))
(check-sat)
(exit)
