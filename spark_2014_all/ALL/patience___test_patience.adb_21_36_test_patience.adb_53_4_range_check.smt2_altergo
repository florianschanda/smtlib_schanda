(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type card

predicate in_range4(x: int) = ((1 <= x) and (x <= 52))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : card, card -> bool

logic dummy5 : card

type card__ref = { card__content : card
}

function card__ref___projection(a: card__ref) : card = (a).card__content

logic to_rep2 : card -> int

logic of_rep2 : int -> card

axiom inversion_axiom2 :
  (forall x:card [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:card [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (int,card) farray
}

logic slide1 : (int,card) farray, int, int -> (int,card) farray

axiom slide_eq1 :
  (forall a:(int,card) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,card) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,card) farray, int, int, (int,card) farray, int,
  int -> (int,card) farray

axiom concat_def1 :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : card, int -> (int,card) farray

axiom singleton_def1 :
  (forall v:card.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq8 : (int,card) farray, int, int, (int,card) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,card) farray. forall a__first:int. forall a__last:int.
  forall b:(int,card) farray. forall b__first:int. forall b__last:int
  [bool_eq8(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_151:int. ((((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) and
  (to_rep2((a[temp___idx_151])) = to_rep2((b[((b__first - a__first) + temp___idx_151)])))) or
  (not ((a__first <= temp___idx_151) and (temp___idx_151 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep2((a[temp___idx_151])) = to_rep2((b[((b__first - a__first) + temp___idx_151)]))))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep2((a[temp___idx_151])) = to_rep2((b[((b__first - a__first) + temp___idx_151)])))))))))

logic compare1 : (int,card) farray, int, int, (int,card) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq8(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq8(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq8(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,card) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,card) farray = (a).elts1

function of_array1(a: (int,card) farray, f: int, l: int) : us_t1 = { elts1 =
  a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,card) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,card) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,card) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,card) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,card) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,card) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq8((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy6 : (int,card) farray

logic dummy7 : t1

type cardstack__ref = { cardstack__content : us_t1
}

function cardstack__ref___projection(a: cardstack__ref) : us_t1 =
  (a).cardstack__content

type cardindex

predicate in_range5(x: int) = (((-1) <= x) and (x <= 100))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : cardindex, cardindex -> bool

logic dummy8 : cardindex

type cardindex__ref = { cardindex__content : cardindex
}

function cardindex__ref___projection(a: cardindex__ref) : cardindex =
  (a).cardindex__content

logic to_rep3 : cardindex -> int

logic of_rep3 : int -> cardindex

axiom inversion_axiom3 :
  (forall x:cardindex [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:cardindex [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type tcardarrayD1

predicate in_range6(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : tcardarrayD1, tcardarrayD1 -> bool

logic dummy9 : tcardarrayD1

type tcardarrayD1__ref = { tcardarrayD1__content : tcardarrayD1
}

function tcardarrayD1__ref___projection(a: tcardarrayD1__ref) : tcardarrayD1 =
  (a).tcardarrayD1__content

type tindexarrayD1

predicate in_range7(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : tindexarrayD1, tindexarrayD1 -> bool

logic dummy10 : tindexarrayD1

type tindexarrayD1__ref = { tindexarrayD1__content : tindexarrayD1
}

function tindexarrayD1__ref___projection(a: tindexarrayD1__ref) : tindexarrayD1 =
  (a).tindexarrayD1__content

type map__ref2 = { map__content2 : (int,cardindex) farray
}

logic slide2 : (int,cardindex) farray, int, int -> (int,cardindex) farray

axiom slide_eq2 :
  (forall a:(int,cardindex) farray.
  (forall first4:int [slide2(a, first4, first4)]. (slide2(a, first4,
  first4) = a)))

axiom slide_def2 :
  (forall a:(int,cardindex) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,cardindex) farray, int, int, (int,cardindex) farray,
  int, int -> (int,cardindex) farray

axiom concat_def2 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : cardindex, int -> (int,cardindex) farray

axiom singleton_def2 :
  (forall v:cardindex.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq13 : (int,cardindex) farray, int, int, (int,cardindex) farray,
  int, int -> bool

axiom bool_eq_def10 :
  (forall a:(int,cardindex) farray. forall a__first:int. forall a__last:int.
  forall b:(int,cardindex) farray. forall b__first:int. forall b__last:int
  [bool_eq13(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_152:int. ((((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) and
  (to_rep3((a[temp___idx_152])) = to_rep3((b[((b__first - a__first) + temp___idx_152)])))) or
  (not ((a__first <= temp___idx_152) and (temp___idx_152 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) ->
  (to_rep3((a[temp___idx_152])) = to_rep3((b[((b__first - a__first) + temp___idx_152)]))))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) ->
  (to_rep3((a[temp___idx_152])) = to_rep3((b[((b__first - a__first) + temp___idx_152)])))))))))

logic compare2 : (int,cardindex) farray, int, int, (int,cardindex) farray,
  int, int -> int

axiom compare_def_eq2 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq13(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt2 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((compare2(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq13(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep3((a[(i + 1)])) <  to_rep3((b[(j + 1)]))))))))))))

axiom compare_def_gt2 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare2(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare2(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq13(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep3((b[(i + 1)])) <  to_rep3((a[(j + 1)]))))))))))))

logic dummy11 : (int,cardindex) farray

logic value__size2 : int

logic object__size2 : (int,cardindex) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,cardindex) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,cardindex) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,cardindex) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,cardindex) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,cardindex) farray. (0 <= object__alignment2(a)))

logic user_eq9 : (int,cardindex) farray, (int,cardindex) farray -> bool

type map__ref3 = { map__content3 : (int,(int,cardindex) farray) farray
}

logic slide3 : (int,(int,cardindex) farray) farray, int,
  int -> (int,(int,cardindex) farray) farray

axiom slide_eq3 :
  (forall a:(int,(int,cardindex) farray) farray.
  (forall first4:int [slide3(a, first4, first4)]. (slide3(a, first4,
  first4) = a)))

axiom slide_def3 :
  (forall a:(int,(int,cardindex) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,(int,cardindex) farray) farray, int, int,
  (int,(int,cardindex) farray) farray, int,
  int -> (int,(int,cardindex) farray) farray

axiom concat_def3 :
  (forall a:(int,(int,cardindex) farray) farray.
  forall b:(int,(int,cardindex) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : (int,cardindex) farray,
  int -> (int,(int,cardindex) farray) farray

axiom singleton_def3 :
  (forall v:(int,cardindex) farray.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq14 : (int,(int,cardindex) farray) farray, int, int,
  (int,(int,cardindex) farray) farray, int, int -> bool

axiom bool_eq_def11 :
  (forall a:(int,(int,cardindex) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,cardindex) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq14(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_153:int. ((((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) and (bool_eq13((a[temp___idx_153]), 0, 99,
  (b[((b__first - a__first) + temp___idx_153)]), 0, 99) = true)) or
  (not ((a__first <= temp___idx_153) and (temp___idx_153 <= a__last)))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) -> (bool_eq13((a[temp___idx_153]), 0, 99,
  (b[((b__first - a__first) + temp___idx_153)]), 0, 99) = true))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,(int,cardindex) farray) farray.
  forall b:(int,(int,cardindex) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_153:int. (((a__first <= temp___idx_153) and
  (temp___idx_153 <= a__last)) -> (bool_eq13((a[temp___idx_153]), 0, 99,
  (b[((b__first - a__first) + temp___idx_153)]), 0, 99) = true)))))))

logic dummy12 : (int,card) farray

logic value__size3 : int

logic object__size3 : (int,card) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,card) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,card) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,card) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,card) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,card) farray. (0 <= object__alignment3(a)))

logic user_eq10 : (int,card) farray, (int,card) farray -> bool

logic dummy13 : (int,(int,cardindex) farray) farray

logic value__size4 : int

logic object__size4 : (int,(int,cardindex) farray) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,(int,cardindex) farray) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,(int,cardindex) farray) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,(int,cardindex) farray) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,(int,cardindex) farray) farray.
  (0 <= object__component__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,(int,cardindex) farray) farray.
  (0 <= object__alignment4(a)))

logic user_eq11 : (int,(int,cardindex) farray) farray,
  (int,(int,cardindex) farray) farray -> bool

type us_split_fields = { rec__patience__state__numelts : cardindex;
rec__patience__state__values : (int,card) farray;
rec__patience__state__numstacks : cardindex; rec__patience__state__stacksizes
: (int,cardindex) farray; rec__patience__state__stacks :
(int,(int,cardindex) farray) farray; rec__patience__state__posstack :
(int,cardindex) farray; rec__patience__state__posheight :
(int,cardindex) farray; rec__patience__state__preds : (int,cardindex) farray
}

function us_split_fields_NumElts__projection(a: us_split_fields) : cardindex =
  (a).rec__patience__state__numelts

function us_split_fields_Values__projection(a: us_split_fields) : (int,card) farray =
  (a).rec__patience__state__values

function us_split_fields_NumStacks__projection(a: us_split_fields) : cardindex =
  (a).rec__patience__state__numstacks

function us_split_fields_StackSizes__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__stacksizes

function us_split_fields_Stacks__projection(a: us_split_fields) : (int,(int,cardindex) farray) farray =
  (a).rec__patience__state__stacks

function us_split_fields_PosStack__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__posstack

function us_split_fields_PosHeight__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__posheight

function us_split_fields_Preds__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__preds

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep_3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq15 : us_rep, us_rep -> bool

axiom bool_eq_def12 :
  (forall a:us_rep. forall b:us_rep [bool_eq15(a, b)].
  ((((((((((to_rep3(((a).us_split_fields1).rec__patience__state__numelts) = to_rep3(((b).us_split_fields1).rec__patience__state__numelts)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__values, 0, 99,
  ((b).us_split_fields1).rec__patience__state__values, 0, 99) = true)) and
  (to_rep3(((a).us_split_fields1).rec__patience__state__numstacks) = to_rep3(((b).us_split_fields1).rec__patience__state__numstacks))) and
  (bool_eq13(((a).us_split_fields1).rec__patience__state__stacksizes, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacksizes, 0,
  99) = true)) and
  (bool_eq14(((a).us_split_fields1).rec__patience__state__stacks, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacks, 0, 99) = true)) and
  (bool_eq13(((a).us_split_fields1).rec__patience__state__posstack, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posstack, 0, 99) = true)) and
  (bool_eq13(((a).us_split_fields1).rec__patience__state__posheight, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posheight, 0, 99) = true)) and
  (bool_eq13(((a).us_split_fields1).rec__patience__state__preds, 0, 99,
  ((b).us_split_fields1).rec__patience__state__preds, 0, 99) = true)) ->
  (bool_eq15(a, b) = true)) and
  ((not ((((((((to_rep3(((a).us_split_fields1).rec__patience__state__numelts) = to_rep3(((b).us_split_fields1).rec__patience__state__numelts)) and
  (bool_eq8(((a).us_split_fields1).rec__patience__state__values, 0, 99,
  ((b).us_split_fields1).rec__patience__state__values, 0, 99) = true)) and
  (to_rep3(((a).us_split_fields1).rec__patience__state__numstacks) = to_rep3(((b).us_split_fields1).rec__patience__state__numstacks))) and
  (bool_eq13(((a).us_split_fields1).rec__patience__state__stacksizes, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacksizes, 0,
  99) = true)) and
  (bool_eq14(((a).us_split_fields1).rec__patience__state__stacks, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacks, 0, 99) = true)) and
  (bool_eq13(((a).us_split_fields1).rec__patience__state__posstack, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posstack, 0, 99) = true)) and
  (bool_eq13(((a).us_split_fields1).rec__patience__state__posheight, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posheight, 0, 99) = true)) and
  (bool_eq13(((a).us_split_fields1).rec__patience__state__preds, 0, 99,
  ((b).us_split_fields1).rec__patience__state__preds, 0, 99) = true))) ->
  (bool_eq15(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:cardindex. forall a1:(int,card) farray. forall a2:cardindex.
  forall a3:(int,cardindex) farray.
  forall a4:(int,(int,cardindex) farray) farray.
  forall a5:(int,cardindex) farray. forall a6:(int,cardindex) farray.
  forall a7:(int,cardindex) farray. (0 <= object__size5({ us_split_fields1 =
  { rec__patience__state__numelts = a; rec__patience__state__values = a1;
  rec__patience__state__numstacks = a2; rec__patience__state__stacksizes =
  a3; rec__patience__state__stacks = a4; rec__patience__state__posstack = a5;
  rec__patience__state__posheight = a6; rec__patience__state__preds = a7 }
  })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:cardindex. forall a1:(int,card) farray. forall a2:cardindex.
  forall a3:(int,cardindex) farray.
  forall a4:(int,(int,cardindex) farray) farray.
  forall a5:(int,cardindex) farray. forall a6:(int,cardindex) farray.
  forall a7:(int,cardindex) farray. (0 <= object__alignment5({
  us_split_fields1 = { rec__patience__state__numelts = a;
  rec__patience__state__values = a1; rec__patience__state__numstacks = a2;
  rec__patience__state__stacksizes = a3; rec__patience__state__stacks = a4;
  rec__patience__state__posstack = a5; rec__patience__state__posheight = a6;
  rec__patience__state__preds = a7 } })))

logic patience__state__numelts__first__bit : int

logic patience__state__numelts__last__bit : int

logic patience__state__numelts__position : int

axiom patience__state__numelts__first__bit_axiom :
  (0 <= patience__state__numelts__first__bit)

axiom patience__state__numelts__last__bit_axiom :
  (patience__state__numelts__first__bit <  patience__state__numelts__last__bit)

axiom patience__state__numelts__position_axiom :
  (0 <= patience__state__numelts__position)

logic patience__state__values__first__bit : int

logic patience__state__values__last__bit : int

logic patience__state__values__position : int

axiom patience__state__values__first__bit_axiom :
  (0 <= patience__state__values__first__bit)

axiom patience__state__values__last__bit_axiom :
  (patience__state__values__first__bit <  patience__state__values__last__bit)

axiom patience__state__values__position_axiom :
  (0 <= patience__state__values__position)

logic patience__state__numstacks__first__bit : int

logic patience__state__numstacks__last__bit : int

logic patience__state__numstacks__position : int

axiom patience__state__numstacks__first__bit_axiom :
  (0 <= patience__state__numstacks__first__bit)

axiom patience__state__numstacks__last__bit_axiom :
  (patience__state__numstacks__first__bit <  patience__state__numstacks__last__bit)

axiom patience__state__numstacks__position_axiom :
  (0 <= patience__state__numstacks__position)

logic patience__state__stacksizes__first__bit : int

logic patience__state__stacksizes__last__bit : int

logic patience__state__stacksizes__position : int

axiom patience__state__stacksizes__first__bit_axiom :
  (0 <= patience__state__stacksizes__first__bit)

axiom patience__state__stacksizes__last__bit_axiom :
  (patience__state__stacksizes__first__bit <  patience__state__stacksizes__last__bit)

axiom patience__state__stacksizes__position_axiom :
  (0 <= patience__state__stacksizes__position)

logic patience__state__stacks__first__bit : int

logic patience__state__stacks__last__bit : int

logic patience__state__stacks__position : int

axiom patience__state__stacks__first__bit_axiom :
  (0 <= patience__state__stacks__first__bit)

axiom patience__state__stacks__last__bit_axiom :
  (patience__state__stacks__first__bit <  patience__state__stacks__last__bit)

axiom patience__state__stacks__position_axiom :
  (0 <= patience__state__stacks__position)

logic patience__state__posstack__first__bit : int

logic patience__state__posstack__last__bit : int

logic patience__state__posstack__position : int

axiom patience__state__posstack__first__bit_axiom :
  (0 <= patience__state__posstack__first__bit)

axiom patience__state__posstack__last__bit_axiom :
  (patience__state__posstack__first__bit <  patience__state__posstack__last__bit)

axiom patience__state__posstack__position_axiom :
  (0 <= patience__state__posstack__position)

logic patience__state__posheight__first__bit : int

logic patience__state__posheight__last__bit : int

logic patience__state__posheight__position : int

axiom patience__state__posheight__first__bit_axiom :
  (0 <= patience__state__posheight__first__bit)

axiom patience__state__posheight__last__bit_axiom :
  (patience__state__posheight__first__bit <  patience__state__posheight__last__bit)

axiom patience__state__posheight__position_axiom :
  (0 <= patience__state__posheight__position)

logic patience__state__preds__first__bit : int

logic patience__state__preds__last__bit : int

logic patience__state__preds__position : int

axiom patience__state__preds__first__bit_axiom :
  (0 <= patience__state__preds__first__bit)

axiom patience__state__preds__last__bit_axiom :
  (patience__state__preds__first__bit <  patience__state__preds__last__bit)

axiom patience__state__preds__position_axiom :
  (0 <= patience__state__preds__position)

logic user_eq12 : us_rep, us_rep -> bool

logic dummy14 : cardindex

logic dummy15 : (int,card) farray

logic dummy16 : cardindex

logic dummy17 : (int,cardindex) farray

logic dummy18 : (int,(int,cardindex) farray) farray

logic dummy19 : (int,cardindex) farray

logic dummy20 : (int,cardindex) farray

logic dummy21 : (int,cardindex) farray

type state__ref = { state__content : us_rep
}

function state__ref___projection(a: state__ref) : us_rep = (a).state__content

logic inv : us_rep -> bool

logic inv__function_guard : bool, us_rep -> prop

logic playgame : us_t1 -> us_rep

logic playgame__function_guard : us_rep, us_t1 -> prop

type t48b

predicate in_range8(x: int) = ((1 <= x) and (x <= 7))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq13 : t48b, t48b -> bool

logic dummy22 : t48b

type t48b__ref = { t48b__content : t48b
}

function t48b__ref___projection(a: t48b__ref) : t48b = (a).t48b__content

logic input__first : integer

logic input__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c60b : cardindex

logic c60b1 : (int,card) farray

logic c60b2 : cardindex

logic c60b3 : (int,cardindex) farray

logic c60b4 : (int,(int,cardindex) farray) farray

logic c60b5 : (int,cardindex) farray

logic c60b6 : (int,cardindex) farray

logic c60b7 : (int,cardindex) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic test_patience__input__aggregate_def : int, int, int, int, int, int,
  int -> (int,card) farray

axiom def_axiom :
  (forall temp___765:int. forall temp___766:int. forall temp___767:int.
  forall temp___768:int. forall temp___769:int. forall temp___770:int.
  forall temp___771:int.
  ((((((((test_patience__input__aggregate_def(temp___765, temp___766,
  temp___767, temp___768, temp___769, temp___770,
  temp___771)[1]) = of_rep2(temp___765)) and
  ((test_patience__input__aggregate_def(temp___765, temp___766, temp___767,
  temp___768, temp___769, temp___770,
  temp___771)[2]) = of_rep2(temp___766))) and
  ((test_patience__input__aggregate_def(temp___765, temp___766, temp___767,
  temp___768, temp___769, temp___770,
  temp___771)[3]) = of_rep2(temp___767))) and
  ((test_patience__input__aggregate_def(temp___765, temp___766, temp___767,
  temp___768, temp___769, temp___770,
  temp___771)[4]) = of_rep2(temp___768))) and
  ((test_patience__input__aggregate_def(temp___765, temp___766, temp___767,
  temp___768, temp___769, temp___770,
  temp___771)[5]) = of_rep2(temp___769))) and
  ((test_patience__input__aggregate_def(temp___765, temp___766, temp___767,
  temp___768, temp___769, temp___770,
  temp___771)[6]) = of_rep2(temp___770))) and
  ((test_patience__input__aggregate_def(temp___765, temp___766, temp___767,
  temp___768, temp___769, temp___770,
  temp___771)[7]) = of_rep2(temp___771))))

logic temp___String_Literal_776 : unit -> (int,character) farray

axiom temp___String_Literal_776__def_axiom :
  (((((((((((((((((((((((to_rep((temp___String_Literal_776(void)[1])) = 84) and
  (to_rep((temp___String_Literal_776(void)[2])) = 101)) and
  (to_rep((temp___String_Literal_776(void)[3])) = 115)) and
  (to_rep((temp___String_Literal_776(void)[4])) = 116)) and
  (to_rep((temp___String_Literal_776(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_776(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_776(void)[7])) = 102)) and
  (to_rep((temp___String_Literal_776(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_776(void)[9])) = 97)) and
  (to_rep((temp___String_Literal_776(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_776(void)[11])) = 112)) and
  (to_rep((temp___String_Literal_776(void)[12])) = 97)) and
  (to_rep((temp___String_Literal_776(void)[13])) = 116)) and
  (to_rep((temp___String_Literal_776(void)[14])) = 105)) and
  (to_rep((temp___String_Literal_776(void)[15])) = 101)) and
  (to_rep((temp___String_Literal_776(void)[16])) = 110)) and
  (to_rep((temp___String_Literal_776(void)[17])) = 99)) and
  (to_rep((temp___String_Literal_776(void)[18])) = 101)) and
  (to_rep((temp___String_Literal_776(void)[19])) = 32)) and
  (to_rep((temp___String_Literal_776(void)[20])) = 103)) and
  (to_rep((temp___String_Literal_776(void)[21])) = 97)) and
  (to_rep((temp___String_Literal_776(void)[22])) = 109)) and
  (to_rep((temp___String_Literal_776(void)[23])) = 101))

logic temp___String_Literal_777 : unit -> (int,character) farray

axiom temp___String_Literal_777__def_axiom :
  ((((((((to_rep((temp___String_Literal_777(void)[1])) = 45) and
  (to_rep((temp___String_Literal_777(void)[2])) = 45)) and
  (to_rep((temp___String_Literal_777(void)[3])) = 45)) and
  (to_rep((temp___String_Literal_777(void)[4])) = 45)) and
  (to_rep((temp___String_Literal_777(void)[5])) = 45)) and
  (to_rep((temp___String_Literal_777(void)[6])) = 45)) and
  (to_rep((temp___String_Literal_777(void)[7])) = 45)) and
  (to_rep((temp___String_Literal_777(void)[8])) = 45))

logic temp___String_Literal_778 : unit -> (int,character) farray

axiom temp___String_Literal_778__def_axiom :
  (((((((((((((((((to_rep((temp___String_Literal_778(void)[1])) = 67) and
  (to_rep((temp___String_Literal_778(void)[2])) = 97)) and
  (to_rep((temp___String_Literal_778(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_778(void)[4])) = 100)) and
  (to_rep((temp___String_Literal_778(void)[5])) = 83)) and
  (to_rep((temp___String_Literal_778(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_778(void)[7])) = 97)) and
  (to_rep((temp___String_Literal_778(void)[8])) = 99)) and
  (to_rep((temp___String_Literal_778(void)[9])) = 107)) and
  (to_rep((temp___String_Literal_778(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_778(void)[11])) = 40)) and
  (to_rep((temp___String_Literal_778(void)[12])) = 102)) and
  (to_rep((temp___String_Literal_778(void)[13])) = 105)) and
  (to_rep((temp___String_Literal_778(void)[14])) = 114)) and
  (to_rep((temp___String_Literal_778(void)[15])) = 115)) and
  (to_rep((temp___String_Literal_778(void)[16])) = 116)) and
  (to_rep((temp___String_Literal_778(void)[17])) = 61))

logic temp___String_Literal_781 : unit -> (int,character) farray

axiom temp___String_Literal_781__def_axiom :
  ((((to_rep((temp___String_Literal_781(void)[1])) = 41) and
  (to_rep((temp___String_Literal_781(void)[2])) = 32)) and
  (to_rep((temp___String_Literal_781(void)[3])) = 61)) and
  (to_rep((temp___String_Literal_781(void)[4])) = 32))

logic temp___String_Literal_784 : unit -> (int,character) farray

axiom temp___String_Literal_784__def_axiom :
  (to_rep((temp___String_Literal_784(void)[1])) = 32)

logic temp___String_Literal_789 : unit -> (int,character) farray

axiom temp___String_Literal_789__def_axiom : true

logic temp___String_Literal_790 : unit -> (int,character) farray

axiom temp___String_Literal_790__def_axiom :
  ((((((((to_rep((temp___String_Literal_790(void)[1])) = 45) and
  (to_rep((temp___String_Literal_790(void)[2])) = 45)) and
  (to_rep((temp___String_Literal_790(void)[3])) = 45)) and
  (to_rep((temp___String_Literal_790(void)[4])) = 45)) and
  (to_rep((temp___String_Literal_790(void)[5])) = 45)) and
  (to_rep((temp___String_Literal_790(void)[6])) = 45)) and
  (to_rep((temp___String_Literal_790(void)[7])) = 45)) and
  (to_rep((temp___String_Literal_790(void)[8])) = 45))

logic temp___String_Literal_792 : unit -> (int,character) farray

axiom temp___String_Literal_792__def_axiom :
  ((((((((to_rep((temp___String_Literal_792(void)[1])) = 45) and
  (to_rep((temp___String_Literal_792(void)[2])) = 45)) and
  (to_rep((temp___String_Literal_792(void)[3])) = 45)) and
  (to_rep((temp___String_Literal_792(void)[4])) = 45)) and
  (to_rep((temp___String_Literal_792(void)[5])) = 45)) and
  (to_rep((temp___String_Literal_792(void)[6])) = 45)) and
  (to_rep((temp___String_Literal_792(void)[7])) = 45)) and
  (to_rep((temp___String_Literal_792(void)[8])) = 45))

logic temp___String_Literal_793 : unit -> (int,character) farray

axiom temp___String_Literal_793__def_axiom :
  (((((((((((((((((to_rep((temp___String_Literal_793(void)[1])) = 78) and
  (to_rep((temp___String_Literal_793(void)[2])) = 117)) and
  (to_rep((temp___String_Literal_793(void)[3])) = 109)) and
  (to_rep((temp___String_Literal_793(void)[4])) = 98)) and
  (to_rep((temp___String_Literal_793(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_793(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_793(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_793(void)[8])) = 111)) and
  (to_rep((temp___String_Literal_793(void)[9])) = 102)) and
  (to_rep((temp___String_Literal_793(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_793(void)[11])) = 101)) and
  (to_rep((temp___String_Literal_793(void)[12])) = 108)) and
  (to_rep((temp___String_Literal_793(void)[13])) = 116)) and
  (to_rep((temp___String_Literal_793(void)[14])) = 115)) and
  (to_rep((temp___String_Literal_793(void)[15])) = 32)) and
  (to_rep((temp___String_Literal_793(void)[16])) = 61)) and
  (to_rep((temp___String_Literal_793(void)[17])) = 32))

logic temp___String_Literal_796 : unit -> (int,character) farray

axiom temp___String_Literal_796__def_axiom :
  (((((((((((((to_rep((temp___String_Literal_796(void)[1])) = 67) and
  (to_rep((temp___String_Literal_796(void)[2])) = 97)) and
  (to_rep((temp___String_Literal_796(void)[3])) = 114)) and
  (to_rep((temp___String_Literal_796(void)[4])) = 100)) and
  (to_rep((temp___String_Literal_796(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_796(void)[6])) = 118)) and
  (to_rep((temp___String_Literal_796(void)[7])) = 97)) and
  (to_rep((temp___String_Literal_796(void)[8])) = 108)) and
  (to_rep((temp___String_Literal_796(void)[9])) = 117)) and
  (to_rep((temp___String_Literal_796(void)[10])) = 101)) and
  (to_rep((temp___String_Literal_796(void)[11])) = 115)) and
  (to_rep((temp___String_Literal_796(void)[12])) = 32)) and
  (to_rep((temp___String_Literal_796(void)[13])) = 61))

logic temp___String_Literal_797 : unit -> (int,character) farray

axiom temp___String_Literal_797__def_axiom :
  (to_rep((temp___String_Literal_797(void)[1])) = 32)

logic temp___String_Literal_803 : unit -> (int,character) farray

axiom temp___String_Literal_803__def_axiom : true

logic temp___String_Literal_804 : unit -> (int,character) farray

axiom temp___String_Literal_804__def_axiom :
  (((((((((((((((((((to_rep((temp___String_Literal_804(void)[1])) = 78) and
  (to_rep((temp___String_Literal_804(void)[2])) = 117)) and
  (to_rep((temp___String_Literal_804(void)[3])) = 109)) and
  (to_rep((temp___String_Literal_804(void)[4])) = 98)) and
  (to_rep((temp___String_Literal_804(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_804(void)[6])) = 114)) and
  (to_rep((temp___String_Literal_804(void)[7])) = 32)) and
  (to_rep((temp___String_Literal_804(void)[8])) = 111)) and
  (to_rep((temp___String_Literal_804(void)[9])) = 102)) and
  (to_rep((temp___String_Literal_804(void)[10])) = 32)) and
  (to_rep((temp___String_Literal_804(void)[11])) = 115)) and
  (to_rep((temp___String_Literal_804(void)[12])) = 116)) and
  (to_rep((temp___String_Literal_804(void)[13])) = 97)) and
  (to_rep((temp___String_Literal_804(void)[14])) = 99)) and
  (to_rep((temp___String_Literal_804(void)[15])) = 107)) and
  (to_rep((temp___String_Literal_804(void)[16])) = 115)) and
  (to_rep((temp___String_Literal_804(void)[17])) = 32)) and
  (to_rep((temp___String_Literal_804(void)[18])) = 61)) and
  (to_rep((temp___String_Literal_804(void)[19])) = 32))

logic temp___String_Literal_808 : unit -> (int,character) farray

axiom temp___String_Literal_808__def_axiom :
  ((((((to_rep((temp___String_Literal_808(void)[1])) = 83) and
  (to_rep((temp___String_Literal_808(void)[2])) = 116)) and
  (to_rep((temp___String_Literal_808(void)[3])) = 97)) and
  (to_rep((temp___String_Literal_808(void)[4])) = 99)) and
  (to_rep((temp___String_Literal_808(void)[5])) = 107)) and
  (to_rep((temp___String_Literal_808(void)[6])) = 32))

logic temp___String_Literal_811 : unit -> (int,character) farray

axiom temp___String_Literal_811__def_axiom :
  ((((((((((to_rep((temp___String_Literal_811(void)[1])) = 32) and
  (to_rep((temp___String_Literal_811(void)[2])) = 104)) and
  (to_rep((temp___String_Literal_811(void)[3])) = 97)) and
  (to_rep((temp___String_Literal_811(void)[4])) = 115)) and
  (to_rep((temp___String_Literal_811(void)[5])) = 32)) and
  (to_rep((temp___String_Literal_811(void)[6])) = 115)) and
  (to_rep((temp___String_Literal_811(void)[7])) = 105)) and
  (to_rep((temp___String_Literal_811(void)[8])) = 122)) and
  (to_rep((temp___String_Literal_811(void)[9])) = 101)) and
  (to_rep((temp___String_Literal_811(void)[10])) = 32))

logic temp___String_Literal_817 : unit -> (int,character) farray

axiom temp___String_Literal_817__def_axiom :
  ((to_rep((temp___String_Literal_817(void)[1])) = 32) and
  (to_rep((temp___String_Literal_817(void)[2])) = 58))

logic temp___String_Literal_822 : unit -> (int,character) farray

axiom temp___String_Literal_822__def_axiom :
  (to_rep((temp___String_Literal_822(void)[1])) = 32)

logic temp___String_Literal_825 : unit -> (int,character) farray

axiom temp___String_Literal_825__def_axiom :
  (((to_rep((temp___String_Literal_825(void)[1])) = 32) and
  (to_rep((temp___String_Literal_825(void)[2])) = 61)) and
  (to_rep((temp___String_Literal_825(void)[3])) = 62))

logic temp___String_Literal_836 : unit -> (int,character) farray

axiom temp___String_Literal_836__def_axiom : true

logic temp___String_Literal_839 : unit -> (int,character) farray

axiom temp___String_Literal_839__def_axiom :
  ((((((((to_rep((temp___String_Literal_839(void)[1])) = 45) and
  (to_rep((temp___String_Literal_839(void)[2])) = 45)) and
  (to_rep((temp___String_Literal_839(void)[3])) = 45)) and
  (to_rep((temp___String_Literal_839(void)[4])) = 45)) and
  (to_rep((temp___String_Literal_839(void)[5])) = 45)) and
  (to_rep((temp___String_Literal_839(void)[6])) = 45)) and
  (to_rep((temp___String_Literal_839(void)[7])) = 45)) and
  (to_rep((temp___String_Literal_839(void)[8])) = 45))

axiom inv__post_axiom : true

axiom inv__def_axiom :
  (forall s:cardindex. forall s1:(int,card) farray. forall s2:cardindex.
  forall s3:(int,cardindex) farray.
  forall s4:(int,(int,cardindex) farray) farray.
  forall s5:(int,cardindex) farray. forall s6:(int,cardindex) farray.
  forall s7:(int,cardindex) farray [inv({ us_split_fields1 = {
  rec__patience__state__numelts = s; rec__patience__state__values = s1;
  rec__patience__state__numstacks = s2; rec__patience__state__stacksizes =
  s3; rec__patience__state__stacks = s4; rec__patience__state__posstack = s5;
  rec__patience__state__posheight = s6; rec__patience__state__preds = s7 }
  })]. (((inv({ us_split_fields1 = { rec__patience__state__numelts = s;
  rec__patience__state__values = s1; rec__patience__state__numstacks = s2;
  rec__patience__state__stacksizes = s3; rec__patience__state__stacks = s4;
  rec__patience__state__posstack = s5; rec__patience__state__posheight = s6;
  rec__patience__state__preds = s7 } }) = true) ->
  ((((((((((0 <= to_rep3(s2)) and (to_rep3(s2) <= to_rep3(s))) and
  (to_rep3(s) <= 100)) and ((to_rep3(s) = 0) or (0 <  to_rep3(s2)))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep3(s2) - 1))) ->
  (((1 <= to_rep3((s3[i]))) and (to_rep3((s3[i])) <= to_rep3(s))) and
  (forall j:int. (((0 <= j) and (j <= (to_rep3((s3[i])) - 1))) ->
  ((0 <= to_rep3(((s4[i])[j]))) and (to_rep3(((s4[i])[j])) <  to_rep3(s))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep3(s) - 1))) ->
  ((((0 <= to_rep3((s5[i]))) and (to_rep3((s5[i])) <= (to_rep3(s2) - 1))) and
  ((0 <= to_rep3((s6[i]))) and
  (to_rep3((s6[i])) <= (to_rep3((s3[to_rep3((s5[i]))])) - 1)))) and
  (to_rep3(((s4[to_rep3((s5[i]))])[to_rep3((s6[i]))])) = i))))) and
  (forall ist:int. (((0 <= ist) and (ist <= (to_rep3(s2) - 1))) ->
  (forall ip:int. (((0 <= ip) and (ip <= (to_rep3((s3[ist])) - 1))) ->
  ((ist = to_rep3((s5[to_rep3(((s4[ist])[ip]))]))) and
  (ip = to_rep3((s6[to_rep3(((s4[ist])[ip]))]))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep3(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep3((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep3((s3[i])) - 1))) ->
  (to_rep3(((s4[i])[j])) <  to_rep3(((s4[i])[k])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep3(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep3((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep3((s3[i])) - 1))) ->
  (to_rep2((s1[to_rep3(((s4[i])[k]))])) <= to_rep2((s1[to_rep3(((s4[i])[j]))])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep3(s) - 1))) ->
  (((((-1) <= to_rep3((s7[i]))) and
  (to_rep3((s7[i])) <= (to_rep3(s) - 1))) and (to_rep3((s7[i])) <  i)) and
  (((to_rep3((s7[i])) <  0) -> (to_rep3((s5[i])) = 0)) and
  ((not (to_rep3((s7[i])) <  0)) ->
  (((to_rep2((s1[to_rep3((s7[i]))])) <  to_rep2((s1[i]))) and
  (0 <  to_rep3((s5[i])))) and
  (to_rep3((s5[to_rep3((s7[i]))])) = (to_rep3((s5[i])) - 1)))))))))) and
  (((((((((((0 <= to_rep3(s2)) and (to_rep3(s2) <= to_rep3(s))) and
  (to_rep3(s) <= 100)) and ((to_rep3(s) = 0) or (0 <  to_rep3(s2)))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep3(s2) - 1))) ->
  (((1 <= to_rep3((s3[i]))) and (to_rep3((s3[i])) <= to_rep3(s))) and
  (forall j:int. (((0 <= j) and (j <= (to_rep3((s3[i])) - 1))) ->
  ((0 <= to_rep3(((s4[i])[j]))) and (to_rep3(((s4[i])[j])) <  to_rep3(s))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep3(s) - 1))) ->
  ((((0 <= to_rep3((s5[i]))) and (to_rep3((s5[i])) <= (to_rep3(s2) - 1))) and
  ((0 <= to_rep3((s6[i]))) and
  (to_rep3((s6[i])) <= (to_rep3((s3[to_rep3((s5[i]))])) - 1)))) and
  (to_rep3(((s4[to_rep3((s5[i]))])[to_rep3((s6[i]))])) = i))))) and
  (forall ist:int. (((0 <= ist) and (ist <= (to_rep3(s2) - 1))) ->
  (forall ip:int. (((0 <= ip) and (ip <= (to_rep3((s3[ist])) - 1))) ->
  ((ist = to_rep3((s5[to_rep3(((s4[ist])[ip]))]))) and
  (ip = to_rep3((s6[to_rep3(((s4[ist])[ip]))]))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep3(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep3((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep3((s3[i])) - 1))) ->
  (to_rep3(((s4[i])[j])) <  to_rep3(((s4[i])[k])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep3(s2) - 1))) ->
  (forall j:int. (((0 <= j) and (j <= (to_rep3((s3[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and (k <= (to_rep3((s3[i])) - 1))) ->
  (to_rep2((s1[to_rep3(((s4[i])[k]))])) <= to_rep2((s1[to_rep3(((s4[i])[j]))])))))))))) and
  (forall i:int. (((0 <= i) and (i <= (to_rep3(s) - 1))) ->
  (((((-1) <= to_rep3((s7[i]))) and
  (to_rep3((s7[i])) <= (to_rep3(s) - 1))) and (to_rep3((s7[i])) <  i)) and
  (((to_rep3((s7[i])) <  0) and (to_rep3((s5[i])) = 0)) or
  ((not (to_rep3((s7[i])) <  0)) and
  (((to_rep2((s1[to_rep3((s7[i]))])) <  to_rep2((s1[i]))) and
  (0 <  to_rep3((s5[i])))) and
  (to_rep3((s5[to_rep3((s7[i]))])) = (to_rep3((s5[i])) - 1))))))))) -> (inv({
  us_split_fields1 = { rec__patience__state__numelts = s;
  rec__patience__state__values = s1; rec__patience__state__numstacks = s2;
  rec__patience__state__stacksizes = s3; rec__patience__state__stacks = s4;
  rec__patience__state__posstack = s5; rec__patience__state__posheight = s6;
  rec__patience__state__preds = s7 } }) = true))))

 (* File "test_patience.adb", line 5, characters 0-0 *)
goal WP_parameter_def :
  (forall input:(int,card) farray. forall s__split_fields:cardindex.
  forall s__split_fields1:(int,card) farray.
  forall s__split_fields2:cardindex.
  forall s__split_fields3:(int,cardindex) farray.
  forall s__split_fields4:(int,(int,cardindex) farray) farray.
  forall s__split_fields5:(int,cardindex) farray.
  forall s__split_fields6:(int,cardindex) farray.
  forall s__split_fields7:(int,cardindex) farray. forall i:int. forall o:int.
  forall o1:int. forall o2:int. forall o3:int. forall o4:int. forall o5:int.
  forall temp___782:(int,character) farray. forall temp___7821:t.
  forall o6:int. forall o7:int. forall o8:int. forall o9:int. forall o10:int.
  forall o11:int. forall o12:(int,character) farray. forall o13:t.
  forall o14:int. forall o15:card. forall o16:int. forall o17:us_image.
  forall temp___786:(int,character) farray. forall temp___7861:t.
  forall o18:int. forall o19:int. forall o20:int. forall o21:int.
  forall o22:int. forall o23:int. forall o24:(int,character) farray.
  forall o25:t. forall temp___791:cardindex.
  forall temp___7911:(int,card) farray. forall temp___7912:cardindex.
  forall temp___7913:(int,cardindex) farray.
  forall temp___7914:(int,(int,cardindex) farray) farray.
  forall temp___7915:(int,cardindex) farray.
  forall temp___7916:(int,cardindex) farray.
  forall temp___7917:(int,cardindex) farray. forall o26:int. forall o27:int.
  forall o28:int. forall o29:int. forall o30:int.
  forall result:(int,card) farray. forall input1:(int,card) farray.
  forall result1:int. forall i1:int. forall i2:int. forall i3:int.
  forall i4:int. forall i5:int. forall i6:int. forall result2:cardindex.
  forall result3:(int,card) farray. forall result4:cardindex.
  forall result5:(int,cardindex) farray.
  forall result6:(int,(int,cardindex) farray) farray.
  forall result7:(int,cardindex) farray.
  forall result8:(int,cardindex) farray.
  forall result9:(int,cardindex) farray. forall s__split_fields8:cardindex.
  forall s__split_fields9:(int,card) farray.
  forall s__split_fields10:cardindex.
  forall s__split_fields11:(int,cardindex) farray.
  forall s__split_fields12:(int,(int,cardindex) farray) farray.
  forall s__split_fields13:(int,cardindex) farray.
  forall s__split_fields14:(int,cardindex) farray.
  forall s__split_fields15:(int,cardindex) farray. ((((result = input) and
  (input1 = test_patience__input__aggregate_def(9, 7, 10, 9, 5, 4, 10))) and
  ((to_rep1(input__first) = to_rep1(first2(mk1(1, 7)))) and
  (to_rep1(input__last) = to_rep1(last2(mk1(1, 7)))))) ->
  (dynamic_property1(1, 2147483647, to_rep1(input__first),
  to_rep1(input__last)) ->
  (((((((((((to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(to_rep1(input__first)))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(to_rep1(input__first)))).rt))) and
  (o = ((to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(to_rep1(input__first)))).rt)) - to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(to_rep1(input__first)))).rt))) + 1))) or
  ((not (to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(to_rep1(input__first)))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(to_rep1(input__first)))).rt)))) and
  (o = 0))) and ((((1 <= 17) and (o1 = ((17 - 1) + 1))) or
  ((not (1 <= 17)) and (o1 = 0))) and (o2 = (o1 + o)))) and
  (o3 = (1 + o2))) and (o4 = (o3 - 1))) and ((o5 = o4) and
  in_range2(o4))) and ((concat(temp___String_Literal_778(void), 1, 17,
  (to_string(attr__ATTRIBUTE_IMAGE1(to_rep1(input__first)))).elts,
  to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE1(to_rep1(input__first)))).rt)),
  to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE1(to_rep1(input__first)))).rt))) = temp___782) and
  (mk(1, o5) = temp___7821))) and (((length({ elts = temp___782; rt =
  temp___7821 }) = 0) and ((temp___String_Literal_781(void) = o12) and (mk(1,
  4) = o13))) or ((not (length({ elts = temp___782; rt = temp___7821
  }) = 0)) and ((((((((1 <= 4) and (o6 = ((4 - 1) + 1))) or
  ((not (1 <= 4)) and (o6 = 0))) and
  ((((to_rep1(first(temp___7821)) <= to_rep1(last(temp___7821))) and
  (o7 = ((to_rep1(last(temp___7821)) - to_rep1(first(temp___7821))) + 1))) or
  ((not (to_rep1(first(temp___7821)) <= to_rep1(last(temp___7821)))) and
  (o7 = 0))) and (o8 = (o7 + o6)))) and
  (o9 = (to_rep1(first(temp___7821)) + o8))) and (o10 = (o9 - 1))) and
  ((o11 = o10) and in_range2(o10))) and ((concat(temp___782,
  to_rep1(first(temp___7821)), to_rep1(last(temp___7821)),
  temp___String_Literal_781(void), 1, 4) = o12) and
  (mk(to_rep1(first(temp___7821)), o11) = o13)))))) and (((result1 = i) and
  (i1 = to_rep1(input__first))) and ((((to_rep1(input__first) <= i1) and
  (i1 <= to_rep1(input__last))) and (((((to_rep1(input__first) <= i2) and
  (i2 <= to_rep1(input__last))) and (((((((((to_rep1(input__first) <= i2) and
  (i2 <= to_rep1(input__last))) and (o14 = i2)) and
  (o15 = (input1[o14]))) and (o16 = to_rep2(o15))) and
  (o17 = attr__ATTRIBUTE_IMAGE4(o16))) and ({ elts = temp___786; rt =
  temp___7861 } = to_string(o17))) and
  ((((((((to_rep1(first(temp___7861)) <= to_rep1(last(temp___7861))) and
  (o18 = ((to_rep1(last(temp___7861)) - to_rep1(first(temp___7861))) + 1))) or
  ((not (to_rep1(first(temp___7861)) <= to_rep1(last(temp___7861)))) and
  (o18 = 0))) and ((((1 <= 1) and (o19 = ((1 - 1) + 1))) or
  ((not (1 <= 1)) and (o19 = 0))) and (o20 = (o19 + o18)))) and
  (o21 = (1 + o20))) and (o22 = (o21 - 1))) and ((o23 = o22) and
  in_range2(o22))) and ((o24 = concat(temp___String_Literal_784(void), 1, 1,
  temp___786, to_rep1(first(temp___7861)), to_rep1(last(temp___7861)))) and
  (o25 = mk(1, o23))))) and (i2 = to_rep1(input__last)))) and ((i2 = i3) and
  (i4 = i2))) and (({ int__content = i5 } = { int__content = i3 }) and
  (i6 = i4)))) or ((not ((to_rep1(input__first) <= i1) and
  (i1 <= to_rep1(input__last)))) and ((i1 = i5) and (i6 = i1)))))) -> (((({
  us_split_fields1 = { rec__patience__state__numelts = temp___791;
  rec__patience__state__values = temp___7911;
  rec__patience__state__numstacks = temp___7912;
  rec__patience__state__stacksizes = temp___7913;
  rec__patience__state__stacks = temp___7914;
  rec__patience__state__posstack = temp___7915;
  rec__patience__state__posheight = temp___7916;
  rec__patience__state__preds = temp___7917 } } = playgame({ elts1 = input1;
  rt1 = mk1(to_rep1(input__first), to_rep1(input__last)) })) and (inv({
  us_split_fields1 = { rec__patience__state__numelts = temp___791;
  rec__patience__state__values = temp___7911;
  rec__patience__state__numstacks = temp___7912;
  rec__patience__state__stacksizes = temp___7913;
  rec__patience__state__stacks = temp___7914;
  rec__patience__state__posstack = temp___7915;
  rec__patience__state__posheight = temp___7916;
  rec__patience__state__preds = temp___7917 } }) = true)) and
  (((result2 = s__split_fields) and ((result3 = s__split_fields1) and
  ((result4 = s__split_fields2) and ((result5 = s__split_fields3) and
  ((result6 = s__split_fields4) and ((result7 = s__split_fields5) and
  ((result8 = s__split_fields6) and (result9 = s__split_fields7)))))))) and
  ((temp___791 = s__split_fields8) and ((temp___7911 = s__split_fields9) and
  ((temp___7912 = s__split_fields10) and
  ((temp___7913 = s__split_fields11) and
  ((temp___7914 = s__split_fields12) and
  ((temp___7915 = s__split_fields13) and
  ((temp___7916 = s__split_fields14) and
  (temp___7917 = s__split_fields15)))))))))) ->
  (((c60b = s__split_fields8) and ((c60b1 = s__split_fields9) and
  ((c60b2 = s__split_fields10) and ((c60b3 = s__split_fields11) and
  ((c60b4 = s__split_fields12) and ((c60b5 = s__split_fields13) and
  ((c60b6 = s__split_fields14) and (c60b7 = s__split_fields15)))))))) ->
  (((((((to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE5(to_rep3(c60b)))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE5(to_rep3(c60b)))).rt))) and
  (o26 = ((to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE5(to_rep3(c60b)))).rt)) - to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE5(to_rep3(c60b)))).rt))) + 1))) or
  ((not (to_rep1(first((to_string(attr__ATTRIBUTE_IMAGE5(to_rep3(c60b)))).rt)) <= to_rep1(last((to_string(attr__ATTRIBUTE_IMAGE5(to_rep3(c60b)))).rt)))) and
  (o26 = 0))) and ((((1 <= 17) and (o27 = ((17 - 1) + 1))) or
  ((not (1 <= 17)) and (o27 = 0))) and (o28 = (o27 + o26)))) and
  (o29 = (1 + o28))) and (o30 = (o29 - 1))) -> in_range2(o30))))))))
