;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort count_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ((count_type__ref 0))
(((mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-fun to_rep (count_type) Int)

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((mk___split_discrs (rec__my_ordered_maps__m__map__capacity count_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) count_type
  (rec__my_ordered_maps__m__map__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__my_ordered_maps__m__map us_main_type)))))
(define-fun us_split_fields_Map__projection ((a us_split_fields)) us_main_type
  (rec__my_ordered_maps__m__map a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_5__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep_7__projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                              a))

(define-fun us_rep_8__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__my_ordered_maps__m__map__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__my_ordered_maps__m__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__my_ordered_maps__m__map
                           (us_split_fields1 a))
                           (rec__my_ordered_maps__m__map
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-const my_ordered_maps__m__map__capacity__first__bit Int)

(declare-const my_ordered_maps__m__map__capacity__last__bit Int)

(declare-const my_ordered_maps__m__map__capacity__position Int)

;; my_ordered_maps__m__map__capacity__first__bit_axiom
  (assert (<= 0 my_ordered_maps__m__map__capacity__first__bit))

;; my_ordered_maps__m__map__capacity__last__bit_axiom
  (assert
  (< my_ordered_maps__m__map__capacity__first__bit my_ordered_maps__m__map__capacity__last__bit))

;; my_ordered_maps__m__map__capacity__position_axiom
  (assert (<= 0 my_ordered_maps__m__map__capacity__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((map__ref 0)) (((mk_map__ref (map__content us_rep)))))
(define-fun map__ref___projection ((a map__ref)) us_rep (map__content a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__my_ordered_maps__m__cursor__node count_type)))))
(define-fun us_split_fields_Node__projection ((a us_split_fields2)) count_type
  (rec__my_ordered_maps__m__cursor__node a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_6__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__my_ordered_maps__m__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__my_ordered_maps__m__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-const my_ordered_maps__m__cursor__node__first__bit Int)

(declare-const my_ordered_maps__m__cursor__node__last__bit Int)

(declare-const my_ordered_maps__m__cursor__node__position Int)

;; my_ordered_maps__m__cursor__node__first__bit_axiom
  (assert (<= 0 my_ordered_maps__m__cursor__node__first__bit))

;; my_ordered_maps__m__cursor__node__last__bit_axiom
  (assert
  (< my_ordered_maps__m__cursor__node__first__bit my_ordered_maps__m__cursor__node__last__bit))

;; my_ordered_maps__m__cursor__node__position_axiom
  (assert (<= 0 my_ordered_maps__m__cursor__node__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((cursor__ref 0))
(((mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content
                                                               a))

(declare-const no_element us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun length1 (Int us_rep) Int)

(declare-fun length__function_guard1 (Int Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 0 2147483647)) (in_range1
                                      temp___expr_142)))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)) )))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__my_ordered_maps__m__map__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant result true false true))) :pattern ((length
                                                            container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant
  (length1 attr__tag container) true false
  true) :pattern ((length1 attr__tag container)) ))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-const dummy3 us_rep2)

(declare-datatypes ((map__ref1 0))
(((mk_map__ref1 (map__content1 us_rep2)))))
(define-fun map__ref_3__projection ((a map__ref1)) us_rep2 (map__content1 a))

(declare-datatypes ((key_type__ref 0))
(((mk_key_type__ref (key_type__content us_rep1)))))
(define-fun key_type__ref_3__projection ((a key_type__ref)) us_rep1 (key_type__content
                                                                    a))

(declare-fun get (us_rep2 us_rep1) Int)

(declare-fun get__function_guard (Int us_rep2 us_rep1) Bool)

(declare-sort element_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq4 (element_type element_type) Bool)

(declare-const dummy4 element_type)

(declare-datatypes ((element_type__ref 0))
(((mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref_4__projection ((a element_type__ref)) element_type
  (element_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_378 Int)
  (temp___is_init_375 Bool) (temp___skip_constant_376 Bool)
  (temp___do_toplevel_377 Bool)) Bool (=>
                                      (or (= temp___is_init_375 true)
                                      (<= 1 2147483647)) (in_range2
                                      temp___expr_378)))

(declare-fun length2 (us_rep2) Int)

(declare-fun length__function_guard2 (Int us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(define-fun default_initial_assumption ((temp___expr_385 us_rep2)
  (temp___skip_top_level_386 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_386 true))
                                         (and
                                         (= (is_empty temp___expr_385) true)
                                         (= (length2 temp___expr_385) 0))))

(declare-fun has_key (us_rep2 us_rep1) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 us_rep1) Bool)

(declare-fun witness (us_rep2 us_rep1) Int)

(declare-fun witness__function_guard (Int us_rep2 us_rep1) Bool)

(declare-fun w_get (us_rep2 Int) Int)

(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep1))
  (! (=> (= (has_key container key) true)
     (let ((result (get container key)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep1))
     (=> (= (has_key container k) true)
     (= (= (bool_eq1 k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant1 result true false true)))) :pattern ((get container
                                                              key)) ))))

(declare-fun positions (us_rep) us_rep2)

(declare-fun positions__function_guard (us_rep2 us_rep) Bool)

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key result i) true)
     (and (and (<= 1 (get result i)) (<= (get result i) (length container)))
     (forall ((j us_rep1))
     (=> (= (has_key result j) true)
     (=> (= (get result i) (get result j)) (= (bool_eq1 i j) true))))))))) :pattern (
  (positions container)) )))

(declare-sort extended_index 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq5 (extended_index extended_index) Bool)

(declare-const dummy5 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq6 (us_rep3 us_rep3) Bool)

(declare-const dummy6 us_rep3)

(declare-datatypes ((sequence__ref 0))
(((mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep3 (sequence__content
                                                                   a))

(declare-fun get1 (us_rep3 Int) Int)

(declare-fun get__function_guard1 (Int us_rep3 Int) Bool)

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard3 (Int us_rep3) Bool)

(define-fun last ((container us_rep3)) Int (+ 0 (length3 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

(declare-fun keys (us_rep) us_rep3)

(declare-fun keys__function_guard (us_rep3 us_rep) Bool)

(declare-fun is_empty1 (us_rep) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep) Bool)

(declare-fun is_empty2 (Int us_rep) Bool)

(declare-fun is_empty__function_guard2 (Bool Int us_rep) Bool)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty1 container) true) (= (length container) 0)) :pattern (
  (is_empty1 container)) )))

;; is_empty__post__dispatch_axiom
  (assert true)

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-const value__size4 Int)

(declare-fun object__size4 (us_rep4) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))

(declare-fun user_eq7 (us_rep4 us_rep4) Bool)

(declare-const dummy7 us_rep4)

(declare-datatypes ((map__ref2 0))
(((mk_map__ref2 (map__content2 us_rep4)))))
(define-fun map__ref_2__projection ((a map__ref2)) us_rep4 (map__content2 a))

(declare-fun oeq2 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep4 us_rep4) Bool)

(define-fun oeq3 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length3 left) (length3 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (get1 left
                                                                   n)
                                                                (get1 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard3 (Bool us_rep3 us_rep3) Bool)

(declare-fun model__ (us_rep) us_rep4)

(declare-fun model____function_guard (us_rep4 us_rep) Bool)

(declare-fun assign__specific_post (Int us_split_fields us_split_discrs
  us_rep us_split_fields) Bool)

(declare-fun get2 (us_rep4 Int) Int)

(declare-fun get__function_guard2 (Int us_rep4 Int) Bool)

(define-fun key ((container us_rep)
  (position us_rep1)) Int (get1 (keys container)
                          (get (positions container) position)))

(declare-fun key__function_guard (Int us_rep us_rep1) Bool)

(declare-fun key1 (Int us_rep us_rep1) Int)

(declare-fun key__function_guard1 (Int Int us_rep us_rep1) Bool)

(define-fun element ((container us_rep)
  (position us_rep1)) Int (get2 (model__ container) (key container position)))

(declare-fun element__function_guard (Int us_rep us_rep1) Bool)

(declare-fun element1 (Int us_rep us_rep1) Int)

(declare-fun element__function_guard1 (Int Int us_rep us_rep1) Bool)

(declare-sort element_type1 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (element_type1 element_type1) Bool)

(declare-const dummy8 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___projection ((a element_type__ref1)) element_type1
  (element_type__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_295 Int)
  (temp___is_init_292 Bool) (temp___skip_constant_293 Bool)
  (temp___do_toplevel_294 Bool)) Bool (=>
                                      (or (= temp___is_init_292 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range4 temp___expr_295)))

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(declare-fun has_element1 (Int us_rep us_rep1) Bool)

(declare-fun has_element__function_guard1 (Bool Int us_rep us_rep1) Bool)

;; element__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep))
  (forall ((position us_rep1)) (! (dynamic_invariant2
  (element1 attr__tag container position) true false
  true) :pattern ((element1 attr__tag container position)) )))))

(declare-fun keys_included (us_rep4 us_rep4) Bool)

(declare-fun keys_included__function_guard (Bool us_rep4 us_rep4) Bool)

(define-fun same_keys ((left us_rep4)
  (right us_rep4)) Bool (and (keys_included left right) (keys_included right
                                                        left)))

(declare-fun same_keys__function_guard (Bool us_rep4 us_rep4) Bool)

(declare-fun elements_equal_except (us_rep4 us_rep4 Int) Bool)

(declare-fun elements_equal_except__function_guard (Bool us_rep4 us_rep4
  Int) Bool)

(declare-fun oeq4 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep2 us_rep2) Bool)

(declare-fun replace_element__specific_post (Int us_split_fields
  us_split_discrs us_rep1 Int us_split_fields) Bool)

(declare-fun move__specific_post (Int us_split_fields us_split_discrs
  us_split_fields us_split_discrs us_split_fields us_split_fields) Bool)

(declare-fun has_key1 (us_rep4 Int) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep4 Int) Bool)

(define-fun contains ((container us_rep)
  (key2 Int)) Bool (has_key1 (model__ container) key2))

(declare-fun contains__function_guard (Bool us_rep Int) Bool)

(declare-fun contains1 (Int us_rep Int) Bool)

(declare-fun contains__function_guard1 (Bool Int us_rep Int) Bool)

(declare-sort key_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (key_type key_type) Bool)

(declare-const dummy9 key_type)

(declare-datatypes ((key_type__ref1 0))
(((mk_key_type__ref1 (key_type__content1 key_type)))))
(define-fun key_type__ref___projection ((a key_type__ref1)) key_type
  (key_type__content1 a))

(define-fun dynamic_invariant3 ((temp___expr_289 Int)
  (temp___is_init_286 Bool) (temp___skip_constant_287 Bool)
  (temp___do_toplevel_288 Bool)) Bool (=>
                                      (or (= temp___is_init_286 true)
                                      (<= 0 2147483647)) (in_range5
                                      temp___expr_289)))

;; contains__post__dispatch_axiom
  (assert true)

(define-fun equivalent_keys ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

(declare-fun ole (us_rep4 us_rep4) Bool)

(declare-fun ole__function_guard (Bool us_rep4 us_rep4) Bool)

(declare-fun keys_included_except (us_rep4 us_rep4 Int) Bool)

(declare-fun keys_included_except__function_guard (Bool us_rep4 us_rep4
  Int) Bool)

(define-fun range_equal ((left us_rep3) (right us_rep3) (fst Int)
  (lst Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (= (get1 left i) (get1 right i))))
                  true false))

(declare-fun range_equal__function_guard (Bool us_rep3 us_rep3 Int Int) Bool)

(define-fun range_shifted ((left us_rep3) (right us_rep3) (fst Int) (lst Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst i) (<= i lst))
                               (= (get1 left i) (get1 right (+ i offset)))))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst offset) i)
                                           (<= i (+ lst offset)))
                                           (= (get1 left (- i offset))
                                           (get1 right i))))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep3 us_rep3 Int Int
  Int) Bool)

(define-fun k_bigger_than_range ((container us_rep3) (fst Int) (lst Int)
  (key2 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< (get1 container i) key2)))
                   true false))

(declare-fun k_bigger_than_range__function_guard (Bool us_rep3 Int Int
  Int) Bool)

(define-fun k_smaller_than_range ((container us_rep3) (fst Int) (lst Int)
  (key2 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< key2 (get1 container i))))
                   true false))

(declare-fun k_smaller_than_range__function_guard (Bool us_rep3 Int Int
  Int) Bool)

(define-fun k_is_find ((container us_rep3) (key2 Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (k_bigger_than_range container 1 (- position 1)
                            key2) (of_int 1)) (ite (< position (length3
                                                               container))
                                              (k_smaller_than_range container
                                              (+ position 1)
                                              (length3 container) key2)
                                              (of_int 1))))

(declare-fun k_is_find__function_guard (Bool us_rep3 Int Int) Bool)

(declare-fun p_positions_shifted (us_rep2 us_rep2 Int Int) Bool)

(declare-fun p_positions_shifted__function_guard (Bool us_rep2 us_rep2 Int
  Int) Bool)

(declare-fun insert__specific_post (Int us_split_fields us_split_discrs Int
  Int us_split_fields2 Bool us_split_fields us_split_fields2 Bool) Bool)

(declare-fun find (us_rep3 Int) Int)

(declare-fun find__function_guard (Int us_rep3 Int) Bool)

(declare-fun insert__2__specific_post (Int us_split_fields us_split_discrs
  Int Int us_split_fields) Bool)

(define-fun equal_except ((left us_rep3) (right us_rep3)
  (position Int)) Bool (and (= (length3 left) (length3 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (=
                                                                    (get1
                                                                    left i)
                                                                    (get1
                                                                    right i)))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep3 us_rep3 Int) Bool)

(define-fun element__2 ((container us_rep)
  (key2 Int)) Int (get2 (model__ container) key2))

(declare-fun element__2__function_guard (Int us_rep Int) Bool)

(declare-fun element__21 (Int us_rep Int) Int)

(declare-fun element__2__function_guard1 (Int Int us_rep Int) Bool)

(declare-fun include__specific_post (Int us_split_fields us_split_discrs Int
  Int us_split_fields) Bool)

(declare-fun replace__specific_post (Int us_split_fields us_split_discrs Int
  Int us_split_fields) Bool)

(declare-fun exclude__specific_post (Int us_split_fields us_split_discrs Int
  us_split_fields) Bool)

(declare-fun delete__specific_post (Int us_split_fields us_split_discrs Int
  us_split_fields) Bool)

(declare-fun delete__2__specific_post (Int us_split_fields us_split_discrs
  us_split_fields2 us_split_fields us_split_fields2) Bool)

(declare-fun first_key (us_rep) Int)

(declare-fun first_key__function_guard (Int us_rep) Bool)

(declare-fun first_key1 (Int us_rep) Int)

(declare-fun first_key__function_guard1 (Int Int us_rep) Bool)

(declare-fun delete_first__specific_post (Int us_split_fields us_split_discrs
  us_split_fields) Bool)

(declare-fun ole1 (us_rep2 us_rep2) Bool)

(declare-fun ole__function_guard1 (Bool us_rep2 us_rep2) Bool)

(declare-fun last_key (us_rep) Int)

(declare-fun last_key__function_guard (Int us_rep) Bool)

(declare-fun last_key1 (Int us_rep) Int)

(declare-fun last_key__function_guard1 (Int Int us_rep) Bool)

(declare-fun delete_last__specific_post (Int us_split_fields us_split_discrs
  us_split_fields) Bool)

(declare-fun first (us_rep) us_rep1)

(declare-fun first__function_guard (us_rep1 us_rep) Bool)

(declare-fun first1 (Int us_rep) us_rep1)

(declare-fun first__function_guard1 (us_rep1 Int us_rep) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (first container)))
     (ite (= (length container) 0) (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get (positions container) result) 1)))) :pattern ((first container)) )))

;; first__post__dispatch_axiom
  (assert true)

(declare-fun next (us_rep us_rep1) us_rep1)

(declare-fun next__function_guard (us_rep1 us_rep us_rep1) Bool)

(declare-fun next1 (Int us_rep us_rep1) us_rep1)

(declare-fun next__function_guard1 (us_rep1 Int us_rep us_rep1) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((position us_rep1))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq1 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq1 position no_element) true)
          (= (get (positions container) position) (length container)))
     (= (bool_eq1 result no_element) true)
     (and (= (has_element container result) true)
     (= (get (positions container) result) (+ (get (positions container)
                                              position) 1)))))) :pattern (
  (next container position)) ))))

;; next__post__dispatch_axiom
  (assert true)

(declare-fun find1 (us_rep Int) us_rep1)

(declare-fun find__function_guard1 (us_rep1 us_rep Int) Bool)

(declare-fun find2 (Int us_rep Int) us_rep1)

(declare-fun find__function_guard2 (us_rep1 Int us_rep Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant3 key2 true true true)
     (let ((result (find1 container key2)))
     (ite (not (= (has_key1 (model__ container) key2) true))
     (and (not (= (has_key (positions container) result) true))
     (= (bool_eq1 result no_element) true))
     (and
     (and (= (has_key (positions container) result) true)
     (= (get (positions container) result) (find (keys container) key2)))
     (= (equivalent_keys (key container result) key2) true))))) :pattern (
  (find1 container key2)) ))))

;; find__post__dispatch_axiom
  (assert true)

(declare-fun floor (us_rep Int) us_rep1)

(declare-fun floor__function_guard (us_rep1 us_rep Int) Bool)

(declare-fun floor1 (Int us_rep Int) us_rep1)

(declare-fun floor__function_guard1 (us_rep1 Int us_rep Int) Bool)

;; floor__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant3 key2 true true true)
     (let ((result (floor container key2)))
     (ite (or (= (length container) 0) (< key2 (first_key container)))
     (= (bool_eq1 result no_element) true)
     (and
     (and (= (has_element container result) true)
     (not
     (< key2 (get1 (keys container) (get (positions container) result)))))
     (= (k_is_find (keys container) key2 (get (positions container) result)) true))))) :pattern (
  (floor container key2)) ))))

;; floor__post__dispatch_axiom
  (assert true)

(declare-fun ceiling (us_rep Int) us_rep1)

(declare-fun ceiling__function_guard (us_rep1 us_rep Int) Bool)

(declare-fun ceiling1 (Int us_rep Int) us_rep1)

(declare-fun ceiling__function_guard1 (us_rep1 Int us_rep Int) Bool)

;; ceiling__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant3 key2 true true true)
     (let ((result (ceiling container key2)))
     (ite (or (= (length container) 0) (< (last_key container) key2))
     (= (bool_eq1 result no_element) true)
     (and
     (and (= (has_element container result) true)
     (not
     (< (get1 (keys container) (get (positions container) result)) key2)))
     (= (k_is_find (keys container) key2 (get (positions container) result)) true))))) :pattern (
  (ceiling container key2)) ))))

;; ceiling__post__dispatch_axiom
  (assert true)

(define-fun in_range6 ((rec__my_ordered_maps__m__map__capacity1 Int)
  (a us_rep)) Bool (= rec__my_ordered_maps__m__map__capacity1 (to_rep
                                                              (rec__my_ordered_maps__m__map__capacity
                                                              (us_split_discrs1
                                                              a)))))

(declare-const value__size5 Int)

(declare-fun object__size5 (us_rep) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment5 a))))

(declare-const my_ordered_maps__m__map__capacity__first__bit1 Int)

(declare-const my_ordered_maps__m__map__capacity__last__bit1 Int)

(declare-const my_ordered_maps__m__map__capacity__position1 Int)

;; my_ordered_maps__m__map__capacity__first__bit_axiom
  (assert (<= 0 my_ordered_maps__m__map__capacity__first__bit1))

;; my_ordered_maps__m__map__capacity__last__bit_axiom
  (assert
  (< my_ordered_maps__m__map__capacity__first__bit1 my_ordered_maps__m__map__capacity__last__bit1))

;; my_ordered_maps__m__map__capacity__position_axiom
  (assert (<= 0 my_ordered_maps__m__map__capacity__position1))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes ((tlS__ref 0)) (((mk_tlS__ref (tlS__content us_rep)))))
(define-fun tlS__ref___projection ((a tlS__ref)) us_rep (tlS__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq10 a b) (oeq a b)) :pattern ((user_eq10 a b)) )))

(define-fun dynamic_invariant4 ((temp___expr_693 us_rep)
  (temp___is_init_690 Bool) (temp___skip_constant_691 Bool)
  (temp___do_toplevel_692 Bool)) Bool (=>
                                      (not (= temp___skip_constant_691 true))
                                      (in_range6 10 temp___expr_693)))

(define-fun default_initial_assumption1 ((temp___expr_695 us_rep)
  (temp___skip_top_level_696 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_ordered_maps__m__map__capacity
                                            (us_split_discrs1
                                            temp___expr_695))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_696 true))
                                         (= (is_empty1 temp___expr_695) true))))

(declare-const l__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun in_range7 ((rec__my_ordered_maps__m__map__capacity1 Int)
  (a us_rep)) Bool (= rec__my_ordered_maps__m__map__capacity1 (to_rep
                                                              (rec__my_ordered_maps__m__map__capacity
                                                              (us_split_discrs1
                                                              a)))))

(declare-const value__size6 Int)

(declare-fun object__size6 (us_rep) Int)

(declare-const value__alignment6 Int)

(declare-fun object__alignment6 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment6 a))))

(declare-const my_ordered_maps__m__map__capacity__first__bit2 Int)

(declare-const my_ordered_maps__m__map__capacity__last__bit2 Int)

(declare-const my_ordered_maps__m__map__capacity__position2 Int)

;; my_ordered_maps__m__map__capacity__first__bit_axiom
  (assert (<= 0 my_ordered_maps__m__map__capacity__first__bit2))

;; my_ordered_maps__m__map__capacity__last__bit_axiom
  (assert
  (< my_ordered_maps__m__map__capacity__first__bit2 my_ordered_maps__m__map__capacity__last__bit2))

;; my_ordered_maps__m__map__capacity__position_axiom
  (assert (<= 0 my_ordered_maps__m__map__capacity__position2))

(declare-fun user_eq11 (us_rep us_rep) Bool)

(declare-const dummy11 us_rep)

(declare-datatypes ((tkS__ref 0)) (((mk_tkS__ref (tkS__content us_rep)))))
(define-fun tkS__ref___projection ((a tkS__ref)) us_rep (tkS__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq11 a b) (oeq a b)) :pattern ((user_eq11 a b)) )))

(define-fun dynamic_invariant5 ((temp___expr_702 us_rep)
  (temp___is_init_699 Bool) (temp___skip_constant_700 Bool)
  (temp___do_toplevel_701 Bool)) Bool (=>
                                      (not (= temp___skip_constant_700 true))
                                      (in_range7 10 temp___expr_702)))

(define-fun default_initial_assumption2 ((temp___expr_704 us_rep)
  (temp___skip_top_level_705 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_ordered_maps__m__map__capacity
                                            (us_split_discrs1
                                            temp___expr_704))) 10)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_705 true))
                                         (= (is_empty1 temp___expr_704) true))))

(declare-const k__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

;; no_element__def_axiom
  (assert (= no_element (mk___rep1 (mk___split_fields1 (of_rep 0)))))

(declare-sort positive_count_type 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq12 (positive_count_type positive_count_type) Bool)

(declare-const dummy12 positive_count_type)

(declare-datatypes ((positive_count_type__ref 0))
(((mk_positive_count_type__ref
  (positive_count_type__content positive_count_type)))))
(define-fun positive_count_type__ref___projection ((a positive_count_type__ref)) positive_count_type
  (positive_count_type__content a))

(define-fun dynamic_invariant6 ((temp___expr_315 Int)
  (temp___is_init_312 Bool) (temp___skip_constant_313 Bool)
  (temp___do_toplevel_314 Bool)) Bool (=>
                                      (or (= temp___is_init_312 true)
                                      (<= 1 2147483647)) (in_range8
                                      temp___expr_315)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq6 a b) (oeq3 a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption3 ((temp___expr_365 us_rep3)
  (temp___skip_top_level_366 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_366 true))
                                         (= (length3 temp___expr_365) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant3 key2 true true true)
     (let ((result (find container key2)))
     (and
     (=> (< 0 result)
     (and (<= result (length3 container))
     (= (equivalent_keys key2 (get1 container result)) true)))
     (dynamic_invariant result true false true)))) :pattern ((find container
                                                             key2)) ))))

(declare-fun keys_included1 (us_rep2 us_rep2) Bool)

(declare-fun keys_included__function_guard1 (Bool us_rep2 us_rep2) Bool)

;; p_positions_shifted__post_axiom
  (assert
  (forall ((small us_rep2) (big us_rep2))
  (forall ((cut Int) (count Int))
  (! (=>
     (and (dynamic_invariant6 cut true true true) (dynamic_invariant count
     true true true))
     (= (= (p_positions_shifted small big cut count) true)
     (and
     (and (= (keys_included1 small big) true)
     (forall ((i us_rep1))
     (=> (= (has_key small i) true)
     (ite (< (get small i) cut) (= (get big i) (get small i))
     (= (- (get big i) count) (get small i))))))
     (forall ((i us_rep1))
     (=> (= (has_key big i) true)
     (or (= (has_key small i) true)
     (and (<= (- cut count) (- (get big i) count))
     (<= (- (get big i) count) (- cut 1))))))))) :pattern ((p_positions_shifted
                                                           small big cut
                                                           count)) ))))

(declare-fun length4 (us_rep4) Int)

(declare-fun length__function_guard4 (Int us_rep4) Bool)

(declare-fun is_empty3 (us_rep4) Bool)

(declare-fun is_empty__function_guard3 (Bool us_rep4) Bool)

(define-fun default_initial_assumption4 ((temp___expr_334 us_rep4)
  (temp___skip_top_level_335 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_335 true))
                                         (and
                                         (= (is_empty3 temp___expr_334) true)
                                         (= (length4 temp___expr_334) 0))))

;; model____post_axiom
  (assert true)

(declare-sort key_type1 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq13 (key_type1 key_type1) Bool)

(declare-const dummy13 key_type1)

(declare-datatypes ((key_type__ref2 0))
(((mk_key_type__ref2 (key_type__content2 key_type1)))))
(define-fun key_type__ref_2__projection ((a key_type__ref2)) key_type1
  (key_type__content2 a))

;; keys__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (keys container)))
     (and
     (and
     (and (= (length3 result) (length container))
     (forall ((temp___399 Int))
     (=>
     (and (in_range3 temp___399)
     (= (iter_has_element result temp___399) true))
     (= (has_key1 (model__ container) (get1 result temp___399)) true))))
     (forall ((key2 Int))
     (=> (and (in_range9 key2) (= (has_key1 (model__ container) key2) true))
     (and (< 0 (find result key2))
     (= (equivalent_keys (get1 result (find result key2)) key2) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (and (= (find result (get1 result i)) i)
     (= (k_is_find result (get1 result i) i) true)))))) :pattern ((keys
                                                                  container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq2 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

;; key__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep))
  (forall ((position us_rep1)) (! (dynamic_invariant3
  (key1 attr__tag container position) true false
  true) :pattern ((key1 attr__tag container position)) )))))

;; first_key__post_axiom
  (assert
  (forall ((container us_rep))
  (! (=> (not (= (is_empty1 container) true))
     (let ((result (first_key container)))
     (and
     (and (= result (get1 (keys container) 1))
     (= (k_smaller_than_range (keys container) 2 (length container) result) true))
     (dynamic_invariant3 result true false true)))) :pattern ((first_key
                                                              container)) )))

;; first_key__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant3
  (first_key1 attr__tag container) true false
  true) :pattern ((first_key1 attr__tag container)) ))))

;; last_key__post_axiom
  (assert
  (forall ((container us_rep))
  (! (=> (not (= (is_empty1 container) true))
     (let ((result (last_key container)))
     (and
     (and (= result (get1 (keys container) (length container)))
     (= (k_bigger_than_range (keys container) 1 (- (length container) 1)
        result) true))
     (dynamic_invariant3 result true false true)))) :pattern ((last_key
                                                              container)) )))

;; last_key__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep)) (! (dynamic_invariant3
  (last_key1 attr__tag container) true false
  true) :pattern ((last_key1 attr__tag container)) ))))

;; element__2__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int) (key2 Int))
  (forall ((container us_rep))
  (! (=> (dynamic_invariant3 key2 true true true) (dynamic_invariant2
     (element__21 attr__tag container key2) true false true)) :pattern (
  (element__21 attr__tag container key2)) ))))

;; has_element__post__dispatch_axiom
  (assert true)

(define-fun dynamic_invariant7 ((temp___expr_321 Int)
  (temp___is_init_318 Bool) (temp___skip_constant_319 Bool)
  (temp___do_toplevel_320 Bool)) Bool (=>
                                      (or (= temp___is_init_318 true)
                                      (<= 0 2147483647)) (in_range9
                                      temp___expr_321)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 Int))
  (! (=> (dynamic_invariant7 key2 true true true)
     (=> (= (of_int 1) true)
     (=>
     (exists ((k Int))
     (and (and (in_range9 k) (= (has_key1 container k) true))
     (= (equivalent_keys k key2) true))) (= (has_key1 container key2) true)))) :pattern (
  (has_key1 container key2)) ))))

(declare-sort element_type2 0)

(define-fun in_range10 ((x Int)) Bool (and (<= (- 2147483648) x)
                                      (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq14 (element_type2 element_type2) Bool)

(declare-const dummy14 element_type2)

(declare-datatypes ((element_type__ref2 0))
(((mk_element_type__ref2 (element_type__content2 element_type2)))))
(define-fun element_type__ref_2__projection ((a element_type__ref2)) element_type2
  (element_type__content2 a))

(define-fun dynamic_invariant8 ((temp___expr_327 Int)
  (temp___is_init_324 Bool) (temp___skip_constant_325 Bool)
  (temp___do_toplevel_326 Bool)) Bool (=>
                                      (or (= temp___is_init_324 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range10 temp___expr_327)))

(declare-fun witness1 (us_rep4 Int) Int)

(declare-fun witness__function_guard1 (Int us_rep4 Int) Bool)

(declare-fun w_get1 (us_rep4 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep4 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant7 key2 true true true)
     (= (has_key1 container key2) true))
     (let ((result (get2 container key2)))
     (and
     (=> (= (of_int 1) true)
     (and (= result (w_get1 container (witness1 container key2)))
     (forall ((k Int))
     (=> (and (in_range9 k) (= (has_key1 container k) true))
     (= (= (equivalent_keys k key2) true)
     (= (witness1 container key2) (witness1 container k)))))))
     (dynamic_invariant8 result true false true)))) :pattern ((get2 container
                                                              key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant (length4 container)
  true false true) :pattern ((length4 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (ole left right) true)
     (forall ((key2 Int))
     (=> (and (in_range9 key2) (= (has_key1 left key2) true))
     (and (= (has_key1 right key2) true)
     (= (get2 right key2) (get2 left key2)))))) :pattern ((ole left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (oeq2 left right) true)
     (and
     (forall ((key2 Int))
     (=> (and (in_range9 key2) (= (has_key1 left key2) true))
     (and (= (has_key1 right key2) true)
     (= (get2 right key2) (get2 left key2)))))
     (forall ((key2 Int))
     (=> (and (in_range9 key2) (= (has_key1 right key2) true))
     (= (has_key1 left key2) true))))) :pattern ((oeq2 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty3 container) true)
     (forall ((key2 Int))
     (not (and (in_range9 key2) (= (has_key1 container key2) true))))) :pattern (
  (is_empty3 container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (keys_included left right) true)
     (forall ((key2 Int))
     (=> (and (in_range9 key2) (= (has_key1 left key2) true))
     (= (has_key1 right key2) true)))) :pattern ((keys_included left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((new_key Int))
  (! (=> (dynamic_invariant7 new_key true true true)
     (= (= (keys_included_except left right new_key) true)
     (forall ((key2 Int))
     (=> (and (in_range9 key2) (= (has_key1 left key2) true))
     (=> (not (= (equivalent_keys key2 new_key) true))
     (= (has_key1 right key2) true)))))) :pattern ((keys_included_except left
                                                   right new_key)) ))))

;; elements_equal_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((new_key Int))
  (! (=> (dynamic_invariant7 new_key true true true)
     (= (= (elements_equal_except left right new_key) true)
     (forall ((key2 Int))
     (=> (and (in_range9 key2) (= (has_key1 left key2) true))
     (=> (not (= (equivalent_keys key2 new_key) true))
     (and (= (has_key1 right key2) true)
     (= (get2 left key2) (get2 right key2)))))))) :pattern ((elements_equal_except
                                                            left right
                                                            new_key)) ))))

(declare-fun has_witness (us_rep4 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep4 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 Int))
  (! (=>
     (and (dynamic_invariant7 key2 true true true)
     (= (has_key1 container key2) true))
     (let ((result (witness1 container key2)))
     (and (= (has_witness container result) true) (dynamic_invariant result
     true false true)))) :pattern ((witness1 container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant witness2 true true true)
     (= (has_witness container witness2) true)) (dynamic_invariant8
     (w_get1 container witness2) true false true)) :pattern ((w_get1
                                                             container
                                                             witness2)) ))))

(define-fun dynamic_invariant9 ((temp___expr_358 Int)
  (temp___is_init_355 Bool) (temp___skip_constant_356 Bool)
  (temp___do_toplevel_357 Bool)) Bool (=>
                                      (or (= temp___is_init_355 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_358)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length3 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true))) :pattern ((length3 container)) )))

(declare-sort element_type3 0)

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq15 (element_type3 element_type3) Bool)

(declare-const dummy15 element_type3)

(declare-datatypes ((element_type__ref3 0))
(((mk_element_type__ref3 (element_type__content3 element_type3)))))
(define-fun element_type__ref_3__projection ((a element_type__ref3)) element_type3
  (element_type__content3 a))

(define-fun dynamic_invariant10 ((temp___expr_352 Int)
  (temp___is_init_349 Bool) (temp___skip_constant_350 Bool)
  (temp___do_toplevel_351 Bool)) Bool (=>
                                      (or (= temp___is_init_349 true)
                                      (<= 0 2147483647)) (in_range11
                                      temp___expr_352)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant9 position true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant10 (get1 container position) true false true)) :pattern (
  (get1 container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 us_rep1))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep1))
     (and (= (has_key container k) true) (= (bool_eq1 k key2) true)))
     (= (has_key container key2) true))) :pattern ((has_key container key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant (length2 container)
  true false true) :pattern ((length2 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (ole1 left right) true)
     (forall ((key2 us_rep1))
     (=> (= (has_key left key2) true)
     (and (= (has_key right key2) true) (= (get right key2) (get left key2)))))) :pattern (
  (ole1 left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq4 left right) true)
     (and
     (forall ((key2 us_rep1))
     (=> (= (has_key left key2) true)
     (and (= (has_key right key2) true) (= (get right key2) (get left key2)))))
     (forall ((key2 us_rep1))
     (=> (= (has_key right key2) true) (= (has_key left key2) true))))) :pattern (
  (oeq4 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true)
     (forall ((key2 us_rep1)) (not (= (has_key container key2) true)))) :pattern (
  (is_empty container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (keys_included1 left right) true)
     (forall ((key2 us_rep1))
     (=> (= (has_key left key2) true) (= (has_key right key2) true)))) :pattern (
  (keys_included1 left right)) )))

(declare-fun has_witness1 (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key2 us_rep1))
  (! (=> (= (has_key container key2) true)
     (let ((result (witness container key2)))
     (and (= (has_witness1 container result) true) (dynamic_invariant result
     true false true)))) :pattern ((witness container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant witness2 true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant1
     (w_get container witness2) true false true)) :pattern ((w_get container
                                                            witness2)) ))))

(declare-const l__split_fields us_main_type)

(declare-const k__split_fields us_main_type)

(declare-const c__split_fields count_type)

(declare-const o count_type)

(declare-const o1 count_type)

(declare-const temp___938 count_type)

(declare-const us Int)

(declare-const us1 Int)

(declare-const temp___914 count_type)

(declare-const temp___915 count_type)

(declare-const result us_split_fields__ref1)

(declare-const c__split_fields1 us_split_fields2)

(declare-const result1 us_split_fields__ref1)

(declare-const c__split_fields2 us_split_fields2)

(define-fun temp___9151 () us_rep1 (mk___rep1
                                   (mk___split_fields1 temp___915)))

(define-fun temp___9141 () us_rep1 (mk___rep1
                                   (mk___split_fields1 temp___914)))

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= o o1))

;; H
  (assert (= temp___938 o1))

;; H
  (assert (= (mk___rep1 (mk___split_fields1 temp___938)) no_element))

;; H
  (assert (and (= us 10) (in_range1 10)))

;; H
  (assert (default_initial_assumption1
  (mk___rep l__split_discrs (mk___split_fields l__split_fields)) false))

;; H
  (assert
  (= 10 (to_rep (rec__my_ordered_maps__m__map__capacity l__split_discrs))))

;; H
  (assert (and (= us1 10) (in_range1 10)))

;; H
  (assert (default_initial_assumption2
  (mk___rep k__split_discrs (mk___split_fields k__split_fields)) false))

;; H
  (assert
  (= 10 (to_rep (rec__my_ordered_maps__m__map__capacity k__split_discrs))))

;; H
  (assert
  (= (is_empty1
     (mk___rep l__split_discrs (mk___split_fields l__split_fields))) true))

;; H
  (assert
  (and
  (= temp___9141 (first
                 (mk___rep l__split_discrs
                 (mk___split_fields l__split_fields))))
  (ite (= (= (length
             (mk___rep l__split_discrs (mk___split_fields l__split_fields))) 0) true)
  (= (bool_eq1 temp___9141 no_element) true)
  (and
  (= (has_key
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     temp___9141) true)
  (= (get
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     temp___9141) 1)))))

;; H
  (assert
  (= result (mk___split_fields__ref1 (mk___split_fields1 c__split_fields))))

;; H
  (assert (= c__split_fields1 (mk___split_fields1 temp___914)))

;; H
  (assert
  (and
  (= temp___9151 (next
                 (mk___rep l__split_discrs
                 (mk___split_fields l__split_fields))
                 (mk___rep1 c__split_fields1)))
  (ite (= (ite (= (bool_eq1 (mk___rep1 c__split_fields1) no_element) false) (=
          (get
          (positions
          (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
          (mk___rep1 c__split_fields1)) (length
                                        (mk___rep l__split_discrs
                                        (mk___split_fields l__split_fields)))) true) true)
  (= (bool_eq1 temp___9151 no_element) true)
  (and
  (= (has_key
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     temp___9151) true)
  (= (get
     (positions
     (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
     temp___9151) (+ (get
                     (positions
                     (mk___rep l__split_discrs
                     (mk___split_fields l__split_fields)))
                     (mk___rep1 c__split_fields1)) 1))))))

;; H
  (assert (= result1 (mk___split_fields__ref1 c__split_fields1)))

;; H
  (assert (= c__split_fields2 (mk___split_fields1 temp___915)))

(assert
;; WP_parameter_def
 ;; File "my_ordered_maps.adb", line 145, characters 0-0
  (not
  (< (length (mk___rep l__split_discrs (mk___split_fields l__split_fields)))
  (to_rep (rec__my_ordered_maps__m__map__capacity l__split_discrs)))))
(check-sat)
(exit)
