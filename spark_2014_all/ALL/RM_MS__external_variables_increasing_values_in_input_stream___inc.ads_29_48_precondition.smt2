;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__inc__increasing_indicator__valid Bool)(rec__inc__increasing_indicator__first integer)(rec__inc__increasing_indicator__second integer)))))
(define-fun us_split_fields_Valid__projection ((a us_split_fields)) Bool
  (rec__inc__increasing_indicator__valid a))

(define-fun us_split_fields_First__projection ((a us_split_fields)) integer
  (rec__inc__increasing_indicator__first a))

(define-fun us_split_fields_Second__projection ((a us_split_fields)) integer
  (rec__inc__increasing_indicator__second a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (rec__inc__increasing_indicator__valid
                           (us_split_fields1 a)) (rec__inc__increasing_indicator__valid
                                                 (us_split_fields1 b)))
                        (= (to_rep
                           (rec__inc__increasing_indicator__first
                           (us_split_fields1 a))) (to_rep
                                                  (rec__inc__increasing_indicator__first
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__inc__increasing_indicator__second
                           (us_split_fields1 a))) (to_rep
                                                  (rec__inc__increasing_indicator__second
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun inc__increasing_indicator__valid__first__bit () Int)

(declare-fun inc__increasing_indicator__valid__last__bit () Int)

(declare-fun inc__increasing_indicator__valid__position () Int)

;; inc__increasing_indicator__valid__first__bit_axiom
  (assert (<= 0 inc__increasing_indicator__valid__first__bit))

;; inc__increasing_indicator__valid__last__bit_axiom
  (assert
  (< inc__increasing_indicator__valid__first__bit inc__increasing_indicator__valid__last__bit))

;; inc__increasing_indicator__valid__position_axiom
  (assert (<= 0 inc__increasing_indicator__valid__position))

(declare-fun inc__increasing_indicator__first__first__bit () Int)

(declare-fun inc__increasing_indicator__first__last__bit () Int)

(declare-fun inc__increasing_indicator__first__position () Int)

;; inc__increasing_indicator__first__first__bit_axiom
  (assert (<= 0 inc__increasing_indicator__first__first__bit))

;; inc__increasing_indicator__first__last__bit_axiom
  (assert
  (< inc__increasing_indicator__first__first__bit inc__increasing_indicator__first__last__bit))

;; inc__increasing_indicator__first__position_axiom
  (assert (<= 0 inc__increasing_indicator__first__position))

(declare-fun inc__increasing_indicator__second__first__bit () Int)

(declare-fun inc__increasing_indicator__second__last__bit () Int)

(declare-fun inc__increasing_indicator__second__position () Int)

;; inc__increasing_indicator__second__first__bit_axiom
  (assert (<= 0 inc__increasing_indicator__second__first__bit))

;; inc__increasing_indicator__second__last__bit_axiom
  (assert
  (< inc__increasing_indicator__second__first__bit inc__increasing_indicator__second__last__bit))

;; inc__increasing_indicator__second__position_axiom
  (assert (<= 0 inc__increasing_indicator__second__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun dummy1 () us_rep)

(declare-datatypes ()
((increasing_indicator__ref
 (mk_increasing_indicator__ref (increasing_indicator__content us_rep)))))
(define-fun increasing_indicator__ref___projection ((a increasing_indicator__ref)) us_rep
  (increasing_indicator__content a))

(declare-fun first (us_rep) Int)

(declare-fun first__function_guard (Int us_rep) Bool)

;; first__post_axiom
  (assert
  (forall ((indicator us_rep)) (! (dynamic_invariant (first indicator) true
  false true) :pattern ((first indicator)) )))

;; first__def_axiom
  (assert
  (forall ((indicator us_rep))
  (! (= (first indicator) (to_rep
                          (rec__inc__increasing_indicator__first
                          (us_split_fields1 indicator)))) :pattern ((first
                                                                    indicator)) )))

(declare-fun second (us_rep) Int)

(declare-fun second__function_guard (Int us_rep) Bool)

;; second__post_axiom
  (assert
  (forall ((indicator us_rep)) (! (dynamic_invariant (second indicator) true
  false true) :pattern ((second indicator)) )))

;; second__def_axiom
  (assert
  (forall ((indicator us_rep))
  (! (= (second indicator) (to_rep
                           (rec__inc__increasing_indicator__second
                           (us_split_fields1 indicator)))) :pattern (
  (second indicator)) )))

(declare-fun is_valid (us_rep) Bool)

(declare-fun is_valid__function_guard (Bool us_rep) Bool)

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((indicator us_rep))
  (! (= (= (is_valid indicator) true)
     (= (rec__inc__increasing_indicator__valid (us_split_fields1 indicator)) true)) :pattern (
  (is_valid indicator)) )))

(declare-fun is_increasing (us_rep) Bool)

(declare-fun is_increasing__function_guard (Bool us_rep) Bool)

;; is_increasing__post_axiom
  (assert true)

;; is_increasing__def_axiom
  (assert
  (forall ((indicator us_rep))
  (! (= (= (is_increasing indicator) true)
     (< (to_rep
        (rec__inc__increasing_indicator__first (us_split_fields1 indicator)))
     (to_rep
     (rec__inc__increasing_indicator__second (us_split_fields1 indicator))))) :pattern (
  (is_increasing indicator)) )))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun result____split_fields () Bool)

(declare-fun result____split_fields1 () integer)

(declare-fun result____split_fields2 () integer)

(declare-fun s () Int)

(declare-fun o () integer)

(declare-fun o1 () Bool)

(declare-fun o2 () integer)

(declare-fun o3 () integer)

(declare-fun temp___209 () Bool)

(declare-fun temp___2091 () integer)

(declare-fun temp___2092 () integer)

(declare-fun o4 () integer)

(declare-fun o5 () Bool)

(declare-fun o6 () integer)

(declare-fun o7 () integer)

(declare-fun temp___215 () Bool)

(declare-fun temp___2151 () integer)

(declare-fun temp___2152 () integer)

(declare-fun o8 () integer)

(declare-fun o9 () Bool)

(declare-fun o10 () integer)

(declare-fun o11 () integer)

(declare-fun temp___213 () Bool)

(declare-fun temp___2131 () integer)

(declare-fun temp___2132 () integer)

(declare-fun o12 () Int)

(declare-fun o13 () Int)

(declare-fun o14 () Bool)

(declare-fun o15 () Int)

(declare-fun inc__read__valid () Bool)

(declare-fun inc__read__v () Int)

(declare-fun result () Bool)

(declare-fun result1 () integer)

(declare-fun result2 () integer)

(declare-fun result____split_fields3 () Bool)

(declare-fun result____split_fields4 () integer)

(declare-fun result____split_fields5 () integer)

(declare-fun result3 () Bool)

(declare-fun result4 () integer)

(declare-fun result5 () integer)

(declare-fun result____split_fields6 () Bool)

(declare-fun result____split_fields7 () integer)

(declare-fun result____split_fields8 () integer)

(declare-fun inc__read__valid1 () Bool)

(declare-fun inc__read__v1 () Int)

(declare-fun result6 () Bool)

(declare-fun result7 () integer)

(declare-fun result8 () integer)

(declare-fun result____split_fields9 () Bool)

(declare-fun result____split_fields10 () integer)

(declare-fun result____split_fields11 () integer)

(declare-fun result9 () us_split_fields__ref)

(declare-fun result____split_fields12 () us_split_fields)

(declare-fun result10 () us_split_fields__ref)

(declare-fun result____split_fields13 () us_split_fields)

(declare-fun result____split_fields14 () us_split_fields__ref)

(declare-fun result____split_fields15 () us_split_fields)

(declare-fun result11 () Bool)

;; H
  (assert (in_range1 s))

;; H
  (assert (in_range1 inc__read__v))

;; H
  (assert (= (to_rep o) inc__read__v))

;; H
  (assert (= result____split_fields o1))

;; H
  (assert (= o o2))

;; H
  (assert (= result____split_fields2 o3))

;; H
  (assert (= temp___209 o1))

;; H
  (assert (= temp___2091 o2))

;; H
  (assert (= temp___2092 o3))

;; H
  (assert
  (= (mk___split_fields__ref (mk___split_fields result result1 result2))
  (mk___split_fields__ref
  (mk___split_fields result____split_fields result____split_fields1
  result____split_fields2))))

;; H
  (assert (= temp___209 result____split_fields3))

;; H
  (assert (= temp___2091 result____split_fields4))

;; H
  (assert (= temp___2092 result____split_fields5))

;; H
  (assert (= result3 result____split_fields3))

;; H
  (assert (= result4 result____split_fields4))

;; H
  (assert (= result5 result____split_fields5))

;; H
  (assert (= inc__read__valid result____split_fields6))

;; H
  (assert (= result____split_fields4 result____split_fields7))

;; H
  (assert (= result____split_fields5 result____split_fields8))

;; H
  (assert (=> (= result____split_fields6 true) (in_range1 inc__read__v1)))

;; H
  (assert
  (=> (= result____split_fields6 true) (= (to_rep o4) inc__read__v1)))

;; H
  (assert
  (=> (= result____split_fields6 true) (= result____split_fields6 o5)))

;; H
  (assert
  (=> (= result____split_fields6 true) (= result____split_fields7 o6)))

;; H
  (assert (=> (= result____split_fields6 true) (= o4 o7)))

;; H
  (assert (=> (= result____split_fields6 true) (= temp___215 o5)))

;; H
  (assert (=> (= result____split_fields6 true) (= temp___2151 o6)))

;; H
  (assert (=> (= result____split_fields6 true) (= temp___2152 o7)))

;; H
  (assert
  (=> (= result____split_fields6 true) (= result6 result____split_fields6)))

;; H
  (assert
  (=> (= result____split_fields6 true) (= result7 result____split_fields7)))

;; H
  (assert
  (=> (= result____split_fields6 true) (= result8 result____split_fields8)))

;; H
  (assert
  (=> (= result____split_fields6 true)
  (= temp___215 result____split_fields9)))

;; H
  (assert
  (=> (= result____split_fields6 true)
  (= temp___2151 result____split_fields10)))

;; H
  (assert
  (=> (= result____split_fields6 true)
  (= temp___2152 result____split_fields11)))

;; H
  (assert
  (=> (= result____split_fields6 true)
  (= result9 (mk___split_fields__ref
             (mk___split_fields result____split_fields9
             result____split_fields10 result____split_fields11)))))

;; H
  (assert
  (=> (= result____split_fields6 true)
  (= result____split_fields12 (mk___split_fields inc__read__valid1
                              result____split_fields10
                              result____split_fields11))))

;; H
  (assert (=> (not (= result____split_fields6 true)) (= (to_rep o8) 0)))

;; H
  (assert
  (=> (not (= result____split_fields6 true)) (= result____split_fields6 o9)))

;; H
  (assert
  (=> (not (= result____split_fields6 true)) (= result____split_fields7 o10)))

;; H
  (assert (=> (not (= result____split_fields6 true)) (= o8 o11)))

;; H
  (assert (=> (not (= result____split_fields6 true)) (= temp___213 o9)))

;; H
  (assert (=> (not (= result____split_fields6 true)) (= temp___2131 o10)))

;; H
  (assert (=> (not (= result____split_fields6 true)) (= temp___2132 o11)))

;; H
  (assert
  (=> (not (= result____split_fields6 true))
  (= result10 (mk___split_fields__ref
              (mk___split_fields result____split_fields6
              result____split_fields7 result____split_fields8)))))

;; H
  (assert
  (=> (not (= result____split_fields6 true))
  (= result____split_fields13 (mk___split_fields temp___213 temp___2131
                              temp___2132))))

;; H
  (assert
  (=> (not (= result____split_fields6 true))
  (= result____split_fields12 result____split_fields13)))

;; H
  (assert
  (= result____split_fields14 (mk___split_fields__ref
                              result____split_fields12)))

;; H
  (assert (= result____split_fields15 result____split_fields12))

;; H
  (assert
  (and
  (= result11 (is_valid
              (mk___rep (us_split_fields__content result____split_fields14))))
  (= (= result11 true)
  (= (rec__inc__increasing_indicator__valid
     (us_split_fields__content result____split_fields14)) true))))

;; H
  (assert (= result11 true))

;; H
  (assert
  (and
  (= o12 (first
         (mk___rep (us_split_fields__content result____split_fields14))))
  (and (in_range1 o12)
  (= o12 (to_rep
         (rec__inc__increasing_indicator__first
         (us_split_fields__content result____split_fields14)))))))

;; H
  (assert
  (and
  (= o13 (second
         (mk___rep (us_split_fields__content result____split_fields14))))
  (and (in_range1 o13)
  (= o13 (to_rep
         (rec__inc__increasing_indicator__second
         (us_split_fields__content result____split_fields14)))))))

;; H
  (assert (= o14 (ite (< o12 o13) true false)))

;; H
  (assert (= o15 (to_int1 o14)))

(assert
;; WP_parameter_def
 ;; File "inc.adb", line 23, characters 0-0
  (not
  (= (is_valid
     (mk___rep (us_split_fields__content result____split_fields14))) true)))
(check-sat)
(exit)
