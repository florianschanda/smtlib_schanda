;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort idx 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (idx idx) Bool)

(declare-const dummy idx)

(declare-datatypes () ((idx__ref (mk_idx__ref (idx__content idx)))))
(define-fun idx__ref___projection ((a idx__ref)) idx (idx__content a))

(define-fun dynamic_invariant ((temp___expr_136 Int)
  (temp___is_init_133 Bool) (temp___skip_constant_134 Bool)
  (temp___do_toplevel_135 Bool)) Bool (=>
                                      (or (= temp___is_init_133 true)
                                      (<= 0 5)) (in_range1 temp___expr_136)))

(declare-sort valid_idx 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (valid_idx valid_idx) Bool)

(declare-const dummy1 valid_idx)

(declare-datatypes ()
((valid_idx__ref (mk_valid_idx__ref (valid_idx__content valid_idx)))))
(define-fun valid_idx__ref___projection ((a valid_idx__ref)) valid_idx
  (valid_idx__content a))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

;; concat_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (Bool Int) (Array Int Bool))

;; singleton_def
  (assert
  (forall ((v Bool))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (select a temp___idx_132) (select b (+ (- b__first a__first) temp___idx_132))))))))))

(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int
  Int) (Array Int Bool))

(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select
  (notb a a_first a_last) i)) )))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_142 Int)
  (temp___is_init_139 Bool) (temp___skip_constant_140 Bool)
  (temp___do_toplevel_141 Bool)) Bool (=>
                                      (or (= temp___is_init_139 true)
                                      (<= 1 5)) (in_range2 temp___expr_142)))

(declare-const a (Array Int Bool))

(declare-const v Int)

(declare-const x Int)

(declare-const loopframe__get__result Int)

(declare-const temp___156 Int)

(declare-const result Int)

(declare-const v1 Int)

(declare-const result1 Int)

(declare-const x1 Int)

(declare-const result2 Int)

(declare-const v2 Int)

(declare-const result3 Int)

(declare-const x2 Int)

(declare-const result4 Int)

(declare-const v3 Int)

(declare-const result5 Int)

(declare-const x3 Int)

(declare-const result6 Int)

(declare-const v4 Int)

(declare-const result7 Int)

(declare-const x4 Int)

(declare-const result8 Int)

(declare-const v5 Int)

(declare-const result9 Int)

(declare-const x5 Int)

(declare-const result10 Int)

(declare-const v6 Int)

(declare-const v7 Int)

(declare-const x6 Int)

(declare-const v8 Int)

(declare-const x7 Int)

(declare-const v9 Int)

(declare-const x8 Int)

(declare-const v10 Int)

(declare-const x9 Int)

(declare-const v11 Int)

(declare-const x10 Int)

(declare-const v12 Int)

(declare-const x11 Int)

(declare-const v13 int__ref)

(declare-const x12 int__ref)

(declare-const v14 Int)

(declare-const x13 Int)

(declare-const v15 int__ref)

(declare-const x14 int__ref)

(declare-const v16 Int)

(declare-const x15 Int)

(declare-const result11 int__ref)

(declare-const loopframe__get__result1 Int)

(declare-const loopframe__get__result2 int__ref)

(declare-const loopframe__get__result3 Int)

(declare-const v17 int__ref)

(declare-const x16 int__ref)

(declare-const loopframe__get__result4 int__ref)

(declare-const v18 Int)

(declare-const x17 Int)

(declare-const loopframe__get__result5 Int)

(define-fun x18 () int__ref (mk_int__ref x10))

(define-fun v19 () int__ref (mk_int__ref v11))

(define-fun x19 () int__ref (mk_int__ref x8))

(define-fun v20 () int__ref (mk_int__ref v9))

(define-fun result12 () int__ref (mk_int__ref result1))

(define-fun x20 () int__ref (mk_int__ref x))

(declare-const result13 Int)

;; H
  (assert (= (mk_int__ref result) (mk_int__ref v)))

;; H
  (assert (= v1 0))

;; H
  (assert (in_range1 v1))

;; H
  (assert
  (or
  (and
  (and (and (= result12 x20) (= x1 1))
  (and (and (not (= (select a x1) true)) (= v2 v1))
  (and (and (= x1 result3) (= x2 2))
  (and (and (not (= (select a x2) true)) (= v3 v2))
  (and (and (= x2 result5) (= x3 3))
  (and (and (not (= (select a x3) true)) (= v4 v3))
  (and (and (= x3 result7) (= x4 4))
  (and (and (not (= (select a x4) true)) (= v5 v4))
  (and (and (= x4 result9) (= x5 5))
  (and (not (= (select a x5) true)) (= v6 v5)))))))))))
  (and (and (= x14 (mk_int__ref x5)) (= v15 (mk_int__ref v6)))
  (and (= x15 x5) (= v16 v6))))
  (and
  (and (= temp___156 v1)
  (and (and (= result12 x20) (= x1 1))
  (or
  (and
  (and (and (= x12 (mk_int__ref x1)) (= v13 (mk_int__ref v2)))
  (and (= x13 x1) (= v14 v2)))
  (and (= (select a x1) true) (and (= v1 result2) (= v2 x1))))
  (and (and (not (= (select a x1) true)) (= v2 v1))
  (and (and (and (= x12 x18) (= v13 v19)) (and (= x13 x11) (= v14 v12)))
  (and (and (= x1 result3) (= x2 2))
  (or
  (and (and (and (= x2 x10) (= v3 v11)) (and (= x11 x2) (= v12 v3)))
  (and (= (select a x2) true) (and (= v2 result4) (= v3 x2))))
  (and (and (not (= (select a x2) true)) (= v3 v2))
  (and (and (and (= x18 x19) (= v19 v20)) (and (= x11 x9) (= v12 v10)))
  (and (and (= x2 result5) (= x3 3))
  (or
  (and (and (and (= x3 x8) (= v4 v9)) (and (= x9 x3) (= v10 v4)))
  (and (= (select a x3) true) (and (= v3 result6) (= v4 x3))))
  (and (and (not (= (select a x3) true)) (= v4 v3))
  (and
  (and (and (= x19 (mk_int__ref x6)) (= v20 (mk_int__ref v7)))
  (and (= x9 x7) (= v10 v8)))
  (and (and (= x3 result7) (= x4 4))
  (or
  (and (and (and (= x4 x6) (= v5 v7)) (and (= x7 x4) (= v8 v5)))
  (and (= (select a x4) true) (and (= v4 result8) (= v5 x4))))
  (and (and (not (= (select a x4) true)) (= v5 v4))
  (and (and (and (= x5 x6) (= v6 v7)) (and (= x7 x5) (= v8 v6)))
  (and (and (= x4 result9) (= x5 5))
  (and (= (select a x5) true) (and (= v5 result10) (= v6 x5)))))))))))))))))))))
  (and (and (= x14 x12) (= v15 v13)) (and (= x15 x13) (= v16 v14))))))

;; H
  (assert (= loopframe__get__result2 (mk_int__ref loopframe__get__result1)))

;; H
  (assert (= loopframe__get__result3 loopframe__get__result1))

;; H
  (assert (= result11 (mk_int__ref loopframe__get__result)))

;; H
  (assert (= loopframe__get__result1 (int__content v15)))

;; H
  (assert (= loopframe__get__result4 loopframe__get__result2))

;; H
  (assert (= x16 x14))

;; H
  (assert (= v17 v15))

;; H
  (assert (= loopframe__get__result5 loopframe__get__result3))

;; H
  (assert (= x17 x15))

;; H
  (assert (= v18 v16))

;; H
  (assert (= result13 (int__content loopframe__get__result4)))

;; H
  (assert (not (= (int__content loopframe__get__result4) 0)))

(assert
;; WP_parameter_def
 ;; File "loopframe.ads", line 5, characters 0-0
  (not (= (select a (int__content loopframe__get__result4)) true)))
(check-sat)
(exit)
