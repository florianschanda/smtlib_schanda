;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(declare-fun to_int1 ((_ BitVec 32)) Int)

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-fun dummy1 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-fun to_rep1 (positive) Int)

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort hash_type 0)

(declare-fun attr__ATTRIBUTE_MODULUS () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (hash_type hash_type) Bool)

(declare-fun dummy2 () hash_type)

(declare-datatypes ()
((hash_type__ref (mk_hash_type__ref (hash_type__content hash_type)))))
(define-fun hash_type__ref___projection ((a hash_type__ref)) hash_type
  (hash_type__content a))

(define-fun dynamic_invariant ((temp___expr_167 (_ BitVec 32))
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)) Bool true)

(declare-sort count_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (count_type count_type) Bool)

(declare-fun dummy3 () count_type)

(declare-datatypes ()
((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type
  (count_type__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__my_maps__my_rec__f positive)(rec__my_maps__my_rec__g integer)))))
(define-fun us_split_fields_F__projection ((a us_split_fields)) positive
  (rec__my_maps__my_rec__f a))

(define-fun us_split_fields_G__projection ((a us_split_fields)) integer
  (rec__my_maps__my_rec__g a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_7__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_10__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                               a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__my_maps__my_rec__f (us_split_fields1 a)))
                        (to_rep1
                        (rec__my_maps__my_rec__f (us_split_fields1 b))))
                        (= (to_rep
                           (rec__my_maps__my_rec__g (us_split_fields1 a)))
                        (to_rep
                        (rec__my_maps__my_rec__g (us_split_fields1 b)))))
                   true false))

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun my_maps__my_rec__f__first__bit () Int)

(declare-fun my_maps__my_rec__f__last__bit () Int)

(declare-fun my_maps__my_rec__f__position () Int)

;; my_maps__my_rec__f__first__bit_axiom
  (assert (<= 0 my_maps__my_rec__f__first__bit))

;; my_maps__my_rec__f__last__bit_axiom
  (assert (< my_maps__my_rec__f__first__bit my_maps__my_rec__f__last__bit))

;; my_maps__my_rec__f__position_axiom
  (assert (<= 0 my_maps__my_rec__f__position))

(declare-fun my_maps__my_rec__g__first__bit () Int)

(declare-fun my_maps__my_rec__g__last__bit () Int)

(declare-fun my_maps__my_rec__g__position () Int)

;; my_maps__my_rec__g__first__bit_axiom
  (assert (<= 0 my_maps__my_rec__g__first__bit))

;; my_maps__my_rec__g__last__bit_axiom
  (assert (< my_maps__my_rec__g__first__bit my_maps__my_rec__g__last__bit))

;; my_maps__my_rec__g__position_axiom
  (assert (<= 0 my_maps__my_rec__g__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-fun dummy4 () us_rep)

(declare-datatypes ()
((my_rec__ref (mk_my_rec__ref (my_rec__content us_rep)))))
(define-fun my_rec__ref___projection ((a my_rec__ref)) us_rep (my_rec__content
                                                              a))

(declare-datatypes ()
((key_type__ref (mk_key_type__ref (key_type__content us_rep)))))
(define-fun key_type__ref_4__projection ((a key_type__ref)) us_rep (key_type__content
                                                                   a))

(declare-fun to_rep2 (hash_type) (_ BitVec 32))

(declare-fun of_rep2 ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int3 ((x hash_type)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-fun to_rep3 (count_type) Int)

(declare-fun of_rep3 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range3
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs
 (rec__my_maps__n__map__capacity count_type)(rec__my_maps__n__map__modulus hash_type)))))
(define-fun us_split_discrs_3__projection ((a us_split_discrs)) count_type
  (rec__my_maps__n__map__capacity a))

(define-fun us_split_discrs_4__projection ((a us_split_discrs)) hash_type
  (rec__my_maps__n__map__modulus a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref_2__projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields2 (mk___split_fields1 (rec__my_maps__n__map us_main_type)))))
(define-fun us_split_fields_Map2__projection ((a us_split_fields2)) us_main_type
  (rec__my_maps__n__map a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_8__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (mk___rep1
 (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep_11__projection ((a us_rep1)) us_split_discrs (us_split_discrs1
                                                                a))

(define-fun us_rep_12__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep3
                            (rec__my_maps__n__map__capacity
                            (us_split_discrs1 a))) (to_rep3
                                                   (rec__my_maps__n__map__capacity
                                                   (us_split_discrs1 b))))
                         (= (to_rep2
                            (rec__my_maps__n__map__modulus
                            (us_split_discrs1 a))) (to_rep2
                                                   (rec__my_maps__n__map__modulus
                                                   (us_split_discrs1 b)))))
                         (= (us_main_eq
                            (rec__my_maps__n__map (us_split_fields3 a))
                            (rec__my_maps__n__map (us_split_fields3 b))) true))
                    true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep1) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))

(declare-fun my_maps__n__map__capacity__first__bit () Int)

(declare-fun my_maps__n__map__capacity__last__bit () Int)

(declare-fun my_maps__n__map__capacity__position () Int)

;; my_maps__n__map__capacity__first__bit_axiom
  (assert (<= 0 my_maps__n__map__capacity__first__bit))

;; my_maps__n__map__capacity__last__bit_axiom
  (assert
  (< my_maps__n__map__capacity__first__bit my_maps__n__map__capacity__last__bit))

;; my_maps__n__map__capacity__position_axiom
  (assert (<= 0 my_maps__n__map__capacity__position))

(declare-fun my_maps__n__map__modulus__first__bit () Int)

(declare-fun my_maps__n__map__modulus__last__bit () Int)

(declare-fun my_maps__n__map__modulus__position () Int)

;; my_maps__n__map__modulus__first__bit_axiom
  (assert (<= 0 my_maps__n__map__modulus__first__bit))

;; my_maps__n__map__modulus__last__bit_axiom
  (assert
  (< my_maps__n__map__modulus__first__bit my_maps__n__map__modulus__last__bit))

;; my_maps__n__map__modulus__position_axiom
  (assert (<= 0 my_maps__n__map__modulus__position))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-fun dummy5 () us_rep1)

(declare-datatypes () ((map__ref (mk_map__ref (map__content us_rep1)))))
(define-fun map__ref_4__projection ((a map__ref)) us_rep1 (map__content a))

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2 (rec__my_maps__n__cursor__node count_type)))))
(define-fun us_split_fields_Node2__projection ((a us_split_fields4)) count_type
  (rec__my_maps__n__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_9__projection ((a us_split_fields__ref2)) us_split_fields4
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_13__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                 a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (= (to_rep3
                            (rec__my_maps__n__cursor__node
                            (us_split_fields5 a))) (to_rep3
                                                   (rec__my_maps__n__cursor__node
                                                   (us_split_fields5 b))))
                    true false))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep2) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))

(declare-fun my_maps__n__cursor__node__first__bit () Int)

(declare-fun my_maps__n__cursor__node__last__bit () Int)

(declare-fun my_maps__n__cursor__node__position () Int)

;; my_maps__n__cursor__node__first__bit_axiom
  (assert (<= 0 my_maps__n__cursor__node__first__bit))

;; my_maps__n__cursor__node__last__bit_axiom
  (assert
  (< my_maps__n__cursor__node__first__bit my_maps__n__cursor__node__last__bit))

;; my_maps__n__cursor__node__position_axiom
  (assert (<= 0 my_maps__n__cursor__node__position))

(declare-fun user_eq6 (us_rep2 us_rep2) Bool)

(declare-fun dummy6 () us_rep2)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep2)))))
(define-fun cursor__ref_2__projection ((a cursor__ref)) us_rep2 (cursor__content
                                                                a))

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-fun length1 (Int us_rep1) Int)

(declare-fun length__function_guard1 (Int Int us_rep1) Bool)

(define-fun dynamic_invariant1 ((temp___expr_173 Int)
  (temp___is_init_170 Bool) (temp___skip_constant_171 Bool)
  (temp___do_toplevel_172 Bool)) Bool (=>
                                      (or (= temp___is_init_170 true)
                                      (<= 0 2147483647)) (in_range3
                                      temp___expr_173)))

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun oeq1 (Int us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq5 a b) (oeq a b)) :pattern ((user_eq5 a b)) )))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep3
                (rec__my_maps__n__map__capacity (us_split_discrs1 container))))
     (dynamic_invariant1 result true false true))) :pattern ((length
                                                             container)) )))

;; length__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep1)) (! (dynamic_invariant1
  (length1 attr__tag container) true false
  true) :pattern ((length1 attr__tag container)) ))))

(declare-datatypes ()
((element_type__ref (mk_element_type__ref (element_type__content us_rep)))))
(define-fun element_type__ref_7__projection ((a element_type__ref)) us_rep
  (element_type__content a))

(declare-sort extended_index 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (extended_index extended_index) Bool)

(declare-fun dummy7 () extended_index)

(declare-datatypes ()
((extended_index__ref
 (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref_2__projection ((a extended_index__ref)) extended_index
  (extended_index__content a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep3) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq8 (us_rep3 us_rep3) Bool)

(declare-fun dummy8 () us_rep3)

(declare-datatypes ()
((sequence__ref (mk_sequence__ref (sequence__content us_rep3)))))
(define-fun sequence__ref_2__projection ((a sequence__ref)) us_rep3 (sequence__content
                                                                    a))

(declare-fun get (us_rep3 Int) us_rep)

(declare-fun get__function_guard (us_rep us_rep3 Int) Bool)

(declare-fun length2 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(define-fun last ((container us_rep3)) Int (+ 0 (length2 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

(declare-datatypes ()
((key_type__ref1 (mk_key_type__ref1 (key_type__content1 us_rep2)))))
(define-fun key_type__ref_6__projection ((a key_type__ref1)) us_rep2
  (key_type__content1 a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-fun value__size4 () Int)

(declare-fun object__size4 (us_rep4) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 (us_rep4) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a us_rep4)) (<= 0 (object__alignment4 a))))

(declare-fun user_eq9 (us_rep4 us_rep4) Bool)

(declare-fun dummy9 () us_rep4)

(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 us_rep4)))))
(define-fun map__ref_6__projection ((a map__ref1)) us_rep4 (map__content1 a))

(declare-fun has_key (us_rep4 us_rep2) Bool)

(declare-fun has_key__function_guard (Bool us_rep4 us_rep2) Bool)

(declare-fun get1 (us_rep4 us_rep2) Int)

(declare-fun get__function_guard1 (Int us_rep4 us_rep2) Bool)

(declare-fun keys (us_rep1) us_rep3)

(declare-fun keys__function_guard (us_rep3 us_rep1) Bool)

(declare-fun positions (us_rep1) us_rep4)

(declare-fun positions__function_guard (us_rep4 us_rep1) Bool)

(declare-fun is_empty (us_rep1) Bool)

(declare-fun is_empty__function_guard (Bool us_rep1) Bool)

(declare-fun is_empty1 (Int us_rep1) Bool)

(declare-fun is_empty__function_guard1 (Bool Int us_rep1) Bool)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

;; is_empty__post__dispatch_axiom
  (assert true)

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep5 0)

(declare-fun bool_eq5 (us_rep5 us_rep5) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep5) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep5) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep5)) (<= 0 (object__alignment5 a))))

(declare-fun user_eq10 (us_rep5 us_rep5) Bool)

(declare-fun dummy10 () us_rep5)

(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 us_rep5)))))
(define-fun map__ref_5__projection ((a map__ref2)) us_rep5 (map__content2 a))

(declare-fun oeq2 (us_rep5 us_rep5) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep5 us_rep5) Bool)

(declare-fun k_keys_included (us_rep3 us_rep3) Bool)

(declare-fun k_keys_included__function_guard (Bool us_rep3 us_rep3) Bool)

(declare-fun model__ (us_rep1) us_rep5)

(declare-fun model____function_guard (us_rep5 us_rep1) Bool)

(declare-fun assign__specific_post (Int us_split_fields2 us_split_discrs
  us_rep1 us_split_fields2) Bool)

(declare-datatypes ()
((key_type__ref2 (mk_key_type__ref2 (key_type__content2 us_rep)))))
(define-fun key_type__ref_5__projection ((a key_type__ref2)) us_rep (key_type__content2
                                                                    a))

(declare-fun get2 (us_rep5 us_rep) Int)

(declare-fun get__function_guard2 (Int us_rep5 us_rep) Bool)

(define-fun key ((container us_rep1)
  (position us_rep2)) us_rep (get (keys container)
                             (get1 (positions container) position)))

(declare-fun key__function_guard (us_rep us_rep1 us_rep2) Bool)

(declare-fun key1 (Int us_rep1 us_rep2) us_rep)

(declare-fun key__function_guard1 (us_rep Int us_rep1 us_rep2) Bool)

(define-fun element ((container us_rep1)
  (position us_rep2)) Int (get2 (model__ container) (key container position)))

(declare-fun element__function_guard (Int us_rep1 us_rep2) Bool)

(declare-fun element1 (Int us_rep1 us_rep2) Int)

(declare-fun element__function_guard1 (Int Int us_rep1 us_rep2) Bool)

(declare-sort element_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq11 (element_type element_type) Bool)

(declare-fun dummy11 () element_type)

(declare-datatypes ()
((element_type__ref1
 (mk_element_type__ref1 (element_type__content1 element_type)))))
(define-fun element_type__ref_5__projection ((a element_type__ref1)) element_type
  (element_type__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_579 Int)
  (temp___is_init_576 Bool) (temp___skip_constant_577 Bool)
  (temp___do_toplevel_578 Bool)) Bool (=>
                                      (or (= temp___is_init_576 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range5 temp___expr_579)))

(define-fun has_element ((container us_rep1)
  (position us_rep2)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep1 us_rep2) Bool)

(declare-fun has_element1 (Int us_rep1 us_rep2) Bool)

(declare-fun has_element__function_guard1 (Bool Int us_rep1 us_rep2) Bool)

;; element__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep1))
  (forall ((position us_rep2)) (! (dynamic_invariant2
  (element1 attr__tag container position) true false
  true) :pattern ((element1 attr__tag container position)) )))))

(declare-fun keys_included (us_rep5 us_rep5) Bool)

(declare-fun keys_included__function_guard (Bool us_rep5 us_rep5) Bool)

(define-fun same_keys ((left us_rep5)
  (right us_rep5)) Bool (and (keys_included left right) (keys_included right
                                                        left)))

(declare-fun same_keys__function_guard (Bool us_rep5 us_rep5) Bool)

(declare-fun elements_equal_except (us_rep5 us_rep5 us_rep) Bool)

(declare-fun elements_equal_except__function_guard (Bool us_rep5 us_rep5
  us_rep) Bool)

(define-fun oeq3 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length2 left) (length2 right)) (ite
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n
                                                                (last left)))
                                                                (= (bool_eq
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard3 (Bool us_rep3 us_rep3) Bool)

(declare-fun oeq4 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep4 us_rep4) Bool)

(declare-fun replace_element__specific_post (Int us_split_fields2
  us_split_discrs us_rep2 Int us_split_fields2) Bool)

(declare-fun move__specific_post (Int us_split_fields2 us_split_discrs
  us_split_fields2 us_split_discrs us_split_fields2 us_split_fields2) Bool)

(declare-fun has_key1 (us_rep5 us_rep) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep5 us_rep) Bool)

(define-fun contains ((container us_rep1)
  (key2 us_rep)) Bool (has_key1 (model__ container) key2))

(declare-fun contains__function_guard (Bool us_rep1 us_rep) Bool)

(declare-fun contains1 (Int us_rep1 us_rep) Bool)

(declare-fun contains__function_guard1 (Bool Int us_rep1 us_rep) Bool)

;; contains__post__dispatch_axiom
  (assert true)

(define-fun my_eq ((x us_rep)
  (y us_rep)) Bool (= (to_rep1
                      (rec__my_maps__my_rec__f (us_split_fields1 x)))
  (to_rep1 (rec__my_maps__my_rec__f (us_split_fields1 y)))))

(declare-fun my_eq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun ole (us_rep5 us_rep5) Bool)

(declare-fun ole__function_guard (Bool us_rep5 us_rep5) Bool)

(declare-fun keys_included_except (us_rep5 us_rep5 us_rep) Bool)

(declare-fun keys_included_except__function_guard (Bool us_rep5 us_rep5
  us_rep) Bool)

(declare-fun keys_included_except1 (us_rep4 us_rep4 us_rep2) Bool)

(declare-fun keys_included_except__function_guard1 (Bool us_rep4 us_rep4
  us_rep2) Bool)

(declare-fun mapping_preserved (us_rep3 us_rep3 us_rep4 us_rep4) Bool)

(declare-fun mapping_preserved__function_guard (Bool us_rep3 us_rep3 us_rep4
  us_rep4) Bool)

(declare-fun insert__specific_post (Int us_split_fields2 us_split_discrs
  us_rep Int us_split_fields4 Bool us_split_fields2 us_split_fields4
  Bool) Bool)

(declare-fun no_element () us_rep2)

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun find (us_rep3 us_rep) Int)

(declare-fun find__function_guard (Int us_rep3 us_rep) Bool)

(declare-fun find1 (us_rep1 us_rep) us_rep2)

(declare-fun find__function_guard1 (us_rep2 us_rep1 us_rep) Bool)

(declare-fun find2 (Int us_rep1 us_rep) us_rep2)

(declare-fun find__function_guard2 (us_rep2 Int us_rep1 us_rep) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key2 us_rep))
  (! (let ((result (find1 container key2)))
     (ite (not (= (has_key1 (model__ container) key2) true))
     (= (bool_eq2 result no_element) true)
     (and
     (and (= (has_key (positions container) result) true)
     (= (get1 (positions container) result) (find (keys container) key2)))
     (= (my_eq (key container result) key2) true)))) :pattern ((find1
                                                               container
                                                               key2)) ))))

;; find__post__dispatch_axiom
  (assert true)

(declare-fun insert__2__specific_post (Int us_split_fields2 us_split_discrs
  us_rep Int us_split_fields2) Bool)

(define-fun equal_except ((left us_rep3) (right us_rep3)
  (position Int)) Bool (and (= (length2 left) (length2 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (=
                                                                    (bool_eq
                                                                    (get left
                                                                    i)
                                                                    (get
                                                                    right i)) true))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep3 us_rep3 Int) Bool)

(define-fun element__2 ((container us_rep1)
  (key2 us_rep)) Int (get2 (model__ container) key2))

(declare-fun element__2__function_guard (Int us_rep1 us_rep) Bool)

(declare-fun element__21 (Int us_rep1 us_rep) Int)

(declare-fun element__2__function_guard1 (Int Int us_rep1 us_rep) Bool)

(declare-fun include__specific_post (Int us_split_fields2 us_split_discrs
  us_rep Int us_split_fields2) Bool)

(declare-fun replace__specific_post (Int us_split_fields2 us_split_discrs
  us_rep Int us_split_fields2) Bool)

(declare-fun exclude__specific_post (Int us_split_fields2 us_split_discrs
  us_rep us_split_fields2) Bool)

(declare-fun delete__specific_post (Int us_split_fields2 us_split_discrs
  us_rep us_split_fields2) Bool)

(declare-fun delete__2__specific_post (Int us_split_fields2 us_split_discrs
  us_split_fields4 us_split_fields2 us_split_fields4) Bool)

(declare-fun first (us_rep1) us_rep2)

(declare-fun first__function_guard (us_rep2 us_rep1) Bool)

(declare-fun first1 (Int us_rep1) us_rep2)

(declare-fun first__function_guard1 (us_rep2 Int us_rep1) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (first container)))
     (ite (= (length container) 0) (= (bool_eq2 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) 1)))) :pattern ((first container)) )))

;; first__post__dispatch_axiom
  (assert true)

(declare-fun next (us_rep1 us_rep2) us_rep2)

(declare-fun next__function_guard (us_rep2 us_rep1 us_rep2) Bool)

(declare-fun next1 (Int us_rep1 us_rep2) us_rep2)

(declare-fun next__function_guard1 (us_rep2 Int us_rep1 us_rep2) Bool)

;; next__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position us_rep2))
  (! (=>
     (or (= (has_element container position) true)
     (= (bool_eq2 position no_element) true))
     (let ((result (next container position)))
     (ite (or (= (bool_eq2 position no_element) true)
          (= (get1 (positions container) position) (length container)))
     (= (bool_eq2 result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) (+ (get1 (positions container)
                                               position) 1)))))) :pattern (
  (next container position)) ))))

;; next__post__dispatch_axiom
  (assert true)

(declare-fun default_modulus (Int) (_ BitVec 32))

(declare-fun default_modulus__function_guard ((_ BitVec 32) Int) Bool)

;; default_modulus__post_axiom
  (assert
  (forall ((capacity Int))
  (! (=> (dynamic_invariant1 capacity true true true) (dynamic_invariant
     (default_modulus capacity) true false true)) :pattern ((default_modulus
                                                            capacity)) )))

(declare-fun r16b () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(define-fun in_range6 ((rec__my_maps__n__map__capacity1 Int)
  (rec__my_maps__n__map__modulus1 (_ BitVec 32))
  (a us_rep1)) Bool (and
                    (= rec__my_maps__n__map__capacity1 (to_rep3
                                                       (rec__my_maps__n__map__capacity
                                                       (us_split_discrs1 a))))
                    (= rec__my_maps__n__map__modulus1 (to_rep2
                                                      (rec__my_maps__n__map__modulus
                                                      (us_split_discrs1 a))))))

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep1) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment6 a))))

(declare-fun my_maps__n__map__capacity__first__bit1 () Int)

(declare-fun my_maps__n__map__capacity__last__bit1 () Int)

(declare-fun my_maps__n__map__capacity__position1 () Int)

;; my_maps__n__map__capacity__first__bit_axiom
  (assert (<= 0 my_maps__n__map__capacity__first__bit1))

;; my_maps__n__map__capacity__last__bit_axiom
  (assert
  (< my_maps__n__map__capacity__first__bit1 my_maps__n__map__capacity__last__bit1))

;; my_maps__n__map__capacity__position_axiom
  (assert (<= 0 my_maps__n__map__capacity__position1))

(declare-fun my_maps__n__map__modulus__first__bit1 () Int)

(declare-fun my_maps__n__map__modulus__last__bit1 () Int)

(declare-fun my_maps__n__map__modulus__position1 () Int)

;; my_maps__n__map__modulus__first__bit_axiom
  (assert (<= 0 my_maps__n__map__modulus__first__bit1))

;; my_maps__n__map__modulus__last__bit_axiom
  (assert
  (< my_maps__n__map__modulus__first__bit1 my_maps__n__map__modulus__last__bit1))

;; my_maps__n__map__modulus__position_axiom
  (assert (<= 0 my_maps__n__map__modulus__position1))

(declare-fun user_eq12 (us_rep1 us_rep1) Bool)

(declare-fun dummy12 () us_rep1)

(declare-datatypes () ((tlS__ref (mk_tlS__ref (tlS__content us_rep1)))))
(define-fun tlS__ref_3__projection ((a tlS__ref)) us_rep1 (tlS__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq12 a b) (oeq a b)) :pattern ((user_eq12 a b)) )))

(define-fun dynamic_invariant3 ((temp___expr_865 us_rep1)
  (temp___is_init_862 Bool) (temp___skip_constant_863 Bool)
  (temp___do_toplevel_864 Bool)) Bool (=>
                                      (not (= temp___skip_constant_863 true))
                                      (in_range6 10 r16b temp___expr_865)))

(define-fun default_initial_assumption ((temp___expr_868 us_rep1)
  (temp___skip_top_level_869 Bool)) Bool (and
                                         (and
                                         (= (to_rep3
                                            (rec__my_maps__n__map__capacity
                                            (us_split_discrs1
                                            temp___expr_868))) 10)
                                         (= (to_rep2
                                            (rec__my_maps__n__map__modulus
                                            (us_split_discrs1
                                            temp___expr_868))) r16b))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_869 true))
                                         (= (is_empty temp___expr_868) true))))

(declare-fun l__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun r19b () (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(define-fun in_range7 ((rec__my_maps__n__map__capacity1 Int)
  (rec__my_maps__n__map__modulus1 (_ BitVec 32))
  (a us_rep1)) Bool (and
                    (= rec__my_maps__n__map__capacity1 (to_rep3
                                                       (rec__my_maps__n__map__capacity
                                                       (us_split_discrs1 a))))
                    (= rec__my_maps__n__map__modulus1 (to_rep2
                                                      (rec__my_maps__n__map__modulus
                                                      (us_split_discrs1 a))))))

(declare-fun value__size7 () Int)

(declare-fun object__size7 (us_rep1) Int)

(declare-fun value__alignment7 () Int)

(declare-fun object__alignment7 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size7 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment7))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment7 a))))

(declare-fun my_maps__n__map__capacity__first__bit2 () Int)

(declare-fun my_maps__n__map__capacity__last__bit2 () Int)

(declare-fun my_maps__n__map__capacity__position2 () Int)

;; my_maps__n__map__capacity__first__bit_axiom
  (assert (<= 0 my_maps__n__map__capacity__first__bit2))

;; my_maps__n__map__capacity__last__bit_axiom
  (assert
  (< my_maps__n__map__capacity__first__bit2 my_maps__n__map__capacity__last__bit2))

;; my_maps__n__map__capacity__position_axiom
  (assert (<= 0 my_maps__n__map__capacity__position2))

(declare-fun my_maps__n__map__modulus__first__bit2 () Int)

(declare-fun my_maps__n__map__modulus__last__bit2 () Int)

(declare-fun my_maps__n__map__modulus__position2 () Int)

;; my_maps__n__map__modulus__first__bit_axiom
  (assert (<= 0 my_maps__n__map__modulus__first__bit2))

;; my_maps__n__map__modulus__last__bit_axiom
  (assert
  (< my_maps__n__map__modulus__first__bit2 my_maps__n__map__modulus__last__bit2))

;; my_maps__n__map__modulus__position_axiom
  (assert (<= 0 my_maps__n__map__modulus__position2))

(declare-fun user_eq13 (us_rep1 us_rep1) Bool)

(declare-fun dummy13 () us_rep1)

(declare-datatypes () ((tkS__ref (mk_tkS__ref (tkS__content us_rep1)))))
(define-fun tkS__ref_3__projection ((a tkS__ref)) us_rep1 (tkS__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq13 a b) (oeq a b)) :pattern ((user_eq13 a b)) )))

(define-fun dynamic_invariant4 ((temp___expr_876 us_rep1)
  (temp___is_init_873 Bool) (temp___skip_constant_874 Bool)
  (temp___do_toplevel_875 Bool)) Bool (=>
                                      (not (= temp___skip_constant_874 true))
                                      (in_range7 10 r19b temp___expr_876)))

(define-fun default_initial_assumption1 ((temp___expr_879 us_rep1)
  (temp___skip_top_level_880 Bool)) Bool (and
                                         (and
                                         (= (to_rep3
                                            (rec__my_maps__n__map__capacity
                                            (us_split_discrs1
                                            temp___expr_879))) 10)
                                         (= (to_rep2
                                            (rec__my_maps__n__map__modulus
                                            (us_split_discrs1
                                            temp___expr_879))) r19b))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_880 true))
                                         (= (is_empty temp___expr_879) true))))

(declare-fun k__split_discrs () us_split_discrs)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant6 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

;; no_element__def_axiom
  (assert (= no_element (mk___rep2 (mk___split_fields2 (of_rep3 0)))))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq8 a b) (oeq3 a b)) :pattern ((user_eq8 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_656 us_rep3)
  (temp___skip_top_level_657 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_657 true))
                                         (= (length2 temp___expr_656) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key2 us_rep))
  (! (let ((result (find container key2)))
     (and
     (=> (< 0 result)
     (and (<= result (length2 container))
     (= (my_eq key2 (get container result)) true))) (dynamic_invariant1
     result true false true))) :pattern ((find container key2)) ))))

;; k_keys_included__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (k_keys_included left right) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length2 left)))
     (and (< 0 (find right (get left i)))
     (= (bool_eq (get right (find right (get left i))) (get left i)) true))))) :pattern (
  (k_keys_included left right)) )))

(declare-fun length3 (us_rep4) Int)

(declare-fun length__function_guard3 (Int us_rep4) Bool)

(declare-fun is_empty2 (us_rep4) Bool)

(declare-fun is_empty__function_guard2 (Bool us_rep4) Bool)

(define-fun default_initial_assumption3 ((temp___expr_676 us_rep4)
  (temp___skip_top_level_677 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_677 true))
                                         (and
                                         (= (is_empty2 temp___expr_676) true)
                                         (= (length3 temp___expr_676) 0))))

(declare-fun keys_included1 (us_rep4 us_rep4) Bool)

(declare-fun keys_included__function_guard1 (Bool us_rep4 us_rep4) Bool)

;; mapping_preserved__post_axiom
  (assert
  (forall ((k_left us_rep3) (k_right us_rep3))
  (forall ((p_left us_rep4) (p_right us_rep4))
  (! (=> (= (mapping_preserved k_left k_right p_left p_right) true)
     (and
     (and (= (keys_included1 p_left p_right) true)
     (= (k_keys_included k_left k_right) true))
     (forall ((c us_rep2))
     (=> (= (has_key p_left c) true)
     (= (bool_eq (get k_left (get1 p_left c)) (get k_right (get1 p_right c))) true))))) :pattern (
  (mapping_preserved k_left k_right p_left p_right)) ))))

(declare-fun length4 (us_rep5) Int)

(declare-fun length__function_guard4 (Int us_rep5) Bool)

(declare-fun is_empty3 (us_rep5) Bool)

(declare-fun is_empty__function_guard3 (Bool us_rep5) Bool)

(define-fun default_initial_assumption4 ((temp___expr_623 us_rep5)
  (temp___skip_top_level_624 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_624 true))
                                         (and
                                         (= (is_empty3 temp___expr_623) true)
                                         (= (length4 temp___expr_623) 0))))

;; model____post_axiom
  (assert true)

;; keys__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (keys container)))
     (and
     (and
     (and
     (and (= (length2 result) (length container))
     (forall ((temp___693 Int))
     (=>
     (and (in_range4 temp___693)
     (= (iter_has_element result temp___693) true))
     (= (has_key1 (model__ container) (get result temp___693)) true))))
     (forall ((key2 us_rep))
     (=> (= (has_key1 (model__ container) key2) true)
     (and (< 0 (find result key2))
     (= (my_eq (get result (find result key2)) key2) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (= (find result (get result i)) i))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j (length container)))
     (=> (= (my_eq (get result i) (get result j)) true) (= i j)))))))) :pattern (
  (keys container)) )))

;; positions__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep2))
     (=> (= (has_key result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length container)))
     (forall ((j us_rep2))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq2 i j) true))))))))) :pattern (
  (positions container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq left right) true)
     (= (oeq2 (model__ left) (model__ right)) true)) :pattern ((oeq left
                                                               right)) )))

;; oeq__post__dispatch_axiom
  (assert true)

;; key__post__dispatch_axiom
  (assert true)

;; element__2__post__dispatch_axiom
  (assert
  (forall ((attr__tag Int))
  (forall ((container us_rep1))
  (forall ((key2 us_rep)) (! (dynamic_invariant2
  (element__21 attr__tag container key2) true false
  true) :pattern ((element__21 attr__tag container key2)) )))))

;; has_element__post__dispatch_axiom
  (assert true)

;; has_key__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key2 us_rep))
  (! (=> (= (of_int 1) true)
     (=>
     (exists ((k us_rep))
     (and (= (has_key1 container k) true) (= (my_eq k key2) true)))
     (= (has_key1 container key2) true))) :pattern ((has_key1 container key2)) ))))

(declare-sort element_type1 0)

(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq14 (element_type1 element_type1) Bool)

(declare-fun dummy14 () element_type1)

(declare-datatypes ()
((element_type__ref2
 (mk_element_type__ref2 (element_type__content2 element_type1)))))
(define-fun element_type__ref_6__projection ((a element_type__ref2)) element_type1
  (element_type__content2 a))

(define-fun dynamic_invariant7 ((temp___expr_616 Int)
  (temp___is_init_613 Bool) (temp___skip_constant_614 Bool)
  (temp___do_toplevel_615 Bool)) Bool (=>
                                      (or (= temp___is_init_613 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range8 temp___expr_616)))

(declare-fun witness (us_rep5 us_rep) Int)

(declare-fun witness__function_guard (Int us_rep5 us_rep) Bool)

(declare-fun w_get (us_rep5 Int) Int)

(declare-fun w_get__function_guard (Int us_rep5 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key2 us_rep))
  (! (=> (= (has_key1 container key2) true)
     (let ((result (get2 container key2)))
     (and
     (=> (= (of_int 1) true)
     (and (= result (w_get container (witness container key2)))
     (forall ((k us_rep))
     (=> (= (has_key1 container k) true)
     (= (= (my_eq k key2) true)
     (= (witness container key2) (witness container k)))))))
     (dynamic_invariant7 result true false true)))) :pattern ((get2 container
                                                              key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep5)) (! (dynamic_invariant1 (length4 container)
  true false true) :pattern ((length4 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (ole left right) true)
     (forall ((key2 us_rep))
     (=> (= (has_key1 left key2) true)
     (and (= (has_key1 right key2) true)
     (= (get2 right key2) (get2 left key2)))))) :pattern ((ole left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (oeq2 left right) true)
     (and
     (forall ((key2 us_rep))
     (=> (= (has_key1 left key2) true)
     (and (= (has_key1 right key2) true)
     (= (get2 right key2) (get2 left key2)))))
     (forall ((key2 us_rep))
     (=> (= (has_key1 right key2) true) (= (has_key1 left key2) true))))) :pattern (
  (oeq2 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (= (is_empty3 container) true)
     (forall ((key2 us_rep)) (not (= (has_key1 container key2) true)))) :pattern (
  (is_empty3 container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (keys_included left right) true)
     (forall ((key2 us_rep))
     (=> (= (has_key1 left key2) true) (= (has_key1 right key2) true)))) :pattern (
  (keys_included left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (forall ((new_key us_rep))
  (! (= (= (keys_included_except left right new_key) true)
     (forall ((key2 us_rep))
     (=> (= (has_key1 left key2) true)
     (=> (not (= (my_eq key2 new_key) true)) (= (has_key1 right key2) true))))) :pattern (
  (keys_included_except left right new_key)) ))))

;; elements_equal_except__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (forall ((new_key us_rep))
  (! (= (= (elements_equal_except left right new_key) true)
     (forall ((key2 us_rep))
     (=> (= (has_key1 left key2) true)
     (=> (not (= (my_eq key2 new_key) true))
     (and (= (has_key1 right key2) true)
     (= (get2 left key2) (get2 right key2))))))) :pattern ((elements_equal_except
                                                           left right
                                                           new_key)) ))))

(declare-fun has_witness (us_rep5 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep5 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key2 us_rep))
  (! (=> (= (has_key1 container key2) true)
     (let ((result (witness container key2)))
     (and (= (has_witness container result) true) (dynamic_invariant1 result
     true false true)))) :pattern ((witness container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant1 witness1 true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant7
     (w_get container witness1) true false true)) :pattern ((w_get container
                                                            witness1)) ))))

(define-fun dynamic_invariant8 ((temp___expr_649 Int)
  (temp___is_init_646 Bool) (temp___skip_constant_647 Bool)
  (temp___do_toplevel_648 Bool)) Bool (=>
                                      (or (= temp___is_init_646 true)
                                      (<= 0 2147483647)) (in_range4
                                      temp___expr_649)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length2 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false
     true))) :pattern ((length2 container)) )))

;; get__post_axiom
  (assert true)

;; has_key__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep2))
  (! (=> (= (of_int 0) true)
     (=>
     (exists ((k us_rep2))
     (and (= (has_key container k) true) (= (bool_eq2 k key2) true)))
     (= (has_key container key2) true))) :pattern ((has_key container key2)) ))))

(declare-sort element_type2 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq15 (element_type2 element_type2) Bool)

(declare-fun dummy15 () element_type2)

(declare-datatypes ()
((element_type__ref3
 (mk_element_type__ref3 (element_type__content3 element_type2)))))
(define-fun element_type__ref_8__projection ((a element_type__ref3)) element_type2
  (element_type__content3 a))

(define-fun dynamic_invariant9 ((temp___expr_669 Int)
  (temp___is_init_666 Bool) (temp___skip_constant_667 Bool)
  (temp___do_toplevel_668 Bool)) Bool (=>
                                      (or (= temp___is_init_666 true)
                                      (<= 1 2147483647)) (in_range9
                                      temp___expr_669)))

(declare-fun witness1 (us_rep4 us_rep2) Int)

(declare-fun witness__function_guard1 (Int us_rep4 us_rep2) Bool)

(declare-fun w_get1 (us_rep4 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep4 Int) Bool)

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep2))
  (! (=> (= (has_key container key2) true)
     (let ((result (get1 container key2)))
     (and
     (=> (= (of_int 0) true)
     (and (= result (w_get1 container (witness1 container key2)))
     (forall ((k us_rep2))
     (=> (= (has_key container k) true)
     (= (= (bool_eq2 k key2) true)
     (= (witness1 container key2) (witness1 container k)))))))
     (dynamic_invariant9 result true false true)))) :pattern ((get1 container
                                                              key2)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant1 (length3 container)
  true false true) :pattern ((length3 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (oeq4 left right) true)
     (and
     (forall ((key2 us_rep2))
     (=> (= (has_key left key2) true)
     (and (= (has_key right key2) true)
     (= (get1 right key2) (get1 left key2)))))
     (forall ((key2 us_rep2))
     (=> (= (has_key right key2) true) (= (has_key left key2) true))))) :pattern (
  (oeq4 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty2 container) true)
     (forall ((key2 us_rep2)) (not (= (has_key container key2) true)))) :pattern (
  (is_empty2 container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (keys_included1 left right) true)
     (forall ((key2 us_rep2))
     (=> (= (has_key left key2) true) (= (has_key right key2) true)))) :pattern (
  (keys_included1 left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((new_key us_rep2))
  (! (= (= (keys_included_except1 left right new_key) true)
     (forall ((key2 us_rep2))
     (=> (= (has_key left key2) true)
     (=> (not (= (bool_eq2 key2 new_key) true))
     (= (has_key right key2) true))))) :pattern ((keys_included_except1 left
                                                 right new_key)) ))))

(declare-fun has_witness1 (us_rep4 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep4 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key2 us_rep2))
  (! (=> (= (has_key container key2) true)
     (let ((result (witness1 container key2)))
     (and (= (has_witness1 container result) true) (dynamic_invariant1 result
     true false true)))) :pattern ((witness1 container key2)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant1 witness2 true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant9
     (w_get1 container witness2) true false true)) :pattern ((w_get1
                                                             container
                                                             witness2)) ))))

(declare-fun l__split_fields () us_main_type)

(declare-fun k__split_fields () us_main_type)

(declare-fun c__split_fields () count_type)

(declare-fun my_maps__test_map_rec_2__R16b__assume () (_ BitVec 32))

(declare-fun us () (_ BitVec 32))

(declare-fun us1 () Int)

(declare-fun my_maps__test_map_rec_2__R19b__assume () (_ BitVec 32))

(declare-fun us2 () (_ BitVec 32))

(declare-fun us3 () Int)

(declare-fun temp___1130 () count_type)

(declare-fun temp___1131 () count_type)

(declare-fun o () integer)

(declare-fun o1 () positive)

(declare-fun o2 () positive)

(declare-fun o3 () integer)

(declare-fun o4 () positive)

(declare-fun o5 () integer)

(declare-fun o6 () integer)

(declare-fun o7 () positive)

(declare-fun o8 () positive)

(declare-fun o9 () integer)

(declare-fun o10 () positive)

(declare-fun o11 () integer)

(declare-fun o12 () integer)

(declare-fun o13 () positive)

(declare-fun o14 () positive)

(declare-fun o15 () integer)

(declare-fun o16 () positive)

(declare-fun o17 () integer)

(declare-fun o18 () Int)

(declare-fun o19 () integer)

(declare-fun o20 () positive)

(declare-fun o21 () positive)

(declare-fun o22 () integer)

(declare-fun o23 () us_rep)

(declare-fun o24 () integer)

(declare-fun o25 () positive)

(declare-fun o26 () us_split_fields)

(declare-fun o27 () us_rep)

(declare-fun o28 () integer)

(declare-fun o29 () positive)

(declare-fun o30 () us_split_fields)

(declare-fun o31 () us_rep)

(declare-fun o32 () integer)

(declare-fun o33 () positive)

(declare-fun o34 () us_split_fields)

(declare-fun o35 () us_rep)

(declare-fun o36 () integer)

(declare-fun o37 () positive)

(declare-fun o38 () us_split_fields)

(declare-fun o39 () us_rep)

(declare-fun temp___1143 () us_rep2)

(declare-fun o40 () integer)

(declare-fun o41 () positive)

(declare-fun o42 () us_split_fields)

(declare-fun o43 () us_rep)

(declare-fun temp___1145 () us_rep2)

(declare-fun o44 () integer)

(declare-fun o45 () positive)

(declare-fun o46 () us_split_fields)

(declare-fun o47 () us_rep)

(declare-fun o48 () integer)

(declare-fun o49 () positive)

(declare-fun o50 () us_split_fields)

(declare-fun o51 () us_rep)

(declare-fun result () us_split_fields__ref2)

(declare-fun c__split_fields1 () us_split_fields4)

(declare-fun result1 () us_split_fields__ref2)

(declare-fun c__split_fields2 () us_split_fields4)

(declare-fun my_maps__n__insert__2__container__fields () us_split_fields2)

(declare-fun result2 () us_split_fields__ref1)

(declare-fun l__split_fields1 () us_split_fields2)

(declare-fun my_maps__n__insert__2__container__fields1 () us_split_fields2)

(declare-fun result3 () us_split_fields__ref1)

(declare-fun l__split_fields2 () us_split_fields2)

(declare-fun c__split_fields3 () us_split_fields4)

(declare-fun b () Bool)

(declare-fun my_maps__n__insert__container__fields () us_split_fields2)

(declare-fun result4 () us_split_fields__ref1)

(declare-fun l__split_fields3 () us_split_fields2)

(declare-fun my_maps__n__replace_element__container__fields () us_split_fields2)

(declare-fun result5 () us_split_fields__ref1)

(declare-fun l__split_fields4 () us_split_fields2)

(declare-fun my_maps__n__replace__container__fields () us_split_fields2)

(declare-fun result6 () us_split_fields__ref1)

(declare-fun l__split_fields5 () us_split_fields2)

(declare-fun my_maps__n__assign__target__fields () us_split_fields2)

(declare-fun result7 () us_split_fields__ref1)

(declare-fun k__split_fields1 () us_split_fields2)

(declare-fun my_maps__n__move__source__fields () us_split_fields2)

(declare-fun my_maps__n__move__target__fields () us_split_fields2)

(declare-fun result8 () us_split_fields__ref1)

(declare-fun l__split_fields6 () us_split_fields2)

(declare-fun result9 () us_split_fields__ref1)

(declare-fun k__split_fields2 () us_split_fields2)

(declare-fun my_maps__n__include__container__fields () us_split_fields2)

(declare-fun result10 () us_split_fields__ref1)

(declare-fun l__split_fields7 () us_split_fields2)

(declare-fun my_maps__n__include__container__fields1 () us_split_fields2)

(declare-fun result11 () us_split_fields__ref1)

(declare-fun l__split_fields8 () us_split_fields2)

(declare-fun my_maps__n__delete__container__fields () us_split_fields2)

(declare-fun result12 () us_split_fields__ref1)

(declare-fun l__split_fields9 () us_split_fields2)

(declare-fun result13 () us_split_fields__ref2)

(declare-fun c__split_fields4 () us_split_fields4)

(declare-fun c__split_fields5 () us_split_fields4)

(declare-fun my_maps__n__delete__2__container__fields () us_split_fields2)

(declare-fun result14 () us_split_fields__ref1)

(declare-fun l__split_fields10 () us_split_fields2)

(declare-fun result15 () us_split_fields__ref2)

(declare-fun c__split_fields6 () us_split_fields4)

(declare-fun my_maps__n__exclude__container__fields () us_split_fields2)

(declare-fun result16 () us_split_fields__ref1)

(declare-fun l__split_fields11 () us_split_fields2)

(declare-fun my_maps__n__exclude__container__fields1 () us_split_fields2)

(declare-fun result17 () us_split_fields__ref1)

(declare-fun l__split_fields12 () us_split_fields2)

(define-fun o52 () us_split_fields (mk___split_fields o21 o22))

(define-fun o53 () us_rep (mk___rep (mk___split_fields o16 o17)))

(define-fun o54 () us_rep (mk___rep (mk___split_fields o10 o11)))

(define-fun o55 () us_rep (mk___rep (mk___split_fields o4 o5)))

(define-fun temp___11311 () us_rep2 (mk___rep2
                                    (mk___split_fields2 temp___1131)))

(define-fun temp___11301 () us_rep2 (mk___rep2
                                    (mk___split_fields2 temp___1130)))

;; H
  (assert (= my_maps__test_map_rec_2__R16b__assume (default_modulus 10)))

;; H
  (assert (= my_maps__test_map_rec_2__R16b__assume r16b))

;; H
  (assert true)

;; H
  (assert (= us r16b))

;; H
  (assert (and (= us1 10) (in_range3 10)))

;; H
  (assert (default_initial_assumption
  (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)) false))

;; H
  (assert
  (and (= 10 (to_rep3 (rec__my_maps__n__map__capacity l__split_discrs)))
  (= r16b (to_rep2 (rec__my_maps__n__map__modulus l__split_discrs)))))

;; H
  (assert (= my_maps__test_map_rec_2__R19b__assume (default_modulus 10)))

;; H
  (assert (= my_maps__test_map_rec_2__R19b__assume r19b))

;; H
  (assert true)

;; H
  (assert (= us2 r19b))

;; H
  (assert (and (= us3 10) (in_range3 10)))

;; H
  (assert (default_initial_assumption1
  (mk___rep1 k__split_discrs (mk___split_fields1 k__split_fields)) false))

;; H
  (assert
  (and (= 10 (to_rep3 (rec__my_maps__n__map__capacity k__split_discrs)))
  (= r19b (to_rep2 (rec__my_maps__n__map__modulus k__split_discrs)))))

;; H
  (assert
  (= (is_empty
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields))) true))

;; H
  (assert
  (and
  (= temp___11301 (first
                  (mk___rep1 l__split_discrs
                  (mk___split_fields1 l__split_fields))))
  (ite (= (= (length
             (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields))) 0) true)
  (= (bool_eq2 temp___11301 no_element) true)
  (and
  (= (has_key
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     temp___11301) true)
  (= (get1
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     temp___11301) 1)))))

;; H
  (assert
  (= result (mk___split_fields__ref2 (mk___split_fields2 c__split_fields))))

;; H
  (assert (= c__split_fields1 (mk___split_fields2 temp___1130)))

;; H
  (assert
  (and
  (= temp___11311 (next
                  (mk___rep1 l__split_discrs
                  (mk___split_fields1 l__split_fields))
                  (mk___rep2 c__split_fields1)))
  (ite (= (ite (= (bool_eq2 (mk___rep2 c__split_fields1) no_element) false) (=
          (get1
          (positions
          (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
          (mk___rep2 c__split_fields1)) (length
                                        (mk___rep1 l__split_discrs
                                        (mk___split_fields1 l__split_fields)))) true) true)
  (= (bool_eq2 temp___11311 no_element) true)
  (and
  (= (has_key
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     temp___11311) true)
  (= (get1
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     temp___11311) (+ (get1
                      (positions
                      (mk___rep1 l__split_discrs
                      (mk___split_fields1 l__split_fields)))
                      (mk___rep2 c__split_fields1)) 1))))))

;; H
  (assert (= result1 (mk___split_fields__ref2 c__split_fields1)))

;; H
  (assert (= c__split_fields2 (mk___split_fields2 temp___1131)))

;; H
  (assert (= (to_rep o) 1))

;; H
  (assert (= (to_rep1 o1) 1))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= o4 o2))

;; H
  (assert (= o5 o3))

;; H
  (assert
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (length
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields)) (+
  (length (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields))) 1))
  (= (has_key1
     (model__
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields))
     o55) true))
  (= (bool_eq
     (key
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields)
     (find1
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields)
     o55)) o55) true))
  (= (get2
     (model__
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields))
     o55) 1))
  (= (ole
     (model__
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     (model__
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields))) true))
  (= (keys_included_except
     (model__
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields))
     (model__
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     o55) true))
  (= (mapping_preserved
     (keys (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     (keys
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields))
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     (positions
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields))) true))
  (= (keys_included_except1
     (positions
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields))
     (positions
     (mk___rep1 l__split_discrs (mk___split_fields1 l__split_fields)))
     (find1
     (mk___rep1 l__split_discrs my_maps__n__insert__2__container__fields)
     o55)) true)))

;; H
  (assert
  (= result2 (mk___split_fields__ref1 (mk___split_fields1 l__split_fields))))

;; H
  (assert (= l__split_fields1 my_maps__n__insert__2__container__fields))

;; H
  (assert (= (to_rep o6) 2))

;; H
  (assert (= (to_rep1 o7) 2))

;; H
  (assert (= o7 o8))

;; H
  (assert (= o6 o9))

;; H
  (assert (= o10 o8))

;; H
  (assert (= o11 o9))

(assert
;; WP_parameter_def
 ;; File "my_maps.adb", line 44, characters 0-0
  (not
  (< (length (mk___rep1 l__split_discrs l__split_fields1)) (to_rep3
                                                           (rec__my_maps__n__map__capacity
                                                           l__split_discrs)))))
(check-sat)
(exit)
