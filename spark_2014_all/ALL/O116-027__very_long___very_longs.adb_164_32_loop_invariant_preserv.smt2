;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (and (< (- (abs y)) (mod1 x y)) (< (mod1 x y) (abs y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs (* (div1 x y) y)) (abs x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun to_int2 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range2
                                     temp___expr_39)))

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-sort tdigit_count_typeB 0)

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (tdigit_count_typeB tdigit_count_typeB) Bool)

(declare-const dummy4 tdigit_count_typeB)

(declare-datatypes ()
((tdigit_count_typeB__ref
 (mk_tdigit_count_typeB__ref
 (tdigit_count_typeB__content tdigit_count_typeB)))))
(define-fun tdigit_count_typeB__ref___projection ((a tdigit_count_typeB__ref)) tdigit_count_typeB
  (tdigit_count_typeB__content a))

(declare-sort digit_index_type 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 65536)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (digit_index_type digit_index_type) Bool)

(declare-const dummy5 digit_index_type)

(declare-datatypes ()
((digit_index_type__ref
 (mk_digit_index_type__ref (digit_index_type__content digit_index_type)))))
(define-fun digit_index_type__ref___projection ((a digit_index_type__ref)) digit_index_type
  (digit_index_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_204 Int)
  (temp___is_init_201 Bool) (temp___skip_constant_202 Bool)
  (temp___do_toplevel_203 Bool)) Bool (=>
                                      (or (= temp___is_init_201 true)
                                      (<= 1 65536)) (in_range5
                                      temp___expr_204)))

(declare-fun to_rep2 (digit_index_type) Int)

(declare-fun of_rep2 (Int) digit_index_type)

;; inversion_axiom
  (assert
  (forall ((x digit_index_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x digit_index_type)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort octet 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq6 (octet octet) Bool)

(declare-const dummy6 octet)

(declare-datatypes () ((octet__ref (mk_octet__ref (octet__content octet)))))
(define-fun octet__ref___projection ((a octet__ref)) octet (octet__content a))

(define-fun dynamic_invariant3 ((temp___expr_210 (_ BitVec 8))
  (temp___is_init_207 Bool) (temp___skip_constant_208 Bool)
  (temp___do_toplevel_209 Bool)) Bool true)

(declare-fun to_rep3 (octet) (_ BitVec 8))

(declare-fun of_rep3 ((_ BitVec 8)) octet)

;; inversion_axiom
  (assert
  (forall ((x octet))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))) )))

(define-fun to_int3 ((x octet)) Int (bv2nat (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x octet)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int octet))))))
(declare-fun slide1 ((Array Int octet) Int Int) (Array Int octet))

;; slide_eq
  (assert
  (forall ((a (Array Int octet)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int octet)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int octet) Int Int (Array Int octet) Int
  Int) (Array Int octet))

;; concat_def
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (octet Int) (Array Int octet))

;; singleton_def
  (assert
  (forall ((v octet))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq2 ((a (Array Int octet)) (a__first Int) (a__last Int)
  (b (Array Int octet)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep3 (select a temp___idx_132)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare1 ((Array Int octet) Int Int (Array Int octet) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq2 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep3 (select a (+ i 1))) (to_rep3 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq2 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep3 (select a (+ j 1))) (to_rep3 (select b (+ i 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep4 (tdigit_count_typeB) Int)

(declare-fun of_rep4 (Int) tdigit_count_typeB)

;; inversion_axiom
  (assert
  (forall ((x tdigit_count_typeB))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x tdigit_count_typeB)) (! (in_range4
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (tdigit_count_typeB tdigit_count_typeB) Bool)

(declare-const dummy7 tdigit_count_typeB)

(declare-datatypes ()
((t17s__ref (mk_t17s__ref (t17s__content tdigit_count_typeB)))))
(define-fun t17s__ref___projection ((a t17s__ref)) tdigit_count_typeB
  (t17s__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) tdigit_count_typeB)

(declare-fun last2 (t1) tdigit_count_typeB)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range4 f)
     (=> (in_range4 l)
     (and (= (to_rep4 (first2 (mk1 f l))) f)
     (= (to_rep4 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range4 low)
                   (and (in_range4 high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int octet))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int octet) (elts1 a))

(define-fun of_array1 ((a (Array Int octet)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep4 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep4 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int octet)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int octet)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int octet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int octet))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__alignment1 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep4 (first2 (rt1 x)))
                  (to_rep4 (last2 (rt1 x))) (elts1 y)
                  (to_rep4 (first2 (rt1 y))) (to_rep4 (last2 (rt1 y)))))

(declare-fun user_eq8 (us_t1 us_t1) Bool)

(declare-const dummy8 us_t1)

(declare-datatypes () ((t18s__ref (mk_t18s__ref (t18s__content us_t1)))))
(define-fun t18s__ref___projection ((a t18s__ref)) us_t1 (t18s__content a))

(declare-datatypes ()
((us_split_discrs
 (mk___split_discrs (rec__very_longs__very_long__length digit_index_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) digit_index_type
  (rec__very_longs__very_long__length a))

(declare-datatypes ()
((us_split_discrs__ref
 (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__very_longs__very_long__long_digits us_t1)))))
(define-fun us_split_fields_Long_Digits__projection ((a us_split_fields)) us_t1
  (rec__very_longs__very_long__long_digits a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (mk___rep
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1
                                                             a))

(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__very_longs__very_long__length
                           (us_split_discrs1 a))) (to_rep2
                                                  (rec__very_longs__very_long__length
                                                  (us_split_discrs1 b))))
                        (= (bool_eq3
                           (rec__very_longs__very_long__long_digits
                           (us_split_fields1 a))
                           (rec__very_longs__very_long__long_digits
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const very_longs__very_long__length__first__bit Int)

(declare-const very_longs__very_long__length__last__bit Int)

(declare-const very_longs__very_long__length__position Int)

;; very_longs__very_long__length__first__bit_axiom
  (assert (<= 0 very_longs__very_long__length__first__bit))

;; very_longs__very_long__length__last__bit_axiom
  (assert
  (< very_longs__very_long__length__first__bit very_longs__very_long__length__last__bit))

;; very_longs__very_long__length__position_axiom
  (assert (<= 0 very_longs__very_long__length__position))

(declare-const very_longs__very_long__long_digits__first__bit Int)

(declare-const very_longs__very_long__long_digits__last__bit Int)

(declare-const very_longs__very_long__long_digits__position Int)

;; very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 very_longs__very_long__long_digits__first__bit))

;; very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< very_longs__very_long__long_digits__first__bit very_longs__very_long__long_digits__last__bit))

;; very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 very_longs__very_long__long_digits__position))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ()
((very_long__ref (mk_very_long__ref (very_long__content us_rep)))))
(define-fun very_long__ref___projection ((a very_long__ref)) us_rep (very_long__content
                                                                    a))

(define-fun dynamic_invariant4 ((temp___expr_221 us_rep)
  (temp___is_init_218 Bool) (temp___skip_constant_219 Bool)
  (temp___do_toplevel_220 Bool)) Bool (let ((temp___222 (rec__very_longs__very_long__length
                                                        (us_split_discrs1
                                                        temp___expr_221))))
                                      (and (dynamic_property2 1
                                      (to_rep2 temp___222)
                                      (first3
                                      (rec__very_longs__very_long__long_digits
                                      (us_split_fields1 temp___expr_221)))
                                      (last3
                                      (rec__very_longs__very_long__long_digits
                                      (us_split_fields1 temp___expr_221))))
                                      (and
                                      (= (first3
                                         (rec__very_longs__very_long__long_digits
                                         (us_split_fields1 temp___expr_221))) 1)
                                      (= (last3
                                         (rec__very_longs__very_long__long_digits
                                         (us_split_fields1 temp___expr_221)))
                                      (to_rep2 temp___222))))))

(declare-const number us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const result____split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const r32b Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (tdigit_count_typeB tdigit_count_typeB) Bool)

(declare-const dummy10 tdigit_count_typeB)

(declare-datatypes ()
((tS31bP1__ref (mk_tS31bP1__ref (tS31bP1__content tdigit_count_typeB)))))
(define-fun tS31bP1__ref___projection ((a tS31bP1__ref)) tdigit_count_typeB
  (tS31bP1__content a))

(declare-sort t2 0)

(declare-fun first4 (t2) tdigit_count_typeB)

(declare-fun last4 (t2) tdigit_count_typeB)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range4 f)
     (=> (in_range4 l)
     (and (= (to_rep4 (first4 (mk2 f l))) f)
     (= (to_rep4 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range4 low)
                   (and (in_range4 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int octet))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int octet) (elts2 a))

(define-fun of_array2 ((a (Array Int octet)) (f Int)
  (l Int)) us_t2 (mk___t2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep4 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep4 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-const value__size3 Int)

(declare-fun object__size3 ((Array Int octet)) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 ((Array Int octet)) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 ((Array Int octet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int octet))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__alignment3 a))))

(define-fun bool_eq5 ((x us_t2)
  (y us_t2)) Bool (bool_eq2 (elts2 x) (to_rep4 (first4 (rt2 x)))
                  (to_rep4 (last4 (rt2 x))) (elts2 y)
                  (to_rep4 (first4 (rt2 y))) (to_rep4 (last4 (rt2 y)))))

(declare-fun user_eq11 (us_t2 us_t2) Bool)

(declare-const dummy11 us_t2)

(declare-datatypes () ((s31b__ref (mk_s31b__ref (s31b__content us_t2)))))
(define-fun s31b__ref___projection ((a s31b__ref)) us_t2 (s31b__content a))

(define-fun dynamic_property5 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (tdigit_count_typeB tdigit_count_typeB) Bool)

(declare-const dummy12 tdigit_count_typeB)

(declare-datatypes ()
((t33b__ref (mk_t33b__ref (t33b__content tdigit_count_typeB)))))
(define-fun t33b__ref___projection ((a t33b__ref)) tdigit_count_typeB
  (t33b__content a))

(declare-sort t3 0)

(declare-fun first6 (t3) tdigit_count_typeB)

(declare-fun last6 (t3) tdigit_count_typeB)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range4 f)
     (=> (in_range4 l)
     (and (= (to_rep4 (first6 (mk3 f l))) f)
     (= (to_rep4 (last6 (mk3 f l))) l)))) :pattern ((mk3 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range4 low)
                   (and (in_range4 high)
                   (=> (<= low high)
                   (and (dynamic_property5 range_first range_last low)
                   (dynamic_property5 range_first range_last high))))))

(declare-datatypes () ((us_t3 (mk___t3 (elts3 (Array Int octet))(rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int octet) (elts3 a))

(define-fun of_array3 ((a (Array Int octet)) (f Int)
  (l Int)) us_t3 (mk___t3 a (mk3 f l)))

(define-fun first7 ((a us_t3)) Int (to_rep4 (first6 (rt3 a))))

(define-fun last7 ((a us_t3)) Int (to_rep4 (last6 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (<= (first7 a) (last7 a))
                                    (+ (- (last7 a) (first7 a)) 1) 0))

(declare-const value__size4 Int)

(declare-fun object__size4 ((Array Int octet)) Int)

(declare-const value__component__size3 Int)

(declare-fun object__component__size3 ((Array Int octet)) Int)

(declare-const value__alignment4 Int)

(declare-fun object__alignment4 ((Array Int octet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size3))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int octet))) (<= 0 (object__component__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__alignment4 a))))

(define-fun bool_eq6 ((x us_t3)
  (y us_t3)) Bool (bool_eq2 (elts3 x) (to_rep4 (first6 (rt3 x)))
                  (to_rep4 (last6 (rt3 x))) (elts3 y)
                  (to_rep4 (first6 (rt3 y))) (to_rep4 (last6 (rt3 y)))))

(declare-fun user_eq13 (us_t3 us_t3) Bool)

(declare-const dummy13 us_t3)

(declare-datatypes () ((t34b__ref (mk_t34b__ref (t34b__content us_t3)))))
(define-fun t34b__ref___projection ((a t34b__ref)) us_t3 (t34b__content a))

(declare-const r35b Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-sort t4 0)

(declare-fun first8 (t4) tdigit_count_typeB)

(declare-fun last8 (t4) tdigit_count_typeB)

(declare-fun mk4 (Int Int) t4)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range4 f)
     (=> (in_range4 l)
     (and (= (to_rep4 (first8 (mk4 f l))) f)
     (= (to_rep4 (last8 (mk4 f l))) l)))) :pattern ((mk4 f l)) )))

(define-fun dynamic_property7 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range4 low)
                   (and (in_range4 high)
                   (=> (<= low high) (and (in_range5 low) (in_range5 high))))))

(declare-datatypes () ((us_t4 (mk___t4 (elts4 (Array Int octet))(rt4 t4)))))
(define-fun to_array4 ((a us_t4)) (Array Int octet) (elts4 a))

(define-fun of_array4 ((a (Array Int octet)) (f Int)
  (l Int)) us_t4 (mk___t4 a (mk4 f l)))

(define-fun first9 ((a us_t4)) Int (to_rep4 (first8 (rt4 a))))

(define-fun last9 ((a us_t4)) Int (to_rep4 (last8 (rt4 a))))

(define-fun length4 ((a us_t4)) Int (ite (<= (first9 a) (last9 a))
                                    (+ (- (last9 a) (first9 a)) 1) 0))

(declare-const value__size5 Int)

(declare-fun object__size5 ((Array Int octet)) Int)

(declare-const value__component__size4 Int)

(declare-fun object__component__size4 ((Array Int octet)) Int)

(declare-const value__alignment5 Int)

(declare-fun object__alignment5 ((Array Int octet)) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__size5 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size4))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int octet))) (<= 0 (object__component__size4 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a (Array Int octet))) (<= 0 (object__alignment5 a))))

(define-fun bool_eq7 ((x us_t4)
  (y us_t4)) Bool (bool_eq2 (elts4 x) (to_rep4 (first8 (rt4 x)))
                  (to_rep4 (last8 (rt4 x))) (elts4 y)
                  (to_rep4 (first8 (rt4 y))) (to_rep4 (last8 (rt4 y)))))

(declare-fun user_eq14 (us_t4 us_t4) Bool)

(declare-const dummy14 us_t4)

(declare-datatypes ()
((digits_array_type__ref
 (mk_digits_array_type__ref (digits_array_type__content us_t4)))))
(define-fun digits_array_type__ref___projection ((a digits_array_type__ref)) us_t4
  (digits_array_type__content a))

(declare-fun temp___817 ((_ BitVec 8) Int Int) us_t3)

;; def_axiom
  (assert
  (forall ((temp___819 (_ BitVec 8)))
  (forall ((temp___820 Int) (temp___821 Int))
  (let ((temp___818 (temp___817 temp___819 temp___820 temp___821)))
  (and
  (=> (dynamic_property7 1 65536 temp___820 temp___821)
  (and (= (first7 temp___818) temp___820) (= (last7 temp___818) temp___821)))
  (forall ((temp___822 Int))
  (= (select (to_array3 temp___818) temp___822) (of_rep3 temp___819))))))))

(define-fun dynamic_invariant5 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant6 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(define-fun dynamic_invariant7 ((temp___expr_405 us_t2)
  (temp___is_init_402 Bool) (temp___skip_constant_403 Bool)
  (temp___do_toplevel_404 Bool)) Bool (=>
                                      (not (= temp___skip_constant_403 true))
                                      (and (dynamic_property4 1 r32b
                                      (first5 temp___expr_405)
                                      (last5 temp___expr_405))
                                      (and (= (first5 temp___expr_405) 1)
                                      (= (last5 temp___expr_405) r32b)))))

(declare-const result____split_fields (Array Int octet))

(declare-const result____split_fields1 t1)

(declare-const valid Bool)

(declare-const index Int)

(declare-const string_index Int)

(declare-const temp___824 (Array Int octet))

(declare-const temp___8241 t3)

(declare-const temp___825 (Array Int octet))

(declare-const temp___8251 t2)

(declare-const temp___827 (Array Int octet))

(declare-const temp___8271 t2)

(declare-const o (Array Int octet))

(declare-const o1 t1)

(declare-const o2 (Array Int octet))

(declare-const o3 t1)

(declare-const temp___829 digit_index_type)

(declare-const temp___8291 (Array Int octet))

(declare-const temp___8292 t1)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 character)

(declare-const o8 Int)

(declare-const temp___830 Int)

(declare-const o9 Int)

(declare-const o10 character)

(declare-const o11 Int)

(declare-const o12 octet)

(declare-const o13 Int)

(declare-const o14 (Array Int octet))

(declare-const o15 (Array Int octet))

(declare-const o16 t1)

(declare-const o17 us_split_fields)

(declare-const temp___833 us_rep)

(declare-const o18 Int)

(declare-const o19 Int)

(declare-const result us_split_fields__ref)

(declare-const result____split_fields2 us_split_fields)

(declare-const result1 bool__ref)

(declare-const valid1 Bool)

(declare-const result2 int__ref)

(declare-const index1 Int)

(declare-const result3 int__ref)

(declare-const string_index1 Int)

(declare-const result____split_fields3 us_split_fields)

(declare-const valid2 Bool)

(declare-const index2 Int)

(declare-const string_index2 Int)

(declare-const h_digit (_ BitVec 8))

(declare-const h_okay Bool)

(declare-const l_digit (_ BitVec 8))

(declare-const l_okay Bool)

(declare-const valid3 Bool)

(declare-const result4 us_split_fields__ref)

(declare-const result____split_fields4 us_split_fields)

(declare-const result5 int__ref)

(declare-const index3 Int)

(declare-const result6 int__ref)

(declare-const string_index3 Int)

;; H
  (assert (dynamic_invariant1 number true false true))

;; H
  (assert (dynamic_invariant4
  (mk___rep result____split_discrs
  (mk___split_fields
  (mk___t1 result____split_fields result____split_fields1))) false false
  true))

;; H
  (assert
  (= (length number) (* 2 (to_rep2
                          (rec__very_longs__very_long__length
                          result____split_discrs)))))

;; H
  (assert (=> (<= 1 65536) (in_range5 index)))

;; H
  (assert (=> (<= 1 2147483647) (in_range2 string_index)))

;; H
  (assert
  (= (to_rep2 (rec__very_longs__very_long__length result____split_discrs))
  r32b))

;; H
  (assert (in_range5 r32b))

;; H
  (assert
  (= (to_rep4 (first6 (rt3 (temp___817 ((_ int2bv 8) 0) 1 r32b)))) 1))

;; H
  (assert
  (= (to_rep4 (last6 (rt3 (temp___817 ((_ int2bv 8) 0) 1 r32b)))) r32b))

;; H
  (assert
  (= (mk___t3 temp___824 temp___8241) (temp___817 ((_ int2bv 8) 0) 1 r32b)))

;; H
  (assert
  (= (ite (<= (to_rep4 (first6 temp___8241)) (to_rep4 (last6 temp___8241)))
     (+ (- (to_rep4 (last6 temp___8241)) (to_rep4 (first6 temp___8241))) 1)
     0) (ite (<= 1 r32b) (+ (- r32b 1) 1) 0)))

;; H
  (assert (= temp___824 temp___825))

;; H
  (assert
  (= (mk2 (to_rep4 (first6 temp___8241)) (to_rep4 (last6 temp___8241)))
  temp___8251))

;; H
  (assert
  (= (ite (<= (to_rep4 (first4 temp___8251)) (to_rep4 (last4 temp___8251)))
     (+ (- (to_rep4 (last4 temp___8251)) (to_rep4 (first4 temp___8251))) 1)
     0) (ite (<= (to_rep4 (first2 result____split_fields1)) (to_rep4
                                                            (last2
                                                            result____split_fields1)))
        (+ (- (to_rep4 (last2 result____split_fields1)) (to_rep4
                                                        (first2
                                                        result____split_fields1))) 1)
        0)))

;; H
  (assert
  (= (mk___t2 temp___827 temp___8271) (mk___t2 temp___825 temp___8251)))

;; H
  (assert (= temp___827 o))

;; H
  (assert
  (= (mk1 (to_rep4 (first4 temp___8271)) (to_rep4 (last4 temp___8271)))
  o1))

;; H
  (assert (= o2 o))

;; H
  (assert (= o3 o1))

;; H
  (assert (= result____split_discrs (mk___split_discrs temp___829)))

;; H
  (assert (= temp___8291 o2))

;; H
  (assert (= temp___8292 o3))

;; H
  (assert
  (= result (mk___split_fields__ref
            (mk___split_fields
            (mk___t1 result____split_fields result____split_fields1)))))

;; H
  (assert
  (= result____split_fields2 (mk___split_fields
                             (mk___t1 temp___8291 temp___8292))))

;; H
  (assert (= result____split_discrs (mk___split_discrs temp___829)))

;; H
  (assert (= result1 (mk_bool__ref valid)))

;; H
  (assert (= valid1 (of_int 1)))

;; H
  (assert
  (and
  (= o4 (to_rep4
        (last2
        (rt1
        (rec__very_longs__very_long__long_digits result____split_fields2)))))
  (in_range5
  (to_rep4
  (last2
  (rt1 (rec__very_longs__very_long__long_digits result____split_fields2)))))))

;; H
  (assert (= result2 (mk_int__ref index)))

;; H
  (assert (= index1 o4))

;; H
  (assert
  (and (= o5 (to_rep1 (first (rt number)))) (in_range2
  (to_rep1 (first (rt number))))))

;; H
  (assert (= result3 (mk_int__ref string_index)))

;; H
  (assert (= string_index1 o5))

;; H
  (assert
  (= (div1 (+ (- (to_rep1 (last (rt number))) string_index2) 1) 2) (+ (-
  index2 1) 1)))

;; H
  (assert
  (and (<= (to_rep1 (first (rt number))) string_index2)
  (<= string_index2 (to_rep1 (last (rt number))))))

;; H
  (assert
  (and (<= 1 index2)
  (<= index2 (to_rep4
             (last2
             (rt1
             (rec__very_longs__very_long__long_digits
             result____split_fields3)))))))

;; H
  (assert
  (and
  (and (dynamic_invariant4
  (mk___rep result____split_discrs result____split_fields3) false true true)
  (=> (<= 1 65536) (in_range5 index2)))
  (=> (<= 1 2147483647) (in_range2 string_index2))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt number))) string_index2)
  (<= string_index2 (to_rep1 (last (rt number))))))

;; H
  (assert (= o6 string_index2))

;; H
  (assert (= o7 (select (elts number) o6)))

;; H
  (assert (= o8 (to_rep o7)))

;; H
  (assert
  (and (= temp___830 (+ string_index2 1)) (in_range1 (+ string_index2 1))))

;; H
  (assert
  (and (<= (to_rep1 (first (rt number))) temp___830)
  (<= temp___830 (to_rep1 (last (rt number))))))

;; H
  (assert (= o9 temp___830))

;; H
  (assert (= o10 (select (elts number) o9)))

;; H
  (assert (= o11 (to_rep o10)))

;; H
  (assert (= (ite (= h_okay true) l_okay false) true))

;; H
  (assert (= valid3 valid2))

;; H
  (assert
  (= (to_rep4
     (last2
     (rt1 (rec__very_longs__very_long__long_digits result____split_fields3))))
  r35b))

;; H
  (assert (in_range4 r35b))

;; H
  (assert (and (<= 1 index2) (<= index2 r35b)))

;; H
  (assert
  (= (to_rep3 o12) (bvadd (bvmul ((_ int2bv 8) 16) h_digit) l_digit)))

;; H
  (assert
  (and
  (<= (to_rep4
      (first2
      (rt1 (rec__very_longs__very_long__long_digits result____split_fields3))))
  index2)
  (<= index2 (to_rep4
             (last2
             (rt1
             (rec__very_longs__very_long__long_digits
             result____split_fields3)))))))

;; H
  (assert (= o13 index2))

;; H
  (assert
  (= o14 (store (elts1
                (rec__very_longs__very_long__long_digits
                result____split_fields3)) o13 o12)))

;; H
  (assert (= o14 o15))

;; H
  (assert
  (= (rt1 (rec__very_longs__very_long__long_digits result____split_fields3))
  o16))

;; H
  (assert (= o17 (mk___split_fields (mk___t1 o15 o16))))

;; H
  (assert (= temp___833 (mk___rep result____split_discrs o17)))

;; H
  (assert (= result4 (mk___split_fields__ref result____split_fields3)))

;; H
  (assert (= result____split_fields4 (us_split_fields1 temp___833)))

;; H
  (assert (= result____split_discrs (us_split_discrs1 temp___833)))

;; H
  (assert (not (= index2 1)))

;; H
  (assert (and (= o18 (- index2 1)) (in_range5 (- index2 1))))

;; H
  (assert (= result5 (mk_int__ref index2)))

;; H
  (assert (= index3 o18))

;; H
  (assert (and (= o19 (+ string_index2 2)) (in_range1 (+ string_index2 2))))

;; H
  (assert (= result6 (mk_int__ref string_index2)))

;; H
  (assert (= string_index3 o19))

(assert
;; WP_parameter_def
 ;; File "very_longs.ads", line 84, characters 0-0
  (not (<= 1 index3)))
(check-sat)
(exit)
