(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic comp_div: int, int -> int
axiom comp_div_def: forall x, y:int. x >= 0 and y > 0 -> comp_div(x,y) = x / y
logic comp_mod: int, int -> int
axiom comp_mod_def: forall x, y:int. x >= 0 and y > 0 -> comp_mod(x,y) = x % y
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic abs : int -> int

axiom abs_def :
  (forall x:int [abs(x)]. (((0 <= x) -> (abs(x) = x)) and ((not (0 <= x)) ->
  (abs(x) = (-x)))))

axiom Abs_le :
  (forall x:int. forall y:int. ((abs(x) <= y) <-> (((-y) <= x) and
  (x <= y))))

axiom Abs_pos : (forall x:int. (0 <= abs(x)))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * comp_div(x,y)) + comp_mod(x,y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= comp_div(x,y)) and (comp_div(x,y) <= x))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (((-abs(y)) <  comp_mod(x,y)) and (comp_mod(x,y) <  abs(y)))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  (0 <= comp_div(x,y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) ->
  (comp_div(x,y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) ->
  (0 <= comp_mod(x,y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) ->
  (comp_mod(x,y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (abs((comp_div(x,y) * y)) <= abs(x))))

axiom Div_1 : (forall x:int. (comp_div(x,1) = x))

axiom Mod_1 : (forall x:int. (comp_mod(x,1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_div(x,y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) ->
  (comp_mod(x,y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [comp_div(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_div(((x * y) + z),x) = (y + comp_div(z,x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [comp_mod(((x * y) + z),x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) ->
  (comp_mod(((x * y) + z),x) = comp_mod(z,x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((0 <= (x % y)) and
  ((x % y) <  abs(y)))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) ->
  ((0 <= (x / y)) and ((x / y) <= x))))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (-1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((-1) / y) = (-1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((-1) % y)]. ((1 <  y) -> (((-1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic mod : int, int -> int

axiom mod_def :
  (forall x:int. forall y:int [mod(x, y)]. (((0 <  y) -> (mod(x,
  y) = (x % y))) and ((not (0 <  y)) -> (mod(x, y) = ((x % y) + y)))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type u

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : u, u -> bool

logic dummy1 : u

type u__ref = { u__content : u
}

function u__ref___projection(a: u__ref) : u = (a).u__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic a : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

 (* File "binary_search.ads", line 12, characters 0-0 *)
goal WP_parameter_def :
  (forall left:int. forall right:int. forall med:int. forall j:int.
  forall binary_search__search__result:int. forall temp___158:int.
  forall temp___157:int. forall temp___156:int. forall o:int. forall o1:int.
  forall o2:int. forall o3:int. forall o4:int. forall o5:int. forall o6:int.
  forall o7:int. forall o8:int. forall o9:int. forall o10:int.
  forall o11:int. forall o12:int. forall o13:int. forall o14:int.
  forall o15:int. forall o16:int. forall o17:int. forall o18:int.
  forall o19:int. forall o20:int. forall o21:int. forall o22:int.
  forall o23:int. forall o24:int. forall o25:int. forall o26:int.
  forall o27:int. forall o28:int. forall o29:int. forall med1:int.
  forall j1:int. forall binary_search__search__result1:int.
  forall result:int. forall left1:int. forall result1:int. forall right1:int.
  forall result2:int. forall binary_search__search__result2:int.
  forall result3:int. forall j2:int. forall result4:int. forall med2:int.
  forall result5:int. forall left2:int. forall result6:int.
  forall right2:int. forall result7:int.
  forall binary_search__search__result3:int. forall result8:int.
  forall j3:int. forall result9:int. forall med3:int. forall result10:int.
  forall left3:int. forall result11:int. forall right3:int.
  forall result12:int. forall binary_search__search__result4:int.
  forall result13:int. forall j4:int. forall result14:int. forall med4:int.
  forall result15:int. forall left4:int. forall result16:int.
  forall right4:int. forall result17:int.
  forall binary_search__search__result5:int. forall result18:int.
  forall j5:int. forall result19:int. forall med5:int. forall result20:int.
  forall left5:int. forall result21:int. forall right5:int.
  forall result22:int. forall binary_search__search__result6:int.
  forall result23:int. forall j6:int. forall result24:int. forall med6:int.
  forall result25:int. forall left6:int. forall result26:int.
  forall right6:int. forall result27:int.
  forall binary_search__search__result7:int. forall result28:int.
  forall j7:int. forall result29:int. forall med7:int. forall result30:int.
  forall left7:int. forall result31:int. forall right7:int.
  forall result32:int. forall binary_search__search__result8:int.
  forall result33:int. forall j8:int. forall result34:int. forall med8:int.
  forall result35:int. forall left8:int. forall result36:int.
  forall right8:int. forall result37:int__ref.
  forall binary_search__search__result9:int. forall result38:int__ref.
  forall j9:int. forall result39:int__ref. forall med9:int.
  forall result40:int__ref. forall left9:int. forall result41:int__ref.
  forall right9:int. forall result42:int__ref.
  forall binary_search__search__result10:int. forall result43:int__ref.
  forall j10:int. forall result44:int__ref. forall med10:int.
  forall result45:int__ref. forall left10:int. forall result46:int__ref.
  forall right10:int. forall result47:int__ref.
  forall binary_search__search__result11:int. forall result48:int__ref.
  forall j11:int. forall result49:int__ref. forall med11:int.
  forall result50:int__ref. forall left11:int. forall result51:int__ref.
  forall right11:int. forall result52:int__ref.
  forall binary_search__search__result12:int. forall left12:int__ref.
  forall right12:int__ref. forall med12:int__ref. forall j12:int__ref.
  forall binary_search__search__result13:int__ref. forall left13:int.
  forall right13:int. forall med13:int. forall j13:int.
  forall binary_search__search__result14:int. forall left14:int__ref.
  forall right14:int__ref. forall med14:int__ref. forall j14:int__ref.
  forall binary_search__search__result15:int__ref. forall left15:int.
  forall right15:int. forall med15:int. forall j15:int.
  forall binary_search__search__result16:int. forall left16:int__ref.
  forall right16:int__ref. forall med16:int__ref. forall j16:int__ref.
  forall binary_search__search__result17:int__ref. forall left17:int.
  forall right17:int. forall med17:int. forall j17:int.
  forall binary_search__search__result18:int. forall left18:int__ref.
  forall right18:int__ref. forall med18:int__ref. forall j18:int__ref.
  forall binary_search__search__result19:int__ref. forall left19:int.
  forall right19:int. forall med19:int. forall j19:int.
  forall binary_search__search__result20:int. forall left20:int__ref.
  forall right20:int__ref. forall med20:int__ref. forall j20:int__ref.
  forall binary_search__search__result21:int__ref. forall left21:int.
  forall right21:int. forall med21:int. forall j21:int.
  forall binary_search__search__result22:int. forall left22:int__ref.
  forall right22:int__ref. forall med22:int__ref. forall j22:int__ref.
  forall binary_search__search__result23:int__ref. forall left23:int.
  forall right23:int. forall med23:int. forall j23:int.
  forall binary_search__search__result24:int. forall left24:int__ref.
  forall right24:int__ref. forall med24:int__ref. forall j24:int__ref.
  forall binary_search__search__result25:int__ref. forall left25:int.
  forall right25:int. forall med25:int. forall j25:int.
  forall binary_search__search__result26:int. forall left26:int__ref.
  forall right26:int__ref. forall med26:int__ref. forall j26:int__ref.
  forall binary_search__search__result27:int__ref. forall left27:int.
  forall right27:int. forall med27:int. forall j27:int.
  forall binary_search__search__result28:int. forall left28:int__ref.
  forall right28:int__ref. forall med28:int__ref. forall j28:int__ref.
  forall binary_search__search__result29:int__ref. forall left29:int.
  forall right29:int. forall med29:int. forall j29:int.
  forall binary_search__search__result30:int. forall result53:int__ref.
  forall binary_search__search__result31:int.
  forall binary_search__search__result32:int__ref.
  forall binary_search__search__result33:int. forall left30:int__ref.
  forall right30:int__ref. forall med30:int__ref. forall j30:int__ref.
  forall binary_search__search__result34:int__ref. forall left31:int.
  forall right31:int. forall med31:int. forall j31:int.
  forall binary_search__search__result35:int. forall left32:int__ref.
  forall right32:int__ref. forall med32:int__ref. forall j32:int__ref.
  forall binary_search__search__result36:int__ref. forall left33:int.
  forall right33:int. forall med33:int. forall j33:int.
  forall binary_search__search__result37:int. forall left34:int__ref.
  forall right34:int__ref. forall med34:int__ref. forall j34:int__ref.
  forall binary_search__search__result38:int__ref. forall left35:int.
  forall right35:int. forall med35:int. forall j35:int.
  forall binary_search__search__result39:int.
  (forall result54:int. ((in_range1(i) and
  ((forall i1:int. (((1 <= i1) and (i1 <= 10)) ->
   (forall i2:int. (((i1 <= i2) and (i2 <= 10)) ->
   (to_rep((a[i1])) <= to_rep((a[i2]))))))) and
  (((((1 <= 10) -> in_range2(left)) and (((1 <= 10) -> in_range2(right)) and
  (((1 <= 10) -> in_range2(med)) and ((({ int__content = result } = {
  int__content = left }) and (left1 = 1)) and ((({ int__content = result1
  } = { int__content = right }) and (right1 = 10)) and
  (((((binary_search__search__result36 = { int__content =
  binary_search__search__result2 }) and ((j32 = { int__content = j }) and
  ((med32 = { int__content = med }) and ((right32 = { int__content = right1
  }) and (left32 = { int__content = left1 }))))) and
  ((binary_search__search__result37 = binary_search__search__result2) and
  ((j33 = j1) and ((med33 = med1) and ((right33 = right1) and
  (left33 = left1)))))) and (((i <  to_rep((a[left1]))) or
  (to_rep((a[right1])) <  i)) and (({ int__content = result2 } = {
  int__content = binary_search__search__result }) and
  (binary_search__search__result2 = 0)))) or
  (((not ((i <  to_rep((a[left1]))) or (to_rep((a[right1])) <  i))) and
  ((binary_search__search__result2 = binary_search__search__result) and
  (binary_search__search__result2 = binary_search__search__result1))) and
  ((((binary_search__search__result36 = binary_search__search__result34) and
  ((j32 = j30) and ((med32 = med30) and ((right32 = right30) and
  (left32 = left30))))) and
  ((binary_search__search__result37 = binary_search__search__result35) and
  ((j33 = j31) and ((med33 = med31) and ((right33 = right31) and
  (left33 = left31)))))) and
  (((((binary_search__search__result34 = binary_search__search__result29) and
  ((j30 = j28) and ((med30 = med28) and ((right30 = right28) and
  (left30 = left28))))) and
  ((binary_search__search__result35 = binary_search__search__result30) and
  ((j31 = j29) and ((med31 = med29) and ((right31 = right29) and
  (left31 = left29)))))) and ((temp___158 = med) and
  ((temp___157 = right1) and ((temp___156 = left1) and ((({ int__content =
  result3 } = { int__content = j }) and (j2 = 1)) and
  ((((o = (left1 + comp_div((right1 - left1),2))) and
  in_range2((left1 + comp_div((right1 - left1),2)))) and (({ int__content =
  result4 } = { int__content = med }) and (med2 = o))) and
  (((((binary_search__search__result29 = { int__content =
  binary_search__search__result3 }) and ((j28 = { int__content = j2 }) and
  ((med28 = { int__content = med2 }) and ((right28 = { int__content = right1
  }) and (left28 = { int__content = left1 }))))) and
  ((binary_search__search__result30 = binary_search__search__result3) and
  ((j29 = j2) and ((med29 = med2) and ((right29 = right1) and
  (left29 = left1)))))) and ((not (to_rep((a[med2])) <  i)) and
  ((not (i <  to_rep((a[med2])))) and
  ((binary_search__search__result2 = result7) and
  (binary_search__search__result3 = med2))))) or
  ((((to_rep((a[med2])) <  i) and ((((o1 = (med2 + 1)) and
  in_range2((med2 + 1))) and ((left1 = result5) and (left2 = o1))) and
  ((binary_search__search__result3 = binary_search__search__result2) and
  (right2 = right1)))) or ((not (to_rep((a[med2])) <  i)) and
  (((i <  to_rep((a[med2]))) and ((((o2 = (med2 - 1)) and
  in_range2((med2 - 1))) and ((right1 = result6) and (right2 = o2))) and
  (binary_search__search__result3 = binary_search__search__result2))) and
  (left2 = left1)))) and
  ((((binary_search__search__result29 = binary_search__search__result27) and
  ((j28 = j26) and ((med28 = med26) and ((right28 = right26) and
  (left28 = left26))))) and
  ((binary_search__search__result30 = binary_search__search__result28) and
  ((j29 = j27) and ((med29 = med27) and ((right29 = right27) and
  (left29 = left27)))))) and (((j2 = result8) and (j3 = 2)) and
  ((((o3 = (left2 + comp_div((right2 - left2),2))) and
  in_range2((left2 + comp_div((right2 - left2),2)))) and
  ((med2 = result9) and (med3 = o3))) and
  (((((binary_search__search__result27 = { int__content =
  binary_search__search__result4 }) and ((j26 = { int__content = j3 }) and
  ((med26 = { int__content = med3 }) and ((right26 = { int__content = right2
  }) and (left26 = { int__content = left2 }))))) and
  ((binary_search__search__result28 = binary_search__search__result4) and
  ((j27 = j3) and ((med27 = med3) and ((right27 = right2) and
  (left27 = left2)))))) and ((not (to_rep((a[med3])) <  i)) and
  ((not (i <  to_rep((a[med3])))) and
  ((binary_search__search__result3 = result12) and
  (binary_search__search__result4 = med3))))) or
  ((((to_rep((a[med3])) <  i) and ((((o4 = (med3 + 1)) and
  in_range2((med3 + 1))) and ((left2 = result10) and (left3 = o4))) and
  ((binary_search__search__result4 = binary_search__search__result3) and
  (right3 = right2)))) or ((not (to_rep((a[med3])) <  i)) and
  (((i <  to_rep((a[med3]))) and ((((o5 = (med3 - 1)) and
  in_range2((med3 - 1))) and ((right2 = result11) and (right3 = o5))) and
  (binary_search__search__result4 = binary_search__search__result3))) and
  (left3 = left2)))) and
  ((((binary_search__search__result27 = binary_search__search__result25) and
  ((j26 = j24) and ((med26 = med24) and ((right26 = right24) and
  (left26 = left24))))) and
  ((binary_search__search__result28 = binary_search__search__result26) and
  ((j27 = j25) and ((med27 = med25) and ((right27 = right25) and
  (left27 = left25)))))) and (((j3 = result13) and (j4 = 3)) and
  ((((o6 = (left3 + comp_div((right3 - left3),2))) and
  in_range2((left3 + comp_div((right3 - left3),2)))) and
  ((med3 = result14) and (med4 = o6))) and
  (((((binary_search__search__result25 = { int__content =
  binary_search__search__result5 }) and ((j24 = { int__content = j4 }) and
  ((med24 = { int__content = med4 }) and ((right24 = { int__content = right3
  }) and (left24 = { int__content = left3 }))))) and
  ((binary_search__search__result26 = binary_search__search__result5) and
  ((j25 = j4) and ((med25 = med4) and ((right25 = right3) and
  (left25 = left3)))))) and ((not (to_rep((a[med4])) <  i)) and
  ((not (i <  to_rep((a[med4])))) and
  ((result17 = binary_search__search__result4) and
  (binary_search__search__result5 = med4))))) or
  ((((to_rep((a[med4])) <  i) and ((((o7 = (med4 + 1)) and
  in_range2((med4 + 1))) and ((left3 = result15) and (left4 = o7))) and
  ((binary_search__search__result5 = binary_search__search__result4) and
  (right4 = right3)))) or ((not (to_rep((a[med4])) <  i)) and
  (((i <  to_rep((a[med4]))) and ((((o8 = (med4 - 1)) and
  in_range2((med4 - 1))) and ((right3 = result16) and (right4 = o8))) and
  (binary_search__search__result5 = binary_search__search__result4))) and
  (left4 = left3)))) and
  ((((binary_search__search__result25 = binary_search__search__result23) and
  ((j24 = j22) and ((med24 = med22) and ((right24 = right22) and
  (left24 = left22))))) and
  ((binary_search__search__result26 = binary_search__search__result24) and
  ((j25 = j23) and ((med25 = med23) and ((right25 = right23) and
  (left25 = left23)))))) and (((j4 = result18) and (j5 = 4)) and
  ((((o9 = (left4 + comp_div((right4 - left4),2))) and
  in_range2((left4 + comp_div((right4 - left4),2)))) and
  ((med4 = result19) and (med5 = o9))) and
  (((((binary_search__search__result23 = { int__content =
  binary_search__search__result6 }) and ((j22 = { int__content = j5 }) and
  ((med22 = { int__content = med5 }) and ((right22 = { int__content = right4
  }) and (left22 = { int__content = left4 }))))) and
  ((binary_search__search__result24 = binary_search__search__result6) and
  ((j23 = j5) and ((med23 = med5) and ((right23 = right4) and
  (left23 = left4)))))) and ((not (to_rep((a[med5])) <  i)) and
  ((not (i <  to_rep((a[med5])))) and
  ((result22 = binary_search__search__result5) and
  (binary_search__search__result6 = med5))))) or
  ((((to_rep((a[med5])) <  i) and ((((o10 = (med5 + 1)) and
  in_range2((med5 + 1))) and ((left4 = result20) and (left5 = o10))) and
  ((binary_search__search__result6 = binary_search__search__result5) and
  (right5 = right4)))) or ((not (to_rep((a[med5])) <  i)) and
  (((i <  to_rep((a[med5]))) and ((((o11 = (med5 - 1)) and
  in_range2((med5 - 1))) and ((right4 = result21) and (right5 = o11))) and
  (binary_search__search__result6 = binary_search__search__result5))) and
  (left5 = left4)))) and
  ((((binary_search__search__result23 = binary_search__search__result21) and
  ((j22 = j20) and ((med22 = med20) and ((right22 = right20) and
  (left22 = left20))))) and
  ((binary_search__search__result24 = binary_search__search__result22) and
  ((j23 = j21) and ((med23 = med21) and ((right23 = right21) and
  (left23 = left21)))))) and (((j5 = result23) and (j6 = 5)) and
  ((((o12 = (left5 + comp_div((right5 - left5),2))) and
  in_range2((left5 + comp_div((right5 - left5),2)))) and
  ((med5 = result24) and (med6 = o12))) and
  (((((binary_search__search__result21 = { int__content =
  binary_search__search__result7 }) and ((j20 = { int__content = j6 }) and
  ((med20 = { int__content = med6 }) and ((right20 = { int__content = right5
  }) and (left20 = { int__content = left5 }))))) and
  ((binary_search__search__result22 = binary_search__search__result7) and
  ((j21 = j6) and ((med21 = med6) and ((right21 = right5) and
  (left21 = left5)))))) and ((not (to_rep((a[med6])) <  i)) and
  ((not (i <  to_rep((a[med6])))) and
  ((result27 = binary_search__search__result6) and
  (binary_search__search__result7 = med6))))) or
  ((((to_rep((a[med6])) <  i) and ((((o13 = (med6 + 1)) and
  in_range2((med6 + 1))) and ((left5 = result25) and (left6 = o13))) and
  ((binary_search__search__result7 = binary_search__search__result6) and
  (right6 = right5)))) or ((not (to_rep((a[med6])) <  i)) and
  (((i <  to_rep((a[med6]))) and ((((o14 = (med6 - 1)) and
  in_range2((med6 - 1))) and ((right5 = result26) and (right6 = o14))) and
  (binary_search__search__result7 = binary_search__search__result6))) and
  (left6 = left5)))) and
  ((((binary_search__search__result21 = binary_search__search__result19) and
  ((j20 = j18) and ((med20 = med18) and ((right20 = right18) and
  (left20 = left18))))) and
  ((binary_search__search__result22 = binary_search__search__result20) and
  ((j21 = j19) and ((med21 = med19) and ((right21 = right19) and
  (left21 = left19)))))) and (((j6 = result28) and (j7 = 6)) and
  ((((o15 = (left6 + comp_div((right6 - left6),2))) and
  in_range2((left6 + comp_div((right6 - left6),2)))) and
  ((med6 = result29) and (med7 = o15))) and
  (((((binary_search__search__result19 = { int__content =
  binary_search__search__result8 }) and ((j18 = { int__content = j7 }) and
  ((med18 = { int__content = med7 }) and ((right18 = { int__content = right6
  }) and (left18 = { int__content = left6 }))))) and
  ((binary_search__search__result20 = binary_search__search__result8) and
  ((j19 = j7) and ((med19 = med7) and ((right19 = right6) and
  (left19 = left6)))))) and ((not (to_rep((a[med7])) <  i)) and
  ((not (i <  to_rep((a[med7])))) and
  ((result32 = binary_search__search__result7) and
  (binary_search__search__result8 = med7))))) or
  ((((to_rep((a[med7])) <  i) and ((((o16 = (med7 + 1)) and
  in_range2((med7 + 1))) and ((left6 = result30) and (left7 = o16))) and
  ((binary_search__search__result8 = binary_search__search__result7) and
  (right7 = right6)))) or ((not (to_rep((a[med7])) <  i)) and
  (((i <  to_rep((a[med7]))) and ((((o17 = (med7 - 1)) and
  in_range2((med7 - 1))) and ((right6 = result31) and (right7 = o17))) and
  (binary_search__search__result8 = binary_search__search__result7))) and
  (left7 = left6)))) and
  ((((binary_search__search__result19 = binary_search__search__result17) and
  ((j18 = j16) and ((med18 = med16) and ((right18 = right16) and
  (left18 = left16))))) and
  ((binary_search__search__result20 = binary_search__search__result18) and
  ((j19 = j17) and ((med19 = med17) and ((right19 = right17) and
  (left19 = left17)))))) and (((j7 = result33) and (j8 = 7)) and
  ((((o18 = (left7 + comp_div((right7 - left7),2))) and
  in_range2((left7 + comp_div((right7 - left7),2)))) and
  ((med7 = result34) and (med8 = o18))) and
  (((((binary_search__search__result17 = { int__content =
  binary_search__search__result9 }) and ((j16 = { int__content = j8 }) and
  ((med16 = { int__content = med8 }) and ((right16 = { int__content = right7
  }) and (left16 = { int__content = left7 }))))) and
  ((binary_search__search__result18 = binary_search__search__result9) and
  ((j17 = j8) and ((med17 = med8) and ((right17 = right7) and
  (left17 = left7)))))) and ((not (to_rep((a[med8])) <  i)) and
  ((not (i <  to_rep((a[med8])))) and ((result37 = { int__content =
  binary_search__search__result8 }) and
  (binary_search__search__result9 = med8))))) or
  ((((to_rep((a[med8])) <  i) and ((((o19 = (med8 + 1)) and
  in_range2((med8 + 1))) and ((left7 = result35) and (left8 = o19))) and
  ((binary_search__search__result9 = binary_search__search__result8) and
  (right8 = right7)))) or ((not (to_rep((a[med8])) <  i)) and
  (((i <  to_rep((a[med8]))) and ((((o20 = (med8 - 1)) and
  in_range2((med8 - 1))) and ((right7 = result36) and (right8 = o20))) and
  (binary_search__search__result9 = binary_search__search__result8))) and
  (left8 = left7)))) and
  ((((binary_search__search__result17 = binary_search__search__result15) and
  ((j16 = j14) and ((med16 = med14) and ((right16 = right14) and
  (left16 = left14))))) and
  ((binary_search__search__result18 = binary_search__search__result16) and
  ((j17 = j15) and ((med17 = med15) and ((right17 = right15) and
  (left17 = left15)))))) and (((result38 = { int__content = j8 }) and
  (j9 = 8)) and ((((o21 = (left8 + comp_div((right8 - left8),2))) and
  in_range2((left8 + comp_div((right8 - left8),2)))) and ((result39 = {
  int__content = med8 }) and (med9 = o21))) and
  (((((binary_search__search__result15 = { int__content =
  binary_search__search__result10 }) and ((j14 = { int__content = j9 }) and
  ((med14 = { int__content = med9 }) and ((right14 = { int__content = right8
  }) and (left14 = { int__content = left8 }))))) and
  ((binary_search__search__result16 = binary_search__search__result10) and
  ((j15 = j9) and ((med15 = med9) and ((right15 = right8) and
  (left15 = left8)))))) and ((not (to_rep((a[med9])) <  i)) and
  ((not (i <  to_rep((a[med9])))) and ((result42 = { int__content =
  binary_search__search__result9 }) and
  (binary_search__search__result10 = med9))))) or
  ((((to_rep((a[med9])) <  i) and ((((o22 = (med9 + 1)) and
  in_range2((med9 + 1))) and ((result40 = { int__content = left8 }) and
  (left9 = o22))) and
  ((binary_search__search__result10 = binary_search__search__result9) and
  (right9 = right8)))) or ((not (to_rep((a[med9])) <  i)) and
  (((i <  to_rep((a[med9]))) and ((((o23 = (med9 - 1)) and
  in_range2((med9 - 1))) and ((result41 = { int__content = right8 }) and
  (right9 = o23))) and
  (binary_search__search__result10 = binary_search__search__result9))) and
  (left9 = left8)))) and
  ((((binary_search__search__result15 = binary_search__search__result13) and
  ((j14 = j12) and ((med14 = med12) and ((right14 = right12) and
  (left14 = left12))))) and
  ((binary_search__search__result16 = binary_search__search__result14) and
  ((j15 = j13) and ((med15 = med13) and ((right15 = right13) and
  (left15 = left13)))))) and (((result43 = { int__content = j9 }) and
  (j10 = 9)) and ((((o24 = (left9 + comp_div((right9 - left9),2))) and
  in_range2((left9 + comp_div((right9 - left9),2)))) and ((result44 = {
  int__content = med9 }) and (med10 = o24))) and
  (((((binary_search__search__result13 = { int__content =
  binary_search__search__result11 }) and ((j12 = { int__content = j10 }) and
  ((med12 = { int__content = med10 }) and ((right12 = { int__content = right9
  }) and (left12 = { int__content = left9 }))))) and
  ((binary_search__search__result14 = binary_search__search__result11) and
  ((j13 = j10) and ((med13 = med10) and ((right13 = right9) and
  (left13 = left9)))))) and ((not (to_rep((a[med10])) <  i)) and
  ((not (i <  to_rep((a[med10])))) and ((result47 = { int__content =
  binary_search__search__result10 }) and
  (binary_search__search__result11 = med10))))) or
  ((((to_rep((a[med10])) <  i) and ((((o25 = (med10 + 1)) and
  in_range2((med10 + 1))) and ((result45 = { int__content = left9 }) and
  (left10 = o25))) and
  ((binary_search__search__result11 = binary_search__search__result10) and
  (right10 = right9)))) or ((not (to_rep((a[med10])) <  i)) and
  (((i <  to_rep((a[med10]))) and ((((o26 = (med10 - 1)) and
  in_range2((med10 - 1))) and ((result46 = { int__content = right9 }) and
  (right10 = o26))) and
  (binary_search__search__result11 = binary_search__search__result10))) and
  (left10 = left9)))) and ((((binary_search__search__result13 = {
  int__content = binary_search__search__result12 }) and ((j12 = {
  int__content = j11 }) and ((med12 = { int__content = med11 }) and
  ((right12 = { int__content = right10 }) and (left12 = { int__content =
  left10 }))))) and
  ((binary_search__search__result14 = binary_search__search__result12) and
  ((j13 = j11) and ((med13 = med11) and ((right13 = right10) and
  (left13 = left10)))))) and (((result48 = { int__content = j10 }) and
  (j11 = 10)) and ((((o27 = (left10 + comp_div((right10 - left10),2))) and
  in_range2((left10 + comp_div((right10 - left10),2)))) and ((result49 = {
  int__content = med10 }) and (med11 = o27))) and
  ((not (to_rep((a[med11])) <  i)) and ((not (i <  to_rep((a[med11])))) and
  ((result52 = { int__content = binary_search__search__result11 }) and
  (binary_search__search__result12 = med11))))))))))))))))))))))))))))))))))))))))))))))))))))))) or
  (((({ int__content = result3 } = { int__content = j }) and (j2 = 1)) and
  ((((o = (left1 + comp_div((right1 - left1),2))) and
  in_range2((left1 + comp_div((right1 - left1),2)))) and (({ int__content =
  result4 } = { int__content = med }) and (med2 = o))) and
  ((((to_rep((a[med2])) <  i) and ((((o1 = (med2 + 1)) and
  in_range2((med2 + 1))) and ((left1 = result5) and (left2 = o1))) and
  ((binary_search__search__result3 = binary_search__search__result2) and
  (right2 = right1)))) or ((not (to_rep((a[med2])) <  i)) and
  (((i <  to_rep((a[med2]))) and ((((o2 = (med2 - 1)) and
  in_range2((med2 - 1))) and ((right1 = result6) and (right2 = o2))) and
  (binary_search__search__result3 = binary_search__search__result2))) and
  (left2 = left1)))) and (((j2 = result8) and (j3 = 2)) and
  ((((o3 = (left2 + comp_div((right2 - left2),2))) and
  in_range2((left2 + comp_div((right2 - left2),2)))) and
  ((med2 = result9) and (med3 = o3))) and ((((to_rep((a[med3])) <  i) and
  ((((o4 = (med3 + 1)) and in_range2((med3 + 1))) and ((left2 = result10) and
  (left3 = o4))) and
  ((binary_search__search__result4 = binary_search__search__result3) and
  (right3 = right2)))) or ((not (to_rep((a[med3])) <  i)) and
  (((i <  to_rep((a[med3]))) and ((((o5 = (med3 - 1)) and
  in_range2((med3 - 1))) and ((right2 = result11) and (right3 = o5))) and
  (binary_search__search__result4 = binary_search__search__result3))) and
  (left3 = left2)))) and (((j3 = result13) and (j4 = 3)) and
  ((((o6 = (left3 + comp_div((right3 - left3),2))) and
  in_range2((left3 + comp_div((right3 - left3),2)))) and
  ((med3 = result14) and (med4 = o6))) and ((((to_rep((a[med4])) <  i) and
  ((((o7 = (med4 + 1)) and in_range2((med4 + 1))) and ((left3 = result15) and
  (left4 = o7))) and
  ((binary_search__search__result5 = binary_search__search__result4) and
  (right4 = right3)))) or ((not (to_rep((a[med4])) <  i)) and
  (((i <  to_rep((a[med4]))) and ((((o8 = (med4 - 1)) and
  in_range2((med4 - 1))) and ((right3 = result16) and (right4 = o8))) and
  (binary_search__search__result5 = binary_search__search__result4))) and
  (left4 = left3)))) and (((j4 = result18) and (j5 = 4)) and
  ((((o9 = (left4 + comp_div((right4 - left4),2))) and
  in_range2((left4 + comp_div((right4 - left4),2)))) and
  ((med4 = result19) and (med5 = o9))) and ((((to_rep((a[med5])) <  i) and
  ((((o10 = (med5 + 1)) and in_range2((med5 + 1))) and
  ((left4 = result20) and (left5 = o10))) and
  ((binary_search__search__result6 = binary_search__search__result5) and
  (right5 = right4)))) or ((not (to_rep((a[med5])) <  i)) and
  (((i <  to_rep((a[med5]))) and ((((o11 = (med5 - 1)) and
  in_range2((med5 - 1))) and ((right4 = result21) and (right5 = o11))) and
  (binary_search__search__result6 = binary_search__search__result5))) and
  (left5 = left4)))) and (((j5 = result23) and (j6 = 5)) and
  ((((o12 = (left5 + comp_div((right5 - left5),2))) and
  in_range2((left5 + comp_div((right5 - left5),2)))) and
  ((med5 = result24) and (med6 = o12))) and ((((to_rep((a[med6])) <  i) and
  ((((o13 = (med6 + 1)) and in_range2((med6 + 1))) and
  ((left5 = result25) and (left6 = o13))) and
  ((binary_search__search__result7 = binary_search__search__result6) and
  (right6 = right5)))) or ((not (to_rep((a[med6])) <  i)) and
  (((i <  to_rep((a[med6]))) and ((((o14 = (med6 - 1)) and
  in_range2((med6 - 1))) and ((right5 = result26) and (right6 = o14))) and
  (binary_search__search__result7 = binary_search__search__result6))) and
  (left6 = left5)))) and (((j6 = result28) and (j7 = 6)) and
  ((((o15 = (left6 + comp_div((right6 - left6),2))) and
  in_range2((left6 + comp_div((right6 - left6),2)))) and
  ((med6 = result29) and (med7 = o15))) and ((((to_rep((a[med7])) <  i) and
  ((((o16 = (med7 + 1)) and in_range2((med7 + 1))) and
  ((left6 = result30) and (left7 = o16))) and
  ((binary_search__search__result8 = binary_search__search__result7) and
  (right7 = right6)))) or ((not (to_rep((a[med7])) <  i)) and
  (((i <  to_rep((a[med7]))) and ((((o17 = (med7 - 1)) and
  in_range2((med7 - 1))) and ((right6 = result31) and (right7 = o17))) and
  (binary_search__search__result8 = binary_search__search__result7))) and
  (left7 = left6)))) and (((j7 = result33) and (j8 = 7)) and
  ((((o18 = (left7 + comp_div((right7 - left7),2))) and
  in_range2((left7 + comp_div((right7 - left7),2)))) and
  ((med7 = result34) and (med8 = o18))) and ((((to_rep((a[med8])) <  i) and
  ((((o19 = (med8 + 1)) and in_range2((med8 + 1))) and
  ((left7 = result35) and (left8 = o19))) and
  ((binary_search__search__result9 = binary_search__search__result8) and
  (right8 = right7)))) or ((not (to_rep((a[med8])) <  i)) and
  (((i <  to_rep((a[med8]))) and ((((o20 = (med8 - 1)) and
  in_range2((med8 - 1))) and ((right7 = result36) and (right8 = o20))) and
  (binary_search__search__result9 = binary_search__search__result8))) and
  (left8 = left7)))) and (((result38 = { int__content = j8 }) and
  (j9 = 8)) and ((((o21 = (left8 + comp_div((right8 - left8),2))) and
  in_range2((left8 + comp_div((right8 - left8),2)))) and ((result39 = {
  int__content = med8 }) and (med9 = o21))) and
  ((((to_rep((a[med9])) <  i) and ((((o22 = (med9 + 1)) and
  in_range2((med9 + 1))) and ((result40 = { int__content = left8 }) and
  (left9 = o22))) and
  ((binary_search__search__result10 = binary_search__search__result9) and
  (right9 = right8)))) or ((not (to_rep((a[med9])) <  i)) and
  (((i <  to_rep((a[med9]))) and ((((o23 = (med9 - 1)) and
  in_range2((med9 - 1))) and ((result41 = { int__content = right8 }) and
  (right9 = o23))) and
  (binary_search__search__result10 = binary_search__search__result9))) and
  (left9 = left8)))) and (((result43 = { int__content = j9 }) and
  (j10 = 9)) and ((((o24 = (left9 + comp_div((right9 - left9),2))) and
  in_range2((left9 + comp_div((right9 - left9),2)))) and ((result44 = {
  int__content = med9 }) and (med10 = o24))) and
  ((((to_rep((a[med10])) <  i) and ((((o25 = (med10 + 1)) and
  in_range2((med10 + 1))) and ((result45 = { int__content = left9 }) and
  (left10 = o25))) and
  ((binary_search__search__result11 = binary_search__search__result10) and
  (right10 = right9)))) or ((not (to_rep((a[med10])) <  i)) and
  (((i <  to_rep((a[med10]))) and ((((o26 = (med10 - 1)) and
  in_range2((med10 - 1))) and ((result46 = { int__content = right9 }) and
  (right10 = o26))) and
  (binary_search__search__result11 = binary_search__search__result10))) and
  (left10 = left9)))) and (((result48 = { int__content = j10 }) and
  (j11 = 10)) and ((((o27 = (left10 + comp_div((right10 - left10),2))) and
  in_range2((left10 + comp_div((right10 - left10),2)))) and ((result49 = {
  int__content = med10 }) and (med11 = o27))) and
  (((to_rep((a[med11])) <  i) and ((((o28 = (med11 + 1)) and
  in_range2((med11 + 1))) and ((result50 = { int__content = left10 }) and
  (left11 = o28))) and
  ((binary_search__search__result12 = binary_search__search__result11) and
  (right11 = right10)))) or ((not (to_rep((a[med11])) <  i)) and
  (((i <  to_rep((a[med11]))) and ((((o29 = (med11 - 1)) and
  in_range2((med11 - 1))) and ((result51 = { int__content = right10 }) and
  (right11 = o29))) and
  (binary_search__search__result12 = binary_search__search__result11))) and
  (left11 = left10))))))))))))))))))))))))))))))))) and
  ((((binary_search__search__result34 = binary_search__search__result32) and
  ((j30 = { int__content = j11 }) and ((med30 = { int__content = med11 }) and
  ((right30 = { int__content = right11 }) and (left30 = { int__content =
  left11 }))))) and
  ((binary_search__search__result35 = binary_search__search__result33) and
  ((j31 = j11) and ((med31 = med11) and ((right31 = right11) and
  (left31 = left11)))))) and (((binary_search__search__result32 = {
  int__content = binary_search__search__result31 }) and
  (binary_search__search__result33 = binary_search__search__result31)) and
  ((result53 = { int__content = binary_search__search__result12 }) and
  (binary_search__search__result31 = 0)))))))))))))) and
  (((binary_search__search__result38 = binary_search__search__result36) and
  ((j34 = j32) and ((med34 = med32) and ((right34 = right32) and
  (left34 = left32))))) and
  ((binary_search__search__result39 = binary_search__search__result37) and
  ((j35 = j33) and ((med35 = med33) and ((right35 = right33) and
  (left35 = left33))))))) and
  (result54 = (binary_search__search__result38).int__content)))) ->
  (((1 <= (binary_search__search__result38).int__content) and
  ((binary_search__search__result38).int__content <= 10)) ->
  (to_rep((a[(binary_search__search__result38).int__content])) = i)))))
