;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32)))))
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64)))))
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun to_int3 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort score_t 0)

(define-fun in_range2 ((x (_ BitVec 32))) Bool (and
                                               (bvule ((_ int2bv 32) 0) x)
                                               (bvule x ((_ int2bv 32) 99999))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 99999)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (score_t score_t) Bool)

(declare-const dummy1 score_t)

(declare-datatypes ()
((score_t__ref (mk_score_t__ref (score_t__content score_t)))))
(define-fun score_t__ref___projection ((a score_t__ref)) score_t (score_t__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_1849 (_ BitVec 32))
  (temp___is_init_1846 Bool) (temp___skip_constant_1847 Bool)
  (temp___do_toplevel_1848 Bool)) Bool (=>
                                       (or (= temp___is_init_1846 true)
                                       (bvule ((_ int2bv 32) 0) ((_ int2bv 32) 99999)))
                                       (in_range2 temp___expr_1849)))

(declare-sort cell 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (cell cell) Bool)

(declare-const dummy2 cell)

(declare-datatypes () ((cell__ref (mk_cell__ref (cell__content cell)))))
(define-fun cell__ref___projection ((a cell__ref)) cell (cell__content a))

(declare-fun to_rep (cell) Int)

(declare-fun of_rep (Int) cell)

;; inversion_axiom
  (assert
  (forall ((x cell)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x cell)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort y_coord 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (y_coord y_coord) Bool)

(declare-const dummy3 y_coord)

(declare-datatypes ()
((y_coord__ref (mk_y_coord__ref (y_coord__content y_coord)))))
(define-fun y_coord__ref___projection ((a y_coord__ref)) y_coord (y_coord__content
                                                                 a))

(define-fun dynamic_invariant2 ((temp___expr_1879 Int)
  (temp___is_init_1876 Bool) (temp___skip_constant_1877 Bool)
  (temp___do_toplevel_1878 Bool)) Bool (=>
                                       (or (= temp___is_init_1876 true)
                                       (<= 1 20)) (in_range4
                                       temp___expr_1879)))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int cell))))))
(declare-fun slide ((Array Int cell) Int Int) (Array Int cell))

;; slide_eq
  (assert
  (forall ((a (Array Int cell)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int cell)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int cell) Int Int (Array Int cell) Int
  Int) (Array Int cell))

;; concat_def
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (cell Int) (Array Int cell))

;; singleton_def
  (assert
  (forall ((v cell))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int cell)) (a__first Int) (a__last Int)
  (b (Array Int cell)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_139 Int))
                           (=>
                           (and (<= a__first temp___idx_139)
                           (<= temp___idx_139 a__last))
                           (= (to_rep (select a temp___idx_139)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_139)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_139 Int))
  (=> (and (<= a__first temp___idx_139) (<= temp___idx_139 a__last))
  (= (to_rep (select a temp___idx_139)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_139)))))))))))

(declare-fun compare ((Array Int cell) Int Int (Array Int cell) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy4 (Array Int cell))

(declare-const value__size Int)

(declare-fun object__size ((Array Int cell)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int cell)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int cell)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int cell))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int cell))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int cell))) (<= 0 (object__alignment a))))

(declare-fun user_eq4 ((Array Int cell) (Array Int cell)) Bool)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int cell)))))))
(declare-fun slide1 ((Array Int (Array Int cell)) Int
  Int) (Array Int (Array Int cell)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int cell))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int cell))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int cell)) Int Int
  (Array Int (Array Int cell)) Int Int) (Array Int (Array Int cell)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int cell))) (b (Array Int (Array Int cell))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int cell) Int) (Array Int (Array Int cell)))

;; singleton_def
  (assert
  (forall ((v (Array Int cell)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int (Array Int cell))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int cell))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_140 Int))
                           (=>
                           (and (<= a__first temp___idx_140)
                           (<= temp___idx_140 a__last))
                           (= (bool_eq (select a temp___idx_140) 1 10
                              (select b (+ (- b__first a__first) temp___idx_140))
                              1 10) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int cell))) (b (Array Int (Array Int cell))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_140 Int))
  (=> (and (<= a__first temp___idx_140) (<= temp___idx_140 a__last))
  (= (bool_eq (select a temp___idx_140) 1 10
     (select b (+ (- b__first a__first) temp___idx_140)) 1 10) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort shape 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (shape shape) Bool)

(declare-const dummy5 shape)

(declare-datatypes () ((shape__ref (mk_shape__ref (shape__content shape)))))
(define-fun shape__ref___projection ((a shape__ref)) shape (shape__content a))

(declare-fun to_rep1 (shape) Int)

(declare-fun of_rep1 (Int) shape)

;; inversion_axiom
  (assert
  (forall ((x shape))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x shape)) (! (in_range5 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort px_coord 0)

(define-fun in_range6 ((x Int)) Bool (and (<= (- 1) x) (<= x 9)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (px_coord px_coord) Bool)

(declare-const dummy6 px_coord)

(declare-datatypes ()
((px_coord__ref (mk_px_coord__ref (px_coord__content px_coord)))))
(define-fun px_coord__ref___projection ((a px_coord__ref)) px_coord (px_coord__content
                                                                    a))

(declare-fun to_rep2 (px_coord) Int)

(declare-fun of_rep2 (Int) px_coord)

;; inversion_axiom
  (assert
  (forall ((x px_coord))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x px_coord)) (! (in_range6 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort py_coord 0)

(define-fun in_range7 ((x Int)) Bool (and (<= (- 1) x) (<= x 19)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (py_coord py_coord) Bool)

(declare-const dummy7 py_coord)

(declare-datatypes ()
((py_coord__ref (mk_py_coord__ref (py_coord__content py_coord)))))
(define-fun py_coord__ref___projection ((a py_coord__ref)) py_coord (py_coord__content
                                                                    a))

(declare-fun to_rep3 (py_coord) Int)

(declare-fun of_rep3 (Int) py_coord)

;; inversion_axiom
  (assert
  (forall ((x py_coord))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x py_coord)) (! (in_range7 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort direction 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (direction direction) Bool)

(declare-const dummy8 direction)

(declare-datatypes ()
((direction__ref (mk_direction__ref (direction__content direction)))))
(define-fun direction__ref___projection ((a direction__ref)) direction
  (direction__content a))

(declare-fun to_rep4 (direction) Int)

(declare-fun of_rep4 (Int) direction)

;; inversion_axiom
  (assert
  (forall ((x direction))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x direction)) (! (in_range8
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__patris__piece__s shape)(rec__patris__piece__d direction)(rec__patris__piece__x px_coord)(rec__patris__piece__y py_coord)))))
(define-fun us_split_fields_S__projection ((a us_split_fields)) shape
  (rec__patris__piece__s a))

(define-fun us_split_fields_D__projection ((a us_split_fields)) direction
  (rec__patris__piece__d a))

(define-fun us_split_fields_X__projection ((a us_split_fields)) px_coord
  (rec__patris__piece__x a))

(define-fun us_split_fields_Y__projection ((a us_split_fields)) py_coord
  (rec__patris__piece__y a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (and
                        (= (to_rep1
                           (rec__patris__piece__s (us_split_fields1 a)))
                        (to_rep1
                        (rec__patris__piece__s (us_split_fields1 b))))
                        (= (to_rep4
                           (rec__patris__piece__d (us_split_fields1 a)))
                        (to_rep4
                        (rec__patris__piece__d (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__patris__piece__x (us_split_fields1 a)))
                        (to_rep2
                        (rec__patris__piece__x (us_split_fields1 b)))))
                        (= (to_rep3
                           (rec__patris__piece__y (us_split_fields1 a)))
                        (to_rep3
                        (rec__patris__piece__y (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const patris__piece__s__first__bit Int)

(declare-const patris__piece__s__last__bit Int)

(declare-const patris__piece__s__position Int)

;; patris__piece__s__first__bit_axiom
  (assert (<= 0 patris__piece__s__first__bit))

;; patris__piece__s__last__bit_axiom
  (assert (< patris__piece__s__first__bit patris__piece__s__last__bit))

;; patris__piece__s__position_axiom
  (assert (<= 0 patris__piece__s__position))

(declare-const patris__piece__d__first__bit Int)

(declare-const patris__piece__d__last__bit Int)

(declare-const patris__piece__d__position Int)

;; patris__piece__d__first__bit_axiom
  (assert (<= 0 patris__piece__d__first__bit))

;; patris__piece__d__last__bit_axiom
  (assert (< patris__piece__d__first__bit patris__piece__d__last__bit))

;; patris__piece__d__position_axiom
  (assert (<= 0 patris__piece__d__position))

(declare-const patris__piece__x__first__bit Int)

(declare-const patris__piece__x__last__bit Int)

(declare-const patris__piece__x__position Int)

;; patris__piece__x__first__bit_axiom
  (assert (<= 0 patris__piece__x__first__bit))

;; patris__piece__x__last__bit_axiom
  (assert (< patris__piece__x__first__bit patris__piece__x__last__bit))

;; patris__piece__x__position_axiom
  (assert (<= 0 patris__piece__x__position))

(declare-const patris__piece__y__first__bit Int)

(declare-const patris__piece__y__last__bit Int)

(declare-const patris__piece__y__position Int)

;; patris__piece__y__first__bit_axiom
  (assert (<= 0 patris__piece__y__first__bit))

;; patris__piece__y__last__bit_axiom
  (assert (< patris__piece__y__first__bit patris__piece__y__last__bit))

;; patris__piece__y__position_axiom
  (assert (<= 0 patris__piece__y__position))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes () ((piece__ref (mk_piece__ref (piece__content us_rep)))))
(define-fun piece__ref___projection ((a piece__ref)) us_rep (piece__content
                                                            a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort state 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (state state) Bool)

(declare-const dummy10 state)

(declare-datatypes () ((state__ref (mk_state__ref (state__content state)))))
(define-fun state__ref___projection ((a state__ref)) state (state__content a))

(define-fun dynamic_invariant3 ((temp___expr_1942 Int)
  (temp___is_init_1939 Bool) (temp___skip_constant_1940 Bool)
  (temp___do_toplevel_1941 Bool)) Bool (=>
                                       (or (= temp___is_init_1939 true)
                                       (<= 0 4)) (in_range9
                                       temp___expr_1942)))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun get_state (Int) Int)

(declare-fun get_state__function_guard (Int Int) Bool)

;; get_state__post_axiom
  (assert
  (forall ((patris__cur_state Int))
  (! (=> (dynamic_invariant3 patris__cur_state true true true)
     (dynamic_invariant3 (get_state patris__cur_state) true false true)) :pattern (
  (get_state patris__cur_state)) )))

;; get_state__def_axiom
  (assert
  (forall ((patris__cur_state Int))
  (! (=> (dynamic_invariant3 patris__cur_state true true true)
     (= (get_state patris__cur_state) patris__cur_state)) :pattern ((get_state
                                                                    patris__cur_state)) )))

(declare-fun is_complete_line ((Array Int cell)) Bool)

(declare-fun is_complete_line__function_guard (Bool (Array Int cell)) Bool)

;; is_complete_line__post_axiom
  (assert true)

;; is_complete_line__def_axiom
  (assert
  (forall ((l (Array Int cell)))
  (! (= (= (is_complete_line l) true)
     (forall ((x Int))
     (=> (and (<= 1 x) (<= x 10)) (not (= (to_rep (select l x)) 0))))) :pattern (
  (is_complete_line l)) )))

(declare-fun is_empty_line ((Array Int cell)) Bool)

(declare-fun is_empty_line__function_guard (Bool (Array Int cell)) Bool)

;; is_empty_line__post_axiom
  (assert true)

;; is_empty_line__def_axiom
  (assert
  (forall ((l (Array Int cell)))
  (! (= (= (is_empty_line l) true)
     (forall ((x Int))
     (=> (and (<= 1 x) (<= x 10)) (= (to_rep (select l x)) 0)))) :pattern (
  (is_empty_line l)) )))

(declare-fun no_complete_lines ((Array Int (Array Int cell))) Bool)

(declare-fun no_complete_lines__function_guard (Bool
  (Array Int (Array Int cell))) Bool)

;; no_complete_lines__post_axiom
  (assert true)

;; no_complete_lines__def_axiom
  (assert
  (forall ((b (Array Int (Array Int cell))))
  (! (= (= (no_complete_lines b) true)
     (forall ((y Int))
     (=> (and (<= 1 y) (<= y 20))
     (not (= (is_complete_line (select b y)) true))))) :pattern ((no_complete_lines
                                                                 b)) )))

(declare-fun valid_configuration__2 (Int us_split_fields
  (Array Int (Array Int cell))) Bool)

(declare-fun valid_configuration__2__function_guard (Bool Int us_split_fields
  (Array Int (Array Int cell))) Bool)

(declare-fun get_board ((Array Int (Array Int cell))) (Array Int (Array Int cell)))

(declare-fun get_board__function_guard ((Array Int (Array Int cell))
  (Array Int (Array Int cell))) Bool)

(declare-fun get_piece (us_split_fields) us_rep)

(declare-fun get_piece__function_guard (us_rep us_split_fields) Bool)

(declare-fun valid_configuration ((Array Int (Array Int cell)) Int
  us_rep) Bool)

(declare-fun valid_configuration__function_guard (Bool
  (Array Int (Array Int cell)) Int us_rep) Bool)

;; valid_configuration__2__post_axiom
  (assert true)

;; valid_configuration__2__def_axiom
  (assert
  (forall ((patris__cur_state Int))
  (forall ((patris__cur_piece__fields us_split_fields))
  (forall ((patris__cur_board (Array Int (Array Int cell))))
  (! (=
     (= (valid_configuration__2 patris__cur_state patris__cur_piece__fields
        patris__cur_board) true)
     (= (valid_configuration (get_board patris__cur_board)
        (get_state patris__cur_state) (get_piece patris__cur_piece__fields)) true)) :pattern (
  (valid_configuration__2 patris__cur_state patris__cur_piece__fields
  patris__cur_board)) )))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const empty_line (Array Int cell))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun patris__delete_complete_lines__empty_line__aggregate_def (Int) (Array Int cell))

;; def_axiom
  (assert
  (forall ((temp___516 Int))
  (forall ((temp___517 Int))
  (= (select (patris__delete_complete_lines__empty_line__aggregate_def
             temp___516) temp___517) (of_rep temp___516)))))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const r21b Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-fun to_rep5 (integer) Int)

(declare-fun of_rep5 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq11 (integer integer) Bool)

(declare-const dummy11 integer)

(declare-datatypes () ((t22b__ref (mk_t22b__ref (t22b__content integer)))))
(define-fun t22b__ref___projection ((a t22b__ref)) integer (t22b__content a))

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

;; empty_line__def_axiom
  (assert
  (= empty_line (patris__delete_complete_lines__empty_line__aggregate_def 0)))

(define-fun dynamic_invariant4 ((temp___expr_1855 Int)
  (temp___is_init_1852 Bool) (temp___skip_constant_1853 Bool)
  (temp___do_toplevel_1854 Bool)) Bool (=>
                                       (or (= temp___is_init_1852 true)
                                       (<= 0 7)) (in_range3
                                       temp___expr_1855)))

(define-fun dynamic_invariant5 ((temp___expr_1861 Int)
  (temp___is_init_1858 Bool) (temp___skip_constant_1859 Bool)
  (temp___do_toplevel_1860 Bool)) Bool (=>
                                       (or (= temp___is_init_1858 true)
                                       (<= 1 7)) (in_range5
                                       temp___expr_1861)))

(declare-sort x_coord 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq12 (x_coord x_coord) Bool)

(declare-const dummy12 x_coord)

(declare-datatypes ()
((x_coord__ref (mk_x_coord__ref (x_coord__content x_coord)))))
(define-fun x_coord__ref___projection ((a x_coord__ref)) x_coord (x_coord__content
                                                                 a))

(define-fun dynamic_invariant6 ((temp___expr_1873 Int)
  (temp___is_init_1870 Bool) (temp___skip_constant_1871 Bool)
  (temp___do_toplevel_1872 Bool)) Bool (=>
                                       (or (= temp___is_init_1870 true)
                                       (<= 1 10)) (in_range10
                                       temp___expr_1873)))

;; get_board__post_axiom
  (assert true)

;; get_board__def_axiom
  (assert
  (forall ((patris__cur_board (Array Int (Array Int cell))))
  (! (= (get_board patris__cur_board) patris__cur_board) :pattern ((get_board
                                                                   patris__cur_board)) )))

(define-fun dynamic_invariant7 ((temp___expr_1914 Int)
  (temp___is_init_1911 Bool) (temp___skip_constant_1912 Bool)
  (temp___do_toplevel_1913 Bool)) Bool (=>
                                       (or (= temp___is_init_1911 true)
                                       (<= (- 1) 9)) (in_range6
                                       temp___expr_1914)))

(define-fun dynamic_invariant8 ((temp___expr_1920 Int)
  (temp___is_init_1917 Bool) (temp___skip_constant_1918 Bool)
  (temp___do_toplevel_1919 Bool)) Bool (=>
                                       (or (= temp___is_init_1917 true)
                                       (<= (- 1) 19)) (in_range7
                                       temp___expr_1920)))

(define-fun dynamic_invariant9 ((temp___expr_1926 Int)
  (temp___is_init_1923 Bool) (temp___skip_constant_1924 Bool)
  (temp___do_toplevel_1925 Bool)) Bool (=>
                                       (or (= temp___is_init_1923 true)
                                       (<= 0 3)) (in_range8
                                       temp___expr_1926)))

;; get_piece__post_axiom
  (assert true)

;; get_piece__def_axiom
  (assert
  (forall ((patris__cur_piece__fields us_split_fields))
  (! (= (get_piece patris__cur_piece__fields) (mk___rep
                                              patris__cur_piece__fields)) :pattern (
  (get_piece patris__cur_piece__fields)) )))

(declare-sort map1 0)

(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 map1)))))
(declare-fun get (map1 Int Int) Bool)

(declare-fun set (map1 Int Int Bool) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a Bool))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a Bool))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide2 (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide2 a old_first new_first old_first_2 new_first_2) i j)
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide2 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq3 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_141 Int)
                             (temp___idx_142 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_141)
                             (<= temp___idx_141 a__last))
                             (and (<= a__first_2 temp___idx_142)
                             (<= temp___idx_142 a__last_2)))
                             (= (get a temp___idx_141 temp___idx_142)
                             (get b (+ (- b__first a__first) temp___idx_141)
                             (+ (- b__first_2 a__first_2) temp___idx_142))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq3 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_141 Int) (temp___idx_142 Int))
  (=>
  (and (and (<= a__first temp___idx_141) (<= temp___idx_141 a__last))
  (and (<= a__first_2 temp___idx_142) (<= temp___idx_142 a__last_2)))
  (= (get a temp___idx_141 temp___idx_142) (get b
                                           (+ (- b__first a__first) temp___idx_141)
                                           (+ (- b__first_2 a__first_2) temp___idx_142))))))))))

(declare-const dummy13 map1)

(declare-const value__size2 Int)

(declare-fun object__size2 (map1) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 (map1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment2 a))))

(declare-fun user_eq13 (map1 map1) Bool)

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int map1))))))
(declare-fun slide3 ((Array Int map1) Int Int) (Array Int map1))

;; slide_eq
  (assert
  (forall ((a (Array Int map1)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int map1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int map1) Int Int (Array Int map1) Int
  Int) (Array Int map1))

;; concat_def
  (assert
  (forall ((a (Array Int map1)) (b (Array Int map1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (map1 Int) (Array Int map1))

;; singleton_def
  (assert
  (forall ((v map1))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq4 ((a (Array Int map1)) (a__first Int) (a__last Int)
  (b (Array Int map1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_143 Int))
                           (=>
                           (and (<= a__first temp___idx_143)
                           (<= temp___idx_143 a__last))
                           (= (bool_eq3 (select a temp___idx_143) 0 3 0 3
                              (select b (+ (- b__first a__first) temp___idx_143))
                              0 3 0 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int map1)) (b (Array Int map1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_143 Int))
  (=> (and (<= a__first temp___idx_143) (<= temp___idx_143 a__last))
  (= (bool_eq3 (select a temp___idx_143) 0 3 0 3
     (select b (+ (- b__first a__first) temp___idx_143)) 0 3 0 3) true))))))))

(declare-const possible_i_shapes (Array Int map1))

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-fun patris__possible_i_shapes__aggregate_def (map1 map1 map1
  map1) (Array Int map1))

;; def_axiom
  (assert
  (forall ((temp___145 map1) (temp___146 map1) (temp___147 map1)
  (temp___148 map1))
  (let ((temp___144 (patris__possible_i_shapes__aggregate_def temp___145
                    temp___146 temp___147 temp___148)))
  (and
  (and
  (and (= (select temp___144 0) temp___145)
  (= (select temp___144 1) temp___146)) (= (select temp___144 2) temp___147))
  (= (select temp___144 3) temp___148)))))

(declare-fun temp___150 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___152 Bool) (temp___153 Bool) (temp___154 Bool)
  (temp___155 Bool) (temp___156 Bool) (temp___157 Bool) (temp___158 Bool)
  (temp___159 Bool) (temp___160 Bool) (temp___161 Bool) (temp___162 Bool)
  (temp___163 Bool) (temp___164 Bool) (temp___165 Bool) (temp___166 Bool)
  (temp___167 Bool))
  (let ((temp___151 (temp___150 temp___152 temp___153 temp___154 temp___155
                    temp___156 temp___157 temp___158 temp___159 temp___160
                    temp___161 temp___162 temp___163 temp___164 temp___165
                    temp___166 temp___167)))
  (and
  (and
  (and
  (and
  (and
  (and (= (get temp___151 0 0) temp___152)
  (= (get temp___151 0 1) temp___153)) (= (get temp___151 0 2) temp___154))
  (= (get temp___151 0 3) temp___155))
  (and
  (and
  (and (= (get temp___151 1 0) temp___156)
  (= (get temp___151 1 1) temp___157)) (= (get temp___151 1 2) temp___158))
  (= (get temp___151 1 3) temp___159)))
  (and
  (and
  (and (= (get temp___151 2 0) temp___160)
  (= (get temp___151 2 1) temp___161)) (= (get temp___151 2 2) temp___162))
  (= (get temp___151 2 3) temp___163)))
  (and
  (and
  (and (= (get temp___151 3 0) temp___164)
  (= (get temp___151 3 1) temp___165)) (= (get temp___151 3 2) temp___166))
  (= (get temp___151 3 3) temp___167))))))

(declare-fun temp___170 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___172 Bool) (temp___173 Bool) (temp___174 Bool)
  (temp___175 Bool) (temp___176 Bool) (temp___177 Bool) (temp___178 Bool)
  (temp___179 Bool) (temp___180 Bool) (temp___181 Bool) (temp___182 Bool)
  (temp___183 Bool) (temp___184 Bool) (temp___185 Bool) (temp___186 Bool)
  (temp___187 Bool))
  (let ((temp___171 (temp___170 temp___172 temp___173 temp___174 temp___175
                    temp___176 temp___177 temp___178 temp___179 temp___180
                    temp___181 temp___182 temp___183 temp___184 temp___185
                    temp___186 temp___187)))
  (and
  (and
  (and
  (and
  (and
  (and (= (get temp___171 0 0) temp___172)
  (= (get temp___171 0 1) temp___173)) (= (get temp___171 0 2) temp___174))
  (= (get temp___171 0 3) temp___175))
  (and
  (and
  (and (= (get temp___171 1 0) temp___176)
  (= (get temp___171 1 1) temp___177)) (= (get temp___171 1 2) temp___178))
  (= (get temp___171 1 3) temp___179)))
  (and
  (and
  (and (= (get temp___171 2 0) temp___180)
  (= (get temp___171 2 1) temp___181)) (= (get temp___171 2 2) temp___182))
  (= (get temp___171 2 3) temp___183)))
  (and
  (and
  (and (= (get temp___171 3 0) temp___184)
  (= (get temp___171 3 1) temp___185)) (= (get temp___171 3 2) temp___186))
  (= (get temp___171 3 3) temp___187))))))

(declare-fun temp___190 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___192 Bool) (temp___193 Bool) (temp___194 Bool)
  (temp___195 Bool) (temp___196 Bool) (temp___197 Bool) (temp___198 Bool)
  (temp___199 Bool) (temp___200 Bool) (temp___201 Bool) (temp___202 Bool)
  (temp___203 Bool) (temp___204 Bool) (temp___205 Bool) (temp___206 Bool)
  (temp___207 Bool))
  (let ((temp___191 (temp___190 temp___192 temp___193 temp___194 temp___195
                    temp___196 temp___197 temp___198 temp___199 temp___200
                    temp___201 temp___202 temp___203 temp___204 temp___205
                    temp___206 temp___207)))
  (and
  (and
  (and
  (and
  (and
  (and (= (get temp___191 0 0) temp___192)
  (= (get temp___191 0 1) temp___193)) (= (get temp___191 0 2) temp___194))
  (= (get temp___191 0 3) temp___195))
  (and
  (and
  (and (= (get temp___191 1 0) temp___196)
  (= (get temp___191 1 1) temp___197)) (= (get temp___191 1 2) temp___198))
  (= (get temp___191 1 3) temp___199)))
  (and
  (and
  (and (= (get temp___191 2 0) temp___200)
  (= (get temp___191 2 1) temp___201)) (= (get temp___191 2 2) temp___202))
  (= (get temp___191 2 3) temp___203)))
  (and
  (and
  (and (= (get temp___191 3 0) temp___204)
  (= (get temp___191 3 1) temp___205)) (= (get temp___191 3 2) temp___206))
  (= (get temp___191 3 3) temp___207))))))

(declare-fun temp___210 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___212 Bool) (temp___213 Bool) (temp___214 Bool)
  (temp___215 Bool) (temp___216 Bool) (temp___217 Bool) (temp___218 Bool)
  (temp___219 Bool) (temp___220 Bool) (temp___221 Bool) (temp___222 Bool)
  (temp___223 Bool) (temp___224 Bool) (temp___225 Bool) (temp___226 Bool)
  (temp___227 Bool))
  (let ((temp___211 (temp___210 temp___212 temp___213 temp___214 temp___215
                    temp___216 temp___217 temp___218 temp___219 temp___220
                    temp___221 temp___222 temp___223 temp___224 temp___225
                    temp___226 temp___227)))
  (and
  (and
  (and
  (and
  (and
  (and (= (get temp___211 0 0) temp___212)
  (= (get temp___211 0 1) temp___213)) (= (get temp___211 0 2) temp___214))
  (= (get temp___211 0 3) temp___215))
  (and
  (and
  (and (= (get temp___211 1 0) temp___216)
  (= (get temp___211 1 1) temp___217)) (= (get temp___211 1 2) temp___218))
  (= (get temp___211 1 3) temp___219)))
  (and
  (and
  (and (= (get temp___211 2 0) temp___220)
  (= (get temp___211 2 1) temp___221)) (= (get temp___211 2 2) temp___222))
  (= (get temp___211 2 3) temp___223)))
  (and
  (and
  (and (= (get temp___211 3 0) temp___224)
  (= (get temp___211 3 1) temp___225)) (= (get temp___211 3 2) temp___226))
  (= (get temp___211 3 3) temp___227))))))

;; possible_i_shapes__def_axiom
  (assert
  (= possible_i_shapes (patris__possible_i_shapes__aggregate_def
                       (temp___150 (of_int 0) (of_int 0) (of_int 0)
                       (of_int 0) (of_int 1) (of_int 1) (of_int 1) (of_int 1)
                       (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 0)
                       (of_int 0) (of_int 0) (of_int 0))
                       (temp___170 (of_int 0) (of_int 0) (of_int 1)
                       (of_int 0) (of_int 0) (of_int 0) (of_int 1) (of_int 0)
                       (of_int 0) (of_int 0) (of_int 1) (of_int 0) (of_int 0)
                       (of_int 0) (of_int 1) (of_int 0))
                       (temp___190 (of_int 0) (of_int 0) (of_int 0)
                       (of_int 0) (of_int 0) (of_int 0) (of_int 0) (of_int 0)
                       (of_int 1) (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                       (of_int 0) (of_int 0) (of_int 0))
                       (temp___210 (of_int 0) (of_int 1) (of_int 0)
                       (of_int 0) (of_int 0) (of_int 1) (of_int 0) (of_int 0)
                       (of_int 0) (of_int 1) (of_int 0) (of_int 0) (of_int 0)
                       (of_int 1) (of_int 0) (of_int 0)))))

(declare-const dummy14 map1)

(declare-const value__size3 Int)

(declare-fun object__size3 (map1) Int)

(declare-const value__component__size2 Int)

(declare-fun object__component__size2 (map1) Int)

(declare-const value__alignment3 Int)

(declare-fun object__alignment3 (map1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__size3 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert (forall ((a map1)) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a map1)) (<= 0 (object__alignment3 a))))

(declare-fun user_eq14 (map1 map1) Bool)

(declare-sort map2 0)

(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 map2)))))
(declare-fun get1 (map2 Int Int) map1)

(declare-fun set1 (map2 Int Int map1) map2)

;; Select_eq
  (assert
  (forall ((m map2))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a map1))
  (! (= (get1 (set1 m i j a) i j) a) :pattern ((set1 m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map2))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a map1))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get1 (set1 m i j a) i2 j2) (get1 m i2 j2))) :pattern ((get1
                                                               (set1 m i j a)
                                                               i2 j2)) :pattern (
  (set1 m i j a) (get1 m i2 j2)) ))))))

(declare-fun slide4 (map2 Int Int Int Int) map2)

;; slide_def
  (assert
  (forall ((a map2))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get1 (slide4 a old_first new_first old_first_2 new_first_2) i j)
  (get1 a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get1 (slide4 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq5 ((a map2) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map2) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_230 Int)
                             (temp___idx_231 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_230)
                             (<= temp___idx_230 a__last))
                             (and (<= a__first_2 temp___idx_231)
                             (<= temp___idx_231 a__last_2)))
                             (= (bool_eq3
                                (get1 a temp___idx_230 temp___idx_231) 0 2 0
                                2
                                (get1 b
                                (+ (- b__first a__first) temp___idx_230)
                                (+ (- b__first_2 a__first_2) temp___idx_231))
                                0 2 0 2) true))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map2) (b map2))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq5 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_230 Int) (temp___idx_231 Int))
  (=>
  (and (and (<= a__first temp___idx_230) (<= temp___idx_230 a__last))
  (and (<= a__first_2 temp___idx_231) (<= temp___idx_231 a__last_2)))
  (= (bool_eq3 (get1 a temp___idx_230 temp___idx_231) 0 2 0 2
     (get1 b (+ (- b__first a__first) temp___idx_230)
     (+ (- b__first_2 a__first_2) temp___idx_231)) 0 2 0 2) true))))))))

(declare-const possible_three_shapes map2)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-fun patris__possible_three_shapes__aggregate_def (map1 map1 map1
  map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1
  map1 map1) map2)

;; def_axiom
  (assert
  (forall ((temp___233 map1) (temp___234 map1) (temp___235 map1)
  (temp___236 map1) (temp___237 map1) (temp___238 map1) (temp___239 map1)
  (temp___240 map1) (temp___241 map1) (temp___242 map1) (temp___243 map1)
  (temp___244 map1) (temp___245 map1) (temp___246 map1) (temp___247 map1)
  (temp___248 map1) (temp___249 map1) (temp___250 map1) (temp___251 map1)
  (temp___252 map1))
  (let ((temp___232 (patris__possible_three_shapes__aggregate_def temp___233
                    temp___234 temp___235 temp___236 temp___237 temp___238
                    temp___239 temp___240 temp___241 temp___242 temp___243
                    temp___244 temp___245 temp___246 temp___247 temp___248
                    temp___249 temp___250 temp___251 temp___252)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (get1 temp___232 3 0) temp___233)
  (= (get1 temp___232 3 1) temp___234)) (= (get1 temp___232 3 2) temp___235))
  (= (get1 temp___232 3 3) temp___236))
  (and
  (and
  (and (= (get1 temp___232 4 0) temp___237)
  (= (get1 temp___232 4 1) temp___238)) (= (get1 temp___232 4 2) temp___239))
  (= (get1 temp___232 4 3) temp___240)))
  (and
  (and
  (and (= (get1 temp___232 5 0) temp___241)
  (= (get1 temp___232 5 1) temp___242)) (= (get1 temp___232 5 2) temp___243))
  (= (get1 temp___232 5 3) temp___244)))
  (and
  (and
  (and (= (get1 temp___232 6 0) temp___245)
  (= (get1 temp___232 6 1) temp___246)) (= (get1 temp___232 6 2) temp___247))
  (= (get1 temp___232 6 3) temp___248)))
  (and
  (and
  (and (= (get1 temp___232 7 0) temp___249)
  (= (get1 temp___232 7 1) temp___250)) (= (get1 temp___232 7 2) temp___251))
  (= (get1 temp___232 7 3) temp___252))))))

(declare-fun temp___255 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___257 Bool) (temp___258 Bool) (temp___259 Bool)
  (temp___260 Bool) (temp___261 Bool) (temp___262 Bool) (temp___263 Bool)
  (temp___264 Bool) (temp___265 Bool))
  (let ((temp___256 (temp___255 temp___257 temp___258 temp___259 temp___260
                    temp___261 temp___262 temp___263 temp___264 temp___265)))
  (and
  (and
  (and
  (and (= (get temp___256 0 0) temp___257)
  (= (get temp___256 0 1) temp___258)) (= (get temp___256 0 2) temp___259))
  (and
  (and (= (get temp___256 1 0) temp___260)
  (= (get temp___256 1 1) temp___261)) (= (get temp___256 1 2) temp___262)))
  (and
  (and (= (get temp___256 2 0) temp___263)
  (= (get temp___256 2 1) temp___264)) (= (get temp___256 2 2) temp___265))))))

(declare-fun temp___268 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___270 Bool) (temp___271 Bool) (temp___272 Bool)
  (temp___273 Bool) (temp___274 Bool) (temp___275 Bool) (temp___276 Bool)
  (temp___277 Bool) (temp___278 Bool))
  (let ((temp___269 (temp___268 temp___270 temp___271 temp___272 temp___273
                    temp___274 temp___275 temp___276 temp___277 temp___278)))
  (and
  (and
  (and
  (and (= (get temp___269 0 0) temp___270)
  (= (get temp___269 0 1) temp___271)) (= (get temp___269 0 2) temp___272))
  (and
  (and (= (get temp___269 1 0) temp___273)
  (= (get temp___269 1 1) temp___274)) (= (get temp___269 1 2) temp___275)))
  (and
  (and (= (get temp___269 2 0) temp___276)
  (= (get temp___269 2 1) temp___277)) (= (get temp___269 2 2) temp___278))))))

(declare-fun temp___281 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___283 Bool) (temp___284 Bool) (temp___285 Bool)
  (temp___286 Bool) (temp___287 Bool) (temp___288 Bool) (temp___289 Bool)
  (temp___290 Bool) (temp___291 Bool))
  (let ((temp___282 (temp___281 temp___283 temp___284 temp___285 temp___286
                    temp___287 temp___288 temp___289 temp___290 temp___291)))
  (and
  (and
  (and
  (and (= (get temp___282 0 0) temp___283)
  (= (get temp___282 0 1) temp___284)) (= (get temp___282 0 2) temp___285))
  (and
  (and (= (get temp___282 1 0) temp___286)
  (= (get temp___282 1 1) temp___287)) (= (get temp___282 1 2) temp___288)))
  (and
  (and (= (get temp___282 2 0) temp___289)
  (= (get temp___282 2 1) temp___290)) (= (get temp___282 2 2) temp___291))))))

(declare-fun temp___294 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___296 Bool) (temp___297 Bool) (temp___298 Bool)
  (temp___299 Bool) (temp___300 Bool) (temp___301 Bool) (temp___302 Bool)
  (temp___303 Bool) (temp___304 Bool))
  (let ((temp___295 (temp___294 temp___296 temp___297 temp___298 temp___299
                    temp___300 temp___301 temp___302 temp___303 temp___304)))
  (and
  (and
  (and
  (and (= (get temp___295 0 0) temp___296)
  (= (get temp___295 0 1) temp___297)) (= (get temp___295 0 2) temp___298))
  (and
  (and (= (get temp___295 1 0) temp___299)
  (= (get temp___295 1 1) temp___300)) (= (get temp___295 1 2) temp___301)))
  (and
  (and (= (get temp___295 2 0) temp___302)
  (= (get temp___295 2 1) temp___303)) (= (get temp___295 2 2) temp___304))))))

(declare-fun temp___307 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___309 Bool) (temp___310 Bool) (temp___311 Bool)
  (temp___312 Bool) (temp___313 Bool) (temp___314 Bool) (temp___315 Bool)
  (temp___316 Bool) (temp___317 Bool))
  (let ((temp___308 (temp___307 temp___309 temp___310 temp___311 temp___312
                    temp___313 temp___314 temp___315 temp___316 temp___317)))
  (and
  (and
  (and
  (and (= (get temp___308 0 0) temp___309)
  (= (get temp___308 0 1) temp___310)) (= (get temp___308 0 2) temp___311))
  (and
  (and (= (get temp___308 1 0) temp___312)
  (= (get temp___308 1 1) temp___313)) (= (get temp___308 1 2) temp___314)))
  (and
  (and (= (get temp___308 2 0) temp___315)
  (= (get temp___308 2 1) temp___316)) (= (get temp___308 2 2) temp___317))))))

(declare-fun temp___320 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___322 Bool) (temp___323 Bool) (temp___324 Bool)
  (temp___325 Bool) (temp___326 Bool) (temp___327 Bool) (temp___328 Bool)
  (temp___329 Bool) (temp___330 Bool))
  (let ((temp___321 (temp___320 temp___322 temp___323 temp___324 temp___325
                    temp___326 temp___327 temp___328 temp___329 temp___330)))
  (and
  (and
  (and
  (and (= (get temp___321 0 0) temp___322)
  (= (get temp___321 0 1) temp___323)) (= (get temp___321 0 2) temp___324))
  (and
  (and (= (get temp___321 1 0) temp___325)
  (= (get temp___321 1 1) temp___326)) (= (get temp___321 1 2) temp___327)))
  (and
  (and (= (get temp___321 2 0) temp___328)
  (= (get temp___321 2 1) temp___329)) (= (get temp___321 2 2) temp___330))))))

(declare-fun temp___333 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___335 Bool) (temp___336 Bool) (temp___337 Bool)
  (temp___338 Bool) (temp___339 Bool) (temp___340 Bool) (temp___341 Bool)
  (temp___342 Bool) (temp___343 Bool))
  (let ((temp___334 (temp___333 temp___335 temp___336 temp___337 temp___338
                    temp___339 temp___340 temp___341 temp___342 temp___343)))
  (and
  (and
  (and
  (and (= (get temp___334 0 0) temp___335)
  (= (get temp___334 0 1) temp___336)) (= (get temp___334 0 2) temp___337))
  (and
  (and (= (get temp___334 1 0) temp___338)
  (= (get temp___334 1 1) temp___339)) (= (get temp___334 1 2) temp___340)))
  (and
  (and (= (get temp___334 2 0) temp___341)
  (= (get temp___334 2 1) temp___342)) (= (get temp___334 2 2) temp___343))))))

(declare-fun temp___346 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___348 Bool) (temp___349 Bool) (temp___350 Bool)
  (temp___351 Bool) (temp___352 Bool) (temp___353 Bool) (temp___354 Bool)
  (temp___355 Bool) (temp___356 Bool))
  (let ((temp___347 (temp___346 temp___348 temp___349 temp___350 temp___351
                    temp___352 temp___353 temp___354 temp___355 temp___356)))
  (and
  (and
  (and
  (and (= (get temp___347 0 0) temp___348)
  (= (get temp___347 0 1) temp___349)) (= (get temp___347 0 2) temp___350))
  (and
  (and (= (get temp___347 1 0) temp___351)
  (= (get temp___347 1 1) temp___352)) (= (get temp___347 1 2) temp___353)))
  (and
  (and (= (get temp___347 2 0) temp___354)
  (= (get temp___347 2 1) temp___355)) (= (get temp___347 2 2) temp___356))))))

(declare-fun temp___359 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___361 Bool) (temp___362 Bool) (temp___363 Bool)
  (temp___364 Bool) (temp___365 Bool) (temp___366 Bool) (temp___367 Bool)
  (temp___368 Bool) (temp___369 Bool))
  (let ((temp___360 (temp___359 temp___361 temp___362 temp___363 temp___364
                    temp___365 temp___366 temp___367 temp___368 temp___369)))
  (and
  (and
  (and
  (and (= (get temp___360 0 0) temp___361)
  (= (get temp___360 0 1) temp___362)) (= (get temp___360 0 2) temp___363))
  (and
  (and (= (get temp___360 1 0) temp___364)
  (= (get temp___360 1 1) temp___365)) (= (get temp___360 1 2) temp___366)))
  (and
  (and (= (get temp___360 2 0) temp___367)
  (= (get temp___360 2 1) temp___368)) (= (get temp___360 2 2) temp___369))))))

(declare-fun temp___372 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___374 Bool) (temp___375 Bool) (temp___376 Bool)
  (temp___377 Bool) (temp___378 Bool) (temp___379 Bool) (temp___380 Bool)
  (temp___381 Bool) (temp___382 Bool))
  (let ((temp___373 (temp___372 temp___374 temp___375 temp___376 temp___377
                    temp___378 temp___379 temp___380 temp___381 temp___382)))
  (and
  (and
  (and
  (and (= (get temp___373 0 0) temp___374)
  (= (get temp___373 0 1) temp___375)) (= (get temp___373 0 2) temp___376))
  (and
  (and (= (get temp___373 1 0) temp___377)
  (= (get temp___373 1 1) temp___378)) (= (get temp___373 1 2) temp___379)))
  (and
  (and (= (get temp___373 2 0) temp___380)
  (= (get temp___373 2 1) temp___381)) (= (get temp___373 2 2) temp___382))))))

(declare-fun temp___385 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___387 Bool) (temp___388 Bool) (temp___389 Bool)
  (temp___390 Bool) (temp___391 Bool) (temp___392 Bool) (temp___393 Bool)
  (temp___394 Bool) (temp___395 Bool))
  (let ((temp___386 (temp___385 temp___387 temp___388 temp___389 temp___390
                    temp___391 temp___392 temp___393 temp___394 temp___395)))
  (and
  (and
  (and
  (and (= (get temp___386 0 0) temp___387)
  (= (get temp___386 0 1) temp___388)) (= (get temp___386 0 2) temp___389))
  (and
  (and (= (get temp___386 1 0) temp___390)
  (= (get temp___386 1 1) temp___391)) (= (get temp___386 1 2) temp___392)))
  (and
  (and (= (get temp___386 2 0) temp___393)
  (= (get temp___386 2 1) temp___394)) (= (get temp___386 2 2) temp___395))))))

(declare-fun temp___398 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___400 Bool) (temp___401 Bool) (temp___402 Bool)
  (temp___403 Bool) (temp___404 Bool) (temp___405 Bool) (temp___406 Bool)
  (temp___407 Bool) (temp___408 Bool))
  (let ((temp___399 (temp___398 temp___400 temp___401 temp___402 temp___403
                    temp___404 temp___405 temp___406 temp___407 temp___408)))
  (and
  (and
  (and
  (and (= (get temp___399 0 0) temp___400)
  (= (get temp___399 0 1) temp___401)) (= (get temp___399 0 2) temp___402))
  (and
  (and (= (get temp___399 1 0) temp___403)
  (= (get temp___399 1 1) temp___404)) (= (get temp___399 1 2) temp___405)))
  (and
  (and (= (get temp___399 2 0) temp___406)
  (= (get temp___399 2 1) temp___407)) (= (get temp___399 2 2) temp___408))))))

(declare-fun temp___411 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___413 Bool) (temp___414 Bool) (temp___415 Bool)
  (temp___416 Bool) (temp___417 Bool) (temp___418 Bool) (temp___419 Bool)
  (temp___420 Bool) (temp___421 Bool))
  (let ((temp___412 (temp___411 temp___413 temp___414 temp___415 temp___416
                    temp___417 temp___418 temp___419 temp___420 temp___421)))
  (and
  (and
  (and
  (and (= (get temp___412 0 0) temp___413)
  (= (get temp___412 0 1) temp___414)) (= (get temp___412 0 2) temp___415))
  (and
  (and (= (get temp___412 1 0) temp___416)
  (= (get temp___412 1 1) temp___417)) (= (get temp___412 1 2) temp___418)))
  (and
  (and (= (get temp___412 2 0) temp___419)
  (= (get temp___412 2 1) temp___420)) (= (get temp___412 2 2) temp___421))))))

(declare-fun temp___424 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___426 Bool) (temp___427 Bool) (temp___428 Bool)
  (temp___429 Bool) (temp___430 Bool) (temp___431 Bool) (temp___432 Bool)
  (temp___433 Bool) (temp___434 Bool))
  (let ((temp___425 (temp___424 temp___426 temp___427 temp___428 temp___429
                    temp___430 temp___431 temp___432 temp___433 temp___434)))
  (and
  (and
  (and
  (and (= (get temp___425 0 0) temp___426)
  (= (get temp___425 0 1) temp___427)) (= (get temp___425 0 2) temp___428))
  (and
  (and (= (get temp___425 1 0) temp___429)
  (= (get temp___425 1 1) temp___430)) (= (get temp___425 1 2) temp___431)))
  (and
  (and (= (get temp___425 2 0) temp___432)
  (= (get temp___425 2 1) temp___433)) (= (get temp___425 2 2) temp___434))))))

(declare-fun temp___437 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___439 Bool) (temp___440 Bool) (temp___441 Bool)
  (temp___442 Bool) (temp___443 Bool) (temp___444 Bool) (temp___445 Bool)
  (temp___446 Bool) (temp___447 Bool))
  (let ((temp___438 (temp___437 temp___439 temp___440 temp___441 temp___442
                    temp___443 temp___444 temp___445 temp___446 temp___447)))
  (and
  (and
  (and
  (and (= (get temp___438 0 0) temp___439)
  (= (get temp___438 0 1) temp___440)) (= (get temp___438 0 2) temp___441))
  (and
  (and (= (get temp___438 1 0) temp___442)
  (= (get temp___438 1 1) temp___443)) (= (get temp___438 1 2) temp___444)))
  (and
  (and (= (get temp___438 2 0) temp___445)
  (= (get temp___438 2 1) temp___446)) (= (get temp___438 2 2) temp___447))))))

(declare-fun temp___450 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___452 Bool) (temp___453 Bool) (temp___454 Bool)
  (temp___455 Bool) (temp___456 Bool) (temp___457 Bool) (temp___458 Bool)
  (temp___459 Bool) (temp___460 Bool))
  (let ((temp___451 (temp___450 temp___452 temp___453 temp___454 temp___455
                    temp___456 temp___457 temp___458 temp___459 temp___460)))
  (and
  (and
  (and
  (and (= (get temp___451 0 0) temp___452)
  (= (get temp___451 0 1) temp___453)) (= (get temp___451 0 2) temp___454))
  (and
  (and (= (get temp___451 1 0) temp___455)
  (= (get temp___451 1 1) temp___456)) (= (get temp___451 1 2) temp___457)))
  (and
  (and (= (get temp___451 2 0) temp___458)
  (= (get temp___451 2 1) temp___459)) (= (get temp___451 2 2) temp___460))))))

(declare-fun temp___463 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___465 Bool) (temp___466 Bool) (temp___467 Bool)
  (temp___468 Bool) (temp___469 Bool) (temp___470 Bool) (temp___471 Bool)
  (temp___472 Bool) (temp___473 Bool))
  (let ((temp___464 (temp___463 temp___465 temp___466 temp___467 temp___468
                    temp___469 temp___470 temp___471 temp___472 temp___473)))
  (and
  (and
  (and
  (and (= (get temp___464 0 0) temp___465)
  (= (get temp___464 0 1) temp___466)) (= (get temp___464 0 2) temp___467))
  (and
  (and (= (get temp___464 1 0) temp___468)
  (= (get temp___464 1 1) temp___469)) (= (get temp___464 1 2) temp___470)))
  (and
  (and (= (get temp___464 2 0) temp___471)
  (= (get temp___464 2 1) temp___472)) (= (get temp___464 2 2) temp___473))))))

(declare-fun temp___476 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___478 Bool) (temp___479 Bool) (temp___480 Bool)
  (temp___481 Bool) (temp___482 Bool) (temp___483 Bool) (temp___484 Bool)
  (temp___485 Bool) (temp___486 Bool))
  (let ((temp___477 (temp___476 temp___478 temp___479 temp___480 temp___481
                    temp___482 temp___483 temp___484 temp___485 temp___486)))
  (and
  (and
  (and
  (and (= (get temp___477 0 0) temp___478)
  (= (get temp___477 0 1) temp___479)) (= (get temp___477 0 2) temp___480))
  (and
  (and (= (get temp___477 1 0) temp___481)
  (= (get temp___477 1 1) temp___482)) (= (get temp___477 1 2) temp___483)))
  (and
  (and (= (get temp___477 2 0) temp___484)
  (= (get temp___477 2 1) temp___485)) (= (get temp___477 2 2) temp___486))))))

(declare-fun temp___489 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___491 Bool) (temp___492 Bool) (temp___493 Bool)
  (temp___494 Bool) (temp___495 Bool) (temp___496 Bool) (temp___497 Bool)
  (temp___498 Bool) (temp___499 Bool))
  (let ((temp___490 (temp___489 temp___491 temp___492 temp___493 temp___494
                    temp___495 temp___496 temp___497 temp___498 temp___499)))
  (and
  (and
  (and
  (and (= (get temp___490 0 0) temp___491)
  (= (get temp___490 0 1) temp___492)) (= (get temp___490 0 2) temp___493))
  (and
  (and (= (get temp___490 1 0) temp___494)
  (= (get temp___490 1 1) temp___495)) (= (get temp___490 1 2) temp___496)))
  (and
  (and (= (get temp___490 2 0) temp___497)
  (= (get temp___490 2 1) temp___498)) (= (get temp___490 2 2) temp___499))))))

(declare-fun temp___502 (Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___504 Bool) (temp___505 Bool) (temp___506 Bool)
  (temp___507 Bool) (temp___508 Bool) (temp___509 Bool) (temp___510 Bool)
  (temp___511 Bool) (temp___512 Bool))
  (let ((temp___503 (temp___502 temp___504 temp___505 temp___506 temp___507
                    temp___508 temp___509 temp___510 temp___511 temp___512)))
  (and
  (and
  (and
  (and (= (get temp___503 0 0) temp___504)
  (= (get temp___503 0 1) temp___505)) (= (get temp___503 0 2) temp___506))
  (and
  (and (= (get temp___503 1 0) temp___507)
  (= (get temp___503 1 1) temp___508)) (= (get temp___503 1 2) temp___509)))
  (and
  (and (= (get temp___503 2 0) temp___510)
  (= (get temp___503 2 1) temp___511)) (= (get temp___503 2 2) temp___512))))))

;; possible_three_shapes__def_axiom
  (assert
  (= possible_three_shapes (patris__possible_three_shapes__aggregate_def
                           (temp___255 (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 0))
                           (temp___268 (of_int 0) (of_int 1) (of_int 1)
                           (of_int 0) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___281 (of_int 0) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1))
                           (temp___294 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 0) (of_int 1)
                           (of_int 1) (of_int 0))
                           (temp___307 (of_int 0) (of_int 0) (of_int 1)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 0))
                           (temp___320 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1))
                           (temp___333 (of_int 0) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 1)
                           (of_int 0) (of_int 0))
                           (temp___346 (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___359 (of_int 0) (of_int 1) (of_int 1)
                           (of_int 1) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 0) (of_int 0))
                           (temp___372 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1))
                           (temp___385 (of_int 0) (of_int 0) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 1) (of_int 1)
                           (of_int 1) (of_int 0))
                           (temp___398 (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___411 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 0))
                           (temp___424 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___437 (of_int 0) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___450 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___463 (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 0) (of_int 0))
                           (temp___476 (of_int 0) (of_int 0) (of_int 1)
                           (of_int 0) (of_int 1) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 0))
                           (temp___489 (of_int 0) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 0) (of_int 0)
                           (of_int 1) (of_int 1))
                           (temp___502 (of_int 0) (of_int 1) (of_int 0)
                           (of_int 1) (of_int 1) (of_int 0) (of_int 1)
                           (of_int 0) (of_int 0)))))

(declare-fun is_empty ((Array Int (Array Int cell)) Int Int) Bool)

(declare-fun is_empty__function_guard (Bool (Array Int (Array Int cell)) Int
  Int) Bool)

;; is_empty__post_axiom
  (assert true)

;; is_empty__def_axiom
  (assert
  (forall ((b (Array Int (Array Int cell))))
  (forall ((y Int) (x Int))
  (! (= (= (is_empty b y x) true)
     (and (and (in_range10 x) (in_range4 y))
     (= (to_rep (let ((temp___1984 (select b y))) (select temp___1984 x))) 0))) :pattern (
  (is_empty b y x)) ))))

(declare-fun no_overlap ((Array Int (Array Int cell)) us_rep) Bool)

(declare-fun no_overlap__function_guard (Bool (Array Int (Array Int cell))
  us_rep) Bool)

;; no_overlap__post_axiom
  (assert true)

;; no_overlap__def_axiom
  (assert
  (forall ((b (Array Int (Array Int cell))))
  (forall ((p us_rep))
  (! (= (= (no_overlap b p) true)
     (ite (= (to_rep1 (rec__patris__piece__s (us_split_fields1 p))) 2)
     (and
     (and
     (and
     (= (is_empty b (to_rep3 (rec__patris__piece__y (us_split_fields1 p)))
        (to_rep2 (rec__patris__piece__x (us_split_fields1 p)))) true)
     (= (is_empty b (to_rep3 (rec__patris__piece__y (us_split_fields1 p)))
        (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) 1)) true))
     (= (is_empty b
        (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) 1)
        (to_rep2 (rec__patris__piece__x (us_split_fields1 p)))) true))
     (= (is_empty b
        (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) 1)
        (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) 1)) true))
     (ite (= (to_rep1 (rec__patris__piece__s (us_split_fields1 p))) 1)
     (forall ((y Int))
     (=> (and (<= 0 y) (<= y 3))
     (forall ((x Int))
     (=> (and (<= 0 x) (<= x 3))
     (=>
     (= (let ((temp___2003 (select possible_i_shapes (to_rep4
                                                     (rec__patris__piece__d
                                                     (us_split_fields1 p))))))
        (get temp___2003 y x)) true)
     (= (is_empty b
        (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) y)
        (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) x)) true))))))
     (forall ((y Int))
     (=> (and (<= 0 y) (<= y 2))
     (forall ((x Int))
     (=> (and (<= 0 x) (<= x 2))
     (=>
     (= (let ((temp___2004 (get1 possible_three_shapes
                           (to_rep1
                           (rec__patris__piece__s (us_split_fields1 p)))
                           (to_rep4
                           (rec__patris__piece__d (us_split_fields1 p))))))
        (get temp___2004 y x)) true)
     (= (is_empty b
        (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) y)
        (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) x)) true))))))))) :pattern (
  (no_overlap b p)) ))))

;; valid_configuration__post_axiom
  (assert true)

;; valid_configuration__def_axiom
  (assert
  (forall ((cur_board (Array Int (Array Int cell))))
  (forall ((cur_state Int))
  (forall ((cur_piece us_rep))
  (! (= (= (valid_configuration cur_board cur_state cur_piece) true)
     (ite (or (= cur_state 0) (= cur_state 1))
     (= (no_overlap cur_board cur_piece) true)
     (=> (not (= cur_state 2))
     (=> (not (= cur_state 4)) (= (no_complete_lines cur_board) true))))) :pattern (
  (valid_configuration cur_board cur_state cur_piece)) )))))

(declare-const score_nbr (_ BitVec 32))

(declare-const level_nbr (_ BitVec 32))

(declare-const line_counter (_ BitVec 32))

(declare-const cur_board (Array Int (Array Int cell)))

(declare-const cur_piece__split_fields shape)

(declare-const cur_piece__split_fields1 direction)

(declare-const cur_piece__split_fields2 px_coord)

(declare-const cur_piece__split_fields3 py_coord)

(declare-const cur_state Int)

(declare-const to_line Int)

(declare-const complete_lines (_ BitVec 32))

(declare-const del_line Int)

(declare-const o (_ BitVec 32))

(declare-const cur_board1 (Array Int (Array Int cell)))

(declare-const result Int)

(declare-const to_line1 Int)

(declare-const result1 (_ BitVec 32))

(declare-const complete_lines1 (_ BitVec 32))

(declare-const result2 Int)

(declare-const del_line1 Int)

(declare-const result3 Bool)

(declare-const result4 (Array Int (Array Int cell)))

(declare-const cur_board2 (Array Int (Array Int cell)))

(declare-const result5 Int)

(declare-const to_line2 Int)

(declare-const result6 (_ BitVec 32))

(declare-const complete_lines2 (_ BitVec 32))

;; H
  (assert (in_range2 score_nbr))

;; H
  (assert (in_range2 level_nbr))

;; H
  (assert (in_range2 line_counter))

;; H
  (assert (in_range9 cur_state))

;; H
  (assert
  (and (= (get_state cur_state) 2)
  (= (valid_configuration__2 cur_state
     (mk___split_fields cur_piece__split_fields cur_piece__split_fields1
     cur_piece__split_fields2 cur_piece__split_fields3) cur_board) true)))

;; H
  (assert
  (= (patris__delete_complete_lines__empty_line__aggregate_def 0) empty_line))

;; H
  (assert (= (mk_int__ref result) (mk_int__ref to_line)))

;; H
  (assert (= to_line1 20))

;; H
  (assert (in_range4 to_line1))

;; H
  (assert (= (mk_t__ref result1) (mk_t__ref complete_lines)))

;; H
  (assert (= complete_lines1 ((_ int2bv 32) 0)))

;; H
  (assert (in_range2 complete_lines1))

;; H
  (assert (= (mk_int__ref result2) (mk_int__ref del_line)))

;; H
  (assert (= del_line1 1))

;; H
  (assert (<= 1 del_line1))

;; H
  (assert (<= del_line1 20))

;; H
  (assert
  (and (= result3 (is_complete_line (select cur_board del_line1)))
  (= (= result3 true)
  (forall ((x Int))
  (=> (and (<= 1 x) (<= x 10))
  (not (= (to_rep (select (select cur_board del_line1) x)) 0)))))))

;; H
  (assert
  (=> (= result3 true) (= (mk_map__ref1 result4) (mk_map__ref1 cur_board))))

;; H
  (assert
  (=> (= result3 true) (= cur_board2 (store cur_board del_line1 empty_line))))

;; H
  (assert (=> (= result3 true) (= to_line1 result5)))

;; H
  (assert (=> (= result3 true) (= to_line2 del_line1)))

;; H
  (assert
  (=> (= result3 true)
  (=>
  (bvule (bvsub ((_ int2bv 32) 100000) complete_lines1) ((_ int2bv 32) 1))
  (= o (bvsub (bvadd complete_lines1 ((_ int2bv 32) 1)) ((_ int2bv 32) 100000))))))

;; H
  (assert
  (=> (= result3 true)
  (=>
  (not
  (bvule (bvsub ((_ int2bv 32) 100000) complete_lines1) ((_ int2bv 32) 1)))
  (= o (bvadd complete_lines1 ((_ int2bv 32) 1))))))

;; H
  (assert (=> (= result3 true) (= complete_lines1 result6)))

;; H
  (assert (=> (= result3 true) (= complete_lines2 o)))

;; H
  (assert
  (=> (= result3 true)
  (= (to_rep (select (select cur_board2 del_line1) 1)) 0)))

;; H
  (assert (=> (not (= result3 true)) (= complete_lines2 complete_lines1)))

;; H
  (assert (=> (not (= result3 true)) (= to_line2 to_line1)))

;; H
  (assert (=> (not (= result3 true)) (= cur_board2 cur_board)))

;; H
  (assert (=> (not (= result3 true)) (= complete_lines2 complete_lines1)))

;; H
  (assert (=> (not (= result3 true)) (= to_line2 to_line1)))

;; H
  (assert (=> (not (= result3 true)) (= cur_board2 cur_board1)))

(declare-const y Int)

;; H
  (assert (<= 1 y))

;; H
  (assert (<= y del_line1))

(assert
;; WP_parameter_def
 ;; File "patris.ads", line 196, characters 0-0
  (not (not (= (is_complete_line (select cur_board2 y)) true))))
(check-sat)
(exit)
