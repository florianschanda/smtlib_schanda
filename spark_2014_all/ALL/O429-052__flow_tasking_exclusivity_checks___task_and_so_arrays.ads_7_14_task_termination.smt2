;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-const value__size Int)

(declare-fun object__size (us_rep) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ()
((suspension_object__ref
 (mk_suspension_object__ref (suspension_object__content us_rep)))))
(define-fun suspension_object__ref___2__projection ((a suspension_object__ref)) us_rep
  (suspension_object__content a))

(declare-fun suspend_until_true__specific_post (Int us_rep us_rep) Bool)

(declare-sort task_id 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq1 (task_id task_id) Bool)

(declare-const dummy1 task_id)

(declare-datatypes ()
((task_id__ref (mk_task_id__ref (task_id__content task_id)))))
(define-fun task_id__ref___2__projection ((a task_id__ref)) task_id (task_id__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_1483 Int)
  (temp___is_init_1480 Bool) (temp___skip_constant_1481 Bool)
  (temp___do_toplevel_1482 Bool)) Bool (=>
                                       (or (= temp___is_init_1480 true)
                                       (<= 0 2)) (in_range temp___expr_1483)))

(declare-const id Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(declare-fun bool_eq ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const temp___1507 (Array Int us_rep))

(declare-const o us_rep)

(declare-const ada__synchronous_task_control__suspend_until_true__s us_rep)

(declare-const sos (Array Int us_rep))

(declare-const ada__synchronous_task_control__suspend_until_true__s1 us_rep)

(declare-const result (Array Int us_rep))

(declare-const sos1 (Array Int us_rep))

(assert
;; WP_parameter_def
 ;; File "task_and_so_arrays.ads", line 10, characters 0-0
  (not
  (not
  (and (in_range id)
  (and
  (and (and (= temp___1507 sos) (= o (select temp___1507 id)))
  (= o ada__synchronous_task_control__suspend_until_true__s))
  (and (= result sos)
  (= sos1 (store sos id ada__synchronous_task_control__suspend_until_true__s1))))))))
(check-sat)
(exit)
