;; produced by cvc4_14.drv ;;
(set-info :smt-lib-version 2.5)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-fun dummy () integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort natural 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-fun dummy1 () natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-fun to_rep (natural) Int)

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort my_integer 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 200)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (my_integer my_integer) Bool)

(declare-fun dummy2 () my_integer)

(declare-datatypes ()
((my_integer__ref (mk_my_integer__ref (my_integer__content my_integer)))))
(define-fun my_integer__ref___projection ((a my_integer__ref)) my_integer
  (my_integer__content a))

(define-fun dynamic_invariant1 ((temp___expr_515 Int)
  (temp___is_init_512 Bool) (temp___skip_constant_513 Bool)
  (temp___do_toplevel_514 Bool)) Bool (=>
                                      (or (= temp___is_init_512 true)
                                      (<= 1 200)) (in_range3
                                      temp___expr_515)))

(declare-sort small_int 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (small_int small_int) Bool)

(declare-fun dummy3 () small_int)

(declare-datatypes ()
((small_int__ref (mk_small_int__ref (small_int__content small_int)))))
(define-fun small_int__ref___projection ((a small_int__ref)) small_int
  (small_int__content a))

(define-fun dynamic_invariant2 ((temp___expr_521 Int)
  (temp___is_init_518 Bool) (temp___skip_constant_519 Bool)
  (temp___do_toplevel_520 Bool)) Bool (=>
                                      (or (= temp___is_init_518 true)
                                      (<= 1 10)) (in_range4 temp___expr_521)))

(declare-sort positive 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (positive positive) Bool)

(declare-fun dummy4 () positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-fun to_rep1 (positive) Int)

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range5 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int positive))))))
(declare-fun slide ((Array Int positive) Int Int) (Array Int positive))

;; slide_eq
  (assert
  (forall ((a (Array Int positive)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int positive)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int positive) Int Int (Array Int positive) Int
  Int) (Array Int positive))

;; concat_def
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (positive Int) (Array Int positive))

;; singleton_def
  (assert
  (forall ((v positive))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int positive)) (a__first Int) (a__last Int)
  (b (Array Int positive)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_151 Int))
                           (=>
                           (and (<= a__first temp___idx_151)
                           (<= temp___idx_151 a__last))
                           (= (to_rep1 (select a temp___idx_151)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_151)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_151 Int))
  (=> (and (<= a__first temp___idx_151) (<= temp___idx_151 a__last))
  (= (to_rep1 (select a temp___idx_151)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_151)))))))))))

(declare-fun compare ((Array Int positive) Int Int (Array Int positive) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun dummy5 () (Array Int positive))

(declare-fun value__size () Int)

(declare-fun object__size ((Array Int positive)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int positive)) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment ((Array Int positive)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int positive))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int positive))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int positive))) (<= 0 (object__alignment a))))

(declare-fun user_eq5 ((Array Int positive) (Array Int positive)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields (rec__container__container__a (Array Int positive))))))
(define-fun us_split_fields_A__projection ((a us_split_fields)) (Array Int positive)
  (rec__container__container__a a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep_3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                              a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (= (bool_eq
                           (rec__container__container__a
                           (us_split_fields1 a)) 1 200
                           (rec__container__container__a
                           (us_split_fields1 b)) 1 200) true)
                   true false))

(declare-fun value__size1 () Int)

(declare-fun object__size1 (us_rep) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-fun container__container__a__first__bit () Int)

(declare-fun container__container__a__last__bit () Int)

(declare-fun container__container__a__position () Int)

;; container__container__a__first__bit_axiom
  (assert (<= 0 container__container__a__first__bit))

;; container__container__a__last__bit_axiom
  (assert
  (< container__container__a__first__bit container__container__a__last__bit))

;; container__container__a__position_axiom
  (assert (<= 0 container__container__a__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-fun dummy6 () us_rep)

(declare-datatypes ()
((container__ref (mk_container__ref (container__content us_rep)))))
(define-fun container__ref___projection ((a container__ref)) us_rep (container__content
                                                                    a))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1 (rec__container__cursor__index natural)))))
(define-fun us_split_fields_Index__projection ((a us_split_fields2)) natural
  (rec__container__cursor__index a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__container__cursor__index
                            (us_split_fields3 a))) (to_rep
                                                   (rec__container__cursor__index
                                                   (us_split_fields3 b))))
                    true false))

(declare-fun value__size2 () Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-fun container__cursor__index__first__bit () Int)

(declare-fun container__cursor__index__last__bit () Int)

(declare-fun container__cursor__index__position () Int)

;; container__cursor__index__first__bit_axiom
  (assert (<= 0 container__cursor__index__first__bit))

;; container__cursor__index__last__bit_axiom
  (assert
  (< container__cursor__index__first__bit container__cursor__index__last__bit))

;; container__cursor__index__position_axiom
  (assert (<= 0 container__cursor__index__position))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-fun dummy7 () us_rep1)

(declare-datatypes ()
((cursor__ref (mk_cursor__ref (cursor__content us_rep1)))))
(define-fun cursor__ref___projection ((a cursor__ref)) us_rep1 (cursor__content
                                                               a))

(declare-fun first (us_rep) us_rep1)

(declare-fun first__function_guard (us_rep1 us_rep) Bool)

;; first__post_axiom
  (assert true)

;; first__def_axiom
  (assert
  (forall ((c us_rep))
  (! (= (first c) (mk___rep1 (mk___split_fields1 (of_rep 1)))) :pattern (
  (first c)) )))

(declare-fun has_element (us_rep us_rep1) Bool)

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

;; has_element__post_axiom
  (assert true)

;; has_element__def_axiom
  (assert
  (forall ((c us_rep))
  (forall ((p us_rep1))
  (! (= (= (has_element c p) true)
     (and
     (<= 1 (to_rep (rec__container__cursor__index (us_split_fields3 p))))
     (<= (to_rep (rec__container__cursor__index (us_split_fields3 p))) 200))) :pattern (
  (has_element c p)) ))))

(declare-fun next (us_rep us_rep1) us_rep1)

(declare-fun next__function_guard (us_rep1 us_rep us_rep1) Bool)

;; next__post_axiom
  (assert true)

;; next__def_axiom
  (assert
  (forall ((c us_rep))
  (forall ((p us_rep1))
  (! (= (next c p) (ite (< (to_rep
                           (rec__container__cursor__index
                           (us_split_fields3 p))) 200)
                   (mk___rep1
                   (mk___split_fields1
                   (of_rep
                   (+ (to_rep
                      (rec__container__cursor__index (us_split_fields3 p))) 1))))
                   (mk___rep1 (mk___split_fields1 (of_rep 0))))) :pattern (
  (next c p)) ))))

(declare-fun element (us_rep us_rep1) Int)

(declare-fun element__function_guard (Int us_rep us_rep1) Bool)

;; element__post_axiom
  (assert
  (forall ((c us_rep))
  (forall ((p us_rep1))
  (! (=> (= (has_element c p) true) (dynamic_invariant (element c p) true
     false true)) :pattern ((element c p)) ))))

;; element__def_axiom
  (assert
  (forall ((c us_rep))
  (forall ((p us_rep1))
  (! (= (element c p) (to_rep1
                      (let ((temp___559 (rec__container__container__a
                                        (us_split_fields1 c))))
                      (select temp___559 (to_rep
                                         (rec__container__cursor__index
                                         (us_split_fields3 p))))))) :pattern (
  (element c p)) ))))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun container__arr__aggregate_def (Int) (Array Int positive))

;; def_axiom
  (assert
  (forall ((temp___595 Int))
  (forall ((temp___596 Int))
  (= (select (container__arr__aggregate_def temp___595) temp___596) (of_rep1
                                                                    temp___595)))))

(define-fun dynamic_invariant3 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_33)))

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range5
                                     temp___expr_39)))

(declare-fun x () Int)

(declare-fun r () Int)

(declare-fun i () Int)

(declare-fun b () Bool)

(declare-fun arr () (Array Int positive))

(declare-fun my_container__split_fields () (Array Int positive))

(declare-fun position__split_fields () natural)

(declare-fun e () Int)

(declare-fun e1 () Int)

(declare-fun e2 () Int)

(declare-fun o () natural)

(declare-fun o1 () natural)

(declare-fun container__position__assume () natural)

(declare-fun temp___561 () Int)

(declare-fun temp___560 () Bool)

(declare-fun o2 () Int)

(declare-fun temp___563 () Int)

(declare-fun temp___562 () Int)

(declare-fun temp___565 () Int)

(declare-fun temp___564 () Int)

(declare-fun o3 () Int)

(declare-fun o4 () Int)

(declare-fun temp___566 () Int)

(declare-fun o5 () Int)

(declare-fun temp___567 () Int)

(declare-fun temp___568 () Int)

(declare-fun o6 () Int)

(declare-fun o7 () natural)

(declare-fun temp___572 () cursor__ref)

(declare-fun o8 () Int)

(declare-fun temp___569 () Bool)

(declare-fun o9 () us_rep1)

(declare-fun o10 () Bool)

(declare-fun o11 () us_rep1)

(declare-fun temp___579 () cursor__ref)

(declare-fun o12 () Int)

(declare-fun temp___576 () Int)

(declare-fun temp___575 () Bool)

(declare-fun temp___573 () Int)

(declare-fun temp___574 () int__ref)

(declare-fun o13 () Int)

(declare-fun o14 () us_rep1)

(declare-fun o15 () Bool)

(declare-fun o16 () us_rep1)

(declare-fun temp___593 () cursor__ref)

(declare-fun o17 () Int)

(declare-fun b1 () Bool)

(declare-fun e3 () Int)

(declare-fun e4 () Int)

(declare-fun e5 () Int)

(declare-fun result () int__ref)

(declare-fun x1 () Int)

(declare-fun result1 () int__ref)

(declare-fun r1 () Int)

(declare-fun result2 () int__ref)

(declare-fun i1 () Int)

(declare-fun result3 () map__ref)

(declare-fun arr1 () (Array Int positive))

(declare-fun result4 () us_split_fields__ref)

(declare-fun my_container__split_fields1 () us_split_fields)

(declare-fun result5 () us_split_fields__ref1)

(declare-fun position__split_fields1 () us_split_fields2)

(declare-fun x2 () Int)

(declare-fun b2 () Bool)

(declare-fun result6 () bool__ref)

(declare-fun b3 () Bool)

(declare-fun result7 () int__ref)

(declare-fun x3 () Int)

(declare-fun x4 () int__ref)

(declare-fun b4 () bool__ref)

(declare-fun x5 () Int)

(declare-fun b5 () Bool)

(declare-fun x6 () int__ref)

(declare-fun b6 () bool__ref)

(declare-fun x7 () Int)

(declare-fun b7 () Bool)

(declare-fun r2 () Int)

(declare-fun i2 () Int)

(declare-fun temp___5651 () Int)

(declare-fun temp___5641 () Int)

(declare-fun result8 () int__ref)

(declare-fun temp___5652 () Int)

(declare-fun result9 () int__ref)

(declare-fun temp___5642 () Int)

(declare-fun result10 () int__ref)

(declare-fun r3 () Int)

(declare-fun result11 () int__ref)

(declare-fun i3 () Int)

(declare-fun r4 () int__ref)

(declare-fun i4 () int__ref)

(declare-fun r5 () Int)

(declare-fun i5 () Int)

(declare-fun r6 () int__ref)

(declare-fun i6 () int__ref)

(declare-fun r7 () Int)

(declare-fun i7 () Int)

(declare-fun x8 () Int)

(declare-fun result12 () int__ref)

(declare-fun x9 () Int)

(declare-fun x10 () int__ref)

(declare-fun x11 () Int)

(declare-fun x12 () int__ref)

(declare-fun x13 () Int)

(declare-fun result13 () int__ref)

(declare-fun x14 () Int)

(declare-fun x15 () Int)

(declare-fun temp___5681 () Int)

(declare-fun result14 () int__ref)

(declare-fun temp___5682 () Int)

(declare-fun x16 () int__ref)

(declare-fun x17 () Int)

(declare-fun x18 () int__ref)

(declare-fun x19 () Int)

(declare-fun temp___5721 () us_rep1)

(declare-fun result15 () Bool)

(declare-fun result16 () int__ref)

(declare-fun e6 () Int)

(declare-fun e7 () int__ref)

(declare-fun e8 () Int)

(declare-fun result17 () Bool)

(declare-fun b8 () Bool)

(declare-fun e9 () Int)

(declare-fun temp___5722 () us_rep1)

(declare-fun result18 () bool__ref)

(declare-fun b9 () Bool)

(declare-fun result19 () Bool)

(declare-fun b10 () bool__ref)

(declare-fun e10 () int__ref)

(declare-fun temp___5723 () cursor__ref)

(declare-fun b11 () Bool)

(declare-fun e11 () Int)

(declare-fun temp___5724 () us_rep1)

(declare-fun b12 () bool__ref)

(declare-fun e12 () int__ref)

(declare-fun temp___5725 () cursor__ref)

(declare-fun b13 () Bool)

(declare-fun e13 () Int)

(declare-fun temp___5726 () us_rep1)

(declare-fun temp___5791 () us_rep1)

(declare-fun result20 () Bool)

(declare-fun result21 () int__ref)

(declare-fun e14 () Int)

(declare-fun e15 () int__ref)

(declare-fun e16 () Int)

(declare-fun result22 () Bool)

(declare-fun x20 () Int)

(declare-fun b14 () Bool)

(declare-fun e17 () Int)

(declare-fun temp___5792 () us_rep1)

(declare-fun result23 () int__ref)

(declare-fun x21 () Int)

(declare-fun x22 () Int)

(declare-fun temp___5741 () Int)

(declare-fun result24 () int__ref)

(declare-fun temp___5742 () Int)

(declare-fun x23 () int__ref)

(declare-fun x24 () Int)

(declare-fun rho () Int)

(declare-fun x25 () int__ref)

(declare-fun x26 () Int)

(declare-fun rho1 () Int)

(declare-fun result25 () bool__ref)

(declare-fun b15 () Bool)

(declare-fun result26 () Bool)

(declare-fun x27 () int__ref)

(declare-fun b16 () bool__ref)

(declare-fun e18 () int__ref)

(declare-fun temp___5793 () cursor__ref)

(declare-fun x28 () Int)

(declare-fun b17 () Bool)

(declare-fun e19 () Int)

(declare-fun temp___5794 () us_rep1)

(declare-fun x29 () int__ref)

(declare-fun b18 () bool__ref)

(declare-fun e20 () int__ref)

(declare-fun temp___5795 () cursor__ref)

(declare-fun x30 () Int)

(declare-fun b19 () Bool)

(declare-fun e21 () Int)

(declare-fun temp___5796 () us_rep1)

(declare-fun result27 () Bool)

(declare-fun result28 () int__ref)

(declare-fun e22 () Int)

(declare-fun e23 () int__ref)

(declare-fun e24 () Int)

(declare-fun result29 () Bool)

(declare-fun result30 () bool__ref)

(declare-fun b20 () Bool)

(define-fun o18 () us_rep1 (mk___rep1 (mk___split_fields1 o7)))

(define-fun e25 () int__ref (mk_int__ref e2))

(define-fun e26 () int__ref (mk_int__ref e1))

(define-fun e27 () int__ref (mk_int__ref e))

;; H
  (assert (= result (mk_int__ref x)))

;; H
  (assert (= x1 1))

;; H
  (assert (in_range3 x1))

;; H
  (assert (= result1 (mk_int__ref r)))

;; H
  (assert (= r1 100))

;; H
  (assert (in_range3 r1))

;; H
  (assert (= result2 (mk_int__ref i)))

;; H
  (assert (= i1 1))

;; H
  (assert (in_range4 i1))

;; H
  (assert (= result3 (mk_map__ref arr)))

;; H
  (assert (= arr1 (container__arr__aggregate_def 3)))

;; H
  (assert
  (= result4 (mk___split_fields__ref
             (mk___split_fields my_container__split_fields))))

;; H
  (assert (= my_container__split_fields1 (mk___split_fields arr1)))

;; H
  (assert (= (to_rep o) 0))

;; H
  (assert (= o o1))

;; H
  (assert (= container__position__assume o1))

;; H
  (assert
  (= result5 (mk___split_fields__ref1
             (mk___split_fields1 position__split_fields))))

;; H
  (assert
  (= position__split_fields1 (mk___split_fields1 container__position__assume)))

;; H
  (assert (=> (< 0 x1) (= temp___561 x1)))

;; H
  (assert (=> (< 0 x1) (= temp___560 b)))

;; H
  (assert (=> (< 0 x1) (and (=> (<= 1 200) (in_range3 x2)) (< 0 x2))))

;; H
  (assert (=> (< 0 x1) (= result6 (mk_bool__ref b2))))

;; H
  (assert (=> (< 0 x1) (= b3 (of_int 1))))

;; H
  (assert
  (=> (< 0 x1) (=> (< x2 200) (and (= o2 (+ x2 1)) (in_range3 (+ x2 1))))))

;; H
  (assert (=> (< 0 x1) (=> (< x2 200) (= result7 (mk_int__ref x2)))))

;; H
  (assert (=> (< 0 x1) (=> (< x2 200) (= x3 o2))))

;; H
  (assert (=> (< 0 x1) (=> (not (< x2 200)) (= x3 x2))))

;; H
  (assert (=> (< 0 x1) (not (< 0 x3))))

;; H
  (assert (=> (< 0 x1) (= b4 (mk_bool__ref b3))))

;; H
  (assert (=> (< 0 x1) (= x4 (mk_int__ref x3))))

;; H
  (assert (=> (< 0 x1) (= b5 b3)))

;; H
  (assert (=> (< 0 x1) (= x5 x3)))

;; H
  (assert (=> (< 0 x1) (= b6 b4)))

;; H
  (assert (=> (< 0 x1) (= x6 x4)))

;; H
  (assert (=> (< 0 x1) (= b7 b5)))

;; H
  (assert (=> (< 0 x1) (= x7 x5)))

;; H
  (assert (=> (not (< 0 x1)) (= b6 (mk_bool__ref b))))

;; H
  (assert (=> (not (< 0 x1)) (= x6 (mk_int__ref x1))))

;; H
  (assert (=> (not (< 0 x1)) (= b7 b1)))

;; H
  (assert (=> (not (< 0 x1)) (= x7 x1)))

;; H
  (assert (=> (< i1 10) (= temp___563 i1)))

;; H
  (assert (=> (< i1 10) (= temp___562 r1)))

;; H
  (assert (=> (< i1 10) (= 0 temp___565)))

;; H
  (assert (=> (< i1 10) (= 0 temp___564)))

;; H
  (assert (=> (< i1 10) (<= (- 100 (* 10 i2)) r2)))

;; H
  (assert
  (=> (< i1 10)
  (and (and (=> (<= 1 200) (in_range3 r2)) (=> (<= 1 10) (in_range4 i2)))
  (< i2 10))))

;; H
  (assert (=> (< i1 10) (= result8 (mk_int__ref temp___5651))))

;; H
  (assert (=> (< i1 10) (= temp___5652 i2)))

;; H
  (assert (=> (< i1 10) (= result9 (mk_int__ref temp___5641))))

;; H
  (assert (=> (< i1 10) (= temp___5642 r2)))

;; H
  (assert (=> (< i1 10) (and (= o3 (- r2 i2)) (in_range3 (- r2 i2)))))

;; H
  (assert (=> (< i1 10) (= result10 (mk_int__ref r2))))

;; H
  (assert (=> (< i1 10) (= r3 o3)))

;; H
  (assert (=> (< i1 10) (and (= o4 (+ i2 1)) (in_range4 (+ i2 1)))))

;; H
  (assert (=> (< i1 10) (= result11 (mk_int__ref i2))))

;; H
  (assert (=> (< i1 10) (= i3 o4)))

;; H
  (assert (=> (< i1 10) (not (< i3 10))))

;; H
  (assert (=> (< i1 10) (= i4 (mk_int__ref i3))))

;; H
  (assert (=> (< i1 10) (= r4 (mk_int__ref r3))))

;; H
  (assert (=> (< i1 10) (= i5 i3)))

;; H
  (assert (=> (< i1 10) (= r5 r3)))

;; H
  (assert (=> (< i1 10) (= i6 i4)))

;; H
  (assert (=> (< i1 10) (= r6 r4)))

;; H
  (assert (=> (< i1 10) (= i7 i5)))

;; H
  (assert (=> (< i1 10) (= r7 r5)))

;; H
  (assert (=> (not (< i1 10)) (= i6 (mk_int__ref i1))))

;; H
  (assert (=> (not (< i1 10)) (= r6 (mk_int__ref r1))))

;; H
  (assert (=> (not (< i1 10)) (= i7 i1)))

;; H
  (assert (=> (not (< i1 10)) (= r7 r1)))

;; H
  (assert (= temp___566 (int__content x6)))

;; H
  (assert (=> (<= 1 200) (in_range3 x8)))

;; H
  (assert (and (= o5 (+ x8 1)) (in_range3 (+ x8 1))))

;; H
  (assert (= result12 (mk_int__ref x8)))

;; H
  (assert (= x9 o5))

;; H
  (assert (< x9 0))

;; H
  (assert (= x10 (mk_int__ref x9)))

;; H
  (assert (= x11 x9))

;; H
  (assert (= x12 x10))

;; H
  (assert (= x13 x11))

;; H
  (assert (= temp___567 (int__content x12)))

;; H
  (assert (= 0 temp___568))

;; H
  (assert
  (and (= o6 (+ (int__content x12) 1)) (in_range3 (+ (int__content x12) 1))))

;; H
  (assert (= result13 x12))

;; H
  (assert (= x14 o6))

;; H
  (assert (=> (<= 1 200) (in_range3 x15)))

;; H
  (assert (= result14 (mk_int__ref temp___5681)))

;; H
  (assert (= temp___5682 x15))

;; H
  (assert (= x15 5))

;; H
  (assert (= x16 (mk_int__ref x15)))

;; H
  (assert (= x17 x15))

;; H
  (assert (= x18 x16))

;; H
  (assert (= x19 x17))

;; H
  (assert
  (and (= o18 (first (mk___rep my_container__split_fields1)))
  (= (of_rep 1) o7)))

;; H
  (assert (= temp___572 (mk_cursor__ref o18)))

;; H
  (assert
  (and
  (= result15 (has_element (mk___rep my_container__split_fields1)
              (cursor__content temp___572)))
  (= (= result15 true)
  (and
  (<= 1 (to_rep
        (rec__container__cursor__index
        (us_split_fields3 (cursor__content temp___572)))))
  (<= (to_rep
      (rec__container__cursor__index
      (us_split_fields3 (cursor__content temp___572)))) 200)))))

;; H
  (assert
  (=> (= result15 true)
  (and
  (= o8 (element (mk___rep my_container__split_fields1)
        (cursor__content temp___572)))
  (and (in_range1 o8)
  (= o8 (to_rep1
        (select (rec__container__container__a my_container__split_fields1)
        (to_rep
        (rec__container__cursor__index
        (us_split_fields3 (cursor__content temp___572)))))))))))

;; H
  (assert (=> (= result15 true) (= result16 e27)))

;; H
  (assert (=> (= result15 true) (= e6 o8)))

;; H
  (assert (=> (= result15 true) (= e7 (mk_int__ref e6))))

;; H
  (assert (=> (= result15 true) (= e8 e6)))

;; H
  (assert (=> (not (= result15 true)) (= e7 e27)))

;; H
  (assert (=> (not (= result15 true)) (= e8 e3)))

;; H
  (assert
  (and
  (= result17 (has_element (mk___rep my_container__split_fields1)
              (cursor__content temp___572)))
  (= (= result17 true)
  (and
  (<= 1 (to_rep
        (rec__container__cursor__index
        (us_split_fields3 (cursor__content temp___572)))))
  (<= (to_rep
      (rec__container__cursor__index
      (us_split_fields3 (cursor__content temp___572)))) 200)))))

;; H
  (assert (=> (= result17 true) (= temp___569 (bool__content b6))))

;; H
  (assert
  (=> (= result17 true)
  (and
  (= (has_element (mk___rep my_container__split_fields1)
     (let ((subject temp___572)) temp___5722)) true)
  (= e9 (element (mk___rep my_container__split_fields1)
        (let ((subject temp___572)) temp___5722))))))

;; H
  (assert (=> (= result17 true) (= result18 (mk_bool__ref b8))))

;; H
  (assert (=> (= result17 true) (= b9 (of_int 0))))

;; H
  (assert
  (=> (= result17 true)
  (and
  (= o9 (next (mk___rep my_container__split_fields1)
        (let ((subject temp___572)) temp___5722)))
  (= o9 (ite (< (to_rep
                (rec__container__cursor__index
                (us_split_fields3 (let ((subject temp___572)) temp___5722)))) 200)
        (mk___rep1
        (mk___split_fields1
        (of_rep
        (+ (to_rep
           (rec__container__cursor__index
           (us_split_fields3 (let ((subject temp___572)) temp___5722)))) 1))))
        (mk___rep1 (mk___split_fields1 (of_rep 0))))))))

;; H
  (assert
  (=> (= result17 true)
  (and (= o10 (has_element (mk___rep my_container__split_fields1) o9))
  (= (= o10 true)
  (and (<= 1 (to_rep (rec__container__cursor__index (us_split_fields3 o9))))
  (<= (to_rep (rec__container__cursor__index (us_split_fields3 o9))) 200))))))

;; H
  (assert
  (=> (= result17 true) (= result19 (ite (not (= o10 true)) true false))))

;; H
  (assert (=> (= result17 true) (= result19 true)))

;; H
  (assert
  (=> (= result17 true)
  (= temp___5723 (let ((subject temp___572)) (mk_cursor__ref temp___5722)))))

;; H
  (assert (=> (= result17 true) (= e10 (mk_int__ref e9))))

;; H
  (assert (=> (= result17 true) (= b10 (mk_bool__ref b9))))

;; H
  (assert (=> (= result17 true) (= temp___5724 temp___5722)))

;; H
  (assert (=> (= result17 true) (= e11 e9)))

;; H
  (assert (=> (= result17 true) (= b11 b9)))

;; H
  (assert (=> (= result17 true) (= temp___5725 temp___5723)))

;; H
  (assert (=> (= result17 true) (= e12 e10)))

;; H
  (assert (=> (= result17 true) (= b12 b10)))

;; H
  (assert (=> (= result17 true) (= temp___5726 temp___5724)))

;; H
  (assert (=> (= result17 true) (= e13 e11)))

;; H
  (assert (=> (= result17 true) (= b13 b11)))

;; H
  (assert (=> (not (= result17 true)) (= temp___5725 temp___572)))

;; H
  (assert (=> (not (= result17 true)) (= e12 e7)))

;; H
  (assert (=> (not (= result17 true)) (= b12 b6)))

;; H
  (assert (=> (not (= result17 true)) (= temp___5726 temp___5721)))

;; H
  (assert (=> (not (= result17 true)) (= e13 e8)))

;; H
  (assert (=> (not (= result17 true)) (= b13 b7)))

;; H
  (assert
  (and (= o11 (first (mk___rep my_container__split_fields1)))
  (= o11 (mk___rep1 (mk___split_fields1 (of_rep 1))))))

;; H
  (assert (= temp___579 (mk_cursor__ref o11)))

;; H
  (assert
  (and
  (= result20 (has_element (mk___rep my_container__split_fields1)
              (cursor__content temp___579)))
  (= (= result20 true)
  (and
  (<= 1 (to_rep
        (rec__container__cursor__index
        (us_split_fields3 (cursor__content temp___579)))))
  (<= (to_rep
      (rec__container__cursor__index
      (us_split_fields3 (cursor__content temp___579)))) 200)))))

;; H
  (assert
  (=> (= result20 true)
  (and
  (= o12 (element (mk___rep my_container__split_fields1)
         (cursor__content temp___579)))
  (and (in_range1 o12)
  (= o12 (to_rep1
         (select (rec__container__container__a my_container__split_fields1)
         (to_rep
         (rec__container__cursor__index
         (us_split_fields3 (cursor__content temp___579)))))))))))

;; H
  (assert (=> (= result20 true) (= result21 e26)))

;; H
  (assert (=> (= result20 true) (= e14 o12)))

;; H
  (assert (=> (= result20 true) (= e15 (mk_int__ref e14))))

;; H
  (assert (=> (= result20 true) (= e16 e14)))

;; H
  (assert (=> (not (= result20 true)) (= e15 e26)))

;; H
  (assert (=> (not (= result20 true)) (= e16 e4)))

;; H
  (assert
  (and
  (= result22 (has_element (mk___rep my_container__split_fields1)
              (cursor__content temp___579)))
  (= (= result22 true)
  (and
  (<= 1 (to_rep
        (rec__container__cursor__index
        (us_split_fields3 (cursor__content temp___579)))))
  (<= (to_rep
      (rec__container__cursor__index
      (us_split_fields3 (cursor__content temp___579)))) 200)))))

;; H
  (assert (=> (= result22 true) (= temp___576 (int__content x18))))

;; H
  (assert (=> (= result22 true) (= temp___575 (bool__content b12))))

;; H
  (assert
  (=> (= result22 true)
  (and (=> (<= 1 200) (in_range3 x20))
  (and
  (= (has_element (mk___rep my_container__split_fields1)
     (let ((subject temp___579)) temp___5792)) true)
  (= e17 (element (mk___rep my_container__split_fields1)
         (let ((subject temp___579)) temp___5792)))))))

;; H
  (assert (=> (= result22 true) (= temp___573 x20)))

;; H
  (assert (=> (= result22 true) (= temp___574 (mk_int__ref 0))))

;; H
  (assert
  (=> (= result22 true) (and (= o13 (+ x20 1)) (in_range3 (+ x20 1)))))

;; H
  (assert (=> (= result22 true) (= result23 (mk_int__ref x20))))

;; H
  (assert (=> (= result22 true) (= x21 o13)))

;; H
  (assert (=> (= result22 true) (=> (<= 1 200) (in_range3 x22))))

;; H
  (assert
  (=> (= result22 true)
  (= result24 (let ((subject temp___574)) (mk_int__ref temp___5741)))))

;; H
  (assert
  (=> (= result22 true) (= (let ((subject temp___574)) temp___5742) x22)))

;; H
  (assert (=> (= result22 true) (= x22 5)))

;; H
  (assert (=> (= result22 true) (= x23 (mk_int__ref x22))))

;; H
  (assert (=> (= result22 true) (= rho temp___5742)))

;; H
  (assert (=> (= result22 true) (= x24 x22)))

;; H
  (assert (=> (= result22 true) (= x25 x23)))

;; H
  (assert (=> (= result22 true) (= rho1 rho)))

;; H
  (assert (=> (= result22 true) (= x26 x24)))

;; H
  (assert (=> (= result22 true) (= result25 (mk_bool__ref b14))))

;; H
  (assert (=> (= result22 true) (= b15 (of_int 0))))

;; H
  (assert
  (=> (= result22 true)
  (and
  (= o14 (next (mk___rep my_container__split_fields1)
         (let ((subject temp___579)) temp___5792)))
  (= o14 (ite (< (to_rep
                 (rec__container__cursor__index
                 (us_split_fields3 (let ((subject temp___579)) temp___5792)))) 200)
         (mk___rep1
         (mk___split_fields1
         (of_rep
         (+ (to_rep
            (rec__container__cursor__index
            (us_split_fields3 (let ((subject temp___579)) temp___5792)))) 1))))
         (mk___rep1 (mk___split_fields1 (of_rep 0))))))))

;; H
  (assert
  (=> (= result22 true)
  (and (= o15 (has_element (mk___rep my_container__split_fields1) o14))
  (= (= o15 true)
  (and (<= 1 (to_rep (rec__container__cursor__index (us_split_fields3 o14))))
  (<= (to_rep (rec__container__cursor__index (us_split_fields3 o14))) 200))))))

;; H
  (assert
  (=> (= result22 true) (= result26 (ite (not (= o15 true)) true false))))

;; H
  (assert (=> (= result22 true) (= result26 true)))

;; H
  (assert
  (=> (= result22 true)
  (= temp___5793 (let ((subject temp___579)) (mk_cursor__ref temp___5792)))))

;; H
  (assert (=> (= result22 true) (= e18 (mk_int__ref e17))))

;; H
  (assert (=> (= result22 true) (= b16 (mk_bool__ref b15))))

;; H
  (assert (=> (= result22 true) (= x27 x25)))

;; H
  (assert (=> (= result22 true) (= temp___5794 temp___5792)))

;; H
  (assert (=> (= result22 true) (= e19 e17)))

;; H
  (assert (=> (= result22 true) (= b17 b15)))

;; H
  (assert (=> (= result22 true) (= x28 x26)))

;; H
  (assert (=> (= result22 true) (= temp___5795 temp___5793)))

;; H
  (assert (=> (= result22 true) (= e20 e18)))

;; H
  (assert (=> (= result22 true) (= b18 b16)))

;; H
  (assert (=> (= result22 true) (= x29 x27)))

;; H
  (assert (=> (= result22 true) (= temp___5796 temp___5794)))

;; H
  (assert (=> (= result22 true) (= e21 e19)))

;; H
  (assert (=> (= result22 true) (= b19 b17)))

;; H
  (assert (=> (= result22 true) (= x30 x28)))

;; H
  (assert (=> (not (= result22 true)) (= temp___5795 temp___579)))

;; H
  (assert (=> (not (= result22 true)) (= e20 e15)))

;; H
  (assert (=> (not (= result22 true)) (= b18 b12)))

;; H
  (assert (=> (not (= result22 true)) (= x29 x18)))

;; H
  (assert (=> (not (= result22 true)) (= temp___5796 temp___5791)))

;; H
  (assert (=> (not (= result22 true)) (= e21 e16)))

;; H
  (assert (=> (not (= result22 true)) (= b19 b13)))

;; H
  (assert (=> (not (= result22 true)) (= x30 x19)))

;; H
  (assert
  (and (= o16 (first (mk___rep my_container__split_fields1)))
  (= o16 (mk___rep1 (mk___split_fields1 (of_rep 1))))))

;; H
  (assert (= temp___593 (mk_cursor__ref o16)))

;; H
  (assert
  (and
  (= result27 (has_element (mk___rep my_container__split_fields1)
              (cursor__content temp___593)))
  (= (= result27 true)
  (and
  (<= 1 (to_rep
        (rec__container__cursor__index
        (us_split_fields3 (cursor__content temp___593)))))
  (<= (to_rep
      (rec__container__cursor__index
      (us_split_fields3 (cursor__content temp___593)))) 200)))))

;; H
  (assert
  (=> (= result27 true)
  (and
  (= o17 (element (mk___rep my_container__split_fields1)
         (cursor__content temp___593)))
  (and (in_range1 o17)
  (= o17 (to_rep1
         (select (rec__container__container__a my_container__split_fields1)
         (to_rep
         (rec__container__cursor__index
         (us_split_fields3 (cursor__content temp___593)))))))))))

;; H
  (assert (=> (= result27 true) (= result28 e25)))

;; H
  (assert (=> (= result27 true) (= e22 o17)))

;; H
  (assert (=> (= result27 true) (= e23 (mk_int__ref e22))))

;; H
  (assert (=> (= result27 true) (= e24 e22)))

;; H
  (assert (=> (not (= result27 true)) (= e23 e25)))

;; H
  (assert (=> (not (= result27 true)) (= e24 e5)))

;; H
  (assert
  (and
  (= result29 (has_element (mk___rep my_container__split_fields1)
              (cursor__content temp___593)))
  (= (= result29 true)
  (and
  (<= 1 (to_rep
        (rec__container__cursor__index
        (us_split_fields3 (cursor__content temp___593)))))
  (<= (to_rep
      (rec__container__cursor__index
      (us_split_fields3 (cursor__content temp___593)))) 200)))))

;; H
  (assert (= result29 true))

;; H
  (assert (= result30 b18))

;; H
  (assert (= b20 (of_int 1)))

(assert
;; WP_parameter_def
 ;; File "container.ads", line 33, characters 0-0
  (not (in_range3 (- (int__content r6) 1))))
(check-sat)
(exit)
