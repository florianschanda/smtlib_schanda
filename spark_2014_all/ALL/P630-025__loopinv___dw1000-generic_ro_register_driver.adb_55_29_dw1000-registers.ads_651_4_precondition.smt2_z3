;; produced by z3_gnatprove.drv ;;
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
(set-option :smt.mbqi false)
(set-option :smt.macro-finder true)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (mk_t__ref (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2int x)
                                            (- (- 65536 (bv2int x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (mk_t__ref1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-fun to_rep (integer) Int)

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort natural 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(declare-sort bits_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (bits_8 bits_8) Bool)

(declare-const dummy2 bits_8)

(declare-datatypes ()
((bits_8__ref (mk_bits_8__ref (bits_8__content bits_8)))))
(define-fun bits_8__ref___projection ((a bits_8__ref)) bits_8 (bits_8__content
                                                              a))

(declare-fun to_rep1 (bits_8) (_ BitVec 8))

(declare-fun of_rep1 ((_ BitVec 8)) bits_8)

;; inversion_axiom
  (assert
  (forall ((x bits_8))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x bits_8)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_8)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int bits_8))))))
(declare-fun slide ((Array Int bits_8) Int Int) (Array Int bits_8))

;; slide_eq
  (assert
  (forall ((a (Array Int bits_8)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int bits_8)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int bits_8) Int Int (Array Int bits_8) Int
  Int) (Array Int bits_8))

;; concat_def
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (bits_8 Int) (Array Int bits_8))

;; singleton_def
  (assert
  (forall ((v bits_8))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int bits_8)) (a__first Int) (a__last Int)
  (b (Array Int bits_8)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int bits_8) Int Int (Array Int bits_8) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (bvult (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (bvugt (to_rep1 (select a (+ j 1))) (to_rep1 (select b (+ i 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int bits_8))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int bits_8) (elts a))

(define-fun of_array ((a (Array Int bits_8)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int bits_8)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int bits_8)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int bits_8)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int bits_8))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((byte_array__ref (mk_byte_array__ref (byte_array__content us_t)))))
(define-fun byte_array__ref___projection ((a byte_array__ref)) us_t (byte_array__content
                                                                    a))

(declare-sort bits_4 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule ((_ int2bv 8) 0) x)
                                              (bvule x ((_ int2bv 8) 15))))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 15)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq4 (bits_4 bits_4) Bool)

(declare-const dummy4 bits_4)

(declare-datatypes ()
((bits_4__ref (mk_bits_4__ref (bits_4__content bits_4)))))
(define-fun bits_4__ref___projection ((a bits_4__ref)) bits_4 (bits_4__content
                                                              a))

(declare-fun to_rep2 (bits_4) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) bits_4)

;; inversion_axiom
  (assert
  (forall ((x bits_4))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_4)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x ((_ int2bv 8) 16))))
     (=> (in_range2 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2
                                                               (of_rep2 x))) )))

(define-fun to_int4 ((x bits_4)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_4)) (! (in_range_int
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort bits_12 0)

(define-fun in_range3 ((x (_ BitVec 16))) Bool (and
                                               (bvule ((_ int2bv 16) 0) x)
                                               (bvule x ((_ int2bv 16) 4095))))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 4095)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 16))

(declare-fun user_eq5 (bits_12 bits_12) Bool)

(declare-const dummy5 bits_12)

(declare-datatypes ()
((bits_12__ref (mk_bits_12__ref (bits_12__content bits_12)))))
(define-fun bits_12__ref___projection ((a bits_12__ref)) bits_12 (bits_12__content
                                                                 a))

(declare-fun to_rep3 (bits_12) (_ BitVec 16))

(declare-fun of_rep3 ((_ BitVec 16)) bits_12)

;; inversion_axiom
  (assert
  (forall ((x bits_12))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_12)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (let ((y (bvurem x ((_ int2bv 16) 4096))))
     (=> (in_range3 y) (= (to_rep3 (of_rep3 x)) y))) :pattern ((to_rep3
                                                               (of_rep3 x))) )))

(define-fun to_int5 ((x bits_12)) Int (bv2int (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_12)) (! (in_range_int1
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__dw1000__register_types__evc_tpw_type__evc_tpw bits_12)(rec__dw1000__register_types__evc_tpw_type__reserved bits_4)))))
(define-fun us_split_fields_EVC_TPW__projection ((a us_split_fields)) bits_12
  (rec__dw1000__register_types__evc_tpw_type__evc_tpw a))

(define-fun us_split_fields_Reserved__34__projection ((a us_split_fields)) bits_4
  (rec__dw1000__register_types__evc_tpw_type__reserved a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___99__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___99__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep3
                           (rec__dw1000__register_types__evc_tpw_type__evc_tpw
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__dw1000__register_types__evc_tpw_type__evc_tpw
                                                  (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__dw1000__register_types__evc_tpw_type__reserved
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__dw1000__register_types__evc_tpw_type__reserved
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const dw1000__register_types__evc_tpw_type__evc_tpw__first__bit Int)

(declare-const dw1000__register_types__evc_tpw_type__evc_tpw__last__bit Int)

(declare-const dw1000__register_types__evc_tpw_type__evc_tpw__position Int)

;; dw1000__register_types__evc_tpw_type__evc_tpw__first__bit_axiom
  (assert (<= 0 dw1000__register_types__evc_tpw_type__evc_tpw__first__bit))

;; dw1000__register_types__evc_tpw_type__evc_tpw__last__bit_axiom
  (assert
  (< dw1000__register_types__evc_tpw_type__evc_tpw__first__bit dw1000__register_types__evc_tpw_type__evc_tpw__last__bit))

;; dw1000__register_types__evc_tpw_type__evc_tpw__position_axiom
  (assert (<= 0 dw1000__register_types__evc_tpw_type__evc_tpw__position))

(declare-const dw1000__register_types__evc_tpw_type__reserved__first__bit Int)

(declare-const dw1000__register_types__evc_tpw_type__reserved__last__bit Int)

(declare-const dw1000__register_types__evc_tpw_type__reserved__position Int)

;; dw1000__register_types__evc_tpw_type__reserved__first__bit_axiom
  (assert (<= 0 dw1000__register_types__evc_tpw_type__reserved__first__bit))

;; dw1000__register_types__evc_tpw_type__reserved__last__bit_axiom
  (assert
  (< dw1000__register_types__evc_tpw_type__reserved__first__bit dw1000__register_types__evc_tpw_type__reserved__last__bit))

;; dw1000__register_types__evc_tpw_type__reserved__position_axiom
  (assert (<= 0 dw1000__register_types__evc_tpw_type__reserved__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ()
((evc_tpw_type__ref (mk_evc_tpw_type__ref (evc_tpw_type__content us_rep)))))
(define-fun evc_tpw_type__ref___projection ((a evc_tpw_type__ref)) us_rep
  (evc_tpw_type__content a))

(declare-datatypes ()
((register_type__ref (mk_register_type__ref (register_type__content us_rep)))))
(define-fun register_type__ref___224__projection ((a register_type__ref)) us_rep
  (register_type__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ()
((tregister_byte_arrayP1__ref
 (mk_tregister_byte_arrayP1__ref (tregister_byte_arrayP1__content integer)))))
(define-fun tregister_byte_arrayP1__ref___161__projection ((a tregister_byte_arrayP1__ref)) integer
  (tregister_byte_arrayP1__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high)
                   (and (dynamic_property1 range_first range_last low)
                   (dynamic_property1 range_first range_last high))))))

(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int bits_8))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int bits_8) (elts1 a))

(define-fun of_array1 ((a (Array Int bits_8)) (f Int)
  (l Int)) us_t1 (mk___t1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size2 Int)

(declare-fun object__size2 ((Array Int bits_8)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int bits_8)) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 ((Array Int bits_8)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int bits_8))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int bits_8))) (<= 0 (object__alignment2 a))))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq8 (us_t1 us_t1) Bool)

(declare-const dummy8 us_t1)

(declare-datatypes ()
((register_byte_array__ref
 (mk_register_byte_array__ref (register_byte_array__content us_t1)))))
(define-fun register_byte_array__ref___161__projection ((a register_byte_array__ref)) us_t1
  (register_byte_array__content a))

(define-fun dynamic_invariant ((temp___expr_7206 us_t1)
  (temp___is_init_7203 Bool) (temp___skip_constant_7204 Bool)
  (temp___do_toplevel_7205 Bool)) Bool (=>
                                       (not
                                       (= temp___skip_constant_7204 true))
                                       (and (dynamic_property2 1 2
                                       (first3 temp___expr_7206)
                                       (last3 temp___expr_7206))
                                       (and (= (first3 temp___expr_7206) 1)
                                       (= (last3 temp___expr_7206) 2)))))

(declare-const reg_bytes__first integer)

(declare-const reg_bytes__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_33)))

(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(define-fun dynamic_invariant3 ((temp___expr_245 (_ BitVec 8))
  (temp___is_init_242 Bool) (temp___skip_constant_243 Bool)
  (temp___do_toplevel_244 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_587 us_t)
  (temp___is_init_584 Bool) (temp___skip_constant_585 Bool)
  (temp___do_toplevel_586 Bool)) Bool (=>
                                      (not (= temp___skip_constant_585 true))
                                      (dynamic_property 0 2147483647
                                      (first1 temp___expr_587)
                                      (last1 temp___expr_587))))

;; H
  (assert
  (and (dynamic_property2 1 2 (to_rep reg_bytes__first)
  (to_rep reg_bytes__last))
  (and (= (to_rep reg_bytes__first) 1) (= (to_rep reg_bytes__last) 2))))

(assert
;; WP_parameter_def
 ;; File "dw1000-generic_ro_register_driver.adb", line 27, characters 0-0
  (not
  (< 0 (ite (<= (to_rep reg_bytes__first) (to_rep reg_bytes__last))
       (+ (- (to_rep reg_bytes__last) (to_rep reg_bytes__first)) 1) 0))))
(check-sat)
(exit)
