;; produced by cvc4_16.drv ;;
(set-logic AUFFPBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort positive 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content
                                                                    a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep (select a temp___idx_78)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep (select a temp___idx_78)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (mk___t (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (mk___t a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-fun object__size ((Array Int character)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int character)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-fun to_string (us_image) us_t)

(declare-fun from_string (us_t) us_image)

(declare-datatypes ()
((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content
                                                            a))

(declare-sort natural 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ()
((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool)
  (temp___skip_constant_31 Bool)
  (temp___do_toplevel_32 Bool)) Bool (=>
                                     (or (= temp___is_init_30 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_33)))

(declare-fun to_rep2 (natural) Int)

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun dynamic_invariant1 ((temp___expr_82 us_t)
  (temp___is_init_79 Bool) (temp___skip_constant_80 Bool)
  (temp___do_toplevel_81 Bool)) Bool (=>
                                     (not (= temp___skip_constant_80 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_82)
                                     (last1 temp___expr_82))))

(declare-sort t4s 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (t4s t4s) Bool)

(declare-const dummy5 t4s)

(declare-datatypes () ((t4s__ref (mk_t4s__ref (t4s__content t4s)))))
(define-fun t4s__ref___projection ((a t4s__ref)) t4s (t4s__content a))

(declare-const dummy6 (Array Int character))

(declare-const value__size1 Int)

(declare-fun object__size1 ((Array Int character)) Int)

(declare-const value__component__size1 Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq6 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__fixed_stream__object__width natural)(rec__fixed_stream__object__name (Array Int character))(rec__ext__ us_private)))))
(define-fun us_split_fields_Width__projection ((a us_split_fields)) natural
  (rec__fixed_stream__object__width a))

(define-fun us_split_fields_Name__projection ((a us_split_fields)) (Array Int character)
  (rec__fixed_stream__object__name a))

(define-fun us_split_fields___2__projection ((a us_split_fields)) us_private
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun us_rep___4__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__fixed_stream__object__width
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__fixed_stream__object__width
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__fixed_stream__object__name
                           (us_split_fields1 a)) 1 20
                           (rec__fixed_stream__object__name
                           (us_split_fields1 b)) 1 20) true))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))

(declare-const fixed_stream__object__width__first__bit Int)

(declare-const fixed_stream__object__width__last__bit Int)

(declare-const fixed_stream__object__width__position Int)

;; fixed_stream__object__width__first__bit_axiom
  (assert (<= 0 fixed_stream__object__width__first__bit))

;; fixed_stream__object__width__last__bit_axiom
  (assert
  (< fixed_stream__object__width__first__bit fixed_stream__object__width__last__bit))

;; fixed_stream__object__width__position_axiom
  (assert (<= 0 fixed_stream__object__width__position))

(declare-const fixed_stream__object__name__first__bit Int)

(declare-const fixed_stream__object__name__last__bit Int)

(declare-const fixed_stream__object__name__position Int)

;; fixed_stream__object__name__first__bit_axiom
  (assert (<= 0 fixed_stream__object__name__first__bit))

;; fixed_stream__object__name__last__bit_axiom
  (assert
  (< fixed_stream__object__name__first__bit fixed_stream__object__name__last__bit))

;; fixed_stream__object__name__position_axiom
  (assert (<= 0 fixed_stream__object__name__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ()
((object__ref (mk_object__ref (object__content us_rep)))))
(define-fun object__ref___projection ((a object__ref)) us_rep (object__content
                                                              a))

(declare-fun temp___178 (Int) (Array Int character))

;; def_axiom
  (assert
  (forall ((temp___180 Int))
  (forall ((temp___181 Int))
  (= (select (temp___178 temp___180) temp___181) (of_rep temp___180)))))

(define-fun default_initial_assumption ((temp___expr_176 us_rep)
  (temp___skip_top_level_177 Bool)) Bool (and
                                         (= (attr__tag temp___expr_176)
                                         us_tag)
                                         (and
                                         (= (to_rep2
                                            (rec__fixed_stream__object__width
                                            (us_split_fields1
                                            temp___expr_176))) 0)
                                         (= (rec__fixed_stream__object__name
                                            (us_split_fields1
                                            temp___expr_176)) (temp___178 0)))))

(declare-const elem_width Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const name us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun elements (us_rep) Int)

(declare-fun elements__function_guard (Int us_rep) Bool)

(declare-fun elements1 (Int us_rep) Int)

(declare-fun elements__function_guard1 (Int Int us_rep) Bool)

;; elements__post_axiom
  (assert
  (forall ((this us_rep)) (! (dynamic_invariant (elements this) true false
  true) :pattern ((elements this)) )))

;; elements__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((this us_rep)) (! (dynamic_invariant (elements1 attr__tag1 this)
  true false true) :pattern ((elements1 attr__tag1 this)) ))))

;; fixed_stream__object__compat_axiom
  (assert
  (forall ((this us_rep))
  (! (= (elements this) (elements1 us_tag this)) :pattern ((elements1
                                                           us_tag this)) )))

;; elements__def_axiom
  (assert
  (forall ((this us_rep))
  (! (= (elements this) (to_rep2
                        (rec__fixed_stream__object__width
                        (us_split_fields1 this)))) :pattern ((elements this)) )))

(declare-const this__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_36 Bool)
  (temp___skip_constant_37 Bool)
  (temp___do_toplevel_38 Bool)) Bool (=>
                                     (or (= temp___is_init_36 true)
                                     (<= 1 2147483647)) (in_range1
                                     temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range2 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-const this__split_fields natural)

(declare-const this__split_fields1 (Array Int character))

(declare-const this__split_fields2 us_private)

(declare-const fixed_stream__create__result natural)

(declare-const fixed_stream__create__result1 (Array Int character))

(declare-const fixed_stream__create__result2 us_private)

(declare-const fixed_stream__create__result3 Int)

(declare-const o natural)

(declare-const o1 natural)

(declare-const o2 (Array Int character))

(declare-const o3 us_private)

(declare-const temp___256 natural)

(declare-const temp___2561 (Array Int character))

(declare-const temp___2562 us_private)

(declare-const temp___2563 Int)

(declare-const o4 integer)

(declare-const o5 integer)

(declare-const result natural)

(declare-const result1 (Array Int character))

(declare-const result2 us_private)

(declare-const this__split_fields3 natural)

(declare-const this__split_fields4 (Array Int character))

(declare-const this__split_fields5 us_private)

(declare-const fixed_stream__trim_string__change (Array Int character))

(declare-const result3 natural)

(declare-const result4 (Array Int character))

(declare-const result5 us_private)

(declare-const this__split_fields6 natural)

(declare-const this__split_fields7 (Array Int character))

(declare-const this__split_fields8 us_private)

(declare-const result6 natural)

(declare-const result7 (Array Int character))

(declare-const result8 us_private)

(declare-const result9 Int)

(declare-const fixed_stream__create__result4 natural)

(declare-const fixed_stream__create__result5 (Array Int character))

(declare-const fixed_stream__create__result6 us_private)

(declare-const fixed_stream__create__result7 Int)

(declare-const fixed_stream__create__result8 natural)

(declare-const fixed_stream__create__result9 (Array Int character))

(declare-const fixed_stream__create__result10 us_private)

(declare-const fixed_stream__create__result11 Int)

(declare-const fixed_stream__create__result12 us_rep)

(declare-const this__split_fields9 us_split_fields__ref)

(declare-const fixed_stream__create__result13 object__ref)

(declare-const this__split_fields10 us_split_fields)

(declare-const fixed_stream__create__result14 us_rep)

(define-fun this__split_fields11 () us_split_fields (mk___split_fields
                                                    this__split_fields6
                                                    this__split_fields7
                                                    this__split_fields8))

(declare-const result10 natural)

(declare-const result11 (Array Int character))

(declare-const result12 us_private)

(declare-const result13 Int)

;; H
  (assert (in_range3 elem_width))

;; H
  (assert (dynamic_invariant1 name true false true))

;; H
  (assert
  (and (= this__attr__tag us_tag)
  (and (= (to_rep2 this__split_fields) 0)
  (= this__split_fields1 (temp___178 0)))))

;; H
  (assert (= (to_rep2 o) elem_width))

;; H
  (assert (= o o1))

;; H
  (assert (= this__split_fields1 o2))

;; H
  (assert (= this__split_fields2 o3))

;; H
  (assert (= temp___256 o1))

;; H
  (assert (= temp___2561 o2))

;; H
  (assert (= temp___2562 o3))

;; H
  (assert (= this__attr__tag temp___2563))

;; H
  (assert (= result this__split_fields))

;; H
  (assert (= result1 this__split_fields1))

;; H
  (assert (= result2 this__split_fields2))

;; H
  (assert (= temp___256 this__split_fields3))

;; H
  (assert (= temp___2561 this__split_fields4))

;; H
  (assert (= temp___2562 this__split_fields5))

;; H
  (assert (= (to_rep1 o5) 20))

;; H
  (assert (= (to_rep1 o4) 1))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= (to_rep1 o4) i) (<= i (to_rep1 o5)))
  (or
  (and
  (and
  (or (< (to_rep1 (first (rt name))) 0)
  (<= (- i (to_rep1 o4)) (- 2147483647 (to_rep1 (first (rt name))))))
  (<= (+ (- i (to_rep1 o4)) (to_rep1 (first (rt name)))) (to_rep1
                                                         (last (rt name)))))
  (= (to_rep (select fixed_stream__trim_string__change i)) (to_rep
                                                           (select (elts
                                                                   name) (+ (- i
                                                           (to_rep1 o4))
                                                           (to_rep1
                                                           (first (rt name))))))))
  (= (to_rep (select fixed_stream__trim_string__change i)) 0)))))

;; H
  (assert (= result3 this__split_fields3))

;; H
  (assert (= result4 this__split_fields4))

;; H
  (assert (= result5 this__split_fields5))

;; H
  (assert (= this__split_fields3 this__split_fields6))

;; H
  (assert
  (= (slide fixed_stream__trim_string__change (to_rep1 (first (mk 1 20))) 1)
  this__split_fields7))

;; H
  (assert (= this__split_fields5 this__split_fields8))

;; H
  (assert (= fixed_stream__create__result8 fixed_stream__create__result4))

;; H
  (assert (= fixed_stream__create__result9 fixed_stream__create__result5))

;; H
  (assert (= fixed_stream__create__result10 fixed_stream__create__result6))

;; H
  (assert (= fixed_stream__create__result11 fixed_stream__create__result7))

;; H
  (assert
  (= fixed_stream__create__result12 (mk___rep
                                    (mk___split_fields
                                    fixed_stream__create__result4
                                    fixed_stream__create__result5
                                    fixed_stream__create__result6)
                                    fixed_stream__create__result7)))

;; H
  (assert (= result6 fixed_stream__create__result))

;; H
  (assert (= result7 fixed_stream__create__result1))

;; H
  (assert (= result8 fixed_stream__create__result2))

;; H
  (assert (= result9 fixed_stream__create__result3))

;; H
  (assert (= fixed_stream__create__result4 this__split_fields6))

;; H
  (assert (= fixed_stream__create__result5 this__split_fields7))

;; H
  (assert (= fixed_stream__create__result6 this__split_fields8))

;; H
  (assert (= this__attr__tag fixed_stream__create__result7))

;; H
  (assert
  (= fixed_stream__create__result13 (mk_object__ref
                                    (mk___rep
                                    (mk___split_fields
                                    fixed_stream__create__result8
                                    fixed_stream__create__result9
                                    fixed_stream__create__result10)
                                    fixed_stream__create__result11))))

;; H
  (assert
  (= this__split_fields9 (mk___split_fields__ref this__split_fields11)))

;; H
  (assert (= fixed_stream__create__result14 fixed_stream__create__result12))

;; H
  (assert (= this__split_fields10 this__split_fields11))

;; H
  (assert
  (= (mk___rep (mk___split_fields result10 result11 result12) result13)
  (object__content fixed_stream__create__result13)))

(assert
;; WP_parameter_def
 ;; File "fixed_stream.ads", line 43, characters 0-0
  (not
  (= (elements (object__content fixed_stream__create__result13)) elem_width)))
(check-sat)
(exit)
