;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort integer 0)

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(declare-sort pos 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (pos pos) Bool)

(declare-const dummy1 pos)

(declare-datatypes () ((pos__ref (mk_pos__ref (pos__content pos)))))
(define-fun pos__ref___projection ((a pos__ref)) pos (pos__content a))

(define-fun dynamic_invariant ((temp___expr_525 Int)
  (temp___is_init_522 Bool) (temp___skip_constant_523 Bool)
  (temp___do_toplevel_524 Bool)) Bool (=>
                                      (or (= temp___is_init_522 true)
                                      (<= 1 3)) (in_range1 temp___expr_525)))

(declare-sort slot 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (slot slot) Bool)

(declare-const dummy2 slot)

(declare-datatypes () ((slot__ref (mk_slot__ref (slot__content slot)))))
(define-fun slot__ref___projection ((a slot__ref)) slot (slot__content a))

(declare-fun to_rep (slot) Int)

(declare-fun of_rep (Int) slot)

;; inversion_axiom
  (assert
  (forall ((x slot)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x slot)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int slot))))))
(declare-fun slide ((Array Int slot) Int Int) (Array Int slot))

;; slide_eq
  (assert
  (forall ((a (Array Int slot)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int slot)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int slot) Int Int (Array Int slot) Int
  Int) (Array Int slot))

;; concat_def
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (slot Int) (Array Int slot))

;; singleton_def
  (assert
  (forall ((v slot))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int slot)) (a__first Int) (a__last Int)
  (b (Array Int slot)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_151 Int))
                           (=>
                           (and (<= a__first temp___idx_151)
                           (<= temp___idx_151 a__last))
                           (= (to_rep (select a temp___idx_151)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_151)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_151 Int))
  (=> (and (<= a__first temp___idx_151) (<= temp___idx_151 a__last))
  (= (to_rep (select a temp___idx_151)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_151)))))))))))

(declare-fun compare ((Array Int slot) Int Int (Array Int slot) Int Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy3 (Array Int slot))

(declare-const value__size Int)

(declare-fun object__size ((Array Int slot)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int slot)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int slot)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int slot))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert (forall ((a (Array Int slot))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int slot))) (<= 0 (object__alignment a))))

(declare-fun user_eq3 ((Array Int slot) (Array Int slot)) Bool)

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int slot)))))))
(declare-fun slide1 ((Array Int (Array Int slot)) Int
  Int) (Array Int (Array Int slot)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int slot))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int slot))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int (Array Int slot)) Int Int
  (Array Int (Array Int slot)) Int Int) (Array Int (Array Int slot)))

;; concat_def
  (assert
  (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot))))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 ((Array Int slot) Int) (Array Int (Array Int slot)))

;; singleton_def
  (assert
  (forall ((v (Array Int slot)))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq1 ((a (Array Int (Array Int slot))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int slot))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_152 Int))
                           (=>
                           (and (<= a__first temp___idx_152)
                           (<= temp___idx_152 a__last))
                           (= (bool_eq (select a temp___idx_152) 1 3
                              (select b (+ (- b__first a__first) temp___idx_152))
                              1 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_152 Int))
  (=> (and (<= a__first temp___idx_152) (<= temp___idx_152 a__last))
  (= (bool_eq (select a temp___idx_152) 1 3
     (select b (+ (- b__first a__first) temp___idx_152)) 1 3) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_15)))

(declare-fun one_free_slot (Int Int (Array Int (Array Int slot))) Int)

(declare-fun one_free_slot__function_guard (Int Int Int
  (Array Int (Array Int slot))) Bool)

;; one_free_slot__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant x true true true) (dynamic_invariant y true true
     true)) (dynamic_invariant1 (one_free_slot x y tictactoe__my_board) true
     false true)) :pattern ((one_free_slot x y tictactoe__my_board)) ))))

;; one_free_slot__def_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant x true true true) (dynamic_invariant y true true
     true))
     (= (one_free_slot x y tictactoe__my_board) (ite (= (to_rep
                                                        (let ((temp___554 (select tictactoe__my_board x)))
                                                        (select temp___554 y))) 0)
                                                1 0))) :pattern ((one_free_slot
                                                                 x y
                                                                 tictactoe__my_board)) ))))

(declare-const x Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const y Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant2 ((temp___expr_519 Int)
  (temp___is_init_516 Bool) (temp___skip_constant_517 Bool)
  (temp___do_toplevel_518 Bool)) Bool (=>
                                      (or (= temp___is_init_516 true)
                                      (<= 0 2)) (in_range2 temp___expr_519)))

(declare-const my_board (Array Int (Array Int slot)))

(declare-const o Int)

(declare-const o1 Int)

(declare-const o2 Int)

(declare-const o3 Int)

(declare-const o4 Int)

(declare-const o5 Int)

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Int)

(declare-const o10 Int)

(declare-const o11 Int)

(declare-const o12 Int)

(declare-const o13 Int)

(declare-const o14 Int)

(declare-const o15 Int)

(declare-const o16 Int)

(declare-const o17 Int)

(declare-const o18 Int)

(declare-const o19 Int)

;; H
  (assert (in_range1 x))

;; H
  (assert (in_range1 y))

;; H
  (assert
  (=> (<= 3 x)
  (=> (<= 3 y)
  (and (= o16 (one_free_slot 3 3 my_board))
  (and (in_range o16)
  (= o16 (ite (= (to_rep (select (select my_board 3) 3)) 0) 1 0)))))))

;; H
  (assert (=> (<= 3 x) (=> (not (<= 3 y)) (= o16 0))))

;; H
  (assert
  (=> (<= 3 x)
  (=> (<= 2 y)
  (and (= o13 (one_free_slot 3 2 my_board))
  (and (in_range o13)
  (= o13 (ite (= (to_rep (select (select my_board 3) 2)) 0) 1 0)))))))

;; H
  (assert (=> (<= 3 x) (=> (not (<= 2 y)) (= o13 0))))

;; H
  (assert
  (=> (<= 3 x)
  (and (= o14 (one_free_slot 3 1 my_board))
  (and (in_range o14)
  (= o14 (ite (= (to_rep (select (select my_board 3) 1)) 0) 1 0))))))

;; H
  (assert (=> (<= 3 x) (= o15 (+ o14 o13))))

;; H
  (assert (=> (<= 3 x) (and (= o17 o15) (in_range o15))))

;; H
  (assert (=> (<= 3 x) (= o18 (+ o17 o16))))

;; H
  (assert (=> (<= 3 x) (and (= o19 o18) (in_range o18))))

;; H
  (assert (=> (not (<= 3 x)) (= o19 0)))

;; H
  (assert
  (=> (<= 2 x)
  (=> (<= 3 y)
  (and (= o9 (one_free_slot 2 3 my_board))
  (and (in_range o9)
  (= o9 (ite (= (to_rep (select (select my_board 2) 3)) 0) 1 0)))))))

;; H
  (assert (=> (<= 2 x) (=> (not (<= 3 y)) (= o9 0))))

;; H
  (assert
  (=> (<= 2 x)
  (=> (<= 2 y)
  (and (= o6 (one_free_slot 2 2 my_board))
  (and (in_range o6)
  (= o6 (ite (= (to_rep (select (select my_board 2) 2)) 0) 1 0)))))))

;; H
  (assert (=> (<= 2 x) (=> (not (<= 2 y)) (= o6 0))))

;; H
  (assert
  (=> (<= 2 x)
  (and (= o7 (one_free_slot 2 1 my_board))
  (and (in_range o7)
  (= o7 (ite (= (to_rep (select (select my_board 2) 1)) 0) 1 0))))))

;; H
  (assert (=> (<= 2 x) (= o8 (+ o7 o6))))

;; H
  (assert (=> (<= 2 x) (and (= o10 o8) (in_range o8))))

;; H
  (assert (=> (<= 2 x) (= o11 (+ o10 o9))))

;; H
  (assert (=> (<= 2 x) (and (= o12 o11) (in_range o11))))

;; H
  (assert (=> (not (<= 2 x)) (= o12 0)))

;; H
  (assert
  (=> (<= 3 y)
  (and (= o3 (one_free_slot 1 3 my_board))
  (and (in_range o3)
  (= o3 (ite (= (to_rep (select (select my_board 1) 3)) 0) 1 0))))))

;; H
  (assert (=> (not (<= 3 y)) (= o3 0)))

;; H
  (assert
  (=> (<= 2 y)
  (and (= o (one_free_slot 1 2 my_board))
  (and (in_range o)
  (= o (ite (= (to_rep (select (select my_board 1) 2)) 0) 1 0))))))

;; H
  (assert (=> (not (<= 2 y)) (= o 0)))

;; H
  (assert
  (and (= o1 (one_free_slot 1 1 my_board))
  (and (in_range o1)
  (= o1 (ite (= (to_rep (select (select my_board 1) 1)) 0) 1 0)))))

;; H
  (assert (= o2 (+ o1 o)))

;; H
  (assert (and (= o4 o2) (in_range o2)))

;; H
  (assert (= o5 (+ o4 o3)))

(assert
;; WP_parameter_def
 ;; File "system.ads", line 1, characters 0-0
  (not (in_range o5)))
(check-sat)
(exit)
