;; produced by cvc4_14.drv ;;
(set-logic AUFBVDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.0)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-fun us_null_ext__ () us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort percentage 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(define-fun bool_eq ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (percentage percentage) Bool)

(declare-fun dummy () percentage)

(declare-datatypes ()
((percentage__ref (mk_percentage__ref (percentage__content percentage)))))
(define-fun percentage__ref___projection ((a percentage__ref)) percentage 
  (percentage__content a))

(define-fun dynamic_invariant ((temp___expr_149 Int)
  (temp___is_init_146 Bool) (temp___skip_constant_147 Bool)
  (temp___do_toplevel_148 Bool)) Bool (=>
                                      (or (= temp___is_init_146 true)
                                      (<= 0 100)) (in_range1
                                      temp___expr_149)))

(declare-fun to_rep (percentage) Int)

(declare-fun of_rep (Int) percentage)

;; inversion_axiom
  (assert
  (forall ((x percentage))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x percentage)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__pupils__participation__studying Bool)(rec__pupils__participation__score percentage)))))
(define-fun us_split_fields_Studying__projection ((a us_split_fields)) Bool 
  (rec__pupils__participation__studying a))

(define-fun us_split_fields_Score__projection ((a us_split_fields)) percentage 
  (rec__pupils__participation__score a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__pupils__participation__studying
                           (us_split_fields1 a)) (rec__pupils__participation__studying
                                                 (us_split_fields1 b)))
                        (= (to_rep
                           (rec__pupils__participation__score
                           (us_split_fields1 a))) (to_rep
                                                  (rec__pupils__participation__score
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-fun value__size () Int)

(declare-fun object__size (us_rep) Int)

(declare-fun value__alignment () Int)

(declare-fun object__alignment (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment a))))

(declare-fun pupils__participation__studying__first__bit () Int)

(declare-fun pupils__participation__studying__last__bit () Int)

(declare-fun pupils__participation__studying__position () Int)

;; pupils__participation__studying__first__bit_axiom
  (assert (<= 0 pupils__participation__studying__first__bit))

;; pupils__participation__studying__last__bit_axiom
  (assert
  (< pupils__participation__studying__first__bit pupils__participation__studying__last__bit))

;; pupils__participation__studying__position_axiom
  (assert (<= 0 pupils__participation__studying__position))

(declare-fun pupils__participation__score__first__bit () Int)

(declare-fun pupils__participation__score__last__bit () Int)

(declare-fun pupils__participation__score__position () Int)

;; pupils__participation__score__first__bit_axiom
  (assert (<= 0 pupils__participation__score__first__bit))

;; pupils__participation__score__last__bit_axiom
  (assert
  (< pupils__participation__score__first__bit pupils__participation__score__last__bit))

;; pupils__participation__score__position_axiom
  (assert (<= 0 pupils__participation__score__position))

(declare-fun dummy1 () us_rep)

(declare-datatypes ()
((participation__ref (mk_participation__ref (participation__content us_rep)))))
(define-fun participation__ref___projection ((a participation__ref)) us_rep 
  (participation__content a))

(declare-sort subject 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 18)))

(define-fun bool_eq2 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (subject subject) Bool)

(declare-fun dummy2 () subject)

(declare-datatypes ()
((subject__ref (mk_subject__ref (subject__content subject)))))
(define-fun subject__ref___projection ((a subject__ref)) subject (subject__content
                                                                 a))

(define-fun dynamic_invariant1 ((temp___expr_163 Int)
  (temp___is_init_160 Bool) (temp___skip_constant_161 Bool)
  (temp___do_toplevel_162 Bool)) Bool (=>
                                      (or (= temp___is_init_160 true)
                                      (<= 0 18)) (in_range2 temp___expr_163)))

(declare-fun to_rep1 (subject) Int)

(declare-fun of_rep1 (Int) subject)

;; inversion_axiom
  (assert
  (forall ((x subject))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x subject)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int us_rep) Int Int (Array Int us_rep) Int
  Int) (Array Int us_rep))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (us_rep Int) (Array Int us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq3 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (bool_eq1 (select a temp___idx_132)
                              (select b (+ (- b__first a__first) temp___idx_132))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (bool_eq1 (select a temp___idx_132)
     (select b (+ (- b__first a__first) temp___idx_132))) true))))))))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(define-fun bool_eq4 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-fun dummy3 () character)

(declare-datatypes ()
((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep2 (character) Int)

(declare-fun of_rep2 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref1 (mk_map__ref1 (map__content1 (Array Int character))))))
(declare-fun slide1 ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(declare-fun concat2 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton2 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(define-fun bool_eq5 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_78 Int))
                           (=>
                           (and (<= a__first temp___idx_78)
                           (<= temp___idx_78 a__last))
                           (= (to_rep2 (select a temp___idx_78)) (to_rep2
                                                                 (select b (+ (- b__first a__first) temp___idx_78)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_78 Int))
  (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last))
  (= (to_rep2 (select a temp___idx_78)) (to_rep2
                                        (select b (+ (- b__first a__first) temp___idx_78)))))))))))

(declare-fun compare ((Array Int character) Int Int (Array Int character) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq5 a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq5 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep2 (select a (+ i 1))) (to_rep2 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq5 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep2 (select b (+ i 1))) (to_rep2 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-sort formtype 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(define-fun bool_eq6 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (formtype formtype) Bool)

(declare-fun dummy4 () formtype)

(declare-datatypes ()
((formtype__ref (mk_formtype__ref (formtype__content formtype)))))
(define-fun formtype__ref___projection ((a formtype__ref)) formtype (formtype__content
                                                                    a))

(define-fun dynamic_invariant2 ((temp___expr_195 Int)
  (temp___is_init_192 Bool) (temp___skip_constant_193 Bool)
  (temp___do_toplevel_194 Bool)) Bool (=>
                                      (or (= temp___is_init_192 true)
                                      (<= 0 8)) (in_range4 temp___expr_195)))

(declare-fun to_rep3 (formtype) Int)

(declare-fun of_rep3 (Int) formtype)

;; inversion_axiom
  (assert
  (forall ((x formtype))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x formtype)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-fun dummy5 () (Array Int us_rep))

(declare-fun value__size1 () Int)

(declare-fun object__size1 ((Array Int us_rep)) Int)

(declare-fun value__component__size () Int)

(declare-fun object__component__size ((Array Int us_rep)) Int)

(declare-fun value__alignment1 () Int)

(declare-fun object__alignment1 ((Array Int us_rep)) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__size1 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment1 a))))

(declare-fun user_eq5 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-fun dummy6 () (Array Int character))

(declare-fun value__size2 () Int)

(declare-fun object__size2 ((Array Int character)) Int)

(declare-fun value__component__size1 () Int)

(declare-fun object__component__size1 ((Array Int character)) Int)

(declare-fun value__alignment2 () Int)

(declare-fun object__alignment2 ((Array Int character)) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__size2 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size1))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a (Array Int character))) (<= 0 (object__alignment2 a))))

(declare-fun user_eq6 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__pupils__pupiltype__surname (Array Int character))(rec__pupils__pupiltype__forename (Array Int character))(rec__pupils__pupiltype__form formtype)(rec__pupils__pupiltype__scores (Array Int us_rep))))))
(define-fun us_split_fields_Surname__projection ((a us_split_fields2)) (Array Int character) 
  (rec__pupils__pupiltype__surname a))

(define-fun us_split_fields_Forename__projection ((a us_split_fields2)) (Array Int character) 
  (rec__pupils__pupiltype__forename a))

(define-fun us_split_fields_Form__projection ((a us_split_fields2)) formtype 
  (rec__pupils__pupiltype__form a))

(define-fun us_split_fields_Scores__projection ((a us_split_fields2)) (Array Int us_rep) 
  (rec__pupils__pupiltype__scores a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref_2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep_2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                a))

(define-fun bool_eq7 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (and
                         (= (bool_eq5
                            (rec__pupils__pupiltype__surname
                            (us_split_fields3 a)) 1 25
                            (rec__pupils__pupiltype__surname
                            (us_split_fields3 b)) 1 25) true)
                         (= (bool_eq5
                            (rec__pupils__pupiltype__forename
                            (us_split_fields3 a)) 1 25
                            (rec__pupils__pupiltype__forename
                            (us_split_fields3 b)) 1 25) true))
                         (= (to_rep3
                            (rec__pupils__pupiltype__form
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__pupils__pupiltype__form
                                                   (us_split_fields3 b)))))
                         (= (bool_eq3
                            (rec__pupils__pupiltype__scores
                            (us_split_fields3 a)) 0 18
                            (rec__pupils__pupiltype__scores
                            (us_split_fields3 b)) 0 18) true))
                    true false))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-fun value__size3 () Int)

(declare-fun object__size3 (us_rep1) Int)

(declare-fun value__alignment3 () Int)

(declare-fun object__alignment3 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment3))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))

(declare-fun pupils__pupiltype__surname__first__bit () Int)

(declare-fun pupils__pupiltype__surname__last__bit () Int)

(declare-fun pupils__pupiltype__surname__position () Int)

;; pupils__pupiltype__surname__first__bit_axiom
  (assert (<= 0 pupils__pupiltype__surname__first__bit))

;; pupils__pupiltype__surname__last__bit_axiom
  (assert
  (< pupils__pupiltype__surname__first__bit pupils__pupiltype__surname__last__bit))

;; pupils__pupiltype__surname__position_axiom
  (assert (<= 0 pupils__pupiltype__surname__position))

(declare-fun pupils__pupiltype__forename__first__bit () Int)

(declare-fun pupils__pupiltype__forename__last__bit () Int)

(declare-fun pupils__pupiltype__forename__position () Int)

;; pupils__pupiltype__forename__first__bit_axiom
  (assert (<= 0 pupils__pupiltype__forename__first__bit))

;; pupils__pupiltype__forename__last__bit_axiom
  (assert
  (< pupils__pupiltype__forename__first__bit pupils__pupiltype__forename__last__bit))

;; pupils__pupiltype__forename__position_axiom
  (assert (<= 0 pupils__pupiltype__forename__position))

(declare-fun pupils__pupiltype__form__first__bit () Int)

(declare-fun pupils__pupiltype__form__last__bit () Int)

(declare-fun pupils__pupiltype__form__position () Int)

;; pupils__pupiltype__form__first__bit_axiom
  (assert (<= 0 pupils__pupiltype__form__first__bit))

;; pupils__pupiltype__form__last__bit_axiom
  (assert
  (< pupils__pupiltype__form__first__bit pupils__pupiltype__form__last__bit))

;; pupils__pupiltype__form__position_axiom
  (assert (<= 0 pupils__pupiltype__form__position))

(declare-fun pupils__pupiltype__scores__first__bit () Int)

(declare-fun pupils__pupiltype__scores__last__bit () Int)

(declare-fun pupils__pupiltype__scores__position () Int)

;; pupils__pupiltype__scores__first__bit_axiom
  (assert (<= 0 pupils__pupiltype__scores__first__bit))

;; pupils__pupiltype__scores__last__bit_axiom
  (assert
  (< pupils__pupiltype__scores__first__bit pupils__pupiltype__scores__last__bit))

;; pupils__pupiltype__scores__position_axiom
  (assert (<= 0 pupils__pupiltype__scores__position))

(declare-fun dummy7 () us_rep1)

(declare-datatypes ()
((pupiltype__ref (mk_pupiltype__ref (pupiltype__content us_rep1)))))
(define-fun pupiltype__ref___projection ((a pupiltype__ref)) us_rep1 
  (pupiltype__content a))

(declare-sort pupilnumbers 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 250)))

(define-fun bool_eq8 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (pupilnumbers pupilnumbers) Bool)

(declare-fun dummy8 () pupilnumbers)

(declare-datatypes ()
((pupilnumbers__ref
 (mk_pupilnumbers__ref (pupilnumbers__content pupilnumbers)))))
(define-fun pupilnumbers__ref___projection ((a pupilnumbers__ref)) pupilnumbers 
  (pupilnumbers__content a))

(declare-fun to_rep4 (pupilnumbers) Int)

(declare-fun of_rep4 (Int) pupilnumbers)

;; inversion_axiom
  (assert
  (forall ((x pupilnumbers))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x pupilnumbers)) (! (in_range5
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort pupilindex 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 250)))

(define-fun bool_eq9 ((x Int) (y Int)) Bool (ite (= x y) true false))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (pupilindex pupilindex) Bool)

(declare-fun dummy9 () pupilindex)

(declare-datatypes ()
((pupilindex__ref (mk_pupilindex__ref (pupilindex__content pupilindex)))))
(define-fun pupilindex__ref___projection ((a pupilindex__ref)) pupilindex 
  (pupilindex__content a))

(declare-datatypes ()
((map__ref2 (mk_map__ref2 (map__content2 (Array Int us_rep1))))))
(declare-fun slide2 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(declare-fun concat3 ((Array Int us_rep1) Int Int (Array Int us_rep1) Int
  Int) (Array Int us_rep1))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat3 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat3 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton3 (us_rep1 Int) (Array Int us_rep1))

;; singleton_def
  (assert
  (forall ((v us_rep1))
  (forall ((i Int))
  (! (= (select (singleton3 v i) i) v) :pattern ((select (singleton3 v i) i)) ))))

(define-fun bool_eq10 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_139 Int))
                           (=>
                           (and (<= a__first temp___idx_139)
                           (<= temp___idx_139 a__last))
                           (= (bool_eq7 (select a temp___idx_139)
                              (select b (+ (- b__first a__first) temp___idx_139))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq10 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_139 Int))
  (=> (and (<= a__first temp___idx_139) (<= temp___idx_139 a__last))
  (= (bool_eq7 (select a temp___idx_139)
     (select b (+ (- b__first a__first) temp___idx_139))) true))))))))

(declare-fun dummy10 () (Array Int us_rep1))

(declare-fun value__size4 () Int)

(declare-fun object__size4 ((Array Int us_rep1)) Int)

(declare-fun value__component__size2 () Int)

(declare-fun object__component__size2 ((Array Int us_rep1)) Int)

(declare-fun value__alignment4 () Int)

(declare-fun object__alignment4 ((Array Int us_rep1)) Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (forall ((a (Array Int us_rep1))) (<= 0 (object__size4 a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size2))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int us_rep1))) (<= 0 (object__component__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment4))

;; object__alignment_axiom
  (assert (forall ((a (Array Int us_rep1))) (<= 0 (object__alignment4 a))))

(declare-fun user_eq10 ((Array Int us_rep1) (Array Int us_rep1)) Bool)

(declare-datatypes ()
((us_split_fields4
 (mk___split_fields2
 (rec__pupils__pupildata__numberofpupils pupilnumbers)(rec__pupils__pupildata__pupilentries (Array Int us_rep1))))))
(define-fun us_split_fields_NumberOfPupils__projection ((a us_split_fields4)) pupilnumbers 
  (rec__pupils__pupildata__numberofpupils a))

(define-fun us_split_fields_PupilEntries__projection ((a us_split_fields4)) (Array Int us_rep1) 
  (rec__pupils__pupildata__pupilentries a))

(declare-datatypes ()
((us_split_fields__ref2
 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref_3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep_3__projection ((a us_rep2)) us_split_fields4 (us_split_fields5
                                                                a))

(define-fun bool_eq11 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep4
                            (rec__pupils__pupildata__numberofpupils
                            (us_split_fields5 a))) (to_rep4
                                                   (rec__pupils__pupildata__numberofpupils
                                                   (us_split_fields5 b))))
                         (= (bool_eq10
                            (rec__pupils__pupildata__pupilentries
                            (us_split_fields5 a)) 1 250
                            (rec__pupils__pupildata__pupilentries
                            (us_split_fields5 b)) 1 250) true))
                    true false))

(declare-fun user_eq11 (us_rep2 us_rep2) Bool)

(declare-fun value__size5 () Int)

(declare-fun object__size5 (us_rep2) Int)

(declare-fun value__alignment5 () Int)

(declare-fun object__alignment5 (us_rep2) Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment5))

;; object__alignment_axiom
  (assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))

(declare-fun pupils__pupildata__numberofpupils__first__bit () Int)

(declare-fun pupils__pupildata__numberofpupils__last__bit () Int)

(declare-fun pupils__pupildata__numberofpupils__position () Int)

;; pupils__pupildata__numberofpupils__first__bit_axiom
  (assert (<= 0 pupils__pupildata__numberofpupils__first__bit))

;; pupils__pupildata__numberofpupils__last__bit_axiom
  (assert
  (< pupils__pupildata__numberofpupils__first__bit pupils__pupildata__numberofpupils__last__bit))

;; pupils__pupildata__numberofpupils__position_axiom
  (assert (<= 0 pupils__pupildata__numberofpupils__position))

(declare-fun pupils__pupildata__pupilentries__first__bit () Int)

(declare-fun pupils__pupildata__pupilentries__last__bit () Int)

(declare-fun pupils__pupildata__pupilentries__position () Int)

;; pupils__pupildata__pupilentries__first__bit_axiom
  (assert (<= 0 pupils__pupildata__pupilentries__first__bit))

;; pupils__pupildata__pupilentries__last__bit_axiom
  (assert
  (< pupils__pupildata__pupilentries__first__bit pupils__pupildata__pupilentries__last__bit))

;; pupils__pupildata__pupilentries__position_axiom
  (assert (<= 0 pupils__pupildata__pupilentries__position))

(declare-fun dummy11 () us_rep2)

(declare-datatypes ()
((pupildata__ref (mk_pupildata__ref (pupildata__content us_rep2)))))
(define-fun pupildata__ref___projection ((a pupildata__ref)) us_rep2 
  (pupildata__content a))

(declare-datatypes ()
((map__ref3 (mk_map__ref3 (map__content3 (Array Int subject))))))
(declare-fun slide3 ((Array Int subject) Int Int) (Array Int subject))

;; slide_eq
  (assert
  (forall ((a (Array Int subject)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int subject)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(declare-fun concat4 ((Array Int subject) Int Int (Array Int subject) Int
  Int) (Array Int subject))

;; concat_def
  (assert
  (forall ((a (Array Int subject)) (b (Array Int subject)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat4 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat4 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton4 (subject Int) (Array Int subject))

;; singleton_def
  (assert
  (forall ((v subject))
  (forall ((i Int))
  (! (= (select (singleton4 v i) i) v) :pattern ((select (singleton4 v i) i)) ))))

(define-fun bool_eq12 ((a (Array Int subject)) (a__first Int) (a__last Int)
  (b (Array Int subject)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_144 Int))
                           (=>
                           (and (<= a__first temp___idx_144)
                           (<= temp___idx_144 a__last))
                           (= (to_rep1 (select a temp___idx_144)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_144)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int subject)) (b (Array Int subject)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq12 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_144 Int))
  (=> (and (<= a__first temp___idx_144) (<= temp___idx_144 a__last))
  (= (to_rep1 (select a temp___idx_144)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_144)))))))))))

(declare-fun compare1 ((Array Int subject) Int Int (Array Int subject) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int subject)) (b (Array Int subject)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare1 a a_first a_last b b_first b_last) 0)
     (= (bool_eq12 a a_first a_last b b_first b_last) true)) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int subject)) (b (Array Int subject)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare1 a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq12 a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int subject)) (b (Array Int subject)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare1 a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq12 a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare1 a a_first a_last b b_first b_last)) ))))

(declare-datatypes ()
((us_split_fields6
 (mk___split_fields3
 (rec__pupils__subject_score_pair__subj subject)(rec__pupils__subject_score_pair__score percentage)))))
(define-fun us_split_fields_Subj__projection ((a us_split_fields6)) subject 
  (rec__pupils__subject_score_pair__subj a))

(define-fun us_split_fields_Score2__projection ((a us_split_fields6)) percentage 
  (rec__pupils__subject_score_pair__score a))

(declare-datatypes ()
((us_split_fields__ref3
 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref_4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep_4__projection ((a us_rep3)) us_split_fields6 (us_split_fields7
                                                                a))

(define-fun bool_eq13 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep1
                            (rec__pupils__subject_score_pair__subj
                            (us_split_fields7 a))) (to_rep1
                                                   (rec__pupils__subject_score_pair__subj
                                                   (us_split_fields7 b))))
                         (= (to_rep
                            (rec__pupils__subject_score_pair__score
                            (us_split_fields7 a))) (to_rep
                                                   (rec__pupils__subject_score_pair__score
                                                   (us_split_fields7 b)))))
                    true false))

(declare-fun user_eq12 (us_rep3 us_rep3) Bool)

(declare-fun value__size6 () Int)

(declare-fun object__size6 (us_rep3) Int)

(declare-fun value__alignment6 () Int)

(declare-fun object__alignment6 (us_rep3) Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__size6 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment6))

;; object__alignment_axiom
  (assert (forall ((a us_rep3)) (<= 0 (object__alignment6 a))))

(declare-fun pupils__subject_score_pair__subj__first__bit () Int)

(declare-fun pupils__subject_score_pair__subj__last__bit () Int)

(declare-fun pupils__subject_score_pair__subj__position () Int)

;; pupils__subject_score_pair__subj__first__bit_axiom
  (assert (<= 0 pupils__subject_score_pair__subj__first__bit))

;; pupils__subject_score_pair__subj__last__bit_axiom
  (assert
  (< pupils__subject_score_pair__subj__first__bit pupils__subject_score_pair__subj__last__bit))

;; pupils__subject_score_pair__subj__position_axiom
  (assert (<= 0 pupils__subject_score_pair__subj__position))

(declare-fun pupils__subject_score_pair__score__first__bit () Int)

(declare-fun pupils__subject_score_pair__score__last__bit () Int)

(declare-fun pupils__subject_score_pair__score__position () Int)

;; pupils__subject_score_pair__score__first__bit_axiom
  (assert (<= 0 pupils__subject_score_pair__score__first__bit))

;; pupils__subject_score_pair__score__last__bit_axiom
  (assert
  (< pupils__subject_score_pair__score__first__bit pupils__subject_score_pair__score__last__bit))

;; pupils__subject_score_pair__score__position_axiom
  (assert (<= 0 pupils__subject_score_pair__score__position))

(declare-fun dummy12 () us_rep3)

(declare-datatypes ()
((subject_score_pair__ref
 (mk_subject_score_pair__ref (subject_score_pair__content us_rep3)))))
(define-fun subject_score_pair__ref___projection ((a subject_score_pair__ref)) us_rep3 
  (subject_score_pair__content a))

(declare-datatypes ()
((map__ref4 (mk_map__ref4 (map__content4 (Array Int us_rep3))))))
(declare-fun slide4 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide4 a first first) a) :pattern ((slide4 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide4 a old_first new_first) i)) ))))))

(declare-fun concat5 ((Array Int us_rep3) Int Int (Array Int us_rep3) Int
  Int) (Array Int us_rep3))

;; concat_def
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat5 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat5 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton5 (us_rep3 Int) (Array Int us_rep3))

;; singleton_def
  (assert
  (forall ((v us_rep3))
  (forall ((i Int))
  (! (= (select (singleton5 v i) i) v) :pattern ((select (singleton5 v i) i)) ))))

(define-fun bool_eq14 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_145 Int))
                           (=>
                           (and (<= a__first temp___idx_145)
                           (<= temp___idx_145 a__last))
                           (= (bool_eq13 (select a temp___idx_145)
                              (select b (+ (- b__first a__first) temp___idx_145))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq14 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_145 Int))
  (=> (and (<= a__first temp___idx_145) (<= temp___idx_145 a__last))
  (= (bool_eq13 (select a temp___idx_145)
     (select b (+ (- b__first a__first) temp___idx_145))) true))))))))

(declare-fun sname () (Array Int character))

(declare-fun attr__ATTRIBUTE_ADDRESS () Int)

(declare-fun fname () (Array Int character))

(declare-fun attr__ATTRIBUTE_ADDRESS1 () Int)

(declare-fun fm () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS2 () Int)

(declare-fun subj0 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS3 () Int)

(declare-fun score0 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS4 () Int)

(declare-fun subj1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS5 () Int)

(declare-fun score1 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS6 () Int)

(declare-fun subj2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS7 () Int)

(declare-fun score2 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS8 () Int)

(declare-fun subj3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS9 () Int)

(declare-fun score3 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS10 () Int)

(declare-fun subj4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS11 () Int)

(declare-fun score4 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS12 () Int)

(declare-fun subj5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS13 () Int)

(declare-fun score5 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS14 () Int)

(declare-fun subj6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS15 () Int)

(declare-fun score6 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS16 () Int)

(declare-fun subj7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS17 () Int)

(declare-fun score7 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS18 () Int)

(declare-fun subj8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS19 () Int)

(declare-fun score8 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS20 () Int)

(declare-fun subj9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS21 () Int)

(declare-fun score9 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS22 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS23 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS24 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS25 () Int)

(declare-fun attr__ATTRIBUTE_ADDRESS26 () Int)

(declare-fun temp___311 (Int Int Int Int Int Int Int Int Int
  Int) (Array Int subject))

;; def_axiom
  (assert
  (forall ((temp___313 Int) (temp___314 Int) (temp___315 Int)
  (temp___316 Int) (temp___317 Int) (temp___318 Int) (temp___319 Int)
  (temp___320 Int) (temp___321 Int) (temp___322 Int))
  (let ((temp___312 (temp___311 temp___313 temp___314 temp___315 temp___316
                    temp___317 temp___318 temp___319 temp___320 temp___321
                    temp___322)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___312 0) (of_rep1 temp___313))
  (= (select temp___312 1) (of_rep1 temp___314)))
  (= (select temp___312 2) (of_rep1 temp___315)))
  (= (select temp___312 3) (of_rep1 temp___316)))
  (= (select temp___312 4) (of_rep1 temp___317)))
  (= (select temp___312 5) (of_rep1 temp___318)))
  (= (select temp___312 6) (of_rep1 temp___319)))
  (= (select temp___312 7) (of_rep1 temp___320)))
  (= (select temp___312 8) (of_rep1 temp___321)))
  (= (select temp___312 9) (of_rep1 temp___322))))))

(declare-fun temp___325 (Int Int Int Int Int Int Int Int Int
  Int) (Array Int subject))

;; def_axiom
  (assert
  (forall ((temp___327 Int) (temp___328 Int) (temp___329 Int)
  (temp___330 Int) (temp___331 Int) (temp___332 Int) (temp___333 Int)
  (temp___334 Int) (temp___335 Int) (temp___336 Int))
  (let ((temp___326 (temp___325 temp___327 temp___328 temp___329 temp___330
                    temp___331 temp___332 temp___333 temp___334 temp___335
                    temp___336)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___326 0) (of_rep1 temp___327))
  (= (select temp___326 1) (of_rep1 temp___328)))
  (= (select temp___326 2) (of_rep1 temp___329)))
  (= (select temp___326 3) (of_rep1 temp___330)))
  (= (select temp___326 4) (of_rep1 temp___331)))
  (= (select temp___326 5) (of_rep1 temp___332)))
  (= (select temp___326 6) (of_rep1 temp___333)))
  (= (select temp___326 7) (of_rep1 temp___334)))
  (= (select temp___326 8) (of_rep1 temp___335)))
  (= (select temp___326 9) (of_rep1 temp___336))))))

(declare-fun temp___339 (Int Int Int Int Int Int Int Int Int
  Int) (Array Int subject))

;; def_axiom
  (assert
  (forall ((temp___341 Int) (temp___342 Int) (temp___343 Int)
  (temp___344 Int) (temp___345 Int) (temp___346 Int) (temp___347 Int)
  (temp___348 Int) (temp___349 Int) (temp___350 Int))
  (let ((temp___340 (temp___339 temp___341 temp___342 temp___343 temp___344
                    temp___345 temp___346 temp___347 temp___348 temp___349
                    temp___350)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___340 0) (of_rep1 temp___341))
  (= (select temp___340 1) (of_rep1 temp___342)))
  (= (select temp___340 2) (of_rep1 temp___343)))
  (= (select temp___340 3) (of_rep1 temp___344)))
  (= (select temp___340 4) (of_rep1 temp___345)))
  (= (select temp___340 5) (of_rep1 temp___346)))
  (= (select temp___340 6) (of_rep1 temp___347)))
  (= (select temp___340 7) (of_rep1 temp___348)))
  (= (select temp___340 8) (of_rep1 temp___349)))
  (= (select temp___340 9) (of_rep1 temp___350))))))

(declare-fun temp___354 ((Array Int us_rep) Int us_rep Int us_rep Int us_rep
  Int us_rep Int us_rep Int us_rep Int us_rep Int us_rep Int us_rep Int
  us_rep) (Array Int us_rep))

;; def_axiom
  (assert
  (forall ((temp___356 (Array Int us_rep)))
  (forall ((temp___357 Int) (temp___359 Int) (temp___361 Int)
  (temp___363 Int) (temp___365 Int) (temp___367 Int) (temp___369 Int)
  (temp___371 Int) (temp___373 Int) (temp___375 Int))
  (forall ((temp___358 us_rep) (temp___360 us_rep) (temp___362 us_rep)
  (temp___364 us_rep) (temp___366 us_rep) (temp___368 us_rep)
  (temp___370 us_rep) (temp___372 us_rep) (temp___374 us_rep)
  (temp___376 us_rep))
  (let ((temp___355 (temp___354 temp___356 temp___357 temp___358 temp___359
                    temp___360 temp___361 temp___362 temp___363 temp___364
                    temp___365 temp___366 temp___367 temp___368 temp___369
                    temp___370 temp___371 temp___372 temp___373 temp___374
                    temp___375 temp___376)))
  (forall ((temp___377 Int))
  (ite (= temp___377 temp___375)
  (= (select temp___355 temp___377) temp___376)
  (ite (= temp___377 temp___373)
  (= (select temp___355 temp___377) temp___374)
  (ite (= temp___377 temp___371)
  (= (select temp___355 temp___377) temp___372)
  (ite (= temp___377 temp___369)
  (= (select temp___355 temp___377) temp___370)
  (ite (= temp___377 temp___367)
  (= (select temp___355 temp___377) temp___368)
  (ite (= temp___377 temp___365)
  (= (select temp___355 temp___377) temp___366)
  (ite (= temp___377 temp___363)
  (= (select temp___355 temp___377) temp___364)
  (ite (= temp___377 temp___361)
  (= (select temp___355 temp___377) temp___362)
  (ite (= temp___377 temp___359)
  (= (select temp___355 temp___377) temp___360)
  (ite (= temp___377 temp___357)
  (= (select temp___355 temp___377) temp___358)
  (= (select temp___355 temp___377) (select temp___356 temp___377))))))))))))))))))

(declare-fun temp___390 (us_rep3 us_rep3 us_rep3 us_rep3 us_rep3 us_rep3
  us_rep3 us_rep3 us_rep3 us_rep3) (Array Int us_rep3))

;; def_axiom
  (assert
  (forall ((temp___392 us_rep3) (temp___393 us_rep3) (temp___394 us_rep3)
  (temp___395 us_rep3) (temp___396 us_rep3) (temp___397 us_rep3)
  (temp___398 us_rep3) (temp___399 us_rep3) (temp___400 us_rep3)
  (temp___401 us_rep3))
  (let ((temp___391 (temp___390 temp___392 temp___393 temp___394 temp___395
                    temp___396 temp___397 temp___398 temp___399 temp___400
                    temp___401)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (select temp___391 0) temp___392)
  (= (select temp___391 1) temp___393)) (= (select temp___391 2) temp___394))
  (= (select temp___391 3) temp___395)) (= (select temp___391 4) temp___396))
  (= (select temp___391 5) temp___397)) (= (select temp___391 6) temp___398))
  (= (select temp___391 7) temp___399)) (= (select temp___391 8) temp___400))
  (= (select temp___391 9) temp___401)))))

(define-fun dynamic_invariant3 ((temp___expr_63 Int) (temp___is_init_60 Bool)
  (temp___skip_constant_61 Bool)
  (temp___do_toplevel_62 Bool)) Bool (=>
                                     (or (= temp___is_init_60 true)
                                     (<= 0 255)) (in_range3 temp___expr_63)))

(define-fun dynamic_invariant4 ((temp___expr_222 Int)
  (temp___is_init_219 Bool) (temp___skip_constant_220 Bool)
  (temp___do_toplevel_221 Bool)) Bool (=>
                                      (or (= temp___is_init_219 true)
                                      (<= 0 250)) (in_range5
                                      temp___expr_222)))

(define-fun dynamic_invariant5 ((temp___expr_228 Int)
  (temp___is_init_225 Bool) (temp___skip_constant_226 Bool)
  (temp___do_toplevel_227 Bool)) Bool (=>
                                      (or (= temp___is_init_225 true)
                                      (<= 1 250)) (in_range6
                                      temp___expr_228)))

(declare-fun p__split_fields () pupilnumbers)

(declare-fun p__split_fields1 () (Array Int us_rep1))

(declare-fun success () Bool)

(declare-fun subject_scores () (Array Int us_rep3))

(declare-fun i () Int)

(declare-fun o () percentage)

(declare-fun o1 () subject)

(declare-fun o2 () subject)

(declare-fun o3 () percentage)

(declare-fun o4 () percentage)

(declare-fun o5 () subject)

(declare-fun o6 () subject)

(declare-fun o7 () percentage)

(declare-fun o8 () percentage)

(declare-fun o9 () subject)

(declare-fun o10 () subject)

(declare-fun o11 () percentage)

(declare-fun o12 () percentage)

(declare-fun o13 () subject)

(declare-fun o14 () subject)

(declare-fun o15 () percentage)

(declare-fun o16 () percentage)

(declare-fun o17 () subject)

(declare-fun o18 () subject)

(declare-fun o19 () percentage)

(declare-fun o20 () percentage)

(declare-fun o21 () subject)

(declare-fun o22 () subject)

(declare-fun o23 () percentage)

(declare-fun o24 () percentage)

(declare-fun o25 () subject)

(declare-fun o26 () subject)

(declare-fun o27 () percentage)

(declare-fun o28 () percentage)

(declare-fun o29 () subject)

(declare-fun o30 () subject)

(declare-fun o31 () percentage)

(declare-fun o32 () percentage)

(declare-fun o33 () subject)

(declare-fun o34 () subject)

(declare-fun o35 () percentage)

(declare-fun o36 () percentage)

(declare-fun o37 () subject)

(declare-fun o38 () subject)

(declare-fun o39 () percentage)

(declare-fun o40 () subject)

(declare-fun o41 () percentage)

(declare-fun o42 () subject)

(declare-fun o43 () percentage)

(declare-fun o44 () subject)

(declare-fun o45 () percentage)

(declare-fun o46 () us_rep3)

(declare-fun o47 () us_rep3)

(declare-fun o48 () us_rep3)

(declare-fun o49 () us_rep3)

(declare-fun o50 () us_rep3)

(declare-fun o51 () us_rep3)

(declare-fun o52 () us_rep3)

(declare-fun o53 () (Array Int us_rep3))

(declare-fun temp___420 () Bool)

(declare-fun temp___417 () us_rep2)

(declare-fun o54 () Int)

(declare-fun o55 () us_rep1)

(declare-fun o56 () us_split_fields2)

(declare-fun temp___405 () (Array Int us_rep))

(declare-fun o57 () us_rep)

(declare-fun o58 () us_split_fields)

(declare-fun o59 () Bool)

(declare-fun o60 () Bool)

(declare-fun o61 () percentage)

(declare-fun o62 () us_split_fields)

(declare-fun o63 () us_rep)

(declare-fun o64 () (Array Int us_rep))

(declare-fun o65 () us_split_fields2)

(declare-fun o66 () us_rep1)

(declare-fun o67 () Int)

(declare-fun o68 () (Array Int us_rep1))

(declare-fun o69 () us_split_fields4)

(declare-fun temp___416 () us_rep2)

(declare-fun p__split_fields2 () us_split_fields4)

(declare-fun success1 () Bool)

(declare-fun result () map__ref4)

(declare-fun subject_scores1 () (Array Int us_rep3))

(declare-fun result1 () int__ref)

(declare-fun i1 () Int)

(declare-fun p__split_fields3 () us_split_fields4)

(declare-fun success2 () Bool)

(declare-fun i2 () Int)

(declare-fun result2 () bool__ref)

(declare-fun success3 () Bool)

(declare-fun result3 () us_split_fields__ref2)

(declare-fun p__split_fields4 () us_split_fields4)

(declare-fun p__split_fields5 () us_split_fields__ref2)

(declare-fun p__split_fields6 () us_split_fields4)

(declare-fun p__split_fields7 () us_split_fields__ref2)

(declare-fun success4 () bool__ref)

(declare-fun i3 () int__ref)

(declare-fun p__split_fields8 () us_split_fields4)

(declare-fun success5 () Bool)

(declare-fun i4 () Int)

(declare-fun p__split_fields9 () us_split_fields__ref2)

(declare-fun success6 () bool__ref)

(declare-fun i5 () int__ref)

(declare-fun p__split_fields10 () us_split_fields4)

(declare-fun success7 () Bool)

(declare-fun i6 () Int)

;; H
  (assert (in_range4 fm))

;; H
  (assert (in_range2 subj0))

;; H
  (assert (in_range1 score0))

;; H
  (assert (in_range2 subj1))

;; H
  (assert (in_range1 score1))

;; H
  (assert (in_range2 subj2))

;; H
  (assert (in_range1 score2))

;; H
  (assert (in_range2 subj3))

;; H
  (assert (in_range1 score3))

;; H
  (assert (in_range2 subj4))

;; H
  (assert (in_range1 score4))

;; H
  (assert (in_range2 subj5))

;; H
  (assert (in_range1 score5))

;; H
  (assert (in_range2 subj6))

;; H
  (assert (in_range1 score6))

;; H
  (assert (in_range2 subj7))

;; H
  (assert (in_range1 score7))

;; H
  (assert (in_range2 subj8))

;; H
  (assert (in_range1 score8))

;; H
  (assert (in_range2 subj9))

;; H
  (assert (in_range1 score9))

;; H
  (assert (and (< (to_rep4 p__split_fields) 250) (not (= fm 8))))

;; H
  (assert (= (to_rep o36) score9))

;; H
  (assert (= (to_rep1 o37) subj9))

;; H
  (assert (= o37 o38))

;; H
  (assert (= o36 o39))

;; H
  (assert (= o40 o38))

;; H
  (assert (= o41 o39))

;; H
  (assert (= (to_rep o32) score8))

;; H
  (assert (= (to_rep1 o33) subj8))

;; H
  (assert (= o33 o34))

;; H
  (assert (= o32 o35))

;; H
  (assert (= o42 o34))

;; H
  (assert (= o43 o35))

;; H
  (assert (= (to_rep o28) score7))

;; H
  (assert (= (to_rep1 o29) subj7))

;; H
  (assert (= o29 o30))

;; H
  (assert (= o28 o31))

;; H
  (assert (= o44 o30))

;; H
  (assert (= o45 o31))

;; H
  (assert (= (to_rep o24) score6))

;; H
  (assert (= (to_rep1 o25) subj6))

;; H
  (assert (= o25 o26))

;; H
  (assert (= o24 o27))

;; H
  (assert (= o46 (mk___rep3 (mk___split_fields3 o26 o27))))

;; H
  (assert (= (to_rep o20) score5))

;; H
  (assert (= (to_rep1 o21) subj5))

;; H
  (assert (= o21 o22))

;; H
  (assert (= o20 o23))

;; H
  (assert (= o47 (mk___rep3 (mk___split_fields3 o22 o23))))

;; H
  (assert (= (to_rep o16) score4))

;; H
  (assert (= (to_rep1 o17) subj4))

;; H
  (assert (= o17 o18))

;; H
  (assert (= o16 o19))

;; H
  (assert (= o48 (mk___rep3 (mk___split_fields3 o18 o19))))

;; H
  (assert (= (to_rep o12) score3))

;; H
  (assert (= (to_rep1 o13) subj3))

;; H
  (assert (= o13 o14))

;; H
  (assert (= o12 o15))

;; H
  (assert (= o49 (mk___rep3 (mk___split_fields3 o14 o15))))

;; H
  (assert (= (to_rep o8) score2))

;; H
  (assert (= (to_rep1 o9) subj2))

;; H
  (assert (= o9 o10))

;; H
  (assert (= o8 o11))

;; H
  (assert (= o50 (mk___rep3 (mk___split_fields3 o10 o11))))

;; H
  (assert (= (to_rep o4) score1))

;; H
  (assert (= (to_rep1 o5) subj1))

;; H
  (assert (= o5 o6))

;; H
  (assert (= o4 o7))

;; H
  (assert (= o51 (mk___rep3 (mk___split_fields3 o6 o7))))

;; H
  (assert (= (to_rep o) score0))

;; H
  (assert (= (to_rep1 o1) subj0))

;; H
  (assert (= o1 o2))

;; H
  (assert (= o o3))

;; H
  (assert (= o52 (mk___rep3 (mk___split_fields3 o2 o3))))

;; H
  (assert
  (= o53 (temp___390 o52 o51 o50 o49 o48 o47 o46
         (mk___rep3 (mk___split_fields3 o44 o45))
         (mk___rep3 (mk___split_fields3 o42 o43))
         (mk___rep3 (mk___split_fields3 o40 o41)))))

;; H
  (assert (= result (mk_map__ref4 subject_scores)))

;; H
  (assert (= subject_scores1 o53))

;; H
  (assert (= result1 (mk_int__ref i)))

;; H
  (assert (= i1 0))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= temp___420 success)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9))
  (= temp___417 (mk___rep2
                (mk___split_fields2 p__split_fields p__split_fields1)))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9))
  (and
  (and
  (= (rec__pupils__pupildata__numberofpupils p__split_fields3) (rec__pupils__pupildata__numberofpupils
                                                               (us_split_fields5
                                                               temp___417)))
  (forall ((temp___418 Int))
  (=> (and (<= 1 temp___418) (<= temp___418 250))
  (and
  (and
  (and
  (= (rec__pupils__pupiltype__surname
     (us_split_fields3
     (select (rec__pupils__pupildata__pupilentries p__split_fields3) temp___418))) 
  (rec__pupils__pupiltype__surname
  (us_split_fields3
  (select (rec__pupils__pupildata__pupilentries
          (us_split_fields5 temp___417)) temp___418))))
  (= (rec__pupils__pupiltype__forename
     (us_split_fields3
     (select (rec__pupils__pupildata__pupilentries p__split_fields3) temp___418))) 
  (rec__pupils__pupiltype__forename
  (us_split_fields3
  (select (rec__pupils__pupildata__pupilentries
          (us_split_fields5 temp___417)) temp___418)))))
  (= (rec__pupils__pupiltype__form
     (us_split_fields3
     (select (rec__pupils__pupildata__pupilentries p__split_fields3) temp___418))) 
  (rec__pupils__pupiltype__form
  (us_split_fields3
  (select (rec__pupils__pupildata__pupilentries
          (us_split_fields5 temp___417)) temp___418)))))
  (forall ((temp___419 Int))
  (=> (and (<= 0 temp___419) (<= temp___419 18))
  (= (rec__pupils__participation__studying
     (us_split_fields1
     (select (rec__pupils__pupiltype__scores
             (us_split_fields3
             (select (rec__pupils__pupildata__pupilentries p__split_fields3) temp___418))) temp___419))) 
  (rec__pupils__participation__studying
  (us_split_fields1
  (select (rec__pupils__pupiltype__scores
          (us_split_fields3
          (select (rec__pupils__pupildata__pupilentries
                  (us_split_fields5 temp___417)) temp___418))) temp___419))))))))))
  (and (<= 0 i2) (<= i2 9)))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9))
  (and
  (<= 1 (+ (to_rep4
           (rec__pupils__pupildata__numberofpupils p__split_fields3)) 1))
  (<= (+ (to_rep4 (rec__pupils__pupildata__numberofpupils p__split_fields3)) 1) 250))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9))
  (= o54 (+ (to_rep4
            (rec__pupils__pupildata__numberofpupils p__split_fields3)) 1))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9))
  (= o55 (select (rec__pupils__pupildata__pupilentries p__split_fields3) 
  o54))))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= o56 (us_split_fields3 o55))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9))
  (= temp___405 (rec__pupils__pupiltype__scores o56))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9))
  (= o57 (select temp___405 (to_rep1
                            (rec__pupils__subject_score_pair__subj
                            (us_split_fields7 (select subject_scores1 i2))))))))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= o58 (us_split_fields1 o57))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9))
  (= o59 (rec__pupils__participation__studying o58))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9)) (= o60 (ite (not (= o59 true)) true false))))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= result2 (mk_bool__ref success2))))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= success3 o60)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9))
  (or
  (and
  (and (= p__split_fields5 (mk___split_fields__ref2 p__split_fields3))
  (= p__split_fields6 p__split_fields3)) (not (= success3 true)))
  (and (= success3 true)
  (and
  (and (= p__split_fields5 (mk___split_fields__ref2 p__split_fields4))
  (= p__split_fields6 p__split_fields4))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (to_rep o61) (to_rep
                  (rec__pupils__subject_score_pair__score
                  (us_split_fields7 (select subject_scores1 i2)))))
  (= o62 (mk___split_fields
         (rec__pupils__participation__studying
         (us_split_fields1
         (select (rec__pupils__pupiltype__scores
                 (us_split_fields3
                 (select (rec__pupils__pupildata__pupilentries
                         p__split_fields3) (+ (to_rep4
                                              (rec__pupils__pupildata__numberofpupils
                                              p__split_fields3)) 1)))) 
         (to_rep1
         (rec__pupils__subject_score_pair__subj
         (us_split_fields7 (select subject_scores1 i2))))))) o61)))
  (= o63 (mk___rep o62)))
  (= o64 (store (rec__pupils__pupiltype__scores
                (us_split_fields3
                (select (rec__pupils__pupildata__pupilentries
                        p__split_fields3) (+ (to_rep4
                                             (rec__pupils__pupildata__numberofpupils
                                             p__split_fields3)) 1)))) 
  (to_rep1
  (rec__pupils__subject_score_pair__subj
  (us_split_fields7 (select subject_scores1 i2)))) o63)))
  (= o65 (mk___split_fields1
         (rec__pupils__pupiltype__surname
         (us_split_fields3
         (select (rec__pupils__pupildata__pupilentries p__split_fields3) (+ 
         (to_rep4 (rec__pupils__pupildata__numberofpupils p__split_fields3)) 1))))
         (rec__pupils__pupiltype__forename
         (us_split_fields3
         (select (rec__pupils__pupildata__pupilentries p__split_fields3) (+ 
         (to_rep4 (rec__pupils__pupildata__numberofpupils p__split_fields3)) 1))))
         (rec__pupils__pupiltype__form
         (us_split_fields3
         (select (rec__pupils__pupildata__pupilentries p__split_fields3) (+ 
         (to_rep4 (rec__pupils__pupildata__numberofpupils p__split_fields3)) 1))))
         o64)))
  (= o66 (mk___rep1 o65)))
  (and
  (and
  (and
  (<= 1 (+ (to_rep4
           (rec__pupils__pupildata__numberofpupils p__split_fields3)) 1))
  (<= (+ (to_rep4 (rec__pupils__pupildata__numberofpupils p__split_fields3)) 1) 250))
  (= o67 (+ (to_rep4
            (rec__pupils__pupildata__numberofpupils p__split_fields3)) 1)))
  (= o68 (store (rec__pupils__pupildata__pupilentries p__split_fields3) 
  o67 o66))))
  (= o69 (mk___split_fields2
         (rec__pupils__pupildata__numberofpupils p__split_fields3) o68)))
  (= temp___416 (mk___rep2 o69)))
  (and (= result3 (mk___split_fields__ref2 p__split_fields3))
  (= p__split_fields4 (us_split_fields5 temp___416)))) (= i2 9)))))))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= i3 (mk_int__ref i2))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9)) (= success4 (mk_bool__ref success3))))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9)) (= p__split_fields7 p__split_fields5)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= i4 i2)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= success5 success3)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9)) (= p__split_fields8 p__split_fields6)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= i5 i3)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= success6 success4)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9)) (= p__split_fields9 p__split_fields7)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= i6 i4)))

;; H
  (assert (=> (and (<= 0 i1) (<= i1 9)) (= success7 success5)))

;; H
  (assert
  (=> (and (<= 0 i1) (<= i1 9)) (= p__split_fields10 p__split_fields8)))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 9))) (= i5 (mk_int__ref i1))))

;; H
  (assert
  (=> (not (and (<= 0 i1) (<= i1 9))) (= success6 (mk_bool__ref success))))

;; H
  (assert
  (=> (not (and (<= 0 i1) (<= i1 9)))
  (= p__split_fields9 (mk___split_fields__ref2
                      (mk___split_fields2 p__split_fields p__split_fields1)))))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 9))) (= i6 i1)))

;; H
  (assert (=> (not (and (<= 0 i1) (<= i1 9))) (= success7 success1)))

;; H
  (assert
  (=> (not (and (<= 0 i1) (<= i1 9))) (= p__split_fields10 p__split_fields2)))

;; H
  (assert (= (bool__content success6) true))

(assert
;; WP_parameter_def
 ;; File "pupils.ads", line 74, characters 0-0
  (not (in_range5
  (+ (to_rep4
     (rec__pupils__pupildata__numberofpupils
     (us_split_fields__content2 p__split_fields9))) 1))))
(check-sat)
