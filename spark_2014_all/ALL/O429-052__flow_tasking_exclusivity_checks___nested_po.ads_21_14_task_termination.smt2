;; produced by cvc4_16.drv ;;
(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes ((tuple0 0)) (((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0)) (((mk_int__ref (int__content Int)))))
(declare-datatypes ((bool__ref 0)) (((mk_bool__ref (bool__content Bool)))))
(declare-datatypes ((real__ref 0)) (((mk_real__ref (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(declare-sort priority 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 97)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (priority priority) Bool)

(declare-const dummy priority)

(declare-datatypes ((priority__ref 0))
(((mk_priority__ref (priority__content priority)))))
(define-fun priority__ref___projection ((a priority__ref)) priority (priority__content
                                                                    a))

(declare-sort pt 0)

(declare-fun user_eq1 (pt pt) Bool)

(declare-const value__size Int)

(declare-fun object__size (pt) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment (pt) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a pt)) (<= 0 (object__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a pt)) (<= 0 (object__alignment a))))

(declare-datatypes ((pt__ref 0)) (((mk_pt__ref (pt__content pt)))))
(define-fun pt__ref___projection ((a pt__ref)) pt (pt__content a))

(declare-datatypes ((us_split_fields 0))
(((mk___split_fields (rec__nested_po__inner__po pt)))))
(define-fun us_split_fields_PO__projection ((a us_split_fields)) pt (rec__nested_po__inner__po
                                                                    a))

(declare-datatypes ((us_split_fields__ref 0))
(((mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1
                                                             a))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const nested_po__inner__po__first__bit Int)

(declare-const nested_po__inner__po__last__bit Int)

(declare-const nested_po__inner__po__position Int)

;; nested_po__inner__po__first__bit_axiom
  (assert (<= 0 nested_po__inner__po__first__bit))

;; nested_po__inner__po__last__bit_axiom
  (assert
  (< nested_po__inner__po__first__bit nested_po__inner__po__last__bit))

;; nested_po__inner__po__position_axiom
  (assert (<= 0 nested_po__inner__po__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((inner__ref 0))
(((mk_inner__ref (inner__content us_rep)))))
(define-fun inner__ref___projection ((a inner__ref)) us_rep (inner__content
                                                            a))

(declare-datatypes ((us_split_fields2 0))
(((mk___split_fields1 (rec__nested_po__outer__inner_rec us_rep)))))
(define-fun us_split_fields_Inner_Rec__projection ((a us_split_fields2)) us_rep
  (rec__nested_po__outer__inner_rec a))

(declare-datatypes ((us_split_fields__ref1 0))
(((mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const nested_po__outer__inner_rec__first__bit Int)

(declare-const nested_po__outer__inner_rec__last__bit Int)

(declare-const nested_po__outer__inner_rec__position Int)

;; nested_po__outer__inner_rec__first__bit_axiom
  (assert (<= 0 nested_po__outer__inner_rec__first__bit))

;; nested_po__outer__inner_rec__last__bit_axiom
  (assert
  (< nested_po__outer__inner_rec__first__bit nested_po__outer__inner_rec__last__bit))

;; nested_po__outer__inner_rec__position_axiom
  (assert (<= 0 nested_po__outer__inner_rec__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((outer__ref 0))
(((mk_outer__ref (outer__content us_rep1)))))
(define-fun outer__ref___projection ((a outer__ref)) us_rep1 (outer__content
                                                             a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_159 Int)
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)) Bool (=>
                                      (or (= temp___is_init_156 true)
                                      (<= 0 97)) (in_range temp___expr_159)))

(declare-const o pt)

(declare-const o1 pt)

(declare-const o2 pt)

(declare-const o3 pt)

(declare-const o4 pt)

(declare-const us_self__compl pt)

(declare-const outer_rec__split_fields pt)

(declare-const us_self__compl1 pt)

(declare-const result pt)

(declare-const outer_rec__split_fields1 us_split_fields2)

(assert
;; WP_parameter_def
 ;; File "nested_po.adb", line 4, characters 0-0
  (not
  (not
  (and
  (and
  (and
  (and (and (and (= o outer_rec__split_fields) (= o o1)) (= o1 o2))
  (= o2 o3)) (= o4 o3)) (= o4 us_self__compl))
  (and (= result outer_rec__split_fields)
  (= outer_rec__split_fields1 (mk___split_fields1
                              (mk___rep (mk___split_fields us_self__compl1)))))))))
(check-sat)
(exit)
