;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :source |VC generated by SPARK 2014|)
(set-info :smt-lib-version 2.5)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes ()
((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private
  (us_private__content a))

(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))

(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool)
  (temp___skip_constant_13 Bool)
  (temp___do_toplevel_14 Bool)) Bool (=>
                                     (or (= temp___is_init_12 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_15)))

(declare-sort length_t 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (length_t length_t) Bool)

(declare-const dummy1 length_t)

(declare-datatypes ()
((length_t__ref (mk_length_t__ref (length_t__content length_t)))))
(define-fun length_t__ref___projection ((a length_t__ref)) length_t (length_t__content
                                                                    a))

(declare-fun to_rep (length_t) Int)

(declare-fun of_rep (Int) length_t)

;; inversion_axiom
  (assert
  (forall ((x length_t))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x length_t)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun to_rep1 (integer) Int)

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select
  (slide a old_first new_first) i)) ))))))

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_132 Int))
                           (=>
                           (and (<= a__first temp___idx_132)
                           (<= temp___idx_132 a__last))
                           (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_132)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_132 Int))
  (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last))
  (= (to_rep1 (select a temp___idx_132)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_132)))))))))))

(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int
  Int) Int)

;; compare_def_eq
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (= (compare a a_first a_last b b_first b_last) 0)
     (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_lt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< (compare a a_first a_last b b_first b_last) 0)
     (exists ((i Int) (j Int))
     (and (<= i a_last)
     (and (< j b_last)
     (and (= (bool_eq a a_first i b b_first j) true)
     (or (= i a_last)
     (and (< i a_last)
     (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

;; compare_def_gt
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (! (= (< 0 (compare a a_first a_last b b_first b_last))
     (exists ((i Int) (j Int))
     (and (<= i b_last)
     (and (< j a_last)
     (and (= (bool_eq a a_first j b b_first i) true)
     (or (= i b_last)
     (and (< i b_last)
     (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern (
  (compare a a_first a_last b b_first b_last)) ))))

(declare-const dummy2 (Array Int integer))

(declare-const value__size Int)

(declare-fun object__size ((Array Int integer)) Int)

(declare-const value__component__size Int)

(declare-fun object__component__size ((Array Int integer)) Int)

(declare-const value__alignment Int)

(declare-fun object__alignment ((Array Int integer)) Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))

;; value__component__size_axiom
  (assert (<= 0 value__component__size))

;; object__component__size_axiom
  (assert
  (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment))

;; object__alignment_axiom
  (assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))

(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((us_split_fields
 (mk___split_fields
 (rec__stack__t__len length_t)(rec__stack__t__elements (Array Int integer))))))
(define-fun us_split_fields_Len__projection ((a us_split_fields)) length_t
  (rec__stack__t__len a))

(define-fun us_split_fields_Elements__projection ((a us_split_fields)) (Array Int integer)
  (rec__stack__t__elements a))

(declare-datatypes ()
((us_split_fields__ref
 (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1
                                                                a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep (rec__stack__t__len (us_split_fields1 a)))
                        (to_rep (rec__stack__t__len (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__stack__t__elements (us_split_fields1 a)) 1
                           100 (rec__stack__t__elements (us_split_fields1 b))
                           1 100) true))
                   true false))

(declare-const value__size1 Int)

(declare-fun object__size1 (us_rep) Int)

(declare-const value__alignment1 Int)

(declare-fun object__alignment1 (us_rep) Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__size1 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment1))

;; object__alignment_axiom
  (assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))

(declare-const stack__t__len__first__bit Int)

(declare-const stack__t__len__last__bit Int)

(declare-const stack__t__len__position Int)

;; stack__t__len__first__bit_axiom
  (assert (<= 0 stack__t__len__first__bit))

;; stack__t__len__last__bit_axiom
  (assert (< stack__t__len__first__bit stack__t__len__last__bit))

;; stack__t__len__position_axiom
  (assert (<= 0 stack__t__len__position))

(declare-const stack__t__elements__first__bit Int)

(declare-const stack__t__elements__last__bit Int)

(declare-const stack__t__elements__position Int)

;; stack__t__elements__first__bit_axiom
  (assert (<= 0 stack__t__elements__first__bit))

;; stack__t__elements__last__bit_axiom
  (assert (< stack__t__elements__first__bit stack__t__elements__last__bit))

;; stack__t__elements__position_axiom
  (assert (<= 0 stack__t__elements__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes () ((t__ref (mk_t__ref (t__content us_rep)))))
(define-fun t__ref___2__projection ((a t__ref)) us_rep (t__content a))

(declare-fun get_length (us_rep) Int)

(declare-fun get_length__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant1 ((temp___expr_155 Int)
  (temp___is_init_152 Bool) (temp___skip_constant_153 Bool)
  (temp___do_toplevel_154 Bool)) Bool (=>
                                      (or (= temp___is_init_152 true)
                                      (<= 0 100)) (in_range2
                                      temp___expr_155)))

;; get_length__post_axiom
  (assert
  (forall ((the_stack us_rep)) (! (dynamic_invariant1 (get_length the_stack)
  true false true) :pattern ((get_length the_stack)) )))

(declare-fun create_stack (tuple0) us_rep)

(declare-fun create_stack__function_guard (us_rep tuple0) Bool)

;; create_stack__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (get_length (create_stack us_void_param)) 0) :pattern ((create_stack
                                                               us_void_param)) )))

(declare-fun top (us_rep) Int)

(declare-fun top__function_guard (Int us_rep) Bool)

;; top__post_axiom
  (assert
  (forall ((the_stack us_rep))
  (! (=> (< 0 (get_length the_stack)) (dynamic_invariant (top the_stack) true
     false true)) :pattern ((top the_stack)) )))

(declare-datatypes ()
((us_split_fields2
 (mk___split_fields1
 (rec__private_a__optional_stack__exists Bool)(rec__private_a__optional_stack__the_stack us_rep)))))
(define-fun us_split_fields_Exists__projection ((a us_split_fields2)) Bool
  (rec__private_a__optional_stack__exists a))

(define-fun us_split_fields_The_Stack__projection ((a us_split_fields2)) us_rep
  (rec__private_a__optional_stack__the_stack a))

(declare-datatypes ()
((us_split_fields__ref1
 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3
                                                                  a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (rec__private_a__optional_stack__exists
                            (us_split_fields3 a)) (rec__private_a__optional_stack__exists
                                                  (us_split_fields3 b)))
                         (= (bool_eq1
                            (rec__private_a__optional_stack__the_stack
                            (us_split_fields3 a))
                            (rec__private_a__optional_stack__the_stack
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-fun object__size2 (us_rep1) Int)

(declare-const value__alignment2 Int)

(declare-fun object__alignment2 (us_rep1) Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))

;; value__alignment_axiom
  (assert (<= 0 value__alignment2))

;; object__alignment_axiom
  (assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))

(declare-const private_a__optional_stack__exists__first__bit Int)

(declare-const private_a__optional_stack__exists__last__bit Int)

(declare-const private_a__optional_stack__exists__position Int)

;; private_a__optional_stack__exists__first__bit_axiom
  (assert (<= 0 private_a__optional_stack__exists__first__bit))

;; private_a__optional_stack__exists__last__bit_axiom
  (assert
  (< private_a__optional_stack__exists__first__bit private_a__optional_stack__exists__last__bit))

;; private_a__optional_stack__exists__position_axiom
  (assert (<= 0 private_a__optional_stack__exists__position))

(declare-const private_a__optional_stack__the_stack__first__bit Int)

(declare-const private_a__optional_stack__the_stack__last__bit Int)

(declare-const private_a__optional_stack__the_stack__position Int)

;; private_a__optional_stack__the_stack__first__bit_axiom
  (assert (<= 0 private_a__optional_stack__the_stack__first__bit))

;; private_a__optional_stack__the_stack__last__bit_axiom
  (assert
  (< private_a__optional_stack__the_stack__first__bit private_a__optional_stack__the_stack__last__bit))

;; private_a__optional_stack__the_stack__position_axiom
  (assert (<= 0 private_a__optional_stack__the_stack__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ()
((optional_stack__ref
 (mk_optional_stack__ref (optional_stack__content us_rep1)))))
(define-fun optional_stack__ref___projection ((a optional_stack__ref)) us_rep1
  (optional_stack__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const n Int)

(declare-const s__split_fields Bool)

(declare-const s__split_fields1 length_t)

(declare-const s__split_fields2 (Array Int integer))

(declare-const o length_t)

(declare-const o1 (Array Int integer))

(declare-const o2 Bool)

(declare-const o3 length_t)

(declare-const o4 (Array Int integer))

(declare-const temp___241 Bool)

(declare-const temp___2411 length_t)

(declare-const temp___2412 (Array Int integer))

(declare-const result Bool)

(declare-const result1 length_t)

(declare-const result2 (Array Int integer))

(declare-const s__split_fields3 Bool)

(declare-const s__split_fields4 length_t)

(declare-const s__split_fields5 (Array Int integer))

(define-fun o5 () us_rep (mk___rep (mk___split_fields o o1)))

;; H
  (assert (in_range1 n))

;; H
  (assert (and (= o5 (create_stack Tuple0)) (= (get_length o5) 0)))

;; H
  (assert (= (of_int 1) o2))

;; H
  (assert (= o3 o))

;; H
  (assert (= o4 o1))

;; H
  (assert (= temp___241 o2))

;; H
  (assert (= temp___2411 o3))

;; H
  (assert (= temp___2412 o4))

;; H
  (assert
  (= (mk___split_fields__ref1
     (mk___split_fields1 result
     (mk___rep (mk___split_fields result1 result2)))) (mk___split_fields__ref1
                                                      (mk___split_fields1
                                                      s__split_fields
                                                      (mk___rep
                                                      (mk___split_fields
                                                      s__split_fields1
                                                      s__split_fields2))))))

;; H
  (assert (= temp___241 s__split_fields3))

;; H
  (assert (= temp___2411 s__split_fields4))

;; H
  (assert (= temp___2412 s__split_fields5))

(assert
;; WP_parameter_def
 ;; File "private_a.adb", line 49, characters 0-0
  (not (= s__split_fields3 true)))
(check-sat)
(exit)
