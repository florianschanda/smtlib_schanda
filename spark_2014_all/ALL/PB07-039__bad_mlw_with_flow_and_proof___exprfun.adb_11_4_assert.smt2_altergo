(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t1

logic user_eq : t1, t1 -> bool

logic value__size : int

logic object__size : t1 -> int

logic value__alignment : int

logic object__alignment : t1 -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:t1. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom : (forall a:t1. (0 <= object__alignment(a)))

logic dummy : t1

type t1__ref = { t1__content : t1
}

function t1__ref___projection(a: t1__ref) : t1 = (a).t1__content

logic attr__ATTRIBUTE_ADDRESS : int

logic prim_func : t1 -> t1

logic prim_func__function_guard : t1, t1 -> prop

axiom prim_func__post_axiom : true

axiom prim_func__def_axiom :
  (forall exprfun__t1_var:t1 [prim_func(exprfun__t1_var)].
  (prim_func(exprfun__t1_var) = exprfun__t1_var))

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "exprfun.adb", line 5, characters 0-0 *)
goal WP_parameter_def :
  (forall t1_var:t1. forall x:t1. forall o:t1. forall result:t1.
  forall x1:t1. (not (((o = prim_func(t1_var)) and (o = t1_var)) and
  ((result = x) and (x1 = o)))))
