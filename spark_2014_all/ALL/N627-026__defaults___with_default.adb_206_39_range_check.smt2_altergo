(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic to_rep1 : positive -> int

logic of_rep1 : int -> positive

axiom inversion_axiom1 :
  (forall x:positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:positive [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = {
rec__with_default__bad_nested_defaults1__empty_rec__d : positive
}

function us_split_discrs_9__projection(a: us_split_discrs) : positive =
  (a).rec__with_default__bad_nested_defaults1__empty_rec__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref_9__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs; attr__constrained : bool
}

function us_rep_25__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep_26__projection(a: us_rep) : bool = (a).attr__constrained

logic bool_eq3 : us_rep, us_rep -> bool

axiom bool_eq_def2 :
  (forall a:us_rep. forall b:us_rep [bool_eq3(a, b)].
  (((to_rep1(((a).us_split_discrs1).rec__with_default__bad_nested_defaults1__empty_rec__d) = to_rep1(((b).us_split_discrs1).rec__with_default__bad_nested_defaults1__empty_rec__d)) ->
  (bool_eq3(a, b) = true)) and
  ((not (to_rep1(((a).us_split_discrs1).rec__with_default__bad_nested_defaults1__empty_rec__d) = to_rep1(((b).us_split_discrs1).rec__with_default__bad_nested_defaults1__empty_rec__d))) ->
  (bool_eq3(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:positive. forall a1:bool. (0 <= object__size({ us_split_discrs1 =
  { rec__with_default__bad_nested_defaults1__empty_rec__d = a };
  attr__constrained = a1 })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:positive. forall a1:bool. (0 <= object__alignment({
  us_split_discrs1 = {
  rec__with_default__bad_nested_defaults1__empty_rec__d = a };
  attr__constrained = a1 })))

logic with_default__bad_nested_defaults1__empty_rec__d__first__bit : int

logic with_default__bad_nested_defaults1__empty_rec__d__last__bit : int

logic with_default__bad_nested_defaults1__empty_rec__d__position : int

axiom with_default__bad_nested_defaults1__empty_rec__d__first__bit_axiom :
  (0 <= with_default__bad_nested_defaults1__empty_rec__d__first__bit)

axiom with_default__bad_nested_defaults1__empty_rec__d__last__bit_axiom :
  (with_default__bad_nested_defaults1__empty_rec__d__first__bit <  with_default__bad_nested_defaults1__empty_rec__d__last__bit)

axiom with_default__bad_nested_defaults1__empty_rec__d__position_axiom :
  (0 <= with_default__bad_nested_defaults1__empty_rec__d__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : positive

logic dummy3 : bool

type empty_rec__ref = { empty_rec__content : us_rep
}

function empty_rec__ref___projection(a: empty_rec__ref) : us_rep =
  (a).empty_rec__content

type us_split_fields = { rec__with_default__bad_nested_defaults1__non_init__e
: us_rep; rec__with_default__bad_nested_defaults1__non_init__f : natural
}

function us_split_fields_E__projection(a: us_split_fields) : us_rep =
  (a).rec__with_default__bad_nested_defaults1__non_init__e

function us_split_fields_F__projection(a: us_split_fields) : natural =
  (a).rec__with_default__bad_nested_defaults1__non_init__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref_11__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep_27__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq4 : us_rep1, us_rep1 -> bool

axiom bool_eq_def3 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq4(a, b)].
  ((((bool_eq3(((a).us_split_fields1).rec__with_default__bad_nested_defaults1__non_init__e,
  ((b).us_split_fields1).rec__with_default__bad_nested_defaults1__non_init__e) = true) and
  (to_rep(((a).us_split_fields1).rec__with_default__bad_nested_defaults1__non_init__f) = to_rep(((b).us_split_fields1).rec__with_default__bad_nested_defaults1__non_init__f))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((bool_eq3(((a).us_split_fields1).rec__with_default__bad_nested_defaults1__non_init__e,
  ((b).us_split_fields1).rec__with_default__bad_nested_defaults1__non_init__e) = true) and
  (to_rep(((a).us_split_fields1).rec__with_default__bad_nested_defaults1__non_init__f) = to_rep(((b).us_split_fields1).rec__with_default__bad_nested_defaults1__non_init__f)))) ->
  (bool_eq4(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:positive. forall a1:bool. forall a2:natural.
  (0 <= object__size1({ us_split_fields1 = {
  rec__with_default__bad_nested_defaults1__non_init__e = { us_split_discrs1 =
  { rec__with_default__bad_nested_defaults1__empty_rec__d = a };
  attr__constrained = a1 };
  rec__with_default__bad_nested_defaults1__non_init__f = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:positive. forall a1:bool. forall a2:natural.
  (0 <= object__alignment1({ us_split_fields1 = {
  rec__with_default__bad_nested_defaults1__non_init__e = { us_split_discrs1 =
  { rec__with_default__bad_nested_defaults1__empty_rec__d = a };
  attr__constrained = a1 };
  rec__with_default__bad_nested_defaults1__non_init__f = a2 } })))

logic with_default__bad_nested_defaults1__non_init__e__first__bit : int

logic with_default__bad_nested_defaults1__non_init__e__last__bit : int

logic with_default__bad_nested_defaults1__non_init__e__position : int

axiom with_default__bad_nested_defaults1__non_init__e__first__bit_axiom :
  (0 <= with_default__bad_nested_defaults1__non_init__e__first__bit)

axiom with_default__bad_nested_defaults1__non_init__e__last__bit_axiom :
  (with_default__bad_nested_defaults1__non_init__e__first__bit <  with_default__bad_nested_defaults1__non_init__e__last__bit)

axiom with_default__bad_nested_defaults1__non_init__e__position_axiom :
  (0 <= with_default__bad_nested_defaults1__non_init__e__position)

logic with_default__bad_nested_defaults1__non_init__f__first__bit : int

logic with_default__bad_nested_defaults1__non_init__f__last__bit : int

logic with_default__bad_nested_defaults1__non_init__f__position : int

axiom with_default__bad_nested_defaults1__non_init__f__first__bit_axiom :
  (0 <= with_default__bad_nested_defaults1__non_init__f__first__bit)

axiom with_default__bad_nested_defaults1__non_init__f__last__bit_axiom :
  (with_default__bad_nested_defaults1__non_init__f__first__bit <  with_default__bad_nested_defaults1__non_init__f__last__bit)

axiom with_default__bad_nested_defaults1__non_init__f__position_axiom :
  (0 <= with_default__bad_nested_defaults1__non_init__f__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy4 : positive

logic dummy5 : bool

logic dummy6 : natural

type non_init__ref = { non_init__content : us_rep1
}

function non_init__ref___projection(a: non_init__ref) : us_rep1 =
  (a).non_init__content

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "with_default.adb", line 107, characters 0-0 *)
goal WP_parameter_def : (in_range(c) -> in_range1(c))
