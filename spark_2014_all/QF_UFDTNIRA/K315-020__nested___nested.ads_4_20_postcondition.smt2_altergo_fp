(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic attr__ATTRIBUTE_ADDRESS : int

type t1b

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t1b, t1b -> bool

logic dummy1 : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref___projection(a: t1b__ref) : t1b = (a).t1b__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type t2b

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t2b, t2b -> bool

logic dummy2 : t2b

type t2b__ref = { t2b__content : t2b
}

function t2b__ref___projection(a: t2b__ref) : t2b = (a).t2b__content

logic attr__ATTRIBUTE_ADDRESS2 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall x:int. forall i:int. forall j:int.
  forall nested__search__result:int. forall temp___159:int.
  forall temp___158:int. forall temp___156:int. forall temp___157:int.
  forall temp___155:int. forall temp___154:int. forall o:int. forall j1:int.
  forall result:int. forall x1:int. forall result1:int. forall i1:int.
  forall x2:int. forall i2:int. forall j2:int. forall result2:int.
  forall x3:int. forall result3:int. forall j3:int. forall x4:int.
  forall j4:int. forall result4:int. forall x5:int. forall x6:int.
  forall j5:int. forall x7:int. forall j6:int. forall x8:int. forall j7:int.
  forall x9:int. forall j8:int. forall x10:int. forall j9:int.
  forall x11:int. forall j10:int. forall x12:int. forall i3:int.
  forall j11:int. forall x13:int. forall i4:int. forall j12:int.
  forall x14:int. forall i5:int. forall j13:int. forall x15:int.
  forall i6:int. forall j14:int. forall result5:int.
  forall nested__search__result1:int. forall nested__search__result2:int.
  forall nested__search__result3:int. forall x16:int. forall i7:int.
  forall j15:int. forall nested__search__result4:int. forall x17:int.
  forall i8:int. forall j16:int. forall nested__search__result5:int.
  (forall result6:int. (((((({ int__content = result } = { int__content = x
  }) and (x1 = 0)) and (in_range1(x1) and (((({ int__content = result1 } = {
  int__content = i }) and (i1 = 1)) and ((((1 <= i1) and (i1 <= 10)) and
  ((((temp___159 = i1) and ((temp___158 = x1) and ((x2 = ((i2 - 1) * 10)) and
  ((((((- 2147483648) <= 2147483647) -> in_range1(x2)) and ((1 <= 10) ->
  in_range2(i2))) and ((1 <= i2) and (i2 <= 10))) and (((x2 = result2) and
  (x3 = 0)) and (((((j4 = j9) and (x5 = x10)) and ((j10 = j4) and
  (x11 = x5))) and ((temp___156 = 1) and ((temp___157 = 10) and
  (((j2 = result3) and (j3 = temp___156)) and (((temp___156 <= j3) and
  (j3 <= temp___157)) and ((temp___155 = j3) and ((temp___154 = x3) and
  ((x4 = (i2 * (j4 - 1))) and ((((((- 2147483648) <= 2147483647) ->
  in_range1(x4)) and ((1 <= 10) -> in_range3(j4))) and ((1 <= j4) and
  (j4 <= 10))) and ((((o = (i2 * j4)) and in_range1((i2 * j4))) and
  ((x4 = result4) and (x5 = o))) and (45 <= x5))))))))))) or
  ((((j2 = result3) and (j3 = 1)) and ((((1 <= j3) and (j3 <= 10)) and
  ((((temp___155 = j3) and ((temp___154 = x3) and ((x4 = (i2 * (j4 - 1))) and
  ((((((- 2147483648) <= 2147483647) -> in_range1(x4)) and ((1 <= 10) ->
  in_range3(j4))) and ((1 <= j4) and (j4 <= 10))) and ((((o = (i2 * j4)) and
  in_range1((i2 * j4))) and ((x4 = result4) and (x5 = o))) and
  ((not (45 <= x5)) and (j4 = 10))))))) and (((j4 = j5) and (x5 = x6)) and
  ((j6 = j4) and (x7 = x5)))) and ((({ int__content = j7 } = { int__content =
  j5 }) and ({ int__content = x8 } = { int__content = x6 })) and
  ((j8 = j6) and (x9 = x7))))) or ((not ((1 <= j3) and (j3 <= 10))) and
  (((j3 = j7) and (x3 = x8)) and ((j8 = j3) and (x9 = x3)))))) and (((({
  int__content = j9 } = { int__content = j7 }) and ({ int__content = x10
  } = { int__content = x8 })) and ((j10 = j8) and (x11 = x9))) and
  (i2 = 10))))))))) and ((({ int__content = j11 } = { int__content = j9
  }) and ((i2 = i3) and ({ int__content = x12 } = { int__content = x10
  }))) and ((j12 = j10) and ((i4 = i2) and (x13 = x11))))) and ((({
  int__content = j13 } = { int__content = j11 }) and (({ int__content = i5
  } = { int__content = i3 }) and ({ int__content = x14 } = { int__content =
  x12 }))) and ((j14 = j12) and ((i6 = i4) and (x15 = x13)))))) or
  ((not ((1 <= i1) and (i1 <= 10))) and (((j = j13) and ((i1 = i5) and
  (x1 = x14))) and ((j14 = j1) and ((i6 = i1) and (x15 = x1))))))) and
  (((nested__search__result1 = nested__search__result2) and
  (nested__search__result3 = nested__search__result1)) and
  ((result5 = nested__search__result) and
  (nested__search__result1 = x14)))))) and ((({ int__content =
  nested__search__result4 } = { int__content = nested__search__result2 }) and
  ((j15 = j13) and ((i7 = i5) and (x16 = x14)))) and
  ((nested__search__result5 = nested__search__result3) and ((j16 = j14) and
  ((i8 = i6) and (x17 = x15)))))) and (result6 = nested__search__result4)) ->
  (44 <= nested__search__result4))))
