(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic res : int

logic math__sqrt__result : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic temp___134 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : bool

logic result : int

logic res1 : int

logic result1 : bool

logic res2 : int

logic result2 : int

logic res3 : int

logic result3 : bool

logic res4 : int

logic res5 : int

logic res6 : int

logic res7 : int

logic result4 : int

logic math__sqrt__result1 : int

logic math__sqrt__result2 : int

logic math__sqrt__result3 : int

logic res8 : int

logic math__sqrt__result4 : int

logic res9 : int

logic math__sqrt__result5 : int

logic result5 : int

axiom H : in_range1(x)

axiom H1 : (0 <= x)

axiom H2 : (result = res)

axiom H3 : (res1 = 0)

axiom H4 : in_range1(res1)

axiom H5 : ((o = (res1 + 1)) and in_range1((res1 + 1)))

axiom H6 : ((o1 = (res1 + 1)) and in_range1((res1 + 1)))

axiom H7 : (o2 = (o1 * o))

axiom H8 : ((o3 = o2) and in_range1(o2))

axiom H9 : (((o3 <= x) -> (result1 = true)) and ((not (o3 <= x)) ->
  (result1 = false)))

axiom H10 : ((result1 = true) -> (temp___134 = res1))

axiom H11 : ((result1 = true) -> ((((- 2147483648) <= 2147483647) ->
  in_range1(res2)) and (((res2 + 1) * (res2 + 1)) <= x)))

axiom H12 : ((result1 = true) -> ((o4 = (res2 + 1)) and
  in_range1((res2 + 1))))

axiom H13 : ((result1 = true) -> (res2 = result2))

axiom H14 : ((result1 = true) -> (res3 = o4))

axiom H15 : ((result1 = true) -> ((o5 = (res3 + 1)) and
  in_range1((res3 + 1))))

axiom H16 : ((result1 = true) -> ((o6 = (res3 + 1)) and
  in_range1((res3 + 1))))

axiom H17 : ((result1 = true) -> (o7 = (o6 * o5)))

axiom H18 : ((result1 = true) -> ((o8 = o7) and in_range1(o7)))

axiom H19 : ((result1 = true) -> (((o8 <= x) -> (o9 = true)) and
  ((not (o8 <= x)) -> (o9 = false))))

axiom H20 : ((result1 = true) -> (((not (o9 = true)) -> (result3 = true)) and
  ((o9 = true) -> (result3 = false))))

axiom H21 : ((result1 = true) -> (result3 = true))

axiom H22 : ((result1 = true) -> (res3 = res4))

axiom H23 : ((result1 = true) -> (res5 = res3))

axiom H24 : ((result1 = true) -> (res6 = res4))

axiom H25 : ((result1 = true) -> (res7 = res5))

axiom H26 : ((not (result1 = true)) -> (res1 = res6))

axiom H27 : ((not (result1 = true)) -> (res7 = res1))

axiom H28 : (math__sqrt__result1 = math__sqrt__result2)

axiom H29 : (math__sqrt__result3 = math__sqrt__result1)

axiom H30 : (result4 = math__sqrt__result)

axiom H31 : (math__sqrt__result1 = res6)

axiom H32 : (math__sqrt__result4 = math__sqrt__result2)

axiom H33 : (res8 = res6)

axiom H34 : (math__sqrt__result5 = math__sqrt__result3)

axiom H35 : (res9 = res7)

axiom H36 : ((bool_eq(x, 0) = true) -> (math__sqrt__result4 = 0))

axiom H37 : ((bool_gt(x, 0) = true) -> (0 <  math__sqrt__result4))

axiom H38 : (result5 = math__sqrt__result4)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (0 <= math__sqrt__result4)
