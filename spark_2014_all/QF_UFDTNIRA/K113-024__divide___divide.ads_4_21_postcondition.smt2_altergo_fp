(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic m : int

logic attr__ATTRIBUTE_ADDRESS : int

logic n : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic q : int

logic r : int

logic temp___133 : int

logic temp___132 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic result : int

logic q1 : int

logic result1 : int

logic r1 : int

logic q2 : int

logic r2 : int

logic result2 : bool

logic result3 : int

logic q3 : int

logic result4 : int

logic r3 : int

logic q4 : int

logic r4 : int

logic q5 : int

logic r5 : int

logic q6 : int

logic r6 : int

logic q7 : int

logic r7 : int

logic q8 : int

logic r8 : int

logic q9 : int

logic r9 : int

logic q10 : int

logic r10 : int

logic q11 : int

logic r11 : int

axiom H : in_range1(m)

axiom H1 : in_range1(n)

axiom H2 : (((- 2147483648) <= 2147483647) -> in_range1(q))

axiom H3 : (((- 2147483648) <= 2147483647) -> in_range1(r))

axiom H4 : ((0 <= m) and (0 <  n))

axiom H5 : (result = q)

axiom H6 : (q1 = 0)

axiom H7 : (result1 = r)

axiom H8 : (r1 = m)

axiom H9 : ((n <= r1) -> (((temp___133 = r1) and ((temp___132 = q1) and
  ((((q2 <= (m - r2)) and (m = ((q2 * n) + r2))) and (0 <= r2)) and
  ((((((- 2147483648) <= 2147483647) -> in_range1(q2)) and
  (((- 2147483648) <= 2147483647) -> in_range1(r2))) and (n <= r2)) and
  ((((o4 = (q2 + 1)) and in_range1((q2 + 1))) and ((q2 = result3) and
  (q3 = o4))) and ((((o5 = (r2 - n)) and in_range1((r2 - n))) and
  ((r2 = result4) and (r3 = o5))) and (not (n <= r3)))))))) and
  (((r3 = r6) and (q3 = q6)) and ((r7 = r3) and (q7 = q3)))))

axiom H10 : ((n <= r1) -> (r8 = r6))

axiom H11 : ((n <= r1) -> (q8 = q6))

axiom H12 : ((n <= r1) -> (r9 = r7))

axiom H13 : ((n <= r1) -> (q9 = q7))

axiom H14 : ((not (n <= r1)) -> (r1 = r8))

axiom H15 : ((not (n <= r1)) -> (q1 = q8))

axiom H16 : ((not (n <= r1)) -> (r9 = r1))

axiom H17 : ((not (n <= r1)) -> (q9 = q1))

axiom H18 : (r10 = r8)

axiom H19 : (q10 = q8)

axiom H20 : (r11 = r9)

axiom H21 : (q11 = q9)

 (* File "divide.ads", line 2, characters 0-0 *)
goal WP_parameter_def : (m = ((q10 * n) + r10))
