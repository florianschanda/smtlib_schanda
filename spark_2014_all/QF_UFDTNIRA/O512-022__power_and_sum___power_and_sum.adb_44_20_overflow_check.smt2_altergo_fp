(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic n : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic result__ : int

logic i : int

logic j : int

logic totalsum : int

logic innersum : int

logic temp___514 : int

logic temp___513 : int

logic temp___512 : int

logic temp___511 : int

logic temp___510 : int

logic temp___509 : int

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic result : int

logic i1 : int

logic result1 : int

logic j1 : int

logic result2 : int

logic totalsum1 : int

logic result3 : int

logic innersum1 : int

logic i2 : int

logic j2 : int

logic totalsum2 : int

logic innersum2 : int

logic result4 : int

logic innersum3 : int

logic result5 : int

logic j3 : int

logic j4 : int

logic innersum4 : int

logic result6 : int

logic innersum5 : int

logic result7 : int

logic j5 : int

logic j6 : int

logic innersum6 : int

logic j7 : int

logic innersum7 : int

logic j8 : int

logic innersum8 : int

logic j9 : int

logic innersum9 : int

logic j10 : int

logic innersum10 : int

logic j11 : int

logic innersum11 : int

logic result8 : int

logic totalsum3 : int

logic result9 : int

logic i3 : int

logic i4 : int

logic j12 : int

logic totalsum4 : int

logic innersum12 : int

logic i5 : int

logic j13 : int

logic totalsum5 : int

logic innersum13 : int

logic i6 : int

logic j14 : int

logic totalsum6 : int

logic innersum14 : int

logic i7 : int

logic j15 : int

logic totalsum7 : int

logic innersum15 : int

logic i8 : int

logic j16 : int

logic totalsum8 : int

logic innersum16 : int

logic i9 : int

logic j17 : int

logic totalsum9 : int

logic innersum17 : int

logic i10 : int

logic j18 : int

logic totalsum10 : int

logic innersum18 : int

logic i11 : int

logic j19 : int

logic totalsum11 : int

logic innersum19 : int

logic result10 : int

logic result__1 : int

logic result__2 : int

logic i12 : int

logic j20 : int

logic totalsum12 : int

logic innersum20 : int

logic result__3 : int

logic i13 : int

logic j21 : int

logic totalsum13 : int

logic innersum21 : int

axiom H : in_range3(n)

axiom H1 : ((1 <= 2147483647) -> in_range3(result__))

axiom H2 : (result = i)

axiom H3 : (i1 = 1)

axiom H4 : in_range3(i1)

axiom H5 : (result1 = j)

axiom H6 : (j1 = 1)

axiom H7 : in_range3(j1)

axiom H8 : (result2 = totalsum)

axiom H9 : (totalsum1 = 0)

axiom H10 : in_range2(totalsum1)

axiom H11 : (result3 = innersum)

axiom H12 : (innersum1 = 0)

axiom H13 : in_range2(innersum1)

axiom H14 : (i1 <= n)

axiom H15 : ((6 * totalsum2) = (((i2 - 1) * i2) * (i2 + 1)))

axiom H16 : ((((((0 <= 2147483647) -> in_range2(innersum2)) and
  ((1 <= 2147483647) -> in_range3(i2))) and ((1 <= 2147483647) ->
  in_range3(j2))) and ((0 <= 2147483647) -> in_range2(totalsum2))) and
  (i2 <= n))

axiom H17 : (innersum2 = result4)

axiom H18 : (innersum3 = 0)

axiom H19 : (j2 = result5)

axiom H20 : (j3 = 1)

axiom H21 : (j3 <= i2)

axiom H22 : ((2 * innersum4) = (j4 * (j4 - 1)))

axiom H23 : ((((0 <= 2147483647) -> in_range2(innersum4)) and
  ((1 <= 2147483647) -> in_range3(j4))) and (j4 <= i2))

axiom H24 : ((o = (innersum4 + j4)) and in_range1((innersum4 + j4)))

axiom H25 : (innersum4 = result6)

axiom H26 : (innersum5 = o)

 (* File "power_and_sum.ads", line 5, characters 0-0 *)
goal WP_parameter_def : in_range1((j4 + 1))
