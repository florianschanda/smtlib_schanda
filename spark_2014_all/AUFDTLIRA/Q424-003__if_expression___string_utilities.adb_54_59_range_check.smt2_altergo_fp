(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic is_subsequence : us_t, us_t -> bool

logic is_subsequence__function_guard : bool, us_t, us_t -> prop

logic head : us_t -> int

logic head__function_guard : int, us_t -> prop

logic tail : us_t -> us_t

logic tail__function_guard : us_t, us_t -> prop

logic temp___String_Literal_168 : unit -> (int,character) farray

axiom temp___String_Literal_168__def_axiom : true

logic temp___String_Literal_170 : unit -> (int,character) farray

axiom temp___String_Literal_170__def_axiom : true

logic slow_lcs_length : us_t, us_t -> int

logic slow_lcs_length__function_guard : int, us_t, us_t -> prop

logic temp___String_Literal_174 : unit -> (int,character) farray

axiom temp___String_Literal_174__def_axiom : true

logic temp___String_Literal_176 : unit -> (int,character) farray

axiom temp___String_Literal_176__def_axiom : true

logic s1 : (int,character) farray

logic s11 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic s2 : (int,character) farray

logic s21 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic first2 : int

logic last2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type s1_index__ref = { s1_index__content : integer
}

function s1_index__ref___projection(a: s1_index__ref) : integer =
  (a).s1_index__content

axiom first__def_axiom : (first2 = to_rep1(first(s11)))

axiom last__def_axiom : (last2 = to_rep1(last(s11)))

logic first3 : int

logic last3 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type s2_index__ref = { s2_index__content : integer
}

function s2_index__ref___projection(a: s2_index__ref) : integer =
  (a).s2_index__content

axiom first__def_axiom1 : (first3 = to_rep1(first(s21)))

axiom last__def_axiom1 : (last3 = to_rep1(last(s21)))

type tseq_lengthB

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : tseq_lengthB, tseq_lengthB -> bool

logic dummy8 : tseq_lengthB

type tseq_lengthB__ref = { tseq_lengthB__content : tseq_lengthB
}

function tseq_lengthB__ref___projection(a: tseq_lengthB__ref) : tseq_lengthB =
  (a).tseq_lengthB__content

logic to_rep2 : tseq_lengthB -> int

logic of_rep2 : int -> tseq_lengthB

axiom inversion_axiom2 :
  (forall x:tseq_lengthB [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:tseq_lengthB [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic last4 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : tseq_lengthB, tseq_lengthB -> bool

logic dummy9 : tseq_lengthB

type seq_length__ref = { seq_length__content : tseq_lengthB
}

function seq_length__ref___projection(a: seq_length__ref) : tseq_lengthB =
  (a).seq_length__content

axiom last__def_axiom2 : (last4 = max(length({ elts = s1; rt = s11 }),
  length({ elts = s2; rt = s21 })))

type map

type map__ref1 = { map__content1 : map
}

logic get : map, int, int -> tseq_lengthB

logic set : map, int, int, tseq_lengthB -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:tseq_lengthB [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:tseq_lengthB [get(set(m, i, j, a), i2, j2)| set(m, i, j, a),
  get(m, i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a),
  i2, j2) = get(m, i2, j2)))))))

logic slide1 : map, int, int, int, int -> map

axiom slide_def1 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide1(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq12 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def10 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq12(a, a__first, a__last, a__first_2,
  a__last_2, b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  (((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) and
  (to_rep2(get(a, temp___idx_154, temp___idx_155)) = to_rep2(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155))))) or
  (not (((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))))))) ->
  (bool_eq12(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  ((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) ->
  (to_rep2(get(a, temp___idx_154, temp___idx_155)) = to_rep2(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155)))))))) -> (bool_eq12(a,
  a__first, a__last, a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = false))))

axiom bool_eq_rev1 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq12(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  ((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) ->
  (to_rep2(get(a, temp___idx_154, temp___idx_155)) = to_rep2(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155))))))))))

type t1

logic first4 : t1 -> integer

logic last5 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk1(f, l))) = f) and (to_rep1(last5(mk1(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type t2

logic first5 : t2 -> integer

logic last6 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first5(mk2(f, l))) = f) and (to_rep1(last6(mk2(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property2(range_first, range_last, low) and
  dynamic_property2(range_first, range_last, high)))))

type us_t1 = { elts1 : map; rt1 : t1; rt_2 : t2
}

function to_array1(a: us_t1) : map = (a).elts1

function of_array1(a: map, f: int, l: int, f2: int, l2: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l); rt_2 = mk2(f2, l2) }

function first6(a: us_t1) : int = to_rep1(first4((a).rt1))

function last7(a: us_t1) : int = to_rep1(last5((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first6(a) <= last7(a)) ->
  (length1(a) = ((last7(a) - first6(a)) + 1))) and
  ((not (first6(a) <= last7(a))) -> (length1(a) = 0))))

function first_2(a: us_t1) : int = to_rep1(first5((a).rt_2))

function last_2(a: us_t1) : int = to_rep1(last6((a).rt_2))

logic length_2 : us_t1 -> int

axiom length_2_def :
  (forall a:us_t1 [length_2(a)]. (((first_2(a) <= last_2(a)) ->
  (length_2(a) = ((last_2(a) - first_2(a)) + 1))) and
  ((not (first_2(a) <= last_2(a))) -> (length_2(a) = 0))))

predicate dynamic_property6(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property4(range_first1, range_last1, f1, l1) and
  dynamic_property5(range_first2, range_last2, f2, l2))

logic value__size1 : int

logic object__size1 : map -> int

logic value__component__size1 : int

logic object__component__size1 : map -> int

logic value__alignment1 : int

logic object__alignment1 : map -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:map. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:map. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 : (forall a:map. (0 <= object__alignment1(a)))

function bool_eq13(x: us_t1, y: us_t1) : bool = bool_eq12((x).elts1,
  to_rep1(first4((x).rt1)), to_rep1(last5((x).rt1)),
  to_rep1(first5((x).rt_2)), to_rep1(last6((x).rt_2)), (y).elts1,
  to_rep1(first4((y).rt1)), to_rep1(last5((y).rt1)),
  to_rep1(first5((y).rt_2)), to_rep1(last6((y).rt_2)))

logic user_eq9 : us_t1, us_t1 -> bool

logic dummy10 : map

logic dummy11 : t1

logic dummy12 : t2

type tlengthsT__ref = { tlengthsT__content : us_t1
}

function tlengthsT__ref___projection(a: tlengthsT__ref) : us_t1 =
  (a).tlengthsT__content

logic lengths__first : integer

logic lengths__last : integer

logic lengths__first_2 : integer

logic lengths__last_2 : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

logic get_length : int, int, map -> int

logic get_length__function_guard : int, int, int, map -> prop

axiom get_length__post_axiom :
  (forall x1:int. forall x2:int.
  (forall string_utilities__longest_common_subsequence__lengths:map
  [get_length(x1, x2,
  string_utilities__longest_common_subsequence__lengths)].
  (((in_range1(x1) and in_range4(x2)) and
  (forall temp___226:int. forall temp___227:int.
  ((((to_rep1(lengths__first) <= temp___226) and
  (temp___226 <= to_rep1(lengths__last))) and
  ((to_rep1(lengths__first_2) <= temp___227) and
  (temp___227 <= to_rep1(lengths__last_2)))) -> dynamic_property3(0, last4,
  to_rep2(get(string_utilities__longest_common_subsequence__lengths,
  temp___226, temp___227)))))) -> dynamic_property3(0, last4, get_length(x1,
  x2, string_utilities__longest_common_subsequence__lengths)))))

axiom get_length__def_axiom :
  (forall x1:int. forall x2:int.
  (forall string_utilities__longest_common_subsequence__lengths:map
  [get_length(x1, x2,
  string_utilities__longest_common_subsequence__lengths)].
  (((in_range1(x1) and in_range4(x2)) and
  (forall temp___230:int. forall temp___231:int.
  ((((to_rep1(lengths__first) <= temp___230) and
  (temp___230 <= to_rep1(lengths__last))) and
  ((to_rep1(lengths__first_2) <= temp___231) and
  (temp___231 <= to_rep1(lengths__last_2)))) -> dynamic_property3(0, last4,
  to_rep2(get(string_utilities__longest_common_subsequence__lengths,
  temp___230, temp___231)))))) -> (((dynamic_property1(first2, last2, x1) and
  dynamic_property2(first3, last3, x2)) -> (get_length(x1, x2,
  string_utilities__longest_common_subsequence__lengths) = to_rep2(get(string_utilities__longest_common_subsequence__lengths,
  x1, x2)))) and ((not (dynamic_property1(first2, last2, x1) and
  dynamic_property2(first3, last3, x2))) -> (get_length(x1, x2,
  string_utilities__longest_common_subsequence__lengths) = 0))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic last8 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy13 : integer

type tTresultSP1__ref = { tTresultSP1__content : integer
}

function tTresultSP1__ref___projection(a: tTresultSP1__ref) : integer =
  (a).tTresultSP1__content

type t3

logic first7 : t3 -> integer

logic last9 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first7(mk3(f, l))) = f) and (to_rep1(last9(mk3(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property7(range_first, range_last, low) and
  dynamic_property7(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t3
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk3(f, l) }

function first8(a: us_t2) : int = to_rep1(first7((a).rt2))

function last10(a: us_t2) : int = to_rep1(last9((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first8(a) <= last10(a)) ->
  (length2(a) = ((last10(a) - first8(a)) + 1))) and
  ((not (first8(a) <= last10(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

function bool_eq15(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first7((x).rt2)), to_rep1(last9((x).rt2)), (y).elts2,
  to_rep1(first7((y).rt2)), to_rep1(last9((y).rt2)))

logic user_eq11 : us_t2, us_t2 -> bool

logic dummy14 : (int,character) farray

logic dummy15 : t3

type tresultS__ref = { tresultS__content : us_t2
}

function tresultS__ref___projection(a: tresultS__ref) : us_t2 =
  (a).tresultS__content

logic result____first : integer

logic result____last : integer

logic attr__ATTRIBUTE_ADDRESS6 : int

logic last11 : int

predicate dynamic_property9(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq12 : integer, integer -> bool

logic dummy16 : integer

type trxS__ref = { trxS__content : integer
}

function trxS__ref___projection(a: trxS__ref) : integer = (a).trxS__content

axiom last__def_axiom3 : (last11 = to_rep1(result____last))

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic temp___String_Literal_294 : unit -> (int,character) farray

axiom temp___String_Literal_294__def_axiom : true

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall lengths:map. forall x1:int. forall x2:int.
  forall string_utilities__longest_common_subsequence__result:(int,character) farray.
  forall string_utilities__longest_common_subsequence__result1:t.
  forall temp___289:map. forall temp___282:map. forall o:int. forall o1:int.
  forall o2:int. forall o3:int. forall o4:int. forall temp___279:int.
  forall us:int. forall o5:int. forall o6:tseq_lengthB. forall o7:map.
  forall o8:int. forall o9:int. forall o10:int. forall o11:int.
  forall o12:int. forall o13:int. forall temp___278:int. forall us1:int.
  forall o14:int. forall o15:tseq_lengthB. forall o16:map. forall o17:int.
  forall o18:int. forall o19:int.
  forall string_utilities__longest_common_subsequence__B_4__last__assume:int.
  forall lengths1:map. forall x21:int.
  forall string_utilities__longest_common_subsequence__result2:(int,character) farray.
  forall string_utilities__longest_common_subsequence__result3:t.
  forall result:int. forall x11:int. forall lengths2:map. forall x12:int.
  forall x22:int. forall result1:int. forall x23:int. forall lengths3:map.
  forall x24:int. forall result2:map. forall lengths4:map.
  forall result3:map. forall lengths5:map. forall lengths6:map.
  forall x25:int. forall lengths7:map. forall x26:int. forall lengths8:map.
  forall x27:int. forall lengths9:map. forall x28:int. forall lengths10:map.
  forall x13:int. forall x29:int. forall lengths11:map. forall x14:int.
  forall x210:int. forall lengths12:map. forall x15:int. forall x211:int.
  forall lengths13:map. forall x16:int. forall x212:int. forall result4:bool.
  forall string_utilities__longest_common_subsequence__result4:(int,character) farray.
  forall string_utilities__longest_common_subsequence__result5:t.
  forall string_utilities__longest_common_subsequence__result6:(int,character) farray.
  forall string_utilities__longest_common_subsequence__result7:t.
  (dynamic_property(1, 2147483647, to_rep1(first(s11)),
  to_rep1(last(s11))) -> (dynamic_property(1, 2147483647,
  to_rep1(first(s21)), to_rep1(last(s21))) -> ((((dynamic_property6(first2,
  last2, to_rep1(lengths__first), to_rep1(lengths__last), first3, last3,
  to_rep1(lengths__first_2), to_rep1(lengths__last_2)) and
  ((to_rep1(lengths__first) = to_rep1(first(s11))) and
  (to_rep1(lengths__last) = to_rep1(last(s11))))) and
  ((to_rep1(lengths__first_2) = to_rep1(first(s21))) and
  (to_rep1(lengths__last_2) = to_rep1(last(s21))))) and
  (forall temp___276:int. forall temp___277:int.
  ((((to_rep1(lengths__first) <= temp___276) and
  (temp___276 <= to_rep1(lengths__last))) and
  ((to_rep1(lengths__first_2) <= temp___277) and
  (temp___277 <= to_rep1(lengths__last_2)))) -> ((0 <= last4) ->
  dynamic_property3(0, last4, to_rep2(get(lengths, temp___276,
  temp___277))))))) -> (((({ int__content = result } = { int__content = x1
  }) and (x11 = to_rep1(first(s11)))) and ((((to_rep1(first(s11)) <= x11) and
  (x11 <= to_rep1(last(s11)))) and ((((temp___289 = lengths) and
  ((((forall temp___287:int. forall temp___288:int.
     ((((to_rep1(lengths__first) <= temp___287) and
     (temp___287 <= to_rep1(lengths__last))) and
     ((to_rep1(lengths__first_2) <= temp___288) and
     (temp___288 <= to_rep1(lengths__last_2)))) -> ((0 <= last4) ->
     dynamic_property3(0, last4, to_rep2(get(lengths2, temp___287,
     temp___288)))))) and
  (forall temp___290:int. forall temp___291:int.
  ((((to_rep1(lengths__first) <= temp___290) and
  (temp___290 <= to_rep1(lengths__last))) and
  ((to_rep1(lengths__first_2) <= temp___291) and
  (temp___291 <= to_rep1(lengths__last_2)))) -> ((x12 <= temp___290) ->
  (get(lengths2, temp___290, temp___291) = get(temp___289, temp___290,
  temp___291)))))) and ((to_rep1(first(s11)) <= x12) and
  (x12 <= to_rep1(last(s11))))) and ((((x22 = result1) and
  (x23 = to_rep1(first(s21)))) and ((((to_rep1(first(s21)) <= x23) and
  (x23 <= to_rep1(last(s21)))) and ((((temp___282 = lengths2) and
  ((((forall temp___280:int. forall temp___281:int.
     ((((to_rep1(lengths__first) <= temp___280) and
     (temp___280 <= to_rep1(lengths__last))) and
     ((to_rep1(lengths__first_2) <= temp___281) and
     (temp___281 <= to_rep1(lengths__last_2)))) -> ((0 <= last4) ->
     dynamic_property3(0, last4, to_rep2(get(lengths3, temp___280,
     temp___281)))))) and
  (forall temp___283:int. forall temp___284:int.
  ((((to_rep1(lengths__first) <= temp___283) and
  (temp___283 <= to_rep1(lengths__last))) and
  ((to_rep1(lengths__first_2) <= temp___284) and
  (temp___284 <= to_rep1(lengths__last_2)))) -> (((x24 <= temp___284) or
  (not (x12 = temp___283))) -> (get(lengths3, temp___283,
  temp___284) = get(temp___282, temp___283, temp___284)))))) and
  ((to_rep1(first(s21)) <= x24) and (x24 <= to_rep1(last(s21))))) and
  ((((to_rep((s1[x12])) = to_rep((s2[x24]))) and
  ((((((((((o1 = (x24 - 1)) and in_range1((x24 - 1))) and ((o2 = o1) and
  in_range4(o1))) and (((o = (x12 - 1)) and in_range1((x12 - 1))) and
  ((o3 = get_length(o, o2, lengths3)) and (dynamic_property3(0, last4,
  o3) and (((dynamic_property1(first2, last2, o) and
  dynamic_property2(first3, last3, o2)) and (o3 = to_rep2(get(lengths3, o,
  o2)))) or ((not (dynamic_property1(first2, last2, o) and
  dynamic_property2(first3, last3, o2))) and (o3 = 0))))))) and
  (o4 = (1 + o3))) and ((temp___279 = o4) and in_range5(o4))) and
  (((us = temp___279) and dynamic_property3(0, last4, temp___279)) and
  (o5 = temp___279))) and (o6 = of_rep2(o5))) and (o7 = set(lengths3, x12,
  x24, o6))) and ((lengths3 = result2) and (lengths4 = o7)))) or
  ((not (to_rep((s1[x12])) = to_rep((s2[x24])))) and
  ((((((((((o10 = (x24 - 1)) and in_range1((x24 - 1))) and ((o11 = o10) and
  in_range4(o10))) and ((o12 = get_length(x12, o11, lengths3)) and
  (dynamic_property3(0, last4, o12) and (((dynamic_property1(first2, last2,
  x12) and dynamic_property2(first3, last3, o11)) and
  (o12 = to_rep2(get(lengths3, x12, o11)))) or
  ((not (dynamic_property1(first2, last2, x12) and dynamic_property2(first3,
  last3, o11))) and (o12 = 0)))))) and ((((o9 = x24) and in_range4(x24)) and
  (((o8 = (x12 - 1)) and in_range1((x12 - 1))) and ((o13 = get_length(o8, o9,
  lengths3)) and (dynamic_property3(0, last4, o13) and
  (((dynamic_property1(first2, last2, o8) and dynamic_property2(first3,
  last3, o9)) and (o13 = to_rep2(get(lengths3, o8, o9)))) or
  ((not (dynamic_property1(first2, last2, o8) and dynamic_property2(first3,
  last3, o9))) and (o13 = 0))))))) and (temp___278 = max(o13, o12)))) and
  (((us1 = temp___278) and dynamic_property3(0, last4, temp___278)) and
  (o14 = temp___278))) and (o15 = of_rep2(o14))) and (o16 = set(lengths3,
  x12, x24, o15))) and ((lengths3 = result3) and (lengths5 = o16))) and
  (lengths4 = lengths5)))) and (x24 = to_rep1(last(s21)))))) and
  (((x24 = x25) and (lengths4 = lengths6)) and ((x26 = x24) and
  (lengths7 = lengths4)))) and ((({ int__content = x27 } = { int__content =
  x25 }) and ({ map__content1 = lengths8 } = { map__content1 = lengths6
  })) and ((x28 = x26) and (lengths9 = lengths7))))) or
  ((not ((to_rep1(first(s21)) <= x23) and (x23 <= to_rep1(last(s21))))) and
  (((x23 = x27) and (lengths2 = lengths8)) and ((x28 = x23) and
  (lengths9 = lengths2)))))) and (x12 = to_rep1(last(s11)))))) and ((({
  int__content = x29 } = { int__content = x27 }) and ((x12 = x13) and ({
  map__content1 = lengths10 } = { map__content1 = lengths8 }))) and
  ((x210 = x28) and ((x14 = x12) and (lengths11 = lengths9))))) and ((({
  int__content = x211 } = { int__content = x29 }) and (({ int__content = x15
  } = { int__content = x13 }) and ({ map__content1 = lengths12 } = {
  map__content1 = lengths10 }))) and ((x212 = x210) and ((x16 = x14) and
  (lengths13 = lengths11)))))) or ((not ((to_rep1(first(s11)) <= x11) and
  (x11 <= to_rep1(last(s11))))) and ((({ int__content = x211 } = {
  int__content = x2 }) and ((x11 = x15) and ({ map__content1 = lengths12
  } = { map__content1 = lengths }))) and ((x212 = x21) and ((x16 = x11) and
  (lengths13 = lengths1))))))) -> ((((((o17 = to_rep1(last(s21))) and
  in_range4(to_rep1(last(s21)))) and ((o18 = get_length(to_rep1(last(s11)),
  o17, lengths12)) and (dynamic_property3(0, last4, o18) and
  (((dynamic_property1(first2, last2, to_rep1(last(s11))) and
  dynamic_property2(first3, last3, o17)) and (o18 = to_rep2(get(lengths12,
  to_rep1(last(s11)), o17)))) or ((not (dynamic_property1(first2, last2,
  to_rep1(last(s11))) and dynamic_property2(first3, last3, o17))) and
  (o18 = 0)))))) and (((o18 = 0) and (result4 = true)) or
  ((not (o18 = 0)) and (result4 = false)))) and ((not (result4 = true)) and
  (((string_utilities__longest_common_subsequence__result4 = string_utilities__longest_common_subsequence__result) and
  (string_utilities__longest_common_subsequence__result5 = string_utilities__longest_common_subsequence__result1)) and
  ((string_utilities__longest_common_subsequence__result6 = string_utilities__longest_common_subsequence__result2) and
  (string_utilities__longest_common_subsequence__result7 = string_utilities__longest_common_subsequence__result3))))) ->
  (((((o19 = to_rep1(last(s21))) and in_range4(to_rep1(last(s21)))) and
  ((string_utilities__longest_common_subsequence__B_4__last__assume = get_length(to_rep1(last(s11)),
  o19, lengths12)) and (dynamic_property3(0, last4,
  string_utilities__longest_common_subsequence__B_4__last__assume) and
  (((dynamic_property1(first2, last2, to_rep1(last(s11))) and
  dynamic_property2(first3, last3, o19)) and
  (string_utilities__longest_common_subsequence__B_4__last__assume = to_rep2(get(lengths12,
  to_rep1(last(s11)), o19)))) or ((not (dynamic_property1(first2, last2,
  to_rep1(last(s11))) and dynamic_property2(first3, last3, o19))) and
  (string_utilities__longest_common_subsequence__B_4__last__assume = 0)))))) and
  (string_utilities__longest_common_subsequence__B_4__last__assume = last8)) ->
  (in_range1(last8) -> ((dynamic_property8(1, last8,
  to_rep1(result____first), to_rep1(result____last)) and
  ((to_rep1(result____first) = 1) and (to_rep1(result____last) = last8))) ->
  dynamic_property9(1, last11, to_rep1(result____last)))))))))))
