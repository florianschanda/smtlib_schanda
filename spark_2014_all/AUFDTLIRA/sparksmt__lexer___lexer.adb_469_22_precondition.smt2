(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort natural 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (natural natural) Bool)
(declare-const dummy4 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range4 temp___expr_39)))
(declare-fun to_rep2 (natural) Int)
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range3 temp___expr_74)))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun concat_singleton_left (character Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a character)) (forall ((b (Array Int character))) (forall ((a_first Int) (b_first Int) (b_last Int)) (! (and (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a) (forall ((i Int)) (! (=> (< a_first i) (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select (concat_singleton_left a a_first b b_first b_last) i))))) :pattern ((concat_singleton_left a a_first b b_first b_last)))))))
(declare-fun concat_singleton_right ((Array Int character) Int Int character) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((b character)) (forall ((a_first Int) (a_last Int)) (! (and (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i))))) :pattern ((concat_singleton_right a a_first a_last b)))))))
(declare-fun concat_singletons (character Int character) (Array Int character))
(assert (forall ((a character) (b character)) (forall ((a_first Int)) (! (and (= (select (concat_singletons a a_first b) a_first) a) (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern ((concat_singletons a a_first b))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun dynamic_invariant3 ((temp___expr_96 us_t) (temp___is_init_92 Bool) (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool) (temp___do_typ_inv_95 Bool)) Bool (=> (not (= temp___skip_constant_93 true)) (dynamic_property 1 2147483647 (first1 temp___expr_96) (last1 temp___expr_96))))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq2 (us_rep us_rep) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((file__ref (mk_file__ref (file__content us_rep)))))
(define-fun file__ref___projection ((a file__ref)) us_rep (file__content a))
(declare-sort read_status 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (read_status read_status) Bool)
(declare-const dummy6 read_status)
(declare-datatypes () ((read_status__ref (mk_read_status__ref (read_status__content read_status)))))
(define-fun read_status__ref___projection ((a read_status__ref)) read_status (read_status__content a))
(declare-fun to_rep3 (read_status) Int)
(declare-fun of_rep3 (Int) read_status)
(assert (forall ((x read_status)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x read_status)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__file_io__read_result__status read_status)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) read_status (rec__file_io__read_result__status a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__file_io__read_result__c character)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) character (rec__file_io__read_result__c a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___5__projection ((a us_rep1)) Bool (attr__constrained a))
(define-fun file_io__read_result__c__pred ((a us_rep1)) Bool (= (to_rep3 (rec__file_io__read_result__status (us_split_discrs1 a))) 0))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep3 (rec__file_io__read_result__status (us_split_discrs1 a))) (to_rep3 (rec__file_io__read_result__status (us_split_discrs1 b)))) (=> (file_io__read_result__c__pred a) (= (to_rep (rec__file_io__read_result__c (us_split_fields1 a))) (to_rep (rec__file_io__read_result__c (us_split_fields1 b)))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const file_io__read_result__status__first__bit Int)
(declare-const file_io__read_result__status__last__bit Int)
(declare-const file_io__read_result__status__position Int)
(assert (<= 0 file_io__read_result__status__first__bit))
(assert (< file_io__read_result__status__first__bit file_io__read_result__status__last__bit))
(assert (<= 0 file_io__read_result__status__position))
(declare-const file_io__read_result__c__first__bit Int)
(declare-const file_io__read_result__c__last__bit Int)
(declare-const file_io__read_result__c__position Int)
(assert (<= 0 file_io__read_result__c__first__bit))
(assert (< file_io__read_result__c__first__bit file_io__read_result__c__last__bit))
(assert (<= 0 file_io__read_result__c__position))
(declare-fun user_eq7 (us_rep1 us_rep1) Bool)
(declare-const dummy7 us_rep1)
(declare-datatypes () ((read_result__ref (mk_read_result__ref (read_result__content us_rep1)))))
(define-fun read_result__ref___projection ((a read_result__ref)) us_rep1 (read_result__content a))
(define-fun default_initial_assumption ((temp___expr_531 us_rep1) (temp___skip_top_level_532 Bool)) Bool (and (= (attr__constrained temp___expr_531) false) (= (to_rep3 (rec__file_io__read_result__status (us_split_discrs1 temp___expr_531))) 2)))
(declare-sort capacity_range 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (capacity_range capacity_range) Bool)
(declare-const dummy8 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-datatypes () ((us_split_discrs2 (mk___split_discrs1 (rec__unbounded_strings__char_vectors__vector__capacity capacity_range)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs2)) capacity_range (rec__unbounded_strings__char_vectors__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref1 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref1)) us_split_discrs2 (us_split_discrs__content1 a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__unbounded_strings__char_vectors__vector us_main_type1)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type1 (rec__unbounded_strings__char_vectors__vector a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep2 (mk___rep1 (us_split_discrs3 us_split_discrs2) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___6__projection ((a us_rep2)) us_split_discrs2 (us_split_discrs3 a))
(define-fun us_rep___7__projection ((a us_rep2)) us_split_fields2 (us_split_fields3 a))
(declare-fun to_rep4 (capacity_range) Int)
(declare-fun of_rep4 (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x capacity_range)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep2) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep2) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep2)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment3 a))))
(declare-const unbounded_strings__char_vectors__vector__capacity__first__bit Int)
(declare-const unbounded_strings__char_vectors__vector__capacity__last__bit Int)
(declare-const unbounded_strings__char_vectors__vector__capacity__position Int)
(assert (<= 0 unbounded_strings__char_vectors__vector__capacity__first__bit))
(assert (< unbounded_strings__char_vectors__vector__capacity__first__bit unbounded_strings__char_vectors__vector__capacity__last__bit))
(assert (<= 0 unbounded_strings__char_vectors__vector__capacity__position))
(declare-fun user_eq9 (us_rep2 us_rep2) Bool)
(declare-const dummy9 us_rep2)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep2)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep2 (vector__content a))
(define-fun in_range7 ((rec__unbounded_strings__char_vectors__vector__capacity1 Int) (a us_rep2)) Bool (= rec__unbounded_strings__char_vectors__vector__capacity1 (to_rep4 (rec__unbounded_strings__char_vectors__vector__capacity (us_split_discrs3 a)))))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const unbounded_strings__char_vectors__vector__capacity__first__bit1 Int)
(declare-const unbounded_strings__char_vectors__vector__capacity__last__bit1 Int)
(declare-const unbounded_strings__char_vectors__vector__capacity__position1 Int)
(assert (<= 0 unbounded_strings__char_vectors__vector__capacity__first__bit1))
(assert (< unbounded_strings__char_vectors__vector__capacity__first__bit1 unbounded_strings__char_vectors__vector__capacity__last__bit1))
(assert (<= 0 unbounded_strings__char_vectors__vector__capacity__position1))
(declare-fun user_eq10 (us_rep2 us_rep2) Bool)
(declare-const dummy10 us_rep2)
(declare-datatypes () ((unbounded_string__ref (mk_unbounded_string__ref (unbounded_string__content us_rep2)))))
(define-fun unbounded_string__ref___projection ((a unbounded_string__ref)) us_rep2 (unbounded_string__content a))
(declare-fun length1 (us_rep2) Int)
(declare-fun length__function_guard (Int us_rep2) Bool)
(define-fun dynamic_invariant4 ((temp___expr_569 us_rep2) (temp___is_init_565 Bool) (temp___skip_constant_566 Bool) (temp___do_toplevel_567 Bool) (temp___do_typ_inv_568 Bool)) Bool (=> (not (= temp___skip_constant_566 true)) (in_range7 32 temp___expr_569)))
(define-fun default_initial_assumption1 ((temp___expr_571 us_rep2) (temp___skip_top_level_572 Bool)) Bool (and (= (to_rep4 (rec__unbounded_strings__char_vectors__vector__capacity (us_split_discrs3 temp___expr_571))) 32) (=> (not (= temp___skip_top_level_572 true)) (= (length1 temp___expr_571) 0))))
(assert (forall ((s us_rep2)) (! (=> (dynamic_invariant4 s true true true true) (dynamic_invariant (length1 s) true false true true)) :pattern ((length1 s)))))
(declare-fun to_string1 (us_rep2) us_t)
(declare-fun to_string__function_guard (us_t us_rep2) Bool)
(assert (forall ((s us_rep2)) (! (=> (dynamic_invariant4 s true true true true) (let ((result (to_string1 s))) (and (and (= (length result) (length1 s)) (= (first1 result) 1)) (dynamic_invariant3 result true false true true)))) :pattern ((to_string1 s)))))
(declare-sort name_id 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq11 (name_id name_id) Bool)
(declare-const dummy11 name_id)
(declare-datatypes () ((name_id__ref (mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content a))
(define-fun dynamic_invariant5 ((temp___expr_726 Int) (temp___is_init_722 Bool) (temp___skip_constant_723 Bool) (temp___do_toplevel_724 Bool) (temp___do_typ_inv_725 Bool)) Bool (=> (or (= temp___is_init_722 true) (<= 0 2147483647)) (in_range8 temp___expr_726)))
(declare-sort token_kind 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq12 (token_kind token_kind) Bool)
(declare-const dummy12 token_kind)
(declare-datatypes () ((token_kind__ref (mk_token_kind__ref (token_kind__content token_kind)))))
(define-fun token_kind__ref___projection ((a token_kind__ref)) token_kind (token_kind__content a))
(define-fun dynamic_invariant6 ((temp___expr_736 Int) (temp___is_init_732 Bool) (temp___skip_constant_733 Bool) (temp___do_toplevel_734 Bool) (temp___do_typ_inv_735 Bool)) Bool (=> (or (= temp___is_init_732 true) (<= 0 8)) (in_range9 temp___expr_736)))
(declare-fun to_rep5 (token_kind) Int)
(declare-fun of_rep5 (Int) token_kind)
(assert (forall ((x token_kind)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x token_kind)) (! (in_range9 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range9 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-sort valued_tokens 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 3 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq13 (valued_tokens valued_tokens) Bool)
(declare-const dummy13 valued_tokens)
(declare-datatypes () ((valued_tokens__ref (mk_valued_tokens__ref (valued_tokens__content valued_tokens)))))
(define-fun valued_tokens__ref___projection ((a valued_tokens__ref)) valued_tokens (valued_tokens__content a))
(define-fun dynamic_invariant7 ((temp___expr_743 Int) (temp___is_init_739 Bool) (temp___skip_constant_740 Bool) (temp___do_toplevel_741 Bool) (temp___do_typ_inv_742 Bool)) Bool (=> (or (= temp___is_init_739 true) (<= 3 8)) (in_range10 temp___expr_743)))
(declare-fun to_rep6 (name_id) Int)
(declare-fun of_rep6 (Int) name_id)
(assert (forall ((x name_id)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)))))
(assert (forall ((x name_id)) (! (in_range8 (to_rep6 x)) :pattern ((to_rep6 x)))))
(assert (forall ((x Int)) (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6 (of_rep6 x))))))
(declare-datatypes () ((us_split_discrs4 (mk___split_discrs2 (rec__lexer__token__kind token_kind)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs4)) token_kind (rec__lexer__token__kind a))
(declare-datatypes () ((us_split_discrs__ref2 (mk___split_discrs__ref2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref2)) us_split_discrs4 (us_split_discrs__content2 a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__lexer__token__line natural) (rec__lexer__token__col natural) (rec__lexer__token__length natural) (rec__lexer__token__value name_id)))))
(define-fun us_split_fields_Line__projection ((a us_split_fields4)) natural (rec__lexer__token__line a))
(define-fun us_split_fields_Col__projection ((a us_split_fields4)) natural (rec__lexer__token__col a))
(define-fun us_split_fields_Length__projection ((a us_split_fields4)) natural (rec__lexer__token__length a))
(define-fun us_split_fields_Value__projection ((a us_split_fields4)) name_id (rec__lexer__token__value a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep3 (mk___rep2 (us_split_discrs5 us_split_discrs4) (us_split_fields5 us_split_fields4) (attr__constrained1 Bool)))))
(define-fun us_rep___8__projection ((a us_rep3)) us_split_discrs4 (us_split_discrs5 a))
(define-fun us_rep___9__projection ((a us_rep3)) us_split_fields4 (us_split_fields5 a))
(define-fun us_rep___10__projection ((a us_rep3)) Bool (attr__constrained1 a))
(define-fun lexer__token__value__pred ((a us_rep3)) Bool (and (<= 3 (to_rep5 (rec__lexer__token__kind (us_split_discrs5 a)))) (<= (to_rep5 (rec__lexer__token__kind (us_split_discrs5 a))) 8)))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (to_rep5 (rec__lexer__token__kind (us_split_discrs5 a))) (to_rep5 (rec__lexer__token__kind (us_split_discrs5 b)))) (and (and (and (= (to_rep2 (rec__lexer__token__line (us_split_fields5 a))) (to_rep2 (rec__lexer__token__line (us_split_fields5 b)))) (= (to_rep2 (rec__lexer__token__col (us_split_fields5 a))) (to_rep2 (rec__lexer__token__col (us_split_fields5 b))))) (= (to_rep2 (rec__lexer__token__length (us_split_fields5 a))) (to_rep2 (rec__lexer__token__length (us_split_fields5 b))))) (=> (lexer__token__value__pred a) (= (to_rep6 (rec__lexer__token__value (us_split_fields5 a))) (to_rep6 (rec__lexer__token__value (us_split_fields5 b))))))) true false))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep3) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep3) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep3)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment5 a))))
(declare-const lexer__token__kind__first__bit Int)
(declare-const lexer__token__kind__last__bit Int)
(declare-const lexer__token__kind__position Int)
(assert (<= 0 lexer__token__kind__first__bit))
(assert (< lexer__token__kind__first__bit lexer__token__kind__last__bit))
(assert (<= 0 lexer__token__kind__position))
(declare-const lexer__token__line__first__bit Int)
(declare-const lexer__token__line__last__bit Int)
(declare-const lexer__token__line__position Int)
(assert (<= 0 lexer__token__line__first__bit))
(assert (< lexer__token__line__first__bit lexer__token__line__last__bit))
(assert (<= 0 lexer__token__line__position))
(declare-const lexer__token__col__first__bit Int)
(declare-const lexer__token__col__last__bit Int)
(declare-const lexer__token__col__position Int)
(assert (<= 0 lexer__token__col__first__bit))
(assert (< lexer__token__col__first__bit lexer__token__col__last__bit))
(assert (<= 0 lexer__token__col__position))
(declare-const lexer__token__length__first__bit Int)
(declare-const lexer__token__length__last__bit Int)
(declare-const lexer__token__length__position Int)
(assert (<= 0 lexer__token__length__first__bit))
(assert (< lexer__token__length__first__bit lexer__token__length__last__bit))
(assert (<= 0 lexer__token__length__position))
(declare-const lexer__token__value__first__bit Int)
(declare-const lexer__token__value__last__bit Int)
(declare-const lexer__token__value__position Int)
(assert (<= 0 lexer__token__value__first__bit))
(assert (< lexer__token__value__first__bit lexer__token__value__last__bit))
(assert (<= 0 lexer__token__value__position))
(declare-fun user_eq14 (us_rep3 us_rep3) Bool)
(declare-const dummy14 us_rep3)
(declare-datatypes () ((token__ref (mk_token__ref (token__content us_rep3)))))
(define-fun token__ref___projection ((a token__ref)) us_rep3 (token__content a))
(define-fun default_initial_assumption2 ((temp___expr_752 us_rep3) (temp___skip_top_level_753 Bool)) Bool (and (= (attr__constrained1 temp___expr_752) false) (= (to_rep5 (rec__lexer__token__kind (us_split_discrs5 temp___expr_752))) 0)))
(declare-const current_read__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const next_read__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun invariant__ (us_private us_split_fields us_split_discrs us_split_fields us_split_discrs) Bool)
(declare-fun invariant____function_guard (Bool us_private us_split_fields us_split_discrs us_split_fields us_split_discrs) Bool)
(declare-fun invariant__1 (us_private) Bool)
(declare-fun invariant____function_guard1 (Bool us_private) Bool)
(declare-fun local_invariant (us_split_fields us_split_discrs us_split_fields us_split_discrs) Bool)
(declare-fun local_invariant__function_guard (Bool us_split_fields us_split_discrs us_split_fields us_split_discrs) Bool)
(assert true)
(assert (forall ((names__name_table us_private)) (forall ((lexer__current_read__fields us_split_fields) (lexer__next_read__fields us_split_fields)) (forall ((lexer__current_read__discrs us_split_discrs) (lexer__next_read__discrs us_split_discrs)) (! (= (= (invariant__ names__name_table lexer__current_read__fields lexer__current_read__discrs lexer__next_read__fields lexer__next_read__discrs) true) (and (= (invariant__1 names__name_table) true) (= (local_invariant lexer__current_read__fields lexer__current_read__discrs lexer__next_read__fields lexer__next_read__discrs) true))) :pattern ((invariant__ names__name_table lexer__current_read__fields lexer__current_read__discrs lexer__next_read__fields lexer__next_read__discrs)))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const t__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const s__split_discrs us_split_discrs2)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-sort parse_state 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 9)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq15 (parse_state parse_state) Bool)
(declare-const dummy15 parse_state)
(declare-datatypes () ((parse_state__ref (mk_parse_state__ref (parse_state__content parse_state)))))
(define-fun parse_state__ref___projection ((a parse_state__ref)) parse_state (parse_state__content a))
(define-fun dynamic_invariant8 ((temp___expr_835 Int) (temp___is_init_831 Bool) (temp___skip_constant_832 Bool) (temp___do_toplevel_833 Bool) (temp___do_typ_inv_834 Bool)) Bool (=> (or (= temp___is_init_831 true) (<= 0 9)) (in_range11 temp___expr_835)))
(declare-sort terminal_states 0)
(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 9)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq16 (terminal_states terminal_states) Bool)
(declare-const dummy16 terminal_states)
(declare-datatypes () ((terminal_states__ref (mk_terminal_states__ref (terminal_states__content terminal_states)))))
(define-fun terminal_states__ref___projection ((a terminal_states__ref)) terminal_states (terminal_states__content a))
(declare-const attr__ATTRIBUTE_ADDRESS12 Int)
(declare-const attr__ATTRIBUTE_ADDRESS13 Int)
(declare-const r54b Int)
(declare-const attr__ATTRIBUTE_ADDRESS14 Int)
(define-fun in_range13 ((rec__lexer__token__kind1 Int) (a us_rep3)) Bool (= rec__lexer__token__kind1 (to_rep5 (rec__lexer__token__kind (us_split_discrs5 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep3) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep3) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep3)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment6 a))))
(declare-const lexer__token__kind__first__bit1 Int)
(declare-const lexer__token__kind__last__bit1 Int)
(declare-const lexer__token__kind__position1 Int)
(assert (<= 0 lexer__token__kind__first__bit1))
(assert (< lexer__token__kind__first__bit1 lexer__token__kind__last__bit1))
(assert (<= 0 lexer__token__kind__position1))
(declare-const lexer__token__value__first__bit1 Int)
(declare-const lexer__token__value__last__bit1 Int)
(declare-const lexer__token__value__position1 Int)
(assert (<= 0 lexer__token__value__first__bit1))
(assert (< lexer__token__value__first__bit1 lexer__token__value__last__bit1))
(assert (<= 0 lexer__token__value__position1))
(declare-const lexer__token__line__first__bit1 Int)
(declare-const lexer__token__line__last__bit1 Int)
(declare-const lexer__token__line__position1 Int)
(assert (<= 0 lexer__token__line__first__bit1))
(assert (< lexer__token__line__first__bit1 lexer__token__line__last__bit1))
(assert (<= 0 lexer__token__line__position1))
(declare-const lexer__token__col__first__bit1 Int)
(declare-const lexer__token__col__last__bit1 Int)
(declare-const lexer__token__col__position1 Int)
(assert (<= 0 lexer__token__col__first__bit1))
(assert (< lexer__token__col__first__bit1 lexer__token__col__last__bit1))
(assert (<= 0 lexer__token__col__position1))
(declare-const lexer__token__length__first__bit1 Int)
(declare-const lexer__token__length__last__bit1 Int)
(declare-const lexer__token__length__position1 Int)
(assert (<= 0 lexer__token__length__first__bit1))
(assert (< lexer__token__length__first__bit1 lexer__token__length__last__bit1))
(assert (<= 0 lexer__token__length__position1))
(declare-fun user_eq17 (us_rep3 us_rep3) Bool)
(declare-const dummy17 us_rep3)
(declare-datatypes () ((t55b__ref (mk_t55b__ref (t55b__content us_rep3)))))
(define-fun t55b__ref___projection ((a t55b__ref)) us_rep3 (t55b__content a))
(declare-const tmp us_t)
(declare-const attr__ATTRIBUTE_ADDRESS15 Int)
(declare-const attr__ATTRIBUTE_ADDRESS16 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq18 (integer integer) Bool)
(declare-const dummy18 integer)
(declare-datatypes () ((t63b__ref (mk_t63b__ref (t63b__content integer)))))
(define-fun t63b__ref___projection ((a t63b__ref)) integer (t63b__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first2 (mk1 f l))) f) (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int character)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))
(define-fun of_array1 ((a (Array Int character)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))
(define-fun length2 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size7 Int)
(declare-fun object__size7 ((Array Int character)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int character)) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 ((Array Int character)) Int)
(assert (<= 0 value__size7))
(assert (forall ((a (Array Int character))) (<= 0 (object__size7 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment7 a))))
(define-fun bool_eq5 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep1 (first2 (rt1 x))) (to_rep1 (last2 (rt1 x))) (elts1 y) (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))
(declare-fun user_eq19 (us_t1 us_t1) Bool)
(declare-const dummy19 us_t1)
(declare-datatypes () ((t64b__ref (mk_t64b__ref (t64b__content us_t1)))))
(define-fun t64b__ref___projection ((a t64b__ref)) us_t1 (t64b__content a))
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)
(declare-fun user_eq20 (integer integer) Bool)
(declare-const dummy20 integer)
(declare-datatypes () ((t66b__ref (mk_t66b__ref (t66b__content integer)))))
(define-fun t66b__ref___projection ((a t66b__ref)) integer (t66b__content a))
(declare-sort t2 0)
(declare-fun first4 (t2) integer)
(declare-fun last4 (t2) integer)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first4 (mk2 f l))) f) (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)))))
(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property3 range_first range_last low) (dynamic_property3 range_first range_last high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int character)) (rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int character) (elts2 a))
(define-fun of_array2 ((a (Array Int character)) (f Int) (l Int)) us_t2 (mk___t2 a (mk2 f l)))
(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))
(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))
(define-fun length3 ((a us_t2)) Int (ite (<= (first5 a) (last5 a)) (+ (- (last5 a) (first5 a)) 1) 0))
(declare-const value__size8 Int)
(declare-fun object__size8 ((Array Int character)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int character)) Int)
(declare-const value__alignment8 Int)
(declare-fun object__alignment8 ((Array Int character)) Int)
(assert (<= 0 value__size8))
(assert (forall ((a (Array Int character))) (<= 0 (object__size8 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment8))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment8 a))))
(define-fun bool_eq6 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep1 (first4 (rt2 x))) (to_rep1 (last4 (rt2 x))) (elts2 y) (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))
(declare-fun user_eq21 (us_t2 us_t2) Bool)
(declare-const dummy21 us_t2)
(declare-datatypes () ((t67b__ref (mk_t67b__ref (t67b__content us_t2)))))
(define-fun t67b__ref___projection ((a t67b__ref)) us_t2 (t67b__content a))
(define-fun dynamic_property5 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)
(declare-fun user_eq22 (integer integer) Bool)
(declare-const dummy22 integer)
(declare-datatypes () ((t70b__ref (mk_t70b__ref (t70b__content integer)))))
(define-fun t70b__ref___projection ((a t70b__ref)) integer (t70b__content a))
(declare-sort t3 0)
(declare-fun first6 (t3) integer)
(declare-fun last6 (t3) integer)
(declare-fun mk3 (Int Int) t3)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first6 (mk3 f l))) f) (= (to_rep1 (last6 (mk3 f l))) l)))) :pattern ((mk3 f l)))))
(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property5 range_first range_last low) (dynamic_property5 range_first range_last high))))))
(declare-datatypes () ((us_t3 (mk___t3 (elts3 (Array Int character)) (rt3 t3)))))
(define-fun to_array3 ((a us_t3)) (Array Int character) (elts3 a))
(define-fun of_array3 ((a (Array Int character)) (f Int) (l Int)) us_t3 (mk___t3 a (mk3 f l)))
(define-fun first7 ((a us_t3)) Int (to_rep1 (first6 (rt3 a))))
(define-fun last7 ((a us_t3)) Int (to_rep1 (last6 (rt3 a))))
(define-fun length4 ((a us_t3)) Int (ite (<= (first7 a) (last7 a)) (+ (- (last7 a) (first7 a)) 1) 0))
(declare-const value__size9 Int)
(declare-fun object__size9 ((Array Int character)) Int)
(declare-const value__component__size3 Int)
(declare-fun object__component__size3 ((Array Int character)) Int)
(declare-const value__alignment9 Int)
(declare-fun object__alignment9 ((Array Int character)) Int)
(assert (<= 0 value__size9))
(assert (forall ((a (Array Int character))) (<= 0 (object__size9 a))))
(assert (<= 0 value__component__size3))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size3 a))))
(assert (<= 0 value__alignment9))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment9 a))))
(define-fun bool_eq7 ((x us_t3) (y us_t3)) Bool (bool_eq (elts3 x) (to_rep1 (first6 (rt3 x))) (to_rep1 (last6 (rt3 x))) (elts3 y) (to_rep1 (first6 (rt3 y))) (to_rep1 (last6 (rt3 y)))))
(declare-fun user_eq23 (us_t3 us_t3) Bool)
(declare-const dummy23 us_t3)
(declare-datatypes () ((t71b__ref (mk_t71b__ref (t71b__content us_t3)))))
(define-fun t71b__ref___projection ((a t71b__ref)) us_t3 (t71b__content a))
(declare-const str__first integer)
(declare-const str__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS17 Int)
(declare-fun temp___String_Literal_930 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_930 us_void_param) 1)) 105) (= (to_rep (select (temp___String_Literal_930 us_void_param) 2)) 110)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 3)) 118)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 4)) 97)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 5)) 108)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 6)) 105)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 7)) 100)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 8)) 32)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 9)) 99)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 10)) 104)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 11)) 97)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 12)) 114)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 13)) 97)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 14)) 99)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 15)) 116)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 16)) 101)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 17)) 114)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 18)) 32)) (= (to_rep (select (temp___String_Literal_930 us_void_param) 19)) 39)) :pattern ((temp___String_Literal_930 us_void_param)))))
(declare-fun temp___String_Literal_932 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (= (to_rep (select (temp___String_Literal_932 us_void_param) 1)) 39) :pattern ((temp___String_Literal_932 us_void_param)))))
(declare-fun temp___String_Literal_948 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_948 us_void_param) 1)) 105) (= (to_rep (select (temp___String_Literal_948 us_void_param) 2)) 110)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 3)) 118)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 4)) 97)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 5)) 108)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 6)) 105)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 7)) 100)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 8)) 32)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 9)) 102)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 10)) 111)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 11)) 114)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 12)) 109)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 13)) 97)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 14)) 116)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 15)) 44)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 16)) 32)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 17)) 109)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 18)) 117)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 19)) 115)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 20)) 116)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 21)) 32)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 22)) 98)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 23)) 101)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 24)) 32)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 25)) 39)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 26)) 98)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 27)) 39)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 28)) 32)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 29)) 111)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 30)) 114)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 31)) 32)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 32)) 39)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 33)) 120)) (= (to_rep (select (temp___String_Literal_948 us_void_param) 34)) 39)) :pattern ((temp___String_Literal_948 us_void_param)))))
(declare-fun temp___String_Literal_966 (tuple0) (Array Int character))
(assert true)
(declare-fun temp___String_Literal_971 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_971 us_void_param) 1)) 113) (= (to_rep (select (temp___String_Literal_971 us_void_param) 2)) 117)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 3)) 111)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 4)) 116)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 5)) 101)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 6)) 100)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 7)) 32)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 8)) 115)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 9)) 121)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 10)) 109)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 11)) 98)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 12)) 111)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 13)) 108)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 14)) 32)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 15)) 105)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 16)) 115)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 17)) 32)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 18)) 110)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 19)) 111)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 20)) 116)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 21)) 32)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 22)) 116)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 23)) 101)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 24)) 114)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 25)) 109)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 26)) 105)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 27)) 110)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 28)) 97)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 29)) 116)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 30)) 101)) (= (to_rep (select (temp___String_Literal_971 us_void_param) 31)) 100)) :pattern ((temp___String_Literal_971 us_void_param)))))
(declare-fun temp___String_Literal_972 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_972 us_void_param) 1)) 98) (= (to_rep (select (temp___String_Literal_972 us_void_param) 2)) 105)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 3)) 110)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 4)) 97)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 5)) 114)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 6)) 121)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 7)) 32)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 8)) 111)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 9)) 114)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 10)) 32)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 11)) 104)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 12)) 101)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 13)) 120)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 14)) 32)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 15)) 115)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 16)) 121)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 17)) 109)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 18)) 98)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 19)) 111)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 20)) 108)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 21)) 32)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 22)) 105)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 23)) 115)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 24)) 32)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 25)) 110)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 26)) 111)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 27)) 116)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 28)) 32)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 29)) 102)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 30)) 105)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 31)) 110)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 32)) 105)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 33)) 115)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 34)) 104)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 35)) 101)) (= (to_rep (select (temp___String_Literal_972 us_void_param) 36)) 100)) :pattern ((temp___String_Literal_972 us_void_param)))))
(declare-fun temp___String_Literal_973 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_973 us_void_param) 1)) 115) (= (to_rep (select (temp___String_Literal_973 us_void_param) 2)) 116)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 3)) 114)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 4)) 105)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 5)) 110)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 6)) 103)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 7)) 32)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 8)) 108)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 9)) 105)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 10)) 116)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 11)) 101)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 12)) 114)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 13)) 97)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 14)) 108)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 15)) 32)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 16)) 105)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 17)) 115)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 18)) 32)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 19)) 110)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 20)) 111)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 21)) 116)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 22)) 32)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 23)) 116)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 24)) 101)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 25)) 114)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 26)) 109)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 27)) 105)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 28)) 110)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 29)) 97)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 30)) 116)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 31)) 101)) (= (to_rep (select (temp___String_Literal_973 us_void_param) 32)) 100)) :pattern ((temp___String_Literal_973 us_void_param)))))
(define-fun dynamic_invariant9 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant10 ((temp___expr_842 Int) (temp___is_init_838 Bool) (temp___skip_constant_839 Bool) (temp___do_toplevel_840 Bool) (temp___do_typ_inv_841 Bool)) Bool (and (=> (or (= temp___is_init_838 true) (<= 0 9)) (in_range12 temp___expr_842)) (=> (= temp___do_toplevel_840 true) (=> (= temp___is_init_838 true) (or (and (<= 2 temp___expr_842) (<= temp___expr_842 2)) (and (<= 9 temp___expr_842) (<= temp___expr_842 9)))))))
(define-fun dynamic_predicate ((temp___846 Int)) Bool (or (and (<= 2 temp___846) (<= temp___846 2)) (and (<= 9 temp___846) (<= temp___846 9))))
(assert true)
(assert (forall ((lexer__current_read__fields us_split_fields) (lexer__next_read__fields us_split_fields)) (forall ((lexer__current_read__discrs us_split_discrs) (lexer__next_read__discrs us_split_discrs)) (! (= (= (local_invariant lexer__current_read__fields lexer__current_read__discrs lexer__next_read__fields lexer__next_read__discrs) true) (and (not (= (attr__constrained (mk___rep lexer__current_read__discrs lexer__current_read__fields current_read__attr__constrained)) true)) (not (= (attr__constrained (mk___rep lexer__next_read__discrs lexer__next_read__fields next_read__attr__constrained)) true)))) :pattern ((local_invariant lexer__current_read__fields lexer__current_read__discrs lexer__next_read__fields lexer__next_read__discrs))))))
(assert true)
(define-fun dynamic_invariant11 ((temp___expr_522 Int) (temp___is_init_518 Bool) (temp___skip_constant_519 Bool) (temp___do_toplevel_520 Bool) (temp___do_typ_inv_521 Bool)) Bool (=> (or (= temp___is_init_518 true) (<= 0 2)) (in_range5 temp___expr_522)))
(define-fun dynamic_invariant12 ((temp___expr_556 Int) (temp___is_init_552 Bool) (temp___skip_constant_553 Bool) (temp___do_toplevel_554 Bool) (temp___do_typ_inv_555 Bool)) Bool (=> (or (= temp___is_init_552 true) (<= 0 2147483647)) (in_range6 temp___expr_556)))
(declare-const t__split_fields natural)
(declare-const t__split_fields1 natural)
(declare-const t__split_fields2 natural)
(declare-const t__split_fields3 name_id)
(declare-const t__split_discrs token_kind)
(declare-const the_filename Int)
(declare-const the_file us_rep)
(declare-const current_read__split_fields character)
(declare-const current_read__split_discrs read_status)
(declare-const current_line Int)
(declare-const current_col Int)
(declare-const current_pos Int)
(declare-const next_read__split_fields character)
(declare-const next_read__split_discrs read_status)
(declare-const s__split_fields us_main_type1)
(declare-const first_line Int)
(declare-const first_col Int)
(declare-const first_pos int__ref)
(declare-const state int__ref)
(declare-const c int__ref)
(declare-const name_table us_private__ref)
(declare-const temp___947 Int)
(declare-const temp___946 Int)
(declare-const temp___945 us_rep)
(declare-const temp___943 Int)
(declare-const temp___944 us_rep3)
(declare-const temp___942 us_rep1)
(declare-const temp___941 us_rep2)
(declare-const temp___940 Int)
(declare-const temp___939 Int)
(declare-const temp___938 Int)
(declare-const temp___937 Int)
(declare-const temp___936 Int)
(declare-const temp___935 us_rep1)
(declare-const t__split_fields4 us_split_fields4)
(declare-const t__split_discrs1 us_split_discrs4)
(declare-const current_line1 Int)
(declare-const current_col1 Int)
(declare-const current_pos1 Int)
(declare-const first_line1 Int)
(declare-const first_col1 Int)
(declare-const first_pos1 Int)
(declare-const state1 Int)
(declare-const c1 Int)
(declare-const current_read__split_fields1 us_split_fields)
(declare-const current_read__split_discrs1 us_split_discrs)
(declare-const current_line2 Int)
(declare-const current_col2 Int)
(declare-const current_pos2 Int)
(declare-const next_read__split_fields1 us_split_fields)
(declare-const next_read__split_discrs1 us_split_discrs)
(declare-const t__split_fields5 us_split_fields4)
(declare-const t__split_discrs2 us_split_discrs4)
(declare-const result int__ref)
(declare-const first_line2 Int)
(declare-const result1 int__ref)
(declare-const first_col2 Int)
(declare-const result2 int__ref)
(declare-const first_pos2 Int)
(declare-const result3 int__ref)
(declare-const c2 Int)
(declare-const s__split_fields1 us_split_fields2)
(declare-const the_file1 us_rep)
(declare-const current_read__split_fields2 us_split_fields)
(declare-const current_read__split_discrs2 us_split_discrs)
(declare-const current_line3 Int)
(declare-const current_col3 Int)
(declare-const current_pos3 Int)
(declare-const next_read__split_fields2 us_split_fields)
(declare-const next_read__split_discrs2 us_split_discrs)
(declare-const s__split_fields2 us_split_fields2)
(declare-const result4 int__ref)
(declare-const state2 Int)
(declare-const result5 int__ref)
(declare-const state3 Int)
(declare-const result6 int__ref)
(declare-const state4 Int)
(declare-const result7 int__ref)
(declare-const state5 Int)
(declare-const result8 int__ref)
(declare-const state6 Int)
(declare-const state7 int__ref)
(declare-const state8 Int)
(declare-const state9 int__ref)
(declare-const state10 Int)
(declare-const state11 int__ref)
(declare-const state12 Int)
(declare-const state13 int__ref)
(declare-const state14 Int)
(declare-const t__split_fields6 us_split_fields__ref2)
(declare-const t__split_discrs3 us_split_discrs__ref2)
(declare-const state15 int__ref)
(declare-const t__split_fields7 us_split_fields4)
(declare-const t__split_discrs4 us_split_discrs4)
(declare-const state16 Int)
(declare-const t__split_fields8 us_split_fields__ref2)
(declare-const t__split_discrs5 us_split_discrs__ref2)
(declare-const the_file2 file__ref)
(declare-const current_read__split_fields3 us_split_fields__ref)
(declare-const current_read__split_discrs3 us_split_discrs__ref)
(declare-const current_line4 int__ref)
(declare-const current_col4 int__ref)
(declare-const current_pos4 int__ref)
(declare-const next_read__split_fields3 us_split_fields__ref)
(declare-const next_read__split_discrs3 us_split_discrs__ref)
(declare-const s__split_fields3 us_split_fields__ref1)
(declare-const first_line3 int__ref)
(declare-const first_col3 int__ref)
(declare-const first_pos3 int__ref)
(declare-const state17 int__ref)
(declare-const c3 int__ref)
(declare-const t__split_fields9 us_split_fields4)
(declare-const t__split_discrs6 us_split_discrs4)
(declare-const the_file3 us_rep)
(declare-const current_read__split_fields4 us_split_fields)
(declare-const current_read__split_discrs4 us_split_discrs)
(declare-const current_line5 Int)
(declare-const current_col5 Int)
(declare-const current_pos5 Int)
(declare-const next_read__split_fields4 us_split_fields)
(declare-const next_read__split_discrs4 us_split_discrs)
(declare-const s__split_fields4 us_split_fields2)
(declare-const first_line4 Int)
(declare-const first_col4 Int)
(declare-const first_pos4 Int)
(declare-const state18 Int)
(declare-const c4 Int)
(declare-const t__split_fields10 us_split_fields__ref2)
(declare-const t__split_discrs7 us_split_discrs__ref2)
(declare-const the_file4 file__ref)
(declare-const current_read__split_fields5 us_split_fields__ref)
(declare-const current_read__split_discrs5 us_split_discrs__ref)
(declare-const current_line6 int__ref)
(declare-const current_col6 int__ref)
(declare-const current_pos6 int__ref)
(declare-const next_read__split_fields5 us_split_fields__ref)
(declare-const next_read__split_discrs5 us_split_discrs__ref)
(declare-const s__split_fields5 us_split_fields__ref1)
(declare-const first_line5 int__ref)
(declare-const first_col5 int__ref)
(declare-const first_pos5 int__ref)
(declare-const state19 int__ref)
(declare-const c5 int__ref)
(declare-const t__split_fields11 us_split_fields4)
(declare-const t__split_discrs8 us_split_discrs4)
(declare-const the_file5 us_rep)
(declare-const current_read__split_fields6 us_split_fields)
(declare-const current_read__split_discrs6 us_split_discrs)
(declare-const current_line7 Int)
(declare-const current_col7 Int)
(declare-const current_pos7 Int)
(declare-const next_read__split_fields6 us_split_fields)
(declare-const next_read__split_discrs6 us_split_discrs)
(declare-const s__split_fields6 us_split_fields2)
(declare-const first_line6 Int)
(declare-const first_col6 Int)
(declare-const first_pos6 Int)
(declare-const state20 Int)
(declare-const c6 Int)
(declare-const result9 int__ref)
(declare-const c7 Int)
(declare-const current_read__split_discrs7 us_split_discrs)
(declare-const current_line8 Int)
(declare-const current_col8 Int)
(declare-const current_pos8 Int)
(declare-const s__split_fields7 us_split_fields2)
(declare-const state21 Int)
(declare-const c8 Int)
(declare-const result10 int__ref)
(declare-const state22 Int)
(assert (in_range8 the_filename))
(assert (= current_read__attr__constrained false))
(assert (in_range2 current_line))
(assert (in_range4 current_col))
(assert (in_range4 current_pos))
(assert (= next_read__attr__constrained false))
(assert (and (= (invariant__ (us_private__content name_table) (mk___split_fields current_read__split_fields) (mk___split_discrs current_read__split_discrs) (mk___split_fields next_read__split_fields) (mk___split_discrs next_read__split_discrs)) true) (not (= t__attr__constrained true))))
(assert (default_initial_assumption1 (mk___rep1 s__split_discrs (mk___split_fields1 s__split_fields)) false))
(assert (= 32 (to_rep4 (rec__unbounded_strings__char_vectors__vector__capacity s__split_discrs))))
(assert (=> (<= 0 2147483647) (in_range4 first_line)))
(assert (=> (<= 0 2147483647) (in_range4 first_col)))
(assert (=> (<= 0 2147483647) (in_range4 (int__content first_pos))))
(assert (=> (<= 0 9) (in_range11 (int__content state))))
(assert (=> (<= 0 255) (in_range3 (int__content c))))
(assert (= temp___947 first_col))
(assert (= temp___946 (int__content state)))
(assert (= temp___945 the_file))
(assert (= temp___943 first_line))
(assert (= temp___944 (mk___rep2 (mk___split_discrs2 t__split_discrs) (mk___split_fields2 t__split_fields t__split_fields1 t__split_fields2 t__split_fields3) t__attr__constrained)))
(assert (= temp___942 (mk___rep (mk___split_discrs next_read__split_discrs) (mk___split_fields next_read__split_fields) next_read__attr__constrained)))
(assert (= temp___941 (mk___rep1 s__split_discrs (mk___split_fields1 s__split_fields))))
(assert (= temp___940 current_pos))
(assert (= temp___939 current_col))
(assert (= temp___938 current_line))
(assert (= temp___937 (int__content first_pos)))
(assert (= temp___936 (int__content c)))
(assert (= temp___935 (mk___rep (mk___split_discrs current_read__split_discrs) (mk___split_fields current_read__split_fields) current_read__attr__constrained)))
(assert (and (and (and (and (and (and (and (=> (<= 0 255) (in_range3 (let ((subject c)) c1))) (=> (<= 0 2147483647) (in_range4 (let ((subject first_pos)) first_pos1)))) (in_range2 current_line1)) (in_range4 current_col1)) (in_range4 current_pos1)) (=> (<= 0 2147483647) (in_range4 first_line1))) (=> (<= 0 9) (in_range11 (let ((subject state)) state1)))) (=> (<= 0 2147483647) (in_range4 first_col1))))
(assert (and (= (local_invariant current_read__split_fields1 current_read__split_discrs1 next_read__split_fields1 next_read__split_discrs1) true) (and (and (in_range2 current_line2) (in_range4 current_col2)) (in_range4 current_pos2))))
(assert (not (= (to_rep3 (rec__file_io__read_result__status current_read__split_discrs1)) 1)))
(assert (not (= (to_rep3 (rec__file_io__read_result__status current_read__split_discrs1)) 2)))
(assert (= t__split_discrs2 t__split_discrs1))
(assert (= t__split_fields5 t__split_fields4))
(assert (= result (mk_int__ref first_line1)))
(assert (= first_line2 current_line2))
(assert (= result1 (mk_int__ref first_col1)))
(assert (= first_col2 current_col2))
(assert (= result2 (let ((subject first_pos)) (mk_int__ref first_pos1))))
(assert (= (let ((subject first_pos)) first_pos2) current_pos2))
(assert (= result3 (let ((subject c)) (mk_int__ref c1))))
(assert (= (let ((subject c)) c2) (to_rep (rec__file_io__read_result__c current_read__split_fields1))))
(assert (= (length1 (mk___rep1 s__split_discrs s__split_fields1)) 0))
(assert (and (and (and (= (local_invariant current_read__split_fields2 current_read__split_discrs2 next_read__split_fields2 next_read__split_discrs2) true) (= (length1 (mk___rep1 s__split_discrs s__split_fields2)) (+ (length1 (mk___rep1 s__split_discrs s__split_fields1)) 1))) (<= current_pos2 current_pos3)) (and (and (in_range2 current_line3) (in_range4 current_col3)) (in_range4 current_pos3))))
(assert (= state15 state13))
(assert (= t__split_discrs3 (mk___split_discrs__ref2 t__split_discrs2)))
(assert (= t__split_fields6 (mk___split_fields__ref2 t__split_fields5)))
(assert (= state16 state14))
(assert (= t__split_discrs4 t__split_discrs2))
(assert (= t__split_fields7 t__split_fields5))
(assert (not (= (let ((subject c)) c2) 40)))
(assert (not (= (let ((subject c)) c2) 41)))
(assert (=> (= (let ((subject c)) c2) 124) (= state13 (let ((subject state)) (mk_int__ref state2)))))
(assert (=> (= (let ((subject c)) c2) 124) (= state14 state2)))
(assert (=> (= (let ((subject c)) c2) 124) (= result4 (let ((subject state)) (mk_int__ref state1)))))
(assert (=> (= (let ((subject c)) c2) 124) (= (let ((subject state)) state2) 1)))
(assert (=> (not (= (let ((subject c)) c2) 124)) (= state13 state11)))
(assert (=> (not (= (let ((subject c)) c2) 124)) (= state14 state12)))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (= (let ((subject c)) c2) 35) (= state11 (let ((subject state)) (mk_int__ref state3))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (= (let ((subject c)) c2) 35) (= state12 state3))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (= (let ((subject c)) c2) 35) (= result5 (let ((subject state)) (mk_int__ref state1))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (= (let ((subject c)) c2) 35) (= (let ((subject state)) state3) 5))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (= state11 state9))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (= state12 state10))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57)) (= state9 (let ((subject state)) (mk_int__ref state4)))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57)) (= state10 state4)))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57)) (= result6 (let ((subject state)) (mk_int__ref state1)))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57)) (= (let ((subject state)) state4) 3)))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (= state9 state7)))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (= state10 state8)))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (=> (ite (<= 0 (let ((subject c)) c2)) (=> (not (<= (let ((subject c)) c2) 255)) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (= state7 (let ((subject state)) (mk_int__ref state5))))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (=> (ite (<= 0 (let ((subject c)) c2)) (=> (not (<= (let ((subject c)) c2) 255)) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (= state8 state5))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (=> (ite (<= 0 (let ((subject c)) c2)) (=> (not (<= (let ((subject c)) c2) 255)) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (= result7 (let ((subject state)) (mk_int__ref state1))))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (=> (ite (<= 0 (let ((subject c)) c2)) (=> (not (<= (let ((subject c)) c2) 255)) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (= (let ((subject state)) state5) 0))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (=> (not (ite (<= 0 (let ((subject c)) c2)) (=> (not (<= (let ((subject c)) c2) 255)) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255)))) (= state7 (let ((subject state)) (mk_int__ref state6))))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (=> (not (ite (<= 0 (let ((subject c)) c2)) (=> (not (<= (let ((subject c)) c2) 255)) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255)))) (= state8 state6))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (=> (not (ite (<= 0 (let ((subject c)) c2)) (=> (not (<= (let ((subject c)) c2) 255)) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255)))) (= (let ((subject c)) c2) 34))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (=> (not (ite (<= 0 (let ((subject c)) c2)) (=> (not (<= (let ((subject c)) c2) 255)) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255)))) (= result8 (let ((subject state)) (mk_int__ref state1))))))))
(assert (=> (not (= (let ((subject c)) c2) 124)) (=> (not (= (let ((subject c)) c2) 35)) (=> (not (and (<= 48 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 57))) (=> (not (ite (<= 0 (let ((subject c)) c2)) (=> (not (<= (let ((subject c)) c2) 255)) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255))) (and (<= 0 (let ((subject c)) c2)) (<= (let ((subject c)) c2) 255)))) (= (let ((subject state)) state6) 8))))))
(assert (= c3 (let ((subject c)) (mk_int__ref c2))))
(assert (= state17 state15))
(assert (= first_pos3 (let ((subject first_pos)) (mk_int__ref first_pos2))))
(assert (= first_col3 (mk_int__ref first_col2)))
(assert (= first_line3 (mk_int__ref first_line2)))
(assert (= s__split_fields3 (mk___split_fields__ref1 s__split_fields2)))
(assert (= next_read__split_discrs3 (mk___split_discrs__ref next_read__split_discrs2)))
(assert (= next_read__split_fields3 (mk___split_fields__ref next_read__split_fields2)))
(assert (= current_pos4 (mk_int__ref current_pos3)))
(assert (= current_col4 (mk_int__ref current_col3)))
(assert (= current_line4 (mk_int__ref current_line3)))
(assert (= current_read__split_discrs3 (mk___split_discrs__ref current_read__split_discrs2)))
(assert (= current_read__split_fields3 (mk___split_fields__ref current_read__split_fields2)))
(assert (= the_file2 (mk_file__ref the_file1)))
(assert (= t__split_discrs5 t__split_discrs3))
(assert (= t__split_fields8 t__split_fields6))
(assert (= c4 c2))
(assert (= state18 state16))
(assert (= first_pos4 first_pos2))
(assert (= first_col4 first_col2))
(assert (= first_line4 first_line2))
(assert (= s__split_fields4 s__split_fields2))
(assert (= next_read__split_discrs4 next_read__split_discrs2))
(assert (= next_read__split_fields4 next_read__split_fields2))
(assert (= current_pos5 current_pos3))
(assert (= current_col5 current_col3))
(assert (= current_line5 current_line3))
(assert (= current_read__split_discrs4 current_read__split_discrs2))
(assert (= current_read__split_fields4 current_read__split_fields2))
(assert (= the_file3 the_file1))
(assert (= t__split_discrs6 t__split_discrs4))
(assert (= t__split_fields9 t__split_fields7))
(assert (= c5 c3))
(assert (= state19 state17))
(assert (= first_pos5 first_pos3))
(assert (= first_col5 first_col3))
(assert (= first_line5 first_line3))
(assert (= s__split_fields5 s__split_fields3))
(assert (= next_read__split_discrs5 next_read__split_discrs3))
(assert (= next_read__split_fields5 next_read__split_fields3))
(assert (= current_pos6 current_pos4))
(assert (= current_col6 current_col4))
(assert (= current_line6 current_line4))
(assert (= current_read__split_discrs5 current_read__split_discrs3))
(assert (= current_read__split_fields5 current_read__split_fields3))
(assert (= the_file4 the_file2))
(assert (= t__split_discrs7 t__split_discrs5))
(assert (= t__split_fields10 t__split_fields8))
(assert (= c6 c4))
(assert (= state20 state18))
(assert (= first_pos6 first_pos4))
(assert (= first_col6 first_col4))
(assert (= first_line6 first_line4))
(assert (= s__split_fields6 s__split_fields4))
(assert (= next_read__split_discrs6 next_read__split_discrs4))
(assert (= next_read__split_fields6 next_read__split_fields4))
(assert (= current_pos7 current_pos5))
(assert (= current_col7 current_col5))
(assert (= current_line7 current_line5))
(assert (= current_read__split_discrs6 current_read__split_discrs4))
(assert (= current_read__split_fields6 current_read__split_fields4))
(assert (= the_file5 the_file3))
(assert (= t__split_discrs8 t__split_discrs6))
(assert (= t__split_fields11 t__split_fields9))
(assert (= (to_rep3 (rec__file_io__read_result__status (us_split_discrs__content current_read__split_discrs5))) 0))
(assert (= result9 c5))
(assert (= (let ((subject c)) c7) (to_rep (rec__file_io__read_result__c (us_split_fields__content current_read__split_fields5)))))
(assert (and (and (and (and (= (to_rep3 (rec__file_io__read_result__status current_read__split_discrs7)) 0) (=> (in_range12 (let ((subject state)) state21)) (not (let ((temp___959 (let ((subject state)) state21))) (or (and (<= 2 temp___959) (<= temp___959 2)) (and (<= 9 temp___959) (<= temp___959 9))))))) (<= 1 (length1 (mk___rep1 s__split_discrs s__split_fields7)))) (<= (int__content first_pos5) current_pos8)) (=> (or (= (let ((subject state)) state21) 6) (= (let ((subject state)) state21) 7)) (<= 2 (length1 (mk___rep1 s__split_discrs s__split_fields7))))))
(assert (and (and (and (and (=> (<= 0 255) (in_range3 (let ((subject c)) c8))) (in_range2 current_line8)) (in_range4 current_col8)) (in_range4 current_pos8)) (=> (<= 0 9) (in_range11 (let ((subject state)) state21)))))
(assert (not (= (let ((subject state)) state21) 3)))
(assert (not (= (let ((subject state)) state21) 4)))
(assert (= (let ((subject state)) state21) 5))
(assert (not (= (let ((subject c)) c8) 98)))
(assert (not (= (let ((subject c)) c8) 120)))
(assert (= result10 (let ((subject state)) (mk_int__ref state21))))
(assert (= (let ((subject state)) state22) 7))
(assert (not (= (invariant__1 (us_private__content name_table)) true)))
(check-sat)
(exit)
