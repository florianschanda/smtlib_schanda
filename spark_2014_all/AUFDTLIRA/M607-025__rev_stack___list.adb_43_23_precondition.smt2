(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort r1 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (r1 r1) Bool)
(declare-const dummy1 r1)
(declare-datatypes () ((r1__ref (mk_r1__ref (r1__content r1)))))
(define-fun r1__ref___projection ((a r1__ref)) r1 (r1__content a))
(declare-fun to_rep1 (r1) Int)
(declare-fun of_rep1 (Int) r1)
(assert (forall ((x r1)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x r1)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-const dummy2 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__stack__stack__top r1) (rec__stack__stack__content (Array Int integer))))))
(define-fun us_split_fields_Top__projection ((a us_split_fields)) r1 (rec__stack__stack__top a))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int integer) (rec__stack__stack__content a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__stack__stack__top (us_split_fields1 a))) (to_rep1 (rec__stack__stack__top (us_split_fields1 b)))) (= (bool_eq (rec__stack__stack__content (us_split_fields1 a)) 1 100 (rec__stack__stack__content (us_split_fields1 b)) 1 100) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const stack__stack__top__first__bit Int)
(declare-const stack__stack__top__last__bit Int)
(declare-const stack__stack__top__position Int)
(assert (<= 0 stack__stack__top__first__bit))
(assert (< stack__stack__top__first__bit stack__stack__top__last__bit))
(assert (<= 0 stack__stack__top__position))
(declare-const stack__stack__content__first__bit Int)
(declare-const stack__stack__content__last__bit Int)
(declare-const stack__stack__content__position Int)
(assert (<= 0 stack__stack__content__first__bit))
(assert (< stack__stack__content__first__bit stack__stack__content__last__bit))
(assert (<= 0 stack__stack__content__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((stack__ref (mk_stack__ref (stack__content us_rep)))))
(define-fun stack__ref___projection ((a stack__ref)) us_rep (stack__content a))
(declare-sort positive 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (positive positive) Bool)
(declare-const dummy4 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range3 low) (in_range3 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int integer)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int integer)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int integer)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((m__ref (mk_m__ref (m__content us_t)))))
(define-fun m__ref___projection ((a m__ref)) us_t (m__content a))
(declare-fun to__ (us_rep) us_t)
(declare-fun to____function_guard (us_t us_rep) Bool)
(define-fun dynamic_invariant1 ((temp___expr_191 us_t) (temp___is_init_187 Bool) (temp___skip_constant_188 Bool) (temp___do_toplevel_189 Bool) (temp___do_typ_inv_190 Bool)) Bool (=> (not (= temp___skip_constant_188 true)) (dynamic_property 1 2147483647 (first1 temp___expr_191) (last1 temp___expr_191))))
(assert (forall ((s us_rep)) (! (let ((result (to__ s))) (and (and (= (first1 result) 1) (<= 0 (last1 result))) (dynamic_invariant1 result true false true true))) :pattern ((to__ s)))))
(declare-fun is_empty (us_rep) Bool)
(declare-fun is_empty__function_guard (Bool us_rep) Bool)
(declare-fun empty_stack (tuple0) us_rep)
(declare-fun empty_stack__function_guard (us_rep tuple0) Bool)
(assert (forall ((us_void_param tuple0)) (! (= (is_empty (empty_stack us_void_param)) true) :pattern ((empty_stack us_void_param)))))
(declare-fun top (us_rep) Int)
(declare-fun top__function_guard (Int us_rep) Bool)
(assert (forall ((s us_rep)) (! (=> (not (= (is_empty s) true)) (let ((result (top s))) (and (= result (to_rep (let ((temp___206 (to__ s))) (select (to_array temp___206) (last1 (to__ s)))))) (dynamic_invariant result true false true true)))) :pattern ((top s)))))
(assert (forall ((s us_rep)) (! (= (top s) (to_rep (let ((temp___208 (rec__stack__stack__content (us_split_fields1 s)))) (select temp___208 (to_rep1 (rec__stack__stack__top (us_split_fields1 s))))))) :pattern ((top s)))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun concat_singleton_left (integer Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a integer)) (forall ((b (Array Int integer))) (forall ((a_first Int) (b_first Int) (b_last Int)) (! (and (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a) (forall ((i Int)) (! (=> (< a_first i) (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select (concat_singleton_left a a_first b b_first b_last) i))))) :pattern ((concat_singleton_left a a_first b b_first b_last)))))))
(declare-fun concat_singleton_right ((Array Int integer) Int Int integer) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((b integer)) (forall ((a_first Int) (a_last Int)) (! (and (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i))))) :pattern ((concat_singleton_right a a_first a_last b)))))))
(declare-fun concat_singletons (integer Int integer) (Array Int integer))
(assert (forall ((a integer) (b integer)) (forall ((a_first Int)) (! (and (= (select (concat_singletons a a_first b) a_first) a) (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern ((concat_singletons a a_first b))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(declare-fun is_full (us_rep) Bool)
(declare-fun is_full__function_guard (Bool us_rep) Bool)
(declare-sort t12s 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (t12s t12s) Bool)
(declare-const dummy6 t12s)
(declare-datatypes () ((t12s__ref (mk_t12s__ref (t12s__content t12s)))))
(define-fun t12s__ref___projection ((a t12s__ref)) t12s (t12s__content a))
(declare-fun temp___209 (Int) (Array Int integer))
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (integer integer) Bool)
(declare-const dummy7 integer)
(declare-datatypes () ((t14s__ref (mk_t14s__ref (t14s__content integer)))))
(define-fun t14s__ref___projection ((a t14s__ref)) integer (t14s__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int integer)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))
(define-fun of_array1 ((a (Array Int integer)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int integer)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int integer)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int integer)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment3 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y) (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))
(declare-fun user_eq8 (us_t1 us_t1) Bool)
(declare-const dummy8 us_t1)
(declare-datatypes () ((t15s__ref (mk_t15s__ref (t15s__content us_t1)))))
(define-fun t15s__ref___projection ((a t15s__ref)) us_t1 (t15s__content a))
(declare-sort index_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (index_type index_type) Bool)
(declare-const dummy9 index_type)
(declare-datatypes () ((index_type__ref (mk_index_type__ref (index_type__content index_type)))))
(define-fun index_type__ref___projection ((a index_type__ref)) index_type (index_type__content a))
(declare-sort capacity_range 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq10 (capacity_range capacity_range) Bool)
(declare-const dummy10 capacity_range)
(declare-datatypes () ((capacity_range__ref (mk_capacity_range__ref (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref___projection ((a capacity_range__ref)) capacity_range (capacity_range__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__list__my_lists__vector__capacity capacity_range)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) capacity_range (rec__list__my_lists__vector__capacity a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__list__my_lists__vector us_main_type)))))
(define-fun us_split_fields_Vector__projection ((a us_split_fields2)) us_main_type (rec__list__my_lists__vector a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs1 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep1) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep1) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep1)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment4 a))))
(declare-const list__my_lists__vector__capacity__first__bit Int)
(declare-const list__my_lists__vector__capacity__last__bit Int)
(declare-const list__my_lists__vector__capacity__position Int)
(assert (<= 0 list__my_lists__vector__capacity__first__bit))
(assert (< list__my_lists__vector__capacity__first__bit list__my_lists__vector__capacity__last__bit))
(assert (<= 0 list__my_lists__vector__capacity__position))
(declare-fun user_eq11 (us_rep1 us_rep1) Bool)
(declare-const dummy11 us_rep1)
(declare-datatypes () ((vector__ref (mk_vector__ref (vector__content us_rep1)))))
(define-fun vector__ref___projection ((a vector__ref)) us_rep1 (vector__content a))
(declare-fun length2 (us_rep1) Int)
(declare-fun length__function_guard (Int us_rep1) Bool)
(define-fun dynamic_invariant2 ((temp___expr_314 Int) (temp___is_init_310 Bool) (temp___skip_constant_311 Bool) (temp___do_toplevel_312 Bool) (temp___do_typ_inv_313 Bool)) Bool (=> (or (= temp___is_init_310 true) (<= 0 100)) (in_range6 temp___expr_314)))
(declare-fun to_rep2 (capacity_range) Int)
(declare-fun of_rep2 (Int) capacity_range)
(assert (forall ((x capacity_range)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x capacity_range)) (! (in_range6 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun capacity ((container us_rep1)) Int (ite (= (distinct 1 0) true) (to_rep2 (rec__list__my_lists__vector__capacity (us_split_discrs1 container))) 100))
(declare-fun capacity__function_guard (Int us_rep1) Bool)
(assert (forall ((container us_rep1)) (! (let ((result (length2 container))) (and (<= result (capacity container)) (dynamic_invariant2 result true false true true))) :pattern ((length2 container)))))
(declare-sort us_main_type1 0)
(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)
(declare-sort us_rep2 0)
(declare-fun bool_eq4 (us_rep2 us_rep2) Bool)
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep2) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep2) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))
(declare-fun user_eq12 (us_rep2 us_rep2) Bool)
(declare-const dummy12 us_rep2)
(declare-datatypes () ((sequence__ref (mk_sequence__ref (sequence__content us_rep2)))))
(define-fun sequence__ref___projection ((a sequence__ref)) us_rep2 (sequence__content a))
(declare-fun length3 (us_rep2) Int)
(declare-fun length__function_guard1 (Int us_rep2) Bool)
(define-fun last4 ((container us_rep2)) Int (+ 0 (length3 container)))
(declare-fun last__function_guard (Int us_rep2) Bool)
(declare-fun model__ (us_rep1) us_rep2)
(declare-fun model____function_guard (us_rep2 us_rep1) Bool)
(define-fun last_index ((container us_rep1)) Int (last4 (model__ container)))
(declare-fun last_index__function_guard (Int us_rep1) Bool)
(declare-sort extended_index 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 101)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq13 (extended_index extended_index) Bool)
(declare-const dummy13 extended_index)
(declare-datatypes () ((extended_index__ref (mk_extended_index__ref (extended_index__content extended_index)))))
(define-fun extended_index__ref___projection ((a extended_index__ref)) extended_index (extended_index__content a))
(define-fun dynamic_invariant3 ((temp___expr_307 Int) (temp___is_init_303 Bool) (temp___skip_constant_304 Bool) (temp___do_toplevel_305 Bool) (temp___do_typ_inv_306 Bool)) Bool (=> (or (= temp___is_init_303 true) (<= 0 101)) (in_range7 temp___expr_307)))
(declare-fun first_index__function_guard (Int us_rep1) Bool)
(define-fun dynamic_invariant4 ((temp___expr_293 Int) (temp___is_init_289 Bool) (temp___skip_constant_290 Bool) (temp___do_toplevel_291 Bool) (temp___do_typ_inv_292 Bool)) Bool (=> (or (= temp___is_init_289 true) (<= 1 100)) (in_range5 temp___expr_293)))
(declare-fun get (us_rep2 Int) Int)
(declare-fun get__function_guard (Int us_rep2 Int) Bool)
(define-fun element ((container us_rep1) (index Int)) Int (get (model__ container) index))
(declare-fun element__function_guard (Int us_rep1 Int) Bool)
(declare-sort element_type 0)
(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq14 (element_type element_type) Bool)
(declare-const dummy14 element_type)
(declare-datatypes () ((element_type__ref (mk_element_type__ref (element_type__content element_type)))))
(define-fun element_type__ref___projection ((a element_type__ref)) element_type (element_type__content a))
(define-fun dynamic_invariant5 ((temp___expr_300 Int) (temp___is_init_296 Bool) (temp___skip_constant_297 Bool) (temp___do_toplevel_298 Bool) (temp___do_typ_inv_299 Bool)) Bool (=> (or (= temp___is_init_296 true) (<= (- 2147483648) 2147483647)) (in_range8 temp___expr_300)))
(define-fun olt ((left us_rep2) (right us_rep2)) Bool (and (< (length3 left) (length3 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last4 left))) (= (get left n) (get right n)))) true false)))
(declare-fun olt__function_guard (Bool us_rep2 us_rep2) Bool)
(define-fun in_range9 ((rec__list__my_lists__vector__capacity1 Int) (a us_rep1)) Bool (= rec__list__my_lists__vector__capacity1 (to_rep2 (rec__list__my_lists__vector__capacity (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep1) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep1) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep1)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment6 a))))
(declare-const list__my_lists__vector__capacity__first__bit1 Int)
(declare-const list__my_lists__vector__capacity__last__bit1 Int)
(declare-const list__my_lists__vector__capacity__position1 Int)
(assert (<= 0 list__my_lists__vector__capacity__first__bit1))
(assert (< list__my_lists__vector__capacity__first__bit1 list__my_lists__vector__capacity__last__bit1))
(assert (<= 0 list__my_lists__vector__capacity__position1))
(declare-fun user_eq15 (us_rep1 us_rep1) Bool)
(declare-const dummy15 us_rep1)
(declare-datatypes () ((list__ref (mk_list__ref (list__content us_rep1)))))
(define-fun list__ref___projection ((a list__ref)) us_rep1 (list__content a))
(declare-fun is_empty1 (us_rep1) Bool)
(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)
(define-fun dynamic_invariant6 ((temp___expr_444 us_rep1) (temp___is_init_440 Bool) (temp___skip_constant_441 Bool) (temp___do_toplevel_442 Bool) (temp___do_typ_inv_443 Bool)) Bool (=> (not (= temp___skip_constant_441 true)) (in_range9 100 temp___expr_444)))
(define-fun default_initial_assumption ((temp___expr_446 us_rep1) (temp___skip_top_level_447 Bool)) Bool (and (= (to_rep2 (rec__list__my_lists__vector__capacity (us_split_discrs1 temp___expr_446))) 100) (=> (not (= temp___skip_top_level_447 true)) (= (is_empty1 temp___expr_446) true))))
(declare-const l us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const first4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const last5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const res__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq16 (integer integer) Bool)
(declare-const dummy16 integer)
(declare-datatypes () ((t2b__ref (mk_t2b__ref (t2b__content integer)))))
(define-fun t2b__ref___projection ((a t2b__ref)) integer (t2b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_property4 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)
(declare-fun user_eq17 (integer integer) Bool)
(declare-const dummy17 integer)
(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content integer)))))
(define-fun t7b__ref___projection ((a t7b__ref)) integer (t7b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_invariant7 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range3 temp___expr_46)))
(assert (= first4 1))
(assert (= last5 (last_index l)))
(declare-sort count_type 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)
(declare-fun user_eq18 (count_type count_type) Bool)
(declare-const dummy18 count_type)
(declare-datatypes () ((count_type__ref (mk_count_type__ref (count_type__content count_type)))))
(define-fun count_type__ref___projection ((a count_type__ref)) count_type (count_type__content a))
(define-fun dynamic_invariant8 ((temp___expr_237 Int) (temp___is_init_233 Bool) (temp___skip_constant_234 Bool) (temp___do_toplevel_235 Bool) (temp___do_typ_inv_236 Bool)) Bool (=> (or (= temp___is_init_233 true) (<= 0 2147483647)) (in_range10 temp___expr_237)))
(assert true)
(assert (forall ((s us_rep)) (! (= (= (is_full s) true) (<= 100 (last1 (to__ s)))) :pattern ((is_full s)))))
(assert true)
(assert (forall ((s us_rep)) (! (= (= (is_empty s) true) (< (last1 (to__ s)) 1)) :pattern ((is_empty s)))))
(assert (forall ((temp___211 Int)) (=> (dynamic_invariant temp___211 true true true true) (= (to_rep (select (temp___209 temp___211) 1)) temp___211))))
(define-fun dynamic_invariant9 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 100)) (in_range2 temp___expr_159)))
(define-fun oeq ((left us_rep2) (right us_rep2)) Bool (and (= (length3 left) (length3 right)) (ite (forall ((n Int)) (=> (and (<= 1 n) (<= n (last4 left))) (= (get left n) (get right n)))) true false)))
(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)
(assert (forall ((a us_rep2) (b us_rep2)) (! (= (user_eq12 a b) (oeq a b)) :pattern ((user_eq12 a b)))))
(define-fun default_initial_assumption1 ((temp___expr_353 us_rep2) (temp___skip_top_level_354 Bool)) Bool (=> (not (= temp___skip_top_level_354 true)) (= (length3 temp___expr_353) 0)))
(assert (forall ((container us_rep1)) (! (= (length3 (model__ container)) (length2 container)) :pattern ((model__ container)))))
(assert (forall ((container us_rep1)) (! (= (= (is_empty1 container) true) (= (length2 container) 0)) :pattern ((is_empty1 container)))))
(declare-sort extended_index1 0)
(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)
(declare-fun user_eq19 (extended_index1 extended_index1) Bool)
(declare-const dummy19 extended_index1)
(declare-datatypes () ((extended_index__ref1 (mk_extended_index__ref1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref___2__projection ((a extended_index__ref1)) extended_index1 (extended_index__content1 a))
(define-fun dynamic_invariant10 ((temp___expr_345 Int) (temp___is_init_341 Bool) (temp___skip_constant_342 Bool) (temp___do_toplevel_343 Bool) (temp___do_typ_inv_344 Bool)) Bool (=> (or (= temp___is_init_341 true) (<= 0 100)) (in_range11 temp___expr_345)))
(assert (forall ((container us_rep2)) (! (let ((result (length3 container))) (and (<= (+ 0 result) 100) (dynamic_invariant8 result true false true true))) :pattern ((length3 container)))))
(declare-sort element_type1 0)
(define-fun in_range12 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)
(declare-fun user_eq20 (element_type1 element_type1) Bool)
(declare-const dummy20 element_type1)
(declare-datatypes () ((element_type__ref1 (mk_element_type__ref1 (element_type__content1 element_type1)))))
(define-fun element_type__ref___2__projection ((a element_type__ref1)) element_type1 (element_type__content1 a))
(define-fun dynamic_invariant11 ((temp___expr_338 Int) (temp___is_init_334 Bool) (temp___skip_constant_335 Bool) (temp___do_toplevel_336 Bool) (temp___do_typ_inv_337 Bool)) Bool (=> (or (= temp___is_init_334 true) (<= (- 2147483648) 2147483647)) (in_range12 temp___expr_338)))
(assert (forall ((container us_rep2)) (forall ((position Int)) (! (=> (and (dynamic_invariant10 position true true true true) (and (<= 1 position) (<= position (last4 container)))) (dynamic_invariant11 (get container position) true false true true)) :pattern ((get container position))))))
(declare-const s__split_fields r1)
(declare-const s__split_fields1 (Array Int integer))
(declare-const res__split_fields us_main_type)
(declare-const i Int)
(declare-const i1 Int)
(declare-const list__reverse_list__s__assume r1)
(declare-const list__reverse_list__s__assume1 (Array Int integer))
(declare-const list__reverse_list__first__assume Int)
(declare-const list__reverse_list__last__assume Int)
(declare-const temp___517 Int)
(declare-const temp___516 r1)
(declare-const temp___5161 (Array Int integer))
(declare-const o Int)
(declare-const o1 Int)
(declare-const result us_split_fields__ref)
(declare-const s__split_fields2 us_split_fields)
(declare-const list__my_lists__clear__container__fields us_split_fields2)
(declare-const result1 us_split_fields__ref1)
(declare-const res__split_fields1 us_split_fields2)
(declare-const result2 int__ref)
(declare-const i2 Int)
(declare-const s__split_fields3 us_split_fields)
(declare-const s__split_fields4 us_split_fields)
(declare-const i3 Int)
(declare-const s__split_fields5 us_split_fields__ref)
(declare-const i4 int__ref)
(declare-const s__split_fields6 us_split_fields)
(declare-const i5 Int)
(declare-const s__split_fields7 us_split_fields__ref)
(declare-const i6 int__ref)
(declare-const s__split_fields8 us_split_fields)
(declare-const i7 Int)
(declare-const result3 int__ref)
(declare-const i8 Int)
(declare-const s__split_fields9 us_split_fields)
(declare-const res__split_fields2 us_split_fields2)
(declare-const i9 Int)
(define-fun list__reverse_list__s__assume2 () us_rep (mk___rep (mk___split_fields list__reverse_list__s__assume list__reverse_list__s__assume1)))
(assert (= 100 (to_rep2 (rec__list__my_lists__vector__capacity (us_split_discrs1 l)))))
(assert (and (= list__reverse_list__s__assume2 (empty_stack Tuple0)) (= (is_empty list__reverse_list__s__assume2) true)))
(assert (= result (mk___split_fields__ref (mk___split_fields s__split_fields s__split_fields1))))
(assert (= s__split_fields2 (mk___split_fields list__reverse_list__s__assume list__reverse_list__s__assume1)))
(assert (and (= list__reverse_list__first__assume 1) (and (in_range5 list__reverse_list__first__assume) (= list__reverse_list__first__assume 1))))
(assert (= list__reverse_list__first__assume first4))
(assert (in_range1 first4))
(assert (and (= list__reverse_list__last__assume (last4 (model__ l))) (and (in_range7 list__reverse_list__last__assume) (= list__reverse_list__last__assume (last4 (model__ l))))))
(assert (= list__reverse_list__last__assume last5))
(assert (in_range1 last5))
(assert (default_initial_assumption (mk___rep1 res__split_discrs (mk___split_fields1 res__split_fields)) false))
(assert (= 100 (to_rep2 (rec__list__my_lists__vector__capacity res__split_discrs))))
(assert (= (length2 (mk___rep1 res__split_discrs list__my_lists__clear__container__fields)) 0))
(assert (= result1 (mk___split_fields__ref1 (mk___split_fields1 res__split_fields))))
(assert (= res__split_fields1 list__my_lists__clear__container__fields))
(assert (= result2 (mk_int__ref i)))
(assert (= i2 first4))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= temp___517 i2)))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= s__split_fields2 (mk___split_fields temp___516 temp___5161))))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (and (= o i2) (in_range5 i2))))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (and (= o1 (get (model__ l) o)) (and (in_range8 o1) (= o1 (get (model__ l) o))))))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= (let ((temp___215 (to__ (mk___rep s__split_fields3)))) (bool_eq (elts temp___215) (to_rep (first (rt temp___215))) (to_rep (last (rt temp___215))) (let ((temp___214 (temp___209 o1))) (let ((temp___213 (to__ (mk___rep s__split_fields2)))) (ite (= (length temp___213) 0) temp___214 (concat1 (elts temp___213) (to_rep (first (rt temp___213))) (to_rep (last (rt temp___213))) temp___214 1 1)))) (to_rep (first (let ((temp___213 (to__ (mk___rep s__split_fields2)))) (ite (= (length temp___213) 0) (mk 1 1) (mk (to_rep (first (rt temp___213))) (- (+ (to_rep (first (rt temp___213))) (+ (ite (<= (to_rep (first (rt temp___213))) (to_rep (last (rt temp___213)))) (+ (- (to_rep (last (rt temp___213))) (to_rep (first (rt temp___213)))) 1) 0) (ite (<= 1 1) (+ (- 1 1) 1) 0))) 1)))))) (to_rep (last (let ((temp___213 (to__ (mk___rep s__split_fields2)))) (ite (= (length temp___213) 0) (mk 1 1) (mk (to_rep (first (rt temp___213))) (- (+ (to_rep (first (rt temp___213))) (+ (ite (<= (to_rep (first (rt temp___213))) (to_rep (last (rt temp___213)))) (+ (- (to_rep (last (rt temp___213))) (to_rep (first (rt temp___213)))) 1) 0) (ite (<= 1 1) (+ (- 1 1) 1) 0))) 1)))))))) true)))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (and (= (to_rep (last (rt (to__ (mk___rep s__split_fields4))))) (+ (- i3 first4) 1)) (forall ((j Int)) (=> (and (<= first4 j) (<= j i3)) (= (to_rep (select (elts (to__ (mk___rep s__split_fields4))) (+ (- j first4) 1))) (get (model__ l) j)))))))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (and (=> (<= first4 last5) (dynamic_property3 first4 last5 i3)) (and (<= first4 i3) (<= i3 last5)))))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= i3 last5)))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= i4 (mk_int__ref i3))))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= s__split_fields5 (mk___split_fields__ref s__split_fields4))))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= i5 i3)))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= s__split_fields6 s__split_fields4)))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= i6 i4)))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= s__split_fields7 s__split_fields5)))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= i7 i5)))
(assert (=> (and (<= first4 i2) (<= i2 last5)) (= s__split_fields8 s__split_fields6)))
(assert (=> (not (and (<= first4 i2) (<= i2 last5))) (= i6 (mk_int__ref i2))))
(assert (=> (not (and (<= first4 i2) (<= i2 last5))) (= s__split_fields7 (mk___split_fields__ref s__split_fields2))))
(assert (=> (not (and (<= first4 i2) (<= i2 last5))) (= i7 i2)))
(assert (=> (not (and (<= first4 i2) (<= i2 last5))) (= s__split_fields8 s__split_fields2)))
(assert (= result3 (mk_int__ref i1)))
(assert (= i8 first4))
(assert (<= first4 i8))
(assert (<= i8 last5))
(assert (and (and (and (= (length2 (mk___rep1 res__split_discrs res__split_fields2)) (- i9 first4)) (= (to_rep (last (rt (to__ (mk___rep s__split_fields9))))) (+ (- last5 i9) 1))) (forall ((j Int)) (=> (and (<= 1 j) (<= j (+ (- last5 i9) 1))) (= (to_rep (select (elts (to__ (mk___rep s__split_fields9))) j)) (to_rep (select (elts (to__ (mk___rep (us_split_fields__content s__split_fields7)))) j)))))) (forall ((j Int)) (=> (and (<= first4 j) (<= j (- i9 1))) (= (get (model__ (mk___rep1 res__split_discrs res__split_fields2)) j) (get (model__ l) (+ (- last5 j) first4)))))))
(assert (and (=> (<= first4 last5) (dynamic_property4 first4 last5 i9)) (and (<= first4 i9) (<= i9 last5))))
(assert (not (not (= (is_empty (mk___rep s__split_fields9)) true))))
(check-sat)
(exit)
