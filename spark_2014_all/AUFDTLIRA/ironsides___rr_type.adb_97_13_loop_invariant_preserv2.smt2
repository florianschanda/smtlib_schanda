(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort character 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (character character) Bool)
(declare-const dummy character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_91 Int)) (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last)) (= (to_rep (select a temp___idx_91)) (to_rep (select b (+ (- b__first a__first) temp___idx_91)))))))))))
(declare-sort domainnamestringtypeindex 0)
(declare-fun domainnamestringtypeindexqtint (domainnamestringtypeindex) Int)
(assert (forall ((i domainnamestringtypeindex)) (and (<= 1 (domainnamestringtypeindexqtint i)) (<= (domainnamestringtypeindexqtint i) 128))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 128)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (domainnamestringtypeindex domainnamestringtypeindex) Bool)
(declare-const dummy1 domainnamestringtypeindex)
(declare-datatypes () ((domainnamestringtypeindex__ref (mk_domainnamestringtypeindex__ref (domainnamestringtypeindex__content domainnamestringtypeindex)))))
(define-fun domainnamestringtypeindex__ref___projection ((a domainnamestringtypeindex__ref)) domainnamestringtypeindex (domainnamestringtypeindex__content a))
(declare-sort wirestringtypeindex 0)
(declare-fun wirestringtypeindexqtint (wirestringtypeindex) Int)
(assert (forall ((i wirestringtypeindex)) (and (<= 1 (wirestringtypeindexqtint i)) (<= (wirestringtypeindexqtint i) 129))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 129)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (wirestringtypeindex wirestringtypeindex) Bool)
(declare-const dummy2 wirestringtypeindex)
(declare-datatypes () ((wirestringtypeindex__ref (mk_wirestringtypeindex__ref (wirestringtypeindex__content wirestringtypeindex)))))
(define-fun wirestringtypeindex__ref___projection ((a wirestringtypeindex__ref)) wirestringtypeindex (wirestringtypeindex__content a))
(define-fun dynamic_invariant ((temp___expr_245 Int) (temp___is_init_241 Bool) (temp___skip_constant_242 Bool) (temp___do_toplevel_243 Bool) (temp___do_typ_inv_244 Bool)) Bool (=> (or (= temp___is_init_241 true) (<= 1 129)) (in_range3 temp___expr_245)))
(declare-const name (Array Int character))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant1 ((temp___expr_74 Int) (temp___is_init_70 Bool) (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool) (temp___do_typ_inv_73 Bool)) Bool (=> (or (= temp___is_init_70 true) (<= 0 255)) (in_range1 temp___expr_74)))
(define-fun dynamic_invariant2 ((temp___expr_228 Int) (temp___is_init_224 Bool) (temp___skip_constant_225 Bool) (temp___do_toplevel_226 Bool) (temp___do_typ_inv_227 Bool)) Bool (=> (or (= temp___is_init_224 true) (<= 1 128)) (in_range2 temp___expr_228)))
(declare-const index Int)
(declare-const o Int)
(declare-const result Int)
(declare-const index1 Int)
(declare-const index2 Int)
(declare-const result1 Int)
(declare-const index3 Int)
(assert (=> (<= 1 129) (in_range3 index)))
(assert (= (mk_int__ref result) (mk_int__ref index)))
(assert (= index1 1))
(assert (< index1 129))
(assert (not (= (to_rep (select name index1)) 0)))
(assert (and (< index2 129) (forall ((q Int)) (=> (and (<= 1 q) (<= q index2)) (not (= (to_rep (select name q)) 0))))))
(assert (and (=> (<= 1 129) (in_range3 index2)) (and (< index2 129) (not (= (to_rep (select name index2)) 0)))))
(assert (and (= o (+ index2 1)) (in_range3 (+ index2 1))))
(assert (= index2 result1))
(assert (= index3 o))
(assert (< index3 129))
(assert (not (= (to_rep (select name index3)) 0)))
(assert (not (< index3 129)))
(check-sat)
(exit)
