(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type value_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : value_type, value_type -> bool

logic dummy1 : value_type

type value_type__ref = { value_type__content : value_type
}

function value_type__ref___projection(a: value_type__ref) : value_type =
  (a).value_type__content

type tnumber_list_typeD1

predicate in_range3(x: int) = ((0 <= x) and (x <= 100000))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tnumber_list_typeD1, tnumber_list_typeD1 -> bool

logic dummy2 : tnumber_list_typeD1

type tnumber_list_typeD1__ref = { tnumber_list_typeD1__content :
tnumber_list_typeD1
}

function tnumber_list_typeD1__ref___projection(a: tnumber_list_typeD1__ref) : tnumber_list_typeD1 =
  (a).tnumber_list_typeD1__content

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  ((a[temp___idx_154]) = (b[((b__first - a__first) + temp___idx_154)]))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  ((a[temp___idx_154]) = (b[((b__first - a__first) + temp___idx_154)])))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  ((a[temp___idx_154]) = (b[((b__first - a__first) + temp___idx_154)]))))))))

type nearest_mode

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : nearest_mode, nearest_mode -> bool

logic dummy3 : nearest_mode

type nearest_mode__ref = { nearest_mode__content : nearest_mode
}

function nearest_mode__ref___projection(a: nearest_mode__ref) : nearest_mode =
  (a).nearest_mode__content

logic has_true : (int,bool) farray, int, int -> bool

logic has_true__function_guard : bool, (int,bool) farray, int, int -> prop

axiom has_true__post_axiom : true

axiom has_true__def_axiom :
  (forall number_list:(int,bool) farray.
  (forall low:int. forall high:int [has_true(number_list, low, high)].
  ((has_true(number_list, low, high) = true) <->
  (exists v:int. (((low <= v) and (v <= high)) and
  ((number_list[v]) = true))))))

logic number_list : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic mode : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic value : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

 (* File "prime_and_coprime_numbers.ads", line 3, characters 0-0 *)
goal WP_parameter_def :
  (forall right:int. forall left:int. forall right_is_out:bool.
  forall left_is_out:bool.
  forall test_prime_and_coprime_numbers__p__nearest_number__result:int.
  forall o:int. forall o1:int. forall o2:int. forall temp___271:bool.
  forall temp___270:int. forall o3:int. forall o4:int. forall o5:int.
  forall o6:int. forall o7:int. forall o8:int. forall temp___273:int.
  forall temp___272:bool. forall o9:int. forall o10:int. forall o11:int.
  forall o12:int. forall o13:int. forall o14:int. forall o15:int.
  forall o16:int. forall o17:int. forall o18:int. forall o19:int.
  forall o20:int. forall o21:int. forall o22:int. forall right_is_out1:bool.
  forall left_is_out1:bool.
  forall test_prime_and_coprime_numbers__p__nearest_number__result1:int.
  forall result:int. forall right1:int. forall result1:int. forall left1:int.
  forall result2:bool. forall result3:int.
  forall test_prime_and_coprime_numbers__p__nearest_number__result2:int.
  forall result4:int. forall right2:int. forall result5:bool.
  forall right_is_out2:bool. forall result6:bool. forall right3:int.
  forall right_is_out3:bool. forall result7:int. forall right4:int.
  forall result8:bool. forall right_is_out4:bool. forall result9:bool.
  forall right_is_out5:bool. forall right_is_out6:bool. forall right5:int.
  forall right_is_out7:bool. forall right6:int. forall right_is_out8:bool.
  forall right7:int. forall right_is_out9:bool. forall right8:int.
  forall right_is_out10:bool. forall right9:int. forall right_is_out11:bool.
  forall right10:int. forall right_is_out12:bool. forall result10:bool.
  forall right_is_out13:bool. forall right11:int. forall right_is_out14:bool.
  forall right12:int. forall right_is_out15:bool. forall result11:int.
  forall left2:int. forall result12:bool. forall left_is_out2:bool.
  forall result13:bool. forall left3:int. forall left_is_out3:bool.
  forall result14:int. forall left4:int. forall result15:bool.
  forall left_is_out4:bool. forall result16:bool. forall left_is_out5:bool.
  forall left_is_out6:bool. forall left5:int. forall left_is_out7:bool.
  forall left6:int. forall left_is_out8:bool. forall left7:int.
  forall left_is_out9:bool. forall left8:int. forall left_is_out10:bool.
  forall left9:int. forall left_is_out11:bool. forall left10:int.
  forall left_is_out12:bool. forall result17:bool. forall left_is_out13:bool.
  forall left11:int. forall left_is_out14:bool. forall left12:int.
  forall left_is_out15:bool. forall result18:bool. forall result19:int.
  forall test_prime_and_coprime_numbers__p__nearest_number__result3:int.
  forall result20:int.
  forall test_prime_and_coprime_numbers__p__nearest_number__result4:int.
  forall test_prime_and_coprime_numbers__p__nearest_number__result5:int__ref.
  forall test_prime_and_coprime_numbers__p__nearest_number__result6:int.
  forall result21:int__ref.
  forall test_prime_and_coprime_numbers__p__nearest_number__result7:int.
  forall test_prime_and_coprime_numbers__p__nearest_number__result8:int__ref.
  forall test_prime_and_coprime_numbers__p__nearest_number__result9:int.
  forall result22:int__ref.
  forall test_prime_and_coprime_numbers__p__nearest_number__result10:int.
  forall test_prime_and_coprime_numbers__p__nearest_number__result11:int__ref.
  forall test_prime_and_coprime_numbers__p__nearest_number__result12:int.
  forall test_prime_and_coprime_numbers__p__nearest_number__result13:int__ref.
  forall test_prime_and_coprime_numbers__p__nearest_number__result14:int.
  forall right13:int__ref. forall left13:int__ref.
  forall right_is_out16:bool__ref. forall left_is_out16:bool__ref.
  forall test_prime_and_coprime_numbers__p__nearest_number__result15:int__ref.
  forall right14:int. forall left14:int. forall right_is_out17:bool.
  forall left_is_out17:bool.
  forall test_prime_and_coprime_numbers__p__nearest_number__result16:int.
  forall right15:int__ref. forall left15:int__ref.
  forall right_is_out18:bool__ref. forall left_is_out18:bool__ref.
  forall test_prime_and_coprime_numbers__p__nearest_number__result17:int__ref.
  forall right16:int. forall left16:int. forall right_is_out19:bool.
  forall left_is_out19:bool.
  forall test_prime_and_coprime_numbers__p__nearest_number__result18:int.
  (in_range4(mode) -> (in_range2(value) -> ((((0 <= value) and
  (value <= 100000)) and (((mode = 0) and (has_true(number_list, value,
  100000) = true)) or ((not (mode = 0)) and (((mode = 1) and
  (has_true(number_list, 0, value) = true)) or ((not (mode = 1)) and
  (has_true(number_list, 0, 100000) = true)))))) -> ((((({ int__content =
  result } = { int__content = right }) and (right1 = 0)) and
  (in_range1(right1) and ((({ int__content = result1 } = { int__content =
  left }) and (left1 = 0)) and (in_range1(left1) and
  (((((test_prime_and_coprime_numbers__p__nearest_number__result15 = {
  int__content = test_prime_and_coprime_numbers__p__nearest_number__result2
  }) and ((left_is_out16 = { bool__content = left_is_out }) and
  ((right_is_out16 = { bool__content = right_is_out }) and ((left13 = {
  int__content = left1 }) and (right13 = { int__content = right1 }))))) and
  ((test_prime_and_coprime_numbers__p__nearest_number__result16 = test_prime_and_coprime_numbers__p__nearest_number__result2) and
  ((left_is_out17 = left_is_out1) and ((right_is_out17 = right_is_out1) and
  ((left14 = left1) and (right14 = right1)))))) and (((((0 <= value) and
  (value <= 100000)) and (o = value)) and (result2 = (number_list[o]))) and
  ((result2 = true) and (({ int__content = result3 } = { int__content =
  test_prime_and_coprime_numbers__p__nearest_number__result }) and
  (test_prime_and_coprime_numbers__p__nearest_number__result2 = value))))) or
  ((((((0 <= value) and (value <= 100000)) and (o = value)) and
  (result2 = (number_list[o]))) and ((not (result2 = true)) and
  ((test_prime_and_coprime_numbers__p__nearest_number__result2 = test_prime_and_coprime_numbers__p__nearest_number__result) and
  (test_prime_and_coprime_numbers__p__nearest_number__result2 = test_prime_and_coprime_numbers__p__nearest_number__result1)))) and
  ((((test_prime_and_coprime_numbers__p__nearest_number__result15 = test_prime_and_coprime_numbers__p__nearest_number__result13) and
  ((left_is_out16 = { bool__content = left_is_out14 }) and
  ((right_is_out16 = { bool__content = right_is_out14 }) and ((left13 = {
  int__content = left11 }) and (right13 = { int__content = right11 }))))) and
  ((test_prime_and_coprime_numbers__p__nearest_number__result16 = test_prime_and_coprime_numbers__p__nearest_number__result14) and
  ((left_is_out17 = left_is_out15) and ((right_is_out17 = right_is_out15) and
  ((left14 = left12) and (right14 = right12)))))) and (((((mode = 0) or
  (mode = 2)) and ((((((o1 = value) and (not (value = 2147483647))) and
  (o2 = (o1 + 1))) and ((right1 = result4) and (right2 = o2))) and
  ((((temp___271 = right_is_out) and ((temp___270 = right2) and ((({
  bool__content = result5 } = { bool__content = right_is_out }) and
  (((100000 <  right2) and (right_is_out2 = true)) or
  ((not (100000 <  right2)) and (right_is_out2 = false)))) and
  (((((right_is_out2 = right_is_out7) and (right2 = right5)) and
  ((right_is_out8 = right_is_out2) and (right6 = right2))) and
  ((((right_is_out2 = true) and (result6 = true)) or
  ((not (right_is_out2 = true)) and ((((0 <= right2) and
  (right2 <= 100000)) and (o3 = right2)) and
  (result6 = (number_list[o3]))))) and (result6 = true))) or
  (((((right_is_out2 = true) and (result6 = true)) or
  ((not (right_is_out2 = true)) and ((((0 <= right2) and
  (right2 <= 100000)) and (o3 = right2)) and
  (result6 = (number_list[o3]))))) and (not (result6 = true))) and (((({
  bool__content = right_is_out7 } = { bool__content = right_is_out5 }) and
  (right4 = right5)) and ((right_is_out8 = right_is_out6) and
  (right6 = right4))) and (((((value + 1) <= right3) and
  (right3 <= 100000)) and
  (forall v:int. (((value <= v) and (v <= right3)) ->
  (not ((number_list[v]) = true))))) and ((((- 2147483648) <= 2147483647) ->
  in_range1(right3)) and (((((o4 = right3) and
  (not (right3 = 2147483647))) and (o5 = (o4 + 1))) and
  ((right3 = result7) and (right4 = o5))) and
  (((right_is_out4 = right_is_out5) and (right_is_out6 = right_is_out4)) and
  (((right_is_out3 = result8) and (((100000 <  right4) and
  (right_is_out4 = true)) or ((not (100000 <  right4)) and
  (right_is_out4 = false)))) and ((((right_is_out4 = true) and
  (result9 = true)) or ((not (right_is_out4 = true)) and ((((0 <= right4) and
  (right4 <= 100000)) and (o6 = right4)) and
  (result9 = (number_list[o6]))))) and (result9 = true))))))))))))) and ((({
  bool__content = right_is_out9 } = { bool__content = right_is_out7 }) and ({
  int__content = right7 } = { int__content = right5 })) and
  ((right_is_out10 = right_is_out8) and (right8 = right6)))) and ((({
  bool__content = right_is_out11 } = { bool__content = right_is_out9 }) and
  ({ int__content = right9 } = { int__content = right7 })) and
  ((right_is_out12 = right_is_out10) and (right10 = right8))))) and ((({
  bool__content = right_is_out14 } = { bool__content = right_is_out11 }) and
  ({ int__content = right11 } = { int__content = right9 })) and
  ((right_is_out15 = right_is_out12) and (right12 = right10))))) or
  ((not ((mode = 0) or (mode = 2))) and (((result10 = right_is_out) and
  (right_is_out13 = of_int(1))) and (((right_is_out13 = right_is_out14) and
  (right1 = right11)) and ((right_is_out15 = right_is_out13) and
  (right12 = right1)))))) and (((((mode = 1) or (mode = 2)) and
  ((((((o7 = value) and (not (value = (- 2147483648)))) and
  (o8 = (o7 - 1))) and ((result11 = left1) and (left2 = o8))) and
  ((((temp___273 = left2) and ((temp___272 = left_is_out) and
  (((result12 = left_is_out) and (((left2 <  0) and (left_is_out2 = true)) or
  ((not (left2 <  0)) and (left_is_out2 = false)))) and
  (((((left_is_out2 = left_is_out7) and (left2 = left5)) and
  ((left_is_out8 = left_is_out2) and (left6 = left2))) and
  ((((left_is_out2 = true) and (result13 = true)) or
  ((not (left_is_out2 = true)) and ((((0 <= left2) and (left2 <= 100000)) and
  (o9 = left2)) and (result13 = (number_list[o9]))))) and
  (result13 = true))) or (((((left_is_out2 = true) and (result13 = true)) or
  ((not (left_is_out2 = true)) and ((((0 <= left2) and (left2 <= 100000)) and
  (o9 = left2)) and (result13 = (number_list[o9]))))) and
  (not (result13 = true))) and (((({ bool__content = left_is_out7 } = {
  bool__content = left_is_out5 }) and (left4 = left5)) and
  ((left_is_out8 = left_is_out6) and (left6 = left4))) and
  ((((0 <= left3) and (left3 <= (value - 1))) and
  (forall v:int. (((left3 <= v) and (v <= value)) ->
  (not ((number_list[v]) = true))))) and ((((- 2147483648) <= 2147483647) ->
  in_range1(left3)) and (((((o10 = left3) and
  (not (left3 = (- 2147483648)))) and (o11 = (o10 - 1))) and
  ((result14 = left3) and (left4 = o11))) and
  (((left_is_out4 = left_is_out5) and (left_is_out6 = left_is_out4)) and
  (((result15 = left_is_out3) and (((left4 <  0) and
  (left_is_out4 = true)) or ((not (left4 <  0)) and
  (left_is_out4 = false)))) and ((((left_is_out4 = true) and
  (result16 = true)) or ((not (left_is_out4 = true)) and ((((0 <= left4) and
  (left4 <= 100000)) and (o12 = left4)) and
  (result16 = (number_list[o12]))))) and (result16 = true))))))))))))) and
  ((({ bool__content = left_is_out9 } = { bool__content = left_is_out7 }) and
  ({ int__content = left7 } = { int__content = left5 })) and
  ((left_is_out10 = left_is_out8) and (left8 = left6)))) and ((({
  bool__content = left_is_out11 } = { bool__content = left_is_out9 }) and ({
  int__content = left9 } = { int__content = left7 })) and
  ((left_is_out12 = left_is_out10) and (left10 = left8))))) and ((({
  bool__content = left_is_out14 } = { bool__content = left_is_out11 }) and ({
  int__content = left11 } = { int__content = left9 })) and
  ((left_is_out15 = left_is_out12) and (left12 = left10))))) or
  ((not ((mode = 1) or (mode = 2))) and (((result17 = left_is_out) and
  (left_is_out13 = of_int(1))) and (((left_is_out13 = left_is_out14) and
  (left1 = left11)) and ((left_is_out15 = left_is_out13) and
  (left12 = left1)))))) and
  (((test_prime_and_coprime_numbers__p__nearest_number__result13 = test_prime_and_coprime_numbers__p__nearest_number__result11) and
  (test_prime_and_coprime_numbers__p__nearest_number__result14 = test_prime_and_coprime_numbers__p__nearest_number__result12)) and
  (((not (right_is_out14 = true)) and
  (((test_prime_and_coprime_numbers__p__nearest_number__result11 = test_prime_and_coprime_numbers__p__nearest_number__result8) and
  (test_prime_and_coprime_numbers__p__nearest_number__result12 = test_prime_and_coprime_numbers__p__nearest_number__result9)) and
  (((not (left_is_out14 = true)) and
  (((test_prime_and_coprime_numbers__p__nearest_number__result8 = test_prime_and_coprime_numbers__p__nearest_number__result5) and
  (test_prime_and_coprime_numbers__p__nearest_number__result9 = test_prime_and_coprime_numbers__p__nearest_number__result6)) and
  ((((((o15 = (right11 - value)) and in_range1((right11 - value))) and
  (o16 = abs_int(o15))) and ((o17 = o16) and in_range1(o16))) and
  (((((o13 = (left11 - value)) and in_range1((left11 - value))) and
  (o14 = abs_int(o13))) and ((o18 = o14) and in_range1(o14))) and
  (((o18 <= o17) and (result18 = true)) or ((not (o18 <= o17)) and
  (result18 = false))))) and (((result18 = true) and
  (((test_prime_and_coprime_numbers__p__nearest_number__result5 = {
  int__content = test_prime_and_coprime_numbers__p__nearest_number__result3
  }) and
  (test_prime_and_coprime_numbers__p__nearest_number__result6 = test_prime_and_coprime_numbers__p__nearest_number__result3)) and
  (((o19 = left11) and in_range2(left11)) and
  ((result19 = test_prime_and_coprime_numbers__p__nearest_number__result2) and
  (test_prime_and_coprime_numbers__p__nearest_number__result3 = o19))))) or
  ((not (result18 = true)) and
  (((test_prime_and_coprime_numbers__p__nearest_number__result5 = {
  int__content = test_prime_and_coprime_numbers__p__nearest_number__result4
  }) and
  (test_prime_and_coprime_numbers__p__nearest_number__result6 = test_prime_and_coprime_numbers__p__nearest_number__result4)) and
  (((o20 = right11) and in_range2(right11)) and
  ((result20 = test_prime_and_coprime_numbers__p__nearest_number__result2) and
  (test_prime_and_coprime_numbers__p__nearest_number__result4 = o20))))))))) or
  ((left_is_out14 = true) and
  (((test_prime_and_coprime_numbers__p__nearest_number__result8 = {
  int__content = test_prime_and_coprime_numbers__p__nearest_number__result7
  }) and
  (test_prime_and_coprime_numbers__p__nearest_number__result9 = test_prime_and_coprime_numbers__p__nearest_number__result7)) and
  (((o21 = right11) and in_range2(right11)) and ((result21 = { int__content =
  test_prime_and_coprime_numbers__p__nearest_number__result2 }) and
  (test_prime_and_coprime_numbers__p__nearest_number__result7 = o21)))))))) or
  ((right_is_out14 = true) and
  (((test_prime_and_coprime_numbers__p__nearest_number__result11 = {
  int__content = test_prime_and_coprime_numbers__p__nearest_number__result10
  }) and
  (test_prime_and_coprime_numbers__p__nearest_number__result12 = test_prime_and_coprime_numbers__p__nearest_number__result10)) and
  ((not (left_is_out14 = true)) and (((o22 = left11) and
  in_range2(left11)) and ((result22 = { int__content =
  test_prime_and_coprime_numbers__p__nearest_number__result2 }) and
  (test_prime_and_coprime_numbers__p__nearest_number__result10 = o22))))))))))))))))) and
  (((test_prime_and_coprime_numbers__p__nearest_number__result17 = test_prime_and_coprime_numbers__p__nearest_number__result15) and
  ((left_is_out18 = left_is_out16) and ((right_is_out18 = right_is_out16) and
  ((left15 = left13) and (right15 = right13))))) and
  ((test_prime_and_coprime_numbers__p__nearest_number__result18 = test_prime_and_coprime_numbers__p__nearest_number__result16) and
  ((left_is_out19 = left_is_out17) and ((right_is_out19 = right_is_out17) and
  ((left16 = left14) and (right16 = right14))))))) ->
  ((((bool_eq(to_int((number_list[value])), to_int(of_int(1))) = true) and
  ((test_prime_and_coprime_numbers__p__nearest_number__result17).int__content = value)) or
  (not (bool_eq(to_int((number_list[value])), to_int(of_int(1))) = true))) ->
  ((((match_bool(bool_eq(to_int((number_list[value])), to_int(of_int(0))),
  bool_eq(mode, 0), false) = true) and
  ((value <  (test_prime_and_coprime_numbers__p__nearest_number__result17).int__content) and
  (forall v:int. (((value <= v) and
  (v <= ((test_prime_and_coprime_numbers__p__nearest_number__result17).int__content - 1))) ->
  (not ((number_list[v]) = true)))))) or
  (not (match_bool(bool_eq(to_int((number_list[value])), to_int(of_int(0))),
  bool_eq(mode, 0), false) = true))) ->
  ((match_bool(bool_eq(to_int((number_list[value])), to_int(of_int(0))),
  bool_eq(mode, 1), false) = true) ->
  (((test_prime_and_coprime_numbers__p__nearest_number__result17).int__content <  value) ->
  in_range1(((test_prime_and_coprime_numbers__p__nearest_number__result17).int__content + 1)))))))))))
