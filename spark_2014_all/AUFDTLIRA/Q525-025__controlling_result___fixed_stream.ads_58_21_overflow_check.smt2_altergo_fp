(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic change__first : integer

logic change__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic new_val : (int,character) farray

logic new_val1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref___projection(a: t3b__ref) : integer = (a).t3b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq6 : us_t1, us_t1 -> bool

logic dummy7 : (int,character) farray

logic dummy8 : t1

type t4b__ref = { t4b__content : us_t1
}

function t4b__ref___projection(a: t4b__ref) : us_t1 = (a).t4b__content

logic r5b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r8b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy9 : integer

type t6b__ref = { t6b__content : integer
}

function t6b__ref___projection(a: t6b__ref) : integer = (a).t6b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

function bool_eq11(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq8 : us_t2, us_t2 -> bool

logic dummy10 : (int,character) farray

logic dummy11 : t2

type t7b__ref = { t7b__content : us_t2
}

function t7b__ref___projection(a: t7b__ref) : us_t2 = (a).t7b__content

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy12 : integer

type t9b__ref = { t9b__content : integer
}

function t9b__ref___projection(a: t9b__ref) : integer = (a).t9b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

function bool_eq13(x: us_t3, y: us_t3) : bool = bool_eq5((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq10 : us_t3, us_t3 -> bool

logic dummy13 : (int,character) farray

logic dummy14 : t3

type t10b__ref = { t10b__content : us_t3
}

function t10b__ref___projection(a: t10b__ref) : us_t3 = (a).t10b__content

logic temp___308 : int, int, int -> us_t1

axiom def_axiom :
  (forall temp___310:int. forall temp___311:int. forall temp___312:int.
  (in_range3(temp___310) -> ((dynamic_property(1, 2147483647, temp___311,
  temp___312) -> ((to_rep1(first2((temp___308(temp___310, temp___311,
  temp___312)).rt1)) = temp___311) and (to_rep1(last2((temp___308(temp___310,
  temp___311, temp___312)).rt1)) = temp___312))) and
  (forall temp___313:int. (to_rep(((temp___308(temp___310, temp___311,
  temp___312)).elts1[temp___313])) = temp___310)))))

 (* File "fixed_stream.adb", line 17, characters 0-0 *)
goal WP_parameter_def :
  (forall change:(int,character) farray. forall len:int. forall o:int.
  forall o1:int. forall o2:int. forall o3:int. forall o4:int.
  forall temp___315:(int,character) farray. forall temp___3151:t1.
  forall temp___316:(int,character) farray. forall temp___3161:t.
  forall temp___317:(int,character) farray. forall temp___3171:t.
  forall o5:(int,character) farray.
  forall fixed_stream__trim_string__R5b__assume:int.
  forall fixed_stream__trim_string__R8b__assume:int.
  forall o6:(int,character) farray. forall temp___319:(int,character) farray.
  forall temp___3191:t3. forall temp___320:(int,character) farray.
  forall temp___3201:t2. forall o7:(int,character) farray.
  forall temp___322:(int,character) farray. forall temp___3221:t2.
  forall temp___323:(int,character) farray. forall temp___3231:t2.
  forall o8:(int,character) farray. forall i:int. forall o9:int.
  forall o10:int. forall o11:int. forall o12:character. forall o13:int.
  forall o14:bool. forall result:int. forall len1:int.
  forall result1:(int,character) farray.
  forall change1:(int,character) farray.
  forall result2:(int,character) farray.
  forall change2:(int,character) farray.
  forall change3:(int,character) farray. forall len2:int.
  forall change4:(int,character) farray. forall len3:int.
  forall result3:bool. (dynamic_property(1, 2147483647,
  to_rep1(change__first), to_rep1(change__last)) -> (dynamic_property(1,
  2147483647, to_rep1(first(new_val1)), to_rep1(last(new_val1))) ->
  ((((((((o1 = length({ elts = new_val; rt = new_val1 })) and
  in_range1(length({ elts = new_val; rt = new_val1 }))) and
  (((((to_rep1(change__first) <= to_rep1(change__last)) and
  (o = ((to_rep1(change__last) - to_rep1(change__first)) + 1))) or
  ((not (to_rep1(change__first) <= to_rep1(change__last))) and (o = 0))) and
  ((o2 = o) and in_range1(o))) and (o3 = min(o2, o1)))) and ((o4 = o3) and
  in_range4(o3))) and (({ int__content = result } = { int__content = len
  }) and (len1 = o4))) and (in_range4(len1) and
  (((((((to_rep1(first2((temp___308(0, to_rep1(change__first),
  to_rep1(change__last))).rt1)) = to_rep1(change__first)) and
  ((to_rep1(last2((temp___308(0, to_rep1(change__first),
  to_rep1(change__last))).rt1)) = to_rep1(change__last)) and ({ elts1 =
  temp___315; rt1 = temp___3151 } = temp___308(0, to_rep1(change__first),
  to_rep1(change__last))))) and ((temp___315 = temp___316) and
  (mk(to_rep1(first2(temp___3151)),
  to_rep1(last2(temp___3151))) = temp___3161))) and
  ((((to_rep1(first(temp___3161)) <= to_rep1(last(temp___3161))) and
  (((to_rep1(change__first) <= to_rep1(change__last)) and
  (((to_rep1(last(temp___3161)) - to_rep1(first(temp___3161))) + 1) = ((to_rep1(change__last) - to_rep1(change__first)) + 1))) or
  ((not (to_rep1(change__first) <= to_rep1(change__last))) and
  (((to_rep1(last(temp___3161)) - to_rep1(first(temp___3161))) + 1) = 0)))) or
  ((not (to_rep1(first(temp___3161)) <= to_rep1(last(temp___3161)))) and
  (((to_rep1(change__first) <= to_rep1(change__last)) and
  (0 = ((to_rep1(change__last) - to_rep1(change__first)) + 1))) or
  (not (to_rep1(change__first) <= to_rep1(change__last)))))) and ({ elts =
  temp___317; rt = temp___3171 } = { elts = temp___316; rt = temp___3161
  }))) and (o5 = slide(temp___317, to_rep1(first(temp___3171)),
  to_rep1(change__first)))) and (({ map__content = result1 } = {
  map__content = change }) and (change1 = o5))) and
  (((((fixed_stream__trim_string__R5b__assume = (to_rep1(change__first) + (len1 - 1))) and
  in_range1((to_rep1(change__first) + (len1 - 1)))) and
  (fixed_stream__trim_string__R5b__assume = r5b)) and in_range1(r5b)) and
  (((((fixed_stream__trim_string__R8b__assume = (to_rep1(first(new_val1)) + (len1 - 1))) and
  in_range1((to_rep1(first(new_val1)) + (len1 - 1)))) and
  (fixed_stream__trim_string__R8b__assume = r8b)) and in_range1(r8b)) and
  ((((((((to_rep1(first(new_val1)) <= r8b) ->
  (((to_rep1(first(new_val1)) <= to_rep1(first(new_val1))) and
  (to_rep1(first(new_val1)) <= to_rep1(last(new_val1)))) and
  ((to_rep1(first(new_val1)) <= r8b) and
  (r8b <= to_rep1(last(new_val1)))))) and (o6 = new_val)) and
  ((o6 = temp___319) and (mk3(to_rep1(first(new_val1)),
  r8b) = temp___3191))) and
  ((((to_rep1(first6(temp___3191)) <= to_rep1(last6(temp___3191))) and
  (((to_rep1(change__first) <= r5b) and
  (((to_rep1(last6(temp___3191)) - to_rep1(first6(temp___3191))) + 1) = ((r5b - to_rep1(change__first)) + 1))) or
  ((not (to_rep1(change__first) <= r5b)) and
  (((to_rep1(last6(temp___3191)) - to_rep1(first6(temp___3191))) + 1) = 0)))) or
  ((not (to_rep1(first6(temp___3191)) <= to_rep1(last6(temp___3191)))) and
  (((to_rep1(change__first) <= r5b) and
  (0 = ((r5b - to_rep1(change__first)) + 1))) or
  (not (to_rep1(change__first) <= r5b))))) and ((slide(temp___319,
  to_rep1(first6(temp___3191)), to_rep1(change__first)) = temp___320) and
  (mk2(to_rep1(change__first), r5b) = temp___3201)))) and
  (((((to_rep1(change__first) <= r5b) ->
  (((to_rep1(change__first) <= to_rep1(change__first)) and
  (to_rep1(change__first) <= to_rep1(change__last))) and
  ((to_rep1(change__first) <= r5b) and (r5b <= to_rep1(change__last))))) and
  (o7 = change1)) and ((o7 = temp___322) and (mk2(to_rep1(change__first),
  r5b) = temp___3221))) and
  ((((to_rep1(first4(temp___3201)) <= to_rep1(last4(temp___3201))) and
  (((to_rep1(first4(temp___3221)) <= to_rep1(last4(temp___3221))) and
  (((to_rep1(last4(temp___3201)) - to_rep1(first4(temp___3201))) + 1) = ((to_rep1(last4(temp___3221)) - to_rep1(first4(temp___3221))) + 1))) or
  ((not (to_rep1(first4(temp___3221)) <= to_rep1(last4(temp___3221)))) and
  (((to_rep1(last4(temp___3201)) - to_rep1(first4(temp___3201))) + 1) = 0)))) or
  ((not (to_rep1(first4(temp___3201)) <= to_rep1(last4(temp___3201)))) and
  (((to_rep1(first4(temp___3221)) <= to_rep1(last4(temp___3221))) and
  (0 = ((to_rep1(last4(temp___3221)) - to_rep1(first4(temp___3221))) + 1))) or
  (not (to_rep1(first4(temp___3221)) <= to_rep1(last4(temp___3221))))))) and
  ({ elts2 = temp___323; rt2 = temp___3231 } = { elts2 = temp___320; rt2 =
  temp___3201 })))) and
  (forall temp___324:int. ((((to_rep1(change__first) <= temp___324) and
  (temp___324 <= r5b)) and ((o8[temp___324]) = (temp___323[temp___324]))) or
  ((not ((to_rep1(change__first) <= temp___324) and (temp___324 <= r5b))) and
  ((o8[temp___324]) = (change1[temp___324])))))) and ((change1 = result2) and
  (change2 = o8)))))))) and (((len1 = len2) and (change2 = change3)) and
  ((len3 = len1) and (change4 = change2)))) ->
  (((to_rep1(change__first) <= i) and (i <= to_rep1(change__last))) ->
  (((((((to_rep1(change__first) <= i) and (i <= to_rep1(change__last))) and
  (o11 = i)) and (o12 = (change3[o11]))) and (o13 = to_rep(o12))) and
  (((o13 = 0) and (o14 = true)) or ((not (o13 = 0)) and (o14 = false)))) ->
  ((((to_rep1(first(new_val1)) <  0) and (result3 = true)) or
  ((not (to_rep1(first(new_val1)) <  0)) and
  (((o9 = (2147483647 - to_rep1(first(new_val1)))) and
  in_range1((2147483647 - to_rep1(first(new_val1))))) and
  (((o10 = (i - to_rep1(change__first))) and
  in_range1((i - to_rep1(change__first)))) and (((o10 <= o9) and
  (result3 = true)) or ((not (o10 <= o9)) and (result3 = false))))))) ->
  ((result3 = true) -> in_range1((i - to_rep1(change__first)))))))))))
