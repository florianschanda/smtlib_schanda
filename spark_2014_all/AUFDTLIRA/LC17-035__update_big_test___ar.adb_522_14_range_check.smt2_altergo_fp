(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type it1

predicate in_range(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type it2

predicate in_range1(x: int) = ((5 <= x) and (x <= 50))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : it2, it2 -> bool

logic dummy1 : it2

type it2__ref = { it2__content : it2
}

function it2__ref___projection(a: it2__ref) : it2 = (a).it2__content

type et1

predicate in_range2(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : et1, et1 -> bool

logic dummy2 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic dummy3 : (int,et1) farray

logic value__size : int

logic object__size : (int,et1) farray -> int

logic value__component__size : int

logic object__component__size : (int,et1) farray -> int

logic value__alignment : int

logic object__alignment : (int,et1) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,et1) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,et1) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,et1) farray, (int,et1) farray -> bool

type map__ref1 = { map__content1 : (int,(int,et1) farray) farray
}

logic slide1 : (int,(int,et1) farray) farray, int,
  int -> (int,(int,et1) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,et1) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,(int,et1) farray) farray, int, int,
  (int,(int,et1) farray) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,(int,et1) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,et1) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (bool_eq4((a[temp___idx_155]), 1, 10,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 10) = true)) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq4((a[temp___idx_155]), 1, 10,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 10) = true))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,et1) farray) farray.
  forall b:(int,(int,et1) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq4((a[temp___idx_155]), 1, 10,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 10) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic temp___1026 : (int,(int,et1) farray) farray, int, (int,et1) farray,
  int, (int,et1) farray -> (int,(int,et1) farray) farray

logic temp___1034 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___1041 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___1049 : (int,(int,et1) farray) farray, int, (int,et1) farray,
  int, (int,et1) farray -> (int,(int,et1) farray) farray

logic temp___1057 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___1064 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___1072 : (int,(int,et1) farray) farray, int, (int,et1) farray,
  int, (int,et1) farray -> (int,(int,et1) farray) farray

logic temp___1080 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___1087 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___1095 : (int,(int,et1) farray) farray, int, (int,et1) farray,
  int, (int,et1) farray -> (int,(int,et1) farray) farray

logic temp___1103 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___1110 : (int,et1) farray, int, int -> (int,et1) farray

logic temp___4698 : (int,(int,et1) farray) farray, int,
  (int,et1) farray -> (int,(int,et1) farray) farray

logic temp___4704 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom :
  (forall temp___4700:(int,(int,et1) farray) farray.
  (forall temp___4701:int.
  (forall temp___4702:(int,et1) farray. (in_range1(temp___4701) ->
  (forall temp___4703:int. (((temp___4703 = temp___4701) ->
  ((temp___4698(temp___4700, temp___4701,
  temp___4702)[temp___4703]) = temp___4702)) and
  ((not (temp___4703 = temp___4701)) -> ((temp___4698(temp___4700,
  temp___4701, temp___4702)[temp___4703]) = (temp___4700[temp___4703])))))))))

axiom def_axiom1 :
  (forall temp___4706:(int,et1) farray.
  (forall temp___4707:int. forall temp___4708:int.
  ((in_range(temp___4707) and in_range2(temp___4708)) ->
  (forall temp___4709:int. (((temp___4709 = temp___4707) ->
  (to_rep((temp___4704(temp___4706, temp___4707,
  temp___4708)[temp___4709])) = temp___4708)) and
  ((not (temp___4709 = temp___4707)) -> ((temp___4704(temp___4706,
  temp___4707, temp___4708)[temp___4709]) = (temp___4706[temp___4709]))))))))

axiom def_axiom2 :
  (forall temp___1028:(int,(int,et1) farray) farray.
  (forall temp___1029:int. forall temp___1031:int.
  (forall temp___1030:(int,et1) farray. forall temp___1032:(int,et1) farray.
  ((in_range1(temp___1029) and in_range1(temp___1031)) ->
  (forall temp___1033:int. (((temp___1033 = temp___1031) ->
  ((temp___1026(temp___1028, temp___1029, temp___1030, temp___1031,
  temp___1032)[temp___1033]) = temp___1032)) and
  ((not (temp___1033 = temp___1031)) -> (((temp___1033 = temp___1029) ->
  ((temp___1026(temp___1028, temp___1029, temp___1030, temp___1031,
  temp___1032)[temp___1033]) = temp___1030)) and
  ((not (temp___1033 = temp___1029)) -> ((temp___1026(temp___1028,
  temp___1029, temp___1030, temp___1031,
  temp___1032)[temp___1033]) = (temp___1028[temp___1033])))))))))))

axiom def_axiom3 :
  (forall temp___1036:(int,et1) farray.
  (forall temp___1037:int. forall temp___1038:int.
  ((in_range(temp___1037) and in_range2(temp___1038)) ->
  (forall temp___1039:int. (((temp___1039 = temp___1037) ->
  (to_rep((temp___1034(temp___1036, temp___1037,
  temp___1038)[temp___1039])) = temp___1038)) and
  ((not (temp___1039 = temp___1037)) -> ((temp___1034(temp___1036,
  temp___1037, temp___1038)[temp___1039]) = (temp___1036[temp___1039]))))))))

axiom def_axiom4 :
  (forall temp___1043:(int,et1) farray.
  (forall temp___1044:int. forall temp___1045:int.
  ((in_range(temp___1044) and in_range2(temp___1045)) ->
  (forall temp___1046:int. (((temp___1046 = temp___1044) ->
  (to_rep((temp___1041(temp___1043, temp___1044,
  temp___1045)[temp___1046])) = temp___1045)) and
  ((not (temp___1046 = temp___1044)) -> ((temp___1041(temp___1043,
  temp___1044, temp___1045)[temp___1046]) = (temp___1043[temp___1046]))))))))

axiom def_axiom5 :
  (forall temp___1051:(int,(int,et1) farray) farray.
  (forall temp___1052:int. forall temp___1054:int.
  (forall temp___1053:(int,et1) farray. forall temp___1055:(int,et1) farray.
  ((in_range1(temp___1052) and in_range1(temp___1054)) ->
  (forall temp___1056:int. (((temp___1056 = temp___1054) ->
  ((temp___1049(temp___1051, temp___1052, temp___1053, temp___1054,
  temp___1055)[temp___1056]) = temp___1055)) and
  ((not (temp___1056 = temp___1054)) -> (((temp___1056 = temp___1052) ->
  ((temp___1049(temp___1051, temp___1052, temp___1053, temp___1054,
  temp___1055)[temp___1056]) = temp___1053)) and
  ((not (temp___1056 = temp___1052)) -> ((temp___1049(temp___1051,
  temp___1052, temp___1053, temp___1054,
  temp___1055)[temp___1056]) = (temp___1051[temp___1056])))))))))))

axiom def_axiom6 :
  (forall temp___1059:(int,et1) farray.
  (forall temp___1060:int. forall temp___1061:int.
  ((in_range(temp___1060) and in_range2(temp___1061)) ->
  (forall temp___1062:int. (((temp___1062 = temp___1060) ->
  (to_rep((temp___1057(temp___1059, temp___1060,
  temp___1061)[temp___1062])) = temp___1061)) and
  ((not (temp___1062 = temp___1060)) -> ((temp___1057(temp___1059,
  temp___1060, temp___1061)[temp___1062]) = (temp___1059[temp___1062]))))))))

axiom def_axiom7 :
  (forall temp___1066:(int,et1) farray.
  (forall temp___1067:int. forall temp___1068:int.
  ((in_range(temp___1067) and in_range2(temp___1068)) ->
  (forall temp___1069:int. (((temp___1069 = temp___1067) ->
  (to_rep((temp___1064(temp___1066, temp___1067,
  temp___1068)[temp___1069])) = temp___1068)) and
  ((not (temp___1069 = temp___1067)) -> ((temp___1064(temp___1066,
  temp___1067, temp___1068)[temp___1069]) = (temp___1066[temp___1069]))))))))

axiom def_axiom8 :
  (forall temp___1074:(int,(int,et1) farray) farray.
  (forall temp___1075:int. forall temp___1077:int.
  (forall temp___1076:(int,et1) farray. forall temp___1078:(int,et1) farray.
  ((in_range1(temp___1075) and in_range1(temp___1077)) ->
  (forall temp___1079:int. (((temp___1079 = temp___1077) ->
  ((temp___1072(temp___1074, temp___1075, temp___1076, temp___1077,
  temp___1078)[temp___1079]) = temp___1078)) and
  ((not (temp___1079 = temp___1077)) -> (((temp___1079 = temp___1075) ->
  ((temp___1072(temp___1074, temp___1075, temp___1076, temp___1077,
  temp___1078)[temp___1079]) = temp___1076)) and
  ((not (temp___1079 = temp___1075)) -> ((temp___1072(temp___1074,
  temp___1075, temp___1076, temp___1077,
  temp___1078)[temp___1079]) = (temp___1074[temp___1079])))))))))))

axiom def_axiom9 :
  (forall temp___1082:(int,et1) farray.
  (forall temp___1083:int. forall temp___1084:int.
  ((in_range(temp___1083) and in_range2(temp___1084)) ->
  (forall temp___1085:int. (((temp___1085 = temp___1083) ->
  (to_rep((temp___1080(temp___1082, temp___1083,
  temp___1084)[temp___1085])) = temp___1084)) and
  ((not (temp___1085 = temp___1083)) -> ((temp___1080(temp___1082,
  temp___1083, temp___1084)[temp___1085]) = (temp___1082[temp___1085]))))))))

axiom def_axiom10 :
  (forall temp___1089:(int,et1) farray.
  (forall temp___1090:int. forall temp___1091:int.
  ((in_range(temp___1090) and in_range2(temp___1091)) ->
  (forall temp___1092:int. (((temp___1092 = temp___1090) ->
  (to_rep((temp___1087(temp___1089, temp___1090,
  temp___1091)[temp___1092])) = temp___1091)) and
  ((not (temp___1092 = temp___1090)) -> ((temp___1087(temp___1089,
  temp___1090, temp___1091)[temp___1092]) = (temp___1089[temp___1092]))))))))

axiom def_axiom11 :
  (forall temp___1097:(int,(int,et1) farray) farray.
  (forall temp___1098:int. forall temp___1100:int.
  (forall temp___1099:(int,et1) farray. forall temp___1101:(int,et1) farray.
  ((in_range1(temp___1098) and in_range1(temp___1100)) ->
  (forall temp___1102:int. (((temp___1102 = temp___1100) ->
  ((temp___1095(temp___1097, temp___1098, temp___1099, temp___1100,
  temp___1101)[temp___1102]) = temp___1101)) and
  ((not (temp___1102 = temp___1100)) -> (((temp___1102 = temp___1098) ->
  ((temp___1095(temp___1097, temp___1098, temp___1099, temp___1100,
  temp___1101)[temp___1102]) = temp___1099)) and
  ((not (temp___1102 = temp___1098)) -> ((temp___1095(temp___1097,
  temp___1098, temp___1099, temp___1100,
  temp___1101)[temp___1102]) = (temp___1097[temp___1102])))))))))))

axiom def_axiom12 :
  (forall temp___1105:(int,et1) farray.
  (forall temp___1106:int. forall temp___1107:int.
  ((in_range(temp___1106) and in_range2(temp___1107)) ->
  (forall temp___1108:int. (((temp___1108 = temp___1106) ->
  (to_rep((temp___1103(temp___1105, temp___1106,
  temp___1107)[temp___1108])) = temp___1107)) and
  ((not (temp___1108 = temp___1106)) -> ((temp___1103(temp___1105,
  temp___1106, temp___1107)[temp___1108]) = (temp___1105[temp___1108]))))))))

axiom def_axiom13 :
  (forall temp___1112:(int,et1) farray.
  (forall temp___1113:int. forall temp___1114:int.
  ((in_range(temp___1113) and in_range2(temp___1114)) ->
  (forall temp___1115:int. (((temp___1115 = temp___1113) ->
  (to_rep((temp___1110(temp___1112, temp___1113,
  temp___1114)[temp___1115])) = temp___1114)) and
  ((not (temp___1115 = temp___1113)) -> ((temp___1110(temp___1112,
  temp___1113, temp___1114)[temp___1115]) = (temp___1112[temp___1115]))))))))

 (* File "ar.adb", line 513, characters 0-0 *)
goal WP_parameter_def :
  (forall j_next:int. forall f:int. forall o:int.
  forall t:(int,(int,et1) farray) farray.
  forall a:(int,(int,et1) farray) farray. forall result:int.
  forall j_next1:int. forall result1:int. forall j_next2:int. (in_range(i) ->
  (in_range1(j) -> (in_range2(e) -> (((5 <= 50) -> in_range1(j_next)) ->
  (((0 <= 99) -> in_range2(f)) -> ((bool_eq5(a, 5, 50, temp___4698(t, j,
  temp___4704((t[j]), i, e)), 5, 50) = true) -> ((((j = 50) and (({
  int__content = result } = { int__content = j_next }) and (j_next1 = 5))) or
  ((not (j = 50)) and ((((o = (j + 1)) and in_range1((j + 1))) and (({
  int__content = result1 } = { int__content = j_next }) and
  (j_next2 = o))) and (j_next1 = j_next2)))) -> ((not (e = 0)) ->
  in_range2((e - 1)))))))))))
