(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy1 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq1 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__use_unchecked_union__small_record__field1 integer) (rec__use_unchecked_union__small_record__field2 (Array Int integer))))))
(define-fun us_split_fields_field1__projection ((a us_split_fields)) integer (rec__use_unchecked_union__small_record__field1 a))
(define-fun us_split_fields_field2__projection ((a us_split_fields)) (Array Int integer) (rec__use_unchecked_union__small_record__field2 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__use_unchecked_union__small_record__field1 (us_split_fields1 a))) (to_rep (rec__use_unchecked_union__small_record__field1 (us_split_fields1 b)))) (= (bool_eq (rec__use_unchecked_union__small_record__field2 (us_split_fields1 a)) 0 2 (rec__use_unchecked_union__small_record__field2 (us_split_fields1 b)) 0 2) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const use_unchecked_union__small_record__field1__first__bit Int)
(declare-const use_unchecked_union__small_record__field1__last__bit Int)
(declare-const use_unchecked_union__small_record__field1__position Int)
(assert (<= 0 use_unchecked_union__small_record__field1__first__bit))
(assert (< use_unchecked_union__small_record__field1__first__bit use_unchecked_union__small_record__field1__last__bit))
(assert (<= 0 use_unchecked_union__small_record__field1__position))
(declare-const use_unchecked_union__small_record__field2__first__bit Int)
(declare-const use_unchecked_union__small_record__field2__last__bit Int)
(declare-const use_unchecked_union__small_record__field2__position Int)
(assert (<= 0 use_unchecked_union__small_record__field2__first__bit))
(assert (< use_unchecked_union__small_record__field2__first__bit use_unchecked_union__small_record__field2__last__bit))
(assert (<= 0 use_unchecked_union__small_record__field2__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((small_record__ref (mk_small_record__ref (small_record__content us_rep)))))
(define-fun small_record__ref___projection ((a small_record__ref)) us_rep (small_record__content a))
(declare-const dummy3 (Array Int integer))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int integer)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int integer)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int integer)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq3 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__use_unchecked_union__big_record__field1 integer) (rec__use_unchecked_union__big_record__field2 (Array Int integer))))))
(define-fun us_split_fields_field1__2__projection ((a us_split_fields2)) integer (rec__use_unchecked_union__big_record__field1 a))
(define-fun us_split_fields_field2__2__projection ((a us_split_fields2)) (Array Int integer) (rec__use_unchecked_union__big_record__field2 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__use_unchecked_union__big_record__field1 (us_split_fields3 a))) (to_rep (rec__use_unchecked_union__big_record__field1 (us_split_fields3 b)))) (= (bool_eq (rec__use_unchecked_union__big_record__field2 (us_split_fields3 a)) 0 3 (rec__use_unchecked_union__big_record__field2 (us_split_fields3 b)) 0 3) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const use_unchecked_union__big_record__field1__first__bit Int)
(declare-const use_unchecked_union__big_record__field1__last__bit Int)
(declare-const use_unchecked_union__big_record__field1__position Int)
(assert (<= 0 use_unchecked_union__big_record__field1__first__bit))
(assert (< use_unchecked_union__big_record__field1__first__bit use_unchecked_union__big_record__field1__last__bit))
(assert (<= 0 use_unchecked_union__big_record__field1__position))
(declare-const use_unchecked_union__big_record__field2__first__bit Int)
(declare-const use_unchecked_union__big_record__field2__last__bit Int)
(declare-const use_unchecked_union__big_record__field2__position Int)
(assert (<= 0 use_unchecked_union__big_record__field2__first__bit))
(assert (< use_unchecked_union__big_record__field2__first__bit use_unchecked_union__big_record__field2__last__bit))
(assert (<= 0 use_unchecked_union__big_record__field2__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((big_record__ref (mk_big_record__ref (big_record__content us_rep1)))))
(define-fun big_record__ref___projection ((a big_record__ref)) us_rep1 (big_record__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__use_unchecked_union__myunion__discr integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) integer (rec__use_unchecked_union__myunion__discr a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__use_unchecked_union__myunion__record1 us_rep) (rec__use_unchecked_union__myunion__record2 us_rep1)))))
(define-fun us_split_fields_record1__projection ((a us_split_fields4)) us_rep (rec__use_unchecked_union__myunion__record1 a))
(define-fun us_split_fields_record2__projection ((a us_split_fields4)) us_rep1 (rec__use_unchecked_union__myunion__record2 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs1 us_split_discrs) (us_split_fields5 us_split_fields4) (attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun us_rep___5__projection ((a us_rep2)) Bool (attr__constrained a))
(define-fun use_unchecked_union__myunion__record1__pred ((a us_rep2)) Bool (= (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a))) 0))
(define-fun use_unchecked_union__myunion__record2__pred ((a us_rep2)) Bool (not (= (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a))) 0)))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a))) (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 b)))) (and (=> (use_unchecked_union__myunion__record1__pred a) (= (bool_eq1 (rec__use_unchecked_union__myunion__record1 (us_split_fields5 a)) (rec__use_unchecked_union__myunion__record1 (us_split_fields5 b))) true)) (=> (use_unchecked_union__myunion__record2__pred a) (= (bool_eq2 (rec__use_unchecked_union__myunion__record2 (us_split_fields5 a)) (rec__use_unchecked_union__myunion__record2 (us_split_fields5 b))) true)))) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const use_unchecked_union__myunion__discr__first__bit Int)
(declare-const use_unchecked_union__myunion__discr__last__bit Int)
(declare-const use_unchecked_union__myunion__discr__position Int)
(assert (<= 0 use_unchecked_union__myunion__discr__first__bit))
(assert (< use_unchecked_union__myunion__discr__first__bit use_unchecked_union__myunion__discr__last__bit))
(assert (<= 0 use_unchecked_union__myunion__discr__position))
(declare-const use_unchecked_union__myunion__record1__first__bit Int)
(declare-const use_unchecked_union__myunion__record1__last__bit Int)
(declare-const use_unchecked_union__myunion__record1__position Int)
(assert (<= 0 use_unchecked_union__myunion__record1__first__bit))
(assert (< use_unchecked_union__myunion__record1__first__bit use_unchecked_union__myunion__record1__last__bit))
(assert (<= 0 use_unchecked_union__myunion__record1__position))
(declare-const use_unchecked_union__myunion__record2__first__bit Int)
(declare-const use_unchecked_union__myunion__record2__last__bit Int)
(declare-const use_unchecked_union__myunion__record2__position Int)
(assert (<= 0 use_unchecked_union__myunion__record2__first__bit))
(assert (< use_unchecked_union__myunion__record2__first__bit use_unchecked_union__myunion__record2__last__bit))
(assert (<= 0 use_unchecked_union__myunion__record2__position))
(declare-fun user_eq5 (us_rep2 us_rep2) Bool)
(declare-const dummy5 us_rep2)
(declare-datatypes () ((myunion__ref (mk_myunion__ref (myunion__content us_rep2)))))
(define-fun myunion__ref___projection ((a myunion__ref)) us_rep2 (myunion__content a))
(declare-fun temp_____aggregate_def_183 (Int Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_197 (Int Int Int Int) (Array Int integer))
(define-fun default_initial_assumption ((temp___expr_212 us_rep2) (temp___skip_top_level_213 Bool)) Bool (and (= (attr__constrained temp___expr_212) false) (and (and (= (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 temp___expr_212))) 0) (=> (use_unchecked_union__myunion__record1__pred temp___expr_212) (and (= (to_rep (rec__use_unchecked_union__small_record__field1 (us_split_fields1 (rec__use_unchecked_union__myunion__record1 (us_split_fields5 temp___expr_212))))) 0) (= (rec__use_unchecked_union__small_record__field2 (us_split_fields1 (rec__use_unchecked_union__myunion__record1 (us_split_fields5 temp___expr_212)))) (temp_____aggregate_def_183 0 0 0))))) (=> (use_unchecked_union__myunion__record2__pred temp___expr_212) (and (= (to_rep (rec__use_unchecked_union__big_record__field1 (us_split_fields3 (rec__use_unchecked_union__myunion__record2 (us_split_fields5 temp___expr_212))))) 0) (= (rec__use_unchecked_union__big_record__field2 (us_split_fields3 (rec__use_unchecked_union__myunion__record2 (us_split_fields5 temp___expr_212)))) (temp_____aggregate_def_197 0 0 0 0)))))))
(declare-const output__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const num Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun temp_____aggregate_def_259 (Int Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_271 (Int Int Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_284 (Int) (Array Int integer))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 1))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 2))
(declare-const rliteral2 integer)
(assert (= (integerqtint rliteral2) 3))
(assert (forall ((temp___261 Int) (temp___262 Int) (temp___263 Int)) (let ((temp___260 (temp_____aggregate_def_259 temp___261 temp___262 temp___263))) (=> (and (and (dynamic_invariant temp___261 true true true true) (dynamic_invariant temp___262 true true true true)) (dynamic_invariant temp___263 true true true true)) (and (and (= (select temp___260 0) rliteral) (= (select temp___260 1) rliteral1)) (= (select temp___260 2) rliteral2))))))
(declare-const rliteral3 integer)
(assert (= (integerqtint rliteral3) 4))
(assert (forall ((temp___273 Int) (temp___274 Int) (temp___275 Int) (temp___276 Int)) (let ((temp___272 (temp_____aggregate_def_271 temp___273 temp___274 temp___275 temp___276))) (=> (and (and (and (dynamic_invariant temp___273 true true true true) (dynamic_invariant temp___274 true true true true)) (dynamic_invariant temp___275 true true true true)) (dynamic_invariant temp___276 true true true true)) (and (and (and (= (select temp___272 0) rliteral) (= (select temp___272 1) rliteral1)) (= (select temp___272 2) rliteral2)) (= (select temp___272 3) rliteral3))))))
(declare-const rliteral4 integer)
(assert (= (integerqtint rliteral4) 0))
(assert (forall ((temp___286 Int)) (=> (dynamic_invariant temp___286 true true true true) (forall ((temp___287 Int)) (= (select (temp_____aggregate_def_284 temp___286) temp___287) rliteral4)))))
(define-fun default_initial_assumption1 ((temp___expr_181 us_rep) (temp___skip_top_level_182 Bool)) Bool (and (= (to_rep (rec__use_unchecked_union__small_record__field1 (us_split_fields1 temp___expr_181))) 0) (= (rec__use_unchecked_union__small_record__field2 (us_split_fields1 temp___expr_181)) (temp_____aggregate_def_183 0 0 0))))
(assert (forall ((temp___185 Int) (temp___186 Int) (temp___187 Int)) (let ((temp___184 (temp_____aggregate_def_183 temp___185 temp___186 temp___187))) (=> (and (and (dynamic_invariant temp___185 true true true true) (dynamic_invariant temp___186 true true true true)) (dynamic_invariant temp___187 true true true true)) (and (and (= (select temp___184 0) rliteral4) (= (select temp___184 1) rliteral4)) (= (select temp___184 2) rliteral4))))))
(define-fun default_initial_assumption2 ((temp___expr_195 us_rep1) (temp___skip_top_level_196 Bool)) Bool (and (= (to_rep (rec__use_unchecked_union__big_record__field1 (us_split_fields3 temp___expr_195))) 0) (= (rec__use_unchecked_union__big_record__field2 (us_split_fields3 temp___expr_195)) (temp_____aggregate_def_197 0 0 0 0))))
(assert (forall ((temp___199 Int) (temp___200 Int) (temp___201 Int) (temp___202 Int)) (let ((temp___198 (temp_____aggregate_def_197 temp___199 temp___200 temp___201 temp___202))) (=> (and (and (and (dynamic_invariant temp___199 true true true true) (dynamic_invariant temp___200 true true true true)) (dynamic_invariant temp___201 true true true true)) (dynamic_invariant temp___202 true true true true)) (and (and (and (= (select temp___198 0) rliteral4) (= (select temp___198 1) rliteral4)) (= (select temp___198 2) rliteral4)) (= (select temp___198 3) rliteral4))))))
(declare-const output__split_discrs integer)
(assert (in_range num))
(assert (not (= num 0)))
(assert (= num 1))
(assert (not (not (= (to_rep output__split_discrs) 0))))
(check-sat)
(exit)
