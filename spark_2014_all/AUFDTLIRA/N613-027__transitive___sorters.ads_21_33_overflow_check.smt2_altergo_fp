(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : (int,integer) farray

logic dummy3 : t

type array_type__ref = { array_type__content : us_t
}

function array_type__ref___projection(a: array_type__ref) : us_t =
  (a).array_type__content

logic perm : us_t, us_t -> bool

logic perm__function_guard : bool, us_t, us_t -> prop

axiom perm__post_axiom : true

logic values__first : integer

logic values__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic perm_transitive : us_t, us_t, us_t -> bool

logic perm_transitive__function_guard : bool, us_t, us_t, us_t -> prop

axiom perm_transitive__post_axiom :
  (forall a:(int,integer) farray. forall a1:t. forall b:(int,integer) farray.
  forall b1:t. forall c:(int,integer) farray. forall c1:t [perm_transitive({
  elts = a; rt = a1 }, { elts = b; rt = b1 }, { elts = c; rt = c1 })].
  ((((perm_transitive({ elts = a; rt = a1 }, { elts = b; rt = b1 }, { elts =
  c; rt = c1 }) = true) and (perm({ elts = a; rt = a1 }, { elts = b; rt = b1
  }) = true)) and (perm({ elts = b; rt = b1 }, { elts = c; rt = c1
  }) = true)) -> (perm({ elts = a; rt = a1 }, { elts = c; rt = c1
  }) = true)))

logic index_of_minimum : us_t -> int

logic index_of_minimum__function_guard : int, us_t -> prop

axiom index_of_minimum__post_axiom :
  (forall unsorted:(int,integer) farray. forall unsorted1:t
  [index_of_minimum({ elts = unsorted; rt = unsorted1 })].
  ((to_rep(first(unsorted1)) <= to_rep(last(unsorted1))) ->
  ((((to_rep(first(unsorted1)) <= index_of_minimum({ elts = unsorted; rt =
  unsorted1 })) and (index_of_minimum({ elts = unsorted; rt = unsorted1
  }) <= to_rep(last(unsorted1)))) and
  (forall j:int. (((to_rep(first(unsorted1)) <= j) and
  (j <= to_rep(last(unsorted1)))) -> (to_rep((unsorted[index_of_minimum({
  elts = unsorted; rt = unsorted1 })])) <= to_rep((unsorted[j])))))) and
  in_range2(index_of_minimum({ elts = unsorted; rt = unsorted1 })))))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy4 : integer

type tTvalues_lastSP1__ref = { tTvalues_lastSP1__content : integer
}

function tTvalues_lastSP1__ref___projection(a: tTvalues_lastSP1__ref) : integer =
  (a).tTvalues_lastSP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,integer) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,integer) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,integer) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,integer) farray. (0 <= object__alignment1(a)))

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy5 : (int,integer) farray

logic dummy6 : t1

type tvalues_lastS__ref = { tvalues_lastS__content : us_t1
}

function tvalues_lastS__ref___projection(a: tvalues_lastS__ref) : us_t1 =
  (a).tvalues_lastS__content

logic values_last__first : integer

logic values_last__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy7 : integer

type t25b__ref = { t25b__content : integer
}

function t25b__ref___projection(a: t25b__ref) : integer = (a).t25b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy8 : integer

type t28b__ref = { t28b__content : integer
}

function t28b__ref___projection(a: t28b__ref) : integer = (a).t28b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first4(mk2(f, l))) = f) and (to_rep(last4(mk2(f, l))) = l)))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property4(range_first, range_last, low) and
  dynamic_property4(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,integer) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,integer) farray = (a).elts2

function of_array2(a: (int,integer) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep(first4((a).rt2))

function last5(a: us_t2) : int = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,integer) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,integer) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,integer) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,integer) farray. (0 <= object__alignment2(a)))

function bool_eq10(x: us_t2, y: us_t2) : bool = bool_eq4((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y).elts2,
  to_rep(first4((y).rt2)), to_rep(last4((y).rt2)))

logic user_eq7 : us_t2, us_t2 -> bool

logic dummy9 : (int,integer) farray

logic dummy10 : t2

type t29b__ref = { t29b__content : us_t2
}

function t29b__ref___projection(a: t29b__ref) : us_t2 = (a).t29b__content

 (* File "sorters.ads", line 7, characters 0-0 *)
goal WP_parameter_def :
  (forall values:(int,integer) farray.
  forall values_last:(int,integer) farray. forall smallest:int.
  forall current:int. forall temp___229:int. forall temp___225:int.
  forall temp___224:int. forall temp___226:(int,integer) farray.
  forall temp___223:(int,integer) farray.
  forall temp___221:(int,integer) farray.
  forall temp___219:(int,integer) farray.
  forall temp___216:(int,integer) farray. forall temp___2161:t1.
  forall o:(int,integer) farray. forall o1:t1.
  forall o2:(int,integer) farray. forall o3:(int,integer) farray.
  forall temp___218:(int,integer) farray. forall temp___2181:t2.
  forall o4:(int,integer) farray. forall o5:t. forall o6:int. forall o7:int.
  forall j:int. forall o8:int. forall o9:bool.
  forall values1:(int,integer) farray.
  forall values_last1:(int,integer) farray. forall smallest1:int.
  forall result:int. forall current1:int.
  forall result1:(int,integer) farray.
  forall values_last2:(int,integer) farray. forall result2:int.
  forall smallest2:int. forall values2:(int,integer) farray.
  forall values3:(int,integer) farray.
  forall values_last3:(int,integer) farray. forall smallest3:int.
  forall current2:int. forall values4:(int,integer) farray.
  forall values_last4:(int,integer) farray. forall smallest4:int.
  forall current3:int. forall values5:(int,integer) farray.
  forall values_last5:(int,integer) farray. forall smallest5:int.
  forall current4:int. forall values6:(int,integer) farray.
  forall values_last6:(int,integer) farray. forall smallest6:int.
  forall current5:int. forall values7:(int,integer) farray.
  forall values_last7:(int,integer) farray. forall smallest7:int.
  forall current6:int. forall values8:(int,integer) farray.
  forall values_last8:(int,integer) farray. forall smallest8:int.
  forall current7:int. forall values9:(int,integer) farray.
  forall values_last9:(int,integer) farray. forall smallest9:int.
  forall current8:int. forall result3:bool. forall result4:bool.
  (dynamic_property(1, 2147483647, to_rep(values__first),
  to_rep(values__last)) ->
  (((((to_rep(values__first) <= to_rep(values__last)) and
  (1 <= ((to_rep(values__last) - to_rep(values__first)) + 1))) or
  ((not (to_rep(values__first) <= to_rep(values__last))) and (1 <= 0))) and
  (to_rep(values__last) <= 2147483647)) ->
  ((((dynamic_property2(to_rep(values__first), to_rep(values__last),
  to_rep(values_last__first), to_rep(values_last__last)) and
  ((to_rep(values_last__first) = to_rep(values__first)) and
  (to_rep(values_last__last) = to_rep(values__last)))) and
  (((1 <= 2147483647) -> in_range2(smallest)) and ((perm({ elts = values;
  rt = mk(to_rep(values__first), to_rep(values__last)) }, { elts = values;
  rt = mk(to_rep(values__first), to_rep(values__last)) }) = true) and
  (((temp___229 = (to_rep(values__last) - 1)) and
  in_range1((to_rep(values__last) - 1))) and ((({ int__content = result } = {
  int__content = current }) and (current1 = to_rep(values__first))) and
  ((((to_rep(values__first) <= current1) and (current1 <= temp___229)) and
  ((((temp___225 = current1) and ((temp___224 = smallest) and
  ((temp___226 = values) and ((temp___223 = values_last) and
  ((temp___221 = values) and ((temp___219 = values) and ((((((slide(values,
  to_rep(values__first), to_rep(values__first)) = temp___216) and
  (mk1(to_rep(values__first), to_rep(values__last)) = temp___2161)) and
  ((((to_rep(first2(temp___2161)) <= to_rep(last2(temp___2161))) and
  (((to_rep(values_last__first) <= to_rep(values_last__last)) and
  (((to_rep(last2(temp___2161)) - to_rep(first2(temp___2161))) + 1) = ((to_rep(values_last__last) - to_rep(values_last__first)) + 1))) or
  ((not (to_rep(values_last__first) <= to_rep(values_last__last))) and
  (((to_rep(last2(temp___2161)) - to_rep(first2(temp___2161))) + 1) = 0)))) or
  ((not (to_rep(first2(temp___2161)) <= to_rep(last2(temp___2161)))) and
  (((to_rep(values_last__first) <= to_rep(values_last__last)) and
  (0 = ((to_rep(values_last__last) - to_rep(values_last__first)) + 1))) or
  (not (to_rep(values_last__first) <= to_rep(values_last__last)))))) and ({
  elts1 = o; rt1 = o1 } = { elts1 = temp___216; rt1 = temp___2161 }))) and
  (o2 = o)) and (({ map__content = result1 } = { map__content = values_last
  }) and (values_last2 = o2))) and
  ((((((((current1 <= to_rep(values__last)) ->
  (((to_rep(values__first) <= current1) and
  (current1 <= to_rep(values__last))) and
  ((to_rep(values__first) <= to_rep(values__last)) and
  (to_rep(values__last) <= to_rep(values__last))))) and (o3 = values)) and
  ((o3 = temp___218) and (mk2(current1,
  to_rep(values__last)) = temp___2181))) and ((temp___218 = o4) and
  (mk(to_rep(first4(temp___2181)), to_rep(last4(temp___2181))) = o5))) and
  ((o6 = index_of_minimum({ elts = o4; rt = o5 })) and (in_range2(o6) and
  (((to_rep(first(o5)) <= o6) and (o6 <= to_rep(last(o5)))) and
  (forall j1:int. (((to_rep(first(o5)) <= j1) and
  (j1 <= to_rep(last(o5)))) -> (to_rep((o4[o6])) <= to_rep((o4[j1]))))))))) and
  (({ int__content = result2 } = { int__content = smallest }) and
  (smallest2 = o6))) and ((((not (smallest2 = current1)) and
  (((o7 = current1) and in_range2(current1)) and ((perm({ elts = values; rt =
  mk(to_rep(values__first), to_rep(values__last)) }, { elts = values2; rt =
  mk(to_rep(values__first), to_rep(values__last)) }) = true) and
  ((to_rep((values2[o7])) = to_rep((values[smallest2]))) and
  ((to_rep((values2[smallest2])) = to_rep((values[o7]))) and
  (forall j1:int. (((to_rep(values__first) <= j1) and
  (j1 <= to_rep(values__last))) -> (((not (j1 = o7)) and
  (not (j1 = smallest2))) ->
  (to_rep((values2[j1])) = to_rep((values[j1]))))))))))) or
  ((smallest2 = current1) and ((values2 = values) and
  (values2 = values1)))) and ((perm_transitive({ elts = temp___219; rt =
  mk(to_rep(values__first), to_rep(values__last)) }, { elts = values_last2;
  rt = mk(to_rep(values_last__first), to_rep(values_last__last)) }, { elts =
  values2; rt = mk(to_rep(values__first), to_rep(values__last))
  }) = true) and (((perm({ elts = temp___226; rt = mk(to_rep(values__first),
  to_rep(values__last)) }, { elts = values3; rt = mk(to_rep(values__first),
  to_rep(values__last)) }) = true) and
  ((forall j1:int. (((current2 <= j1) and (j1 <= to_rep(values__last))) ->
   (to_rep((values3[current2])) <= to_rep((values3[j1]))))) and
  (forall j1:int. (((to_rep(values__first) <= j1) and (j1 <= current2)) ->
  (to_rep((values3[j1])) <= to_rep((values3[(j1 + 1)]))))))) and
  (((((1 <= 2147483647) -> in_range2(smallest3)) and
  ((to_rep(values__first) <= (to_rep(values__last) - 1)) ->
  dynamic_property3(to_rep(values__first), (to_rep(values__last) - 1),
  current2))) and ((to_rep(values__first) <= current2) and
  (current2 <= (to_rep(values__last) - 1)))) and
  (current2 = temp___229))))))))))))) and (((current2 = current3) and
  ((smallest3 = smallest4) and ((values_last3 = values_last4) and
  (values3 = values4)))) and ((current4 = current2) and
  ((smallest5 = smallest3) and ((values_last5 = values_last3) and
  (values5 = values3)))))) and ((({ int__content = current5 } = {
  int__content = current3 }) and (({ int__content = smallest6 } = {
  int__content = smallest4 }) and (({ map__content = values_last6 } = {
  map__content = values_last4 }) and ({ map__content = values6 } = {
  map__content = values4 })))) and ((current6 = current4) and
  ((smallest7 = smallest5) and ((values_last7 = values_last5) and
  (values7 = values5))))))) or ((not ((to_rep(values__first) <= current1) and
  (current1 <= temp___229))) and (((current1 = current5) and (({
  int__content = smallest6 } = { int__content = smallest }) and (({
  map__content = values_last6 } = { map__content = values_last }) and ({
  map__content = values6 } = { map__content = values })))) and
  ((current6 = current1) and ((smallest7 = smallest1) and
  ((values_last7 = values_last1) and (values7 = values1)))))))))))) and
  (((current7 = current5) and ((smallest8 = smallest6) and
  ((values_last8 = values_last6) and ({ map__content = values8 } = {
  map__content = values6 })))) and ((current8 = current6) and
  ((smallest9 = smallest7) and ((values_last9 = values_last7) and
  (values9 = values7)))))) -> ((result3 = perm({ elts = values; rt =
  mk(to_rep(values__first), to_rep(values__last)) }, { elts = values8; rt =
  mk(to_rep(values__first), to_rep(values__last)) })) -> ((result3 = true) ->
  (((((o8 = (to_rep(values__last) - 1)) and
  in_range1((to_rep(values__last) - 1))) and (((j <= o8) and (o9 = true)) or
  ((not (j <= o8)) and (o9 = false)))) and (((to_rep(values__first) <= j) and
  (result4 = o9)) or ((not (to_rep(values__first) <= j)) and
  (result4 = false)))) -> ((result4 = true) -> in_range1((j + 1))))))))))
