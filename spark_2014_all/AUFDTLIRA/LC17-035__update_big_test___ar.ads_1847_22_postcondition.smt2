(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort it4 0)
(define-fun in_range ((x Int)) Bool (and (<= 90 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (it4 it4) Bool)
(declare-const dummy it4)
(declare-datatypes () ((it4__ref (mk_it4__ref (it4__content it4)))))
(define-fun it4__ref___projection ((a it4__ref)) it4 (it4__content a))
(define-fun dynamic_invariant ((temp___expr_170 Int) (temp___is_init_167 Bool) (temp___skip_constant_168 Bool) (temp___do_toplevel_169 Bool)) Bool (=> (or (= temp___is_init_167 true) (<= 90 99)) (in_range temp___expr_170)))
(declare-fun to_rep (it4) Int)
(declare-fun of_rep (Int) it4)
(assert (forall ((x it4)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x it4)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort et1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (et1 et1) Bool)
(declare-const dummy1 et1)
(declare-datatypes () ((et1__ref (mk_et1__ref (et1__content et1)))))
(define-fun et1__ref___projection ((a et1__ref)) et1 (et1__content a))
(define-fun dynamic_invariant1 ((temp___expr_176 Int) (temp___is_init_173 Bool) (temp___skip_constant_174 Bool) (temp___do_toplevel_175 Bool)) Bool (=> (or (= temp___is_init_173 true) (<= 0 99)) (in_range1 temp___expr_176)))
(declare-fun to_rep1 (et1) Int)
(declare-fun of_rep1 (Int) et1)
(assert (forall ((x et1)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x et1)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort et2 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 25)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (et2 et2) Bool)
(declare-const dummy2 et2)
(declare-datatypes () ((et2__ref (mk_et2__ref (et2__content et2)))))
(define-fun et2__ref___projection ((a et2__ref)) et2 (et2__content a))
(declare-sort et3 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 10 x) (<= x 90)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (et3 et3) Bool)
(declare-const dummy3 et3)
(declare-datatypes () ((et3__ref (mk_et3__ref (et3__content et3)))))
(define-fun et3__ref___projection ((a et3__ref)) et3 (et3__content a))
(declare-sort enum1ta 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 4)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (enum1ta enum1ta) Bool)
(declare-const dummy4 enum1ta)
(declare-datatypes () ((enum1ta__ref (mk_enum1ta__ref (enum1ta__content enum1ta)))))
(define-fun enum1ta__ref___projection ((a enum1ta__ref)) enum1ta (enum1ta__content a))
(declare-fun to_rep2 (et2) Int)
(declare-fun of_rep2 (Int) et2)
(assert (forall ((x et2)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x et2)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__ar__rec1t__f1 et1) (rec__ar__rec1t__g1 et2)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) et1 (rec__ar__rec1t__f1 a))
(define-fun us_split_fields_G1__projection ((a us_split_fields)) et2 (rec__ar__rec1t__g1 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep1 (rec__ar__rec1t__f1 (us_split_fields1 a))) (to_rep1 (rec__ar__rec1t__f1 (us_split_fields1 b)))) (= (to_rep2 (rec__ar__rec1t__g1 (us_split_fields1 a))) (to_rep2 (rec__ar__rec1t__g1 (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const ar__rec1t__f1__first__bit Int)
(declare-const ar__rec1t__f1__last__bit Int)
(declare-const ar__rec1t__f1__position Int)
(assert (<= 0 ar__rec1t__f1__first__bit))
(assert (< ar__rec1t__f1__first__bit ar__rec1t__f1__last__bit))
(assert (<= 0 ar__rec1t__f1__position))
(declare-const ar__rec1t__g1__first__bit Int)
(declare-const ar__rec1t__g1__last__bit Int)
(declare-const ar__rec1t__g1__position Int)
(assert (<= 0 ar__rec1t__g1__first__bit))
(assert (< ar__rec1t__g1__first__bit ar__rec1t__g1__last__bit))
(assert (<= 0 ar__rec1t__g1__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((rec1t__ref (mk_rec1t__ref (rec1t__content us_rep)))))
(define-fun rec1t__ref___projection ((a rec1t__ref)) us_rep (rec1t__content a))
(declare-fun to_rep3 (et3) Int)
(declare-fun of_rep3 (Int) et3)
(assert (forall ((x et3)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x et3)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-fun to_rep4 (enum1ta) Int)
(declare-fun of_rep4 (Int) enum1ta)
(assert (forall ((x enum1ta)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x enum1ta)) (! (in_range4 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__ar__rec2t__f2 et3) (rec__ar__rec2t__g2 us_rep) (rec__ar__rec2t__h2 enum1ta)))))
(define-fun us_split_fields_F2__projection ((a us_split_fields2)) et3 (rec__ar__rec2t__f2 a))
(define-fun us_split_fields_G2__projection ((a us_split_fields2)) us_rep (rec__ar__rec2t__g2 a))
(define-fun us_split_fields_H2__projection ((a us_split_fields2)) enum1ta (rec__ar__rec2t__h2 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq1 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (= (to_rep3 (rec__ar__rec2t__f2 (us_split_fields3 a))) (to_rep3 (rec__ar__rec2t__f2 (us_split_fields3 b)))) (= (bool_eq (rec__ar__rec2t__g2 (us_split_fields3 a)) (rec__ar__rec2t__g2 (us_split_fields3 b))) true)) (= (to_rep4 (rec__ar__rec2t__h2 (us_split_fields3 a))) (to_rep4 (rec__ar__rec2t__h2 (us_split_fields3 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep1) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep1) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep1)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment1 a))))
(declare-const ar__rec2t__f2__first__bit Int)
(declare-const ar__rec2t__f2__last__bit Int)
(declare-const ar__rec2t__f2__position Int)
(assert (<= 0 ar__rec2t__f2__first__bit))
(assert (< ar__rec2t__f2__first__bit ar__rec2t__f2__last__bit))
(assert (<= 0 ar__rec2t__f2__position))
(declare-const ar__rec2t__g2__first__bit Int)
(declare-const ar__rec2t__g2__last__bit Int)
(declare-const ar__rec2t__g2__position Int)
(assert (<= 0 ar__rec2t__g2__first__bit))
(assert (< ar__rec2t__g2__first__bit ar__rec2t__g2__last__bit))
(assert (<= 0 ar__rec2t__g2__position))
(declare-const ar__rec2t__h2__first__bit Int)
(declare-const ar__rec2t__h2__last__bit Int)
(declare-const ar__rec2t__h2__position Int)
(assert (<= 0 ar__rec2t__h2__first__bit))
(assert (< ar__rec2t__h2__first__bit ar__rec2t__h2__last__bit))
(assert (<= 0 ar__rec2t__h2__position))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((rec2t__ref (mk_rec2t__ref (rec2t__content us_rep1)))))
(define-fun rec2t__ref___projection ((a rec2t__ref)) us_rep1 (rec2t__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__ar__rec5t__f5 us_rep1) (rec__ar__rec5t__g5 Bool) (rec__ar__rec5t__h5 us_rep)))))
(define-fun us_split_fields_F5__projection ((a us_split_fields4)) us_rep1 (rec__ar__rec5t__f5 a))
(define-fun us_split_fields_G5__projection ((a us_split_fields4)) Bool (rec__ar__rec5t__g5 a))
(define-fun us_split_fields_H5__projection ((a us_split_fields4)) us_rep (rec__ar__rec5t__h5 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___5__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun bool_eq2 ((a us_rep2) (b us_rep2)) Bool (ite (and (and (= (bool_eq1 (rec__ar__rec5t__f5 (us_split_fields5 a)) (rec__ar__rec5t__f5 (us_split_fields5 b))) true) (= (rec__ar__rec5t__g5 (us_split_fields5 a)) (rec__ar__rec5t__g5 (us_split_fields5 b)))) (= (bool_eq (rec__ar__rec5t__h5 (us_split_fields5 a)) (rec__ar__rec5t__h5 (us_split_fields5 b))) true)) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep2) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep2) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep2)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment2 a))))
(declare-const ar__rec5t__f5__first__bit Int)
(declare-const ar__rec5t__f5__last__bit Int)
(declare-const ar__rec5t__f5__position Int)
(assert (<= 0 ar__rec5t__f5__first__bit))
(assert (< ar__rec5t__f5__first__bit ar__rec5t__f5__last__bit))
(assert (<= 0 ar__rec5t__f5__position))
(declare-const ar__rec5t__g5__first__bit Int)
(declare-const ar__rec5t__g5__last__bit Int)
(declare-const ar__rec5t__g5__position Int)
(assert (<= 0 ar__rec5t__g5__first__bit))
(assert (< ar__rec5t__g5__first__bit ar__rec5t__g5__last__bit))
(assert (<= 0 ar__rec5t__g5__position))
(declare-const ar__rec5t__h5__first__bit Int)
(declare-const ar__rec5t__h5__last__bit Int)
(declare-const ar__rec5t__h5__position Int)
(assert (<= 0 ar__rec5t__h5__first__bit))
(assert (< ar__rec5t__h5__first__bit ar__rec5t__h5__last__bit))
(assert (<= 0 ar__rec5t__h5__position))
(declare-fun user_eq7 (us_rep2 us_rep2) Bool)
(declare-const dummy7 us_rep2)
(declare-datatypes () ((rec5t__ref (mk_rec5t__ref (rec5t__content us_rep2)))))
(define-fun rec5t__ref___projection ((a rec5t__ref)) us_rep2 (rec5t__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep2))))))
(declare-fun slide ((Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep2))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int us_rep2) Int Int (Array Int us_rep2) Int Int) (Array Int us_rep2))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (us_rep2 Int) (Array Int us_rep2))
(assert (forall ((v us_rep2)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq3 ((a (Array Int us_rep2)) (a__first Int) (a__last Int) (b (Array Int us_rep2)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_139 Int)) (=> (and (<= a__first temp___idx_139) (<= temp___idx_139 a__last)) (= (bool_eq2 (select a temp___idx_139) (select b (+ (- b__first a__first) temp___idx_139))) true)))) true false))
(assert (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_139 Int)) (=> (and (<= a__first temp___idx_139) (<= temp___idx_139 a__last)) (= (bool_eq2 (select a temp___idx_139) (select b (+ (- b__first a__first) temp___idx_139))) true))))))))
(declare-const dummy8 (Array Int us_rep2))
(declare-const value__size3 Int)
(declare-fun object__size3 ((Array Int us_rep2)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int us_rep2)) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 ((Array Int us_rep2)) Int)
(assert (<= 0 value__size3))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__size3 a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a (Array Int us_rep2))) (<= 0 (object__alignment3 a))))
(declare-fun user_eq8 ((Array Int us_rep2) (Array Int us_rep2)) Bool)
(declare-datatypes () ((us_split_fields6 (mk___split_fields3 (rec__ar__rofaofr2__a2 it4) (rec__ar__rofaofr2__b2 (Array Int us_rep2))))))
(define-fun us_split_fields_A2__projection ((a us_split_fields6)) it4 (rec__ar__rofaofr2__a2 a))
(define-fun us_split_fields_B2__projection ((a us_split_fields6)) (Array Int us_rep2) (rec__ar__rofaofr2__b2 a))
(declare-datatypes () ((us_split_fields__ref3 (mk___split_fields__ref3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___11__projection ((a us_split_fields__ref3)) us_split_fields6 (us_split_fields__content3 a))
(declare-datatypes () ((us_rep3 (mk___rep3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___11__projection ((a us_rep3)) us_split_fields6 (us_split_fields7 a))
(define-fun bool_eq4 ((a us_rep3) (b us_rep3)) Bool (ite (and (= (to_rep (rec__ar__rofaofr2__a2 (us_split_fields7 a))) (to_rep (rec__ar__rofaofr2__a2 (us_split_fields7 b)))) (= (bool_eq3 (rec__ar__rofaofr2__b2 (us_split_fields7 a)) 90 99 (rec__ar__rofaofr2__b2 (us_split_fields7 b)) 90 99) true)) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep3) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep3) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep3)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep3)) (<= 0 (object__alignment4 a))))
(declare-const ar__rofaofr2__a2__first__bit Int)
(declare-const ar__rofaofr2__a2__last__bit Int)
(declare-const ar__rofaofr2__a2__position Int)
(assert (<= 0 ar__rofaofr2__a2__first__bit))
(assert (< ar__rofaofr2__a2__first__bit ar__rofaofr2__a2__last__bit))
(assert (<= 0 ar__rofaofr2__a2__position))
(declare-const ar__rofaofr2__b2__first__bit Int)
(declare-const ar__rofaofr2__b2__last__bit Int)
(declare-const ar__rofaofr2__b2__position Int)
(assert (<= 0 ar__rofaofr2__b2__first__bit))
(assert (< ar__rofaofr2__b2__first__bit ar__rofaofr2__b2__last__bit))
(assert (<= 0 ar__rofaofr2__b2__position))
(declare-fun user_eq9 (us_rep3 us_rep3) Bool)
(declare-const dummy9 us_rep3)
(declare-datatypes () ((rofaofr2__ref (mk_rofaofr2__ref (rofaofr2__content us_rep3)))))
(define-fun rofaofr2__ref___projection ((a rofaofr2__ref)) us_rep3 (rofaofr2__content a))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const e Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun temp___4167 ((Array Int us_rep2) Int us_rep2 Int us_rep2) (Array Int us_rep2))
(assert (forall ((temp___4169 (Array Int us_rep2))) (forall ((temp___4170 Int) (temp___4172 Int)) (forall ((temp___4171 us_rep2) (temp___4173 us_rep2)) (let ((temp___4168 (temp___4167 temp___4169 temp___4170 temp___4171 temp___4172 temp___4173))) (forall ((temp___4174 Int)) (ite (= temp___4174 temp___4172) (= (select temp___4168 temp___4174) temp___4173) (ite (= temp___4174 temp___4170) (= (select temp___4168 temp___4174) temp___4171) (= (select temp___4168 temp___4174) (select temp___4169 temp___4174))))))))))
(define-fun dynamic_invariant2 ((temp___expr_182 Int) (temp___is_init_179 Bool) (temp___skip_constant_180 Bool) (temp___do_toplevel_181 Bool)) Bool (=> (or (= temp___is_init_179 true) (<= 1 25)) (in_range2 temp___expr_182)))
(define-fun dynamic_invariant3 ((temp___expr_188 Int) (temp___is_init_185 Bool) (temp___skip_constant_186 Bool) (temp___do_toplevel_187 Bool)) Bool (=> (or (= temp___is_init_185 true) (<= 10 90)) (in_range3 temp___expr_188)))
(define-fun dynamic_invariant4 ((temp___expr_212 Int) (temp___is_init_209 Bool) (temp___skip_constant_210 Bool) (temp___do_toplevel_211 Bool)) Bool (=> (or (= temp___is_init_209 true) (<= 1 4)) (in_range4 temp___expr_212)))
(declare-const r__split_fields it4)
(declare-const r__split_fields1 (Array Int us_rep2))
(declare-const o et1)
(declare-const o1 et1)
(declare-const o2 et2)
(declare-const o3 et1)
(declare-const o4 et2)
(declare-const o5 et3)
(declare-const o6 et1)
(declare-const o7 et2)
(declare-const o8 enum1ta)
(declare-const o9 et3)
(declare-const o10 et1)
(declare-const o11 et2)
(declare-const o12 enum1ta)
(declare-const o13 et3)
(declare-const o14 et1)
(declare-const o15 et2)
(declare-const o16 enum1ta)
(declare-const o17 Bool)
(declare-const o18 et1)
(declare-const o19 et2)
(declare-const o20 et3)
(declare-const o21 et1)
(declare-const o22 et2)
(declare-const o23 enum1ta)
(declare-const o24 Bool)
(declare-const o25 et1)
(declare-const o26 et2)
(declare-const o27 (Array Int us_rep2))
(declare-const o28 us_split_fields6)
(declare-const temp___9827 us_rep3)
(declare-const o29 it4)
(declare-const o30 us_split_fields6)
(declare-const temp___9829 us_rep3)
(declare-const o31 et1)
(declare-const o32 us_split_fields)
(declare-const o33 us_rep)
(declare-const o34 us_split_fields2)
(declare-const o35 us_rep1)
(declare-const o36 us_split_fields4)
(declare-const o37 us_rep2)
(declare-const o38 (Array Int us_rep2))
(declare-const o39 us_split_fields6)
(declare-const temp___9838 us_rep3)
(declare-const result us_split_fields__ref3)
(declare-const r__split_fields2 us_split_fields6)
(declare-const result1 us_split_fields__ref3)
(declare-const r__split_fields3 us_split_fields6)
(declare-const result2 us_split_fields__ref3)
(declare-const r__split_fields4 us_split_fields6)
(declare-const r__split_fields5 us_split_fields__ref3)
(declare-const r__split_fields6 us_split_fields6)
(assert (in_range i))
(assert (in_range1 e))
(assert (not (= (to_rep r__split_fields) i)))
(assert (= (to_rep1 o) e))
(assert (= o o1))
(assert (= (rec__ar__rec1t__g1 (us_split_fields1 (rec__ar__rec2t__g2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))))))) o2))
(assert (= o3 o1))
(assert (= o4 o2))
(assert (= (rec__ar__rec2t__f2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))))) o5))
(assert (= o6 o3))
(assert (= o7 o4))
(assert (= (rec__ar__rec2t__h2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))))) o8))
(assert (= o9 o5))
(assert (= o10 o6))
(assert (= o11 o7))
(assert (= o12 o8))
(assert (= o13 o9))
(assert (= o14 o10))
(assert (= o15 o11))
(assert (= o16 o12))
(assert (= (rec__ar__rec5t__g5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))) o17))
(assert (= (rec__ar__rec5t__h5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))) (mk___rep (mk___split_fields o18 o19))))
(assert (= o20 o13))
(assert (= o21 o14))
(assert (= o22 o15))
(assert (= o23 o16))
(assert (= o24 o17))
(assert (= o25 o18))
(assert (= o26 o19))
(assert (= o27 (store r__split_fields1 (to_rep r__split_fields) (mk___rep2 (mk___split_fields2 (mk___rep1 (mk___split_fields1 o20 (mk___rep (mk___split_fields o21 o22)) o23)) o24 (mk___rep (mk___split_fields o25 o26)))))))
(assert (= o28 (mk___split_fields3 r__split_fields o27)))
(assert (= temp___9827 (mk___rep3 o28)))
(assert (= result (mk___split_fields__ref3 (mk___split_fields3 r__split_fields r__split_fields1))))
(assert (= r__split_fields2 (us_split_fields7 temp___9827)))
(assert (= (to_rep o29) i))
(assert (= o30 (mk___split_fields3 o29 (rec__ar__rofaofr2__b2 r__split_fields2))))
(assert (= temp___9829 (mk___rep3 o30)))
(assert (= result1 (mk___split_fields__ref3 r__split_fields2)))
(assert (= r__split_fields3 (us_split_fields7 temp___9829)))
(assert (= (to_rep1 o31) e))
(assert (= o32 (mk___split_fields o31 (rec__ar__rec1t__g1 (us_split_fields1 (rec__ar__rec2t__g2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select (rec__ar__rofaofr2__b2 r__split_fields3) i))))))))))
(assert (= o33 (mk___rep o32)))
(assert (= o34 (mk___split_fields1 (rec__ar__rec2t__f2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select (rec__ar__rofaofr2__b2 r__split_fields3) i))))) o33 (rec__ar__rec2t__h2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select (rec__ar__rofaofr2__b2 r__split_fields3) i))))))))
(assert (= o35 (mk___rep1 o34)))
(assert (= o36 (mk___split_fields2 o35 (rec__ar__rec5t__g5 (us_split_fields5 (select (rec__ar__rofaofr2__b2 r__split_fields3) i))) (rec__ar__rec5t__h5 (us_split_fields5 (select (rec__ar__rofaofr2__b2 r__split_fields3) i))))))
(assert (= o37 (mk___rep2 o36)))
(assert (= o38 (store (rec__ar__rofaofr2__b2 r__split_fields3) i o37)))
(assert (= o39 (mk___split_fields3 (rec__ar__rofaofr2__a2 r__split_fields3) o38)))
(assert (= temp___9838 (mk___rep3 o39)))
(assert (= result2 (mk___split_fields__ref3 r__split_fields3)))
(assert (= r__split_fields4 (us_split_fields7 temp___9838)))
(assert (= r__split_fields5 (mk___split_fields__ref3 r__split_fields4)))
(assert (= r__split_fields6 r__split_fields4))
(assert (not (= (bool_eq4 (mk___rep3 (us_split_fields__content3 r__split_fields5)) (mk___rep3 (mk___split_fields3 (of_rep i) (temp___4167 r__split_fields1 i (mk___rep2 (mk___split_fields2 (mk___rep1 (mk___split_fields1 (rec__ar__rec2t__f2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select r__split_fields1 i))))) (mk___rep (mk___split_fields (of_rep1 e) (rec__ar__rec1t__g1 (us_split_fields1 (rec__ar__rec2t__g2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select r__split_fields1 i))))))))) (rec__ar__rec2t__h2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select r__split_fields1 i))))))) (rec__ar__rec5t__g5 (us_split_fields5 (select r__split_fields1 i))) (mk___rep (mk___split_fields (rec__ar__rec1t__f1 (us_split_fields1 (rec__ar__rec5t__h5 (us_split_fields5 (select r__split_fields1 i))))) (rec__ar__rec1t__g1 (us_split_fields1 (rec__ar__rec5t__h5 (us_split_fields5 (select r__split_fields1 i))))))))) (to_rep r__split_fields) (mk___rep2 (mk___split_fields2 (mk___rep1 (mk___split_fields1 (rec__ar__rec2t__f2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))))) (mk___rep (mk___split_fields (of_rep1 e) (rec__ar__rec1t__g1 (us_split_fields1 (rec__ar__rec2t__g2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))))))))) (rec__ar__rec2t__h2 (us_split_fields3 (rec__ar__rec5t__f5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))))))) (rec__ar__rec5t__g5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))) (mk___rep (mk___split_fields (rec__ar__rec1t__f1 (us_split_fields1 (rec__ar__rec5t__h5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))))) (rec__ar__rec1t__g1 (us_split_fields1 (rec__ar__rec5t__h5 (us_split_fields5 (select r__split_fields1 (to_rep r__split_fields)))))))))))))) true)))
(check-sat)
(exit)
