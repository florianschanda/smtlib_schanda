(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type index_type

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index_type

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : extended_index_type, extended_index_type -> bool

logic dummy2 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep : extended_index_type -> int

logic of_rep : int -> extended_index_type

axiom inversion_axiom :
  (forall x:extended_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:extended_index_type [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq5 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

type us_split_fields = { rec__tree_model__path_type__a : us_rep;
rec__tree_model__path_type__k : bool
}

function us_split_fields_A__projection(a: us_split_fields) : us_rep =
  (a).rec__tree_model__path_type__a

function us_split_fields_K__projection(a: us_split_fields) : bool =
  (a).rec__tree_model__path_type__k

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def4 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  ((((user_eq3(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k)) ->
  (bool_eq6(a, b) = true)) and
  ((not ((user_eq3(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__size1({ us_split_fields1 =
  { rec__tree_model__path_type__a = a; rec__tree_model__path_type__k = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__alignment1({
  us_split_fields1 = { rec__tree_model__path_type__a = a;
  rec__tree_model__path_type__k = a1 } })))

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep

logic dummy5 : bool

type path_type__ref = { path_type__content : us_rep1
}

function path_type__ref___projection(a: path_type__ref) : us_rep1 =
  (a).path_type__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def :
  (forall v:us_rep. forall v1:bool.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } },
  i)[i])]. ((singleton({ us_split_fields1 = { rec__tree_model__path_type__a =
  v; rec__tree_model__path_type__k = v1 } }, i)[i]) = { us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } })))

logic bool_eq7 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def5 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq7(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq6((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq8 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type set__ref = { set__content : us_rep2
}

function set__ref___projection(a: set__ref) : us_rep2 = (a).set__content

logic oeq : us_rep2, us_rep2 -> bool

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

logic ole : us_rep2, us_rep2 -> bool

logic ole__function_guard : bool, us_rep2, us_rep2 -> prop

axiom oeq__post_axiom :
  (forall left:us_rep2. forall right:us_rep2 [oeq(left, right)]. ((oeq(left,
  right) = true) <-> ((ole(left, right) = true) and (ole(right,
  left) = true))))

type value_set__ref = { value_set__content : us_rep2
}

function value_set__ref___projection(a: value_set__ref) : us_rep2 =
  (a).value_set__content

logic is_add__2 : us_rep2, int, us_rep2 -> bool

logic is_add__2__function_guard : bool, us_rep2, int, us_rep2 -> prop

logic contains : us_rep2, int -> bool

logic contains__function_guard : bool, us_rep2, int -> prop

logic included_except : us_rep2, us_rep2, int -> bool

logic included_except__function_guard : bool, us_rep2, us_rep2, int -> prop

axiom is_add__2__post_axiom : true

axiom is_add__2__def_axiom :
  (forall s1:us_rep2. forall s2:us_rep2.
  (forall e:int [is_add__2(s1, e, s2)]. ((is_add__2(s1, e, s2) = true) <->
  ((((not (contains(s1, e) = true)) and (contains(s2, e) = true)) and
  (ole(s1, s2) = true)) and (included_except(s2, s1, e) = true)))))

type position_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : position_type, position_type -> bool

logic dummy7 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep1 : position_type -> int

logic of_rep1 : int -> position_type

axiom inversion_axiom1 :
  (forall x:position_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:position_type [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__binary_trees__cell__left :
extended_index_type; rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields2) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep3 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep3) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq10 : us_rep3, us_rep3 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq10(a, b)].
  ((((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((((to_rep(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__position)))) ->
  (bool_eq10(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size3({ us_split_fields3 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment3({ us_split_fields3 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq7 : us_rep3, us_rep3 -> bool

logic dummy8 : extended_index_type

logic dummy9 : extended_index_type

logic dummy10 : extended_index_type

logic dummy11 : position_type

type cell__ref = { cell__content : us_rep3
}

function cell__ref___projection(a: cell__ref) : us_rep3 = (a).cell__content

type map__ref1 = { map__content1 : (int,us_rep3) farray
}

logic slide1 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq1 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> (int,us_rep3) farray

axiom concat_def1 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep3, int -> (int,us_rep3) farray

axiom singleton_def1 :
  (forall v:extended_index_type. forall v1:extended_index_type.
  forall v2:extended_index_type. forall v3:position_type.
  (forall i:int [(singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i])]. ((singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i]) = { us_split_fields3 = { rec__binary_trees__cell__left = v;
  rec__binary_trees__cell__right = v1; rec__binary_trees__cell__parent = v2;
  rec__binary_trees__cell__position = v3 } })))

logic bool_eq11 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def8 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq11(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq11(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq10((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic dummy12 : (int,us_rep3) farray

logic value__size4 : int

logic object__size4 : (int,us_rep3) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep3) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,us_rep3) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,us_rep3) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep3) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,us_rep3) farray. (0 <= object__alignment4(a)))

logic user_eq8 : (int,us_rep3) farray, (int,us_rep3) farray -> bool

type us_split_fields4 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep3) farray
}

function us_split_fields_S__projection(a: us_split_fields4) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields4) : (int,us_rep3) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep4 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep4) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq12 : us_rep4, us_rep4 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq12(a, b)].
  ((((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq11(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq12(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq11(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq12(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep4 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep4 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:extended_index_type. forall a1:(int,us_rep3) farray.
  (0 <= object__size5({ us_split_fields5 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:extended_index_type. forall a1:(int,us_rep3) farray.
  (0 <= object__alignment5({ us_split_fields5 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq9 : us_rep4, us_rep4 -> bool

logic dummy13 : extended_index_type

logic dummy14 : (int,us_rep3) farray

type forest__ref = { forest__content : us_rep4
}

function forest__ref___projection(a: forest__ref) : us_rep4 =
  (a).forest__content

logic to_rep2 : natural -> int

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref2 = { map__content2 : (int,natural) farray
}

logic slide2 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq2 :
  (forall a:(int,natural) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : natural, int -> (int,natural) farray

axiom singleton_def2 :
  (forall v:natural.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq13 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def10 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq13(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq13(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep2((a[temp___idx_134])) = to_rep2((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq13(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq13(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq13(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

logic dummy15 : (int,natural) farray

logic value__size6 : int

logic object__size6 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,natural) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,natural) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,natural) farray. (0 <= object__alignment6(a)))

logic user_eq10 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields6 = { rec__search_trees__search_tree__root :
extended_index_type; rec__search_trees__search_tree__struct : us_rep4;
rec__search_trees__search_tree__values : (int,natural) farray
}

function us_split_fields_Root__projection(a: us_split_fields6) : extended_index_type =
  (a).rec__search_trees__search_tree__root

function us_split_fields_Struct__projection(a: us_split_fields6) : us_rep4 =
  (a).rec__search_trees__search_tree__struct

function us_split_fields_Values__projection(a: us_split_fields6) : (int,natural) farray =
  (a).rec__search_trees__search_tree__values

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep5 = { us_split_fields7 : us_split_fields6
}

function us_rep___4__projection(a: us_rep5) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq14 : us_rep5, us_rep5 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq14(a, b)].
  (((((to_rep(((a).us_split_fields7).rec__search_trees__search_tree__root) = to_rep(((b).us_split_fields7).rec__search_trees__search_tree__root)) and
  (bool_eq12(((a).us_split_fields7).rec__search_trees__search_tree__struct,
  ((b).us_split_fields7).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq13(((a).us_split_fields7).rec__search_trees__search_tree__values,
  1, 100, ((b).us_split_fields7).rec__search_trees__search_tree__values, 1,
  100) = true)) -> (bool_eq14(a, b) = true)) and
  ((not (((to_rep(((a).us_split_fields7).rec__search_trees__search_tree__root) = to_rep(((b).us_split_fields7).rec__search_trees__search_tree__root)) and
  (bool_eq12(((a).us_split_fields7).rec__search_trees__search_tree__struct,
  ((b).us_split_fields7).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq13(((a).us_split_fields7).rec__search_trees__search_tree__values,
  1, 100, ((b).us_split_fields7).rec__search_trees__search_tree__values, 1,
  100) = true))) -> (bool_eq14(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep5 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep5 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep3) farray. forall a3:(int,natural) farray.
  (0 <= object__size7({ us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep3) farray. forall a3:(int,natural) farray.
  (0 <= object__alignment7({ us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

logic search_trees__search_tree__root__first__bit : int

logic search_trees__search_tree__root__last__bit : int

logic search_trees__search_tree__root__position : int

axiom search_trees__search_tree__root__first__bit_axiom :
  (0 <= search_trees__search_tree__root__first__bit)

axiom search_trees__search_tree__root__last__bit_axiom :
  (search_trees__search_tree__root__first__bit <  search_trees__search_tree__root__last__bit)

axiom search_trees__search_tree__root__position_axiom :
  (0 <= search_trees__search_tree__root__position)

logic search_trees__search_tree__struct__first__bit : int

logic search_trees__search_tree__struct__last__bit : int

logic search_trees__search_tree__struct__position : int

axiom search_trees__search_tree__struct__first__bit_axiom :
  (0 <= search_trees__search_tree__struct__first__bit)

axiom search_trees__search_tree__struct__last__bit_axiom :
  (search_trees__search_tree__struct__first__bit <  search_trees__search_tree__struct__last__bit)

axiom search_trees__search_tree__struct__position_axiom :
  (0 <= search_trees__search_tree__struct__position)

logic search_trees__search_tree__values__first__bit : int

logic search_trees__search_tree__values__last__bit : int

logic search_trees__search_tree__values__position : int

axiom search_trees__search_tree__values__first__bit_axiom :
  (0 <= search_trees__search_tree__values__first__bit)

axiom search_trees__search_tree__values__last__bit_axiom :
  (search_trees__search_tree__values__first__bit <  search_trees__search_tree__values__last__bit)

axiom search_trees__search_tree__values__position_axiom :
  (0 <= search_trees__search_tree__values__position)

logic user_eq11 : us_rep5, us_rep5 -> bool

logic dummy16 : extended_index_type

logic dummy17 : extended_index_type

logic dummy18 : (int,us_rep3) farray

logic dummy19 : (int,natural) farray

type search_tree__ref = { search_tree__content : us_rep5
}

function search_tree__ref___projection(a: search_tree__ref) : us_rep5 =
  (a).search_tree__content

logic size : us_rep5 -> int

logic size__function_guard : int, us_rep5 -> prop

logic size1 : us_rep4 -> int

logic size__function_guard1 : int, us_rep4 -> prop

logic valid_root : us_rep4, int -> bool

logic valid_root__function_guard : bool, us_rep4, int -> prop

logic tree_structure : us_rep4 -> bool

logic tree_structure__function_guard : bool, us_rep4 -> prop

logic ordered_leafs : us_rep4, int, (int,natural) farray -> bool

logic ordered_leafs__function_guard : bool, us_rep4, int,
  (int,natural) farray -> prop

logic temp___390 : int -> (int,natural) farray

axiom def_axiom :
  (forall temp___392:int.
  (forall temp___393:int.
  ((temp___390(temp___392)[temp___393]) = of_rep2(temp___392))))

axiom size__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> in_range3(size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

axiom size__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }))))

logic root : us_rep5 -> int

logic root__function_guard : int, us_rep5 -> prop

axiom root__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [root({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (not (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0))) -> in_range2(root({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

axiom root__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [root({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (root({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = to_rep(t))))

logic parent : us_rep5, int -> int

logic parent__function_guard : int, us_rep5, int -> prop

logic parent1 : us_rep4, int -> int

logic parent__function_guard1 : int, us_rep4, int -> prop

axiom parent__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) -> (((size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0) -> (parent({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = 0)) and
  in_range3(parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i))))))

axiom parent__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) -> (parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i)))))

type direction

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq12 : direction, direction -> bool

logic dummy20 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

logic position : us_rep4, int -> int

logic position__function_guard : int, us_rep4, int -> prop

logic position1 : us_rep5, int -> int

logic position__function_guard1 : int, us_rep5, int -> prop

axiom position__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. (((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) and (not (parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = 0))) ->
  in_range5(position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)))))

axiom position__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) -> (position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = position({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i)))))

logic model__ : us_rep5 -> (int,us_rep1) farray

logic model____function_guard : (int,us_rep1) farray, us_rep5 -> prop

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic model__1 : us_rep4, int -> (int,us_rep1) farray

logic model____function_guard1 : (int,us_rep1) farray, us_rep4, int -> prop

axiom model____post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (not (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0))) ->
  (forall temp___219:int. (((1 <= temp___219) and (temp___219 <= 100)) ->
  (length((((model__({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[temp___219])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))

axiom model____def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (model__({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, to_rep(t)))))

logic peek : us_rep5, int, int -> int

logic peek__function_guard : int, us_rep5, int, int -> prop

logic peek1 : us_rep4, int, int -> int

logic peek__function_guard1 : int, us_rep4, int, int -> prop

axiom peek__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int. forall d:int [peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)]. ((((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) and in_range5(d)) and ((not (size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0)) and ((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
  in_range3(peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)))))

axiom peek__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int. forall d:int [peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)]. (((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range2(i)) and in_range5(d)) -> (peek({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d) = peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i, d)))))

logic values : us_rep5 -> us_rep2

logic values__function_guard : us_rep2, us_rep5 -> prop

axiom values__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [values({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> ((size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0) -> (is_empty(values({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })) = true))))

type color_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq13 : color_type, color_type -> bool

logic dummy21 : color_type

type color_type__ref = { color_type__content : color_type
}

function color_type__ref___projection(a: color_type__ref) : color_type =
  (a).color_type__content

logic to_rep3 : color_type -> int

logic of_rep3 : int -> color_type

axiom inversion_axiom3 :
  (forall x:color_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:color_type [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref3 = { map__content3 : (int,color_type) farray
}

logic slide3 : (int,color_type) farray, int, int -> (int,color_type) farray

axiom slide_eq3 :
  (forall a:(int,color_type) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,color_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat3 : (int,color_type) farray, int, int, (int,color_type) farray,
  int, int -> (int,color_type) farray

axiom concat_def3 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat3(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat3(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat3(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton3 : color_type, int -> (int,color_type) farray

axiom singleton_def3 :
  (forall v:color_type.
  (forall i:int [(singleton3(v, i)[i])]. ((singleton3(v, i)[i]) = v)))

logic bool_eq17 : (int,color_type) farray, int, int, (int,color_type) farray,
  int, int -> bool

axiom bool_eq_def14 :
  (forall a:(int,color_type) farray. forall a__first:int. forall a__last:int.
  forall b:(int,color_type) farray. forall b__first:int. forall b__last:int
  [bool_eq17(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_135:int. ((((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) and
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)])))) or
  (not ((a__first <= temp___idx_135) and (temp___idx_135 <= a__last)))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)]))))))) ->
  (bool_eq17(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq17(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_135:int. (((a__first <= temp___idx_135) and
  (temp___idx_135 <= a__last)) ->
  (to_rep3((a[temp___idx_135])) = to_rep3((b[((b__first - a__first) + temp___idx_135)])))))))))

logic compare1 : (int,color_type) farray, int, int, (int,color_type) farray,
  int, int -> int

axiom compare_def_eq1 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq17(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq17(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep3((a[(i + 1)])) <  to_rep3((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,color_type) farray. forall b:(int,color_type) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq17(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep3((b[(i + 1)])) <  to_rep3((a[(j + 1)]))))))))))))

logic dummy22 : (int,color_type) farray

logic value__size8 : int

logic object__size8 : (int,color_type) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,color_type) farray -> int

logic value__alignment8 : int

logic object__alignment8 : (int,color_type) farray -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:(int,color_type) farray. (0 <= object__size8(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,color_type) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:(int,color_type) farray. (0 <= object__alignment8(a)))

logic user_eq14 : (int,color_type) farray, (int,color_type) farray -> bool

type us_split_fields8 = { rec__red_black_trees__rbt__struct : us_rep5;
rec__red_black_trees__rbt__color : (int,color_type) farray
}

function us_split_fields_Struct__2__projection(a: us_split_fields8) : us_rep5 =
  (a).rec__red_black_trees__rbt__struct

function us_split_fields_Color__projection(a: us_split_fields8) : (int,color_type) farray =
  (a).rec__red_black_trees__rbt__color

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep6 = { us_split_fields9 : us_split_fields8
}

function us_rep___5__projection(a: us_rep6) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq18 : us_rep6, us_rep6 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq18(a, b)].
  ((((bool_eq14(((a).us_split_fields9).rec__red_black_trees__rbt__struct,
  ((b).us_split_fields9).rec__red_black_trees__rbt__struct) = true) and
  (bool_eq17(((a).us_split_fields9).rec__red_black_trees__rbt__color, 1, 100,
  ((b).us_split_fields9).rec__red_black_trees__rbt__color, 1,
  100) = true)) -> (bool_eq18(a, b) = true)) and
  ((not ((bool_eq14(((a).us_split_fields9).rec__red_black_trees__rbt__struct,
  ((b).us_split_fields9).rec__red_black_trees__rbt__struct) = true) and
  (bool_eq17(((a).us_split_fields9).rec__red_black_trees__rbt__color, 1, 100,
  ((b).us_split_fields9).rec__red_black_trees__rbt__color, 1,
  100) = true))) -> (bool_eq18(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep6 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep6 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep3) farray. forall a3:(int,natural) farray.
  forall a4:(int,color_type) farray. (0 <= object__size9({ us_split_fields9 =
  { rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } };
  rec__red_black_trees__rbt__color = a4 } })))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep3) farray. forall a3:(int,natural) farray.
  forall a4:(int,color_type) farray. (0 <= object__alignment9({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } };
  rec__red_black_trees__rbt__color = a4 } })))

logic red_black_trees__rbt__struct__first__bit : int

logic red_black_trees__rbt__struct__last__bit : int

logic red_black_trees__rbt__struct__position : int

axiom red_black_trees__rbt__struct__first__bit_axiom :
  (0 <= red_black_trees__rbt__struct__first__bit)

axiom red_black_trees__rbt__struct__last__bit_axiom :
  (red_black_trees__rbt__struct__first__bit <  red_black_trees__rbt__struct__last__bit)

axiom red_black_trees__rbt__struct__position_axiom :
  (0 <= red_black_trees__rbt__struct__position)

logic red_black_trees__rbt__color__first__bit : int

logic red_black_trees__rbt__color__last__bit : int

logic red_black_trees__rbt__color__position : int

axiom red_black_trees__rbt__color__first__bit_axiom :
  (0 <= red_black_trees__rbt__color__first__bit)

axiom red_black_trees__rbt__color__last__bit_axiom :
  (red_black_trees__rbt__color__first__bit <  red_black_trees__rbt__color__last__bit)

axiom red_black_trees__rbt__color__position_axiom :
  (0 <= red_black_trees__rbt__color__position)

logic user_eq15 : us_rep6, us_rep6 -> bool

logic dummy23 : extended_index_type

logic dummy24 : extended_index_type

logic dummy25 : (int,us_rep3) farray

logic dummy26 : (int,natural) farray

logic dummy27 : (int,color_type) farray

type rbt__ref = { rbt__content : us_rep6
}

function rbt__ref___projection(a: rbt__ref) : us_rep6 = (a).rbt__content

logic invariant__ : us_rep6 -> bool

logic invariant____function_guard : bool, us_rep6 -> prop

logic temp___502 : int -> (int,color_type) farray

axiom def_axiom1 :
  (forall temp___504:int.
  (forall temp___505:int.
  ((temp___502(temp___504)[temp___505]) = of_rep3(temp___504))))

logic size2 : us_rep6 -> int

logic size__function_guard2 : int, us_rep6 -> prop

axiom size__post_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [size2({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true)) -> in_range3(size2({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }))))

axiom size__def_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [size2({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (size2({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

logic values1 : us_rep6 -> us_rep2

logic values__function_guard1 : us_rep2, us_rep6 -> prop

axiom values__post_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [values1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true)) -> ((size2({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = 0) -> (is_empty(values1({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })) = true))))

axiom values__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [values1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. (((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) -> (values1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

logic contains1 : us_rep6, int -> bool

logic contains__function_guard1 : bool, us_rep6, int -> prop

logic contains2 : us_rep5, int -> bool

logic contains__function_guard2 : bool, us_rep5, int -> prop

axiom contains__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray.
  (forall v:int [contains1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, v)]. (((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range1(v)) and (invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true)) -> ((contains1({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, v) = true) <->
  (contains(values1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }), v) = true)))))

axiom contains__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray.
  (forall v:int [contains1({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, v)]. ((contains1({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, v) = true) <-> (contains2({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, v) = true))))

logic attr__ATTRIBUTE_ADDRESS : int

logic v : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic color : us_rep6, int -> int

logic color__function_guard : int, us_rep6, int -> prop

axiom color__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray.
  (forall i:int [color({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range3(i)) -> in_range6(color({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, i)))))

axiom color__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray.
  (forall i:int [color({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, i)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range3(i)) -> (((i = 0) -> (color({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, i) = 0)) and ((not (i = 0)) ->
  (color({ us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }, i) = to_rep3((t4[i]))))))))

logic same_nb_blacks : us_rep6 -> bool

logic same_nb_blacks__function_guard : bool, us_rep6 -> prop

type us_split_fields10 = { rec__red_black_trees__black_count__status : bool;
rec__red_black_trees__black_count__depth : extended_index_type;
rec__red_black_trees__black_count__count : extended_index_type
}

function us_split_fields_Status__projection(a: us_split_fields10) : bool =
  (a).rec__red_black_trees__black_count__status

function us_split_fields_Depth__projection(a: us_split_fields10) : extended_index_type =
  (a).rec__red_black_trees__black_count__depth

function us_split_fields_Count__projection(a: us_split_fields10) : extended_index_type =
  (a).rec__red_black_trees__black_count__count

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___6__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep7 = { us_split_fields11 : us_split_fields10
}

function us_rep___6__projection(a: us_rep7) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq19 : us_rep7, us_rep7 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep7. forall b:us_rep7 [bool_eq19(a, b)].
  (((((((a).us_split_fields11).rec__red_black_trees__black_count__status = ((b).us_split_fields11).rec__red_black_trees__black_count__status) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__depth) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__depth))) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__count))) ->
  (bool_eq19(a, b) = true)) and
  ((not (((((a).us_split_fields11).rec__red_black_trees__black_count__status = ((b).us_split_fields11).rec__red_black_trees__black_count__status) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__depth) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__depth))) and
  (to_rep(((a).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep(((b).us_split_fields11).rec__red_black_trees__black_count__count)))) ->
  (bool_eq19(a, b) = false))))

logic value__size10 : int

logic object__size10 : us_rep7 -> int

logic value__alignment10 : int

logic object__alignment10 : us_rep7 -> int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 :
  (forall a:bool. forall a1:extended_index_type.
  forall a2:extended_index_type. (0 <= object__size10({ us_split_fields11 = {
  rec__red_black_trees__black_count__status = a;
  rec__red_black_trees__black_count__depth = a1;
  rec__red_black_trees__black_count__count = a2 } })))

axiom value__alignment_axiom10 : (0 <= value__alignment10)

axiom object__alignment_axiom10 :
  (forall a:bool. forall a1:extended_index_type.
  forall a2:extended_index_type. (0 <= object__alignment10({
  us_split_fields11 = { rec__red_black_trees__black_count__status = a;
  rec__red_black_trees__black_count__depth = a1;
  rec__red_black_trees__black_count__count = a2 } })))

logic red_black_trees__black_count__status__first__bit : int

logic red_black_trees__black_count__status__last__bit : int

logic red_black_trees__black_count__status__position : int

axiom red_black_trees__black_count__status__first__bit_axiom :
  (0 <= red_black_trees__black_count__status__first__bit)

axiom red_black_trees__black_count__status__last__bit_axiom :
  (red_black_trees__black_count__status__first__bit <  red_black_trees__black_count__status__last__bit)

axiom red_black_trees__black_count__status__position_axiom :
  (0 <= red_black_trees__black_count__status__position)

logic red_black_trees__black_count__depth__first__bit : int

logic red_black_trees__black_count__depth__last__bit : int

logic red_black_trees__black_count__depth__position : int

axiom red_black_trees__black_count__depth__first__bit_axiom :
  (0 <= red_black_trees__black_count__depth__first__bit)

axiom red_black_trees__black_count__depth__last__bit_axiom :
  (red_black_trees__black_count__depth__first__bit <  red_black_trees__black_count__depth__last__bit)

axiom red_black_trees__black_count__depth__position_axiom :
  (0 <= red_black_trees__black_count__depth__position)

logic red_black_trees__black_count__count__first__bit : int

logic red_black_trees__black_count__count__last__bit : int

logic red_black_trees__black_count__count__position : int

axiom red_black_trees__black_count__count__first__bit_axiom :
  (0 <= red_black_trees__black_count__count__first__bit)

axiom red_black_trees__black_count__count__last__bit_axiom :
  (red_black_trees__black_count__count__first__bit <  red_black_trees__black_count__count__last__bit)

axiom red_black_trees__black_count__count__position_axiom :
  (0 <= red_black_trees__black_count__count__position)

logic user_eq16 : us_rep7, us_rep7 -> bool

logic dummy28 : bool

logic dummy29 : extended_index_type

logic dummy30 : extended_index_type

type black_count__ref = { black_count__content : us_rep7
}

function black_count__ref___projection(a: black_count__ref) : us_rep7 =
  (a).black_count__content

type map__ref4 = { map__content4 : (int,us_rep7) farray
}

logic slide4 : (int,us_rep7) farray, int, int -> (int,us_rep7) farray

axiom slide_eq4 :
  (forall a:(int,us_rep7) farray.
  (forall first:int [slide4(a, first, first)]. (slide4(a, first, first) = a)))

axiom slide_def4 :
  (forall a:(int,us_rep7) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat4 : (int,us_rep7) farray, int, int, (int,us_rep7) farray, int,
  int -> (int,us_rep7) farray

axiom concat_def4 :
  (forall a:(int,us_rep7) farray. forall b:(int,us_rep7) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat4(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat4(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat4(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton4 : us_rep7, int -> (int,us_rep7) farray

axiom singleton_def4 :
  (forall v1:bool. forall v2:extended_index_type.
  forall v3:extended_index_type.
  (forall i:int [(singleton4({ us_split_fields11 = {
  rec__red_black_trees__black_count__status = v1;
  rec__red_black_trees__black_count__depth = v2;
  rec__red_black_trees__black_count__count = v3 } }, i)[i])]. ((singleton4({
  us_split_fields11 = { rec__red_black_trees__black_count__status = v1;
  rec__red_black_trees__black_count__depth = v2;
  rec__red_black_trees__black_count__count = v3 } }, i)[i]) = {
  us_split_fields11 = { rec__red_black_trees__black_count__status = v1;
  rec__red_black_trees__black_count__depth = v2;
  rec__red_black_trees__black_count__count = v3 } })))

logic bool_eq20 : (int,us_rep7) farray, int, int, (int,us_rep7) farray, int,
  int -> bool

axiom bool_eq_def17 :
  (forall a:(int,us_rep7) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep7) farray. forall b__first:int. forall b__last:int
  [bool_eq20(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_136:int. ((((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) and (bool_eq19((a[temp___idx_136]),
  (b[((b__first - a__first) + temp___idx_136)])) = true)) or
  (not ((a__first <= temp___idx_136) and (temp___idx_136 <= a__last)))))) ->
  (bool_eq20(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_136:int. (((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) -> (bool_eq19((a[temp___idx_136]),
  (b[((b__first - a__first) + temp___idx_136)])) = true))))) -> (bool_eq20(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev4 :
  (forall a:(int,us_rep7) farray. forall b:(int,us_rep7) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq20(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_136:int. (((a__first <= temp___idx_136) and
  (temp___idx_136 <= a__last)) -> (bool_eq19((a[temp___idx_136]),
  (b[((b__first - a__first) + temp___idx_136)])) = true)))))))

logic nb_blacks : us_rep6 -> (int,us_rep7) farray

logic nb_blacks__function_guard : (int,us_rep7) farray, us_rep6 -> prop

axiom same_nb_blacks__post_axiom : true

axiom same_nb_blacks__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [same_nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. ((same_nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true) <-> ((size({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0) or
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((((nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__status = true)))))))

logic eq : us_rep7, us_rep7 -> bool

logic eq__function_guard : bool, us_rep7, us_rep7 -> prop

axiom eq__post_axiom : true

axiom eq__def_axiom :
  (forall x:bool. forall x1:extended_index_type.
  forall x2:extended_index_type. forall y:bool.
  forall y1:extended_index_type. forall y2:extended_index_type [eq({
  us_split_fields11 = { rec__red_black_trees__black_count__status = x;
  rec__red_black_trees__black_count__depth = x1;
  rec__red_black_trees__black_count__count = x2 } }, { us_split_fields11 = {
  rec__red_black_trees__black_count__status = y;
  rec__red_black_trees__black_count__depth = y1;
  rec__red_black_trees__black_count__count = y2 } })]. ((eq({
  us_split_fields11 = { rec__red_black_trees__black_count__status = x;
  rec__red_black_trees__black_count__depth = x1;
  rec__red_black_trees__black_count__count = x2 } }, { us_split_fields11 = {
  rec__red_black_trees__black_count__status = y;
  rec__red_black_trees__black_count__depth = y1;
  rec__red_black_trees__black_count__count = y2 } }) = true) <->
  (((x = true) <-> (y = true)) and (to_rep(x2) = to_rep(y2)))))

logic min : int, int -> int

axiom min_def :
  (forall x:int. forall y:int [min(x, y)]. (((x <= y) -> (min(x, y) = x)) and
  ((not (x <= y)) -> (min(x, y) = y))))

logic max : int, int -> int

axiom max_def :
  (forall x:int. forall y:int [max(x, y)]. (((x <= y) -> (max(x, y) = y)) and
  ((not (x <= y)) -> (max(x, y) = x))))

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom nb_blacks__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and (not (size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0))) ->
  ((bool_eq19((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[0]), { us_split_fields11 = {
  rec__red_black_trees__black_count__status = of_int(1);
  rec__red_black_trees__black_count__depth = of_rep(0);
  rec__red_black_trees__black_count__count = of_rep(0) } }) = true) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (((((((nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct =
  { us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__status = true) <->
  (to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count) = to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  1)])).us_split_fields11).rec__red_black_trees__black_count__count))) and
  (to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__depth) = (1 + max(to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__depth),
  to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  1)])).us_split_fields11).rec__red_black_trees__black_count__depth))))) and
  (((to_rep3((t4[i])) = 0) -> (to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__count) = (1 + to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count)))) and
  ((not (to_rep3((t4[i])) = 0)) -> (to_rep((((nb_blacks({ us_split_fields9 =
  { rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 }
  })[i])).us_split_fields11).rec__red_black_trees__black_count__count) = (0 + to_rep((((nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })[peek({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i,
  0)])).us_split_fields11).rec__red_black_trees__black_count__count))))))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c61b : extended_index_type

logic c61b1 : extended_index_type

logic c61b2 : (int,us_rep3) farray

logic c61b3 : (int,natural) farray

logic c61b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

logic c62b : extended_index_type

logic c62b1 : extended_index_type

logic c62b2 : (int,us_rep3) farray

logic c62b3 : (int,natural) farray

logic c62b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic c67b : extended_index_type

logic c67b1 : extended_index_type

logic c67b2 : (int,us_rep3) farray

logic c67b3 : (int,natural) farray

logic c67b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS8 : int

logic c68b : extended_index_type

logic c68b1 : extended_index_type

logic c68b2 : (int,us_rep3) farray

logic c68b3 : (int,natural) farray

logic c68b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic c75b : extended_index_type

logic c75b1 : extended_index_type

logic c75b2 : (int,us_rep3) farray

logic c75b3 : (int,natural) farray

logic c75b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS11 : int

logic c76b : extended_index_type

logic c76b1 : extended_index_type

logic c76b2 : (int,us_rep3) farray

logic c76b3 : (int,natural) farray

logic c76b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS12 : int

logic c77b : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic c81b : extended_index_type

logic c81b1 : extended_index_type

logic c81b2 : (int,us_rep3) farray

logic c81b3 : (int,natural) farray

logic c81b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS15 : int

logic c82b : extended_index_type

logic c82b1 : extended_index_type

logic c82b2 : (int,us_rep3) farray

logic c82b3 : (int,natural) farray

logic c82b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS16 : int

logic c83b : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic c87b : extended_index_type

logic c87b1 : extended_index_type

logic c87b2 : (int,us_rep3) farray

logic c87b3 : (int,natural) farray

logic c87b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS20 : int

logic c88b : extended_index_type

logic c88b1 : extended_index_type

logic c88b2 : (int,us_rep3) farray

logic c88b3 : (int,natural) farray

logic c88b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS21 : int

logic c89b : int

logic attr__ATTRIBUTE_ADDRESS22 : int

logic y1 : int

logic attr__ATTRIBUTE_ADDRESS23 : int

logic attr__ATTRIBUTE_ADDRESS24 : int

logic c94b : extended_index_type

logic c94b1 : extended_index_type

logic c94b2 : (int,us_rep3) farray

logic c94b3 : (int,natural) farray

logic c94b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS25 : int

logic c95b : extended_index_type

logic c95b1 : extended_index_type

logic c95b2 : (int,us_rep3) farray

logic c95b3 : (int,natural) farray

logic c95b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS26 : int

logic c96b : int

logic attr__ATTRIBUTE_ADDRESS27 : int

logic attr__ATTRIBUTE_ADDRESS28 : int

logic c100b : extended_index_type

logic c100b1 : extended_index_type

logic c100b2 : (int,us_rep3) farray

logic c100b3 : (int,natural) farray

logic c100b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS29 : int

logic c101b : extended_index_type

logic c101b1 : extended_index_type

logic c101b2 : (int,us_rep3) farray

logic c101b3 : (int,natural) farray

logic c101b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS30 : int

logic c102b : int

logic attr__ATTRIBUTE_ADDRESS31 : int

logic y2 : int

logic attr__ATTRIBUTE_ADDRESS32 : int

logic attr__ATTRIBUTE_ADDRESS33 : int

logic c106b : extended_index_type

logic c106b1 : extended_index_type

logic c106b2 : (int,us_rep3) farray

logic c106b3 : (int,natural) farray

logic c106b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS34 : int

logic c107b : extended_index_type

logic c107b1 : extended_index_type

logic c107b2 : (int,us_rep3) farray

logic c107b3 : (int,natural) farray

logic c107b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS35 : int

logic c108b : int

logic attr__ATTRIBUTE_ADDRESS36 : int

logic y3 : int

logic attr__ATTRIBUTE_ADDRESS37 : int

logic attr__ATTRIBUTE_ADDRESS38 : int

logic c114b : extended_index_type

logic c114b1 : extended_index_type

logic c114b2 : (int,us_rep3) farray

logic c114b3 : (int,natural) farray

logic c114b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS39 : int

logic c115b : extended_index_type

logic c115b1 : extended_index_type

logic c115b2 : (int,us_rep3) farray

logic c115b3 : (int,natural) farray

logic c115b4 : (int,color_type) farray

logic attr__ATTRIBUTE_ADDRESS40 : int

logic attr__ATTRIBUTE_ADDRESS41 : int

axiom invariant____post_axiom : true

axiom invariant____def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  forall t4:(int,color_type) farray [invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } })]. ((invariant__({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true) <->
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((parent({
   us_split_fields7 = { rec__search_trees__search_tree__root = t;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
   rec__search_trees__search_tree__values = t3 } }, i) = 0) or
   (to_rep3((t4[parent({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
   rec__search_trees__search_tree__values = t3 } }, i)])) = 1)) ->
   (to_rep3((t4[i])) = 0)))) and
  (same_nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct =
  { us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } };
  rec__red_black_trees__rbt__color = t4 } }) = true))))

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard1 : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq3(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq3(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq3(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

logic olt__function_guard : bool, us_rep, us_rep -> prop

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s1:us_rep. forall s2:us_rep.
  (forall d:int [is_add(s1, d, s2)]. (((is_add(s1, d, s2) = true) ->
  ((((length(s2) - 1) = length(s1)) and (((bool_lt(length(s1),
  length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false)))) and (get(s2, length(s2)) = d))) and
  (((((length(s2) - 1) = length(s1)) and ((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n)))))) and (get(s2, length(s2)) = d)) -> (is_add(s1, d,
  s2) = true)))))

type count_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y4:int [bool_eq21(x, y4)]. (((x = y4) ->
  (bool_eq21(x, y4) = true)) and ((not (x = y4)) -> (bool_eq21(x,
  y4) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq17 : count_type, count_type -> bool

logic dummy31 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

axiom contains__post_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall v1:int [contains2({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, v1)]. ((((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep(t) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep(t), t3) = true)))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = true)) and in_range1(v1)) -> ((contains2({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, v1) = true) <->
  (contains(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }), v1) = true)))))

axiom ordered_leafs__post_axiom : true

axiom size__post_axiom2 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray [size1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) -> in_range3(size1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }))))

axiom valid_root__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) -> ((size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) <  i) -> (not (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = true))))))

axiom parent__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i:int [parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) -> ((((valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = true) -> (parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0)) and ((size1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }) = 0) -> (parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = 0))) and in_range3(parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i))))))

axiom position__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) and (not (parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) -> in_range5(position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)))))

axiom peek__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i:int. forall d:int [peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(i)) and in_range5(d)) -> (((((not (peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d) = 0)) -> ((position({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)) = d) and (parent1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d)) = i))) and ((peek1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, i,
  d) = 0) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((parent1({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = i) -> (not (position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = d))))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((parent1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, j) = i) and (position({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, j) = d)) -> (peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d) = j))))) and in_range3(peek1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i, d))))))

axiom model____post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall root1:int [model__1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range2(root1)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1) = true)) -> ((((((model__1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1)[root1])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root1)[root1])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root1)) ->
   ((((not (parent1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root1)[parent1({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent1({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root1)[parent1({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root1))) -> (is_add((((model__1({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root1)[parent1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i), (((model__1({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root1)))) -> (length((((model__1({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root1)[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((((((model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((model__1({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1)[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__1({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (j = i))))))))))) and
  (forall temp___219:int. (((1 <= temp___219) and (temp___219 <= 100)) ->
  (length((((model__1({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root1)[temp___219])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))))

axiom tree_structure__post_axiom : true

type extended_index

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq22 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y4:int [bool_eq22(x, y4)]. (((x = y4) ->
  (bool_eq22(x, y4) = true)) and ((not (x = y4)) -> (bool_eq22(x,
  y4) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq18 : extended_index, extended_index -> bool

logic dummy32 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range7(length(container))))

type element_type

predicate in_range9(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq23 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y4:int [bool_eq23(x, y4)]. (((x = y4) ->
  (bool_eq23(x, y4) = true)) and ((not (x = y4)) -> (bool_eq23(x,
  y4) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq19 : element_type, element_type -> bool

logic dummy33 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position2:int [get(container, position2)].
  ((in_range8(position2) and ((1 <= position2) and
  (position2 <= (0 + length(container))))) -> in_range9(get(container,
  position2)))))

type element_type1

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq24 : int, int -> bool

axiom bool_eq_def21 :
  (forall x:int. forall y4:int [bool_eq24(x, y4)]. (((x = y4) ->
  (bool_eq24(x, y4) = true)) and ((not (x = y4)) -> (bool_eq24(x,
  y4) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq20 : element_type1, element_type1 -> bool

logic dummy34 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom contains__post_axiom2 :
  (forall container:us_rep2.
  (forall item:int [contains(container, item)]. (in_range10(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range10(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

axiom length__post_axiom1 :
  (forall container:us_rep2 [length1(container)].
  in_range7(length1(container)))

axiom ole__post_axiom :
  (forall left:us_rep2. forall right:us_rep2 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall item:int. ((in_range10(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom is_empty__post_axiom :
  (forall container:us_rep2 [is_empty(container)].
  (((is_empty(container) = true) <->
  (forall item:int. (not (in_range10(item) and (contains(container,
  item) = true))))) and ((is_empty(container) = true) <->
  (length1(container) = 0))))

axiom included_except__post_axiom :
  (forall left:us_rep2. forall right:us_rep2.
  (forall item:int [included_except(left, right, item)]. (in_range10(item) ->
  ((included_except(left, right, item) = true) <->
  (forall e:int. ((in_range10(e) and (contains(left, e) = true)) ->
  ((contains(right, e) = true) or (e = item))))))))

 (* File "red_black_trees.ads", line 59, characters 0-0 *)
goal WP_parameter_def :
  (forall t__split_fields:extended_index_type.
  forall t__split_fields1:extended_index_type.
  forall t__split_fields2:(int,us_rep3) farray.
  forall t__split_fields3:(int,natural) farray.
  forall t__split_fields4:(int,color_type) farray. forall x:int.
  forall y4:int. forall t_old__split_fields:extended_index_type.
  forall t_old__split_fields1:extended_index_type.
  forall t_old__split_fields2:(int,us_rep3) farray.
  forall t_old__split_fields3:(int,natural) farray.
  forall t_old__split_fields4:(int,color_type) farray. forall n:int.
  forall o:color_type. forall o1:int. forall o2:(int,color_type) farray.
  forall o3:extended_index_type. forall o4:extended_index_type.
  forall o5:(int,us_rep3) farray. forall o6:(int,natural) farray.
  forall o7:(int,color_type) farray. forall temp___604:extended_index_type.
  forall temp___6041:extended_index_type.
  forall temp___6042:(int,us_rep3) farray.
  forall temp___6043:(int,natural) farray.
  forall temp___6044:(int,color_type) farray. forall o8:int. forall o9:int.
  forall o10:int. forall o11:int. forall o12:bool. forall o13:int.
  forall o14:int. forall o15:int. forall o16:int. forall o17:int.
  forall o18:int. forall o19:int. forall o20:int. forall o21:int.
  forall o22:int. forall o23:int. forall o24:int. forall o25:int.
  forall o26:int. forall o27:int. forall o28:int. forall o29:int.
  forall o30:int. forall red_black_trees__insert__L_8__C83b__assume:int.
  forall o31:int. forall red_black_trees__insert__L_8__B84b__y__assume:int.
  forall o32:int. forall temp___817:int. forall o33:color_type.
  forall o34:int. forall o35:(int,color_type) farray.
  forall o36:us_split_fields8. forall temp___819:us_rep6. forall o37:int.
  forall o38:int. forall o39:int. forall temp___821:int.
  forall o40:color_type. forall o41:int. forall o42:(int,color_type) farray.
  forall o43:us_split_fields8. forall temp___823:us_rep6. forall o44:int.
  forall o45:int. forall o46:int. forall o47:int. forall o48:int.
  forall o49:int. forall o50:int. forall o51:int. forall o52:int.
  forall red_black_trees__insert__L_8__C89b__assume:int. forall o53:int.
  forall red_black_trees__insert__L_8__B90b__y__assume:int. forall n1:int.
  forall result:us_split_fields__ref4.
  forall t_old__split_fields5:us_split_fields8. forall x1:int.
  forall search_trees__insert__t__fields:us_split_fields6.
  forall result1:us_split_fields__ref4.
  forall t__split_fields5:us_split_fields8. forall n2:int__ref.
  forall n3:int. forall result2:us_split_fields__ref4.
  forall t__split_fields6:us_split_fields8. forall result3:bool.
  forall result4:bool. forall t__split_fields7:us_split_fields8.
  forall x2:int. forall y5:int. forall t_old__split_fields6:us_split_fields8.
  forall n4:int. forall n5:int. forall rho:us_split_fields6.
  forall result5:us_split_fields__ref4.
  forall t_old__split_fields7:us_split_fields8. forall result6:bool.
  forall result7:int__ref. forall y6:int. forall result8:bool.
  forall result9:bool. forall result10:int__ref. forall x3:int.
  forall search_trees__left_rotate__t__fields:us_split_fields6.
  forall result11:us_split_fields__ref4.
  forall t__split_fields8:us_split_fields8. forall n6:int__ref.
  forall n7:int. forall result12:us_split_fields__ref4.
  forall t_old__split_fields8:us_split_fields8.
  forall t__split_fields9:us_split_fields__ref4. forall x4:int__ref.
  forall t_old__split_fields9:us_split_fields__ref4. forall n8:int__ref.
  forall t__split_fields10:us_split_fields8. forall x5:int.
  forall t_old__split_fields10:us_split_fields8. forall n9:int.
  forall rho1:us_split_fields6. forall result13:us_split_fields__ref4.
  forall t__split_fields11:us_split_fields8.
  forall result14:us_split_fields__ref4.
  forall t__split_fields12:us_split_fields8.
  forall search_trees__right_rotate__t__fields:us_split_fields6.
  forall result15:us_split_fields__ref4.
  forall t__split_fields13:us_split_fields8. forall result16:int__ref.
  forall n10:int. (((((size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }) = 0) and
  (to_rep(t__split_fields) = 0)) or ((not (size1({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }) = 0)) and
  (((not (to_rep(t__split_fields) = 0)) and (valid_root({ us_split_fields5 =
  { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } },
  to_rep(t__split_fields)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } },
  to_rep(t__split_fields), t__split_fields3) = true)))) and (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }) = true)) ->
  (in_range1(v) -> ((invariant__({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } };
  rec__red_black_trees__rbt__color = t__split_fields4 } }) = true) ->
  ((size2({ us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } };
  rec__red_black_trees__rbt__color = t__split_fields4 } }) <  100) ->
  (((0 <= 100) -> in_range3(x)) -> (((0 <= 100) -> in_range3(y4)) ->
  (((result = { us_split_fields__content4 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t_old__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t_old__split_fields1;
  rec__binary_trees__forest__c = t_old__split_fields2 } };
  rec__search_trees__search_tree__values = t_old__split_fields3 } };
  rec__red_black_trees__rbt__color = t_old__split_fields4 } }) and
  (t_old__split_fields5 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } };
  rec__red_black_trees__rbt__color = t__split_fields4 })) ->
  (((((size1((((t_old__split_fields5).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct) = 0) and
  (to_rep((((t_old__split_fields5).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root) = 0)) or
  ((not (size1((((t_old__split_fields5).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct) = 0)) and
  (((not (to_rep((((t_old__split_fields5).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root) = 0)) and
  (valid_root((((t_old__split_fields5).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  to_rep((((t_old__split_fields5).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root)) = true)) and
  (ordered_leafs((((t_old__split_fields5).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  to_rep((((t_old__split_fields5).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root),
  (((t_old__split_fields5).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__values) = true)))) and
  (tree_structure((((t_old__split_fields5).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct) = true)) ->
  ((((((contains(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }),
  v) = true) and (((((((x1 = 0) and (oeq(values({ us_split_fields7 =
  search_trees__insert__t__fields }), values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })) = true)) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (parent({ us_split_fields7 =
  search_trees__insert__t__fields }, j) = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((not (parent({
  us_split_fields7 = search_trees__insert__t__fields }, j) = 0)) ->
  (position1({ us_split_fields7 = search_trees__insert__t__fields },
  j) = position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j)))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
  us_split_fields7 = search_trees__insert__t__fields
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((((model__({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  ((((model__({ us_split_fields7 = search_trees__insert__t__fields
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  (forall d:int. (((0 <= d) and (d <= 1)) -> (((((model__({
  us_split_fields7 = search_trees__insert__t__fields
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) -> (peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j,
  d) = peek({ us_split_fields7 = search_trees__insert__t__fields }, j, d))))))))) or
  ((not (contains(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }),
  v) = true)) and (((bool_eq1(size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }),
  0) = true) and ((((((not (x1 = 0)) and (size({ us_split_fields7 =
  search_trees__insert__t__fields }) = 1)) and (root({ us_split_fields7 =
  search_trees__insert__t__fields }) = x1)) and (is_add__2(values({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }), v, values({
  us_split_fields7 = search_trees__insert__t__fields })) = true)) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root({
  us_split_fields7 = search_trees__insert__t__fields }))) ->
  (not ((((model__({ us_split_fields7 = search_trees__insert__t__fields
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (parent({ us_split_fields7 =
  search_trees__insert__t__fields }, i) = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, i)))))) or
  ((not (bool_eq1(size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }),
  0) = true)) and ((((((((((((not (x1 = 0)) and ((((model__({
  us_split_fields7 = search_trees__insert__t__fields
  })[x1])).us_split_fields1).rec__tree_model__path_type__k = true)) and
  (root({ us_split_fields7 = search_trees__insert__t__fields }) = root({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }))) and
  (size({ us_split_fields7 = search_trees__insert__t__fields }) = (size({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }) + 1))) and
  (is_add__2(values({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }), v, values({
  us_split_fields7 = search_trees__insert__t__fields })) = true)) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((not (x1 = j)) -> (parent({
  us_split_fields7 = search_trees__insert__t__fields }, j) = parent({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j)))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((not (x1 = j)) and
  (not (parent({ us_split_fields7 = search_trees__insert__t__fields },
  j) = 0))) -> (position1({ us_split_fields7 =
  search_trees__insert__t__fields }, j) = position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j)))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((not (x1 = j)) and
  ((((model__({ us_split_fields7 = search_trees__insert__t__fields
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
  ((((model__({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (((((model__({ us_split_fields7 = search_trees__insert__t__fields
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (not (x1 = j))))))) and
  (forall d:int. (((0 <= d) and (d <= 1)) -> (peek({ us_split_fields7 =
  search_trees__insert__t__fields }, x1, d) = 0)))) and (peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, parent({
  us_split_fields7 = search_trees__insert__t__fields }, x1), position1({
  us_split_fields7 = search_trees__insert__t__fields }, x1)) = 0)) and
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  (forall d:int. (((0 <= d) and (d <= 1)) -> (((((((model__({
  us_split_fields7 = search_trees__insert__t__fields
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (not (x1 = j))) and ((not (j = parent({ us_split_fields7 =
  search_trees__insert__t__fields }, x1))) or (not (d = position1({
  us_split_fields7 = search_trees__insert__t__fields }, x1))))) -> (peek({
  us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, j,
  d) = peek({ us_split_fields7 = search_trees__insert__t__fields }, j, d)))))))))))) and
  (((((size1((search_trees__insert__t__fields).rec__search_trees__search_tree__struct) = 0) and
  (to_rep((search_trees__insert__t__fields).rec__search_trees__search_tree__root) = 0)) or
  ((not (size1((search_trees__insert__t__fields).rec__search_trees__search_tree__struct) = 0)) and
  (((not (to_rep((search_trees__insert__t__fields).rec__search_trees__search_tree__root) = 0)) and
  (valid_root((search_trees__insert__t__fields).rec__search_trees__search_tree__struct,
  to_rep((search_trees__insert__t__fields).rec__search_trees__search_tree__root)) = true)) and
  (ordered_leafs((search_trees__insert__t__fields).rec__search_trees__search_tree__struct,
  to_rep((search_trees__insert__t__fields).rec__search_trees__search_tree__root),
  (search_trees__insert__t__fields).rec__search_trees__search_tree__values) = true)))) and
  (tree_structure((search_trees__insert__t__fields).rec__search_trees__search_tree__struct) = true)) and
  in_range3(x1))) and ((result1 = { us_split_fields__content4 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } };
  rec__red_black_trees__rbt__color = t__split_fields4 } }) and
  (t__split_fields5 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = search_trees__insert__t__fields };
  rec__red_black_trees__rbt__color = t__split_fields4 }))) ->
  (((not (x1 = 0)) and ((n2 = { int__content = n }) and (n3 = n1))) ->
  ((((((to_rep3(o) = 1) and ((((1 <= x1) and (x1 <= 100)) and (o1 = x1)) and
  (o2 = ((t__split_fields5).rec__red_black_trees__rbt__color[o1 <- o])))) and
  (((t__split_fields5).rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = o3;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = o4; rec__binary_trees__forest__c = o5 } };
  rec__search_trees__search_tree__values = o6 } }) and (o2 = o7))) and
  (((temp___604 = o3) and (((temp___6041 = o4) and (temp___6042 = o5)) and
  (temp___6043 = o6))) and (temp___6044 = o7))) and ((result2 = {
  us_split_fields__content4 = t__split_fields5 }) and (t__split_fields6 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = temp___604;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = temp___6041; rec__binary_trees__forest__c =
  temp___6042 } }; rec__search_trees__search_tree__values = temp___6043 } };
  rec__red_black_trees__rbt__color = temp___6044 }))) ->
  (((t_old__split_fields5 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = c67b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c67b1; rec__binary_trees__forest__c = c67b2
  } }; rec__search_trees__search_tree__values = c67b3 } };
  rec__red_black_trees__rbt__color = c67b4 }) and ((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = c67b1;
  rec__binary_trees__forest__c = c67b2 } }) = 0) and (to_rep(c67b) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = c67b1;
  rec__binary_trees__forest__c = c67b2 } }) = 0)) and
  (((not (to_rep(c67b) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = c67b1; rec__binary_trees__forest__c = c67b2
  } }, to_rep(c67b)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = c67b1; rec__binary_trees__forest__c = c67b2
  } }, to_rep(c67b), c67b3) = true)))) and (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = c67b1;
  rec__binary_trees__forest__c = c67b2 } }) = true))) ->
  (((t__split_fields6 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = c68b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c68b1; rec__binary_trees__forest__c = c68b2
  } }; rec__search_trees__search_tree__values = c68b3 } };
  rec__red_black_trees__rbt__color = c68b4 }) and ((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = c68b1;
  rec__binary_trees__forest__c = c68b2 } }) = 0) and (to_rep(c68b) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = c68b1;
  rec__binary_trees__forest__c = c68b2 } }) = 0)) and
  (((not (to_rep(c68b) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = c68b1; rec__binary_trees__forest__c = c68b2
  } }, to_rep(c68b)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = c68b1; rec__binary_trees__forest__c = c68b2
  } }, to_rep(c68b), c68b3) = true)))) and (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = c68b1;
  rec__binary_trees__forest__c = c68b2 } }) = true))) -> ((same_nb_blacks({
  us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = c68b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c68b1; rec__binary_trees__forest__c = c68b2
  } }; rec__search_trees__search_tree__values = c68b3 } };
  rec__red_black_trees__rbt__color = c68b4 } }) = true) ->
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((not (i = x1)) and
   ((parent((t__split_fields6).rec__red_black_trees__rbt__struct, i) = 0) or
   (to_rep3(((t__split_fields6).rec__red_black_trees__rbt__color[parent((t__split_fields6).rec__red_black_trees__rbt__struct,
   i)])) = 1))) ->
   (to_rep3(((t__split_fields6).rec__red_black_trees__rbt__color[i])) = 0)))) ->
  ((((((o11 = root((t__split_fields6).rec__red_black_trees__rbt__struct)) and
  (in_range2(o11) and
  (o11 = to_rep((((t__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root)))) and
  (((x1 = o11) and (o12 = true)) or ((not (x1 = o11)) and
  (o12 = false)))) and (((not (o12 = true)) and (result4 = true)) or
  ((o12 = true) and (result4 = false)))) and (((result4 = true) and
  (((((o8 = x1) and in_range2(x1)) and
  ((o9 = parent((t__split_fields6).rec__red_black_trees__rbt__struct,
  o8)) and (in_range3(o9) and
  ((o9 = parent1((((t__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o8)) and
  ((size((t__split_fields6).rec__red_black_trees__rbt__struct) = 0) ->
  (o9 = 0)))))) and ((o10 = color({ us_split_fields9 = t__split_fields6 },
  o9)) and (in_range6(o10) and (((o9 = 0) and (o10 = 0)) or
  ((not (o9 = 0)) and
  (o10 = to_rep3(((t__split_fields6).rec__red_black_trees__rbt__color[o9])))))))) and
  (((o10 = 1) and (result3 = true)) or ((not (o10 = 1)) and
  (result3 = false))))) or ((not (result4 = true)) and
  (result3 = false)))) -> ((result3 = true) -> (((not (x2 = 0)) and
  ((size((t__split_fields7).rec__red_black_trees__rbt__struct) = size((t__split_fields6).rec__red_black_trees__rbt__struct)) and
  ((root((t__split_fields7).rec__red_black_trees__rbt__struct) = root((t__split_fields6).rec__red_black_trees__rbt__struct)) and
  (((((model__((t__split_fields7).rec__red_black_trees__rbt__struct)[x2])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((color({ us_split_fields9 = t__split_fields7 }, x2) = 1) and ((color({
  us_split_fields9 = t__split_fields7 },
  root((t__split_fields7).rec__red_black_trees__rbt__struct)) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((not (i = x2)) and
   ((parent((t__split_fields7).rec__red_black_trees__rbt__struct, i) = 0) or
   (to_rep3(((t__split_fields7).rec__red_black_trees__rbt__color[parent((t__split_fields7).rec__red_black_trees__rbt__struct,
   i)])) = 1))) ->
   (to_rep3(((t__split_fields7).rec__red_black_trees__rbt__color[i])) = 0)))) and
  ((oeq(values((t__split_fields7).rec__red_black_trees__rbt__struct),
  values((t__split_fields6).rec__red_black_trees__rbt__struct)) = true) and
  (same_nb_blacks({ us_split_fields9 = t__split_fields7 }) = true))))))))) ->
  ((((((0 <= 100) -> in_range3(x2)) and
  ((((size1((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct) = 0) and
  (to_rep((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root) = 0)) or
  ((not (size1((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct) = 0)) and
  (((not (to_rep((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root) = 0)) and
  (valid_root((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  to_rep((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root)) = true)) and
  (ordered_leafs((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  to_rep((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root),
  (((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__values) = true)))) and
  (tree_structure((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct) = true))) and
  ((0 <= 100) -> in_range3(y5))) and
  ((((size1((((t_old__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct) = 0) and
  (to_rep((((t_old__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root) = 0)) or
  ((not (size1((((t_old__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct) = 0)) and
  (((not (to_rep((((t_old__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root) = 0)) and
  (valid_root((((t_old__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  to_rep((((t_old__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root)) = true)) and
  (ordered_leafs((((t_old__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  to_rep((((t_old__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__root),
  (((t_old__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__values) = true)))) and
  (tree_structure((((t_old__split_fields6).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct) = true))) ->
  (((result5 = { us_split_fields__content4 = t_old__split_fields6 }) and
  (t_old__split_fields7 = t__split_fields7)) -> (((((((o13 = x2) and
  in_range2(x2)) and
  ((o14 = parent((t__split_fields7).rec__red_black_trees__rbt__struct,
  o13)) and (in_range3(o14) and
  ((o14 = parent1((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o13)) and
  ((size((t__split_fields7).rec__red_black_trees__rbt__struct) = 0) ->
  (o14 = 0)))))) and ((o15 = o14) and in_range2(o14))) and
  ((o16 = position1((t__split_fields7).rec__red_black_trees__rbt__struct,
  o15)) and (in_range5(o16) and
  (o16 = position((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o15))))) and (((o16 = 0) and (result6 = true)) or ((not (o16 = 0)) and
  (result6 = false)))) -> ((result6 = true) -> (((((((((o17 = x2) and
  in_range2(x2)) and
  ((o18 = parent((t__split_fields7).rec__red_black_trees__rbt__struct,
  o17)) and (in_range3(o18) and
  ((o18 = parent1((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o17)) and
  ((size((t__split_fields7).rec__red_black_trees__rbt__struct) = 0) ->
  (o18 = 0)))))) and ((o19 = o18) and in_range2(o18))) and
  ((o20 = parent((t__split_fields7).rec__red_black_trees__rbt__struct,
  o19)) and (in_range3(o20) and
  ((o20 = parent1((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o19)) and
  ((size((t__split_fields7).rec__red_black_trees__rbt__struct) = 0) ->
  (o20 = 0)))))) and ((o21 = o20) and in_range2(o20))) and
  ((o22 = peek((t__split_fields7).rec__red_black_trees__rbt__struct, o21,
  1)) and (in_range3(o22) and
  (o22 = peek1((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o21, 1))))) and ((result7 = { int__content = y5 }) and (y6 = o22))) ->
  ((((o23 = color({ us_split_fields9 = t__split_fields7 }, y6)) and
  (in_range6(o23) and (((y6 = 0) and (o23 = 0)) or ((not (y6 = 0)) and
  (o23 = to_rep3(((t__split_fields7).rec__red_black_trees__rbt__color[y6]))))))) and
  (((o23 = 1) and (result8 = true)) or ((not (o23 = 1)) and
  (result8 = false)))) -> ((not (result8 = true)) -> ((((((((o24 = x2) and
  in_range2(x2)) and
  ((o25 = parent((t__split_fields7).rec__red_black_trees__rbt__struct,
  o24)) and (in_range3(o25) and
  ((o25 = parent1((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o24)) and
  ((size((t__split_fields7).rec__red_black_trees__rbt__struct) = 0) ->
  (o25 = 0)))))) and ((o26 = o25) and in_range2(o25))) and
  ((o27 = peek((t__split_fields7).rec__red_black_trees__rbt__struct, o26,
  1)) and (in_range3(o27) and
  (o27 = peek1((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o26, 1))))) and (((x2 = o27) and (result9 = true)) or ((not (x2 = o27)) and
  (result9 = false)))) and (((result9 = true) and ((((((o28 = x2) and
  in_range2(x2)) and
  ((o29 = parent((t__split_fields7).rec__red_black_trees__rbt__struct,
  o28)) and (in_range3(o29) and
  ((o29 = parent1((((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o28)) and
  ((size((t__split_fields7).rec__red_black_trees__rbt__struct) = 0) ->
  (o29 = 0)))))) and ((result10 = { int__content = x2 }) and (x3 = o29))) and
  (((((o30 = x3) and in_range2(x3)) and (((size({ us_split_fields7 =
  search_trees__left_rotate__t__fields }) = size({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7
  })) and ((((not (root({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7
  }) = o30)) and (root({ us_split_fields7 =
  search_trees__left_rotate__t__fields }) = root({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7
  }))) or ((root({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7
  }) = o30) and (root({ us_split_fields7 =
  search_trees__left_rotate__t__fields }) = peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1)))) and ((parent({ us_split_fields7 =
  search_trees__left_rotate__t__fields }, o30) = peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1)) and ((position1({ us_split_fields7 =
  search_trees__left_rotate__t__fields }, o30) = 0) and ((parent({
  us_split_fields7 = search_trees__left_rotate__t__fields }, peek({
  us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1)) = parent({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30)) and (((not (root({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7
  }) = o30)) -> (position1({ us_split_fields7 =
  search_trees__left_rotate__t__fields }, peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1)) = position1({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30))) and (((not (peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1), 0) = 0)) -> ((parent({ us_split_fields7 =
  search_trees__left_rotate__t__fields }, peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1), 0)) = o30) and (position1({ us_split_fields7 =
  search_trees__left_rotate__t__fields }, peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1), 0)) = 1))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> ((((not (j = o30)) and
   ((not (parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j) = o30)) or (position1({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j) = 0))) and ((((parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j) = 0) or (not (parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j)) = o30))) or (position1({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j)) = 0)) or (position1({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j) = 1))) -> (parent({ us_split_fields7 =
   search_trees__left_rotate__t__fields }, j) = parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j))))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> (((((not (j = o30)) and
   (not (parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j) = 0))) and ((not (parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j) = o30)) or (position1({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j) = 0))) and (((not (parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j)) = o30)) or (position1({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   parent({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j)) = 0)) or (position1({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j) = 1))) -> (position1({ us_split_fields7 =
   search_trees__left_rotate__t__fields }, j) = position1({
   us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
   j))))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
   us_split_fields7 = search_trees__left_rotate__t__fields
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
   us_split_fields7 =
   ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields7 = search_trees__left_rotate__t__fields
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((oeq(values({ us_split_fields7 = search_trees__left_rotate__t__fields }),
  values({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7
  })) = true) and ((peek({ us_split_fields7 =
  search_trees__left_rotate__t__fields }, o30, 1) = peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1), 0)) and (((not (parent({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30) = 0)) -> (peek({ us_split_fields7 =
  search_trees__left_rotate__t__fields }, parent({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30), position1({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30)) = peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1))) and ((peek({ us_split_fields7 =
  search_trees__left_rotate__t__fields }, peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1), 0) = o30) and
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  (forall d:int. (((0 <= d) and (d <= 1)) -> ((((((not (j = o30)) or
  (d = 0)) and ((not (j = parent({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30))) or (not (d = position1({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30))))) and ((not (j = peek({ us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o30, 1))) or (d = 1))) and ((((model__({ us_split_fields7 =
  search_trees__left_rotate__t__fields
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true)) -> (peek({
  us_split_fields7 = search_trees__left_rotate__t__fields }, j, d) = peek({
  us_split_fields7 =
  ((t__split_fields7).rec__red_black_trees__rbt__struct).us_split_fields7 },
  j, d)))))))))))))))))))))) and
  ((((size1((search_trees__left_rotate__t__fields).rec__search_trees__search_tree__struct) = 0) and
  (to_rep((search_trees__left_rotate__t__fields).rec__search_trees__search_tree__root) = 0)) or
  ((not (size1((search_trees__left_rotate__t__fields).rec__search_trees__search_tree__struct) = 0)) and
  (((not (to_rep((search_trees__left_rotate__t__fields).rec__search_trees__search_tree__root) = 0)) and
  (valid_root((search_trees__left_rotate__t__fields).rec__search_trees__search_tree__struct,
  to_rep((search_trees__left_rotate__t__fields).rec__search_trees__search_tree__root)) = true)) and
  (ordered_leafs((search_trees__left_rotate__t__fields).rec__search_trees__search_tree__struct,
  to_rep((search_trees__left_rotate__t__fields).rec__search_trees__search_tree__root),
  (search_trees__left_rotate__t__fields).rec__search_trees__search_tree__values) = true)))) and
  (tree_structure((search_trees__left_rotate__t__fields).rec__search_trees__search_tree__struct) = true)))) and
  ((result11 = { us_split_fields__content4 = t__split_fields7 }) and
  (t__split_fields8 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = search_trees__left_rotate__t__fields };
  rec__red_black_trees__rbt__color =
  (t__split_fields7).rec__red_black_trees__rbt__color }))) and
  (((t_old__split_fields7 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = c81b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c81b1; rec__binary_trees__forest__c = c81b2
  } }; rec__search_trees__search_tree__values = c81b3 } };
  rec__red_black_trees__rbt__color = c81b4 }) and ((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = c81b1;
  rec__binary_trees__forest__c = c81b2 } }) = 0) and (to_rep(c81b) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = c81b1;
  rec__binary_trees__forest__c = c81b2 } }) = 0)) and
  (((not (to_rep(c81b) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = c81b1; rec__binary_trees__forest__c = c81b2
  } }, to_rep(c81b)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = c81b1; rec__binary_trees__forest__c = c81b2
  } }, to_rep(c81b), c81b3) = true)))) and (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = c81b1;
  rec__binary_trees__forest__c = c81b2 } }) = true))) and
  (((t__split_fields8 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = c82b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }; rec__search_trees__search_tree__values = c82b3 } };
  rec__red_black_trees__rbt__color = c82b4 }) and ((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = c82b1;
  rec__binary_trees__forest__c = c82b2 } }) = 0) and (to_rep(c82b) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = c82b1;
  rec__binary_trees__forest__c = c82b2 } }) = 0)) and
  (((not (to_rep(c82b) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }, to_rep(c82b)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }, to_rep(c82b), c82b3) = true)))) and (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = c82b1;
  rec__binary_trees__forest__c = c82b2 } }) = true))) and
  (((((red_black_trees__insert__L_8__C83b__assume = x3) and
  in_range2(x3)) and (red_black_trees__insert__L_8__C83b__assume = c83b)) and
  in_range2(c83b)) and ((((((o31 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = c82b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }; rec__search_trees__search_tree__values = c82b3 } }, c83b)) and
  (in_range3(o31) and ((o31 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }, c83b)) and ((size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = c82b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }; rec__search_trees__search_tree__values = c82b3 } }) = 0) ->
  (o31 = 0))))) and
  ((red_black_trees__insert__L_8__B84b__y__assume = o31) and
  in_range2(o31))) and
  (red_black_trees__insert__L_8__B84b__y__assume = y)) and (in_range2(y) and
  (same_nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct =
  { us_split_fields7 = { rec__search_trees__search_tree__root = c82b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c82b1; rec__binary_trees__forest__c = c82b2
  } }; rec__search_trees__search_tree__values = c82b3 } };
  rec__red_black_trees__rbt__color = c82b4 } }) = true))) and ((result12 = {
  us_split_fields__content4 = t_old__split_fields7 }) and
  (t_old__split_fields8 = t__split_fields8)))))))) and (((n8 = n6) and
  ((t_old__split_fields9 = { us_split_fields__content4 = t_old__split_fields8
  }) and ((x4 = { int__content = x3 }) and (t__split_fields9 = {
  us_split_fields__content4 = t__split_fields8 })))) and
  ((rho1 = search_trees__left_rotate__t__fields) and ((n9 = n7) and
  ((t_old__split_fields10 = t_old__split_fields8) and ((x5 = x3) and
  (t__split_fields10 = t__split_fields8)))))))) or
  ((not (result9 = true)) and (((n8 = { int__content = n4 }) and
  ((t_old__split_fields9 = { us_split_fields__content4 = t_old__split_fields7
  }) and ((x4 = { int__content = x2 }) and (t__split_fields9 = {
  us_split_fields__content4 = t__split_fields7 })))) and ((rho1 = rho) and
  ((n9 = n4) and ((t_old__split_fields10 = t_old__split_fields7) and
  ((x5 = x2) and (t__split_fields10 = t__split_fields7))))))))) ->
  ((not (parent(((t__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct,
  parent(((t__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct,
  (x4).int__content)) = 0)) ->
  ((not (peek(((t__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct,
  parent(((t__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct,
  parent(((t__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct,
  (x4).int__content)), 0) = 0)) -> ((((((to_rep3(o33) = 0) and
  (((((o32 = (x4).int__content) and in_range2((x4).int__content)) and
  ((temp___817 = parent(((t__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct,
  o32)) and (in_range3(temp___817) and
  ((temp___817 = parent1(((((t__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o32)) and
  ((size(((t__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct) = 0) ->
  (temp___817 = 0)))))) and (((1 <= temp___817) and (temp___817 <= 100)) and
  (o34 = temp___817))) and
  (o35 = (((t__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__color[o34 <- o33])))) and
  (o36 = { rec__red_black_trees__rbt__struct =
  ((t__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct;
  rec__red_black_trees__rbt__color = o35 })) and (temp___819 = {
  us_split_fields9 = o36 })) and ((result13 = t__split_fields9) and
  (t__split_fields11 = (temp___819).us_split_fields9))) ->
  ((((((to_rep3(o40) = 1) and (((((((o37 = (x4).int__content) and
  in_range2((x4).int__content)) and
  ((o38 = parent((t__split_fields11).rec__red_black_trees__rbt__struct,
  o37)) and (in_range3(o38) and
  ((o38 = parent1((((t__split_fields11).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o37)) and
  ((size((t__split_fields11).rec__red_black_trees__rbt__struct) = 0) ->
  (o38 = 0)))))) and ((o39 = o38) and in_range2(o38))) and
  ((temp___821 = parent((t__split_fields11).rec__red_black_trees__rbt__struct,
  o39)) and (in_range3(temp___821) and
  ((temp___821 = parent1((((t__split_fields11).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o39)) and
  ((size((t__split_fields11).rec__red_black_trees__rbt__struct) = 0) ->
  (temp___821 = 0)))))) and (((1 <= temp___821) and (temp___821 <= 100)) and
  (o41 = temp___821))) and
  (o42 = ((t__split_fields11).rec__red_black_trees__rbt__color[o41 <- o40])))) and
  (o43 = { rec__red_black_trees__rbt__struct =
  (t__split_fields11).rec__red_black_trees__rbt__struct;
  rec__red_black_trees__rbt__color = o42 })) and (temp___823 = {
  us_split_fields9 = o43 })) and ((result14 = { us_split_fields__content4 =
  t__split_fields11 }) and
  (t__split_fields12 = (temp___823).us_split_fields9))) ->
  (((((((((o44 = (x4).int__content) and in_range2((x4).int__content)) and
  ((o45 = parent((t__split_fields12).rec__red_black_trees__rbt__struct,
  o44)) and (in_range3(o45) and
  ((o45 = parent1((((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o44)) and
  ((size((t__split_fields12).rec__red_black_trees__rbt__struct) = 0) ->
  (o45 = 0)))))) and ((o46 = o45) and in_range2(o45))) and
  ((o47 = parent((t__split_fields12).rec__red_black_trees__rbt__struct,
  o46)) and (in_range3(o47) and
  ((o47 = parent1((((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o46)) and
  ((size((t__split_fields12).rec__red_black_trees__rbt__struct) = 0) ->
  (o47 = 0)))))) and ((o48 = o47) and in_range2(o47))) and (((size({
  us_split_fields7 = search_trees__right_rotate__t__fields }) = size({
  us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
  })) and ((((not (root({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
  }) = o48)) and (root({ us_split_fields7 =
  search_trees__right_rotate__t__fields }) = root({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
  }))) or ((root({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
  }) = o48) and (root({ us_split_fields7 =
  search_trees__right_rotate__t__fields }) = peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0)))) and ((parent({ us_split_fields7 =
  search_trees__right_rotate__t__fields }, o48) = peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0)) and ((position1({ us_split_fields7 =
  search_trees__right_rotate__t__fields }, o48) = 1) and ((parent({
  us_split_fields7 = search_trees__right_rotate__t__fields }, peek({
  us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0)) = parent({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48)) and (((not (root({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
  }) = o48)) -> (position1({ us_split_fields7 =
  search_trees__right_rotate__t__fields }, peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0)) = position1({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48))) and (((not (peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0), 1) = 0)) -> ((parent({ us_split_fields7 =
  search_trees__right_rotate__t__fields }, peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0), 1)) = o48) and (position1({ us_split_fields7 =
  search_trees__right_rotate__t__fields }, peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0), 1)) = 0))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> ((((not (j = o48)) and
   ((not (parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j) = o48)) or (position1({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j) = 1))) and ((((parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j) = 0) or (not (parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j)) = o48))) or (position1({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j)) = 1)) or (position1({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j) = 0))) -> (parent({ us_split_fields7 =
   search_trees__right_rotate__t__fields }, j) = parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j))))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> (((((not (j = o48)) and
   (not (parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j) = 0))) and ((not (parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j) = o48)) or (position1({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j) = 1))) and (((not (parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j)) = o48)) or (position1({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, parent({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j)) = 1)) or (position1({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j) = 0))) -> (position1({ us_split_fields7 =
   search_trees__right_rotate__t__fields }, j) = position1({
   us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   }, j))))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
   us_split_fields7 = search_trees__right_rotate__t__fields
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall j:int. (((1 <= j) and (j <= 100)) -> (((((model__({
   us_split_fields7 =
   ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields7 = search_trees__right_rotate__t__fields
   })[j])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((oeq(values({ us_split_fields7 = search_trees__right_rotate__t__fields }),
  values({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7
  })) = true) and ((peek({ us_split_fields7 =
  search_trees__right_rotate__t__fields }, o48, 0) = peek({
  us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0), 1)) and (((not (parent({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48) = 0)) -> (peek({ us_split_fields7 =
  search_trees__right_rotate__t__fields }, parent({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48), position1({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48)) = peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0))) and ((peek({ us_split_fields7 =
  search_trees__right_rotate__t__fields }, peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0), 1) = o48) and
  (forall j:int. (((1 <= j) and (j <= 100)) ->
  (forall d:int. (((0 <= d) and (d <= 1)) -> ((((((not (j = o48)) or
  (d = 1)) and ((not (j = parent({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48))) or (not (d = position1({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48))))) and ((not (j = peek({ us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  o48, 0))) or (d = 0))) and ((((model__({ us_split_fields7 =
  search_trees__right_rotate__t__fields
  })[j])).us_split_fields1).rec__tree_model__path_type__k = true)) -> (peek({
  us_split_fields7 = search_trees__right_rotate__t__fields }, j, d) = peek({
  us_split_fields7 =
  ((t__split_fields12).rec__red_black_trees__rbt__struct).us_split_fields7 },
  j, d)))))))))))))))))))))) and
  ((((size1((search_trees__right_rotate__t__fields).rec__search_trees__search_tree__struct) = 0) and
  (to_rep((search_trees__right_rotate__t__fields).rec__search_trees__search_tree__root) = 0)) or
  ((not (size1((search_trees__right_rotate__t__fields).rec__search_trees__search_tree__struct) = 0)) and
  (((not (to_rep((search_trees__right_rotate__t__fields).rec__search_trees__search_tree__root) = 0)) and
  (valid_root((search_trees__right_rotate__t__fields).rec__search_trees__search_tree__struct,
  to_rep((search_trees__right_rotate__t__fields).rec__search_trees__search_tree__root)) = true)) and
  (ordered_leafs((search_trees__right_rotate__t__fields).rec__search_trees__search_tree__struct,
  to_rep((search_trees__right_rotate__t__fields).rec__search_trees__search_tree__root),
  (search_trees__right_rotate__t__fields).rec__search_trees__search_tree__values) = true)))) and
  (tree_structure((search_trees__right_rotate__t__fields).rec__search_trees__search_tree__struct) = true)))) and
  ((result15 = { us_split_fields__content4 = t__split_fields12 }) and
  (t__split_fields13 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = search_trees__right_rotate__t__fields };
  rec__red_black_trees__rbt__color =
  (t__split_fields12).rec__red_black_trees__rbt__color }))) ->
  ((((t_old__split_fields9).us_split_fields__content4 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = c87b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c87b1; rec__binary_trees__forest__c = c87b2
  } }; rec__search_trees__search_tree__values = c87b3 } };
  rec__red_black_trees__rbt__color = c87b4 }) and ((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = c87b1;
  rec__binary_trees__forest__c = c87b2 } }) = 0) and (to_rep(c87b) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = c87b1;
  rec__binary_trees__forest__c = c87b2 } }) = 0)) and
  (((not (to_rep(c87b) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = c87b1; rec__binary_trees__forest__c = c87b2
  } }, to_rep(c87b)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = c87b1; rec__binary_trees__forest__c = c87b2
  } }, to_rep(c87b), c87b3) = true)))) and (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = c87b1;
  rec__binary_trees__forest__c = c87b2 } }) = true))) ->
  (((t__split_fields13 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = c88b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c88b1; rec__binary_trees__forest__c = c88b2
  } }; rec__search_trees__search_tree__values = c88b3 } };
  rec__red_black_trees__rbt__color = c88b4 }) and ((((size1({
  us_split_fields5 = { rec__binary_trees__forest__s = c88b1;
  rec__binary_trees__forest__c = c88b2 } }) = 0) and (to_rep(c88b) = 0)) or
  ((not (size1({ us_split_fields5 = { rec__binary_trees__forest__s = c88b1;
  rec__binary_trees__forest__c = c88b2 } }) = 0)) and
  (((not (to_rep(c88b) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = c88b1; rec__binary_trees__forest__c = c88b2
  } }, to_rep(c88b)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = c88b1; rec__binary_trees__forest__c = c88b2
  } }, to_rep(c88b), c88b3) = true)))) and (tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = c88b1;
  rec__binary_trees__forest__c = c88b2 } }) = true))) ->
  (((((((((o49 = (x4).int__content) and in_range2((x4).int__content)) and
  ((o50 = parent(((t_old__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct,
  o49)) and (in_range3(o50) and
  ((o50 = parent1(((((t_old__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o49)) and
  ((size(((t_old__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct) = 0) ->
  (o50 = 0)))))) and ((o51 = o50) and in_range2(o50))) and
  ((o52 = parent(((t_old__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct,
  o51)) and (in_range3(o52) and
  ((o52 = parent1(((((t_old__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct).us_split_fields7).rec__search_trees__search_tree__struct,
  o51)) and
  ((size(((t_old__split_fields9).us_split_fields__content4).rec__red_black_trees__rbt__struct) = 0) ->
  (o52 = 0)))))) and ((red_black_trees__insert__L_8__C89b__assume = o52) and
  in_range2(o52))) and
  (red_black_trees__insert__L_8__C89b__assume = c89b)) and
  in_range2(c89b)) -> (((((o53 = parent({ us_split_fields7 = {
  rec__search_trees__search_tree__root = c88b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c88b1; rec__binary_trees__forest__c = c88b2
  } }; rec__search_trees__search_tree__values = c88b3 } }, c89b)) and
  (in_range3(o53) and ((o53 = parent1({ us_split_fields5 = {
  rec__binary_trees__forest__s = c88b1; rec__binary_trees__forest__c = c88b2
  } }, c89b)) and ((size({ us_split_fields7 = {
  rec__search_trees__search_tree__root = c88b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c88b1; rec__binary_trees__forest__c = c88b2
  } }; rec__search_trees__search_tree__values = c88b3 } }) = 0) ->
  (o53 = 0))))) and
  ((red_black_trees__insert__L_8__B90b__y__assume = o53) and
  in_range2(o53))) and
  (red_black_trees__insert__L_8__B90b__y__assume = y1)) -> (in_range2(y1) ->
  (((((model__({ us_split_fields7 = { rec__search_trees__search_tree__root =
  c87b; rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c87b1; rec__binary_trees__forest__c = c87b2
  } }; rec__search_trees__search_tree__values = c87b3 }
  })[c89b])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (((result16 = { int__content = n5 }) and (n10 = 1)) -> (((1 <= n10) and
  (n10 <= 100)) -> ((to_rep((((nb_blacks({ us_split_fields9 = {
  rec__red_black_trees__rbt__struct = { us_split_fields7 = {
  rec__search_trees__search_tree__root = c87b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c87b1; rec__binary_trees__forest__c = c87b2
  } }; rec__search_trees__search_tree__values = c87b3 } };
  rec__red_black_trees__rbt__color = c87b4 }
  })[c89b])).us_split_fields11).rec__red_black_trees__black_count__depth) <  n10) ->
  ((((nb_blacks({ us_split_fields9 = { rec__red_black_trees__rbt__struct = {
  us_split_fields7 = { rec__search_trees__search_tree__root = c88b;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = c88b1; rec__binary_trees__forest__c = c88b2
  } }; rec__search_trees__search_tree__values = c88b3 } };
  rec__red_black_trees__rbt__color = c88b4 }
  })[c89b])).us_split_fields11).rec__red_black_trees__black_count__status = true))))))))))))))))))))))))))))))))))))))))))
