(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun to_rep ((x natural)) Int (naturalqtint x))
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort fibonacci_index 0)
(declare-fun fibonacci_indexqtint (fibonacci_index) Int)
(assert (forall ((i fibonacci_index)) (and (<= 0 (fibonacci_indexqtint i)) (<= (fibonacci_indexqtint i) 30))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 30)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (fibonacci_index fibonacci_index) Bool)
(declare-const dummy2 fibonacci_index)
(declare-datatypes () ((fibonacci_index__ref (mk_fibonacci_index__ref (fibonacci_index__content fibonacci_index)))))
(define-fun fibonacci_index__ref___projection ((a fibonacci_index__ref)) fibonacci_index (fibonacci_index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort t4b 0)
(declare-fun t4bqtint (t4b) Int)
(assert (forall ((i t4b)) (and (<= 2 (t4bqtint i)) (<= (t4bqtint i) 30))))
(define-fun in_range4 ((x Int)) Bool (and (<= 2 x) (<= x 30)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (t4b t4b) Bool)
(declare-const dummy3 t4b)
(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content t4b)))))
(define-fun t4b__ref___projection ((a t4b__ref)) t4b (t4b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 30)) (in_range3 temp___expr_159)))
(declare-const rliteral natural)
(assert (= (naturalqtint rliteral) 0))
(declare-const rliteral1 natural)
(assert (= (naturalqtint rliteral1) 1))
(declare-const a (Array Int natural))
(declare-const i Int)
(declare-const o Int)
(declare-const o1 natural)
(declare-const o2 (Array Int natural))
(declare-const j Int)
(declare-const o3 Int)
(declare-const o4 natural)
(declare-const o5 Int)
(declare-const result (Array Int natural))
(declare-const a1 (Array Int natural))
(declare-const result1 (Array Int natural))
(declare-const a2 (Array Int natural))
(declare-const result2 Int)
(declare-const i1 Int)
(declare-const result3 (Array Int natural))
(declare-const a3 (Array Int natural))
(declare-const a4 (Array Int natural))
(declare-const i2 Int)
(assert (= (mk_map__ref result) (mk_map__ref a)))
(assert (= a1 (store a 0 rliteral)))
(assert (= a1 result1))
(assert (= a2 (store a1 1 rliteral1)))
(assert (= (mk_int__ref result2) (mk_int__ref i)))
(assert (= i1 2))
(assert (<= 2 i1))
(assert (<= i1 30))
(assert (and (= o (+ (to_rep (select a2 (- i1 1))) (to_rep (select a2 (- i1 2))))) (in_range1 (+ (to_rep (select a2 (- i1 1))) (to_rep (select a2 (- i1 2)))))))
(assert (= (to_rep o1) o))
(assert (= o2 (store a2 i1 o1)))
(assert (= a2 result3))
(assert (= a3 o2))
(assert (and (and (forall ((j1 Int)) (=> (and (<= 2 j1) (<= j1 i2)) (= (to_rep (select a4 j1)) (+ (to_rep (select a4 (- j1 1))) (to_rep (select a4 (- j1 2))))))) (= (to_rep (select a4 0)) 0)) (= (to_rep (select a4 1)) 1)))
(assert (and (and (=> (<= 2 30) (in_range4 i2)) (forall ((temp___176 Int)) (=> (and (<= 0 temp___176) (<= temp___176 30)) (=> (or (< 30 temp___176) (or (< temp___176 2) (< i2 temp___176))) (= (select a4 temp___176) (select a2 temp___176)))))) (and (<= 2 i2) (<= i2 30))))
(assert (<= 2 j))
(assert (<= j i2))
(assert (and (<= 0 (- j 2)) (<= (- j 2) 30)))
(assert (= o3 (- j 2)))
(assert (= o4 (select a4 o3)))
(assert (= o5 (to_rep o4)))
(assert (not (<= 0 (- j 1))))
(check-sat)
(exit)
