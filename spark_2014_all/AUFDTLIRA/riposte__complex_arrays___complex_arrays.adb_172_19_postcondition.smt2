(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort value 0)
(declare-fun valueqtint (value) Int)
(assert (forall ((i value)) (and (<= (- 23) (valueqtint i)) (<= (valueqtint i) 69))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 23) x) (<= x 69)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (value value) Bool)
(declare-const dummy value)
(declare-datatypes () ((value__ref (mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))
(define-fun to_rep ((x value)) Int (valueqtint x))
(declare-fun of_rep (Int) value)
(assert (forall ((x value)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x value)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int value))))))
(declare-fun slide ((Array Int value) Int Int) (Array Int value))
(assert (forall ((a (Array Int value))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int value))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int value)) (a__first Int) (a__last Int) (b (Array Int value)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int value)) (b (Array Int value))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun create_step_array (Int) (Array Int value))
(declare-fun create_step_array__function_guard ((Array Int value) Int) Bool)
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 1001))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1001)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index index) Bool)
(declare-const dummy1 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant ((temp___expr_167 Int) (temp___is_init_163 Bool) (temp___skip_constant_164 Bool) (temp___do_toplevel_165 Bool) (temp___do_typ_inv_166 Bool)) Bool (=> (or (= temp___is_init_163 true) (<= 0 1001)) (in_range2 temp___expr_167)))
(assert (forall ((i Int)) (! (=> (dynamic_invariant i true true true true) (let ((result (create_step_array i))) (forall ((j Int)) (=> (and (<= 0 j) (<= j 1001)) (and (=> (< j i) (= (to_rep (select result j)) (- 23))) (=> (<= i j) (= (to_rep (select result j)) 69))))))) :pattern ((create_step_array i)))))
(declare-sort counter 0)
(declare-fun counterqtint (counter) Int)
(assert (forall ((i counter)) (and (<= 0 (counterqtint i)) (<= (counterqtint i) 1002))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1002)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (counter counter) Bool)
(declare-const dummy2 counter)
(declare-datatypes () ((counter__ref (mk_counter__ref (counter__content counter)))))
(define-fun counter__ref___projection ((a counter__ref)) counter (counter__content a))
(define-fun dynamic_invariant1 ((temp___expr_160 Int) (temp___is_init_156 Bool) (temp___skip_constant_157 Bool) (temp___do_toplevel_158 Bool) (temp___do_typ_inv_159 Bool)) Bool (=> (or (= temp___is_init_156 true) (<= 0 1002)) (in_range3 temp___expr_160)))
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant2 ((temp___expr_174 Int) (temp___is_init_170 Bool) (temp___skip_constant_171 Bool) (temp___do_toplevel_172 Bool) (temp___do_typ_inv_173 Bool)) Bool (=> (or (= temp___is_init_170 true) (<= (- 23) 69)) (in_range1 temp___expr_174)))
(declare-const step (Array Int value))
(declare-const c Int)
(declare-const j Int)
(declare-const complex_arrays__use_step_array__result Int)
(declare-const o (Array Int value))
(declare-const temp___284 Int)
(declare-const temp___283 Int)
(declare-const o1 Int)
(declare-const result Int)
(declare-const c1 Int)
(declare-const result1 (Array Int value))
(declare-const step1 (Array Int value))
(declare-const result2 Int)
(declare-const j1 Int)
(declare-const result3 Int)
(declare-const c2 Int)
(declare-const c3 Int)
(declare-const j2 Int)
(declare-const c4 Int)
(declare-const j3 Int)
(declare-const c5 Int)
(declare-const j4 Int)
(declare-const c6 Int)
(declare-const j5 Int)
(declare-const c7 Int)
(declare-const j6 Int)
(declare-const result4 Int)
(declare-const complex_arrays__use_step_array__result1 Int)
(declare-const complex_arrays__use_step_array__result2 Int)
(declare-const complex_arrays__use_step_array__result3 Int)
(declare-const step2 (Array Int value))
(declare-const c8 Int)
(declare-const j7 Int)
(declare-const complex_arrays__use_step_array__result4 int__ref)
(declare-const step3 (Array Int value))
(declare-const c9 Int)
(declare-const j8 Int)
(declare-const complex_arrays__use_step_array__result5 Int)
(declare-const result5 Int)
(assert (in_range2 i))
(assert (= (mk_int__ref result) (mk_int__ref c)))
(assert (= c1 0))
(assert (in_range3 c1))
(assert (and (= o (create_step_array i)) (forall ((j9 Int)) (=> (and (<= 0 j9) (<= j9 1001)) (and (=> (< j9 i) (= (to_rep (select o j9)) (- 23))) (=> (<= i j9) (= (to_rep (select o j9)) 69)))))))
(assert (= (mk_map__ref result1) (mk_map__ref step)))
(assert (= step1 o))
(assert (= (mk_int__ref result2) (mk_int__ref j)))
(assert (= j1 0))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= temp___284 j1)))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= temp___283 c1)))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (=> (= (to_rep (select step1 j1)) (- 23)) (and (= o1 (+ c1 1)) (in_range3 (+ c1 1))))))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (=> (= (to_rep (select step1 j1)) (- 23)) (= c1 result3))))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (=> (= (to_rep (select step1 j1)) (- 23)) (= c2 o1))))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (=> (not (= (to_rep (select step1 j1)) (- 23))) (= c2 c1))))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (and (and (forall ((k Int)) (=> (and (<= 0 k) (<= k 1001)) (and (=> (< k i) (= (to_rep (select step1 k)) (- 23))) (=> (<= i k) (= (to_rep (select step1 k)) 69))))) (=> (< j2 i) (= c3 (+ j2 1)))) (=> (<= i j2) (= c3 i)))))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (and (and (=> (<= 0 1002) (in_range3 c3)) (=> (<= 0 1001) (in_range2 j2))) (and (<= 0 j2) (<= j2 1001)))))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= j2 1001)))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= j2 j3)))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= c3 c4)))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= j4 j2)))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= c5 c3)))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= (mk_int__ref j5) (mk_int__ref j3))))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= (mk_int__ref c6) (mk_int__ref c4))))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= j6 j4)))
(assert (=> (and (<= 0 j1) (<= j1 1001)) (= c7 c5)))
(assert (=> (not (and (<= 0 j1) (<= j1 1001))) (= j1 j5)))
(assert (=> (not (and (<= 0 j1) (<= j1 1001))) (= c1 c6)))
(assert (=> (not (and (<= 0 j1) (<= j1 1001))) (= j6 j1)))
(assert (=> (not (and (<= 0 j1) (<= j1 1001))) (= c7 c1)))
(assert (= complex_arrays__use_step_array__result1 complex_arrays__use_step_array__result2))
(assert (= complex_arrays__use_step_array__result3 complex_arrays__use_step_array__result1))
(assert (= result4 complex_arrays__use_step_array__result))
(assert (= complex_arrays__use_step_array__result1 c6))
(assert (= complex_arrays__use_step_array__result4 (mk_int__ref complex_arrays__use_step_array__result2)))
(assert (= j7 j5))
(assert (= c8 c6))
(assert (= step2 step1))
(assert (= complex_arrays__use_step_array__result5 complex_arrays__use_step_array__result3))
(assert (= j8 j6))
(assert (= c9 c7))
(assert (= step3 step1))
(assert (= result5 (int__content complex_arrays__use_step_array__result4)))
(assert (not (= i (int__content complex_arrays__use_step_array__result4))))
(check-sat)
(exit)
