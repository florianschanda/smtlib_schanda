(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort group1_id 0)
(declare-fun group1_idqtint (group1_id) Int)
(assert (forall ((i group1_id)) (and (<= 1 (group1_idqtint i)) (<= (group1_idqtint i) 64))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (group1_id group1_id) Bool)
(declare-const dummy group1_id)
(declare-datatypes () ((group1_id__ref (mk_group1_id__ref (group1_id__content group1_id)))))
(define-fun group1_id__ref___projection ((a group1_id__ref)) group1_id (group1_id__content a))
(define-fun to_rep ((x group1_id)) Int (group1_idqtint x))
(declare-fun of_rep (Int) group1_id)
(assert (forall ((x group1_id)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x group1_id)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int group1_id))))))
(declare-fun slide ((Array Int group1_id) Int Int) (Array Int group1_id))
(assert (forall ((a (Array Int group1_id))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int group1_id))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int group1_id)) (a__first Int) (a__last Int) (b (Array Int group1_id)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int group1_id)) (b (Array Int group1_id))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun is_permutation_1 ((Array Int group1_id)) Bool)
(declare-fun is_permutation_1__function_guard (Bool (Array Int group1_id)) Bool)
(assert (forall ((r1 (Array Int group1_id))) (! (= (= (is_permutation_1 r1) true) (forall ((g1 Int)) (=> (and (<= 1 g1) (<= g1 64)) (exists ((rank Int)) (and (and (<= 1 rank) (<= rank 64)) (= (to_rep (select r1 rank)) g1)))))) :pattern ((is_permutation_1 r1)))))
(declare-sort ranking 0)
(declare-fun rankingqtint (ranking) Int)
(assert (forall ((i ranking)) (and (<= 1 (rankingqtint i)) (<= (rankingqtint i) 64))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (ranking ranking) Bool)
(declare-const dummy1 ranking)
(declare-datatypes () ((ranking__ref (mk_ranking__ref (ranking__content ranking)))))
(define-fun ranking__ref___projection ((a ranking__ref)) ranking (ranking__content a))
(define-fun to_rep1 ((x ranking)) Int (rankingqtint x))
(declare-fun of_rep1 (Int) ranking)
(assert (forall ((x ranking)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x ranking)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int ranking))))))
(declare-fun slide1 ((Array Int ranking) Int Int) (Array Int ranking))
(assert (forall ((a (Array Int ranking))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int ranking))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int ranking)) (a__first Int) (a__last Int) (b (Array Int ranking)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (to_rep1 (select a temp___idx_158)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_158))))))) true false))
(assert (forall ((a (Array Int ranking)) (b (Array Int ranking))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_158 Int)) (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last)) (= (to_rep1 (select a temp___idx_158)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_158)))))))))))
(declare-fun invert_1 ((Array Int group1_id)) (Array Int ranking))
(declare-fun invert_1__function_guard ((Array Int ranking) (Array Int group1_id)) Bool)
(assert (forall ((r1 (Array Int group1_id))) (! (=> (= (is_permutation_1 r1) true) (let ((result (invert_1 r1))) (and (forall ((rank Int)) (=> (and (<= 1 rank) (<= rank 64)) (= (to_rep1 (select result (to_rep (select r1 rank)))) rank))) (forall ((g1 Int)) (=> (and (<= 1 g1) (<= g1 64)) (= (to_rep (select r1 (to_rep1 (select result g1)))) g1)))))) :pattern ((invert_1 r1)))))
(declare-sort group2_id 0)
(declare-fun group2_idqtint (group2_id) Int)
(assert (forall ((i group2_id)) (and (<= 1 (group2_idqtint i)) (<= (group2_idqtint i) 64))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 64)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (group2_id group2_id) Bool)
(declare-const dummy2 group2_id)
(declare-datatypes () ((group2_id__ref (mk_group2_id__ref (group2_id__content group2_id)))))
(define-fun group2_id__ref___projection ((a group2_id__ref)) group2_id (group2_id__content a))
(declare-const dummy3 (Array Int group1_id))
(declare-const value__size Int)
(declare-fun object__size ((Array Int group1_id)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int group1_id)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int group1_id)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int group1_id))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int group1_id) (Array Int group1_id)) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int group1_id)))))))
(declare-fun slide2 ((Array Int (Array Int group1_id)) Int Int) (Array Int (Array Int group1_id)))
(assert (forall ((a (Array Int (Array Int group1_id)))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int (Array Int group1_id)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int (Array Int group1_id))) (a__first Int) (a__last Int) (b (Array Int (Array Int group1_id))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq (select a temp___idx_157) 1 64 (select b (+ (- b__first a__first) temp___idx_157)) 1 64) true)))) true false))
(assert (forall ((a (Array Int (Array Int group1_id))) (b (Array Int (Array Int group1_id)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_157 Int)) (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last)) (= (bool_eq (select a temp___idx_157) 1 64 (select b (+ (- b__first a__first) temp___idx_157)) 1 64) true))))))))
(declare-const dummy4 (Array Int ranking))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int ranking)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int ranking)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int ranking)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int ranking))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int ranking))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int ranking))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int ranking) (Array Int ranking)) Bool)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int (Array Int ranking)))))))
(declare-fun slide3 ((Array Int (Array Int ranking)) Int Int) (Array Int (Array Int ranking)))
(assert (forall ((a (Array Int (Array Int ranking)))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int (Array Int ranking)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int (Array Int ranking))) (a__first Int) (a__last Int) (b (Array Int (Array Int ranking))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_160 Int)) (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last)) (= (bool_eq1 (select a temp___idx_160) 1 64 (select b (+ (- b__first a__first) temp___idx_160)) 1 64) true)))) true false))
(assert (forall ((a (Array Int (Array Int ranking))) (b (Array Int (Array Int ranking)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_160 Int)) (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last)) (= (bool_eq1 (select a temp___idx_160) 1 64 (select b (+ (- b__first a__first) temp___idx_160)) 1 64) true))))))))
(declare-const r2 (Array Int (Array Int group1_id)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun temp_____aggregate_def_566 ((Array Int ranking)) (Array Int (Array Int ranking)))
(declare-fun temp_____aggregate_def_570 (Int) (Array Int ranking))
(assert (forall ((temp___568 (Array Int ranking))) (forall ((temp___569 Int)) (= (select (temp_____aggregate_def_566 temp___568) temp___569) temp___568))))
(define-fun dynamic_invariant ((temp___expr_180 Int) (temp___is_init_176 Bool) (temp___skip_constant_177 Bool) (temp___do_toplevel_178 Bool) (temp___do_typ_inv_179 Bool)) Bool (=> (or (= temp___is_init_176 true) (<= 1 64)) (in_range2 temp___expr_180)))
(declare-const rliteral ranking)
(assert (= (rankingqtint rliteral) 64))
(assert (forall ((temp___572 Int)) (=> (dynamic_invariant temp___572 true true true true) (forall ((temp___573 Int)) (= (select (temp_____aggregate_def_570 temp___572) temp___573) rliteral)))))
(define-fun dynamic_invariant1 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 64)) (in_range1 temp___expr_166)))
(define-fun dynamic_invariant2 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 1 64)) (in_range3 temp___expr_173)))
(declare-const result__ (Array Int (Array Int ranking)))
(declare-const g2 Int)
(declare-const result (Array Int (Array Int ranking)))
(declare-const result__1 (Array Int (Array Int ranking)))
(declare-const result1 Int)
(declare-const g21 Int)
(declare-const result__2 (Array Int (Array Int ranking)))
(declare-const g22 Int)
(assert (forall ((g23 Int)) (=> (and (<= 1 g23) (<= g23 64)) (= (is_permutation_1 (select r2 g23)) true))))
(assert (= (mk_map__ref3 result) (mk_map__ref3 result__)))
(assert (= result__1 (temp_____aggregate_def_566 (temp_____aggregate_def_570 64))))
(assert (= (mk_int__ref result1) (mk_int__ref g2)))
(assert (= g21 1))
(assert (<= 1 g21))
(assert (<= g21 64))
(assert (forall ((prev Int)) (=> (and (<= 1 prev) (<= prev (- g22 1))) (= (bool_eq1 (select result__2 prev) 1 64 (invert_1 (select r2 prev)) 1 64) true))))
(assert (and (and (=> (<= 1 64) (in_range3 g22)) (forall ((temp___578 Int)) (=> (and (<= 1 temp___578) (<= temp___578 64)) (=> (or (< 64 temp___578) (or (< temp___578 1) (<= g22 temp___578))) (= (select result__2 temp___578) (select result__1 temp___578)))))) (and (<= 1 g22) (<= g22 64))))
(assert (<= 1 (- g22 1)))
(assert (not (<= 1 1)))
(check-sat)
(exit)
