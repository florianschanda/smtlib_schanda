(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq8 : us_rep, us_rep -> bool

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (forall a:us_rep. (0 <= object__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. (0 <= object__alignment1(a)))

logic user_eq5 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type file_type__ref = { file_type__content : us_rep
}

function file_type__ref___projection(a: file_type__ref) : us_rep =
  (a).file_type__content

logic end_of_file : us_rep -> bool

logic end_of_file__function_guard : bool, us_rep -> prop

axiom end_of_file__post_axiom : true

type tcandidate_name_tP1

predicate in_range5(x: int) = ((1 <= x) and (x <= 70))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : tcandidate_name_tP1, tcandidate_name_tP1 -> bool

logic dummy7 : tcandidate_name_tP1

type tcandidate_name_tP1__ref = { tcandidate_name_tP1__content :
tcandidate_name_tP1
}

function tcandidate_name_tP1__ref___projection(a: tcandidate_name_tP1__ref) : tcandidate_name_tP1 =
  (a).tcandidate_name_tP1__content

logic no_vote_entry : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___String_Literal_151 : unit -> (int,character) farray

axiom temp___String_Literal_151__def_axiom :
  (((((((to_rep((temp___String_Literal_151(void)[1])) = 78) and
  (to_rep((temp___String_Literal_151(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_151(void)[3])) = 32)) and
  (to_rep((temp___String_Literal_151(void)[4])) = 118)) and
  (to_rep((temp___String_Literal_151(void)[5])) = 111)) and
  (to_rep((temp___String_Literal_151(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_151(void)[7])) = 101))

type program_phase_t

predicate in_range6(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : program_phase_t, program_phase_t -> bool

logic dummy8 : program_phase_t

type program_phase_t__ref = { program_phase_t__content : program_phase_t
}

function program_phase_t__ref___projection(a: program_phase_t__ref) : program_phase_t =
  (a).program_phase_t__content

type candidate_number_t

predicate in_range7(x: int) = ((0 <= x) and (x <= 20))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : candidate_number_t, candidate_number_t -> bool

logic dummy9 : candidate_number_t

type candidate_number_t__ref = { candidate_number_t__content :
candidate_number_t
}

function candidate_number_t__ref___projection(a: candidate_number_t__ref) : candidate_number_t =
  (a).candidate_number_t__content

logic dummy10 : (int,character) farray

logic value__size2 : int

logic object__size2 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,character) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. (0 <= object__alignment2(a)))

logic user_eq9 : (int,character) farray, (int,character) farray -> bool

type map__ref1 = { map__content1 : (int,(int,character) farray) farray
}

logic slide1 : (int,(int,character) farray) farray, int,
  int -> (int,(int,character) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,character) farray) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,(int,character) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,character) farray) farray, int, int,
  (int,(int,character) farray) farray, int,
  int -> (int,(int,character) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,character) farray) farray.
  forall b:(int,(int,character) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,character) farray,
  int -> (int,(int,character) farray) farray

axiom singleton_def1 :
  (forall v:(int,character) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq12 : (int,(int,character) farray) farray, int, int,
  (int,(int,character) farray) farray, int, int -> bool

axiom bool_eq_def9 :
  (forall a:(int,(int,character) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,character) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq12(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_152:int. ((((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) and (bool_eq5((a[temp___idx_152]), 1, 70,
  (b[((b__first - a__first) + temp___idx_152)]), 1, 70) = true)) or
  (not ((a__first <= temp___idx_152) and (temp___idx_152 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq5((a[temp___idx_152]), 1, 70,
  (b[((b__first - a__first) + temp___idx_152)]), 1, 70) = true))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,character) farray) farray.
  forall b:(int,(int,character) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_152:int. (((a__first <= temp___idx_152) and
  (temp___idx_152 <= a__last)) -> (bool_eq5((a[temp___idx_152]), 1, 70,
  (b[((b__first - a__first) + temp___idx_152)]), 1, 70) = true)))))))

logic program_phase : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic candidates_filename : (int,character) farray

logic candidates_filename1 : t

logic attr__ATTRIBUTE_ADDRESS4 : int

logic temp___String_Literal_155 : unit -> (int,character) farray

axiom temp___String_Literal_155__def_axiom :
  ((((((((((((((to_rep((temp___String_Literal_155(void)[1])) = 99) and
  (to_rep((temp___String_Literal_155(void)[2])) = 97)) and
  (to_rep((temp___String_Literal_155(void)[3])) = 110)) and
  (to_rep((temp___String_Literal_155(void)[4])) = 100)) and
  (to_rep((temp___String_Literal_155(void)[5])) = 105)) and
  (to_rep((temp___String_Literal_155(void)[6])) = 100)) and
  (to_rep((temp___String_Literal_155(void)[7])) = 97)) and
  (to_rep((temp___String_Literal_155(void)[8])) = 116)) and
  (to_rep((temp___String_Literal_155(void)[9])) = 101)) and
  (to_rep((temp___String_Literal_155(void)[10])) = 115)) and
  (to_rep((temp___String_Literal_155(void)[11])) = 46)) and
  (to_rep((temp___String_Literal_155(void)[12])) = 116)) and
  (to_rep((temp___String_Literal_155(void)[13])) = 120)) and
  (to_rep((temp___String_Literal_155(void)[14])) = 116))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r17b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic r20b : int

logic attr__ATTRIBUTE_ADDRESS10 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy11 : integer

type t18b__ref = { t18b__content : integer
}

function t18b__ref___projection(a: t18b__ref) : integer = (a).t18b__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

function bool_eq14(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq11 : us_t1, us_t1 -> bool

logic dummy12 : (int,character) farray

logic dummy13 : t1

type t19b__ref = { t19b__content : us_t1
}

function t19b__ref___projection(a: t19b__ref) : us_t1 = (a).t19b__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq12 : integer, integer -> bool

logic dummy14 : integer

type t21b__ref = { t21b__content : integer
}

function t21b__ref___projection(a: t21b__ref) : integer = (a).t21b__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,character) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. (0 <= object__alignment4(a)))

function bool_eq16(x: us_t2, y: us_t2) : bool = bool_eq5((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq13 : us_t2, us_t2 -> bool

logic dummy15 : (int,character) farray

logic dummy16 : t2

type t22b__ref = { t22b__content : us_t2
}

function t22b__ref___projection(a: t22b__ref) : us_t2 = (a).t22b__content

logic temp___622 : (int,character) farray -> (int,(int,character) farray) farray

axiom def_axiom :
  (forall temp___624:(int,character) farray.
  (forall temp___625:int.
  ((temp___622(temp___624)[temp___625]) = temp___624)))

logic temp___626 : int -> (int,character) farray

axiom def_axiom1 :
  (forall temp___628:int.
  (forall temp___629:int.
  ((temp___626(temp___628)[temp___629]) = of_rep(temp___628))))

logic temp___String_Literal_633 : unit -> (int,character) farray

axiom temp___String_Literal_633__def_axiom : true

axiom candidates_filename__def_axiom :
  ((candidates_filename = temp___String_Literal_155(void)) and
  (candidates_filename1 = mk(1, 14)))

axiom no_vote_entry__def_axiom :
  (no_vote_entry = temp___String_Literal_151(void))

 (* File "evoting.adb", line 34, characters 0-0 *)
goal WP_parameter_def :
  (forall candidates:(int,(int,character) farray) farray.
  forall last_candidate:int. forall current_candidate:int. forall last6:int.
  forall item:(int,character) farray. forall o:(int,character) farray.
  forall o1:(int,(int,character) farray) farray. forall o2:bool.
  forall o3:bool. forall temp___649:int.
  forall temp___646:(int,(int,character) farray) farray.
  forall temp___645:(int,character) farray. forall temp___644:int.
  forall o4:int. forall o5:integer. forall o6:integer.
  forall o7:(int,character) farray. forall temp___636:(int,character) farray.
  forall temp___6361:t2. forall temp___637:(int,character) farray.
  forall temp___6371:t1. forall o8:(int,character) farray.
  forall temp___640:(int,character) farray. forall temp___6401:t1.
  forall temp___642:(int,character) farray. forall temp___6421:t1.
  forall o9:(int,character) farray.
  forall o10:(int,(int,character) farray) farray. forall o11:bool.
  forall o12:bool. forall o13:bool. forall last7:int.
  forall item1:(int,character) farray. forall result:int.
  forall current_candidate1:int.
  forall result1:(int,(int,character) farray) farray.
  forall candidates1:(int,(int,character) farray) farray.
  forall result2:(int,(int,character) farray) farray.
  forall candidates2:(int,(int,character) farray) farray. forall file:us_rep.
  forall result3:bool. forall result4:int. forall current_candidate2:int.
  forall candidates3:(int,(int,character) farray) farray.
  forall current_candidate3:int. forall last8:int.
  forall item2:(int,character) farray. forall last9:int.
  forall ada__text_io__get_line__item:(int,character) farray.
  forall result5:(int,character) farray. forall item3:(int,character) farray.
  forall result6:(int,(int,character) farray) farray.
  forall candidates4:(int,(int,character) farray) farray.
  forall result7:bool.
  forall candidates5:(int,(int,character) farray) farray.
  forall current_candidate4:int. forall last10:int.
  forall item4:(int,character) farray.
  forall candidates6:(int,(int,character) farray) farray.
  forall current_candidate5:int. forall last11:int.
  forall item5:(int,character) farray.
  forall candidates7:(int,(int,character) farray) farray.
  forall current_candidate6:int. forall last12:int.
  forall item6:(int,character) farray.
  forall candidates8:(int,(int,character) farray) farray.
  forall current_candidate7:int. forall last13:int.
  forall item7:(int,character) farray. forall file1:us_rep.
  forall result8:int. forall last_candidate1:int.
  forall candidates9:(int,(int,character) farray) farray.
  forall last_candidate2:int. forall file2:us_rep.
  forall current_candidate8:int. forall last14:int.
  forall item8:(int,character) farray.
  forall candidates10:(int,(int,character) farray) farray.
  forall last_candidate3:int. forall file3:us_rep.
  forall current_candidate9:int. forall last15:int.
  forall item9:(int,character) farray. ((dynamic_property(1, 2147483647,
  to_rep1(first(candidates_filename1)),
  to_rep1(last(candidates_filename1))) and
  (((temp___String_Literal_155(void) = candidates_filename) and (mk(1,
  14) = candidates_filename1)) and
  ((temp___String_Literal_151(void) = no_vote_entry) and
  (in_range6(program_phase) and (((0 <= 20) -> in_range7(last_candidate)) and
  ((program_phase = 0) and (((({ int__content = result } = { int__content =
  current_candidate }) and (current_candidate1 = 0)) and
  (in_range7(current_candidate1) and (((0 <= 2147483647) ->
  in_range4(last6)) and ((({ map__content1 = result1 } = { map__content1 =
  candidates }) and (candidates1 = temp___622(temp___626(32)))) and
  ((((forall temp___632:int. ((((1 <= temp___632) and (temp___632 <= 7)) and
     ((o[temp___632]) = (no_vote_entry[temp___632]))) or
     ((not ((1 <= temp___632) and (temp___632 <= 7))) and
     ((o[temp___632]) = ((candidates1[0])[temp___632]))))) and
  (o1 = (candidates1[0 <- o]))) and ((candidates1 = result2) and
  (candidates2 = o1))) and (((((o2 = end_of_file(file)) and
  (((not (o2 = true)) and (o3 = true)) or ((o2 = true) and
  (o3 = false)))) and (((current_candidate1 <  20) and
  (result3 = match_bool(o3, true, false))) or
  ((not (current_candidate1 <  20)) and (result3 = match_bool(o3, false,
  false))))) and (((result3 = true) and
  ((((temp___649 = current_candidate1) and ((temp___646 = candidates2) and
  ((temp___645 = item) and ((temp___644 = last6) and
  ((((o4 = (current_candidate1 + 1)) and
  in_range7((current_candidate1 + 1))) and
  ((current_candidate1 = result4) and (current_candidate2 = o4))) and
  ((forall i:int. (((current_candidate3 <= i) and (i <= 20)) ->
   (forall j:int. (((1 <= j) and (j <= 70)) ->
   (to_rep(((candidates3[i])[j])) = 32))))) and
  (((((0 <= 2147483647) -> in_range4(last8)) and
  (forall temp___647:int. (((0 <= temp___647) and (temp___647 <= 20)) ->
  (forall temp___648:int. (((1 <= temp___648) and (temp___648 <= 70)) ->
  ((temp___648 <  1) ->
  (((candidates3[temp___647])[temp___648]) = ((temp___646[temp___647])[temp___648])))))))) and
  ((0 <= 20) -> in_range7(current_candidate3))) and ((((to_rep1(o6) = 70) and
  ((to_rep1(o5) = 1) and in_range4(last9))) and ((item2 = result5) and
  (item3 = slide(ada__text_io__get_line__item, to_rep1(first(mk(1, 70))),
  1)))) and (((last9 = r17b) and in_range4(r17b)) and (((last9 = r20b) and
  in_range4(r20b)) and ((((((((((1 <= r20b) -> (((1 <= 1) and (1 <= 70)) and
  ((1 <= r20b) and (r20b <= 70)))) and (o7 = item3)) and
  ((o7 = temp___636) and (mk2(1, r20b) = temp___6361))) and
  ((((to_rep1(first4(temp___6361)) <= to_rep1(last4(temp___6361))) and
  (((1 <= r17b) and
  (((to_rep1(last4(temp___6361)) - to_rep1(first4(temp___6361))) + 1) = ((r17b - 1) + 1))) or
  ((not (1 <= r17b)) and
  (((to_rep1(last4(temp___6361)) - to_rep1(first4(temp___6361))) + 1) = 0)))) or
  ((not (to_rep1(first4(temp___6361)) <= to_rep1(last4(temp___6361)))) and
  (((1 <= r17b) and (0 = ((r17b - 1) + 1))) or (not (1 <= r17b))))) and
  ((temp___636 = temp___637) and (mk1(to_rep1(first4(temp___6361)),
  to_rep1(last4(temp___6361))) = temp___6371)))) and (((((1 <= r17b) ->
  (((1 <= 1) and (1 <= 70)) and ((1 <= r17b) and (r17b <= 70)))) and
  (o8 = (candidates3[current_candidate3]))) and ((o8 = temp___640) and
  (mk1(1, r17b) = temp___6401))) and
  ((((to_rep1(first2(temp___6371)) <= to_rep1(last2(temp___6371))) and
  (((to_rep1(first2(temp___6401)) <= to_rep1(last2(temp___6401))) and
  (((to_rep1(last2(temp___6371)) - to_rep1(first2(temp___6371))) + 1) = ((to_rep1(last2(temp___6401)) - to_rep1(first2(temp___6401))) + 1))) or
  ((not (to_rep1(first2(temp___6401)) <= to_rep1(last2(temp___6401)))) and
  (((to_rep1(last2(temp___6371)) - to_rep1(first2(temp___6371))) + 1) = 0)))) or
  ((not (to_rep1(first2(temp___6371)) <= to_rep1(last2(temp___6371)))) and
  (((to_rep1(first2(temp___6401)) <= to_rep1(last2(temp___6401))) and
  (0 = ((to_rep1(last2(temp___6401)) - to_rep1(first2(temp___6401))) + 1))) or
  (not (to_rep1(first2(temp___6401)) <= to_rep1(last2(temp___6401))))))) and
  ({ elts1 = temp___642; rt1 = temp___6421 } = { elts1 = temp___637; rt1 =
  temp___6371 })))) and
  (forall temp___643:int. ((((1 <= temp___643) and (temp___643 <= r17b)) and
  ((o9[temp___643]) = (temp___642[temp___643]))) or
  ((not ((1 <= temp___643) and (temp___643 <= r17b))) and
  ((o9[temp___643]) = ((candidates3[current_candidate3])[temp___643])))))) and
  (o10 = (candidates3[current_candidate3 <- o9]))) and
  ((candidates3 = result6) and (candidates4 = o10))) and
  (((((o11 = end_of_file(file)) and (((not (o11 = true)) and (o12 = true)) or
  ((o11 = true) and (o12 = false)))) and (((current_candidate3 <  20) and
  (o13 = match_bool(o12, true, false))) or
  ((not (current_candidate3 <  20)) and (o13 = match_bool(o12, false,
  false))))) and (((not (o13 = true)) and (result7 = true)) or
  ((o13 = true) and (result7 = false)))) and (result7 = true))))))))))))) and
  (((item3 = item4) and ((last9 = last10) and
  ((current_candidate3 = current_candidate4) and
  (candidates4 = candidates5)))) and ((item5 = item3) and
  ((last11 = last9) and ((current_candidate5 = current_candidate3) and
  (candidates6 = candidates4)))))) and ((({ map__content = item6 } = {
  map__content = item4 }) and (({ int__content = last12 } = { int__content =
  last10 }) and (({ int__content = current_candidate6 } = { int__content =
  current_candidate4 }) and ({ map__content1 = candidates7 } = {
  map__content1 = candidates5 })))) and ((item7 = item5) and
  ((last13 = last11) and ((current_candidate7 = current_candidate5) and
  (candidates8 = candidates6))))))) or ((not (result3 = true)) and ((({
  map__content = item6 } = { map__content = item }) and (({ int__content =
  last12 } = { int__content = last6 }) and
  ((current_candidate1 = current_candidate6) and
  (candidates2 = candidates7)))) and ((item7 = item1) and
  ((last13 = last7) and ((current_candidate7 = current_candidate1) and
  (candidates8 = candidates2)))))))) and ((result8 = last_candidate) and
  (last_candidate1 = current_candidate6)))))))) and ((({ map__content = item8
  } = { map__content = item6 }) and (({ int__content = last14 } = {
  int__content = last12 }) and (({ int__content = current_candidate8 } = {
  int__content = current_candidate6 }) and ((file1 = file2) and
  ((last_candidate1 = last_candidate2) and ({ map__content1 = candidates9
  } = { map__content1 = candidates7 })))))) and ((item9 = item7) and
  ((last15 = last13) and ((current_candidate9 = current_candidate7) and
  ((file3 = file1) and ((last_candidate3 = last_candidate1) and
  (candidates10 = candidates8)))))))))))))) ->
  (forall i:int. ((((last_candidate2 + 1) <= i) and (i <= 20)) ->
  (forall j:int. (((1 <= j) and (j <= 70)) ->
  (to_rep(((candidates9[i])[j])) = 32)))))))
