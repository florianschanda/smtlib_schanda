(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(declare-fun to_rep (positive) Int)
(declare-fun of_rep (Int) positive)
(assert (forall ((x positive)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x positive)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep1 (character) Int)
(declare-fun of_rep1 (Int) character)
(assert (forall ((x character)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep1 (select a temp___idx_78)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep1 (select a temp___idx_78)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-fun to_rep2 (integer) Int)
(declare-fun of_rep2 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x))) (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y))) (to_rep2 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-datatypes () ((text__ref (mk_text__ref (text__content us_t)))))
(define-fun text__ref___projection ((a text__ref)) us_t (text__content a))
(define-fun dynamic_invariant2 ((temp___expr_136 us_t) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (and (=> (not (= temp___skip_constant_134 true)) (dynamic_property 1 2147483647 (first1 temp___expr_136) (last1 temp___expr_136))) (=> (= temp___do_toplevel_135 true) (=> (= temp___is_init_133 true) (= (first1 temp___expr_136) 1)))))
(define-fun dynamic_predicate ((temp___139 us_t)) Bool (= (first1 temp___139) 1))
(declare-fun match_at (us_t us_t Int) Bool)
(declare-fun match_at__function_guard (Bool us_t us_t Int) Bool)
(declare-fun partial_match_at (us_t us_t Int Int) Bool)
(declare-fun partial_match_at__function_guard (Bool us_t us_t Int Int) Bool)
(assert true)
(assert (forall ((needle us_t) (haystack us_t)) (forall ((loc Int)) (! (= (= (match_at needle haystack loc) true) (and (<= (- loc 1) (- (length haystack) (length needle))) (= (partial_match_at needle haystack loc (length needle)) true))) :pattern ((match_at needle haystack loc))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int positive))))))
(declare-fun slide1 ((Array Int positive) Int Int) (Array Int positive))
(assert (forall ((a (Array Int positive))) (forall ((first2 Int)) (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2))))))
(assert (forall ((a (Array Int positive))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int positive) Int Int (Array Int positive) Int Int) (Array Int positive))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (positive Int) (Array Int positive))
(assert (forall ((v positive)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq2 ((a (Array Int positive)) (a__first Int) (a__last Int) (b (Array Int positive)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare1 ((Array Int positive) Int Int (Array Int positive) Int Int) Int)
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq2 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq2 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int positive)) (b (Array Int positive))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq2 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-const needle us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const haystack us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (integer integer) Bool)
(declare-const dummy4 integer)
(declare-datatypes () ((t54b__ref (mk_t54b__ref (t54b__content integer)))))
(define-fun t54b__ref___projection ((a t54b__ref)) integer (t54b__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep2 (first2 (mk1 f l))) f) (= (to_rep2 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int character)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int character) (elts1 a))
(define-fun of_array1 ((a (Array Int character)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep2 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep2 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int character)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int character)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int character)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq3 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep2 (first2 (rt1 x))) (to_rep2 (last2 (rt1 x))) (elts1 y) (to_rep2 (first2 (rt1 y))) (to_rep2 (last2 (rt1 y)))))
(declare-fun user_eq5 (us_t1 us_t1) Bool)
(declare-const dummy5 us_t1)
(declare-datatypes () ((t55b__ref (mk_t55b__ref (t55b__content us_t1)))))
(define-fun t55b__ref___projection ((a t55b__ref)) us_t1 (t55b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t60b__ref (mk_t60b__ref (t60b__content integer)))))
(define-fun t60b__ref___projection ((a t60b__ref)) integer (t60b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-sort natural 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq7 (natural natural) Bool)
(declare-const dummy7 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant3 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range4 temp___expr_33)))
(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(assert true)
(assert (forall ((needle1 us_t) (haystack1 us_t)) (forall ((loc Int) (len Int)) (! (= (= (partial_match_at needle1 haystack1 loc len) true) (forall ((i Int)) (=> (and (<= 1 i) (<= i len)) (= (to_rep1 (select (to_array needle1) i)) (to_rep1 (select (to_array haystack1) (+ loc (- i 1)))))))) :pattern ((partial_match_at needle1 haystack1 loc len))))))
(declare-const i Int)
(declare-const r52b Int)
(declare-const r53b Int)
(declare-const shift Int)
(declare-const r58b Int)
(declare-const r59b Int)
(declare-const k Int)
(declare-const string_search__qs__result Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const temp___309 Int)
(declare-const temp___308 Int)
(declare-const temp___307 Int)
(declare-const temp___306 Int)
(declare-const temp___305 Int)
(declare-const temp___304 Int)
(declare-const temp___311 Int)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 (Array Int character))
(declare-const temp___296 (Array Int character))
(declare-const temp___2961 t1)
(declare-const o12 Int)
(declare-const o13 Int)
(declare-const o14 Int)
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const temp___297 Int)
(declare-const o20 Int)
(declare-const o21 character)
(declare-const o22 Int)
(declare-const o23 positive)
(declare-const o24 Int)
(declare-const o25 Int)
(declare-const o26 Int)
(declare-const o27 Int)
(declare-const temp___300 Int)
(declare-const o28 Int)
(declare-const o29 Int)
(declare-const temp___298 Int)
(declare-const o30 Int)
(declare-const o31 Int)
(declare-const o32 Int)
(declare-const o33 Int)
(declare-const o34 Int)
(declare-const o35 Int)
(declare-const temp___299 Int)
(declare-const o36 Int)
(declare-const o37 character)
(declare-const o38 Int)
(declare-const o39 Int)
(declare-const o40 Int)
(declare-const temp___2981 Int)
(declare-const o41 Int)
(declare-const o42 Int)
(declare-const o43 Int)
(declare-const o44 Int)
(declare-const o45 Int)
(declare-const o46 Int)
(declare-const temp___2991 Int)
(declare-const o47 Int)
(declare-const o48 character)
(declare-const o49 Int)
(declare-const o50 Int)
(declare-const o51 Int)
(declare-const o52 Int)
(declare-const o53 Int)
(declare-const o54 Int)
(declare-const o55 Int)
(declare-const temp___310 Int)
(declare-const o56 Int)
(declare-const o57 character)
(declare-const o58 Int)
(declare-const o59 positive)
(declare-const o60 Int)
(declare-const o61 Int)
(declare-const o62 Int)
(declare-const o63 Int)
(declare-const o64 Int)
(declare-const temp___303 Int)
(declare-const o65 Int)
(declare-const o66 character)
(declare-const o67 Int)
(declare-const o68 positive)
(declare-const o69 Int)
(declare-const o70 Int)
(declare-const o71 Int)
(declare-const o72 Int)
(declare-const o73 Int)
(declare-const o74 Int)
(declare-const o75 Int)
(declare-const o76 Int)
(declare-const o77 Int)
(declare-const o78 Bool)
(declare-const o79 Int)
(declare-const o80 Int)
(declare-const o81 Int)
(declare-const o82 (Array Int character))
(declare-const temp___2962 (Array Int character))
(declare-const temp___2963 t1)
(declare-const o83 Int)
(declare-const o84 Int)
(declare-const o85 Int)
(declare-const o86 Int)
(declare-const o87 Int)
(declare-const o88 Int)
(declare-const o89 Int)
(declare-const o90 Int)
(declare-const temp___2971 Int)
(declare-const o91 Int)
(declare-const o92 character)
(declare-const o93 Int)
(declare-const o94 positive)
(declare-const o95 Int)
(declare-const o96 Int)
(declare-const o97 Int)
(declare-const o98 Int)
(declare-const temp___3001 Int)
(declare-const o99 Int)
(declare-const o100 Int)
(declare-const temp___2982 Int)
(declare-const o101 Int)
(declare-const o102 Int)
(declare-const o103 Int)
(declare-const o104 Int)
(declare-const o105 Int)
(declare-const o106 Int)
(declare-const temp___2992 Int)
(declare-const o107 Int)
(declare-const o108 character)
(declare-const o109 Int)
(declare-const o110 Int)
(declare-const o111 Int)
(declare-const temp___2983 Int)
(declare-const o112 Int)
(declare-const o113 Int)
(declare-const o114 Int)
(declare-const o115 Int)
(declare-const o116 Int)
(declare-const o117 Int)
(declare-const temp___2993 Int)
(declare-const o118 Int)
(declare-const o119 character)
(declare-const o120 Int)
(declare-const o121 Int)
(declare-const k1 Int)
(declare-const o122 Int)
(declare-const o123 Int)
(declare-const o124 Int)
(declare-const o125 Int)
(declare-const o126 Int)
(declare-const o127 Int)
(declare-const o128 Int)
(declare-const o129 Bool)
(declare-const r52b1 Int)
(declare-const r53b1 Int)
(declare-const shift1 Int)
(declare-const r58b1 Int)
(declare-const r59b1 Int)
(declare-const k2 Int)
(declare-const string_search__qs__result1 Int)
(declare-const result Bool)
(declare-const bad_shift (Array Int positive))
(declare-const result1 Int)
(declare-const i1 Int)
(declare-const result2 Bool)
(declare-const temp___3111 Int)
(declare-const result3 Int)
(declare-const r52b2 Int)
(declare-const result4 Int)
(declare-const r53b2 Int)
(declare-const result5 Bool)
(declare-const result6 Int)
(declare-const string_search__qs__result2 Int)
(declare-const result7 Bool)
(declare-const result8 Int)
(declare-const shift2 Int)
(declare-const result9 Int)
(declare-const r58b2 Int)
(declare-const result10 Int)
(declare-const r59b2 Int)
(declare-const result11 Int)
(declare-const k3 Int)
(declare-const k4 Int)
(declare-const result12 Int)
(declare-const k5 Int)
(declare-const k6 int__ref)
(declare-const k7 Int)
(declare-const k8 int__ref)
(declare-const k9 Int)
(declare-const k10 int__ref)
(declare-const k11 Int)
(declare-const i2 Int)
(declare-const r52b3 Int)
(declare-const r53b3 Int)
(declare-const shift3 Int)
(declare-const r58b3 Int)
(declare-const r59b3 Int)
(declare-const k12 Int)
(declare-const string_search__qs__result3 Int)
(declare-const temp___3112 Int)
(declare-const result13 int__ref)
(declare-const temp___3113 Int)
(declare-const result14 int__ref)
(declare-const i3 Int)
(declare-const result15 Bool)
(declare-const result16 int__ref)
(declare-const r52b4 Int)
(declare-const result17 int__ref)
(declare-const r53b4 Int)
(declare-const result18 Bool)
(declare-const result19 int__ref)
(declare-const string_search__qs__result4 Int)
(declare-const string_search__qs__result5 int__ref)
(declare-const string_search__qs__result6 Int)
(declare-const result20 Bool)
(declare-const result21 int__ref)
(declare-const shift4 Int)
(declare-const result22 int__ref)
(declare-const r58b4 Int)
(declare-const result23 int__ref)
(declare-const r59b4 Int)
(declare-const result24 int__ref)
(declare-const k13 Int)
(declare-const k14 Int)
(declare-const result25 int__ref)
(declare-const k15 Int)
(declare-const k16 int__ref)
(declare-const k17 Int)
(declare-const k18 int__ref)
(declare-const k19 Int)
(declare-const k20 int__ref)
(declare-const k21 Int)
(declare-const k22 int__ref)
(declare-const k23 Int)
(declare-const r52b5 int__ref)
(declare-const r53b5 int__ref)
(declare-const string_search__qs__result7 int__ref)
(declare-const r52b6 Int)
(declare-const r53b6 Int)
(declare-const string_search__qs__result8 Int)
(declare-const i4 int__ref)
(declare-const r52b7 int__ref)
(declare-const r53b7 int__ref)
(declare-const shift5 int__ref)
(declare-const r58b5 int__ref)
(declare-const r59b5 int__ref)
(declare-const k24 int__ref)
(declare-const string_search__qs__result9 int__ref)
(declare-const temp___3114 int__ref)
(declare-const i5 Int)
(declare-const r52b8 Int)
(declare-const r53b8 Int)
(declare-const shift6 Int)
(declare-const r58b6 Int)
(declare-const r59b6 Int)
(declare-const k25 Int)
(declare-const string_search__qs__result10 Int)
(declare-const temp___3115 Int)
(declare-const i6 int__ref)
(declare-const r52b9 int__ref)
(declare-const r53b9 int__ref)
(declare-const shift7 int__ref)
(declare-const r58b7 int__ref)
(declare-const r59b7 int__ref)
(declare-const k26 int__ref)
(declare-const string_search__qs__result11 int__ref)
(declare-const temp___3116 int__ref)
(declare-const i7 Int)
(declare-const r52b10 Int)
(declare-const r53b10 Int)
(declare-const shift8 Int)
(declare-const r58b8 Int)
(declare-const r59b8 Int)
(declare-const k27 Int)
(declare-const string_search__qs__result12 Int)
(declare-const temp___3117 Int)
(declare-const i8 int__ref)
(declare-const r52b11 int__ref)
(declare-const r53b11 int__ref)
(declare-const shift9 int__ref)
(declare-const r58b9 int__ref)
(declare-const r59b9 int__ref)
(declare-const k28 int__ref)
(declare-const string_search__qs__result13 int__ref)
(declare-const temp___3118 int__ref)
(declare-const i9 Int)
(declare-const r52b12 Int)
(declare-const r53b12 Int)
(declare-const shift10 Int)
(declare-const r58b10 Int)
(declare-const r59b10 Int)
(declare-const k29 Int)
(declare-const string_search__qs__result14 Int)
(declare-const temp___3119 Int)
(declare-const i10 int__ref)
(declare-const r52b13 int__ref)
(declare-const r53b13 int__ref)
(declare-const shift11 int__ref)
(declare-const r58b11 int__ref)
(declare-const r59b11 int__ref)
(declare-const k30 int__ref)
(declare-const string_search__qs__result15 int__ref)
(declare-const i11 Int)
(declare-const r52b14 Int)
(declare-const r53b14 Int)
(declare-const shift12 Int)
(declare-const r58b12 Int)
(declare-const r59b12 Int)
(declare-const k31 Int)
(declare-const string_search__qs__result16 Int)
(declare-const i12 int__ref)
(declare-const r52b15 int__ref)
(declare-const r53b15 int__ref)
(declare-const shift13 int__ref)
(declare-const r58b13 int__ref)
(declare-const r59b13 int__ref)
(declare-const k32 int__ref)
(declare-const string_search__qs__result17 int__ref)
(declare-const i13 Int)
(declare-const r52b16 Int)
(declare-const r53b16 Int)
(declare-const shift14 Int)
(declare-const r58b14 Int)
(declare-const r59b14 Int)
(declare-const k33 Int)
(declare-const string_search__qs__result18 Int)
(declare-const result26 int__ref)
(declare-const string_search__qs__result19 Int)
(declare-const string_search__qs__result20 int__ref)
(declare-const string_search__qs__result21 Int)
(declare-const i14 int__ref)
(declare-const r52b17 int__ref)
(declare-const r53b17 int__ref)
(declare-const shift15 int__ref)
(declare-const r58b15 int__ref)
(declare-const r59b15 int__ref)
(declare-const k34 int__ref)
(declare-const string_search__qs__result22 int__ref)
(declare-const i15 Int)
(declare-const r52b18 Int)
(declare-const r53b18 Int)
(declare-const shift16 Int)
(declare-const r58b16 Int)
(declare-const r59b16 Int)
(declare-const k35 Int)
(declare-const string_search__qs__result23 Int)
(declare-const bad_shift1 map__ref1)
(declare-const i16 int__ref)
(declare-const r52b19 int__ref)
(declare-const r53b19 int__ref)
(declare-const shift17 int__ref)
(declare-const r58b17 int__ref)
(declare-const r59b17 int__ref)
(declare-const k36 int__ref)
(declare-const string_search__qs__result24 int__ref)
(declare-const bad_shift2 (Array Int positive))
(declare-const i17 Int)
(declare-const r52b20 Int)
(declare-const r53b20 Int)
(declare-const shift18 Int)
(declare-const r58b18 Int)
(declare-const r59b18 Int)
(declare-const k37 Int)
(declare-const string_search__qs__result25 Int)
(declare-const result27 Bool)
(assert (dynamic_invariant2 needle true false true))
(assert (dynamic_invariant2 haystack true false true))
(assert (and (< (length needle) 2147483647) (and (< (length haystack) 2147483646) (and (<= 1 (length needle)) (<= (length needle) (length haystack))))))
(assert (=> (<= 1 2147483647) (in_range2 i)))
(assert (and (forall ((c Int)) (=> (and (<= 0 c) (<= c 255)) (and (<= 1 (to_rep (select bad_shift c))) (<= (to_rep (select bad_shift c)) (+ (length needle) 1))))) (forall ((c Int)) (=> (and (<= 0 c) (<= c 255)) (ite (= (to_rep (select bad_shift c)) (+ (length needle) 1)) (forall ((k38 Int)) (=> (and (<= (to_rep2 (first (rt needle))) k38) (<= k38 (to_rep2 (last (rt needle))))) (not (= c (to_rep1 (select (elts needle) k38)))))) (and (= (to_rep1 (select (elts needle) (+ (- (length needle) (to_rep (select bad_shift c))) 1))) c) (forall ((k38 Int)) (=> (and (<= (+ (- (length needle) (to_rep (select bad_shift c))) 2) k38) (<= k38 (to_rep2 (last (rt needle))))) (not (= (to_rep1 (select (elts needle) k38)) c))))))))))
(assert (= (mk_int__ref result1) (mk_int__ref i)))
(assert (= i1 1))
(assert (and (= o2 (length needle)) (in_range1 (length needle))))
(assert (and (= o3 (length haystack)) (in_range1 (length haystack))))
(assert (= o4 (- o3 o2)))
(assert (and (= o5 o4) (in_range1 o4)))
(assert (= o6 (+ o5 1)))
(assert (and (= o7 o6) (in_range1 o6)))
(assert (= result2 (ite (<= i1 o7) true false)))
(assert (= result2 true))
(assert (= (mk_int__ref result3) (mk_int__ref r52b)))
(assert (= r52b2 i1))
(assert (in_range2 r52b2))
(assert (and (= o8 (- (to_rep2 (last (rt needle))) 1)) (in_range1 (- (to_rep2 (last (rt needle))) 1))))
(assert (= o9 (+ i1 o8)))
(assert (and (= o10 o9) (in_range1 o9)))
(assert (= (mk_int__ref result4) (mk_int__ref r53b)))
(assert (= r53b2 o10))
(assert (in_range1 r53b2))
(assert (=> (<= r52b2 r53b2) (and (and (<= (to_rep2 (first (rt haystack))) r52b2) (<= r52b2 (to_rep2 (last (rt haystack))))) (and (<= (to_rep2 (first (rt haystack))) r53b2) (<= r53b2 (to_rep2 (last (rt haystack))))))))
(assert (= o11 (elts haystack)))
(assert (= o11 temp___296))
(assert (= (mk1 r52b2 r53b2) temp___2961))
(assert (= result5 (bool_eq (elts needle) (to_rep2 (first (rt needle))) (to_rep2 (last (rt needle))) temp___296 (to_rep2 (first2 temp___2961)) (to_rep2 (last2 temp___2961)))))
(assert (not (= result5 true)))
(assert (= string_search__qs__result2 string_search__qs__result))
(assert (= string_search__qs__result2 string_search__qs__result1))
(assert (and (= o12 (length needle)) (in_range1 (length needle))))
(assert (and (= o13 (length haystack)) (in_range1 (length haystack))))
(assert (= o14 (- o13 o12)))
(assert (and (= o15 o14) (in_range1 o14)))
(assert (= o16 (+ o15 1)))
(assert (and (= o17 o16) (in_range1 o16)))
(assert (= result7 (ite (= i1 o17) true false)))
(assert (not (= result7 true)))
(assert (and (= o18 (length needle)) (in_range1 (length needle))))
(assert (= o19 (+ i1 o18)))
(assert (and (= temp___297 o19) (in_range1 o19)))
(assert (and (<= (to_rep2 (first (rt haystack))) temp___297) (<= temp___297 (to_rep2 (last (rt haystack))))))
(assert (= o20 temp___297))
(assert (= o21 (select (elts haystack) o20)))
(assert (= o22 (to_rep1 o21)))
(assert (= o23 (select bad_shift o22)))
(assert (= o24 (to_rep o23)))
(assert (= (mk_int__ref result8) (mk_int__ref shift)))
(assert (= shift2 o24))
(assert (in_range2 shift2))
(assert (and (= o25 (+ i1 1)) (in_range1 (+ i1 1))))
(assert (= (mk_int__ref result9) (mk_int__ref r58b)))
(assert (= r58b2 o25))
(assert (in_range1 r58b2))
(assert (and (= o26 (+ i1 shift2)) (in_range1 (+ i1 shift2))))
(assert (= o27 (- o26 1)))
(assert (= (mk_int__ref result10) (mk_int__ref r59b)))
(assert (= r59b2 o27))
(assert (in_range1 r59b2))
(assert (= (mk_int__ref result11) (mk_int__ref k)))
(assert (= k3 r58b2))
(assert (=> (and (<= r58b2 k3) (<= k3 r59b2)) (and (and (= temp___300 k3) (and (not (= (to_rep1 (select (elts haystack) (+ i1 (length needle)))) (to_rep1 (select (elts needle) (+ (- (+ i1 (length needle)) k3) 1))))) (and (forall ((l Int)) (=> (and (<= 1 l) (<= l k4)) (not (= (match_at needle haystack l) true)))) (and (and (=> (<= r58b2 r59b2) (dynamic_property3 r58b2 r59b2 k4)) (and (<= r58b2 k4) (<= k4 r59b2))) (= k4 r59b2))))) (and (= k8 (mk_int__ref k4)) (= k9 k4)))))
(assert (=> (and (<= r58b2 k3) (<= k3 r59b2)) (= k10 k8)))
(assert (=> (and (<= r58b2 k3) (<= k3 r59b2)) (= k11 k9)))
(assert (=> (not (and (<= r58b2 k3) (<= k3 r59b2))) (= k10 (mk_int__ref k3))))
(assert (=> (not (and (<= r58b2 k3) (<= k3 r59b2))) (= k11 k3)))
(assert (<= i2 (- (length haystack) (length needle))))
(assert (forall ((k38 Int)) (=> (and (<= 1 k38) (<= k38 (- (+ i2 (to_rep (select bad_shift (to_rep1 (select (elts haystack) (+ i2 (length needle))))))) 1))) (not (= (match_at needle haystack k38) true)))))
(assert (and (and (and (and (and (=> (<= 1 2147483647) (in_range2 i2)) (=> (<= 1 2147483647) (in_range2 shift3))) (=> (<= 1 2147483647) (in_range2 r52b3))) (=> (<= (- 2147483648) 2147483647) (in_range1 r53b3))) (=> (<= (- 2147483648) 2147483647) (in_range1 r58b3))) (=> (<= (- 2147483648) 2147483647) (in_range1 r59b3))))
(assert (not (in_range1 (length needle))))
(check-sat)
(exit)
