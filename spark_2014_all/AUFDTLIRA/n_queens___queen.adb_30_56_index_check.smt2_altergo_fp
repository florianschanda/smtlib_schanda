(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index

predicate in_range1(x: int) = ((1 <= x) and (x <= 8))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index, index -> bool

logic dummy : index

type index__ref = { index__content : index
}

function index__ref___projection(a: index__ref) : index = (a).index__content

logic to_rep : index -> int

logic of_rep : int -> index

axiom inversion_axiom : (forall x:index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,index) farray
}

logic slide : (int,index) farray, int, int -> (int,index) farray

axiom slide_eq :
  (forall a:(int,index) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,index) farray, int, int, (int,index) farray, int,
  int -> (int,index) farray

axiom concat_def :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : index, int -> (int,index) farray

axiom singleton_def :
  (forall v:index.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,index) farray, int, int, (int,index) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,index) farray. forall a__first:int. forall a__last:int.
  forall b:(int,index) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,index) farray, int, int, (int,index) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic b : (int,index) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic c : (int,index) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type integer

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type t6b__ref = { t6b__content : integer
}

function t6b__ref___projection(a: t6b__ref) : integer = (a).t6b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type t11b__ref = { t11b__content : integer
}

function t11b__ref___projection(a: t11b__ref) : integer = (a).t11b__content

logic attr__ATTRIBUTE_ADDRESS5 : int

logic queen__copy_until__r__aggregate_def : int -> (int,index) farray

axiom def_axiom :
  (forall temp___174:int.
  (forall temp___175:int.
  ((queen__copy_until__r__aggregate_def(temp___174)[temp___175]) = of_rep(temp___174))))

logic r : (int,index) farray

logic j : int

logic j1 : int

logic queen__copy_until__result : (int,index) farray

logic temp___178 : int

logic temp___176 : (int,index) farray

logic k : int

logic o : int

logic o1 : index

logic o2 : int

logic o3 : index

logic o4 : (int,index) farray

logic temp___183 : int

logic temp___181 : (int,index) farray

logic k1 : int

logic o5 : int

logic o6 : index

logic o7 : int

logic o8 : index

logic o9 : (int,index) farray

logic j2 : int

logic o10 : int

logic o11 : index

logic o12 : int

logic result : (int,index) farray

logic r1 : (int,index) farray

logic result1 : int

logic j3 : int

logic r2 : (int,index) farray

logic j4 : int

logic result2 : (int,index) farray

logic r3 : (int,index) farray

logic result3 : int

logic j5 : int

logic r4 : (int,index) farray

logic j6 : int

logic r5 : (int,index) farray

logic j7 : int

logic r6 : (int,index) farray

logic j8 : int

logic r7 : (int,index) farray

logic j9 : int

logic r8 : (int,index) farray

logic j10 : int

logic r9 : (int,index) farray

logic j11 : int

logic result4 : int

logic j12 : int

logic r10 : (int,index) farray

logic j13 : int

logic result5 : (int,index) farray

logic r11 : (int,index) farray

logic result6 : int

logic j14 : int

logic r12 : (int,index) farray

logic j15 : int

logic r13 : (int,index) farray

logic j16 : int

logic r14 : (int,index) farray

logic j17 : int

logic r15 : (int,index) farray

logic j18 : int

logic r16 : (int,index) farray

logic j19 : int

logic r17 : (int,index) farray

logic j20 : int

logic r18 : (int,index) farray

logic j21 : int

logic r19 : (int,index) farray

logic j22 : int

logic result7 : (int,index) farray

logic queen__copy_until__result1 : (int,index) farray

logic queen__copy_until__result2 : (int,index) farray

logic queen__copy_until__result3 : (int,index) farray

logic r20 : (int,index) farray

logic j23 : int

logic j24 : int

logic queen__copy_until__result4 : (int,index) farray

logic r21 : (int,index) farray

logic j25 : int

logic j26 : int

logic queen__copy_until__result5 : (int,index) farray

axiom H : in_range1(i)

axiom H1 : (result = r)

axiom H2 : (r1 = queen__copy_until__r__aggregate_def(1))

axiom H3 : (result1 = j)

axiom H4 : (j3 = 1)

axiom H5 : (((1 <= j3) and (j3 <= i)) -> (((temp___178 = j3) and
  ((temp___176 = r1) and
  ((forall k2:int. (((1 <= k2) and (k2 <= (j4 - 1))) ->
   (to_rep((r2[k2])) = to_rep((b[k2]))))) and
  ((((forall temp___177:int. (((1 <= temp___177) and (temp___177 <= 8)) ->
     ((j4 <= temp___177) -> ((r2[temp___177]) = (temp___176[temp___177]))))) and
  ((1 <= i) -> dynamic_property(1, i, j4))) and ((1 <= j4) and
  (j4 <= i))) and ((((to_rep(o3) = to_rep((b[j4]))) and
  (o4 = (r2[j4 <- o3]))) and ((r2 = result2) and (r3 = o4))) and
  (j4 = i)))))) and (((j4 = j8) and (r3 = r6)) and ((j9 = j4) and
  (r7 = r3)))))

axiom H6 : (((1 <= j3) and (j3 <= i)) -> (j10 = j8))

axiom H7 : (((1 <= j3) and (j3 <= i)) -> (r8 = r6))

axiom H8 : (((1 <= j3) and (j3 <= i)) -> (j11 = j9))

axiom H9 : (((1 <= j3) and (j3 <= i)) -> (r9 = r7))

axiom H10 : ((not ((1 <= j3) and (j3 <= i))) -> (j3 = j10))

axiom H11 : ((not ((1 <= j3) and (j3 <= i))) -> (r1 = r8))

axiom H12 : ((not ((1 <= j3) and (j3 <= i))) -> (j11 = j3))

axiom H13 : ((not ((1 <= j3) and (j3 <= i))) -> (r9 = r1))

axiom H14 : (result4 = j1)

axiom H15 : (j12 = (i + 1))

axiom H16 : ((i + 1) <= j12)

axiom H17 : (j12 <= 8)

axiom H18 :
  (forall k2:int. (((1 <= k2) and (k2 <= i)) ->
  (to_rep((r10[k2])) = to_rep((b[k2])))))

axiom H19 :
  (((forall temp___182:int. (((1 <= temp___182) and (temp___182 <= 8)) ->
    ((j13 <= temp___182) -> ((r10[temp___182]) = (r8[temp___182]))))) and
  (((i + 1) <= 8) -> dynamic_property1((i + 1), 8, j13))) and
  (((i + 1) <= j13) and (j13 <= 8)))

axiom H20 : (1 <= k1)

axiom H21 : (k1 <= i)

 (* File "queen.ads", line 19, characters 0-0 *)
goal WP_parameter_def : (1 <= k1)
