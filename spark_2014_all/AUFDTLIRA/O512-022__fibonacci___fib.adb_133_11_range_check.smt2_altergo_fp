(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type tintarrayD1

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tintarrayD1, tintarrayD1 -> bool

logic dummy2 : tintarrayD1

type tintarrayD1__ref = { tintarrayD1__content : tintarrayD1
}

function tintarrayD1__ref___projection(a: tintarrayD1__ref) : tintarrayD1 =
  (a).tintarrayD1__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b1 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic b2 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic c1 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c2 : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

logic k1 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic k2 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic a1 : (int,integer) farray

logic a2 : (int,integer) farray

logic i : int

logic i1 : int

logic i2 : int

logic i3 : int

logic i4 : int

logic o : int

logic o1 : integer

logic o2 : int

logic i5 : int

logic o3 : int

logic o4 : integer

logic o5 : int

logic temp___195 : (int,integer) farray

logic o6 : int

logic o7 : integer

logic o8 : int

logic o9 : integer

logic o10 : int

logic o11 : (int,integer) farray

logic us : int

logic temp___202 : int

logic temp___200 : (int,integer) farray

logic temp___199 : int

logic o12 : int

logic o13 : integer

logic o14 : int

logic o15 : integer

logic o16 : int

logic o17 : (int,integer) farray

logic temp___204 : (int,integer) farray

logic o18 : int

logic o19 : integer

logic o20 : int

logic o21 : integer

logic o22 : int

logic o23 : (int,integer) farray

logic us1 : int

logic temp___211 : int

logic temp___209 : (int,integer) farray

logic temp___208 : int

logic o24 : int

logic o25 : integer

logic o26 : int

logic o27 : integer

logic o28 : int

logic o29 : (int,integer) farray

logic a11 : (int,integer) farray

logic a21 : (int,integer) farray

logic result : bool

logic result1 : int

logic i6 : int

logic a12 : (int,integer) farray

logic i7 : int

logic result2 : (int,integer) farray

logic a13 : (int,integer) farray

logic a14 : (int,integer) farray

logic i8 : int

logic a15 : (int,integer) farray

logic i9 : int

logic a16 : (int,integer) farray

logic i10 : int

logic a17 : (int,integer) farray

logic i11 : int

logic result3 : int

logic i12 : int

logic a18 : (int,integer) farray

logic i13 : int

logic result4 : (int,integer) farray

logic a19 : (int,integer) farray

logic a110 : (int,integer) farray

logic i14 : int

logic a111 : (int,integer) farray

logic i15 : int

logic a112 : (int,integer) farray

logic i16 : int

logic a113 : (int,integer) farray

logic i17 : int

logic result5 : int

logic i18 : int

logic a22 : (int,integer) farray

logic i19 : int

logic result6 : (int,integer) farray

logic a23 : (int,integer) farray

logic a24 : (int,integer) farray

logic i20 : int

logic a25 : (int,integer) farray

logic i21 : int

logic a26 : (int,integer) farray

logic i22 : int

logic a27 : (int,integer) farray

logic i23 : int

logic result7 : int

logic i24 : int

logic a28 : (int,integer) farray

logic i25 : int

logic result8 : (int,integer) farray

logic a29 : (int,integer) farray

logic a210 : (int,integer) farray

logic i26 : int

logic a211 : (int,integer) farray

logic i27 : int

logic a212 : (int,integer) farray

logic i28 : int

logic a213 : (int,integer) farray

logic i29 : int

logic a114 : (int,integer) farray

logic a214 : (int,integer) farray

logic i30 : int

logic i31 : int

logic i32 : int

logic i33 : int

logic a115 : (int,integer) farray

logic a215 : (int,integer) farray

logic i34 : int

logic i35 : int

logic i36 : int

logic i37 : int

axiom H : in_range2(k1)

axiom H1 : in_range2(k2)

axiom H2 : ((k1 = k2) and ((0 <= k1) and ((k1 <= 100) and ((0 <= k2) and
  ((k2 <= 100) and
  ((forall i38:int. (((0 <= i38) and (i38 <= k1)) ->
   (to_rep((b1[i38])) = to_rep((b2[i38]))))) and
  (forall i38:int. ((((k1 + 1) <= i38) and (i38 <= 100)) ->
  (to_rep((c1[(i38 - k1)])) = to_rep((c2[(i38 - k2)])))))))))))

axiom H3 : (result1 = i)

axiom H4 : (i6 = 0)

axiom H5 : (((0 <= i6) and (i6 <= k1)) -> (temp___195 = a1))

axiom H6 : (((0 <= i6) and (i6 <= k1)) ->
  ((forall temp___196:int. (((0 <= temp___196) and (temp___196 <= 100)) ->
   ((i7 <= temp___196) -> ((a12[temp___196]) = (temp___195[temp___196]))))) and
  ((0 <= i7) and (i7 <= k1))))

axiom H7 : (((0 <= i6) and (i6 <= k1)) -> ((0 <= i7) and (i7 <= 100)))

axiom H8 : (((0 <= i6) and (i6 <= k1)) -> (o6 = i7))

axiom H9 : (((0 <= i6) and (i6 <= k1)) -> (o7 = (b1[o6])))

axiom H10 : (((0 <= i6) and (i6 <= k1)) -> (o8 = to_rep(o7)))

axiom H11 : (((0 <= i6) and (i6 <= k1)) -> (to_rep(o9) = o8))

axiom H12 : (((0 <= i6) and (i6 <= k1)) -> ((0 <= i7) and (i7 <= 100)))

axiom H13 : (((0 <= i6) and (i6 <= k1)) -> (o10 = i7))

axiom H14 : (((0 <= i6) and (i6 <= k1)) -> (o11 = (a12[o10 <- o9])))

axiom H15 : (((0 <= i6) and (i6 <= k1)) -> (a12 = result2))

axiom H16 : (((0 <= i6) and (i6 <= k1)) -> (a13 = o11))

axiom H17 : (((0 <= i6) and (i6 <= k1)) -> (i7 = k1))

axiom H18 : (((0 <= i6) and (i6 <= k1)) -> (i7 = i8))

axiom H19 : (((0 <= i6) and (i6 <= k1)) -> (a13 = a14))

axiom H20 : (((0 <= i6) and (i6 <= k1)) -> (i9 = i7))

axiom H21 : (((0 <= i6) and (i6 <= k1)) -> (a15 = a13))

axiom H22 : (((0 <= i6) and (i6 <= k1)) -> (i10 = i8))

axiom H23 : (((0 <= i6) and (i6 <= k1)) -> (a16 = a14))

axiom H24 : (((0 <= i6) and (i6 <= k1)) -> (i11 = i9))

axiom H25 : (((0 <= i6) and (i6 <= k1)) -> (a17 = a15))

axiom H26 : ((not ((0 <= i6) and (i6 <= k1))) -> (i6 = i10))

axiom H27 : ((not ((0 <= i6) and (i6 <= k1))) -> (a16 = a1))

axiom H28 : ((not ((0 <= i6) and (i6 <= k1))) -> (i11 = i6))

axiom H29 : ((not ((0 <= i6) and (i6 <= k1))) -> (a17 = a11))

axiom H30 : ((k1 + 1) <= 0)

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (0 <= (k1 + 1))
