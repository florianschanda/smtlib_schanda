(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def4 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type tTaSP1

predicate in_range4(x: int) = ((1 <= x) and (x <= 1000))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tTaSP1, tTaSP1 -> bool

logic dummy3 : tTaSP1

type tTaSP1__ref = { tTaSP1__content : tTaSP1
}

function tTaSP1__ref___projection(a: tTaSP1__ref) : tTaSP1 =
  (a).tTaSP1__content

logic attr__ATTRIBUTE_ADDRESS : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,integer) farray. forall l:int.
  forall longest_common_prefix__lcp2__result:int. forall temp___192:int.
  forall o:int. forall o1:integer. forall temp___193:int. forall o2:int.
  forall o3:integer. forall o4:int. forall o5:int. forall o6:int.
  forall o7:int. forall temp___188:int. forall temp___191:int. forall o8:int.
  forall temp___1921:int. forall o9:int. forall o10:integer.
  forall temp___1931:int. forall o11:int. forall o12:integer. forall o13:int.
  forall o14:int. forall o15:int. forall o16:int. forall o17:bool.
  forall i:int. forall temp___195:int. forall o18:int. forall o19:integer.
  forall o20:int. forall result:int. forall l1:int. forall result1:bool.
  forall result2:bool. forall result3:bool. forall l2:int.
  forall temp___1911:int. forall result4:int. forall temp___1912:int.
  forall result5:int. forall l3:int. forall result6:bool.
  forall result7:bool. forall result8:bool. forall l4:int. forall l5:int.
  forall l6:int. forall l7:int. forall result9:int.
  forall longest_common_prefix__lcp2__result1:int.
  forall longest_common_prefix__lcp2__result2:int.
  forall longest_common_prefix__lcp2__result3:int. forall l8:int.
  forall longest_common_prefix__lcp2__result4:int. forall l9:int.
  forall longest_common_prefix__lcp2__result5:int. (in_range3(x) ->
  (in_range3(y) -> ((((1 <= x) and (x <= 1000)) and ((1 <= y) and
  (y <= 1000))) -> (((((0 <= 2147483647) -> in_range2(l)) and ((({
  int__content = result } = { int__content = l }) and (l1 = 0)) and
  (((((((o7 = (x + l1)) and in_range1((x + l1))) and (((o7 <= 1000) and
  (result3 = true)) or ((not (o7 <= 1000)) and (result3 = false)))) and
  (((result3 = true) and (((o6 = (y + l1)) and in_range1((y + l1))) and
  (((o6 <= 1000) and (result2 = true)) or ((not (o6 <= 1000)) and
  (result2 = false))))) or ((not (result3 = true)) and
  (result2 = false)))) and (((result2 = true) and
  ((((((temp___193 = (y + l1)) and in_range1((y + l1))) and
  (((1 <= temp___193) and (temp___193 <= 1000)) and (o2 = temp___193))) and
  (o3 = (a[o2]))) and (o4 = to_rep(o3))) and ((((((temp___192 = (x + l1)) and
  in_range1((x + l1))) and (((1 <= temp___192) and (temp___192 <= 1000)) and
  (o = temp___192))) and (o1 = (a[o]))) and (o5 = to_rep(o1))) and
  (((o5 = o4) and (result1 = true)) or ((not (o5 = o4)) and
  (result1 = false)))))) or ((not (result2 = true)) and
  (result1 = false)))) and (((result1 = true) and ((((temp___188 = l1) and
  ((0 = temp___191) and
  ((forall k:int. (((0 <= k) and (k <= (l2 - 1))) ->
   (to_rep((a[(x + k)])) = to_rep((a[(y + k)]))))) and
  ((((0 <= 2147483647) -> in_range2(l2)) and ((((x + l2) <= 1000) and
  ((y + l2) <= 1000)) and
  (to_rep((a[(x + l2)])) = to_rep((a[(y + l2)]))))) and
  (((temp___1911 = result4) and (temp___1912 = l2)) and
  ((((o8 = (l2 + 1)) and in_range1((l2 + 1))) and ((l2 = result5) and
  (l3 = o8))) and (((((((o16 = (x + l3)) and in_range1((x + l3))) and
  (((o16 <= 1000) and (result8 = true)) or ((not (o16 <= 1000)) and
  (result8 = false)))) and (((result8 = true) and (((o15 = (y + l3)) and
  in_range1((y + l3))) and (((o15 <= 1000) and (result7 = true)) or
  ((not (o15 <= 1000)) and (result7 = false))))) or
  ((not (result8 = true)) and (result7 = false)))) and (((result7 = true) and
  ((((((temp___1931 = (y + l3)) and in_range1((y + l3))) and
  (((1 <= temp___1931) and (temp___1931 <= 1000)) and
  (o11 = temp___1931))) and (o12 = (a[o11]))) and (o13 = to_rep(o12))) and
  ((((((temp___1921 = (x + l3)) and in_range1((x + l3))) and
  (((1 <= temp___1921) and (temp___1921 <= 1000)) and
  (o9 = temp___1921))) and (o10 = (a[o9]))) and (o14 = to_rep(o10))) and
  (((o14 = o13) and (o17 = true)) or ((not (o14 = o13)) and
  (o17 = false)))))) or ((not (result7 = true)) and (o17 = false)))) and
  (((not (o17 = true)) and (result6 = true)) or ((o17 = true) and
  (result6 = false)))) and (result6 = true)))))))) and ((l3 = l4) and
  (l5 = l3))) and (({ int__content = l6 } = { int__content = l4 }) and
  (l7 = l5)))) or ((not (result1 = true)) and ((l1 = l6) and
  (l7 = l1))))) and
  (((longest_common_prefix__lcp2__result1 = longest_common_prefix__lcp2__result2) and
  (longest_common_prefix__lcp2__result3 = longest_common_prefix__lcp2__result1)) and
  (({ int__content = result9 } = { int__content =
  longest_common_prefix__lcp2__result }) and
  (longest_common_prefix__lcp2__result1 = l6)))))) and ((({ int__content =
  longest_common_prefix__lcp2__result4 } = { int__content =
  longest_common_prefix__lcp2__result2 }) and ({ int__content = l8 } = {
  int__content = l6 })) and
  ((longest_common_prefix__lcp2__result5 = longest_common_prefix__lcp2__result3) and
  (l9 = l7)))) -> (((0 <= i) and
  (i <= (longest_common_prefix__lcp2__result4 - 1))) ->
  ((((((temp___195 = (i + y)) and in_range1((i + y))) and
  (((1 <= temp___195) and (temp___195 <= 1000)) and (o18 = temp___195))) and
  (o19 = (a[o18]))) and (o20 = to_rep(o19))) -> in_range1((i + x)))))))))
