(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

axiom concat_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : bool, int -> (int,bool) farray

axiom singleton_def :
  (forall v:bool.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> bool

axiom bool_eq_def1 :
  (forall a:(int,bool) farray. forall a__first:int. forall a__last:int.
  forall b:(int,bool) farray. forall b__first:int. forall b__last:int
  [bool_eq1(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq1(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)])))))) ->
  (bool_eq1(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  ((a[temp___idx_132]) = (b[((b__first - a__first) + temp___idx_132)]))))))))

logic compare : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq1(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq1(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_int((a[(i + 1)])) <  to_int((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq1(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_int((b[(i + 1)])) <  to_int((a[(j + 1)]))))))))))))

logic xorb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic andb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic orb1 : (int,bool) farray, int, int, (int,bool) farray, int,
  int -> (int,bool) farray

logic notb1 : (int,bool) farray, int, int -> (int,bool) farray

axiom op_def :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), true,
  (b[((i - a_first) + b_first)])))))))

axiom op_def1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = match_bool((a[i]), (b[((i - a_first) + b_first)]),
  false))))))

axiom op_def2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = xorb((a[i]), (b[((i - a_first) + b_first)])))))))

axiom notb_def :
  (forall a:(int,bool) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first, a_last)[i]) = match_bool((a[i]),
  false, true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic x : (int,bool) farray

logic i : int

logic result : int

logic i1 : int

logic result1 : (int,bool) farray

logic x1 : (int,bool) farray

logic result2 : int

logic i2 : int

logic result3 : (int,bool) farray

logic x2 : (int,bool) farray

logic result4 : int

logic i3 : int

logic result5 : (int,bool) farray

logic x3 : (int,bool) farray

logic result6 : int

logic i4 : int

logic result7 : (int,bool) farray

logic x4 : (int,bool) farray

logic result8 : int

logic i5 : int

logic result9 : (int,bool) farray

logic x5 : (int,bool) farray

logic result10 : int

logic i6 : int

logic result11 : (int,bool) farray

logic x6 : (int,bool) farray

logic result12 : int

logic i7 : int

logic result13 : (int,bool) farray

logic x7 : (int,bool) farray

logic result14 : int

logic i8 : int

logic result15 : (int,bool) farray

logic x8 : (int,bool) farray

logic result16 : int

logic i9 : int

logic result17 : (int,bool) farray

logic x9 : (int,bool) farray

logic result18 : int

logic i10 : int

logic result19 : (int,bool) farray

logic x10 : (int,bool) farray

logic x11 : (int,bool) farray

logic i11 : int

logic x12 : (int,bool) farray

logic i12 : int

axiom H : (result = i)

axiom H1 : (i1 = 1)

axiom H2 : (result1 = x)

axiom H3 : (((not ((x[i1]) = true)) -> (x1 = (x[i1 <- true]))) and
  (((x[i1]) = true) -> (x1 = (x[i1 <- false]))))

axiom H4 : (result2 = i1)

axiom H5 : (i2 = 2)

axiom H6 : (result3 = x1)

axiom H7 : (((not ((x1[i2]) = true)) -> (x2 = (x1[i2 <- true]))) and
  (((x1[i2]) = true) -> (x2 = (x1[i2 <- false]))))

axiom H8 : (result4 = i2)

axiom H9 : (i3 = 3)

axiom H10 : (result5 = x2)

axiom H11 : (((not ((x2[i3]) = true)) -> (x3 = (x2[i3 <- true]))) and
  (((x2[i3]) = true) -> (x3 = (x2[i3 <- false]))))

axiom H12 : (result6 = i3)

axiom H13 : (i4 = 4)

axiom H14 : (result7 = x3)

axiom H15 : (((not ((x3[i4]) = true)) -> (x4 = (x3[i4 <- true]))) and
  (((x3[i4]) = true) -> (x4 = (x3[i4 <- false]))))

axiom H16 : (result8 = i4)

axiom H17 : (i5 = 5)

axiom H18 : (result9 = x4)

axiom H19 : (((not ((x4[i5]) = true)) -> (x5 = (x4[i5 <- true]))) and
  (((x4[i5]) = true) -> (x5 = (x4[i5 <- false]))))

axiom H20 : (result10 = i5)

axiom H21 : (i6 = 6)

axiom H22 : (result11 = x5)

axiom H23 : (((not ((x5[i6]) = true)) -> (x6 = (x5[i6 <- true]))) and
  (((x5[i6]) = true) -> (x6 = (x5[i6 <- false]))))

axiom H24 : (result12 = i6)

axiom H25 : (i7 = 7)

axiom H26 : (result13 = x6)

axiom H27 : (((not ((x6[i7]) = true)) -> (x7 = (x6[i7 <- true]))) and
  (((x6[i7]) = true) -> (x7 = (x6[i7 <- false]))))

axiom H28 : (result14 = i7)

axiom H29 : (i8 = 8)

axiom H30 : (result15 = x7)

axiom H31 : (((not ((x7[i8]) = true)) -> (x8 = (x7[i8 <- true]))) and
  (((x7[i8]) = true) -> (x8 = (x7[i8 <- false]))))

axiom H32 : (result16 = i8)

axiom H33 : (i9 = 9)

axiom H34 : (result17 = x8)

axiom H35 : (((not ((x8[i9]) = true)) -> (x9 = (x8[i9 <- true]))) and
  (((x8[i9]) = true) -> (x9 = (x8[i9 <- false]))))

axiom H36 : (result18 = i9)

axiom H37 : (i10 = 10)

axiom H38 : (result19 = x9)

axiom H39 : (((not ((x9[i10]) = true)) -> (x10 = (x9[i10 <- true]))) and
  (((x9[i10]) = true) -> (x10 = (x9[i10 <- false]))))

axiom H40 : (i11 = i10)

axiom H41 : (x11 = x10)

axiom H42 : (i12 = i10)

axiom H43 : (x12 = x10)

logic i13 : int

axiom H44 : (1 <= i13)

axiom H45 : (i13 <= 10)

axiom H46 : ((x11[i13]) = true)

 (* File "data.ads", line 6, characters 0-0 *)
goal WP_parameter_def : (not ((x[i13]) = true))
