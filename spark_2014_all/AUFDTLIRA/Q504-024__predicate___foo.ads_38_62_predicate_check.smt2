(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort cpu_range 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (cpu_range cpu_range) Bool)
(declare-const dummy cpu_range)
(declare-datatypes () ((cpu_range__ref (mk_cpu_range__ref (cpu_range__content cpu_range)))))
(define-fun cpu_range__ref___projection ((a cpu_range__ref)) cpu_range (cpu_range__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 1)) (in_range temp___expr_166)))
(declare-const cpu_id Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-sort max_lsid_type 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (max_lsid_type max_lsid_type) Bool)
(declare-const dummy1 max_lsid_type)
(declare-datatypes () ((max_lsid_type__ref (mk_max_lsid_type__ref (max_lsid_type__content max_lsid_type)))))
(define-fun max_lsid_type__ref___projection ((a max_lsid_type__ref)) max_lsid_type (max_lsid_type__content a))
(declare-fun to_rep (max_lsid_type) Int)
(declare-fun of_rep (Int) max_lsid_type)
(assert (forall ((x max_lsid_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x max_lsid_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int max_lsid_type))))))
(declare-fun slide ((Array Int max_lsid_type) Int Int) (Array Int max_lsid_type))
(assert (forall ((a (Array Int max_lsid_type))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int max_lsid_type))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int max_lsid_type)) (a__first Int) (a__last Int) (b (Array Int max_lsid_type)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int max_lsid_type)) (b (Array Int max_lsid_type))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const cpu_lsid_last (Array Int max_lsid_type))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun foo__cpu_lsid_last__aggregate_def (Int Int) (Array Int max_lsid_type))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (natural natural) Bool)
(declare-const dummy2 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-sort tmax_lsid_typeB 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (tmax_lsid_typeB tmax_lsid_typeB) Bool)
(declare-const dummy3 tmax_lsid_typeB)
(declare-datatypes () ((tmax_lsid_typeB__ref (mk_tmax_lsid_typeB__ref (tmax_lsid_typeB__content tmax_lsid_typeB)))))
(define-fun tmax_lsid_typeB__ref___projection ((a tmax_lsid_typeB__ref)) tmax_lsid_typeB (tmax_lsid_typeB__content a))
(declare-fun to_rep1 (tmax_lsid_typeB) Int)
(declare-fun of_rep1 (Int) tmax_lsid_typeB)
(assert (forall ((x tmax_lsid_typeB)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x tmax_lsid_typeB)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-fun to_rep2 (natural) Int)
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int natural))))))
(declare-fun slide1 ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_159 Int)) (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last)) (= (to_rep2 (select a temp___idx_159)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_159))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_159 Int)) (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last)) (= (to_rep2 (select a temp___idx_159)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_159)))))))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (tmax_lsid_typeB tmax_lsid_typeB) Bool)
(declare-const dummy4 tmax_lsid_typeB)
(declare-datatypes () ((t8s__ref (mk_t8s__ref (t8s__content tmax_lsid_typeB)))))
(define-fun t8s__ref___projection ((a t8s__ref)) tmax_lsid_typeB (t8s__content a))
(declare-sort t 0)
(declare-fun first (t) tmax_lsid_typeB)
(declare-fun last (t) tmax_lsid_typeB)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range3 f) (=> (in_range3 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range3 low) (and (in_range3 high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int natural)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))
(define-fun of_array ((a (Array Int natural)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(define-fun bool_eq2 ((x us_t) (y us_t)) Bool (bool_eq1 (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq5 (us_t us_t) Bool)
(declare-const dummy5 us_t)
(declare-datatypes () ((t9s__ref (mk_t9s__ref (t9s__content us_t)))))
(define-fun t9s__ref___projection ((a t9s__ref)) us_t (t9s__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__foo__subject_state__max_id max_lsid_type)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) max_lsid_type (rec__foo__subject_state__max_id a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__foo__subject_state__states us_t)))))
(define-fun us_split_fields_States__projection ((a us_split_fields)) us_t (rec__foo__subject_state__states a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq3 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__foo__subject_state__max_id (us_split_discrs1 a))) (to_rep (rec__foo__subject_state__max_id (us_split_discrs1 b)))) (= (bool_eq2 (rec__foo__subject_state__states (us_split_fields1 a)) (rec__foo__subject_state__states (us_split_fields1 b))) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const foo__subject_state__max_id__first__bit Int)
(declare-const foo__subject_state__max_id__last__bit Int)
(declare-const foo__subject_state__max_id__position Int)
(assert (<= 0 foo__subject_state__max_id__first__bit))
(assert (< foo__subject_state__max_id__first__bit foo__subject_state__max_id__last__bit))
(assert (<= 0 foo__subject_state__max_id__position))
(declare-const foo__subject_state__states__first__bit Int)
(declare-const foo__subject_state__states__last__bit Int)
(declare-const foo__subject_state__states__position Int)
(assert (<= 0 foo__subject_state__states__first__bit))
(assert (< foo__subject_state__states__first__bit foo__subject_state__states__last__bit))
(assert (<= 0 foo__subject_state__states__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((subject_state__ref (mk_subject_state__ref (subject_state__content us_rep)))))
(define-fun subject_state__ref___projection ((a subject_state__ref)) us_rep (subject_state__content a))
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (tmax_lsid_typeB tmax_lsid_typeB) Bool)
(declare-const dummy7 tmax_lsid_typeB)
(declare-datatypes () ((tT10sP1__ref (mk_tT10sP1__ref (tT10sP1__content tmax_lsid_typeB)))))
(define-fun tT10sP1__ref___projection ((a tT10sP1__ref)) tmax_lsid_typeB (tT10sP1__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) tmax_lsid_typeB)
(declare-fun last2 (t1) tmax_lsid_typeB)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range3 f) (=> (in_range3 l) (and (= (to_rep1 (first2 (mk1 f l))) f) (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range3 low) (and (in_range3 high) (=> (<= low high) (and (dynamic_property2 range_first range_last low) (dynamic_property2 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int natural)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int natural) (elts1 a))
(define-fun of_array1 ((a (Array Int natural)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int natural)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int natural)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int natural)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq4 ((x us_t1) (y us_t1)) Bool (bool_eq1 (elts1 x) (to_rep1 (first2 (rt1 x))) (to_rep1 (last2 (rt1 x))) (elts1 y) (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))
(declare-fun user_eq8 (us_t1 us_t1) Bool)
(declare-const dummy8 us_t1)
(declare-datatypes () ((t10s__ref (mk_t10s__ref (t10s__content us_t1)))))
(define-fun t10s__ref___projection ((a t10s__ref)) us_t1 (t10s__content a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__foo__subject_state__states1 us_t1)))))
(define-fun us_split_fields_States__2__projection ((a us_split_fields2)) us_t1 (rec__foo__subject_state__states1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs2 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___3__projection ((a us_rep1)) us_split_discrs (us_split_discrs2 a))
(define-fun us_rep___4__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a) (mk___split_fields (let ((temp___161 (rec__foo__subject_state__states1 (us_split_fields3 a)))) (of_array (to_array1 temp___161) (first3 temp___161) (last3 temp___161))))))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r) (mk___split_fields1 (let ((temp___160 (rec__foo__subject_state__states (us_split_fields1 r)))) (of_array1 (to_array temp___160) (first1 temp___160) (last1 temp___160))))))
(define-fun bool_eq5 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__foo__subject_state__max_id (us_split_discrs2 a))) (to_rep (rec__foo__subject_state__max_id (us_split_discrs2 b)))) (= (bool_eq4 (rec__foo__subject_state__states1 (us_split_fields3 a)) (rec__foo__subject_state__states1 (us_split_fields3 b))) true)) true false))
(define-fun in_range4 ((rec__foo__subject_state__max_id1 Int) (a us_rep)) Bool (= rec__foo__subject_state__max_id1 (to_rep (rec__foo__subject_state__max_id (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const foo__subject_state__max_id__first__bit1 Int)
(declare-const foo__subject_state__max_id__last__bit1 Int)
(declare-const foo__subject_state__max_id__position1 Int)
(assert (<= 0 foo__subject_state__max_id__first__bit1))
(assert (< foo__subject_state__max_id__first__bit1 foo__subject_state__max_id__last__bit1))
(assert (<= 0 foo__subject_state__max_id__position1))
(declare-const foo__subject_state__states__first__bit1 Int)
(declare-const foo__subject_state__states__last__bit1 Int)
(declare-const foo__subject_state__states__position1 Int)
(assert (<= 0 foo__subject_state__states__first__bit1))
(assert (< foo__subject_state__states__first__bit1 foo__subject_state__states__last__bit1))
(assert (<= 0 foo__subject_state__states__position1))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((tstatesS__ref (mk_tstatesS__ref (tstatesS__content us_rep1)))))
(define-fun tstatesS__ref___projection ((a tstatesS__ref)) us_rep1 (tstatesS__content a))
(define-fun dynamic_invariant1 ((temp___expr_213 us_rep1) (temp___is_init_209 Bool) (temp___skip_constant_210 Bool) (temp___do_toplevel_211 Bool) (temp___do_typ_inv_212 Bool)) Bool (and (=> (not (= temp___skip_constant_210 true)) (in_range4 (to_rep (select cpu_lsid_last cpu_id)) (to_base temp___expr_213))) (and (dynamic_property3 0 (to_rep (select cpu_lsid_last cpu_id)) (first3 (rec__foo__subject_state__states1 (us_split_fields3 temp___expr_213))) (last3 (rec__foo__subject_state__states1 (us_split_fields3 temp___expr_213)))) (and (= (first3 (rec__foo__subject_state__states1 (us_split_fields3 temp___expr_213))) 0) (= (last3 (rec__foo__subject_state__states1 (us_split_fields3 temp___expr_213))) (to_rep (select cpu_lsid_last cpu_id)))))))
(define-fun default_initial_assumption ((temp___expr_216 us_rep1) (temp___skip_top_level_217 Bool)) Bool (= (to_rep (rec__foo__subject_state__max_id (us_split_discrs2 temp___expr_216))) (to_rep (select cpu_lsid_last cpu_id))))
(declare-const states__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range2 temp___expr_39)))
(declare-sort local_subject_id_type 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 5)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq10 (local_subject_id_type local_subject_id_type) Bool)
(declare-const dummy10 local_subject_id_type)
(declare-datatypes () ((local_subject_id_type__ref (mk_local_subject_id_type__ref (local_subject_id_type__content local_subject_id_type)))))
(define-fun local_subject_id_type__ref___projection ((a local_subject_id_type__ref)) local_subject_id_type (local_subject_id_type__content a))
(define-fun dynamic_invariant3 ((temp___expr_190 Int) (temp___is_init_186 Bool) (temp___skip_constant_187 Bool) (temp___do_toplevel_188 Bool) (temp___do_typ_inv_189 Bool)) Bool (and (=> (or (= temp___is_init_186 true) (<= 0 5)) (in_range5 temp___expr_190)) (=> (= temp___do_toplevel_188 true) (=> (= temp___is_init_186 true) (<= temp___expr_190 (to_rep (select cpu_lsid_last cpu_id)))))))
(define-fun dynamic_predicate ((temp___194 Int)) Bool (<= temp___194 (to_rep (select cpu_lsid_last cpu_id))))
(declare-fun get_element (Int us_split_fields2) Int)
(declare-fun get_element__function_guard (Int Int us_split_fields2) Bool)
(assert (forall ((id Int)) (forall ((foo__states__fields us_split_fields2)) (! (=> (and (dynamic_invariant3 id true true true true) (dynamic_invariant1 (mk___rep1 states__split_discrs foo__states__fields) true true true true)) (dynamic_invariant2 (get_element id foo__states__fields) true false true true)) :pattern ((get_element id foo__states__fields))))))
(assert (forall ((id Int)) (forall ((foo__states__fields us_split_fields2)) (! (=> (and (dynamic_invariant3 id true true true true) (dynamic_invariant1 (mk___rep1 states__split_discrs foo__states__fields) true true true true)) (= (get_element id foo__states__fields) (to_rep2 (let ((temp___227 (rec__foo__subject_state__states1 (us_split_fields3 (mk___rep1 states__split_discrs foo__states__fields))))) (select (to_array1 temp___227) id))))) :pattern ((get_element id foo__states__fields))))))
(define-fun dynamic_invariant4 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= 0 5)) (in_range1 temp___expr_173)))
(assert (= cpu_lsid_last (foo__cpu_lsid_last__aggregate_def 3 4)))
(assert (forall ((temp___156 Int) (temp___157 Int)) (let ((temp___155 (foo__cpu_lsid_last__aggregate_def temp___156 temp___157))) (=> (and (dynamic_invariant4 temp___156 true true true true) (dynamic_invariant4 temp___157 true true true true)) (and (= (to_rep (select temp___155 0)) temp___156) (= (to_rep (select temp___155 1)) temp___157))))))
(define-fun dynamic_invariant5 ((temp___expr_206 us_rep) (temp___is_init_202 Bool) (temp___skip_constant_203 Bool) (temp___do_toplevel_204 Bool) (temp___do_typ_inv_205 Bool)) Bool (let ((temp___207 (rec__foo__subject_state__max_id (us_split_discrs1 temp___expr_206)))) (and (dynamic_property1 0 (to_rep temp___207) (first1 (rec__foo__subject_state__states (us_split_fields1 temp___expr_206))) (last1 (rec__foo__subject_state__states (us_split_fields1 temp___expr_206)))) (and (= (first1 (rec__foo__subject_state__states (us_split_fields1 temp___expr_206))) 0) (= (last1 (rec__foo__subject_state__states (us_split_fields1 temp___expr_206))) (to_rep temp___207))))))
(declare-const states__split_fields (Array Int natural))
(declare-const states__split_fields1 t1)
(assert (= (foo__cpu_lsid_last__aggregate_def 3 4) cpu_lsid_last))
(assert (in_range cpu_id))
(assert (dynamic_invariant1 (mk___rep1 states__split_discrs (mk___split_fields1 (mk___t1 states__split_fields states__split_fields1))) true false true true))
(assert (not (<= 5 (to_rep (select cpu_lsid_last cpu_id)))))
(check-sat)
(exit)
