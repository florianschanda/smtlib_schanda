(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort us_main_type 0)
(declare-fun us_main_eq (us_main_type us_main_type) Bool)
(declare-sort us_rep 0)
(declare-fun bool_eq2 (us_rep us_rep) Bool)
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((file_type__ref (mk_file_type__ref (file_type__content us_rep)))))
(define-fun file_type__ref___2__projection ((a file_type__ref)) us_rep (file_type__content a))
(declare-sort file_status 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (file_status file_status) Bool)
(declare-const dummy5 file_status)
(declare-datatypes () ((file_status__ref (mk_file_status__ref (file_status__content file_status)))))
(define-fun file_status__ref___2__projection ((a file_status__ref)) file_status (file_status__content a))
(declare-fun to_rep2 (file_status) Int)
(declare-fun of_rep2 (Int) file_status)
(assert (forall ((x file_status)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x file_status)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__spark__text_io__character_result__status file_status)))))
(define-fun us_split_discrs___2__projection ((a us_split_discrs)) file_status (rec__spark__text_io__character_result__status a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___2__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__spark__text_io__character_result__item character)))))
(define-fun us_split_fields_Item__projection ((a us_split_fields)) character (rec__spark__text_io__character_result__item a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep1 (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___6__projection ((a us_rep1)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___7__projection ((a us_rep1)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___8__projection ((a us_rep1)) Bool (attr__constrained a))
(define-fun spark__text_io__character_result__item__pred ((a us_rep1)) Bool (= (to_rep2 (rec__spark__text_io__character_result__status (us_split_discrs1 a))) 1))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep2 (rec__spark__text_io__character_result__status (us_split_discrs1 a))) (to_rep2 (rec__spark__text_io__character_result__status (us_split_discrs1 b)))) (=> (spark__text_io__character_result__item__pred a) (= (to_rep (rec__spark__text_io__character_result__item (us_split_fields1 a))) (to_rep (rec__spark__text_io__character_result__item (us_split_fields1 b)))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const spark__text_io__character_result__status__first__bit Int)
(declare-const spark__text_io__character_result__status__last__bit Int)
(declare-const spark__text_io__character_result__status__position Int)
(assert (<= 0 spark__text_io__character_result__status__first__bit))
(assert (< spark__text_io__character_result__status__first__bit spark__text_io__character_result__status__last__bit))
(assert (<= 0 spark__text_io__character_result__status__position))
(declare-const spark__text_io__character_result__item__first__bit Int)
(declare-const spark__text_io__character_result__item__last__bit Int)
(declare-const spark__text_io__character_result__item__position Int)
(assert (<= 0 spark__text_io__character_result__item__first__bit))
(assert (< spark__text_io__character_result__item__first__bit spark__text_io__character_result__item__last__bit))
(assert (<= 0 spark__text_io__character_result__item__position))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((character_result__ref (mk_character_result__ref (character_result__content us_rep1)))))
(define-fun character_result__ref___projection ((a character_result__ref)) us_rep1 (character_result__content a))
(define-fun default_initial_assumption ((temp___expr_603 us_rep1) (temp___skip_top_level_604 Bool)) Bool (and (= (attr__constrained temp___expr_603) false) (= (to_rep2 (rec__spark__text_io__character_result__status (us_split_discrs1 temp___expr_603))) 3)))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun status (us_rep) Int)
(declare-fun status__function_guard (Int us_rep) Bool)
(define-fun dynamic_invariant ((temp___expr_538 Int) (temp___is_init_535 Bool) (temp___skip_constant_536 Bool) (temp___do_toplevel_537 Bool)) Bool (=> (or (= temp___is_init_535 true) (<= 0 10)) (in_range4 temp___expr_538)))
(declare-fun is_readable (us_rep) Bool)
(declare-fun is_readable__function_guard (Bool us_rep) Bool)
(declare-fun is_open (us_rep) Bool)
(declare-fun is_open__function_guard (Bool us_rep) Bool)
(declare-fun mode__2 (us_rep) Int)
(declare-fun mode__2__function_guard (Int us_rep) Bool)
(assert (forall ((file us_rep)) (! (= (= (is_readable file) true) (and (= (is_open file) true) (= (mode__2 file) 0))) :pattern ((is_readable file)))))
(declare-fun is_writable (us_rep) Bool)
(declare-fun is_writable__function_guard (Bool us_rep) Bool)
(assert (forall ((file us_rep)) (! (= (= (is_writable file) true) (and (= (is_open file) true) (or (= (mode__2 file) 1) (= (mode__2 file) 2)))) :pattern ((is_writable file)))))
(declare-fun end_of_file (us_rep) Bool)
(declare-fun end_of_file__function_guard (Bool us_rep) Bool)
(declare-fun is_standard_file (us_rep) Bool)
(declare-fun is_standard_file__function_guard (Bool us_rep) Bool)
(declare-fun name (us_rep) us_t)
(declare-fun name__function_guard (us_t us_rep) Bool)
(declare-fun form (us_rep) us_t)
(declare-fun form__function_guard (us_t us_rep) Bool)
(declare-fun line_length__2 (us_rep) Int)
(declare-fun line_length__2__function_guard (Int us_rep) Bool)
(declare-fun page_length__2 (us_rep) Int)
(declare-fun page_length__2__function_guard (Int us_rep) Bool)
(declare-const c__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp___String_Literal_811 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_811 us_void_param) 1)) 69) (= (to_rep (select (temp___String_Literal_811 us_void_param) 2)) 114)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 3)) 114)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 4)) 111)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 5)) 114)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 6)) 32)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 7)) 111)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 8)) 110)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 9)) 32)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 10)) 83)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 11)) 116)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 12)) 97)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 13)) 110)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 14)) 100)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 15)) 97)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 16)) 114)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 17)) 100)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 18)) 95)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 19)) 73)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 20)) 110)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 21)) 112)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 22)) 117)) (= (to_rep (select (temp___String_Literal_811 us_void_param) 23)) 116)) :pattern ((temp___String_Literal_811 us_void_param)))))
(declare-fun temp___String_Literal_812 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (to_rep (select (temp___String_Literal_812 us_void_param) 1)) 69) (= (to_rep (select (temp___String_Literal_812 us_void_param) 2)) 114)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 3)) 114)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 4)) 111)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 5)) 114)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 6)) 32)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 7)) 111)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 8)) 110)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 9)) 32)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 10)) 83)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 11)) 116)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 12)) 97)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 13)) 110)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 14)) 100)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 15)) 97)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 16)) 114)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 17)) 100)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 18)) 95)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 19)) 79)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 20)) 117)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 21)) 116)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 22)) 112)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 23)) 117)) (= (to_rep (select (temp___String_Literal_812 us_void_param) 24)) 116)) :pattern ((temp___String_Literal_812 us_void_param)))))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(define-fun dynamic_invariant3 ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(define-fun dynamic_invariant4 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-sort file_mode 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (file_mode file_mode) Bool)
(declare-const dummy7 file_mode)
(declare-datatypes () ((file_mode__ref (mk_file_mode__ref (file_mode__content file_mode)))))
(define-fun file_mode__ref___3__projection ((a file_mode__ref)) file_mode (file_mode__content a))
(define-fun dynamic_invariant5 ((temp___expr_550 Int) (temp___is_init_547 Bool) (temp___skip_constant_548 Bool) (temp___do_toplevel_549 Bool)) Bool (=> (or (= temp___is_init_547 true) (<= 0 2)) (in_range5 temp___expr_550)))
(declare-sort count 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (count count) Bool)
(declare-const dummy8 count)
(declare-datatypes () ((count__ref (mk_count__ref (count__content count)))))
(define-fun count__ref___2__projection ((a count__ref)) count (count__content a))
(define-fun dynamic_invariant6 ((temp___expr_556 Int) (temp___is_init_553 Bool) (temp___skip_constant_554 Bool) (temp___do_toplevel_555 Bool)) Bool (=> (or (= temp___is_init_553 true) (<= 0 2147483647)) (in_range6 temp___expr_556)))
(declare-fun is_standard_input (us_rep) Bool)
(declare-fun is_standard_input__function_guard (Bool us_rep) Bool)
(declare-fun is_standard_output (us_rep) Bool)
(declare-fun is_standard_output__function_guard (Bool us_rep) Bool)
(declare-fun is_standard_error (us_rep) Bool)
(declare-fun is_standard_error__function_guard (Bool us_rep) Bool)
(assert (forall ((file us_rep)) (! (= (= (is_standard_file file) true) (or (or (= (is_standard_input file) true) (= (is_standard_output file) true)) (= (is_standard_error file) true))) :pattern ((is_standard_file file)))))
(declare-const standard_input us_rep)
(declare-const standard_output us_rep)
(declare-const standard_error us_rep)
(declare-const c__split_discrs file_status)
(declare-const o Bool)
(declare-const o1 Int)
(declare-const o2 Bool)
(declare-const o3 Bool)
(declare-const result Bool)
(declare-const standard_input1 us_rep)
(declare-const standard_output1 us_rep)
(declare-const standard_error1 us_rep)
(declare-const standard_input2 us_rep)
(declare-const c__split_discrs1 file_status)
(declare-const result1 Bool)
(declare-const standard_output2 us_rep)
(declare-const standard_error2 us_rep)
(declare-const result2 Bool)
(assert (and (and (and (and (and (= (is_readable standard_input) true) (= (is_writable standard_output) true)) (= (is_writable standard_error) true)) (= (status standard_input) 1)) (= (status standard_output) 1)) (= (status standard_error) 1)))
(assert (and (and (= (is_readable standard_input) true) (= (is_writable standard_output) true)) (= (is_writable standard_error) true)))
(assert (and (= c__attr__constrained false) (= (to_rep2 c__split_discrs) 3)))
(assert (= o (end_of_file standard_input)))
(assert (= result (ite (not (= o true)) true false)))
(assert (= result true))
(assert (and (and (= (is_writable standard_error1) true) (= (is_writable standard_output1) true)) (= (is_readable standard_input1) true)))
(assert (and (and (and (= (is_readable standard_input2) true) (= (let ((temp___715 (name standard_input1))) (let ((temp___714 (name standard_input2))) (bool_eq (elts temp___714) (to_rep1 (first (rt temp___714))) (to_rep1 (last (rt temp___714))) (elts temp___715) (to_rep1 (first (rt temp___715))) (to_rep1 (last (rt temp___715)))))) true)) (= (let ((temp___717 (form standard_input1))) (let ((temp___716 (form standard_input2))) (bool_eq (elts temp___716) (to_rep1 (first (rt temp___716))) (to_rep1 (last (rt temp___716))) (elts temp___717) (to_rep1 (first (rt temp___717))) (to_rep1 (last (rt temp___717)))))) true)) (= (= (is_standard_file standard_input2) true) (= (is_standard_file standard_input1) true))))
(assert (= (to_rep2 c__split_discrs1) 1))
(assert (and (= o1 (status standard_output1)) (in_range4 o1)))
(assert (= result1 (ite (= o1 1) true false)))
(assert (= result1 true))
(assert (and (and (and (and (and (and (and (= (is_writable standard_output2) true) (= (is_open standard_output2) true)) (= (mode__2 standard_output2) (mode__2 standard_output1))) (= (let ((temp___725 (name standard_output1))) (let ((temp___724 (name standard_output2))) (bool_eq (elts temp___724) (to_rep1 (first (rt temp___724))) (to_rep1 (last (rt temp___724))) (elts temp___725) (to_rep1 (first (rt temp___725))) (to_rep1 (last (rt temp___725)))))) true)) (= (let ((temp___727 (form standard_output1))) (let ((temp___726 (form standard_output2))) (bool_eq (elts temp___726) (to_rep1 (first (rt temp___726))) (to_rep1 (last (rt temp___726))) (elts temp___727) (to_rep1 (first (rt temp___727))) (to_rep1 (last (rt temp___727)))))) true)) (= (line_length__2 standard_output2) (line_length__2 standard_output1))) (= (page_length__2 standard_output2) (page_length__2 standard_output1))) (= (= (is_standard_file standard_output2) true) (= (is_standard_file standard_output1) true))))
(assert (= standard_error2 standard_error1))
(assert (= o2 (end_of_file standard_input2)))
(assert (= o3 (ite (not (= o2 true)) true false)))
(assert (= result2 (ite (not (= o3 true)) true false)))
(assert (not (= result2 true)))
(assert (not (= (is_writable standard_error2) true)))
(check-sat)
(exit)
