(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort tindex_aB 0)
(declare-fun tindex_aBqtint (tindex_aB) Int)
(assert (forall ((i tindex_aB)) (and (<= (- 128) (tindex_aBqtint i)) (<= (tindex_aBqtint i) 127))))
(define-fun in_range ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (tindex_aB tindex_aB) Bool)
(declare-const dummy tindex_aB)
(declare-datatypes () ((tindex_aB__ref (mk_tindex_aB__ref (tindex_aB__content tindex_aB)))))
(define-fun tindex_aB__ref___projection ((a tindex_aB__ref)) tindex_aB (tindex_aB__content a))
(define-fun to_rep ((x tindex_aB)) Int (tindex_aBqtint x))
(declare-fun of_rep (Int) tindex_aB)
(assert (forall ((x tindex_aB)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x tindex_aB)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index_a 0)
(declare-fun index_aqtint (index_a) Int)
(assert (forall ((i index_a)) (and (<= (- 3) (index_aqtint i)) (<= (index_aqtint i) 15))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 3) x) (<= x 15)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (index_a index_a) Bool)
(declare-const dummy1 index_a)
(declare-datatypes () ((index_a__ref (mk_index_a__ref (index_a__content index_a)))))
(define-fun index_a__ref___projection ((a index_a__ref)) index_a (index_a__content a))
(declare-sort index_b 0)
(declare-fun index_bqtint (index_b) Int)
(assert (forall ((i index_b)) (and (<= 3 (index_bqtint i)) (<= (index_bqtint i) 15))))
(define-fun in_range2 ((x Int)) Bool (and (<= 3 x) (<= x 15)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (index_b index_b) Bool)
(declare-const dummy2 index_b)
(declare-datatypes () ((index_b__ref (mk_index_b__ref (index_b__content index_b)))))
(define-fun index_b__ref___projection ((a index_b__ref)) index_b (index_b__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep1 ((x integer)) Int (integerqtint x))
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) tindex_aB)
(declare-fun last (t) tindex_aB)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((array_a__ref (mk_array_a__ref (array_a__content us_t)))))
(define-fun array_a__ref___projection ((a array_a__ref)) us_t (array_a__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) tindex_aB)
(declare-fun last2 (t1) tindex_aB)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int integer)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))
(define-fun of_array1 ((a (Array Int integer)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int integer)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int integer)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int integer)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y) (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))
(declare-fun user_eq5 (us_t1 us_t1) Bool)
(declare-const dummy5 us_t1)
(declare-datatypes () ((array_b__ref (mk_array_b__ref (array_b__content us_t1)))))
(define-fun array_b__ref___projection ((a array_b__ref)) us_t1 (array_b__content a))
(declare-sort t14b 0)
(declare-fun t14bqtint (t14b) Int)
(assert (forall ((i t14b)) (and (<= (- 3) (t14bqtint i)) (<= (t14bqtint i) (- 1)))))
(define-fun in_range4 ((x Int)) Bool (and (<= (- 3) x) (<= x (- 1))))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (t14b t14b) Bool)
(declare-const dummy6 t14b)
(declare-datatypes () ((t14b__ref (mk_t14b__ref (t14b__content t14b)))))
(define-fun t14b__ref___projection ((a t14b__ref)) t14b (t14b__content a))
(declare-const a__first tindex_aB)
(declare-const a__last tindex_aB)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (tindex_aB tindex_aB) Bool)
(declare-const dummy7 tindex_aB)
(declare-datatypes () ((tTC17bSP1__ref (mk_tTC17bSP1__ref (tTC17bSP1__content tindex_aB)))))
(define-fun tTC17bSP1__ref___projection ((a tTC17bSP1__ref)) tindex_aB (tTC17bSP1__content a))
(declare-sort t2 0)
(declare-fun first4 (t2) tindex_aB)
(declare-fun last4 (t2) tindex_aB)
(declare-fun mk2 (Int Int) t2)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep (first4 (mk2 f l))) f) (= (to_rep (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)))))
(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (dynamic_property2 range_first range_last low) (dynamic_property2 range_first range_last high))))))
(declare-datatypes () ((us_t2 (mk___t2 (elts2 (Array Int integer)) (rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int integer) (elts2 a))
(define-fun of_array2 ((a (Array Int integer)) (f Int) (l Int)) us_t2 (mk___t2 a (mk2 f l)))
(define-fun first5 ((a us_t2)) Int (to_rep (first4 (rt2 a))))
(define-fun last5 ((a us_t2)) Int (to_rep (last4 (rt2 a))))
(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a)) (+ (- (last5 a) (first5 a)) 1) 0))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int integer)) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int integer)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int integer)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))
(define-fun bool_eq3 ((x us_t2) (y us_t2)) Bool (bool_eq (elts2 x) (to_rep (first4 (rt2 x))) (to_rep (last4 (rt2 x))) (elts2 y) (to_rep (first4 (rt2 y))) (to_rep (last4 (rt2 y)))))
(declare-fun user_eq8 (us_t2 us_t2) Bool)
(declare-const dummy8 us_t2)
(declare-datatypes () ((tC17bS__ref (mk_tC17bS__ref (tC17bS__content us_t2)))))
(define-fun tC17bS__ref___projection ((a tC17bS__ref)) us_t2 (tC17bS__content a))
(define-fun dynamic_invariant ((temp___expr_247 us_t2) (temp___is_init_243 Bool) (temp___skip_constant_244 Bool) (temp___do_toplevel_245 Bool) (temp___do_typ_inv_246 Bool)) Bool (=> (not (= temp___skip_constant_244 true)) (and (dynamic_property3 (to_rep a__first) (to_rep a__last) (first5 temp___expr_247) (last5 temp___expr_247)) (and (= (first5 temp___expr_247) (to_rep a__first)) (= (last5 temp___expr_247) (to_rep a__last))))))
(declare-const c17b__first tindex_aB)
(declare-const c17b__last tindex_aB)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const b__first tindex_aB)
(declare-const b__last tindex_aB)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun essai05__a__aggregate_def (Int Int Int) (Array Int integer))
(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_18)))
(define-fun dynamic_invariant2 ((temp___expr_201 Int) (temp___is_init_197 Bool) (temp___skip_constant_198 Bool) (temp___do_toplevel_199 Bool) (temp___do_typ_inv_200 Bool)) Bool (=> (or (= temp___is_init_197 true) (<= (- 3) 15)) (in_range1 temp___expr_201)))
(define-fun dynamic_invariant3 ((temp___expr_208 Int) (temp___is_init_204 Bool) (temp___skip_constant_205 Bool) (temp___do_toplevel_206 Bool) (temp___do_typ_inv_207 Bool)) Bool (=> (or (= temp___is_init_204 true) (<= 3 15)) (in_range2 temp___expr_208)))
(define-fun dynamic_invariant4 ((temp___expr_215 us_t) (temp___is_init_211 Bool) (temp___skip_constant_212 Bool) (temp___do_toplevel_213 Bool) (temp___do_typ_inv_214 Bool)) Bool (=> (not (= temp___skip_constant_212 true)) (dynamic_property (- 3) 15 (first1 temp___expr_215) (last1 temp___expr_215))))
(define-fun dynamic_invariant5 ((temp___expr_221 us_t1) (temp___is_init_217 Bool) (temp___skip_constant_218 Bool) (temp___do_toplevel_219 Bool) (temp___do_typ_inv_220 Bool)) Bool (=> (not (= temp___skip_constant_218 true)) (dynamic_property1 3 15 (first3 temp___expr_221) (last3 temp___expr_221))))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 0))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 1))
(declare-const rliteral2 integer)
(assert (= (integerqtint rliteral2) 2))
(assert (forall ((temp___264 Int) (temp___265 Int) (temp___266 Int)) (let ((temp___263 (essai05__a__aggregate_def temp___264 temp___265 temp___266))) (=> (and (and (dynamic_invariant1 temp___264 true true true true) (dynamic_invariant1 temp___265 true true true true)) (dynamic_invariant1 temp___266 true true true true)) (and (and (= (select temp___263 (- 3)) rliteral) (= (select temp___263 (- 2)) rliteral1)) (= (select temp___263 (- 1)) rliteral2))))))
(declare-const a (Array Int integer))
(declare-const result (Array Int integer))
(declare-const a1 (Array Int integer))
(assert (= result a))
(assert (= a1 (essai05__a__aggregate_def 0 1 2)))
(assert (= (to_rep a__first) (to_rep (first (mk (- 3) (- 1))))))
(assert (= (to_rep a__last) (to_rep (last (mk (- 3) (- 1))))))
(assert (dynamic_property (- 3) 15 (to_rep a__first) (to_rep a__last)))
(assert (<= (to_rep a__first) (to_rep a__last)))
(assert (not (<= 3 (to_rep a__first))))
(check-sat)
(exit)
