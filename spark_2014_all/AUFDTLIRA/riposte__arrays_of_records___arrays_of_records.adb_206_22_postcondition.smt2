(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort index 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 1001)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (index index) Bool)
(declare-const dummy index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 0 1001)) (in_range temp___expr_166)))
(declare-sort value 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 23) x) (<= x 69)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (value value) Bool)
(declare-const dummy1 value)
(declare-datatypes () ((value__ref (mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))
(define-fun dynamic_invariant1 ((temp___expr_173 Int) (temp___is_init_169 Bool) (temp___skip_constant_170 Bool) (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool (=> (or (= temp___is_init_169 true) (<= (- 23) 69)) (in_range1 temp___expr_173)))
(declare-fun to_rep (value) Int)
(declare-fun of_rep (Int) value)
(assert (forall ((x value)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x value)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__arrays_of_records__basic_record__flag Bool) (rec__arrays_of_records__basic_record__first_value value) (rec__arrays_of_records__basic_record__second_value value)))))
(define-fun us_split_fields_Flag__projection ((a us_split_fields)) Bool (rec__arrays_of_records__basic_record__flag a))
(define-fun us_split_fields_First_Value__projection ((a us_split_fields)) value (rec__arrays_of_records__basic_record__first_value a))
(define-fun us_split_fields_Second_Value__projection ((a us_split_fields)) value (rec__arrays_of_records__basic_record__second_value a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (and (= (rec__arrays_of_records__basic_record__flag (us_split_fields1 a)) (rec__arrays_of_records__basic_record__flag (us_split_fields1 b))) (= (to_rep (rec__arrays_of_records__basic_record__first_value (us_split_fields1 a))) (to_rep (rec__arrays_of_records__basic_record__first_value (us_split_fields1 b))))) (= (to_rep (rec__arrays_of_records__basic_record__second_value (us_split_fields1 a))) (to_rep (rec__arrays_of_records__basic_record__second_value (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const arrays_of_records__basic_record__flag__first__bit Int)
(declare-const arrays_of_records__basic_record__flag__last__bit Int)
(declare-const arrays_of_records__basic_record__flag__position Int)
(assert (<= 0 arrays_of_records__basic_record__flag__first__bit))
(assert (< arrays_of_records__basic_record__flag__first__bit arrays_of_records__basic_record__flag__last__bit))
(assert (<= 0 arrays_of_records__basic_record__flag__position))
(declare-const arrays_of_records__basic_record__first_value__first__bit Int)
(declare-const arrays_of_records__basic_record__first_value__last__bit Int)
(declare-const arrays_of_records__basic_record__first_value__position Int)
(assert (<= 0 arrays_of_records__basic_record__first_value__first__bit))
(assert (< arrays_of_records__basic_record__first_value__first__bit arrays_of_records__basic_record__first_value__last__bit))
(assert (<= 0 arrays_of_records__basic_record__first_value__position))
(declare-const arrays_of_records__basic_record__second_value__first__bit Int)
(declare-const arrays_of_records__basic_record__second_value__last__bit Int)
(declare-const arrays_of_records__basic_record__second_value__position Int)
(assert (<= 0 arrays_of_records__basic_record__second_value__first__bit))
(assert (< arrays_of_records__basic_record__second_value__first__bit arrays_of_records__basic_record__second_value__last__bit))
(assert (<= 0 arrays_of_records__basic_record__second_value__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((basic_record__ref (mk_basic_record__ref (basic_record__content us_rep)))))
(define-fun basic_record__ref___projection ((a basic_record__ref)) us_rep (basic_record__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const i Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const j Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const a (Array Int us_rep))
(declare-const tmp Int)
(declare-const o value)
(declare-const o1 Bool)
(declare-const o2 value)
(declare-const o3 value)
(declare-const o4 Bool)
(declare-const o5 value)
(declare-const o6 value)
(declare-const o7 (Array Int us_rep))
(declare-const o8 value)
(declare-const o9 Bool)
(declare-const o10 value)
(declare-const o11 value)
(declare-const o12 Bool)
(declare-const o13 value)
(declare-const o14 value)
(declare-const o15 (Array Int us_rep))
(declare-const result Int)
(declare-const tmp1 Int)
(declare-const result1 (Array Int us_rep))
(declare-const a1 (Array Int us_rep))
(declare-const result2 (Array Int us_rep))
(declare-const a2 (Array Int us_rep))
(declare-const a3 (Array Int us_rep))
(declare-const tmp2 Int)
(declare-const a4 (Array Int us_rep))
(declare-const tmp3 Int)
(assert (in_range i))
(assert (in_range j))
(assert (not (= i j)))
(assert (=> (<= (- 23) 69) (in_range1 tmp)))
(assert (= result tmp))
(assert (= tmp1 (to_rep (rec__arrays_of_records__basic_record__first_value (us_split_fields1 (select a i))))))
(assert (= (to_rep o) (to_rep (rec__arrays_of_records__basic_record__first_value (us_split_fields1 (select a j))))))
(assert (= (rec__arrays_of_records__basic_record__flag (us_split_fields1 (select a i))) o1))
(assert (= o o2))
(assert (= (rec__arrays_of_records__basic_record__second_value (us_split_fields1 (select a i))) o3))
(assert (= o4 o1))
(assert (= o5 o2))
(assert (= o6 o3))
(assert (= o7 (store a i (mk___rep (mk___split_fields o4 o5 o6)))))
(assert (= result1 a))
(assert (= a1 o7))
(assert (= (to_rep o8) tmp1))
(assert (= (rec__arrays_of_records__basic_record__flag (us_split_fields1 (select a1 j))) o9))
(assert (= o8 o10))
(assert (= (rec__arrays_of_records__basic_record__second_value (us_split_fields1 (select a1 j))) o11))
(assert (= o12 o9))
(assert (= o13 o10))
(assert (= o14 o11))
(assert (= o15 (store a1 j (mk___rep (mk___split_fields o12 o13 o14)))))
(assert (= result2 a1))
(assert (= a2 o15))
(assert (= tmp2 tmp1))
(assert (= a2 a3))
(assert (= tmp3 tmp1))
(assert (= a4 a2))
(assert (not (not (= (bool_eq1 a3 0 1001 a 0 1001) true))))
(check-sat)
(exit)
