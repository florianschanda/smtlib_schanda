(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (Bool Int) (Array Int Bool))
(assert (forall ((v Bool)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134))))))))))
(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (orb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (andb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (xorb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool))) (forall ((a_first Int) (a_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select (notb a a_first a_last) i)))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((t54b__ref (mk_t54b__ref (t54b__content integer)))))
(define-fun t54b__ref___projection ((a t54b__ref)) integer (t54b__content a))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int Bool)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int Bool) (elts a))
(define-fun of_array ((a (Array Int Bool)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int Bool)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int Bool)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int Bool)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((t55b__ref (mk_t55b__ref (t55b__content us_t)))))
(define-fun t55b__ref___projection ((a t55b__ref)) us_t (t55b__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__do_checks__do_discriminant_check__r1__j integer)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs)) integer (rec__do_checks__do_discriminant_check__r1__j a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__do_checks__do_discriminant_check__r1__arr us_t)))))
(define-fun us_split_fields_Arr__projection ((a us_split_fields)) us_t (rec__do_checks__do_discriminant_check__r1__arr a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___5__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields)))))
(define-fun us_rep___7__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___8__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun do_checks__do_discriminant_check__r1__arr__pred ((a us_rep)) Bool (and (<= 1 (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs1 a)))) (<= (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs1 a))) 2147483647)))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs1 a))) (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs1 b)))) (=> (do_checks__do_discriminant_check__r1__arr__pred a) (= (bool_eq1 (rec__do_checks__do_discriminant_check__r1__arr (us_split_fields1 a)) (rec__do_checks__do_discriminant_check__r1__arr (us_split_fields1 b))) true))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const do_checks__do_discriminant_check__r1__j__first__bit Int)
(declare-const do_checks__do_discriminant_check__r1__j__last__bit Int)
(declare-const do_checks__do_discriminant_check__r1__j__position Int)
(assert (<= 0 do_checks__do_discriminant_check__r1__j__first__bit))
(assert (< do_checks__do_discriminant_check__r1__j__first__bit do_checks__do_discriminant_check__r1__j__last__bit))
(assert (<= 0 do_checks__do_discriminant_check__r1__j__position))
(declare-const do_checks__do_discriminant_check__r1__arr__first__bit Int)
(declare-const do_checks__do_discriminant_check__r1__arr__last__bit Int)
(declare-const do_checks__do_discriminant_check__r1__arr__position Int)
(assert (<= 0 do_checks__do_discriminant_check__r1__arr__first__bit))
(assert (< do_checks__do_discriminant_check__r1__arr__first__bit do_checks__do_discriminant_check__r1__arr__last__bit))
(assert (<= 0 do_checks__do_discriminant_check__r1__arr__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((r1__ref (mk_r1__ref (r1__content us_rep)))))
(define-fun r1__ref___projection ((a r1__ref)) us_rep (r1__content a))
(define-fun dynamic_invariant ((temp___expr_509 us_rep) (temp___is_init_506 Bool) (temp___skip_constant_507 Bool) (temp___do_toplevel_508 Bool)) Bool (let ((temp___510 (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs1 temp___expr_509)))) (=> (do_checks__do_discriminant_check__r1__arr__pred temp___expr_509) (and (dynamic_property1 1 (to_rep temp___510) (first1 (rec__do_checks__do_discriminant_check__r1__arr (us_split_fields1 temp___expr_509))) (last1 (rec__do_checks__do_discriminant_check__r1__arr (us_split_fields1 temp___expr_509)))) (and (= (first1 (rec__do_checks__do_discriminant_check__r1__arr (us_split_fields1 temp___expr_509))) 1) (= (last1 (rec__do_checks__do_discriminant_check__r1__arr (us_split_fields1 temp___expr_509))) (to_rep temp___510)))))))
(declare-sort tT59bP1 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (tT59bP1 tT59bP1) Bool)
(declare-const dummy4 tT59bP1)
(declare-datatypes () ((tT59bP1__ref (mk_tT59bP1__ref (tT59bP1__content tT59bP1)))))
(define-fun tT59bP1__ref___projection ((a tT59bP1__ref)) tT59bP1 (tT59bP1__content a))
(declare-const dummy5 (Array Int Bool))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int Bool)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int Bool)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int Bool)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq5 ((Array Int Bool) (Array Int Bool)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__do_checks__do_discriminant_check__r1__arr1 (Array Int Bool))))))
(define-fun us_split_fields_Arr__4__projection ((a us_split_fields2)) (Array Int Bool) (rec__do_checks__do_discriminant_check__r1__arr1 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___8__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs2 us_split_discrs) (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___13__projection ((a us_rep1)) us_split_discrs (us_split_discrs2 a))
(define-fun us_rep___14__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun to_base ((a us_rep1)) us_rep (mk___rep (us_split_discrs2 a) (mk___split_fields (of_array (rec__do_checks__do_discriminant_check__r1__arr1 (us_split_fields3 a)) 1 10))))
(define-fun of_base ((r us_rep)) us_rep1 (mk___rep1 (us_split_discrs1 r) (mk___split_fields1 (let ((temp___138 (rec__do_checks__do_discriminant_check__r1__arr (us_split_fields1 r)))) (to_array temp___138)))))
(define-fun do_checks__do_discriminant_check__r1__arr__pred1 ((a us_rep1)) Bool (and (<= 1 (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs2 a)))) (<= (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs2 a))) 2147483647)))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs2 a))) (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs2 b)))) (=> (do_checks__do_discriminant_check__r1__arr__pred1 a) (= (bool_eq (rec__do_checks__do_discriminant_check__r1__arr1 (us_split_fields3 a)) 1 10 (rec__do_checks__do_discriminant_check__r1__arr1 (us_split_fields3 b)) 1 10) true))) true false))
(define-fun in_range3 ((rec__do_checks__do_discriminant_check__r1__j1 Int) (a us_rep)) Bool (= rec__do_checks__do_discriminant_check__r1__j1 (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs1 a)))))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const do_checks__do_discriminant_check__r1__j__first__bit1 Int)
(declare-const do_checks__do_discriminant_check__r1__j__last__bit1 Int)
(declare-const do_checks__do_discriminant_check__r1__j__position1 Int)
(assert (<= 0 do_checks__do_discriminant_check__r1__j__first__bit1))
(assert (< do_checks__do_discriminant_check__r1__j__first__bit1 do_checks__do_discriminant_check__r1__j__last__bit1))
(assert (<= 0 do_checks__do_discriminant_check__r1__j__position1))
(declare-const do_checks__do_discriminant_check__r1__arr__first__bit1 Int)
(declare-const do_checks__do_discriminant_check__r1__arr__last__bit1 Int)
(declare-const do_checks__do_discriminant_check__r1__arr__position1 Int)
(assert (<= 0 do_checks__do_discriminant_check__r1__arr__first__bit1))
(assert (< do_checks__do_discriminant_check__r1__arr__first__bit1 do_checks__do_discriminant_check__r1__arr__last__bit1))
(assert (<= 0 do_checks__do_discriminant_check__r1__arr__position1))
(declare-fun user_eq6 (us_rep1 us_rep1) Bool)
(declare-const dummy6 us_rep1)
(declare-datatypes () ((r3__ref (mk_r3__ref (r3__content us_rep1)))))
(define-fun r3__ref___projection ((a r3__ref)) us_rep1 (r3__content a))
(define-fun dynamic_invariant1 ((temp___expr_527 us_rep1) (temp___is_init_524 Bool) (temp___skip_constant_525 Bool) (temp___do_toplevel_526 Bool)) Bool (=> (not (= temp___skip_constant_525 true)) (in_range3 10 (to_base temp___expr_527))))
(define-fun default_initial_assumption ((temp___expr_530 us_rep1) (temp___skip_top_level_531 Bool)) Bool (= (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs2 temp___expr_530))) 10))
(declare-const x us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const y__split_discrs us_split_discrs)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun dynamic_invariant2 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(assert (dynamic_invariant x true false true))
(assert (= 10 (to_rep (rec__do_checks__do_discriminant_check__r1__j y__split_discrs))))
(assert (not (in_range1 (to_rep (rec__do_checks__do_discriminant_check__r1__j (us_split_discrs1 x))))))
(check-sat)
(exit)
