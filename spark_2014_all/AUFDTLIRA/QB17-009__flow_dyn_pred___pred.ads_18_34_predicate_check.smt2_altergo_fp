(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type tvalue_arrayC

predicate in_range1(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tvalue_arrayC, tvalue_arrayC -> bool

logic dummy1 : tvalue_arrayC

type tvalue_arrayC__ref = { tvalue_arrayC__content : tvalue_arrayC
}

function tvalue_arrayC__ref___projection(a: tvalue_arrayC__ref) : tvalue_arrayC =
  (a).tvalue_arrayC__content

logic to_rep : tvalue_arrayC -> int

logic of_rep : int -> tvalue_arrayC

axiom inversion_axiom :
  (forall x:tvalue_arrayC [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:tvalue_arrayC [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,tvalue_arrayC) farray
}

logic slide : (int,tvalue_arrayC) farray, int,
  int -> (int,tvalue_arrayC) farray

axiom slide_eq :
  (forall a:(int,tvalue_arrayC) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,tvalue_arrayC) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,tvalue_arrayC) farray, int, int,
  (int,tvalue_arrayC) farray, int, int -> bool

axiom bool_eq_def2 :
  (forall a:(int,tvalue_arrayC) farray. forall a__first:int.
  forall a__last:int. forall b:(int,tvalue_arrayC) farray.
  forall b__first:int. forall b__last:int [bool_eq3(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,tvalue_arrayC) farray. forall b:(int,tvalue_arrayC) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic values : (int,tvalue_arrayC) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

type t1s

predicate in_range2(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : t1s, t1s -> bool

logic dummy2 : t1s

type t1s__ref = { t1s__content : t1s
}

function t1s__ref___projection(a: t1s__ref) : t1s = (a).t1s__content

logic to_rep1 : t1s -> int

logic of_rep1 : int -> t1s

axiom inversion_axiom1 :
  (forall x:t1s [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:t1s [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t2s

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : t2s, t2s -> bool

logic dummy3 : t2s

type t2s__ref = { t2s__content : t2s
}

function t2s__ref___projection(a: t2s__ref) : t2s = (a).t2s__content

logic to_rep2 : t2s -> int

logic of_rep2 : int -> t2s

axiom inversion_axiom2 :
  (forall x:t2s [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:t2s [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__pred__pair_type__left : t1s;
rec__pred__pair_type__right : t2s
}

function us_split_fields_Left__projection(a: us_split_fields) : t1s =
  (a).rec__pred__pair_type__left

function us_split_fields_Right__projection(a: us_split_fields) : t2s =
  (a).rec__pred__pair_type__right

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def5 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((to_rep1(((a).us_split_fields1).rec__pred__pair_type__left) = to_rep1(((b).us_split_fields1).rec__pred__pair_type__left)) and
  (to_rep2(((a).us_split_fields1).rec__pred__pair_type__right) = to_rep2(((b).us_split_fields1).rec__pred__pair_type__right))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields1).rec__pred__pair_type__left) = to_rep1(((b).us_split_fields1).rec__pred__pair_type__left)) and
  (to_rep2(((a).us_split_fields1).rec__pred__pair_type__right) = to_rep2(((b).us_split_fields1).rec__pred__pair_type__right)))) ->
  (bool_eq6(a, b) = false))))

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:t1s. forall a1:t2s. (0 <= object__size({ us_split_fields1 = {
  rec__pred__pair_type__left = a; rec__pred__pair_type__right = a1 } })))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:t1s. forall a1:t2s. (0 <= object__alignment({ us_split_fields1 =
  { rec__pred__pair_type__left = a; rec__pred__pair_type__right = a1 } })))

logic pred__pair_type__left__first__bit : int

logic pred__pair_type__left__last__bit : int

logic pred__pair_type__left__position : int

axiom pred__pair_type__left__first__bit_axiom :
  (0 <= pred__pair_type__left__first__bit)

axiom pred__pair_type__left__last__bit_axiom :
  (pred__pair_type__left__first__bit <  pred__pair_type__left__last__bit)

axiom pred__pair_type__left__position_axiom :
  (0 <= pred__pair_type__left__position)

logic pred__pair_type__right__first__bit : int

logic pred__pair_type__right__last__bit : int

logic pred__pair_type__right__position : int

axiom pred__pair_type__right__first__bit_axiom :
  (0 <= pred__pair_type__right__first__bit)

axiom pred__pair_type__right__last__bit_axiom :
  (pred__pair_type__right__first__bit <  pred__pair_type__right__last__bit)

axiom pred__pair_type__right__position_axiom :
  (0 <= pred__pair_type__right__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : t1s

logic dummy5 : t2s

type pair_type__ref = { pair_type__content : us_rep
}

function pair_type__ref___projection(a: pair_type__ref) : us_rep =
  (a).pair_type__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "pred.ads", line 21, characters 0-0 *)
goal WP_parameter_def :
  (forall values1:(int,tvalue_arrayC) farray. forall o:t2s. forall o1:t1s.
  forall o2:t1s. forall o3:t2s. forall temp___178:t1s.
  forall temp___1781:t2s. ((values1 = values) -> ((((to_rep2(o) = 1) and
  ((to_rep1(o1) = 0) and ((o1 = o2) and (o = o3)))) and
  ((temp___178 = o2) and (temp___1781 = o3))) ->
  (to_rep1(temp___178) <= to_rep((values[to_rep2(temp___1781)]))))))
