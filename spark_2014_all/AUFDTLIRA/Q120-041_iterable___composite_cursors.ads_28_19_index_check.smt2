(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort natural 0)
(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (natural natural) Bool)
(declare-const dummy natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep (natural) Int)
(declare-fun of_rep (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))
(assert (forall ((a (Array Int natural))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int natural))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int) (b (Array Int natural)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int natural)) (b (Array Int natural))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t5s 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (t5s t5s) Bool)
(declare-const dummy1 t5s)
(declare-datatypes () ((t5s__ref (mk_t5s__ref (t5s__content t5s)))))
(define-fun t5s__ref___projection ((a t5s__ref)) t5s (t5s__content a))
(declare-const dummy2 (Array Int natural))
(declare-const value__size Int)
(declare-fun object__size ((Array Int natural)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int natural)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int natural)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int natural))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int natural))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int natural) (Array Int natural)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__composite_cursors__cont1__content (Array Int natural)) (rec__composite_cursors__cont1__length natural)))))
(define-fun us_split_fields_Content__projection ((a us_split_fields)) (Array Int natural) (rec__composite_cursors__cont1__content a))
(define-fun us_split_fields_Length__projection ((a us_split_fields)) natural (rec__composite_cursors__cont1__length a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (bool_eq (rec__composite_cursors__cont1__content (us_split_fields1 a)) 1 100 (rec__composite_cursors__cont1__content (us_split_fields1 b)) 1 100) true) (= (to_rep (rec__composite_cursors__cont1__length (us_split_fields1 a))) (to_rep (rec__composite_cursors__cont1__length (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const composite_cursors__cont1__content__first__bit Int)
(declare-const composite_cursors__cont1__content__last__bit Int)
(declare-const composite_cursors__cont1__content__position Int)
(assert (<= 0 composite_cursors__cont1__content__first__bit))
(assert (< composite_cursors__cont1__content__first__bit composite_cursors__cont1__content__last__bit))
(assert (<= 0 composite_cursors__cont1__content__position))
(declare-const composite_cursors__cont1__length__first__bit Int)
(declare-const composite_cursors__cont1__length__last__bit Int)
(declare-const composite_cursors__cont1__length__position Int)
(assert (<= 0 composite_cursors__cont1__length__first__bit))
(assert (< composite_cursors__cont1__length__first__bit composite_cursors__cont1__length__last__bit))
(assert (<= 0 composite_cursors__cont1__length__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((cont1__ref (mk_cont1__ref (cont1__content us_rep)))))
(define-fun cont1__ref___projection ((a cont1__ref)) us_rep (cont1__content a))
(define-fun dynamic_invariant ((temp___expr_175 us_rep) (temp___is_init_171 Bool) (temp___skip_constant_172 Bool) (temp___do_toplevel_173 Bool) (temp___do_typ_inv_174 Bool)) Bool (=> (= temp___do_toplevel_173 true) (=> (= temp___is_init_171 true) (<= (to_rep (rec__composite_cursors__cont1__length (us_split_fields1 temp___expr_175))) 100))))
(define-fun dynamic_predicate ((temp___184 us_rep)) Bool (<= (to_rep (rec__composite_cursors__cont1__length (us_split_fields1 temp___184))) 100))
(declare-const i17s us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun has_element (us_rep (Array Int natural)) Bool)
(declare-fun has_element__function_guard (Bool us_rep (Array Int natural)) Bool)
(assert true)
(assert (forall ((c us_rep)) (forall ((p (Array Int natural))) (! (= (= (has_element c p) true) (and (<= 1 (to_rep (select p 1))) (<= (to_rep (select p 1)) (to_rep (rec__composite_cursors__cont1__length (us_split_fields1 c)))))) :pattern ((has_element c p))))))
(declare-const c us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const p (Array Int natural))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range temp___expr_39)))
(assert (<= (to_rep (rec__composite_cursors__cont1__length (us_split_fields1 i17s))) 100))
(assert (<= (to_rep (rec__composite_cursors__cont1__length (us_split_fields1 c))) 100))
(assert (= (has_element c p) true))
(assert (not (<= 1 (to_rep (select p 1)))))
(check-sat)
(exit)
