(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort tindexB 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (tindexB tindexB) Bool)
(declare-const dummy tindexB)
(declare-datatypes () ((tindexB__ref (mk_tindexB__ref (tindexB__content tindexB)))))
(define-fun tindexB__ref___projection ((a tindexB__ref)) tindexB (tindexB__content a))
(declare-sort index 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index index) Bool)
(declare-const dummy1 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-fun to_rep (index) Int)
(declare-fun of_rep (Int) index)
(assert (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x index)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort element 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (element element) Bool)
(declare-const dummy2 element)
(declare-datatypes () ((element__ref (mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content a))
(define-fun dynamic_invariant ((temp___expr_142 Int) (temp___is_init_139 Bool) (temp___skip_constant_140 Bool) (temp___do_toplevel_141 Bool)) Bool (=> (or (= temp___is_init_139 true) (<= (- 2147483648) 2147483647)) (in_range3 temp___expr_142)))
(declare-fun to_rep1 (element) Int)
(declare-fun of_rep1 (Int) element)
(assert (forall ((x element)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x element)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int element))))))
(declare-fun slide ((Array Int element) Int Int) (Array Int element))
(assert (forall ((a (Array Int element))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int element))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int element) Int Int (Array Int element) Int Int) (Array Int element))
(assert (forall ((a (Array Int element)) (b (Array Int element))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (element Int) (Array Int element))
(assert (forall ((v element)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int element)) (a__first Int) (a__last Int) (b (Array Int element)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int element)) (b (Array Int element))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep1 (select a temp___idx_132)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int element) Int Int (Array Int element) Int Int) Int)
(assert (forall ((a (Array Int element)) (b (Array Int element))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int element)) (b (Array Int element))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep1 (select a (+ i 1))) (to_rep1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int element)) (b (Array Int element))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep1 (select b (+ i 1))) (to_rep1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__linear_search__search_result__found Bool)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) Bool (rec__linear_search__search_result__found a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__linear_search__search_result__at_index index)))))
(define-fun us_split_fields_At_Index__projection ((a us_split_fields)) index (rec__linear_search__search_result__at_index a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun linear_search__search_result__at_index__pred ((a us_rep)) Bool (= (to_int1 (rec__linear_search__search_result__found (us_split_discrs1 a))) 1))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (rec__linear_search__search_result__found (us_split_discrs1 a)) (rec__linear_search__search_result__found (us_split_discrs1 b))) (=> (linear_search__search_result__at_index__pred a) (= (to_rep (rec__linear_search__search_result__at_index (us_split_fields1 a))) (to_rep (rec__linear_search__search_result__at_index (us_split_fields1 b)))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const linear_search__search_result__found__first__bit Int)
(declare-const linear_search__search_result__found__last__bit Int)
(declare-const linear_search__search_result__found__position Int)
(assert (<= 0 linear_search__search_result__found__first__bit))
(assert (< linear_search__search_result__found__first__bit linear_search__search_result__found__last__bit))
(assert (<= 0 linear_search__search_result__found__position))
(declare-const linear_search__search_result__at_index__first__bit Int)
(declare-const linear_search__search_result__at_index__last__bit Int)
(declare-const linear_search__search_result__at_index__position Int)
(assert (<= 0 linear_search__search_result__at_index__first__bit))
(assert (< linear_search__search_result__at_index__first__bit linear_search__search_result__at_index__last__bit))
(assert (<= 0 linear_search__search_result__at_index__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((search_result__ref (mk_search_result__ref (search_result__content us_rep)))))
(define-fun search_result__ref___projection ((a search_result__ref)) us_rep (search_result__content a))
(define-fun default_initial_assumption ((temp___expr_159 us_rep) (temp___skip_top_level_160 Bool)) Bool (and (= (attr__constrained temp___expr_159) false) (= (rec__linear_search__search_result__found (us_split_discrs1 temp___expr_159)) (of_int 0))))
(declare-fun value_found_in_range ((Array Int element) Int Int Int) Bool)
(declare-fun value_found_in_range__function_guard (Bool (Array Int element) Int Int Int) Bool)
(define-fun dynamic_invariant1 ((temp___expr_136 Int) (temp___is_init_133 Bool) (temp___skip_constant_134 Bool) (temp___do_toplevel_135 Bool)) Bool (=> (or (= temp___is_init_133 true) (<= 1 10)) (in_range2 temp___expr_136)))
(assert true)
(assert (forall ((a (Array Int element))) (forall ((val__ Int) (low Int) (up Int)) (! (= (= (value_found_in_range a val__ low up) true) (exists ((j Int)) (and (and (<= low j) (<= j up)) (= (to_rep1 (select a j)) val__)))) :pattern ((value_found_in_range a val__ low up))))))
(declare-const a (Array Int element))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const val__ Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const res__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun in_range4 ((rec__linear_search__search_result__found1 Bool) (a1 us_rep)) Bool (= rec__linear_search__search_result__found1 (rec__linear_search__search_result__found (us_split_discrs1 a1))))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a1 us_rep)) (<= 0 (object__size1 a1))))
(assert (<= 0 value__alignment1))
(assert (forall ((a1 us_rep)) (<= 0 (object__alignment1 a1))))
(declare-const linear_search__search_result__found__first__bit1 Int)
(declare-const linear_search__search_result__found__last__bit1 Int)
(declare-const linear_search__search_result__found__position1 Int)
(assert (<= 0 linear_search__search_result__found__first__bit1))
(assert (< linear_search__search_result__found__first__bit1 linear_search__search_result__found__last__bit1))
(assert (<= 0 linear_search__search_result__found__position1))
(declare-const linear_search__search_result__at_index__first__bit1 Int)
(declare-const linear_search__search_result__at_index__last__bit1 Int)
(declare-const linear_search__search_result__at_index__position1 Int)
(assert (<= 0 linear_search__search_result__at_index__first__bit1))
(assert (< linear_search__search_result__at_index__first__bit1 linear_search__search_result__at_index__last__bit1))
(assert (<= 0 linear_search__search_result__at_index__position1))
(declare-fun user_eq4 (us_rep us_rep) Bool)
(declare-const dummy4 us_rep)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content us_rep)))))
(define-fun t1b__ref___projection ((a1 t1b__ref)) us_rep (t1b__content a1))
(define-fun in_range5 ((rec__linear_search__search_result__found1 Bool) (a1 us_rep)) Bool (= rec__linear_search__search_result__found1 (rec__linear_search__search_result__found (us_split_discrs1 a1))))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a1 us_rep)) (<= 0 (object__size2 a1))))
(assert (<= 0 value__alignment2))
(assert (forall ((a1 us_rep)) (<= 0 (object__alignment2 a1))))
(declare-const linear_search__search_result__found__first__bit2 Int)
(declare-const linear_search__search_result__found__last__bit2 Int)
(declare-const linear_search__search_result__found__position2 Int)
(assert (<= 0 linear_search__search_result__found__first__bit2))
(assert (< linear_search__search_result__found__first__bit2 linear_search__search_result__found__last__bit2))
(assert (<= 0 linear_search__search_result__found__position2))
(declare-const linear_search__search_result__at_index__first__bit2 Int)
(declare-const linear_search__search_result__at_index__last__bit2 Int)
(declare-const linear_search__search_result__at_index__position2 Int)
(assert (<= 0 linear_search__search_result__at_index__first__bit2))
(assert (< linear_search__search_result__at_index__first__bit2 linear_search__search_result__at_index__last__bit2))
(assert (<= 0 linear_search__search_result__at_index__position2))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((t3b__ref (mk_t3b__ref (t3b__content us_rep)))))
(define-fun t3b__ref___projection ((a1 t3b__ref)) us_rep (t3b__content a1))
(declare-const pos Int)
(declare-const res__split_fields index)
(declare-const res__split_discrs Bool)
(declare-const linear_search__search__result Bool)
(declare-const linear_search__search__result1 index)
(declare-const linear_search__search__result2 Bool)
(declare-const temp___181 Bool)
(declare-const temp___1811 index)
(declare-const temp___1812 Bool)
(declare-const temp___180 Int)
(declare-const temp___182 Int)
(declare-const o Int)
(declare-const o1 element)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 index)
(declare-const o5 index)
(declare-const temp___177 Bool)
(declare-const temp___1771 index)
(declare-const temp___1772 Bool)
(declare-const usq_ Bool)
(declare-const usq_1 index)
(declare-const usq_2 Bool)
(declare-const temp___179 Bool)
(declare-const temp___1791 index)
(declare-const temp___1792 Bool)
(declare-const o6 Int)
(declare-const o7 Int)
(declare-const o8 Int)
(declare-const o9 element)
(declare-const o10 Int)
(declare-const o11 Int)
(declare-const o12 index)
(declare-const o13 us_split_fields)
(declare-const temp___1773 us_rep)
(declare-const usq_3 us_rep)
(declare-const temp___1793 us_rep)
(declare-const usq_4 us_rep)
(declare-const temp___185 us_rep)
(declare-const res__split_fields1 us_split_fields)
(declare-const res__split_discrs1 us_split_discrs)
(declare-const linear_search__search__result3 us_rep)
(declare-const result int__ref)
(declare-const pos1 Int)
(declare-const temp___1821 Int)
(declare-const result1 Bool)
(declare-const result2 us_split_fields__ref)
(declare-const res__split_fields2 us_split_fields)
(declare-const result3 us_split_discrs__ref)
(declare-const res__split_discrs2 us_split_discrs)
(declare-const result4 search_result__ref)
(declare-const linear_search__search__result4 us_rep)
(declare-const pos2 Int)
(declare-const res__split_fields3 us_split_fields)
(declare-const res__split_discrs3 us_split_discrs)
(declare-const linear_search__search__result5 us_rep)
(declare-const temp___1822 Int)
(declare-const result5 int__ref)
(declare-const temp___1823 Int)
(declare-const result6 int__ref)
(declare-const pos3 Int)
(declare-const result7 Bool)
(declare-const result8 us_split_fields__ref)
(declare-const res__split_fields4 us_split_fields)
(declare-const result9 us_split_discrs__ref)
(declare-const res__split_discrs4 us_split_discrs)
(declare-const result10 search_result__ref)
(declare-const linear_search__search__result6 us_rep)
(declare-const pos4 int__ref)
(declare-const res__split_fields5 us_split_fields__ref)
(declare-const res__split_discrs5 us_split_discrs__ref)
(declare-const linear_search__search__result7 search_result__ref)
(declare-const temp___1824 int__ref)
(declare-const pos5 Int)
(declare-const res__split_fields6 us_split_fields)
(declare-const res__split_discrs6 us_split_discrs)
(declare-const linear_search__search__result8 us_rep)
(declare-const temp___1825 Int)
(declare-const pos6 int__ref)
(declare-const res__split_fields7 us_split_fields__ref)
(declare-const res__split_discrs7 us_split_discrs__ref)
(declare-const linear_search__search__result9 search_result__ref)
(declare-const temp___1826 int__ref)
(declare-const pos7 Int)
(declare-const res__split_fields8 us_split_fields)
(declare-const res__split_discrs8 us_split_discrs)
(declare-const linear_search__search__result10 us_rep)
(declare-const temp___1827 Int)
(declare-const pos8 int__ref)
(declare-const res__split_fields9 us_split_fields__ref)
(declare-const res__split_discrs9 us_split_discrs__ref)
(declare-const linear_search__search__result11 search_result__ref)
(declare-const pos9 Int)
(declare-const res__split_fields10 us_split_fields)
(declare-const res__split_discrs10 us_split_discrs)
(declare-const linear_search__search__result12 us_rep)
(declare-const pos10 int__ref)
(declare-const res__split_fields11 us_split_fields__ref)
(declare-const res__split_discrs11 us_split_discrs__ref)
(declare-const linear_search__search__result13 search_result__ref)
(declare-const pos11 Int)
(declare-const res__split_fields12 us_split_fields)
(declare-const res__split_discrs12 us_split_discrs)
(declare-const linear_search__search__result14 us_rep)
(declare-const result11 us_split_fields__ref)
(declare-const res__split_fields13 us_split_fields)
(declare-const result12 us_split_discrs__ref)
(declare-const res__split_discrs13 us_split_discrs)
(declare-const result13 search_result__ref)
(declare-const linear_search__search__result15 us_rep)
(declare-const linear_search__search__result16 search_result__ref)
(declare-const linear_search__search__result17 us_rep)
(declare-const pos12 int__ref)
(declare-const res__split_fields14 us_split_fields__ref)
(declare-const res__split_discrs14 us_split_discrs__ref)
(declare-const linear_search__search__result18 search_result__ref)
(declare-const pos13 Int)
(declare-const res__split_fields15 us_split_fields)
(declare-const res__split_discrs15 us_split_discrs)
(declare-const linear_search__search__result19 us_rep)
(declare-const pos14 int__ref)
(declare-const res__split_fields16 us_split_fields__ref)
(declare-const res__split_discrs16 us_split_discrs__ref)
(declare-const linear_search__search__result20 search_result__ref)
(declare-const pos15 Int)
(declare-const res__split_fields17 us_split_fields)
(declare-const res__split_discrs17 us_split_discrs)
(declare-const linear_search__search__result21 us_rep)
(assert (in_range3 val__))
(assert (<= 0 val__))
(assert (= result (mk_int__ref pos)))
(assert (= pos1 1))
(assert (in_range1 pos1))
(assert (and (= res__attr__constrained false) (= res__split_discrs (of_int 0))))
(assert (<= pos1 10))
(assert (and (<= 1 pos1) (<= pos1 10)))
(assert (= o pos1))
(assert (= o1 (select a o)))
(assert (= o2 (to_rep1 o1)))
(assert (= result1 (ite (= o2 val__) true false)))
(assert (not (= result1 true)))
(assert (= linear_search__search__result4 (mk___rep (mk___split_discrs linear_search__search__result) (mk___split_fields linear_search__search__result1) linear_search__search__result2)))
(assert (= res__split_discrs2 (mk___split_discrs res__split_discrs)))
(assert (= res__split_fields2 (mk___split_fields res__split_fields)))
(assert (= linear_search__search__result4 linear_search__search__result3))
(assert (= res__split_discrs2 res__split_discrs1))
(assert (= res__split_fields2 res__split_fields1))
(assert (and (and (<= 1 pos2) (<= pos2 10)) (not (= (value_found_in_range a val__ 1 pos2) true))))
(assert (=> (<= (- 128) 127) (in_range1 pos2)))
(assert (= result5 (mk_int__ref temp___1822)))
(assert (= temp___1823 pos2))
(assert (and (= o7 (+ pos2 1)) (in_range1 (+ pos2 1))))
(assert (= result6 (mk_int__ref pos2)))
(assert (= pos3 o7))
(assert (<= pos3 10))
(assert (and (<= 1 pos3) (<= pos3 10)))
(assert (= o8 pos3))
(assert (= o9 (select a o8)))
(assert (= o10 (to_rep1 o9)))
(assert (= result7 (ite (= o10 val__) true false)))
(assert (not (= result7 true)))
(assert (= linear_search__search__result6 linear_search__search__result5))
(assert (= res__split_discrs4 res__split_discrs3))
(assert (= res__split_fields4 res__split_fields3))
(assert (not (<= 1 pos3)))
(check-sat)
(exit)
