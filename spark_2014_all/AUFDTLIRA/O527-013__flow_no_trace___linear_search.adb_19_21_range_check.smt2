(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index index) Bool)
(declare-const dummy index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 1 10)) (in_range1 temp___expr_159)))
(declare-fun to_rep (index) Int)
(declare-fun of_rep (Int) index)
(assert (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x index)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort element 0)
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (element element) Bool)
(declare-const dummy1 element)
(declare-datatypes () ((element__ref (mk_element__ref (element__content element)))))
(define-fun element__ref___projection ((a element__ref)) element (element__content a))
(define-fun dynamic_invariant1 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_166)))
(declare-fun to_rep1 (element) Int)
(declare-fun of_rep1 (Int) element)
(assert (forall ((x element)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x element)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int element))))))
(declare-fun slide ((Array Int element) Int Int) (Array Int element))
(assert (forall ((a (Array Int element))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int element))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int element)) (a__first Int) (a__last Int) (b (Array Int element)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int element)) (b (Array Int element))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__linear_search__search_result__found Bool) (rec__linear_search__search_result__at_index index)))))
(define-fun us_split_fields_Found__projection ((a us_split_fields)) Bool (rec__linear_search__search_result__found a))
(define-fun us_split_fields_At_Index__projection ((a us_split_fields)) index (rec__linear_search__search_result__at_index a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (rec__linear_search__search_result__found (us_split_fields1 a)) (rec__linear_search__search_result__found (us_split_fields1 b))) (= (to_rep (rec__linear_search__search_result__at_index (us_split_fields1 a))) (to_rep (rec__linear_search__search_result__at_index (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const linear_search__search_result__found__first__bit Int)
(declare-const linear_search__search_result__found__last__bit Int)
(declare-const linear_search__search_result__found__position Int)
(assert (<= 0 linear_search__search_result__found__first__bit))
(assert (< linear_search__search_result__found__first__bit linear_search__search_result__found__last__bit))
(assert (<= 0 linear_search__search_result__found__position))
(declare-const linear_search__search_result__at_index__first__bit Int)
(declare-const linear_search__search_result__at_index__last__bit Int)
(declare-const linear_search__search_result__at_index__position Int)
(assert (<= 0 linear_search__search_result__at_index__first__bit))
(assert (< linear_search__search_result__at_index__first__bit linear_search__search_result__at_index__last__bit))
(assert (<= 0 linear_search__search_result__at_index__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((search_result__ref (mk_search_result__ref (search_result__content us_rep)))))
(define-fun search_result__ref___projection ((a search_result__ref)) us_rep (search_result__content a))
(declare-const a (Array Int element))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const val__ Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const pos Int)
(declare-const result Int)
(declare-const pos1 Int)
(declare-const pos2 Int)
(declare-const res__split_fields Bool)
(declare-const res__split_fields1 index)
(declare-const linear_search__search__result Bool)
(declare-const linear_search__search__result1 index)
(declare-const res__split_fields2 Bool)
(declare-const res__split_fields3 index)
(declare-const linear_search__search__result2 Bool)
(declare-const linear_search__search__result3 index)
(assert (in_range2 val__))
(assert (= result pos))
(assert (= pos1 1))
(assert (in_range1 pos1))
(assert (< pos1 10))
(assert (and (=> (<= 1 10) (in_range1 pos2)) (< pos2 10)))
(assert (not (= (to_rep1 (select a pos2)) val__)))
(assert (= (mk___rep (mk___split_fields linear_search__search__result2 linear_search__search__result3)) (mk___rep (mk___split_fields linear_search__search__result linear_search__search__result1))))
(assert (= (mk___split_fields res__split_fields2 res__split_fields3) (mk___split_fields res__split_fields res__split_fields1)))
(assert (not (in_range1 (+ pos2 1))))
(check-sat)
(exit)
