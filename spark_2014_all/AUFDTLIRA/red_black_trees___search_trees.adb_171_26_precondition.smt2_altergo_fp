(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type tcount_typeB

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tcount_typeB, tcount_typeB -> bool

logic dummy1 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type index_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_type, index_type -> bool

logic dummy2 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq5 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : count_type, count_type -> bool

logic dummy4 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq3(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq3(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq3(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range4(length(container))))

type element_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : element_type, element_type -> bool

logic dummy5 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

type extended_index

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : extended_index, extended_index -> bool

logic dummy6 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position:int [get(container, position)]. ((in_range6(position) and
  ((1 <= position) and (position <= (0 + length(container))))) ->
  in_range5(get(container, position)))))

logic olt__function_guard : bool, us_rep, us_rep -> prop

logic ole__function_guard : bool, us_rep, us_rep -> prop

type us_split_fields = { rec__tree_model__path_type__a : us_rep;
rec__tree_model__path_type__k : bool
}

function us_split_fields_A__projection(a: us_split_fields) : us_rep =
  (a).rec__tree_model__path_type__a

function us_split_fields_K__projection(a: us_split_fields) : bool =
  (a).rec__tree_model__path_type__k

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq9 : us_rep1, us_rep1 -> bool

axiom bool_eq_def7 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq9(a, b)].
  ((((user_eq3(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k)) ->
  (bool_eq9(a, b) = true)) and
  ((not ((user_eq3(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k))) ->
  (bool_eq9(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__size1({ us_split_fields1 =
  { rec__tree_model__path_type__a = a; rec__tree_model__path_type__k = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__alignment1({
  us_split_fields1 = { rec__tree_model__path_type__a = a;
  rec__tree_model__path_type__k = a1 } })))

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep

logic dummy8 : bool

type path_type__ref = { path_type__content : us_rep1
}

function path_type__ref___projection(a: path_type__ref) : us_rep1 =
  (a).path_type__content

logic is_concat : us_rep, us_rep, us_rep -> bool

logic is_concat__function_guard : bool, us_rep, us_rep, us_rep -> prop

axiom is_concat__post_axiom : true

axiom is_concat__def_axiom :
  (forall q:us_rep. forall v:us_rep. forall p:us_rep [is_concat(q, v, p)].
  ((is_concat(q, v, p) = true) <->
  (((((length(p) - length(v)) = length(q)) and
  (forall i:int. (((1 <= i) and (i <= length(q))) -> (get(p, i) = get(q,
  i))))) and
  (forall i:int. (((1 <= i) and (i <= length(v))) -> (get(p,
  (i + length(q))) = get(v, i))))) and
  (forall i:int. ((((length(q) + 1) <= i) and (i <= length(p))) -> (get(v,
  (i - length(q))) = get(p, i)))))))

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def :
  (forall v:us_rep. forall v1:bool.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } },
  i)[i])]. ((singleton({ us_split_fields1 = { rec__tree_model__path_type__a =
  v; rec__tree_model__path_type__k = v1 } }, i)[i]) = { us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } })))

logic bool_eq10 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def8 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq10(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq9((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq9((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq10(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq9((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

type extended_index_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : extended_index_type, extended_index_type -> bool

logic dummy9 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep1 : extended_index_type -> int

logic of_rep1 : int -> extended_index_type

axiom inversion_axiom1 :
  (forall x:extended_index_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:extended_index_type [to_rep1(x)]. in_range7(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range7(x) ->
  (to_rep1(of_rep1(x)) = x)))

type position_type

predicate in_range8(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq9 : position_type, position_type -> bool

logic dummy10 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep2 : position_type -> int

logic of_rep2 : int -> position_type

axiom inversion_axiom2 :
  (forall x:position_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:position_type [to_rep2(x)]. in_range8(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range8(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields2 = { rec__binary_trees__cell__left :
extended_index_type; rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields2) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq13 : us_rep2, us_rep2 -> bool

axiom bool_eq_def11 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq13(a, b)].
  ((((((to_rep1(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep2(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep2(((b).us_split_fields3).rec__binary_trees__cell__position))) ->
  (bool_eq13(a, b) = true)) and
  ((not ((((to_rep1(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep2(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep2(((b).us_split_fields3).rec__binary_trees__cell__position)))) ->
  (bool_eq13(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size2({ us_split_fields3 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq10 : us_rep2, us_rep2 -> bool

logic dummy11 : extended_index_type

logic dummy12 : extended_index_type

logic dummy13 : extended_index_type

logic dummy14 : position_type

type cell__ref = { cell__content : us_rep2
}

function cell__ref___projection(a: cell__ref) : us_rep2 = (a).cell__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> (int,us_rep2) farray

axiom concat_def1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep2, int -> (int,us_rep2) farray

axiom singleton_def1 :
  (forall v:extended_index_type. forall v1:extended_index_type.
  forall v2:extended_index_type. forall v3:position_type.
  (forall i:int [(singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i])]. ((singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i]) = { us_split_fields3 = { rec__binary_trees__cell__left = v;
  rec__binary_trees__cell__right = v1; rec__binary_trees__cell__parent = v2;
  rec__binary_trees__cell__position = v3 } })))

logic bool_eq14 : (int,us_rep2) farray, int, int, (int,us_rep2) farray, int,
  int -> bool

axiom bool_eq_def12 :
  (forall a:(int,us_rep2) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep2) farray. forall b__first:int. forall b__last:int
  [bool_eq14(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq13((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq14(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq13((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq14(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq14(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq13((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic dummy15 : (int,us_rep2) farray

logic value__size3 : int

logic object__size3 : (int,us_rep2) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep2) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,us_rep2) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep2) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,us_rep2) farray. (0 <= object__alignment3(a)))

logic user_eq11 : (int,us_rep2) farray, (int,us_rep2) farray -> bool

type us_split_fields4 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep2) farray
}

function us_split_fields_S__projection(a: us_split_fields4) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields4) : (int,us_rep2) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq15 : us_rep3, us_rep3 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq15(a, b)].
  ((((to_rep1(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep1(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq14(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq15(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep1(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq14(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq15(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__size4({ us_split_fields5 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:extended_index_type. forall a1:(int,us_rep2) farray.
  (0 <= object__alignment4({ us_split_fields5 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq12 : us_rep3, us_rep3 -> bool

logic dummy16 : extended_index_type

logic dummy17 : (int,us_rep2) farray

type forest__ref = { forest__content : us_rep3
}

function forest__ref___projection(a: forest__ref) : us_rep3 =
  (a).forest__content

logic size : us_rep3 -> int

logic size__function_guard : int, us_rep3 -> prop

logic tree_structure : us_rep3 -> bool

logic tree_structure__function_guard : bool, us_rep3 -> prop

logic valid_root : us_rep3, int -> bool

logic valid_root__function_guard : bool, us_rep3, int -> prop

axiom valid_root__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall i:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. (((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range3(i)) -> ((size({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) <  i) -> (not (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = true))))))

logic model__ : us_rep3, int -> (int,us_rep1) farray

logic model____function_guard : (int,us_rep1) farray, us_rep3, int -> prop

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

logic parent : us_rep3, int -> int

logic parent__function_guard : int, us_rep3, int -> prop

logic position : us_rep3, int -> int

logic position__function_guard : int, us_rep3, int -> prop

axiom model____post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall root:int [model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range3(root)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root) = true)) -> ((((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) -> (is_add((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i), (((model__({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) -> (length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (j = i))))))))))) and
  (forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))))

type map__ref2 = { map__content2 : (int,natural) farray
}

logic slide2 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq2 :
  (forall a:(int,natural) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : natural, int -> (int,natural) farray

axiom singleton_def2 :
  (forall v:natural.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq16 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def14 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq16(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep((a[temp___idx_134])) = to_rep((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep((a[temp___idx_134])) = to_rep((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep((a[temp___idx_134])) = to_rep((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq16(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq16(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq16(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic ordered_leafs : us_rep3, int, (int,natural) farray -> bool

logic ordered_leafs__function_guard : bool, us_rep3, int,
  (int,natural) farray -> prop

axiom ordered_leafs__post_axiom : true

axiom ordered_leafs__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep2) farray.
  (forall root:int.
  (forall values:(int,natural) farray [ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root, values)]. (((ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root, values) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__k = true)) and
  ((bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
  (to_rep((values[j])) <  to_rep((values[i])))) and ((not (get((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (to_rep((values[i])) <  to_rep((values[j]))))))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (forall j:int. (((1 <= j) and (j <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   (((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) and
   (to_rep((values[j])) <  to_rep((values[i])))) or ((not (get((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) and
   (to_rep((values[i])) <  to_rep((values[j])))))))))) ->
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, root, values) = true))))))

logic f : extended_index_type

logic f1 : (int,us_rep2) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic f_old : extended_index_type

logic f_old1 : (int,us_rep2) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic root : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic v : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic values : (int,natural) farray

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

type direction

predicate in_range9(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : direction, direction -> bool

logic dummy18 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s1:us_rep. forall s2:us_rep.
  (forall d:int [is_add(s1, d, s2)]. (((is_add(s1, d, s2) = true) ->
  ((((length(s2) - 1) = length(s1)) and (((bool_lt(length(s1),
  length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false)))) and (get(s2, length(s2)) = d))) and
  (((((length(s2) - 1) = length(s1)) and ((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n)))))) and (get(s2, length(s2)) = d)) -> (is_add(s1, d,
  s2) = true)))))

axiom size__post_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep2) farray [size({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }) = true) -> in_range7(size({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }))))

axiom parent__post_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep2) farray.
  (forall i:int [parent({ us_split_fields5 = { rec__binary_trees__forest__s =
  f2; rec__binary_trees__forest__c = f3 } }, i)]. (((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }) = true) and in_range3(i)) ->
  ((((valid_root({ us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }, i) = true) -> (parent({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }, i) = 0)) and ((size({
  us_split_fields5 = { rec__binary_trees__forest__s = f2;
  rec__binary_trees__forest__c = f3 } }) = 0) -> (parent({ us_split_fields5 =
  { rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 } },
  i) = 0))) and in_range7(parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 } },
  i))))))

axiom position__post_axiom :
  (forall f2:extended_index_type. forall f3:(int,us_rep2) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 } },
  i)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 }
  }) = true) and in_range3(i)) and (not (parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 } },
  i) = 0))) -> in_range9(position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f2; rec__binary_trees__forest__c = f3 } },
  i)))))

axiom tree_structure__post_axiom : true

logic i : int

logic j : int

logic i1 : int

logic j1 : int

logic i2 : int

logic temp___1480 : (int,us_rep1) farray

logic o : us_rep

logic o1 : bool

logic o2 : us_rep

logic o3 : bool

logic temp___1477 : (int,us_rep1) farray

logic o4 : us_rep

logic o5 : bool

logic o6 : us_rep

logic o7 : bool

logic o8 : us_rep

logic temp___1478 : (int,us_rep1) farray

logic o9 : us_rep

logic o10 : bool

logic o11 : us_rep

logic o12 : bool

logic o13 : us_rep

logic temp___1479 : (int,us_rep1) farray

logic o14 : us_rep

logic o15 : bool

logic o16 : us_rep

logic o17 : bool

logic o18 : us_rep

logic i3 : int

logic temp___1487 : (int,us_rep1) farray

logic o19 : us_rep

logic o20 : bool

logic o21 : us_rep

logic o22 : bool

logic temp___1485 : (int,us_rep1) farray

logic temp___1486 : (int,us_rep1) farray

logic o23 : us_rep

logic o24 : bool

logic o25 : us_rep

logic o26 : bool

logic o27 : us_rep

logic i4 : int

logic temp___1492 : (int,us_rep1) farray

logic o28 : us_rep

logic o29 : bool

logic o30 : us_rep

logic o31 : bool

logic temp___1491 : (int,us_rep1) farray

logic i5 : int

logic temp___1496 : (int,us_rep1) farray

logic o32 : us_rep

logic o33 : bool

logic o34 : us_rep

logic o35 : bool

logic temp___1495 : (int,us_rep1) farray

logic i6 : int

logic temp___1503 : (int,us_rep1) farray

logic o36 : us_rep

logic o37 : bool

logic o38 : us_rep

logic o39 : bool

logic temp___1501 : (int,us_rep1) farray

logic o40 : us_rep

logic o41 : bool

logic o42 : us_rep

logic o43 : bool

logic o44 : us_rep

logic temp___1502 : (int,us_rep1) farray

logic o45 : us_rep

logic o46 : bool

logic o47 : us_rep

logic o48 : bool

logic o49 : us_rep

logic temp___1499 : (int,us_rep1) farray

logic temp___1500 : (int,us_rep1) farray

logic temp___1509 : (int,us_rep1) farray

logic o50 : us_rep

logic o51 : bool

logic o52 : us_rep

logic o53 : bool

logic o54 : bool

logic temp___1326 : int

logic k : int

logic j2 : int

logic temp___1331 : (int,us_rep1) farray

logic o55 : int

logic o56 : us_rep

logic o57 : bool

logic o58 : us_rep

logic o59 : bool

logic o60 : us_rep

logic temp___1332 : (int,us_rep1) farray

logic o61 : us_rep

logic o62 : bool

logic o63 : us_rep

logic o64 : bool

logic o65 : us_rep

logic temp___1330 : (int,us_rep1) farray

logic o66 : us_rep

logic o67 : bool

logic o68 : us_rep

logic o69 : bool

logic temp___1329 : (int,us_rep1) farray

logic o70 : int

logic o71 : us_rep

logic o72 : bool

logic o73 : us_rep

logic o74 : bool

logic temp___1327 : (int,us_rep1) farray

logic o75 : us_rep

logic o76 : bool

logic o77 : us_rep

logic o78 : bool

logic o79 : us_rep

logic temp___1328 : (int,us_rep1) farray

logic o80 : int

logic o81 : us_rep

logic o82 : bool

logic o83 : us_rep

logic o84 : bool

logic o85 : us_rep

logic o86 : int

logic o87 : int

logic o88 : int

logic o89 : int

logic temp___1305 : int

logic temp___1295 : (int,us_rep1) farray

logic o90 : us_rep

logic o91 : bool

logic o92 : us_rep

logic o93 : bool

logic o94 : us_rep

logic temp___1296 : (int,us_rep1) farray

logic o95 : us_rep

logic o96 : bool

logic o97 : us_rep

logic o98 : bool

logic o99 : us_rep

logic temp___1294 : (int,us_rep1) farray

logic o100 : us_rep

logic o101 : bool

logic o102 : us_rep

logic o103 : bool

logic temp___1293 : (int,us_rep1) farray

logic o104 : us_rep

logic o105 : bool

logic o106 : us_rep

logic o107 : bool

logic temp___1297 : (int,us_rep1) farray

logic temp___1298 : (int,us_rep1) farray

logic o108 : us_rep

logic o109 : bool

logic o110 : us_rep

logic o111 : bool

logic o112 : us_rep

logic temp___1301 : (int,us_rep1) farray

logic o113 : us_rep

logic o114 : bool

logic o115 : us_rep

logic o116 : bool

logic o117 : us_rep

logic temp___1302 : (int,us_rep1) farray

logic o118 : us_rep

logic o119 : bool

logic o120 : us_rep

logic o121 : bool

logic o122 : us_rep

logic o123 : int

logic o124 : int

logic o125 : int

logic o126 : int

logic k1 : int

logic temp___1310 : (int,us_rep1) farray

logic o127 : us_rep

logic o128 : bool

logic o129 : us_rep

logic o130 : bool

logic o131 : us_rep

logic temp___1311 : (int,us_rep1) farray

logic o132 : int

logic o133 : us_rep

logic o134 : bool

logic o135 : us_rep

logic o136 : bool

logic o137 : us_rep

logic temp___1309 : (int,us_rep1) farray

logic o138 : int

logic o139 : us_rep

logic o140 : bool

logic o141 : us_rep

logic o142 : bool

logic temp___1308 : (int,us_rep1) farray

logic o143 : us_rep

logic o144 : bool

logic o145 : us_rep

logic o146 : bool

logic temp___1306 : (int,us_rep1) farray

logic o147 : int

logic o148 : us_rep

logic o149 : bool

logic o150 : us_rep

logic o151 : bool

logic o152 : us_rep

logic temp___1307 : (int,us_rep1) farray

logic o153 : us_rep

logic o154 : bool

logic o155 : us_rep

logic o156 : bool

logic o157 : us_rep

logic o158 : int

logic o159 : int

logic o160 : int

logic o161 : int

logic temp___12951 : (int,us_rep1) farray

logic o162 : us_rep

logic o163 : bool

logic o164 : us_rep

logic o165 : bool

logic o166 : us_rep

logic temp___12961 : (int,us_rep1) farray

logic o167 : us_rep

logic o168 : bool

logic o169 : us_rep

logic o170 : bool

logic o171 : us_rep

logic temp___12941 : (int,us_rep1) farray

logic o172 : us_rep

logic o173 : bool

logic o174 : us_rep

logic o175 : bool

logic temp___12931 : (int,us_rep1) farray

logic o176 : us_rep

logic o177 : bool

logic o178 : us_rep

logic o179 : bool

logic temp___12971 : (int,us_rep1) farray

logic temp___12981 : (int,us_rep1) farray

logic o180 : us_rep

logic o181 : bool

logic o182 : us_rep

logic o183 : bool

logic o184 : us_rep

logic temp___13011 : (int,us_rep1) farray

logic o185 : us_rep

logic o186 : bool

logic o187 : us_rep

logic o188 : bool

logic o189 : us_rep

logic temp___13021 : (int,us_rep1) farray

logic o190 : us_rep

logic o191 : bool

logic o192 : us_rep

logic o193 : bool

logic o194 : us_rep

logic o195 : int

logic o196 : int

logic o197 : int

logic o198 : int

logic k2 : int

logic j3 : int

logic temp___1357 : (int,us_rep1) farray

logic o199 : us_rep

logic o200 : bool

logic o201 : us_rep

logic o202 : bool

logic o203 : us_rep

logic temp___1358 : (int,us_rep1) farray

logic o204 : us_rep

logic o205 : bool

logic o206 : us_rep

logic o207 : bool

logic o208 : us_rep

logic temp___1356 : (int,us_rep1) farray

logic o209 : us_rep

logic o210 : bool

logic o211 : us_rep

logic o212 : bool

logic temp___1355 : (int,us_rep1) farray

logic o213 : us_rep

logic o214 : bool

logic o215 : us_rep

logic o216 : bool

logic temp___1353 : (int,us_rep1) farray

logic o217 : us_rep

logic o218 : bool

logic o219 : us_rep

logic o220 : bool

logic o221 : us_rep

logic temp___1354 : (int,us_rep1) farray

logic o222 : us_rep

logic o223 : bool

logic o224 : us_rep

logic o225 : bool

logic o226 : us_rep

logic o227 : int

logic o228 : int

logic o229 : int

logic o230 : int

logic us : bool

logic temp___1410 : int

logic k3 : int

logic j4 : int

logic temp___1415 : (int,us_rep1) farray

logic o231 : int

logic o232 : us_rep

logic o233 : bool

logic o234 : us_rep

logic o235 : bool

logic o236 : us_rep

logic temp___1416 : (int,us_rep1) farray

logic o237 : us_rep

logic o238 : bool

logic o239 : us_rep

logic o240 : bool

logic o241 : us_rep

logic temp___1414 : (int,us_rep1) farray

logic o242 : us_rep

logic o243 : bool

logic o244 : us_rep

logic o245 : bool

logic temp___1413 : (int,us_rep1) farray

logic o246 : int

logic o247 : us_rep

logic o248 : bool

logic o249 : us_rep

logic o250 : bool

logic temp___1411 : (int,us_rep1) farray

logic o251 : us_rep

logic o252 : bool

logic o253 : us_rep

logic o254 : bool

logic o255 : us_rep

logic temp___1412 : (int,us_rep1) farray

logic o256 : int

logic o257 : us_rep

logic o258 : bool

logic o259 : us_rep

logic o260 : bool

logic o261 : us_rep

logic o262 : int

logic o263 : int

logic o264 : int

logic o265 : int

logic temp___1389 : int

logic temp___1379 : (int,us_rep1) farray

logic o266 : us_rep

logic o267 : bool

logic o268 : us_rep

logic o269 : bool

logic o270 : us_rep

logic temp___1380 : (int,us_rep1) farray

logic o271 : us_rep

logic o272 : bool

logic o273 : us_rep

logic o274 : bool

logic o275 : us_rep

logic temp___1378 : (int,us_rep1) farray

logic o276 : us_rep

logic o277 : bool

logic o278 : us_rep

logic o279 : bool

logic temp___1377 : (int,us_rep1) farray

logic o280 : us_rep

logic o281 : bool

logic o282 : us_rep

logic o283 : bool

logic temp___1381 : (int,us_rep1) farray

logic temp___1382 : (int,us_rep1) farray

logic o284 : us_rep

logic o285 : bool

logic o286 : us_rep

logic o287 : bool

logic o288 : us_rep

logic temp___1385 : (int,us_rep1) farray

logic o289 : us_rep

logic o290 : bool

logic o291 : us_rep

logic o292 : bool

logic o293 : us_rep

logic temp___1386 : (int,us_rep1) farray

logic o294 : us_rep

logic o295 : bool

logic o296 : us_rep

logic o297 : bool

logic o298 : us_rep

logic o299 : int

logic o300 : int

logic o301 : int

logic o302 : int

logic k4 : int

logic temp___1394 : (int,us_rep1) farray

logic o303 : us_rep

logic o304 : bool

logic o305 : us_rep

logic o306 : bool

logic o307 : us_rep

logic temp___1395 : (int,us_rep1) farray

logic o308 : int

logic o309 : us_rep

logic o310 : bool

logic o311 : us_rep

logic o312 : bool

logic o313 : us_rep

logic temp___1393 : (int,us_rep1) farray

logic o314 : int

logic o315 : us_rep

logic o316 : bool

logic o317 : us_rep

logic o318 : bool

logic temp___1392 : (int,us_rep1) farray

logic o319 : us_rep

logic o320 : bool

logic o321 : us_rep

logic o322 : bool

logic temp___1390 : (int,us_rep1) farray

logic o323 : int

logic o324 : us_rep

logic o325 : bool

logic o326 : us_rep

logic o327 : bool

logic o328 : us_rep

logic temp___1391 : (int,us_rep1) farray

logic o329 : us_rep

logic o330 : bool

logic o331 : us_rep

logic o332 : bool

logic o333 : us_rep

logic o334 : int

logic o335 : int

logic o336 : int

logic o337 : int

logic temp___13791 : (int,us_rep1) farray

logic o338 : us_rep

logic o339 : bool

logic o340 : us_rep

logic o341 : bool

logic o342 : us_rep

logic temp___13801 : (int,us_rep1) farray

logic o343 : us_rep

logic o344 : bool

logic o345 : us_rep

logic o346 : bool

logic o347 : us_rep

logic temp___13781 : (int,us_rep1) farray

logic o348 : us_rep

logic o349 : bool

logic o350 : us_rep

logic o351 : bool

logic temp___13771 : (int,us_rep1) farray

logic o352 : us_rep

logic o353 : bool

logic o354 : us_rep

logic o355 : bool

logic temp___13811 : (int,us_rep1) farray

logic temp___13821 : (int,us_rep1) farray

logic o356 : us_rep

logic o357 : bool

logic o358 : us_rep

logic o359 : bool

logic o360 : us_rep

logic temp___13851 : (int,us_rep1) farray

logic o361 : us_rep

logic o362 : bool

logic o363 : us_rep

logic o364 : bool

logic o365 : us_rep

logic temp___13861 : (int,us_rep1) farray

logic o366 : us_rep

logic o367 : bool

logic o368 : us_rep

logic o369 : bool

logic o370 : us_rep

logic o371 : int

logic o372 : int

logic o373 : int

logic o374 : int

logic k5 : int

logic j5 : int

logic temp___1441 : (int,us_rep1) farray

logic o375 : us_rep

logic o376 : bool

logic o377 : us_rep

logic o378 : bool

logic o379 : us_rep

logic temp___1442 : (int,us_rep1) farray

logic o380 : us_rep

logic o381 : bool

logic o382 : us_rep

logic o383 : bool

logic o384 : us_rep

logic temp___1440 : (int,us_rep1) farray

logic o385 : us_rep

logic o386 : bool

logic o387 : us_rep

logic o388 : bool

logic temp___1439 : (int,us_rep1) farray

logic o389 : us_rep

logic o390 : bool

logic o391 : us_rep

logic o392 : bool

logic temp___1437 : (int,us_rep1) farray

logic o393 : us_rep

logic o394 : bool

logic o395 : us_rep

logic o396 : bool

logic o397 : us_rep

logic temp___1438 : (int,us_rep1) farray

logic o398 : us_rep

logic o399 : bool

logic o400 : us_rep

logic o401 : bool

logic o402 : us_rep

logic o403 : int

logic o404 : int

logic o405 : int

logic o406 : int

logic us1 : bool

logic i7 : int

logic temp___1467 : (int,us_rep1) farray

logic o407 : us_rep

logic o408 : bool

logic o409 : us_rep

logic o410 : bool

logic temp___1468 : (int,us_rep1) farray

logic o411 : us_rep

logic o412 : bool

logic o413 : us_rep

logic o414 : bool

logic o415 : us_rep

logic temp___1469 : (int,us_rep1) farray

logic o416 : us_rep

logic o417 : bool

logic o418 : us_rep

logic o419 : bool

logic o420 : us_rep

logic o421 : bool

logic o422 : bool

logic temp___1465 : (int,us_rep1) farray

logic o423 : us_rep

logic o424 : bool

logic o425 : us_rep

logic o426 : bool

logic o427 : us_rep

logic temp___1466 : (int,us_rep1) farray

logic o428 : us_rep

logic o429 : bool

logic o430 : us_rep

logic o431 : bool

logic o432 : us_rep

logic o433 : int

logic o434 : int

logic o435 : int

logic o436 : int

logic j6 : int

logic temp___1461 : (int,us_rep1) farray

logic j7 : int

logic temp___1463 : (int,us_rep1) farray

logic j8 : int

logic j9 : int

logic result : bool

logic result1 : bool

logic result2 : bool

logic result3 : bool

logic result4 : bool

logic result5 : bool

logic result6 : bool

logic result7 : bool

logic result8 : bool

logic result9 : bool

logic result10 : bool

logic result11 : bool

logic result12 : bool

logic result13 : bool

logic result14 : bool

logic result15 : bool

logic result16 : int

logic i8 : int

logic i9 : int

logic j10 : int

logic result17 : bool

logic result18 : bool

logic result19 : bool

logic result20 : bool

logic result21 : int

logic j11 : int

logic result22 : bool

logic result23 : bool

logic result24 : bool

logic j12 : int

logic result25 : bool

logic result26 : bool

logic result27 : bool

logic result28 : bool

logic result29 : int

logic j13 : int

logic result30 : bool

logic result31 : bool

logic result32 : bool

logic j14 : int

logic j15 : int

logic j16 : int

logic j17 : int

logic j18 : int

logic j19 : int

logic result33 : int

logic i10 : int

logic i11 : int

logic j20 : int

logic i12 : int

logic j21 : int

logic i13 : int

logic j22 : int

logic i14 : int

logic j23 : int

logic i15 : int

logic j24 : int

logic i16 : int

logic j25 : int

logic i17 : int

logic j26 : int

logic i18 : int

logic j27 : int

logic result34 : bool

logic result35 : bool

logic result36 : bool

logic result37 : int

logic i19 : int

logic i20 : int

logic j28 : int

logic result38 : bool

logic result39 : bool

logic result40 : bool

logic result41 : bool

logic result42 : int

logic j29 : int

logic result43 : bool

logic result44 : bool

logic result45 : bool

logic j30 : int

logic result46 : bool

logic result47 : bool

logic result48 : bool

logic result49 : bool

logic result50 : int

logic j31 : int

logic result51 : bool

logic result52 : bool

logic result53 : bool

logic j32 : int

logic j33 : int

logic j34 : int

logic j35 : int

logic j36 : int

logic j37 : int

logic j38 : int

logic j39 : int

logic result54 : int

logic i21 : int

logic i22 : int

logic j40 : int

logic i23 : int

logic j41 : int

logic i24 : int

logic j42 : int

logic i25 : int

logic j43 : int

logic i26 : int

logic j44 : int

logic i27 : int

logic j45 : int

logic i28 : int

logic j46 : int

logic i29 : int

logic j47 : int

logic result55 : bool

logic result56 : bool

logic result57 : bool

logic i30 : int

logic j48 : int

logic i31 : int

logic j49 : int

logic i32 : int

logic j50 : int

logic i33 : int

logic j51 : int

logic result58 : bool

logic result59 : bool

logic result60 : bool

logic result61 : bool

axiom H : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true)

axiom H1 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c = f_old1
  } }) = true)

axiom H2 : in_range3(root)

axiom H3 : in_range3(v)

axiom H4 : ((valid_root({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } }, root) = true) and
  ((valid_root({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, root) = true) and ((valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, v) = true) and ((not (valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old;
  rec__binary_trees__forest__c = f_old1 } }, v) = true)) and (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old;
  rec__binary_trees__forest__c = f_old1 } },
  root)[v])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } }, root, values) = true) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old;
   rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c =
   f_old1 } }, root)[v])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old;
   rec__binary_trees__forest__c = f_old1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a, n))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not (((bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c =
   f_old1 } }, root)[v])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f_old;
   rec__binary_trees__forest__c = f_old1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } },
   root)[v])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c =
   f_old1 } }, root)[v])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f_old;
   rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> (((not (v = 0)) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f_old;
   rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (((bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a)) = false)))))) and
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) -> (((not (v = 0)) and
  ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
  (is_concat((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } },
  root)[v])).us_split_fields1).rec__tree_model__path_type__a, (((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[i34])).us_split_fields1).rec__tree_model__path_type__a, (((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old;
  rec__binary_trees__forest__c = f_old1 } },
  root)[i34])).us_split_fields1).rec__tree_model__path_type__a) = true))))))))))))))

axiom H5 : (((((result16 = i) and (i8 = 1)) and ((((1 <= i8) and
  (i8 <= 100)) -> ((((temp___1326 = i8) and
  ((forall k6:int. (((1 <= k6) and (k6 <= (i9 - 1))) ->
   (forall j52:int. (((1 <= j52) and (j52 <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
   (to_rep((values[j52])) <  to_rep((values[k6])))) and
   ((not (get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
   (to_rep((values[k6])) <  to_rep((values[j52])))))))))) and
  ((((1 <= 100) -> in_range3(i9)) and ((1 <= i9) and (i9 <= 100))) and
  ((((result21 = j10) and (j11 = 1)) and ((((1 <= j11) and (j11 <= 100)) ->
  ((((temp___1305 = j11) and (((((((((temp___1293 = model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1293[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1293[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1293[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> ((not (i34 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1293[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1293[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1293[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1293[i34])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (((((((temp___1293[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = root))) -> (is_add((((temp___1293[parent({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34),
   (((temp___1293[i34])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1293[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = root)))) ->
   (length((((temp___1293[i34])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (((((temp___1293[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) ->
  ((((((temp___1293[j52])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1293[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1293[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1293[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1293[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1293[j52])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j52 = i34))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o104; rec__tree_model__path_type__k = o105
  } } = (temp___1293[i9]))) and ((o106 = o104) and (o107 = o105))) and
  (result24 = o107)) and (((result24 = true) -> (((((temp___1294 = model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1294[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1294[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1294[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> ((not (i34 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1294[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1294[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1294[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1294[i34])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (((((((temp___1294[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = root))) -> (is_add((((temp___1294[parent({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34),
   (((temp___1294[i34])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1294[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = root)))) ->
   (length((((temp___1294[i34])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (((((temp___1294[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) ->
  ((((((temp___1294[j52])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1294[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1294[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1294[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1294[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1294[j52])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j52 = i34))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o100; rec__tree_model__path_type__k = o101
  } } = (temp___1294[j11]))) and ((o102 = o100) and (o103 = o101))) and
  (result23 = o103))) and ((not (result24 = true)) ->
  (result23 = false)))) and (((result23 = true) ->
  ((((((temp___1296 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1296[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1296[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1296[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> ((not (i34 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1296[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1296[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1296[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1296[i34])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (((((((temp___1296[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = root))) -> (is_add((((temp___1296[parent({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34),
   (((temp___1296[i34])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1296[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = root)))) ->
   (length((((temp___1296[i34])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (((((temp___1296[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) ->
  ((((((temp___1296[j52])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1296[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1296[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1296[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1296[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1296[j52])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j52 = i34))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o95; rec__tree_model__path_type__k = o96 }
  } = (temp___1296[j11]))) and ((o97 = o95) and (o98 = o96))) and
  (o99 = o97)) and ((((((temp___1295 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1295[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1295[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1295[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> ((not (i34 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1295[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1295[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1295[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1295[i34])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (((((((temp___1295[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = root))) -> (is_add((((temp___1295[parent({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34),
   (((temp___1295[i34])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1295[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = root)))) ->
   (length((((temp___1295[i34])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (((((temp___1295[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) ->
  ((((((temp___1295[j52])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1295[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1295[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1295[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1295[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1295[j52])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j52 = i34))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o90; rec__tree_model__path_type__k = o91 }
  } = (temp___1295[i9]))) and ((o92 = o90) and (o93 = o91))) and
  (o94 = o92)) and
  ((((forall n:int. (((1 <= n) and (n <= (0 + length(o94)))) -> (get(o94,
     n) = get(o99, n)))) -> (result22 = match_bool(bool_lt(length(o94),
  length(o99)), true, false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(o94)))) -> (get(o94,
        n) = get(o99, n))))) -> (result22 = match_bool(bool_lt(length(o94),
  length(o99)), false, false)))) and ((result22 = true) <->
  ((length(o94) <  length(o99)) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(o94)))) -> (get(o94,
  n) = get(o99, n)))))))))) and ((not (result23 = true)) ->
  (result22 = false)))) and ((result22 = true) ->
  ((((bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c = f_old1
  } }, root)[i9])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } },
  root)[j11])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old;
  rec__binary_trees__forest__c = f_old1 } },
  root)[i9])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } },
  root)[i9])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } },
  root)[j11])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
  (not (bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c = f_old1
  } }, root)[i9])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } },
  root)[j11])).us_split_fields1).rec__tree_model__path_type__a)) = false))) and
  (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j11])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i9])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
  (to_rep((values[j11])) <  to_rep((values[i9])))) and
  ((not (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j11])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i9])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (to_rep((values[i9])) <  to_rep((values[j11])))))))) and
  ((forall k6:int. (((1 <= k6) and (k6 <= j12)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i9])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i9])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i9])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i9])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i9])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
   (to_rep((values[k6])) <  to_rep((values[i9])))) and
   ((not (get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i9])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
   (to_rep((values[i9])) <  to_rep((values[k6])))))))) and ((((1 <= 100) ->
  in_range3(j12)) and ((1 <= j12) and (j12 <= 100))) and (j12 = 100))))) and
  ((j16 = j12) and (j17 = j12))) and ((j18 = j16) and (j19 = j17)))) and
  ((not ((1 <= j11) and (j11 <= 100))) -> ((j18 = j11) and
  (j19 = j11))))) and (i9 = 100))))) and (((j24 = j18) and (i15 = i9)) and
  ((j25 = j19) and (i16 = i9)))) and (((j26 = j24) and (i17 = i15)) and
  ((j27 = j25) and (i18 = i16))))) and ((not ((1 <= i8) and (i8 <= 100))) ->
  (((j26 = j) and (i17 = i8)) and ((j27 = j8) and (i18 = i8)))))) and
  ((forall k6:int. (((1 <= k6) and (k6 <= 100)) ->
   (forall j52:int. (((1 <= j52) and (j52 <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
   (to_rep((values[j52])) <  to_rep((values[k6])))) and
   ((not (get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[k6])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
   (to_rep((values[k6])) <  to_rep((values[j52])))))))))) and
  ((ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, root, values) = true) and
  ((((result37 = i1) and (i19 = 1)) and ((((1 <= i19) and (i19 <= 100)) ->
  ((((temp___1410 = i19) and
  ((forall k6:int. (((1 <= k6) and (k6 <= (i20 - 1))) ->
   (forall j52:int. (((1 <= j52) and (j52 <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
   (to_rep((values[j52])) <  to_rep((values[k6])))) and
   ((not (get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
   (to_rep((values[k6])) <  to_rep((values[j52])))))))))) and
  ((((1 <= 100) -> in_range3(i20)) and ((1 <= i20) and (i20 <= 100))) and
  ((((result42 = j28) and (j29 = 1)) and ((((1 <= j29) and (j29 <= 100)) ->
  ((((temp___1389 = j29) and (((((((((temp___1377 = model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, v)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1377[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1377[v])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1377[v])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> ((not (i34 = v)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1377[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1377[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1377[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1377[i34])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (((((((temp___1377[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = v))) -> (is_add((((temp___1377[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34),
   (((temp___1377[i34])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1377[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = v)))) ->
   (length((((temp___1377[i34])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (((((temp___1377[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) ->
  ((((((temp___1377[j52])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1377[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1377[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1377[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1377[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1377[j52])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j52 = i34))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o280; rec__tree_model__path_type__k = o281
  } } = (temp___1377[i20]))) and ((o282 = o280) and (o283 = o281))) and
  (result45 = o283)) and (((result45 = true) -> (((((temp___1378 = model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, v)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1378[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1378[v])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1378[v])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> ((not (i34 = v)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1378[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1378[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1378[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1378[i34])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (((((((temp___1378[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = v))) -> (is_add((((temp___1378[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34),
   (((temp___1378[i34])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1378[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = v)))) ->
   (length((((temp___1378[i34])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (((((temp___1378[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) ->
  ((((((temp___1378[j52])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1378[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1378[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1378[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1378[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1378[j52])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j52 = i34))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o276; rec__tree_model__path_type__k = o277
  } } = (temp___1378[j29]))) and ((o278 = o276) and (o279 = o277))) and
  (result44 = o279))) and ((not (result45 = true)) ->
  (result44 = false)))) and (((result44 = true) ->
  ((((((temp___1380 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  v)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1380[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1380[v])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1380[v])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> ((not (i34 = v)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1380[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1380[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1380[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1380[i34])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (((((((temp___1380[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = v))) -> (is_add((((temp___1380[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34),
   (((temp___1380[i34])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1380[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = v)))) ->
   (length((((temp___1380[i34])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (((((temp___1380[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) ->
  ((((((temp___1380[j52])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1380[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1380[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1380[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1380[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1380[j52])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j52 = i34))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o271; rec__tree_model__path_type__k = o272
  } } = (temp___1380[j29]))) and ((o273 = o271) and (o274 = o272))) and
  (o275 = o273)) and ((((((temp___1379 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  v)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1379[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1379[v])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1379[v])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> ((not (i34 = v)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1379[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1379[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i34) = 0)) and
   ((((temp___1379[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1379[i34])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (((((((temp___1379[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = v))) -> (is_add((((temp___1379[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i34),
   (((temp___1379[i34])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1379[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = v)))) ->
   (length((((temp___1379[i34])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (((((temp___1379[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) ->
  ((((((temp___1379[j52])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1379[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1379[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1379[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1379[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1379[j52])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j52 = i34))))))))))))) and ({ us_split_fields1 = {
  rec__tree_model__path_type__a = o266; rec__tree_model__path_type__k = o267
  } } = (temp___1379[i20]))) and ((o268 = o266) and (o269 = o267))) and
  (o270 = o268)) and
  ((((forall n:int. (((1 <= n) and (n <= (0 + length(o270)))) -> (get(o270,
     n) = get(o275, n)))) -> (result43 = match_bool(bool_lt(length(o270),
  length(o275)), true, false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(o270)))) ->
        (get(o270, n) = get(o275, n))))) ->
  (result43 = match_bool(bool_lt(length(o270), length(o275)), false,
  false)))) and ((result43 = true) <-> ((length(o270) <  length(o275)) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(o270)))) -> (get(o270,
  n) = get(o275, n)))))))))) and ((not (result44 = true)) ->
  (result43 = false)))) and ((result43 = true) ->
  ((((bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c = f_old1
  } }, root)[i20])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } },
  root)[j29])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_old;
  rec__binary_trees__forest__c = f_old1 } },
  root)[i20])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } },
  root)[i20])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } },
  root)[j29])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
  (not (bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c = f_old1
  } }, root)[i20])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old; rec__binary_trees__forest__c = f_old1 } },
  root)[j29])).us_split_fields1).rec__tree_model__path_type__a)) = false))) and
  (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[j29])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[i20])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
  (to_rep((values[j29])) <  to_rep((values[i20])))) and
  ((not (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  v)[j29])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[i20])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (to_rep((values[i20])) <  to_rep((values[j29])))))))) and
  ((forall k6:int. (((1 <= k6) and (k6 <= j30)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[i20])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   v)[i20])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[i20])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[i20])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[i20])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
   (to_rep((values[k6])) <  to_rep((values[i20])))) and
   ((not (get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[i20])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
   (to_rep((values[i20])) <  to_rep((values[k6])))))))) and ((((1 <= 100) ->
  in_range3(j30)) and ((1 <= j30) and (j30 <= 100))) and (j30 = 100))))) and
  ((j36 = j30) and (j37 = j30))) and ((j38 = j36) and (j39 = j37)))) and
  ((not ((1 <= j29) and (j29 <= 100))) -> ((j38 = j29) and
  (j39 = j29))))) and (i20 = 100))))) and (((j44 = j38) and (i26 = i20)) and
  ((j45 = j39) and (i27 = i20)))) and (((j46 = j44) and (i28 = i26)) and
  ((j47 = j45) and (i29 = i27))))) and ((not ((1 <= i19) and
  (i19 <= 100))) -> (((j46 = j1) and (i28 = i19)) and ((j47 = j9) and
  (i29 = i19)))))) and
  ((forall k6:int. (((1 <= k6) and (k6 <= 100)) ->
   (forall j52:int. (((1 <= j52) and (j52 <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
   (to_rep((values[j52])) <  to_rep((values[k6])))) and
   ((not (get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[k6])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
   (to_rep((values[k6])) <  to_rep((values[j52])))))))))) and
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, v, values) = true)))))) and
  (((j49 = j46) and ((i31 = i28) and ((j48 = j26) and (i30 = i17)))) and
  ((j51 = j47) and ((i33 = i29) and ((j50 = j27) and (i32 = i18))))))

axiom H6 : ((result58 = ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root, values)) and (((result58 = true) ->
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) -> (((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j52])).us_split_fields1).rec__tree_model__path_type__k = true)) and
  ((bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j52])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j52])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i34])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
  (to_rep((values[j52])) <  to_rep((values[i34])))) and
  ((not (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j52])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i34])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (to_rep((values[i34])) <  to_rep((values[j52]))))))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (forall j52:int. (((1 <= j52) and (j52 <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   (((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) and
   (to_rep((values[j52])) <  to_rep((values[i34])))) or
   ((not (get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i34])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) and
   (to_rep((values[i34])) <  to_rep((values[j52])))))))))) ->
  (result58 = true))))

axiom H7 : (result58 = true)

axiom H8 : ((result59 = ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } }, v,
  values)) and (((result59 = true) ->
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) -> (((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[j52])).us_split_fields1).rec__tree_model__path_type__k = true)) and
  ((bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  v)[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  v)[j52])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[j52])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[i34])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
  (to_rep((values[j52])) <  to_rep((values[i34])))) and
  ((not (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  v)[j52])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  v)[i34])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (to_rep((values[i34])) <  to_rep((values[j52]))))))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (forall j52:int. (((1 <= j52) and (j52 <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   (((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   v)[i34])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[i34])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   v)[i34])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[i34])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) and
   (to_rep((values[j52])) <  to_rep((values[i34])))) or
   ((not (get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   v)[j52])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   v)[i34])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) and
   (to_rep((values[i34])) <  to_rep((values[j52])))))))))) ->
  (result59 = true))))

axiom H9 : (result59 = true)

axiom H10 : (1 <= i7)

axiom H11 : (i7 <= 100)

axiom H12 : ((temp___1469 = model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c = f_old1
  } }, root)) and
  ((forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
   (length((((temp___1469[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100))) and
  (((((temp___1469[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((temp___1469[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) -> ((not (i34 = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } }, i34) = 0)) and
   ((((temp___1469[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c =
   f_old1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((temp___1469[i34])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f_old; rec__binary_trees__forest__c = f_old1 } }, i34) = 0)) and
   ((((temp___1469[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c =
   f_old1 } },
   i34)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((temp___1469[i34])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
   (((((((temp___1469[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = root))) -> (is_add((((temp___1469[parent({ us_split_fields5 =
   { rec__binary_trees__forest__s = f_old; rec__binary_trees__forest__c =
   f_old1 } }, i34)])).us_split_fields1).rec__tree_model__path_type__a,
   position({ us_split_fields5 = { rec__binary_trees__forest__s = f_old;
   rec__binary_trees__forest__c = f_old1 } }, i34),
   (((temp___1469[i34])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((temp___1469[i34])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i34 = root)))) ->
   (length((((temp___1469[i34])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i34:int. (((1 <= i34) and (i34 <= 100)) ->
  (((((temp___1469[i34])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j52:int. (((1 <= j52) and (j52 <= 100)) ->
  ((((((temp___1469[j52])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((temp___1469[i34])).us_split_fields1).rec__tree_model__path_type__a),
  length((((temp___1469[j52])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((temp___1469[i34])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((temp___1469[i34])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((temp___1469[j52])).us_split_fields1).rec__tree_model__path_type__a,
  n)))))) -> (j52 = i34)))))))))))))

axiom H13 : ({ us_split_fields1 = { rec__tree_model__path_type__a = o416;
  rec__tree_model__path_type__k = o417 } } = (temp___1469[v]))

axiom H14 : ((o418 = o416) and (o419 = o417))

axiom H15 : (o420 = o418)

 (* File "tree_model.ads", line 12, characters 0-0 *)
goal WP_parameter_def : (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root) = true)
