(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type integer

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

type scalar_with_default

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : scalar_with_default, scalar_with_default -> bool

logic dummy3 : scalar_with_default

type scalar_with_default__ref = { scalar_with_default__content :
scalar_with_default
}

function scalar_with_default__ref___4__projection(a: scalar_with_default__ref) : scalar_with_default =
  (a).scalar_with_default__content

logic to_rep2 : scalar_with_default -> int

logic of_rep2 : int -> scalar_with_default

axiom inversion_axiom2 :
  (forall x:scalar_with_default [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:scalar_with_default [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type tscalar_with_defaultB

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tscalar_with_defaultB, tscalar_with_defaultB -> bool

logic dummy4 : tscalar_with_defaultB

type tscalar_with_defaultB__ref = { tscalar_with_defaultB__content :
tscalar_with_defaultB
}

function tscalar_with_defaultB__ref___4__projection(a: tscalar_with_defaultB__ref) : tscalar_with_defaultB =
  (a).tscalar_with_defaultB__content

logic to_rep3 : tscalar_with_defaultB -> int

logic of_rep3 : int -> tscalar_with_defaultB

axiom inversion_axiom3 :
  (forall x:tscalar_with_defaultB [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:tscalar_with_defaultB [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic first : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : tscalar_with_defaultB, tscalar_with_defaultB -> bool

logic dummy5 : tscalar_with_defaultB

type scalar_bad_default__ref = { scalar_bad_default__content :
tscalar_with_defaultB
}

function scalar_bad_default__ref___4__projection(a: scalar_bad_default__ref) : tscalar_with_defaultB =
  (a).scalar_bad_default__content

logic first1 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type scalar_no_default__ref = { scalar_no_default__content : integer
}

function scalar_no_default__ref___3__projection(a: scalar_no_default__ref) : integer =
  (a).scalar_no_default__content

type map__ref = { map__content : (int,scalar_with_default) farray
}

logic slide : (int,scalar_with_default) farray, int,
  int -> (int,scalar_with_default) farray

axiom slide_eq :
  (forall a:(int,scalar_with_default) farray.
  (forall first2:int [slide(a, first2, first2)]. (slide(a, first2,
  first2) = a)))

axiom slide_def :
  (forall a:(int,scalar_with_default) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq9 : (int,scalar_with_default) farray, int, int,
  (int,scalar_with_default) farray, int, int -> bool

axiom bool_eq_def8 :
  (forall a:(int,scalar_with_default) farray. forall a__first:int.
  forall a__last:int. forall b:(int,scalar_with_default) farray.
  forall b__first:int. forall b__last:int [bool_eq9(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_156:int. ((((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) and
  (to_rep2((a[temp___idx_156])) = to_rep2((b[((b__first - a__first) + temp___idx_156)])))) or
  (not ((a__first <= temp___idx_156) and (temp___idx_156 <= a__last)))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep2((a[temp___idx_156])) = to_rep2((b[((b__first - a__first) + temp___idx_156)]))))))) ->
  (bool_eq9(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,scalar_with_default) farray.
  forall b:(int,scalar_with_default) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep2((a[temp___idx_156])) = to_rep2((b[((b__first - a__first) + temp___idx_156)])))))))))

type map__ref1 = { map__content1 : (int,natural) farray
}

logic slide1 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq1 :
  (forall a:(int,natural) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq10 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def9 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq10(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_157:int. ((((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) and
  (to_rep((a[temp___idx_157])) = to_rep((b[((b__first - a__first) + temp___idx_157)])))) or
  (not ((a__first <= temp___idx_157) and (temp___idx_157 <= a__last)))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep((a[temp___idx_157])) = to_rep((b[((b__first - a__first) + temp___idx_157)]))))))) ->
  (bool_eq10(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep((a[temp___idx_157])) = to_rep((b[((b__first - a__first) + temp___idx_157)])))))))))

type map__ref2 = { map__content2 : (int,tscalar_with_defaultB) farray
}

logic slide2 : (int,tscalar_with_defaultB) farray, int,
  int -> (int,tscalar_with_defaultB) farray

axiom slide_eq2 :
  (forall a:(int,tscalar_with_defaultB) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,tscalar_with_defaultB) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq11 : (int,tscalar_with_defaultB) farray, int, int,
  (int,tscalar_with_defaultB) farray, int, int -> bool

axiom bool_eq_def10 :
  (forall a:(int,tscalar_with_defaultB) farray. forall a__first:int.
  forall a__last:int. forall b:(int,tscalar_with_defaultB) farray.
  forall b__first:int. forall b__last:int [bool_eq11(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_158:int. ((((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) and
  (to_rep3((a[temp___idx_158])) = to_rep3((b[((b__first - a__first) + temp___idx_158)])))) or
  (not ((a__first <= temp___idx_158) and (temp___idx_158 <= a__last)))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) ->
  (to_rep3((a[temp___idx_158])) = to_rep3((b[((b__first - a__first) + temp___idx_158)]))))))) ->
  (bool_eq11(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,tscalar_with_defaultB) farray.
  forall b:(int,tscalar_with_defaultB) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_158:int. (((a__first <= temp___idx_158) and
  (temp___idx_158 <= a__last)) ->
  (to_rep3((a[temp___idx_158])) = to_rep3((b[((b__first - a__first) + temp___idx_158)])))))))))

type map__ref3 = { map__content3 : (int,integer) farray
}

logic slide3 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq3 :
  (forall a:(int,integer) farray.
  (forall first2:int [slide3(a, first2, first2)]. (slide3(a, first2,
  first2) = a)))

axiom slide_def3 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq12 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def11 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_159:int. ((((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) and
  (to_rep1((a[temp___idx_159])) = to_rep1((b[((b__first - a__first) + temp___idx_159)])))) or
  (not ((a__first <= temp___idx_159) and (temp___idx_159 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  (to_rep1((a[temp___idx_159])) = to_rep1((b[((b__first - a__first) + temp___idx_159)]))))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  (to_rep1((a[temp___idx_159])) = to_rep1((b[((b__first - a__first) + temp___idx_159)])))))))))

type t

logic first2 : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  ((to_rep1(first2(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first3(a: us_t) : int = to_rep1(first2((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first3(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq13(x: us_t, y: us_t) : bool = bool_eq12((x).elts,
  to_rep1(first2((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first2((y).rt)), to_rep1(last((y).rt)))

logic user_eq7 : us_t, us_t -> bool

logic dummy7 : (int,integer) farray

logic dummy8 : t

type array_bad_default2__ref = { array_bad_default2__content : us_t
}

function array_bad_default2__ref___2__projection(a: array_bad_default2__ref) : us_t =
  (a).array_bad_default2__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t17b

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : t17b, t17b -> bool

logic dummy9 : t17b

type t17b__ref = { t17b__content : t17b
}

function t17b__ref___projection(a: t17b__ref) : t17b = (a).t17b__content

logic no_def__first : integer

logic no_def__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type tTall_0SP1

predicate in_range7(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def13 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : tTall_0SP1, tTall_0SP1 -> bool

logic dummy10 : tTall_0SP1

type tTall_0SP1__ref = { tTall_0SP1__content : tTall_0SP1
}

function tTall_0SP1__ref___projection(a: tTall_0SP1__ref) : tTall_0SP1 =
  (a).tTall_0SP1__content

logic attr__ATTRIBUTE_ADDRESS5 : int

type tTall_1SP1

predicate in_range8(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def14 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : tTall_1SP1, tTall_1SP1 -> bool

logic dummy11 : tTall_1SP1

type tTall_1SP1__ref = { tTall_1SP1__content : tTall_1SP1
}

function tTall_1SP1__ref___projection(a: tTall_1SP1__ref) : tTall_1SP1 =
  (a).tTall_1SP1__content

logic attr__ATTRIBUTE_ADDRESS6 : int

type tTall_2SP1

predicate in_range9(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def15 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq11 : tTall_2SP1, tTall_2SP1 -> bool

logic dummy12 : tTall_2SP1

type tTall_2SP1__ref = { tTall_2SP1__content : tTall_2SP1
}

function tTall_2SP1__ref___projection(a: tTall_2SP1__ref) : tTall_2SP1 =
  (a).tTall_2SP1__content

logic attr__ATTRIBUTE_ADDRESS7 : int

logic with_default__ok_array__no_def__aggregate_def : int -> (int,integer) farray

axiom first__def_axiom : (first = c)

axiom first__def_axiom1 : (first1 = c)

axiom def_axiom :
  (forall temp___695:int. (dynamic_property1(first1, 2147483647,
  temp___695) ->
  (forall temp___696:int.
  (to_rep1((with_default__ok_array__no_def__aggregate_def(temp___695)[temp___696])) = temp___695))))

 (* File "with_default.adb", line 62, characters 0-0 *)
goal WP_parameter_def :
  (forall empty1:(int,tscalar_with_defaultB) farray.
  forall empty2:(int,integer) farray. forall no_def:(int,integer) farray.
  forall all_0:(int,scalar_with_default) farray.
  forall all_1:(int,natural) farray. forall us:int. forall o:int.
  forall o1:(int,integer) farray.
  forall with_default__ok_array__no_def__assume:(int,integer) farray.
  forall with_default__ok_array__no_def__assume1:t. forall o2:int.
  forall result:(int,integer) farray. forall no_def1:(int,integer) farray.
  forall result1:bool. (in_range1(c) -> ((c <= 2) ->
  ((forall temp___316:int. (((1 <= temp___316) and (temp___316 <= 0)) ->
   (to_rep3((empty1[temp___316])) = 0))) ->
  ((forall temp___313:int. (((1 <= temp___313) and (temp___313 <= 0)) ->
   ((first <= 2147483647) -> dynamic_property(first, 2147483647,
   to_rep3((empty1[temp___313])))))) ->
  ((forall temp___326:int. (((1 <= temp___326) and (temp___326 <= 0)) ->
   (to_rep1((empty2[temp___326])) = 0))) ->
  ((forall temp___323:int. (((1 <= temp___323) and (temp___323 <= 0)) ->
   ((first1 <= 2147483647) -> dynamic_property1(first1, 2147483647,
   to_rep1((empty2[temp___323])))))) ->
  (((((((us = c) and dynamic_property1(first1, 2147483647, c)) and
  (o = c)) and (o1 = with_default__ok_array__no_def__aggregate_def(o))) and
  ((o1 = with_default__ok_array__no_def__assume) and (mk(1,
  100) = with_default__ok_array__no_def__assume1))) and
  (((result = no_def) and
  (no_def1 = with_default__ok_array__no_def__assume)) and
  ((to_rep1(no_def__first) = to_rep1(first2(with_default__ok_array__no_def__assume1))) and
  (to_rep1(no_def__last) = to_rep1(last(with_default__ok_array__no_def__assume1)))))) ->
  ((dynamic_property2(1, 2147483647, to_rep1(no_def__first),
  to_rep1(no_def__last)) and
  (forall temp___697:int. (((to_rep1(no_def__first) <= temp___697) and
  (temp___697 <= to_rep1(no_def__last))) -> dynamic_property1(first1,
  2147483647, to_rep1((no_def1[temp___697])))))) ->
  ((forall temp___345:int. (((1 <= temp___345) and (temp___345 <= 100)) ->
   (to_rep2((all_0[temp___345])) = 0))) ->
  ((forall temp___355:int. (((1 <= temp___355) and (temp___355 <= 100)) ->
   (to_rep((all_1[temp___355])) = 1))) ->
  (((((1 <= 100) and (o2 = ((100 - 1) + 1))) or ((not (1 <= 100)) and
  (o2 = 0))) and (((0 <  o2) and (result1 = true)) or ((not (0 <  o2)) and
  (result1 = false)))) -> ((result1 = true) -> dynamic_property(first,
  2147483647, 2))))))))))))))
