(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type cell

predicate in_range1(x: int) = ((0 <= x) and (x <= 7))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : cell, cell -> bool

logic dummy : cell

type cell__ref = { cell__content : cell
}

function cell__ref___projection(a: cell__ref) : cell = (a).cell__content

logic to_rep : cell -> int

logic of_rep : int -> cell

axiom inversion_axiom : (forall x:cell [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:cell [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type shape

predicate in_range2(x: int) = ((1 <= x) and (x <= 7))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : shape, shape -> bool

logic dummy1 : shape

type shape__ref = { shape__content : shape
}

function shape__ref___projection(a: shape__ref) : shape = (a).shape__content

logic to_rep1 : shape -> int

logic of_rep1 : int -> shape

axiom inversion_axiom1 :
  (forall x:shape [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:shape [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type three_shape

predicate in_range3(x: int) = ((3 <= x) and (x <= 7))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : three_shape, three_shape -> bool

logic dummy2 : three_shape

type three_shape__ref = { three_shape__content : three_shape
}

function three_shape__ref___projection(a: three_shape__ref) : three_shape =
  (a).three_shape__content

type x_coord

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : x_coord, x_coord -> bool

logic dummy3 : x_coord

type x_coord__ref = { x_coord__content : x_coord
}

function x_coord__ref___projection(a: x_coord__ref) : x_coord =
  (a).x_coord__content

type y_coord

predicate in_range5(x: int) = ((1 <= x) and (x <= 20))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : y_coord, y_coord -> bool

logic dummy4 : y_coord

type y_coord__ref = { y_coord__content : y_coord
}

function y_coord__ref___projection(a: y_coord__ref) : y_coord =
  (a).y_coord__content

type map__ref = { map__content : (int,cell) farray
}

logic slide : (int,cell) farray, int, int -> (int,cell) farray

axiom slide_eq :
  (forall a:(int,cell) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,cell) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,cell) farray, int, int, (int,cell) farray, int,
  int -> (int,cell) farray

axiom concat_def :
  (forall a:(int,cell) farray. forall b:(int,cell) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : cell, int -> (int,cell) farray

axiom singleton_def :
  (forall v:cell.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq7 : (int,cell) farray, int, int, (int,cell) farray, int,
  int -> bool

axiom bool_eq_def6 :
  (forall a:(int,cell) farray. forall a__first:int. forall a__last:int.
  forall b:(int,cell) farray. forall b__first:int. forall b__last:int
  [bool_eq7(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_139:int. ((((a__first <= temp___idx_139) and
  (temp___idx_139 <= a__last)) and
  (to_rep((a[temp___idx_139])) = to_rep((b[((b__first - a__first) + temp___idx_139)])))) or
  (not ((a__first <= temp___idx_139) and (temp___idx_139 <= a__last)))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_139:int. (((a__first <= temp___idx_139) and
  (temp___idx_139 <= a__last)) ->
  (to_rep((a[temp___idx_139])) = to_rep((b[((b__first - a__first) + temp___idx_139)]))))))) ->
  (bool_eq7(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,cell) farray. forall b:(int,cell) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_139:int. (((a__first <= temp___idx_139) and
  (temp___idx_139 <= a__last)) ->
  (to_rep((a[temp___idx_139])) = to_rep((b[((b__first - a__first) + temp___idx_139)])))))))))

logic compare : (int,cell) farray, int, int, (int,cell) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,cell) farray. forall b:(int,cell) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq7(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,cell) farray. forall b:(int,cell) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq7(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,cell) farray. forall b:(int,cell) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq7(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy5 : (int,cell) farray

logic value__size : int

logic object__size : (int,cell) farray -> int

logic value__component__size : int

logic object__component__size : (int,cell) farray -> int

logic value__alignment : int

logic object__alignment : (int,cell) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,cell) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,cell) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,cell) farray. (0 <= object__alignment(a)))

logic user_eq5 : (int,cell) farray, (int,cell) farray -> bool

type map__ref1 = { map__content1 : (int,(int,cell) farray) farray
}

logic slide1 : (int,(int,cell) farray) farray, int,
  int -> (int,(int,cell) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,cell) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,cell) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,(int,cell) farray) farray, int, int,
  (int,(int,cell) farray) farray, int, int -> (int,(int,cell) farray) farray

axiom concat_def1 :
  (forall a:(int,(int,cell) farray) farray.
  forall b:(int,(int,cell) farray) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : (int,cell) farray, int -> (int,(int,cell) farray) farray

axiom singleton_def1 :
  (forall v:(int,cell) farray.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq8 : (int,(int,cell) farray) farray, int, int,
  (int,(int,cell) farray) farray, int, int -> bool

axiom bool_eq_def7 :
  (forall a:(int,(int,cell) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,cell) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq8(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_140:int. ((((a__first <= temp___idx_140) and
  (temp___idx_140 <= a__last)) and (bool_eq7((a[temp___idx_140]), 1, 10,
  (b[((b__first - a__first) + temp___idx_140)]), 1, 10) = true)) or
  (not ((a__first <= temp___idx_140) and (temp___idx_140 <= a__last)))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_140:int. (((a__first <= temp___idx_140) and
  (temp___idx_140 <= a__last)) -> (bool_eq7((a[temp___idx_140]), 1, 10,
  (b[((b__first - a__first) + temp___idx_140)]), 1, 10) = true))))) ->
  (bool_eq8(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,cell) farray) farray.
  forall b:(int,(int,cell) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_140:int. (((a__first <= temp___idx_140) and
  (temp___idx_140 <= a__last)) -> (bool_eq7((a[temp___idx_140]), 1, 10,
  (b[((b__first - a__first) + temp___idx_140)]), 1, 10) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

type px_coord

predicate in_range6(x: int) = (((- 1) <= x) and (x <= 9))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : px_coord, px_coord -> bool

logic dummy6 : px_coord

type px_coord__ref = { px_coord__content : px_coord
}

function px_coord__ref___projection(a: px_coord__ref) : px_coord =
  (a).px_coord__content

logic to_rep2 : px_coord -> int

logic of_rep2 : int -> px_coord

axiom inversion_axiom2 :
  (forall x:px_coord [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:px_coord [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

type py_coord

predicate in_range7(x: int) = (((- 1) <= x) and (x <= 19))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : py_coord, py_coord -> bool

logic dummy7 : py_coord

type py_coord__ref = { py_coord__content : py_coord
}

function py_coord__ref___projection(a: py_coord__ref) : py_coord =
  (a).py_coord__content

logic to_rep3 : py_coord -> int

logic of_rep3 : int -> py_coord

axiom inversion_axiom3 :
  (forall x:py_coord [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:py_coord [to_rep3(x)]. in_range7(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range7(x) ->
  (to_rep3(of_rep3(x)) = x)))

type direction

predicate in_range8(x: int) = ((0 <= x) and (x <= 3))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : direction, direction -> bool

logic dummy8 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

logic to_rep4 : direction -> int

logic of_rep4 : int -> direction

axiom inversion_axiom4 :
  (forall x:direction [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:direction [to_rep4(x)]. in_range8(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range8(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = { rec__patris__piece__s : shape; rec__patris__piece__d
: direction; rec__patris__piece__x : px_coord; rec__patris__piece__y :
py_coord
}

function us_split_fields_S__projection(a: us_split_fields) : shape =
  (a).rec__patris__piece__s

function us_split_fields_D__projection(a: us_split_fields) : direction =
  (a).rec__patris__piece__d

function us_split_fields_X__projection(a: us_split_fields) : px_coord =
  (a).rec__patris__piece__x

function us_split_fields_Y__projection(a: us_split_fields) : py_coord =
  (a).rec__patris__piece__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq12 : us_rep, us_rep -> bool

axiom bool_eq_def11 :
  (forall a:us_rep. forall b:us_rep [bool_eq12(a, b)].
  ((((((to_rep1(((a).us_split_fields1).rec__patris__piece__s) = to_rep1(((b).us_split_fields1).rec__patris__piece__s)) and
  (to_rep4(((a).us_split_fields1).rec__patris__piece__d) = to_rep4(((b).us_split_fields1).rec__patris__piece__d))) and
  (to_rep2(((a).us_split_fields1).rec__patris__piece__x) = to_rep2(((b).us_split_fields1).rec__patris__piece__x))) and
  (to_rep3(((a).us_split_fields1).rec__patris__piece__y) = to_rep3(((b).us_split_fields1).rec__patris__piece__y))) ->
  (bool_eq12(a, b) = true)) and
  ((not ((((to_rep1(((a).us_split_fields1).rec__patris__piece__s) = to_rep1(((b).us_split_fields1).rec__patris__piece__s)) and
  (to_rep4(((a).us_split_fields1).rec__patris__piece__d) = to_rep4(((b).us_split_fields1).rec__patris__piece__d))) and
  (to_rep2(((a).us_split_fields1).rec__patris__piece__x) = to_rep2(((b).us_split_fields1).rec__patris__piece__x))) and
  (to_rep3(((a).us_split_fields1).rec__patris__piece__y) = to_rep3(((b).us_split_fields1).rec__patris__piece__y)))) ->
  (bool_eq12(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:shape. forall a1:direction. forall a2:px_coord.
  forall a3:py_coord. (0 <= object__size1({ us_split_fields1 = {
  rec__patris__piece__s = a; rec__patris__piece__d = a1;
  rec__patris__piece__x = a2; rec__patris__piece__y = a3 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:shape. forall a1:direction. forall a2:px_coord.
  forall a3:py_coord. (0 <= object__alignment1({ us_split_fields1 = {
  rec__patris__piece__s = a; rec__patris__piece__d = a1;
  rec__patris__piece__x = a2; rec__patris__piece__y = a3 } })))

logic patris__piece__s__first__bit : int

logic patris__piece__s__last__bit : int

logic patris__piece__s__position : int

axiom patris__piece__s__first__bit_axiom :
  (0 <= patris__piece__s__first__bit)

axiom patris__piece__s__last__bit_axiom :
  (patris__piece__s__first__bit <  patris__piece__s__last__bit)

axiom patris__piece__s__position_axiom : (0 <= patris__piece__s__position)

logic patris__piece__d__first__bit : int

logic patris__piece__d__last__bit : int

logic patris__piece__d__position : int

axiom patris__piece__d__first__bit_axiom :
  (0 <= patris__piece__d__first__bit)

axiom patris__piece__d__last__bit_axiom :
  (patris__piece__d__first__bit <  patris__piece__d__last__bit)

axiom patris__piece__d__position_axiom : (0 <= patris__piece__d__position)

logic patris__piece__x__first__bit : int

logic patris__piece__x__last__bit : int

logic patris__piece__x__position : int

axiom patris__piece__x__first__bit_axiom :
  (0 <= patris__piece__x__first__bit)

axiom patris__piece__x__last__bit_axiom :
  (patris__piece__x__first__bit <  patris__piece__x__last__bit)

axiom patris__piece__x__position_axiom : (0 <= patris__piece__x__position)

logic patris__piece__y__first__bit : int

logic patris__piece__y__last__bit : int

logic patris__piece__y__position : int

axiom patris__piece__y__first__bit_axiom :
  (0 <= patris__piece__y__first__bit)

axiom patris__piece__y__last__bit_axiom :
  (patris__piece__y__first__bit <  patris__piece__y__last__bit)

axiom patris__piece__y__position_axiom : (0 <= patris__piece__y__position)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy9 : shape

logic dummy10 : direction

logic dummy11 : px_coord

logic dummy12 : py_coord

type piece__ref = { piece__content : us_rep
}

function piece__ref___projection(a: piece__ref) : us_rep = (a).piece__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type state

predicate in_range9(x: int) = ((0 <= x) and (x <= 4))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def12 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq10 : state, state -> bool

logic dummy13 : state

type state__ref = { state__content : state
}

function state__ref___projection(a: state__ref) : state = (a).state__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic get_state : int -> int

logic get_state__function_guard : int, int -> prop

axiom get_state__post_axiom :
  (forall patris__cur_state:int [get_state(patris__cur_state)].
  (in_range9(patris__cur_state) -> in_range9(get_state(patris__cur_state))))

axiom get_state__def_axiom :
  (forall patris__cur_state:int [get_state(patris__cur_state)].
  (in_range9(patris__cur_state) ->
  (get_state(patris__cur_state) = patris__cur_state)))

type map

type map__ref2 = { map__content2 : map
}

logic get : map, int, int -> bool

logic set : map, int, int, bool -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:bool [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:bool [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m, i2,
  j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide2 : map, int, int, int, int -> map

axiom slide_def2 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide2(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide2(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq14 : map, int, int, int, int, map, int, int, int, int -> bool

axiom bool_eq_def13 :
  (forall a:map. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq14(a, a__first, a__last, a__first_2,
  a__last_2, b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_141:int. forall temp___idx_142:int.
  (((((a__first <= temp___idx_141) and (temp___idx_141 <= a__last)) and
  ((a__first_2 <= temp___idx_142) and (temp___idx_142 <= a__last_2))) and
  (get(a, temp___idx_141, temp___idx_142) = get(b,
  ((b__first - a__first) + temp___idx_141),
  ((b__first_2 - a__first_2) + temp___idx_142)))) or
  (not (((a__first <= temp___idx_141) and (temp___idx_141 <= a__last)) and
  ((a__first_2 <= temp___idx_142) and (temp___idx_142 <= a__last_2))))))) ->
  (bool_eq14(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_141:int. forall temp___idx_142:int.
  ((((a__first <= temp___idx_141) and (temp___idx_141 <= a__last)) and
  ((a__first_2 <= temp___idx_142) and (temp___idx_142 <= a__last_2))) ->
  (get(a, temp___idx_141, temp___idx_142) = get(b,
  ((b__first - a__first) + temp___idx_141),
  ((b__first_2 - a__first_2) + temp___idx_142))))))) -> (bool_eq14(a,
  a__first, a__last, a__first_2, a__last_2, b, b__first, b__last, b__first_2,
  b__last_2) = false))))

axiom bool_eq_rev2 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq14(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_141:int. forall temp___idx_142:int.
  ((((a__first <= temp___idx_141) and (temp___idx_141 <= a__last)) and
  ((a__first_2 <= temp___idx_142) and (temp___idx_142 <= a__last_2))) ->
  (get(a, temp___idx_141, temp___idx_142) = get(b,
  ((b__first - a__first) + temp___idx_141),
  ((b__first_2 - a__first_2) + temp___idx_142)))))))))

logic dummy14 : map

logic value__size2 : int

logic object__size2 : map -> int

logic value__component__size1 : int

logic object__component__size1 : map -> int

logic value__alignment2 : int

logic object__alignment2 : map -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:map. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:map. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 : (forall a:map. (0 <= object__alignment2(a)))

logic user_eq11 : map, map -> bool

type map__ref3 = { map__content3 : (int,map) farray
}

logic slide3 : (int,map) farray, int, int -> (int,map) farray

axiom slide_eq2 :
  (forall a:(int,map) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,map) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,map) farray, int, int, (int,map) farray, int,
  int -> (int,map) farray

axiom concat_def2 :
  (forall a:(int,map) farray. forall b:(int,map) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : map, int -> (int,map) farray

axiom singleton_def2 :
  (forall v:map.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq15 : (int,map) farray, int, int, (int,map) farray, int,
  int -> bool

axiom bool_eq_def14 :
  (forall a:(int,map) farray. forall a__first:int. forall a__last:int.
  forall b:(int,map) farray. forall b__first:int. forall b__last:int
  [bool_eq15(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_143:int. ((((a__first <= temp___idx_143) and
  (temp___idx_143 <= a__last)) and (bool_eq14((a[temp___idx_143]), 0, 3, 0,
  3, (b[((b__first - a__first) + temp___idx_143)]), 0, 3, 0, 3) = true)) or
  (not ((a__first <= temp___idx_143) and (temp___idx_143 <= a__last)))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_143:int. (((a__first <= temp___idx_143) and
  (temp___idx_143 <= a__last)) -> (bool_eq14((a[temp___idx_143]), 0, 3, 0, 3,
  (b[((b__first - a__first) + temp___idx_143)]), 0, 3, 0, 3) = true))))) ->
  (bool_eq15(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev3 :
  (forall a:(int,map) farray. forall b:(int,map) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq15(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_143:int. (((a__first <= temp___idx_143) and
  (temp___idx_143 <= a__last)) -> (bool_eq14((a[temp___idx_143]), 0, 3, 0, 3,
  (b[((b__first - a__first) + temp___idx_143)]), 0, 3, 0, 3) = true)))))))

logic possible_i_shapes : (int,map) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic patris__possible_i_shapes__aggregate_def : map, map, map,
  map -> (int,map) farray

axiom def_axiom :
  (forall temp___145:map. forall temp___146:map. forall temp___147:map.
  forall temp___148:map.
  (((((patris__possible_i_shapes__aggregate_def(temp___145, temp___146,
  temp___147, temp___148)[0]) = temp___145) and
  ((patris__possible_i_shapes__aggregate_def(temp___145, temp___146,
  temp___147, temp___148)[1]) = temp___146)) and
  ((patris__possible_i_shapes__aggregate_def(temp___145, temp___146,
  temp___147, temp___148)[2]) = temp___147)) and
  ((patris__possible_i_shapes__aggregate_def(temp___145, temp___146,
  temp___147, temp___148)[3]) = temp___148)))

logic temp___150 : bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool -> map

axiom def_axiom1 :
  (forall temp___152:bool. forall temp___153:bool. forall temp___154:bool.
  forall temp___155:bool. forall temp___156:bool. forall temp___157:bool.
  forall temp___158:bool. forall temp___159:bool. forall temp___160:bool.
  forall temp___161:bool. forall temp___162:bool. forall temp___163:bool.
  forall temp___164:bool. forall temp___165:bool. forall temp___166:bool.
  forall temp___167:bool. (((((((get(temp___150(temp___152, temp___153,
  temp___154, temp___155, temp___156, temp___157, temp___158, temp___159,
  temp___160, temp___161, temp___162, temp___163, temp___164, temp___165,
  temp___166, temp___167), 0, 0) = temp___152) and
  (get(temp___150(temp___152, temp___153, temp___154, temp___155, temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167), 0,
  1) = temp___153)) and (get(temp___150(temp___152, temp___153, temp___154,
  temp___155, temp___156, temp___157, temp___158, temp___159, temp___160,
  temp___161, temp___162, temp___163, temp___164, temp___165, temp___166,
  temp___167), 0, 2) = temp___154)) and (get(temp___150(temp___152,
  temp___153, temp___154, temp___155, temp___156, temp___157, temp___158,
  temp___159, temp___160, temp___161, temp___162, temp___163, temp___164,
  temp___165, temp___166, temp___167), 0, 3) = temp___155)) and
  ((((get(temp___150(temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167), 1,
  0) = temp___156) and (get(temp___150(temp___152, temp___153, temp___154,
  temp___155, temp___156, temp___157, temp___158, temp___159, temp___160,
  temp___161, temp___162, temp___163, temp___164, temp___165, temp___166,
  temp___167), 1, 1) = temp___157)) and (get(temp___150(temp___152,
  temp___153, temp___154, temp___155, temp___156, temp___157, temp___158,
  temp___159, temp___160, temp___161, temp___162, temp___163, temp___164,
  temp___165, temp___166, temp___167), 1, 2) = temp___158)) and
  (get(temp___150(temp___152, temp___153, temp___154, temp___155, temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167), 1,
  3) = temp___159))) and ((((get(temp___150(temp___152, temp___153,
  temp___154, temp___155, temp___156, temp___157, temp___158, temp___159,
  temp___160, temp___161, temp___162, temp___163, temp___164, temp___165,
  temp___166, temp___167), 2, 0) = temp___160) and
  (get(temp___150(temp___152, temp___153, temp___154, temp___155, temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167), 2,
  1) = temp___161)) and (get(temp___150(temp___152, temp___153, temp___154,
  temp___155, temp___156, temp___157, temp___158, temp___159, temp___160,
  temp___161, temp___162, temp___163, temp___164, temp___165, temp___166,
  temp___167), 2, 2) = temp___162)) and (get(temp___150(temp___152,
  temp___153, temp___154, temp___155, temp___156, temp___157, temp___158,
  temp___159, temp___160, temp___161, temp___162, temp___163, temp___164,
  temp___165, temp___166, temp___167), 2, 3) = temp___163))) and
  ((((get(temp___150(temp___152, temp___153, temp___154, temp___155,
  temp___156, temp___157, temp___158, temp___159, temp___160, temp___161,
  temp___162, temp___163, temp___164, temp___165, temp___166, temp___167), 3,
  0) = temp___164) and (get(temp___150(temp___152, temp___153, temp___154,
  temp___155, temp___156, temp___157, temp___158, temp___159, temp___160,
  temp___161, temp___162, temp___163, temp___164, temp___165, temp___166,
  temp___167), 3, 1) = temp___165)) and (get(temp___150(temp___152,
  temp___153, temp___154, temp___155, temp___156, temp___157, temp___158,
  temp___159, temp___160, temp___161, temp___162, temp___163, temp___164,
  temp___165, temp___166, temp___167), 3, 2) = temp___166)) and
  (get(temp___150(temp___152, temp___153, temp___154, temp___155, temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163, temp___164, temp___165, temp___166, temp___167), 3,
  3) = temp___167))))

logic temp___170 : bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool -> map

axiom def_axiom2 :
  (forall temp___172:bool. forall temp___173:bool. forall temp___174:bool.
  forall temp___175:bool. forall temp___176:bool. forall temp___177:bool.
  forall temp___178:bool. forall temp___179:bool. forall temp___180:bool.
  forall temp___181:bool. forall temp___182:bool. forall temp___183:bool.
  forall temp___184:bool. forall temp___185:bool. forall temp___186:bool.
  forall temp___187:bool. (((((((get(temp___170(temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187), 0, 0) = temp___172) and
  (get(temp___170(temp___172, temp___173, temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187), 0,
  1) = temp___173)) and (get(temp___170(temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187), 0, 2) = temp___174)) and (get(temp___170(temp___172,
  temp___173, temp___174, temp___175, temp___176, temp___177, temp___178,
  temp___179, temp___180, temp___181, temp___182, temp___183, temp___184,
  temp___185, temp___186, temp___187), 0, 3) = temp___175)) and
  ((((get(temp___170(temp___172, temp___173, temp___174, temp___175,
  temp___176, temp___177, temp___178, temp___179, temp___180, temp___181,
  temp___182, temp___183, temp___184, temp___185, temp___186, temp___187), 1,
  0) = temp___176) and (get(temp___170(temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187), 1, 1) = temp___177)) and (get(temp___170(temp___172,
  temp___173, temp___174, temp___175, temp___176, temp___177, temp___178,
  temp___179, temp___180, temp___181, temp___182, temp___183, temp___184,
  temp___185, temp___186, temp___187), 1, 2) = temp___178)) and
  (get(temp___170(temp___172, temp___173, temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187), 1,
  3) = temp___179))) and ((((get(temp___170(temp___172, temp___173,
  temp___174, temp___175, temp___176, temp___177, temp___178, temp___179,
  temp___180, temp___181, temp___182, temp___183, temp___184, temp___185,
  temp___186, temp___187), 2, 0) = temp___180) and
  (get(temp___170(temp___172, temp___173, temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187), 2,
  1) = temp___181)) and (get(temp___170(temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187), 2, 2) = temp___182)) and (get(temp___170(temp___172,
  temp___173, temp___174, temp___175, temp___176, temp___177, temp___178,
  temp___179, temp___180, temp___181, temp___182, temp___183, temp___184,
  temp___185, temp___186, temp___187), 2, 3) = temp___183))) and
  ((((get(temp___170(temp___172, temp___173, temp___174, temp___175,
  temp___176, temp___177, temp___178, temp___179, temp___180, temp___181,
  temp___182, temp___183, temp___184, temp___185, temp___186, temp___187), 3,
  0) = temp___184) and (get(temp___170(temp___172, temp___173, temp___174,
  temp___175, temp___176, temp___177, temp___178, temp___179, temp___180,
  temp___181, temp___182, temp___183, temp___184, temp___185, temp___186,
  temp___187), 3, 1) = temp___185)) and (get(temp___170(temp___172,
  temp___173, temp___174, temp___175, temp___176, temp___177, temp___178,
  temp___179, temp___180, temp___181, temp___182, temp___183, temp___184,
  temp___185, temp___186, temp___187), 3, 2) = temp___186)) and
  (get(temp___170(temp___172, temp___173, temp___174, temp___175, temp___176,
  temp___177, temp___178, temp___179, temp___180, temp___181, temp___182,
  temp___183, temp___184, temp___185, temp___186, temp___187), 3,
  3) = temp___187))))

logic temp___190 : bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool -> map

axiom def_axiom3 :
  (forall temp___192:bool. forall temp___193:bool. forall temp___194:bool.
  forall temp___195:bool. forall temp___196:bool. forall temp___197:bool.
  forall temp___198:bool. forall temp___199:bool. forall temp___200:bool.
  forall temp___201:bool. forall temp___202:bool. forall temp___203:bool.
  forall temp___204:bool. forall temp___205:bool. forall temp___206:bool.
  forall temp___207:bool. (((((((get(temp___190(temp___192, temp___193,
  temp___194, temp___195, temp___196, temp___197, temp___198, temp___199,
  temp___200, temp___201, temp___202, temp___203, temp___204, temp___205,
  temp___206, temp___207), 0, 0) = temp___192) and
  (get(temp___190(temp___192, temp___193, temp___194, temp___195, temp___196,
  temp___197, temp___198, temp___199, temp___200, temp___201, temp___202,
  temp___203, temp___204, temp___205, temp___206, temp___207), 0,
  1) = temp___193)) and (get(temp___190(temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202, temp___203, temp___204, temp___205, temp___206,
  temp___207), 0, 2) = temp___194)) and (get(temp___190(temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207), 0, 3) = temp___195)) and
  ((((get(temp___190(temp___192, temp___193, temp___194, temp___195,
  temp___196, temp___197, temp___198, temp___199, temp___200, temp___201,
  temp___202, temp___203, temp___204, temp___205, temp___206, temp___207), 1,
  0) = temp___196) and (get(temp___190(temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202, temp___203, temp___204, temp___205, temp___206,
  temp___207), 1, 1) = temp___197)) and (get(temp___190(temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207), 1, 2) = temp___198)) and
  (get(temp___190(temp___192, temp___193, temp___194, temp___195, temp___196,
  temp___197, temp___198, temp___199, temp___200, temp___201, temp___202,
  temp___203, temp___204, temp___205, temp___206, temp___207), 1,
  3) = temp___199))) and ((((get(temp___190(temp___192, temp___193,
  temp___194, temp___195, temp___196, temp___197, temp___198, temp___199,
  temp___200, temp___201, temp___202, temp___203, temp___204, temp___205,
  temp___206, temp___207), 2, 0) = temp___200) and
  (get(temp___190(temp___192, temp___193, temp___194, temp___195, temp___196,
  temp___197, temp___198, temp___199, temp___200, temp___201, temp___202,
  temp___203, temp___204, temp___205, temp___206, temp___207), 2,
  1) = temp___201)) and (get(temp___190(temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202, temp___203, temp___204, temp___205, temp___206,
  temp___207), 2, 2) = temp___202)) and (get(temp___190(temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207), 2, 3) = temp___203))) and
  ((((get(temp___190(temp___192, temp___193, temp___194, temp___195,
  temp___196, temp___197, temp___198, temp___199, temp___200, temp___201,
  temp___202, temp___203, temp___204, temp___205, temp___206, temp___207), 3,
  0) = temp___204) and (get(temp___190(temp___192, temp___193, temp___194,
  temp___195, temp___196, temp___197, temp___198, temp___199, temp___200,
  temp___201, temp___202, temp___203, temp___204, temp___205, temp___206,
  temp___207), 3, 1) = temp___205)) and (get(temp___190(temp___192,
  temp___193, temp___194, temp___195, temp___196, temp___197, temp___198,
  temp___199, temp___200, temp___201, temp___202, temp___203, temp___204,
  temp___205, temp___206, temp___207), 3, 2) = temp___206)) and
  (get(temp___190(temp___192, temp___193, temp___194, temp___195, temp___196,
  temp___197, temp___198, temp___199, temp___200, temp___201, temp___202,
  temp___203, temp___204, temp___205, temp___206, temp___207), 3,
  3) = temp___207))))

logic temp___210 : bool, bool, bool, bool, bool, bool, bool, bool, bool,
  bool, bool, bool, bool, bool, bool, bool -> map

axiom def_axiom4 :
  (forall temp___212:bool. forall temp___213:bool. forall temp___214:bool.
  forall temp___215:bool. forall temp___216:bool. forall temp___217:bool.
  forall temp___218:bool. forall temp___219:bool. forall temp___220:bool.
  forall temp___221:bool. forall temp___222:bool. forall temp___223:bool.
  forall temp___224:bool. forall temp___225:bool. forall temp___226:bool.
  forall temp___227:bool. (((((((get(temp___210(temp___212, temp___213,
  temp___214, temp___215, temp___216, temp___217, temp___218, temp___219,
  temp___220, temp___221, temp___222, temp___223, temp___224, temp___225,
  temp___226, temp___227), 0, 0) = temp___212) and
  (get(temp___210(temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224, temp___225, temp___226, temp___227), 0,
  1) = temp___213)) and (get(temp___210(temp___212, temp___213, temp___214,
  temp___215, temp___216, temp___217, temp___218, temp___219, temp___220,
  temp___221, temp___222, temp___223, temp___224, temp___225, temp___226,
  temp___227), 0, 2) = temp___214)) and (get(temp___210(temp___212,
  temp___213, temp___214, temp___215, temp___216, temp___217, temp___218,
  temp___219, temp___220, temp___221, temp___222, temp___223, temp___224,
  temp___225, temp___226, temp___227), 0, 3) = temp___215)) and
  ((((get(temp___210(temp___212, temp___213, temp___214, temp___215,
  temp___216, temp___217, temp___218, temp___219, temp___220, temp___221,
  temp___222, temp___223, temp___224, temp___225, temp___226, temp___227), 1,
  0) = temp___216) and (get(temp___210(temp___212, temp___213, temp___214,
  temp___215, temp___216, temp___217, temp___218, temp___219, temp___220,
  temp___221, temp___222, temp___223, temp___224, temp___225, temp___226,
  temp___227), 1, 1) = temp___217)) and (get(temp___210(temp___212,
  temp___213, temp___214, temp___215, temp___216, temp___217, temp___218,
  temp___219, temp___220, temp___221, temp___222, temp___223, temp___224,
  temp___225, temp___226, temp___227), 1, 2) = temp___218)) and
  (get(temp___210(temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224, temp___225, temp___226, temp___227), 1,
  3) = temp___219))) and ((((get(temp___210(temp___212, temp___213,
  temp___214, temp___215, temp___216, temp___217, temp___218, temp___219,
  temp___220, temp___221, temp___222, temp___223, temp___224, temp___225,
  temp___226, temp___227), 2, 0) = temp___220) and
  (get(temp___210(temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224, temp___225, temp___226, temp___227), 2,
  1) = temp___221)) and (get(temp___210(temp___212, temp___213, temp___214,
  temp___215, temp___216, temp___217, temp___218, temp___219, temp___220,
  temp___221, temp___222, temp___223, temp___224, temp___225, temp___226,
  temp___227), 2, 2) = temp___222)) and (get(temp___210(temp___212,
  temp___213, temp___214, temp___215, temp___216, temp___217, temp___218,
  temp___219, temp___220, temp___221, temp___222, temp___223, temp___224,
  temp___225, temp___226, temp___227), 2, 3) = temp___223))) and
  ((((get(temp___210(temp___212, temp___213, temp___214, temp___215,
  temp___216, temp___217, temp___218, temp___219, temp___220, temp___221,
  temp___222, temp___223, temp___224, temp___225, temp___226, temp___227), 3,
  0) = temp___224) and (get(temp___210(temp___212, temp___213, temp___214,
  temp___215, temp___216, temp___217, temp___218, temp___219, temp___220,
  temp___221, temp___222, temp___223, temp___224, temp___225, temp___226,
  temp___227), 3, 1) = temp___225)) and (get(temp___210(temp___212,
  temp___213, temp___214, temp___215, temp___216, temp___217, temp___218,
  temp___219, temp___220, temp___221, temp___222, temp___223, temp___224,
  temp___225, temp___226, temp___227), 3, 2) = temp___226)) and
  (get(temp___210(temp___212, temp___213, temp___214, temp___215, temp___216,
  temp___217, temp___218, temp___219, temp___220, temp___221, temp___222,
  temp___223, temp___224, temp___225, temp___226, temp___227), 3,
  3) = temp___227))))

logic dummy15 : map

logic value__size3 : int

logic object__size3 : map -> int

logic value__component__size2 : int

logic object__component__size2 : map -> int

logic value__alignment3 : int

logic object__alignment3 : map -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (forall a:map. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:map. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 : (forall a:map. (0 <= object__alignment3(a)))

logic user_eq12 : map, map -> bool

type map1

type map__ref4 = { map__content4 : map1
}

logic get1 : map1, int, int -> map

logic set1 : map1, int, int, map -> map1

axiom Select_eq1 :
  (forall m:map1.
  (forall i:int.
  (forall j:int.
  (forall a:map [set1(m, i, j, a)]. (get1(set1(m, i, j, a), i, j) = a)))))

axiom Select_neq1 :
  (forall m:map1.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:map [get1(set1(m, i, j, a), i2, j2)| set1(m, i, j, a), get1(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get1(set1(m, i, j, a), i2,
  j2) = get1(m, i2, j2)))))))

logic slide4 : map1, int, int, int, int -> map1

axiom slide_def4 :
  (forall a:map1.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get1(slide4(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get1(slide4(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get1(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

logic bool_eq16 : map1, int, int, int, int, map1, int, int, int, int -> bool

axiom bool_eq_def15 :
  (forall a:map1. forall a__first:int. forall a__last:int.
  forall a__first_2:int. forall a__last_2:int. forall b:map1.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int [bool_eq16(a, a__first, a__last, a__first_2,
  a__last_2, b, b__first, b__last, b__first_2, b__last_2)].
  (((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) and ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) or
  ((not (a__first_2 <= a__last_2)) and (b__last_2 <  b__first_2)))) and
  (forall temp___idx_230:int. forall temp___idx_231:int.
  (((((a__first <= temp___idx_230) and (temp___idx_230 <= a__last)) and
  ((a__first_2 <= temp___idx_231) and (temp___idx_231 <= a__last_2))) and
  (bool_eq14(get1(a, temp___idx_230, temp___idx_231), 0, 2, 0, 2, get1(b,
  ((b__first - a__first) + temp___idx_230),
  ((b__first_2 - a__first_2) + temp___idx_231)), 0, 2, 0, 2) = true)) or
  (not (((a__first <= temp___idx_230) and (temp___idx_230 <= a__last)) and
  ((a__first_2 <= temp___idx_231) and (temp___idx_231 <= a__last_2))))))) ->
  (bool_eq16(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = true)) and
  ((not (((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_230:int. forall temp___idx_231:int.
  ((((a__first <= temp___idx_230) and (temp___idx_230 <= a__last)) and
  ((a__first_2 <= temp___idx_231) and (temp___idx_231 <= a__last_2))) ->
  (bool_eq14(get1(a, temp___idx_230, temp___idx_231), 0, 2, 0, 2, get1(b,
  ((b__first - a__first) + temp___idx_230),
  ((b__first_2 - a__first_2) + temp___idx_231)), 0, 2, 0, 2) = true))))) ->
  (bool_eq16(a, a__first, a__last, a__first_2, a__last_2, b, b__first,
  b__last, b__first_2, b__last_2) = false))))

axiom bool_eq_rev4 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq16(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> (((((a__first <= a__last) ->
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (((a__first_2 <= a__last_2) -> ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)))) and
  ((not (a__first_2 <= a__last_2)) -> (b__last_2 <  b__first_2)))) and
  (forall temp___idx_230:int. forall temp___idx_231:int.
  ((((a__first <= temp___idx_230) and (temp___idx_230 <= a__last)) and
  ((a__first_2 <= temp___idx_231) and (temp___idx_231 <= a__last_2))) ->
  (bool_eq14(get1(a, temp___idx_230, temp___idx_231), 0, 2, 0, 2, get1(b,
  ((b__first - a__first) + temp___idx_230),
  ((b__first_2 - a__first_2) + temp___idx_231)), 0, 2, 0, 2) = true)))))))

logic possible_three_shapes : map1

logic attr__ATTRIBUTE_ADDRESS4 : int

logic patris__possible_three_shapes__aggregate_def : map, map, map, map, map,
  map, map, map, map, map, map, map, map, map, map, map, map, map, map,
  map -> map1

axiom def_axiom5 :
  (forall temp___233:map. forall temp___234:map. forall temp___235:map.
  forall temp___236:map. forall temp___237:map. forall temp___238:map.
  forall temp___239:map. forall temp___240:map. forall temp___241:map.
  forall temp___242:map. forall temp___243:map. forall temp___244:map.
  forall temp___245:map. forall temp___246:map. forall temp___247:map.
  forall temp___248:map. forall temp___249:map. forall temp___250:map.
  forall temp___251:map. forall temp___252:map.
  ((((((((get1(patris__possible_three_shapes__aggregate_def(temp___233,
  temp___234, temp___235, temp___236, temp___237, temp___238, temp___239,
  temp___240, temp___241, temp___242, temp___243, temp___244, temp___245,
  temp___246, temp___247, temp___248, temp___249, temp___250, temp___251,
  temp___252), 3, 0) = temp___233) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 3,
  1) = temp___234)) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 3,
  2) = temp___235)) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 3,
  3) = temp___236)) and
  ((((get1(patris__possible_three_shapes__aggregate_def(temp___233,
  temp___234, temp___235, temp___236, temp___237, temp___238, temp___239,
  temp___240, temp___241, temp___242, temp___243, temp___244, temp___245,
  temp___246, temp___247, temp___248, temp___249, temp___250, temp___251,
  temp___252), 4, 0) = temp___237) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 4,
  1) = temp___238)) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 4,
  2) = temp___239)) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 4,
  3) = temp___240))) and
  ((((get1(patris__possible_three_shapes__aggregate_def(temp___233,
  temp___234, temp___235, temp___236, temp___237, temp___238, temp___239,
  temp___240, temp___241, temp___242, temp___243, temp___244, temp___245,
  temp___246, temp___247, temp___248, temp___249, temp___250, temp___251,
  temp___252), 5, 0) = temp___241) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 5,
  1) = temp___242)) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 5,
  2) = temp___243)) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 5,
  3) = temp___244))) and
  ((((get1(patris__possible_three_shapes__aggregate_def(temp___233,
  temp___234, temp___235, temp___236, temp___237, temp___238, temp___239,
  temp___240, temp___241, temp___242, temp___243, temp___244, temp___245,
  temp___246, temp___247, temp___248, temp___249, temp___250, temp___251,
  temp___252), 6, 0) = temp___245) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 6,
  1) = temp___246)) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 6,
  2) = temp___247)) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 6,
  3) = temp___248))) and
  ((((get1(patris__possible_three_shapes__aggregate_def(temp___233,
  temp___234, temp___235, temp___236, temp___237, temp___238, temp___239,
  temp___240, temp___241, temp___242, temp___243, temp___244, temp___245,
  temp___246, temp___247, temp___248, temp___249, temp___250, temp___251,
  temp___252), 7, 0) = temp___249) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 7,
  1) = temp___250)) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 7,
  2) = temp___251)) and
  (get1(patris__possible_three_shapes__aggregate_def(temp___233, temp___234,
  temp___235, temp___236, temp___237, temp___238, temp___239, temp___240,
  temp___241, temp___242, temp___243, temp___244, temp___245, temp___246,
  temp___247, temp___248, temp___249, temp___250, temp___251, temp___252), 7,
  3) = temp___252))))

logic temp___255 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom6 :
  (forall temp___257:bool. forall temp___258:bool. forall temp___259:bool.
  forall temp___260:bool. forall temp___261:bool. forall temp___262:bool.
  forall temp___263:bool. forall temp___264:bool. forall temp___265:bool.
  (((((get(temp___255(temp___257, temp___258, temp___259, temp___260,
  temp___261, temp___262, temp___263, temp___264, temp___265), 0,
  0) = temp___257) and (get(temp___255(temp___257, temp___258, temp___259,
  temp___260, temp___261, temp___262, temp___263, temp___264, temp___265), 0,
  1) = temp___258)) and (get(temp___255(temp___257, temp___258, temp___259,
  temp___260, temp___261, temp___262, temp___263, temp___264, temp___265), 0,
  2) = temp___259)) and (((get(temp___255(temp___257, temp___258, temp___259,
  temp___260, temp___261, temp___262, temp___263, temp___264, temp___265), 1,
  0) = temp___260) and (get(temp___255(temp___257, temp___258, temp___259,
  temp___260, temp___261, temp___262, temp___263, temp___264, temp___265), 1,
  1) = temp___261)) and (get(temp___255(temp___257, temp___258, temp___259,
  temp___260, temp___261, temp___262, temp___263, temp___264, temp___265), 1,
  2) = temp___262))) and (((get(temp___255(temp___257, temp___258,
  temp___259, temp___260, temp___261, temp___262, temp___263, temp___264,
  temp___265), 2, 0) = temp___263) and (get(temp___255(temp___257,
  temp___258, temp___259, temp___260, temp___261, temp___262, temp___263,
  temp___264, temp___265), 2, 1) = temp___264)) and
  (get(temp___255(temp___257, temp___258, temp___259, temp___260, temp___261,
  temp___262, temp___263, temp___264, temp___265), 2, 2) = temp___265))))

logic temp___268 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom7 :
  (forall temp___270:bool. forall temp___271:bool. forall temp___272:bool.
  forall temp___273:bool. forall temp___274:bool. forall temp___275:bool.
  forall temp___276:bool. forall temp___277:bool. forall temp___278:bool.
  (((((get(temp___268(temp___270, temp___271, temp___272, temp___273,
  temp___274, temp___275, temp___276, temp___277, temp___278), 0,
  0) = temp___270) and (get(temp___268(temp___270, temp___271, temp___272,
  temp___273, temp___274, temp___275, temp___276, temp___277, temp___278), 0,
  1) = temp___271)) and (get(temp___268(temp___270, temp___271, temp___272,
  temp___273, temp___274, temp___275, temp___276, temp___277, temp___278), 0,
  2) = temp___272)) and (((get(temp___268(temp___270, temp___271, temp___272,
  temp___273, temp___274, temp___275, temp___276, temp___277, temp___278), 1,
  0) = temp___273) and (get(temp___268(temp___270, temp___271, temp___272,
  temp___273, temp___274, temp___275, temp___276, temp___277, temp___278), 1,
  1) = temp___274)) and (get(temp___268(temp___270, temp___271, temp___272,
  temp___273, temp___274, temp___275, temp___276, temp___277, temp___278), 1,
  2) = temp___275))) and (((get(temp___268(temp___270, temp___271,
  temp___272, temp___273, temp___274, temp___275, temp___276, temp___277,
  temp___278), 2, 0) = temp___276) and (get(temp___268(temp___270,
  temp___271, temp___272, temp___273, temp___274, temp___275, temp___276,
  temp___277, temp___278), 2, 1) = temp___277)) and
  (get(temp___268(temp___270, temp___271, temp___272, temp___273, temp___274,
  temp___275, temp___276, temp___277, temp___278), 2, 2) = temp___278))))

logic temp___281 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom8 :
  (forall temp___283:bool. forall temp___284:bool. forall temp___285:bool.
  forall temp___286:bool. forall temp___287:bool. forall temp___288:bool.
  forall temp___289:bool. forall temp___290:bool. forall temp___291:bool.
  (((((get(temp___281(temp___283, temp___284, temp___285, temp___286,
  temp___287, temp___288, temp___289, temp___290, temp___291), 0,
  0) = temp___283) and (get(temp___281(temp___283, temp___284, temp___285,
  temp___286, temp___287, temp___288, temp___289, temp___290, temp___291), 0,
  1) = temp___284)) and (get(temp___281(temp___283, temp___284, temp___285,
  temp___286, temp___287, temp___288, temp___289, temp___290, temp___291), 0,
  2) = temp___285)) and (((get(temp___281(temp___283, temp___284, temp___285,
  temp___286, temp___287, temp___288, temp___289, temp___290, temp___291), 1,
  0) = temp___286) and (get(temp___281(temp___283, temp___284, temp___285,
  temp___286, temp___287, temp___288, temp___289, temp___290, temp___291), 1,
  1) = temp___287)) and (get(temp___281(temp___283, temp___284, temp___285,
  temp___286, temp___287, temp___288, temp___289, temp___290, temp___291), 1,
  2) = temp___288))) and (((get(temp___281(temp___283, temp___284,
  temp___285, temp___286, temp___287, temp___288, temp___289, temp___290,
  temp___291), 2, 0) = temp___289) and (get(temp___281(temp___283,
  temp___284, temp___285, temp___286, temp___287, temp___288, temp___289,
  temp___290, temp___291), 2, 1) = temp___290)) and
  (get(temp___281(temp___283, temp___284, temp___285, temp___286, temp___287,
  temp___288, temp___289, temp___290, temp___291), 2, 2) = temp___291))))

logic temp___294 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom9 :
  (forall temp___296:bool. forall temp___297:bool. forall temp___298:bool.
  forall temp___299:bool. forall temp___300:bool. forall temp___301:bool.
  forall temp___302:bool. forall temp___303:bool. forall temp___304:bool.
  (((((get(temp___294(temp___296, temp___297, temp___298, temp___299,
  temp___300, temp___301, temp___302, temp___303, temp___304), 0,
  0) = temp___296) and (get(temp___294(temp___296, temp___297, temp___298,
  temp___299, temp___300, temp___301, temp___302, temp___303, temp___304), 0,
  1) = temp___297)) and (get(temp___294(temp___296, temp___297, temp___298,
  temp___299, temp___300, temp___301, temp___302, temp___303, temp___304), 0,
  2) = temp___298)) and (((get(temp___294(temp___296, temp___297, temp___298,
  temp___299, temp___300, temp___301, temp___302, temp___303, temp___304), 1,
  0) = temp___299) and (get(temp___294(temp___296, temp___297, temp___298,
  temp___299, temp___300, temp___301, temp___302, temp___303, temp___304), 1,
  1) = temp___300)) and (get(temp___294(temp___296, temp___297, temp___298,
  temp___299, temp___300, temp___301, temp___302, temp___303, temp___304), 1,
  2) = temp___301))) and (((get(temp___294(temp___296, temp___297,
  temp___298, temp___299, temp___300, temp___301, temp___302, temp___303,
  temp___304), 2, 0) = temp___302) and (get(temp___294(temp___296,
  temp___297, temp___298, temp___299, temp___300, temp___301, temp___302,
  temp___303, temp___304), 2, 1) = temp___303)) and
  (get(temp___294(temp___296, temp___297, temp___298, temp___299, temp___300,
  temp___301, temp___302, temp___303, temp___304), 2, 2) = temp___304))))

logic temp___307 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom10 :
  (forall temp___309:bool. forall temp___310:bool. forall temp___311:bool.
  forall temp___312:bool. forall temp___313:bool. forall temp___314:bool.
  forall temp___315:bool. forall temp___316:bool. forall temp___317:bool.
  (((((get(temp___307(temp___309, temp___310, temp___311, temp___312,
  temp___313, temp___314, temp___315, temp___316, temp___317), 0,
  0) = temp___309) and (get(temp___307(temp___309, temp___310, temp___311,
  temp___312, temp___313, temp___314, temp___315, temp___316, temp___317), 0,
  1) = temp___310)) and (get(temp___307(temp___309, temp___310, temp___311,
  temp___312, temp___313, temp___314, temp___315, temp___316, temp___317), 0,
  2) = temp___311)) and (((get(temp___307(temp___309, temp___310, temp___311,
  temp___312, temp___313, temp___314, temp___315, temp___316, temp___317), 1,
  0) = temp___312) and (get(temp___307(temp___309, temp___310, temp___311,
  temp___312, temp___313, temp___314, temp___315, temp___316, temp___317), 1,
  1) = temp___313)) and (get(temp___307(temp___309, temp___310, temp___311,
  temp___312, temp___313, temp___314, temp___315, temp___316, temp___317), 1,
  2) = temp___314))) and (((get(temp___307(temp___309, temp___310,
  temp___311, temp___312, temp___313, temp___314, temp___315, temp___316,
  temp___317), 2, 0) = temp___315) and (get(temp___307(temp___309,
  temp___310, temp___311, temp___312, temp___313, temp___314, temp___315,
  temp___316, temp___317), 2, 1) = temp___316)) and
  (get(temp___307(temp___309, temp___310, temp___311, temp___312, temp___313,
  temp___314, temp___315, temp___316, temp___317), 2, 2) = temp___317))))

logic temp___320 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom11 :
  (forall temp___322:bool. forall temp___323:bool. forall temp___324:bool.
  forall temp___325:bool. forall temp___326:bool. forall temp___327:bool.
  forall temp___328:bool. forall temp___329:bool. forall temp___330:bool.
  (((((get(temp___320(temp___322, temp___323, temp___324, temp___325,
  temp___326, temp___327, temp___328, temp___329, temp___330), 0,
  0) = temp___322) and (get(temp___320(temp___322, temp___323, temp___324,
  temp___325, temp___326, temp___327, temp___328, temp___329, temp___330), 0,
  1) = temp___323)) and (get(temp___320(temp___322, temp___323, temp___324,
  temp___325, temp___326, temp___327, temp___328, temp___329, temp___330), 0,
  2) = temp___324)) and (((get(temp___320(temp___322, temp___323, temp___324,
  temp___325, temp___326, temp___327, temp___328, temp___329, temp___330), 1,
  0) = temp___325) and (get(temp___320(temp___322, temp___323, temp___324,
  temp___325, temp___326, temp___327, temp___328, temp___329, temp___330), 1,
  1) = temp___326)) and (get(temp___320(temp___322, temp___323, temp___324,
  temp___325, temp___326, temp___327, temp___328, temp___329, temp___330), 1,
  2) = temp___327))) and (((get(temp___320(temp___322, temp___323,
  temp___324, temp___325, temp___326, temp___327, temp___328, temp___329,
  temp___330), 2, 0) = temp___328) and (get(temp___320(temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329, temp___330), 2, 1) = temp___329)) and
  (get(temp___320(temp___322, temp___323, temp___324, temp___325, temp___326,
  temp___327, temp___328, temp___329, temp___330), 2, 2) = temp___330))))

logic temp___333 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom12 :
  (forall temp___335:bool. forall temp___336:bool. forall temp___337:bool.
  forall temp___338:bool. forall temp___339:bool. forall temp___340:bool.
  forall temp___341:bool. forall temp___342:bool. forall temp___343:bool.
  (((((get(temp___333(temp___335, temp___336, temp___337, temp___338,
  temp___339, temp___340, temp___341, temp___342, temp___343), 0,
  0) = temp___335) and (get(temp___333(temp___335, temp___336, temp___337,
  temp___338, temp___339, temp___340, temp___341, temp___342, temp___343), 0,
  1) = temp___336)) and (get(temp___333(temp___335, temp___336, temp___337,
  temp___338, temp___339, temp___340, temp___341, temp___342, temp___343), 0,
  2) = temp___337)) and (((get(temp___333(temp___335, temp___336, temp___337,
  temp___338, temp___339, temp___340, temp___341, temp___342, temp___343), 1,
  0) = temp___338) and (get(temp___333(temp___335, temp___336, temp___337,
  temp___338, temp___339, temp___340, temp___341, temp___342, temp___343), 1,
  1) = temp___339)) and (get(temp___333(temp___335, temp___336, temp___337,
  temp___338, temp___339, temp___340, temp___341, temp___342, temp___343), 1,
  2) = temp___340))) and (((get(temp___333(temp___335, temp___336,
  temp___337, temp___338, temp___339, temp___340, temp___341, temp___342,
  temp___343), 2, 0) = temp___341) and (get(temp___333(temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342, temp___343), 2, 1) = temp___342)) and
  (get(temp___333(temp___335, temp___336, temp___337, temp___338, temp___339,
  temp___340, temp___341, temp___342, temp___343), 2, 2) = temp___343))))

logic temp___346 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom13 :
  (forall temp___348:bool. forall temp___349:bool. forall temp___350:bool.
  forall temp___351:bool. forall temp___352:bool. forall temp___353:bool.
  forall temp___354:bool. forall temp___355:bool. forall temp___356:bool.
  (((((get(temp___346(temp___348, temp___349, temp___350, temp___351,
  temp___352, temp___353, temp___354, temp___355, temp___356), 0,
  0) = temp___348) and (get(temp___346(temp___348, temp___349, temp___350,
  temp___351, temp___352, temp___353, temp___354, temp___355, temp___356), 0,
  1) = temp___349)) and (get(temp___346(temp___348, temp___349, temp___350,
  temp___351, temp___352, temp___353, temp___354, temp___355, temp___356), 0,
  2) = temp___350)) and (((get(temp___346(temp___348, temp___349, temp___350,
  temp___351, temp___352, temp___353, temp___354, temp___355, temp___356), 1,
  0) = temp___351) and (get(temp___346(temp___348, temp___349, temp___350,
  temp___351, temp___352, temp___353, temp___354, temp___355, temp___356), 1,
  1) = temp___352)) and (get(temp___346(temp___348, temp___349, temp___350,
  temp___351, temp___352, temp___353, temp___354, temp___355, temp___356), 1,
  2) = temp___353))) and (((get(temp___346(temp___348, temp___349,
  temp___350, temp___351, temp___352, temp___353, temp___354, temp___355,
  temp___356), 2, 0) = temp___354) and (get(temp___346(temp___348,
  temp___349, temp___350, temp___351, temp___352, temp___353, temp___354,
  temp___355, temp___356), 2, 1) = temp___355)) and
  (get(temp___346(temp___348, temp___349, temp___350, temp___351, temp___352,
  temp___353, temp___354, temp___355, temp___356), 2, 2) = temp___356))))

logic temp___359 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom14 :
  (forall temp___361:bool. forall temp___362:bool. forall temp___363:bool.
  forall temp___364:bool. forall temp___365:bool. forall temp___366:bool.
  forall temp___367:bool. forall temp___368:bool. forall temp___369:bool.
  (((((get(temp___359(temp___361, temp___362, temp___363, temp___364,
  temp___365, temp___366, temp___367, temp___368, temp___369), 0,
  0) = temp___361) and (get(temp___359(temp___361, temp___362, temp___363,
  temp___364, temp___365, temp___366, temp___367, temp___368, temp___369), 0,
  1) = temp___362)) and (get(temp___359(temp___361, temp___362, temp___363,
  temp___364, temp___365, temp___366, temp___367, temp___368, temp___369), 0,
  2) = temp___363)) and (((get(temp___359(temp___361, temp___362, temp___363,
  temp___364, temp___365, temp___366, temp___367, temp___368, temp___369), 1,
  0) = temp___364) and (get(temp___359(temp___361, temp___362, temp___363,
  temp___364, temp___365, temp___366, temp___367, temp___368, temp___369), 1,
  1) = temp___365)) and (get(temp___359(temp___361, temp___362, temp___363,
  temp___364, temp___365, temp___366, temp___367, temp___368, temp___369), 1,
  2) = temp___366))) and (((get(temp___359(temp___361, temp___362,
  temp___363, temp___364, temp___365, temp___366, temp___367, temp___368,
  temp___369), 2, 0) = temp___367) and (get(temp___359(temp___361,
  temp___362, temp___363, temp___364, temp___365, temp___366, temp___367,
  temp___368, temp___369), 2, 1) = temp___368)) and
  (get(temp___359(temp___361, temp___362, temp___363, temp___364, temp___365,
  temp___366, temp___367, temp___368, temp___369), 2, 2) = temp___369))))

logic temp___372 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom15 :
  (forall temp___374:bool. forall temp___375:bool. forall temp___376:bool.
  forall temp___377:bool. forall temp___378:bool. forall temp___379:bool.
  forall temp___380:bool. forall temp___381:bool. forall temp___382:bool.
  (((((get(temp___372(temp___374, temp___375, temp___376, temp___377,
  temp___378, temp___379, temp___380, temp___381, temp___382), 0,
  0) = temp___374) and (get(temp___372(temp___374, temp___375, temp___376,
  temp___377, temp___378, temp___379, temp___380, temp___381, temp___382), 0,
  1) = temp___375)) and (get(temp___372(temp___374, temp___375, temp___376,
  temp___377, temp___378, temp___379, temp___380, temp___381, temp___382), 0,
  2) = temp___376)) and (((get(temp___372(temp___374, temp___375, temp___376,
  temp___377, temp___378, temp___379, temp___380, temp___381, temp___382), 1,
  0) = temp___377) and (get(temp___372(temp___374, temp___375, temp___376,
  temp___377, temp___378, temp___379, temp___380, temp___381, temp___382), 1,
  1) = temp___378)) and (get(temp___372(temp___374, temp___375, temp___376,
  temp___377, temp___378, temp___379, temp___380, temp___381, temp___382), 1,
  2) = temp___379))) and (((get(temp___372(temp___374, temp___375,
  temp___376, temp___377, temp___378, temp___379, temp___380, temp___381,
  temp___382), 2, 0) = temp___380) and (get(temp___372(temp___374,
  temp___375, temp___376, temp___377, temp___378, temp___379, temp___380,
  temp___381, temp___382), 2, 1) = temp___381)) and
  (get(temp___372(temp___374, temp___375, temp___376, temp___377, temp___378,
  temp___379, temp___380, temp___381, temp___382), 2, 2) = temp___382))))

logic temp___385 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom16 :
  (forall temp___387:bool. forall temp___388:bool. forall temp___389:bool.
  forall temp___390:bool. forall temp___391:bool. forall temp___392:bool.
  forall temp___393:bool. forall temp___394:bool. forall temp___395:bool.
  (((((get(temp___385(temp___387, temp___388, temp___389, temp___390,
  temp___391, temp___392, temp___393, temp___394, temp___395), 0,
  0) = temp___387) and (get(temp___385(temp___387, temp___388, temp___389,
  temp___390, temp___391, temp___392, temp___393, temp___394, temp___395), 0,
  1) = temp___388)) and (get(temp___385(temp___387, temp___388, temp___389,
  temp___390, temp___391, temp___392, temp___393, temp___394, temp___395), 0,
  2) = temp___389)) and (((get(temp___385(temp___387, temp___388, temp___389,
  temp___390, temp___391, temp___392, temp___393, temp___394, temp___395), 1,
  0) = temp___390) and (get(temp___385(temp___387, temp___388, temp___389,
  temp___390, temp___391, temp___392, temp___393, temp___394, temp___395), 1,
  1) = temp___391)) and (get(temp___385(temp___387, temp___388, temp___389,
  temp___390, temp___391, temp___392, temp___393, temp___394, temp___395), 1,
  2) = temp___392))) and (((get(temp___385(temp___387, temp___388,
  temp___389, temp___390, temp___391, temp___392, temp___393, temp___394,
  temp___395), 2, 0) = temp___393) and (get(temp___385(temp___387,
  temp___388, temp___389, temp___390, temp___391, temp___392, temp___393,
  temp___394, temp___395), 2, 1) = temp___394)) and
  (get(temp___385(temp___387, temp___388, temp___389, temp___390, temp___391,
  temp___392, temp___393, temp___394, temp___395), 2, 2) = temp___395))))

logic temp___398 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom17 :
  (forall temp___400:bool. forall temp___401:bool. forall temp___402:bool.
  forall temp___403:bool. forall temp___404:bool. forall temp___405:bool.
  forall temp___406:bool. forall temp___407:bool. forall temp___408:bool.
  (((((get(temp___398(temp___400, temp___401, temp___402, temp___403,
  temp___404, temp___405, temp___406, temp___407, temp___408), 0,
  0) = temp___400) and (get(temp___398(temp___400, temp___401, temp___402,
  temp___403, temp___404, temp___405, temp___406, temp___407, temp___408), 0,
  1) = temp___401)) and (get(temp___398(temp___400, temp___401, temp___402,
  temp___403, temp___404, temp___405, temp___406, temp___407, temp___408), 0,
  2) = temp___402)) and (((get(temp___398(temp___400, temp___401, temp___402,
  temp___403, temp___404, temp___405, temp___406, temp___407, temp___408), 1,
  0) = temp___403) and (get(temp___398(temp___400, temp___401, temp___402,
  temp___403, temp___404, temp___405, temp___406, temp___407, temp___408), 1,
  1) = temp___404)) and (get(temp___398(temp___400, temp___401, temp___402,
  temp___403, temp___404, temp___405, temp___406, temp___407, temp___408), 1,
  2) = temp___405))) and (((get(temp___398(temp___400, temp___401,
  temp___402, temp___403, temp___404, temp___405, temp___406, temp___407,
  temp___408), 2, 0) = temp___406) and (get(temp___398(temp___400,
  temp___401, temp___402, temp___403, temp___404, temp___405, temp___406,
  temp___407, temp___408), 2, 1) = temp___407)) and
  (get(temp___398(temp___400, temp___401, temp___402, temp___403, temp___404,
  temp___405, temp___406, temp___407, temp___408), 2, 2) = temp___408))))

logic temp___411 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom18 :
  (forall temp___413:bool. forall temp___414:bool. forall temp___415:bool.
  forall temp___416:bool. forall temp___417:bool. forall temp___418:bool.
  forall temp___419:bool. forall temp___420:bool. forall temp___421:bool.
  (((((get(temp___411(temp___413, temp___414, temp___415, temp___416,
  temp___417, temp___418, temp___419, temp___420, temp___421), 0,
  0) = temp___413) and (get(temp___411(temp___413, temp___414, temp___415,
  temp___416, temp___417, temp___418, temp___419, temp___420, temp___421), 0,
  1) = temp___414)) and (get(temp___411(temp___413, temp___414, temp___415,
  temp___416, temp___417, temp___418, temp___419, temp___420, temp___421), 0,
  2) = temp___415)) and (((get(temp___411(temp___413, temp___414, temp___415,
  temp___416, temp___417, temp___418, temp___419, temp___420, temp___421), 1,
  0) = temp___416) and (get(temp___411(temp___413, temp___414, temp___415,
  temp___416, temp___417, temp___418, temp___419, temp___420, temp___421), 1,
  1) = temp___417)) and (get(temp___411(temp___413, temp___414, temp___415,
  temp___416, temp___417, temp___418, temp___419, temp___420, temp___421), 1,
  2) = temp___418))) and (((get(temp___411(temp___413, temp___414,
  temp___415, temp___416, temp___417, temp___418, temp___419, temp___420,
  temp___421), 2, 0) = temp___419) and (get(temp___411(temp___413,
  temp___414, temp___415, temp___416, temp___417, temp___418, temp___419,
  temp___420, temp___421), 2, 1) = temp___420)) and
  (get(temp___411(temp___413, temp___414, temp___415, temp___416, temp___417,
  temp___418, temp___419, temp___420, temp___421), 2, 2) = temp___421))))

logic temp___424 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom19 :
  (forall temp___426:bool. forall temp___427:bool. forall temp___428:bool.
  forall temp___429:bool. forall temp___430:bool. forall temp___431:bool.
  forall temp___432:bool. forall temp___433:bool. forall temp___434:bool.
  (((((get(temp___424(temp___426, temp___427, temp___428, temp___429,
  temp___430, temp___431, temp___432, temp___433, temp___434), 0,
  0) = temp___426) and (get(temp___424(temp___426, temp___427, temp___428,
  temp___429, temp___430, temp___431, temp___432, temp___433, temp___434), 0,
  1) = temp___427)) and (get(temp___424(temp___426, temp___427, temp___428,
  temp___429, temp___430, temp___431, temp___432, temp___433, temp___434), 0,
  2) = temp___428)) and (((get(temp___424(temp___426, temp___427, temp___428,
  temp___429, temp___430, temp___431, temp___432, temp___433, temp___434), 1,
  0) = temp___429) and (get(temp___424(temp___426, temp___427, temp___428,
  temp___429, temp___430, temp___431, temp___432, temp___433, temp___434), 1,
  1) = temp___430)) and (get(temp___424(temp___426, temp___427, temp___428,
  temp___429, temp___430, temp___431, temp___432, temp___433, temp___434), 1,
  2) = temp___431))) and (((get(temp___424(temp___426, temp___427,
  temp___428, temp___429, temp___430, temp___431, temp___432, temp___433,
  temp___434), 2, 0) = temp___432) and (get(temp___424(temp___426,
  temp___427, temp___428, temp___429, temp___430, temp___431, temp___432,
  temp___433, temp___434), 2, 1) = temp___433)) and
  (get(temp___424(temp___426, temp___427, temp___428, temp___429, temp___430,
  temp___431, temp___432, temp___433, temp___434), 2, 2) = temp___434))))

logic temp___437 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom20 :
  (forall temp___439:bool. forall temp___440:bool. forall temp___441:bool.
  forall temp___442:bool. forall temp___443:bool. forall temp___444:bool.
  forall temp___445:bool. forall temp___446:bool. forall temp___447:bool.
  (((((get(temp___437(temp___439, temp___440, temp___441, temp___442,
  temp___443, temp___444, temp___445, temp___446, temp___447), 0,
  0) = temp___439) and (get(temp___437(temp___439, temp___440, temp___441,
  temp___442, temp___443, temp___444, temp___445, temp___446, temp___447), 0,
  1) = temp___440)) and (get(temp___437(temp___439, temp___440, temp___441,
  temp___442, temp___443, temp___444, temp___445, temp___446, temp___447), 0,
  2) = temp___441)) and (((get(temp___437(temp___439, temp___440, temp___441,
  temp___442, temp___443, temp___444, temp___445, temp___446, temp___447), 1,
  0) = temp___442) and (get(temp___437(temp___439, temp___440, temp___441,
  temp___442, temp___443, temp___444, temp___445, temp___446, temp___447), 1,
  1) = temp___443)) and (get(temp___437(temp___439, temp___440, temp___441,
  temp___442, temp___443, temp___444, temp___445, temp___446, temp___447), 1,
  2) = temp___444))) and (((get(temp___437(temp___439, temp___440,
  temp___441, temp___442, temp___443, temp___444, temp___445, temp___446,
  temp___447), 2, 0) = temp___445) and (get(temp___437(temp___439,
  temp___440, temp___441, temp___442, temp___443, temp___444, temp___445,
  temp___446, temp___447), 2, 1) = temp___446)) and
  (get(temp___437(temp___439, temp___440, temp___441, temp___442, temp___443,
  temp___444, temp___445, temp___446, temp___447), 2, 2) = temp___447))))

logic temp___450 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom21 :
  (forall temp___452:bool. forall temp___453:bool. forall temp___454:bool.
  forall temp___455:bool. forall temp___456:bool. forall temp___457:bool.
  forall temp___458:bool. forall temp___459:bool. forall temp___460:bool.
  (((((get(temp___450(temp___452, temp___453, temp___454, temp___455,
  temp___456, temp___457, temp___458, temp___459, temp___460), 0,
  0) = temp___452) and (get(temp___450(temp___452, temp___453, temp___454,
  temp___455, temp___456, temp___457, temp___458, temp___459, temp___460), 0,
  1) = temp___453)) and (get(temp___450(temp___452, temp___453, temp___454,
  temp___455, temp___456, temp___457, temp___458, temp___459, temp___460), 0,
  2) = temp___454)) and (((get(temp___450(temp___452, temp___453, temp___454,
  temp___455, temp___456, temp___457, temp___458, temp___459, temp___460), 1,
  0) = temp___455) and (get(temp___450(temp___452, temp___453, temp___454,
  temp___455, temp___456, temp___457, temp___458, temp___459, temp___460), 1,
  1) = temp___456)) and (get(temp___450(temp___452, temp___453, temp___454,
  temp___455, temp___456, temp___457, temp___458, temp___459, temp___460), 1,
  2) = temp___457))) and (((get(temp___450(temp___452, temp___453,
  temp___454, temp___455, temp___456, temp___457, temp___458, temp___459,
  temp___460), 2, 0) = temp___458) and (get(temp___450(temp___452,
  temp___453, temp___454, temp___455, temp___456, temp___457, temp___458,
  temp___459, temp___460), 2, 1) = temp___459)) and
  (get(temp___450(temp___452, temp___453, temp___454, temp___455, temp___456,
  temp___457, temp___458, temp___459, temp___460), 2, 2) = temp___460))))

logic temp___463 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom22 :
  (forall temp___465:bool. forall temp___466:bool. forall temp___467:bool.
  forall temp___468:bool. forall temp___469:bool. forall temp___470:bool.
  forall temp___471:bool. forall temp___472:bool. forall temp___473:bool.
  (((((get(temp___463(temp___465, temp___466, temp___467, temp___468,
  temp___469, temp___470, temp___471, temp___472, temp___473), 0,
  0) = temp___465) and (get(temp___463(temp___465, temp___466, temp___467,
  temp___468, temp___469, temp___470, temp___471, temp___472, temp___473), 0,
  1) = temp___466)) and (get(temp___463(temp___465, temp___466, temp___467,
  temp___468, temp___469, temp___470, temp___471, temp___472, temp___473), 0,
  2) = temp___467)) and (((get(temp___463(temp___465, temp___466, temp___467,
  temp___468, temp___469, temp___470, temp___471, temp___472, temp___473), 1,
  0) = temp___468) and (get(temp___463(temp___465, temp___466, temp___467,
  temp___468, temp___469, temp___470, temp___471, temp___472, temp___473), 1,
  1) = temp___469)) and (get(temp___463(temp___465, temp___466, temp___467,
  temp___468, temp___469, temp___470, temp___471, temp___472, temp___473), 1,
  2) = temp___470))) and (((get(temp___463(temp___465, temp___466,
  temp___467, temp___468, temp___469, temp___470, temp___471, temp___472,
  temp___473), 2, 0) = temp___471) and (get(temp___463(temp___465,
  temp___466, temp___467, temp___468, temp___469, temp___470, temp___471,
  temp___472, temp___473), 2, 1) = temp___472)) and
  (get(temp___463(temp___465, temp___466, temp___467, temp___468, temp___469,
  temp___470, temp___471, temp___472, temp___473), 2, 2) = temp___473))))

logic temp___476 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom23 :
  (forall temp___478:bool. forall temp___479:bool. forall temp___480:bool.
  forall temp___481:bool. forall temp___482:bool. forall temp___483:bool.
  forall temp___484:bool. forall temp___485:bool. forall temp___486:bool.
  (((((get(temp___476(temp___478, temp___479, temp___480, temp___481,
  temp___482, temp___483, temp___484, temp___485, temp___486), 0,
  0) = temp___478) and (get(temp___476(temp___478, temp___479, temp___480,
  temp___481, temp___482, temp___483, temp___484, temp___485, temp___486), 0,
  1) = temp___479)) and (get(temp___476(temp___478, temp___479, temp___480,
  temp___481, temp___482, temp___483, temp___484, temp___485, temp___486), 0,
  2) = temp___480)) and (((get(temp___476(temp___478, temp___479, temp___480,
  temp___481, temp___482, temp___483, temp___484, temp___485, temp___486), 1,
  0) = temp___481) and (get(temp___476(temp___478, temp___479, temp___480,
  temp___481, temp___482, temp___483, temp___484, temp___485, temp___486), 1,
  1) = temp___482)) and (get(temp___476(temp___478, temp___479, temp___480,
  temp___481, temp___482, temp___483, temp___484, temp___485, temp___486), 1,
  2) = temp___483))) and (((get(temp___476(temp___478, temp___479,
  temp___480, temp___481, temp___482, temp___483, temp___484, temp___485,
  temp___486), 2, 0) = temp___484) and (get(temp___476(temp___478,
  temp___479, temp___480, temp___481, temp___482, temp___483, temp___484,
  temp___485, temp___486), 2, 1) = temp___485)) and
  (get(temp___476(temp___478, temp___479, temp___480, temp___481, temp___482,
  temp___483, temp___484, temp___485, temp___486), 2, 2) = temp___486))))

logic temp___489 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom24 :
  (forall temp___491:bool. forall temp___492:bool. forall temp___493:bool.
  forall temp___494:bool. forall temp___495:bool. forall temp___496:bool.
  forall temp___497:bool. forall temp___498:bool. forall temp___499:bool.
  (((((get(temp___489(temp___491, temp___492, temp___493, temp___494,
  temp___495, temp___496, temp___497, temp___498, temp___499), 0,
  0) = temp___491) and (get(temp___489(temp___491, temp___492, temp___493,
  temp___494, temp___495, temp___496, temp___497, temp___498, temp___499), 0,
  1) = temp___492)) and (get(temp___489(temp___491, temp___492, temp___493,
  temp___494, temp___495, temp___496, temp___497, temp___498, temp___499), 0,
  2) = temp___493)) and (((get(temp___489(temp___491, temp___492, temp___493,
  temp___494, temp___495, temp___496, temp___497, temp___498, temp___499), 1,
  0) = temp___494) and (get(temp___489(temp___491, temp___492, temp___493,
  temp___494, temp___495, temp___496, temp___497, temp___498, temp___499), 1,
  1) = temp___495)) and (get(temp___489(temp___491, temp___492, temp___493,
  temp___494, temp___495, temp___496, temp___497, temp___498, temp___499), 1,
  2) = temp___496))) and (((get(temp___489(temp___491, temp___492,
  temp___493, temp___494, temp___495, temp___496, temp___497, temp___498,
  temp___499), 2, 0) = temp___497) and (get(temp___489(temp___491,
  temp___492, temp___493, temp___494, temp___495, temp___496, temp___497,
  temp___498, temp___499), 2, 1) = temp___498)) and
  (get(temp___489(temp___491, temp___492, temp___493, temp___494, temp___495,
  temp___496, temp___497, temp___498, temp___499), 2, 2) = temp___499))))

logic temp___502 : bool, bool, bool, bool, bool, bool, bool, bool,
  bool -> map

axiom def_axiom25 :
  (forall temp___504:bool. forall temp___505:bool. forall temp___506:bool.
  forall temp___507:bool. forall temp___508:bool. forall temp___509:bool.
  forall temp___510:bool. forall temp___511:bool. forall temp___512:bool.
  (((((get(temp___502(temp___504, temp___505, temp___506, temp___507,
  temp___508, temp___509, temp___510, temp___511, temp___512), 0,
  0) = temp___504) and (get(temp___502(temp___504, temp___505, temp___506,
  temp___507, temp___508, temp___509, temp___510, temp___511, temp___512), 0,
  1) = temp___505)) and (get(temp___502(temp___504, temp___505, temp___506,
  temp___507, temp___508, temp___509, temp___510, temp___511, temp___512), 0,
  2) = temp___506)) and (((get(temp___502(temp___504, temp___505, temp___506,
  temp___507, temp___508, temp___509, temp___510, temp___511, temp___512), 1,
  0) = temp___507) and (get(temp___502(temp___504, temp___505, temp___506,
  temp___507, temp___508, temp___509, temp___510, temp___511, temp___512), 1,
  1) = temp___508)) and (get(temp___502(temp___504, temp___505, temp___506,
  temp___507, temp___508, temp___509, temp___510, temp___511, temp___512), 1,
  2) = temp___509))) and (((get(temp___502(temp___504, temp___505,
  temp___506, temp___507, temp___508, temp___509, temp___510, temp___511,
  temp___512), 2, 0) = temp___510) and (get(temp___502(temp___504,
  temp___505, temp___506, temp___507, temp___508, temp___509, temp___510,
  temp___511, temp___512), 2, 1) = temp___511)) and
  (get(temp___502(temp___504, temp___505, temp___506, temp___507, temp___508,
  temp___509, temp___510, temp___511, temp___512), 2, 2) = temp___512))))

logic is_empty : (int,(int,cell) farray) farray, int, int -> bool

logic is_empty__function_guard : bool, (int,(int,cell) farray) farray, int,
  int -> prop

type integer

predicate in_range10(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def16 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : integer, integer -> bool

logic dummy16 : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

axiom is_empty__post_axiom : true

axiom is_empty__def_axiom :
  (forall b:(int,(int,cell) farray) farray.
  (forall y:int. forall x:int [is_empty(b, y, x)]. ((is_empty(b, y,
  x) = true) <-> ((in_range4(x) and in_range5(y)) and
  (to_rep(((b[y])[x])) = 0)))))

logic valid_configuration__2 : int, us_split_fields,
  (int,(int,cell) farray) farray -> bool

logic valid_configuration__2__function_guard : bool, int, us_split_fields,
  (int,(int,cell) farray) farray -> prop

logic get_board : (int,(int,cell) farray) farray -> (int,(int,cell) farray) farray

logic get_board__function_guard : (int,(int,cell) farray) farray,
  (int,(int,cell) farray) farray -> prop

logic get_piece : us_split_fields -> us_rep

logic get_piece__function_guard : us_rep, us_split_fields -> prop

logic valid_configuration : (int,(int,cell) farray) farray, int,
  us_rep -> bool

logic valid_configuration__function_guard : bool,
  (int,(int,cell) farray) farray, int, us_rep -> prop

axiom valid_configuration__2__post_axiom : true

axiom valid_configuration__2__def_axiom :
  (forall patris__cur_state:int.
  (forall patris__cur_piece__fields:shape.
  forall patris__cur_piece__fields1:direction.
  forall patris__cur_piece__fields2:px_coord.
  forall patris__cur_piece__fields3:py_coord.
  (forall patris__cur_board:(int,(int,cell) farray) farray
  [valid_configuration__2(patris__cur_state, { rec__patris__piece__s =
  patris__cur_piece__fields; rec__patris__piece__d =
  patris__cur_piece__fields1; rec__patris__piece__x =
  patris__cur_piece__fields2; rec__patris__piece__y =
  patris__cur_piece__fields3 }, patris__cur_board)].
  ((valid_configuration__2(patris__cur_state, { rec__patris__piece__s =
  patris__cur_piece__fields; rec__patris__piece__d =
  patris__cur_piece__fields1; rec__patris__piece__x =
  patris__cur_piece__fields2; rec__patris__piece__y =
  patris__cur_piece__fields3 }, patris__cur_board) = true) <->
  (valid_configuration(get_board(patris__cur_board),
  get_state(patris__cur_state), get_piece({ rec__patris__piece__s =
  patris__cur_piece__fields; rec__patris__piece__d =
  patris__cur_piece__fields1; rec__patris__piece__x =
  patris__cur_piece__fields2; rec__patris__piece__y =
  patris__cur_piece__fields3 })) = true)))))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

axiom get_board__post_axiom : true

axiom get_board__def_axiom :
  (forall patris__cur_board:(int,(int,cell) farray) farray
  [get_board(patris__cur_board)].
  (get_board(patris__cur_board) = patris__cur_board))

axiom get_piece__post_axiom : true

axiom get_piece__def_axiom :
  (forall patris__cur_piece__fields:shape.
  forall patris__cur_piece__fields1:direction.
  forall patris__cur_piece__fields2:px_coord.
  forall patris__cur_piece__fields3:py_coord [get_piece({
  rec__patris__piece__s = patris__cur_piece__fields; rec__patris__piece__d =
  patris__cur_piece__fields1; rec__patris__piece__x =
  patris__cur_piece__fields2; rec__patris__piece__y =
  patris__cur_piece__fields3 })]. (get_piece({ rec__patris__piece__s =
  patris__cur_piece__fields; rec__patris__piece__d =
  patris__cur_piece__fields1; rec__patris__piece__x =
  patris__cur_piece__fields2; rec__patris__piece__y =
  patris__cur_piece__fields3 }) = { us_split_fields1 = {
  rec__patris__piece__s = patris__cur_piece__fields; rec__patris__piece__d =
  patris__cur_piece__fields1; rec__patris__piece__x =
  patris__cur_piece__fields2; rec__patris__piece__y =
  patris__cur_piece__fields3 } }))

axiom possible_i_shapes__def_axiom :
  (possible_i_shapes = patris__possible_i_shapes__aggregate_def(temp___150(of_int(0),
  of_int(0), of_int(0), of_int(0), of_int(1), of_int(1), of_int(1),
  of_int(1), of_int(0), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(0), of_int(0)), temp___170(of_int(0), of_int(0),
  of_int(1), of_int(0), of_int(0), of_int(0), of_int(1), of_int(0),
  of_int(0), of_int(0), of_int(1), of_int(0), of_int(0), of_int(0),
  of_int(1), of_int(0)), temp___190(of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(0), of_int(0), of_int(0), of_int(0), of_int(1),
  of_int(1), of_int(1), of_int(1), of_int(0), of_int(0), of_int(0),
  of_int(0)), temp___210(of_int(0), of_int(1), of_int(0), of_int(0),
  of_int(0), of_int(1), of_int(0), of_int(0), of_int(0), of_int(1),
  of_int(0), of_int(0), of_int(0), of_int(1), of_int(0), of_int(0))))

axiom possible_three_shapes__def_axiom :
  (possible_three_shapes = patris__possible_three_shapes__aggregate_def(temp___255(of_int(1),
  of_int(0), of_int(0), of_int(1), of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(0)), temp___268(of_int(0), of_int(1), of_int(1),
  of_int(0), of_int(1), of_int(0), of_int(0), of_int(1), of_int(0)),
  temp___281(of_int(0), of_int(0), of_int(0), of_int(1), of_int(1),
  of_int(1), of_int(0), of_int(0), of_int(1)), temp___294(of_int(0),
  of_int(1), of_int(0), of_int(0), of_int(1), of_int(0), of_int(1),
  of_int(1), of_int(0)), temp___307(of_int(0), of_int(0), of_int(1),
  of_int(1), of_int(1), of_int(1), of_int(0), of_int(0), of_int(0)),
  temp___320(of_int(0), of_int(1), of_int(0), of_int(0), of_int(1),
  of_int(0), of_int(0), of_int(1), of_int(1)), temp___333(of_int(0),
  of_int(0), of_int(0), of_int(1), of_int(1), of_int(1), of_int(1),
  of_int(0), of_int(0)), temp___346(of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(1), of_int(0), of_int(0), of_int(1), of_int(0)),
  temp___359(of_int(0), of_int(1), of_int(1), of_int(1), of_int(1),
  of_int(0), of_int(0), of_int(0), of_int(0)), temp___372(of_int(0),
  of_int(1), of_int(0), of_int(0), of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(1)), temp___385(of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(1), of_int(1), of_int(1), of_int(1), of_int(0)),
  temp___398(of_int(1), of_int(0), of_int(0), of_int(1), of_int(1),
  of_int(0), of_int(0), of_int(1), of_int(0)), temp___411(of_int(0),
  of_int(1), of_int(0), of_int(1), of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(0)), temp___424(of_int(0), of_int(1), of_int(0),
  of_int(0), of_int(1), of_int(1), of_int(0), of_int(1), of_int(0)),
  temp___437(of_int(0), of_int(0), of_int(0), of_int(1), of_int(1),
  of_int(1), of_int(0), of_int(1), of_int(0)), temp___450(of_int(0),
  of_int(1), of_int(0), of_int(1), of_int(1), of_int(0), of_int(0),
  of_int(1), of_int(0)), temp___463(of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(1), of_int(1), of_int(0), of_int(0), of_int(0)),
  temp___476(of_int(0), of_int(0), of_int(1), of_int(0), of_int(1),
  of_int(1), of_int(0), of_int(1), of_int(0)), temp___489(of_int(0),
  of_int(0), of_int(0), of_int(1), of_int(1), of_int(0), of_int(0),
  of_int(1), of_int(1)), temp___502(of_int(0), of_int(1), of_int(0),
  of_int(1), of_int(1), of_int(0), of_int(1), of_int(0), of_int(0))))

logic is_complete_line : (int,cell) farray -> bool

logic is_complete_line__function_guard : bool, (int,cell) farray -> prop

axiom is_complete_line__post_axiom : true

axiom is_complete_line__def_axiom :
  (forall l:(int,cell) farray [is_complete_line(l)].
  ((is_complete_line(l) = true) <->
  (forall x:int. (((1 <= x) and (x <= 10)) -> (not (to_rep((l[x])) = 0))))))

logic no_complete_lines : (int,(int,cell) farray) farray -> bool

logic no_complete_lines__function_guard : bool,
  (int,(int,cell) farray) farray -> prop

axiom no_complete_lines__post_axiom : true

axiom no_complete_lines__def_axiom :
  (forall b:(int,(int,cell) farray) farray [no_complete_lines(b)].
  ((no_complete_lines(b) = true) <->
  (forall y:int. (((1 <= y) and (y <= 20)) ->
  (not (is_complete_line((b[y])) = true))))))

logic no_overlap : (int,(int,cell) farray) farray, us_rep -> bool

logic no_overlap__function_guard : bool, (int,(int,cell) farray) farray,
  us_rep -> prop

axiom no_overlap__post_axiom : true

axiom no_overlap__def_axiom :
  (forall b:(int,(int,cell) farray) farray.
  (forall p:shape. forall p1:direction. forall p2:px_coord.
  forall p3:py_coord [no_overlap(b, { us_split_fields1 = {
  rec__patris__piece__s = p; rec__patris__piece__d = p1;
  rec__patris__piece__x = p2; rec__patris__piece__y = p3 } })].
  (((no_overlap(b, { us_split_fields1 = { rec__patris__piece__s = p;
  rec__patris__piece__d = p1; rec__patris__piece__x = p2;
  rec__patris__piece__y = p3 } }) = true) -> (((to_rep1(p) = 2) ->
  ((((is_empty(b, to_rep3(p3), to_rep2(p2)) = true) and (is_empty(b,
  to_rep3(p3), (to_rep2(p2) + 1)) = true)) and (is_empty(b,
  (to_rep3(p3) + 1), to_rep2(p2)) = true)) and (is_empty(b,
  (to_rep3(p3) + 1), (to_rep2(p2) + 1)) = true))) and
  ((not (to_rep1(p) = 2)) -> (((to_rep1(p) = 1) ->
  (forall y:int. (((0 <= y) and (y <= 3)) ->
  (forall x:int. (((0 <= x) and (x <= 3)) ->
  ((get((possible_i_shapes[to_rep4(p1)]), y, x) = true) -> (is_empty(b,
  (to_rep3(p3) + y), (to_rep2(p2) + x)) = true))))))) and
  ((not (to_rep1(p) = 1)) ->
  (forall y:int. (((0 <= y) and (y <= 2)) ->
  (forall x:int. (((0 <= x) and (x <= 2)) ->
  ((get(get1(possible_three_shapes, to_rep1(p), to_rep4(p1)), y,
  x) = true) -> (is_empty(b, (to_rep3(p3) + y), (to_rep2(p2) + x)) = true))))))))))) and
  ((((to_rep1(p) = 2) and ((((is_empty(b, to_rep3(p3),
  to_rep2(p2)) = true) and (is_empty(b, to_rep3(p3),
  (to_rep2(p2) + 1)) = true)) and (is_empty(b, (to_rep3(p3) + 1),
  to_rep2(p2)) = true)) and (is_empty(b, (to_rep3(p3) + 1),
  (to_rep2(p2) + 1)) = true))) or ((not (to_rep1(p) = 2)) and
  (((to_rep1(p) = 1) and
  (forall y:int. (((0 <= y) and (y <= 3)) ->
  (forall x:int. (((0 <= x) and (x <= 3)) ->
  ((get((possible_i_shapes[to_rep4(p1)]), y, x) = true) -> (is_empty(b,
  (to_rep3(p3) + y), (to_rep2(p2) + x)) = true))))))) or
  ((not (to_rep1(p) = 1)) and
  (forall y:int. (((0 <= y) and (y <= 2)) ->
  (forall x:int. (((0 <= x) and (x <= 2)) ->
  ((get(get1(possible_three_shapes, to_rep1(p), to_rep4(p1)), y,
  x) = true) -> (is_empty(b, (to_rep3(p3) + y), (to_rep2(p2) + x)) = true)))))))))) ->
  (no_overlap(b, { us_split_fields1 = { rec__patris__piece__s = p;
  rec__patris__piece__d = p1; rec__patris__piece__x = p2;
  rec__patris__piece__y = p3 } }) = true)))))

axiom valid_configuration__post_axiom : true

axiom valid_configuration__def_axiom :
  (forall cur_board:(int,(int,cell) farray) farray.
  (forall cur_state:int.
  (forall cur_piece:shape. forall cur_piece1:direction.
  forall cur_piece2:px_coord. forall cur_piece3:py_coord
  [valid_configuration(cur_board, cur_state, { us_split_fields1 = {
  rec__patris__piece__s = cur_piece; rec__patris__piece__d = cur_piece1;
  rec__patris__piece__x = cur_piece2; rec__patris__piece__y = cur_piece3 }
  })]. (((valid_configuration(cur_board, cur_state, { us_split_fields1 = {
  rec__patris__piece__s = cur_piece; rec__patris__piece__d = cur_piece1;
  rec__patris__piece__x = cur_piece2; rec__patris__piece__y = cur_piece3 }
  }) = true) -> ((((cur_state = 0) or (cur_state = 1)) ->
  (no_overlap(cur_board, { us_split_fields1 = { rec__patris__piece__s =
  cur_piece; rec__patris__piece__d = cur_piece1; rec__patris__piece__x =
  cur_piece2; rec__patris__piece__y = cur_piece3 } }) = true)) and
  ((not ((cur_state = 0) or (cur_state = 1))) -> ((not (cur_state = 2)) ->
  ((not (cur_state = 4)) -> (no_complete_lines(cur_board) = true)))))) and
  (((((cur_state = 0) or (cur_state = 1)) and (no_overlap(cur_board, {
  us_split_fields1 = { rec__patris__piece__s = cur_piece;
  rec__patris__piece__d = cur_piece1; rec__patris__piece__x = cur_piece2;
  rec__patris__piece__y = cur_piece3 } }) = true)) or
  ((not ((cur_state = 0) or (cur_state = 1))) and ((not (cur_state = 2)) ->
  ((not (cur_state = 4)) -> (no_complete_lines(cur_board) = true))))) ->
  (valid_configuration(cur_board, cur_state, { us_split_fields1 = {
  rec__patris__piece__s = cur_piece; rec__patris__piece__d = cur_piece1;
  rec__patris__piece__x = cur_piece2; rec__patris__piece__y = cur_piece3 }
  }) = true))))))

logic cur_board : (int,(int,cell) farray) farray

logic cur_piece__split_fields : shape

logic cur_piece__split_fields1 : direction

logic cur_piece__split_fields2 : px_coord

logic cur_piece__split_fields3 : py_coord

logic cur_state : int

logic y : int

logic x : int

logic y1 : int

logic x1 : int

logic o : cell

logic o1 : int

logic o2 : (int,cell) farray

logic o3 : int

logic o4 : (int,(int,cell) farray) farray

logic o5 : cell

logic o6 : int

logic o7 : (int,cell) farray

logic o8 : int

logic o9 : (int,(int,cell) farray) farray

logic o10 : cell

logic o11 : int

logic o12 : (int,cell) farray

logic o13 : int

logic o14 : (int,(int,cell) farray) farray

logic o15 : cell

logic o16 : int

logic o17 : (int,cell) farray

logic o18 : int

logic o19 : (int,(int,cell) farray) farray

logic o20 : cell

logic o21 : int

logic o22 : (int,cell) farray

logic o23 : int

logic o24 : (int,(int,cell) farray) farray

logic o25 : cell

logic o26 : int

logic o27 : (int,cell) farray

logic o28 : int

logic o29 : (int,(int,cell) farray) farray

logic o30 : cell

logic o31 : int

logic o32 : (int,cell) farray

logic o33 : int

logic o34 : (int,(int,cell) farray) farray

logic o35 : cell

logic o36 : int

logic o37 : (int,cell) farray

logic o38 : int

logic o39 : (int,(int,cell) farray) farray

logic o40 : cell

logic o41 : int

logic o42 : (int,cell) farray

logic o43 : int

logic o44 : (int,(int,cell) farray) farray

logic o45 : cell

logic o46 : int

logic o47 : (int,cell) farray

logic o48 : int

logic o49 : (int,(int,cell) farray) farray

logic o50 : cell

logic o51 : int

logic o52 : (int,cell) farray

logic o53 : int

logic o54 : (int,(int,cell) farray) farray

logic o55 : cell

logic o56 : int

logic o57 : (int,cell) farray

logic o58 : int

logic o59 : (int,(int,cell) farray) farray

logic o60 : cell

logic o61 : int

logic o62 : (int,cell) farray

logic o63 : int

logic o64 : (int,(int,cell) farray) farray

logic o65 : cell

logic o66 : int

logic o67 : (int,cell) farray

logic o68 : int

logic o69 : (int,(int,cell) farray) farray

logic o70 : cell

logic o71 : int

logic o72 : (int,cell) farray

logic o73 : int

logic o74 : (int,(int,cell) farray) farray

logic o75 : cell

logic o76 : int

logic o77 : (int,cell) farray

logic o78 : int

logic o79 : (int,(int,cell) farray) farray

logic o80 : cell

logic o81 : int

logic o82 : (int,cell) farray

logic o83 : int

logic o84 : (int,(int,cell) farray) farray

logic o85 : cell

logic o86 : int

logic o87 : (int,cell) farray

logic o88 : int

logic o89 : (int,(int,cell) farray) farray

logic o90 : cell

logic o91 : int

logic o92 : (int,cell) farray

logic o93 : int

logic o94 : (int,(int,cell) farray) farray

logic o95 : cell

logic o96 : int

logic o97 : (int,cell) farray

logic o98 : int

logic o99 : (int,(int,cell) farray) farray

logic yy : int

logic xx : int

logic o100 : int

logic temp___2142 : map

logic o101 : cell

logic o102 : int

logic o103 : (int,cell) farray

logic o104 : int

logic o105 : (int,(int,cell) farray) farray

logic o106 : int

logic temp___21421 : map

logic o107 : cell

logic o108 : int

logic o109 : (int,cell) farray

logic o110 : int

logic o111 : (int,(int,cell) farray) farray

logic o112 : int

logic temp___21422 : map

logic o113 : cell

logic o114 : int

logic o115 : (int,cell) farray

logic o116 : int

logic o117 : (int,(int,cell) farray) farray

logic o118 : int

logic temp___21423 : map

logic o119 : cell

logic o120 : int

logic o121 : (int,cell) farray

logic o122 : int

logic o123 : (int,(int,cell) farray) farray

logic o124 : int

logic temp___21424 : map

logic o125 : cell

logic o126 : int

logic o127 : (int,cell) farray

logic o128 : int

logic o129 : (int,(int,cell) farray) farray

logic o130 : int

logic temp___21425 : map

logic o131 : cell

logic o132 : int

logic o133 : (int,cell) farray

logic o134 : int

logic o135 : (int,(int,cell) farray) farray

logic o136 : int

logic temp___21426 : map

logic o137 : cell

logic o138 : int

logic o139 : (int,cell) farray

logic o140 : int

logic o141 : (int,(int,cell) farray) farray

logic o142 : int

logic temp___21427 : map

logic o143 : cell

logic o144 : int

logic o145 : (int,cell) farray

logic o146 : int

logic o147 : (int,(int,cell) farray) farray

logic o148 : int

logic temp___21428 : map

logic o149 : cell

logic o150 : int

logic o151 : (int,cell) farray

logic o152 : int

logic o153 : (int,(int,cell) farray) farray

logic cur_board1 : (int,(int,cell) farray) farray

logic y2 : int

logic x2 : int

logic y3 : int

logic x3 : int

logic result : (int,(int,cell) farray) farray

logic cur_board2 : (int,(int,cell) farray) farray

logic result1 : (int,(int,cell) farray) farray

logic cur_board3 : (int,(int,cell) farray) farray

logic result2 : (int,(int,cell) farray) farray

logic cur_board4 : (int,(int,cell) farray) farray

logic result3 : (int,(int,cell) farray) farray

logic cur_board5 : (int,(int,cell) farray) farray

logic result4 : int

logic y4 : int

logic result5 : int

logic x4 : int

logic result6 : (int,(int,cell) farray) farray

logic cur_board6 : (int,(int,cell) farray) farray

logic result7 : int

logic x5 : int

logic result8 : (int,(int,cell) farray) farray

logic cur_board7 : (int,(int,cell) farray) farray

logic result9 : int

logic x6 : int

logic result10 : (int,(int,cell) farray) farray

logic cur_board8 : (int,(int,cell) farray) farray

logic result11 : int

logic x7 : int

logic result12 : (int,(int,cell) farray) farray

logic cur_board9 : (int,(int,cell) farray) farray

logic result13 : int

logic y5 : int

logic result14 : int

logic x8 : int

logic result15 : (int,(int,cell) farray) farray

logic cur_board10 : (int,(int,cell) farray) farray

logic result16 : int

logic x9 : int

logic result17 : (int,(int,cell) farray) farray

logic cur_board11 : (int,(int,cell) farray) farray

logic result18 : int

logic x10 : int

logic result19 : (int,(int,cell) farray) farray

logic cur_board12 : (int,(int,cell) farray) farray

logic result20 : int

logic x11 : int

logic result21 : (int,(int,cell) farray) farray

logic cur_board13 : (int,(int,cell) farray) farray

logic result22 : int

logic y6 : int

logic result23 : int

logic x12 : int

logic result24 : (int,(int,cell) farray) farray

logic cur_board14 : (int,(int,cell) farray) farray

logic result25 : int

logic x13 : int

logic result26 : (int,(int,cell) farray) farray

logic cur_board15 : (int,(int,cell) farray) farray

logic result27 : int

logic x14 : int

logic result28 : (int,(int,cell) farray) farray

logic cur_board16 : (int,(int,cell) farray) farray

logic result29 : int

logic x15 : int

logic result30 : (int,(int,cell) farray) farray

logic cur_board17 : (int,(int,cell) farray) farray

logic result31 : int

logic y7 : int

logic result32 : int

logic x16 : int

logic result33 : (int,(int,cell) farray) farray

logic cur_board18 : (int,(int,cell) farray) farray

logic result34 : int

logic x17 : int

logic result35 : (int,(int,cell) farray) farray

logic cur_board19 : (int,(int,cell) farray) farray

logic result36 : int

logic x18 : int

logic result37 : (int,(int,cell) farray) farray

logic cur_board20 : (int,(int,cell) farray) farray

logic result38 : int

logic x19 : int

logic result39 : (int,(int,cell) farray) farray

logic cur_board21 : (int,(int,cell) farray) farray

logic result40 : int

logic y8 : int

logic result41 : int

logic x20 : int

logic result42 : bool

logic result43 : (int,(int,cell) farray) farray

logic cur_board22 : (int,(int,cell) farray) farray

logic result44 : int

logic x21 : int

logic result45 : bool

logic result46 : (int,(int,cell) farray) farray

logic cur_board23 : (int,(int,cell) farray) farray

logic result47 : int

logic x22 : int

logic result48 : bool

logic result49 : (int,(int,cell) farray) farray

logic cur_board24 : (int,(int,cell) farray) farray

logic result50 : int

logic y9 : int

logic result51 : int

logic x23 : int

logic result52 : bool

logic result53 : (int,(int,cell) farray) farray

logic cur_board25 : (int,(int,cell) farray) farray

logic result54 : int

logic x24 : int

logic result55 : bool

logic result56 : (int,(int,cell) farray) farray

logic cur_board26 : (int,(int,cell) farray) farray

logic result57 : int

logic x25 : int

logic result58 : bool

logic result59 : (int,(int,cell) farray) farray

logic cur_board27 : (int,(int,cell) farray) farray

logic result60 : int

logic y10 : int

logic result61 : int

logic x26 : int

logic result62 : bool

logic result63 : (int,(int,cell) farray) farray

logic cur_board28 : (int,(int,cell) farray) farray

logic result64 : int

logic x27 : int

logic result65 : bool

logic result66 : (int,(int,cell) farray) farray

logic cur_board29 : (int,(int,cell) farray) farray

logic result67 : int

logic x28 : int

logic result68 : bool

logic result69 : (int,(int,cell) farray) farray

logic cur_board30 : (int,(int,cell) farray) farray

logic result70 : int

logic cur_state1 : int

logic cur_board31 : (int,(int,cell) farray) farray

logic cur_state2 : int

logic y11 : int

logic x29 : int

logic y12 : int

logic x30 : int

logic cur_board32 : (int,(int,cell) farray) farray

logic cur_state3 : int

logic y13 : int

logic x31 : int

logic y14 : int

logic x32 : int

axiom H : (patris__possible_i_shapes__aggregate_def(temp___150(of_int(0),
  of_int(0), of_int(0), of_int(0), of_int(1), of_int(1), of_int(1),
  of_int(1), of_int(0), of_int(0), of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(0), of_int(0)), temp___170(of_int(0), of_int(0),
  of_int(1), of_int(0), of_int(0), of_int(0), of_int(1), of_int(0),
  of_int(0), of_int(0), of_int(1), of_int(0), of_int(0), of_int(0),
  of_int(1), of_int(0)), temp___190(of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(0), of_int(0), of_int(0), of_int(0), of_int(1),
  of_int(1), of_int(1), of_int(1), of_int(0), of_int(0), of_int(0),
  of_int(0)), temp___210(of_int(0), of_int(1), of_int(0), of_int(0),
  of_int(0), of_int(1), of_int(0), of_int(0), of_int(0), of_int(1),
  of_int(0), of_int(0), of_int(0), of_int(1), of_int(0),
  of_int(0))) = possible_i_shapes)

axiom H1 :
  (patris__possible_three_shapes__aggregate_def(temp___255(of_int(1),
  of_int(0), of_int(0), of_int(1), of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(0)), temp___268(of_int(0), of_int(1), of_int(1),
  of_int(0), of_int(1), of_int(0), of_int(0), of_int(1), of_int(0)),
  temp___281(of_int(0), of_int(0), of_int(0), of_int(1), of_int(1),
  of_int(1), of_int(0), of_int(0), of_int(1)), temp___294(of_int(0),
  of_int(1), of_int(0), of_int(0), of_int(1), of_int(0), of_int(1),
  of_int(1), of_int(0)), temp___307(of_int(0), of_int(0), of_int(1),
  of_int(1), of_int(1), of_int(1), of_int(0), of_int(0), of_int(0)),
  temp___320(of_int(0), of_int(1), of_int(0), of_int(0), of_int(1),
  of_int(0), of_int(0), of_int(1), of_int(1)), temp___333(of_int(0),
  of_int(0), of_int(0), of_int(1), of_int(1), of_int(1), of_int(1),
  of_int(0), of_int(0)), temp___346(of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(1), of_int(0), of_int(0), of_int(1), of_int(0)),
  temp___359(of_int(0), of_int(1), of_int(1), of_int(1), of_int(1),
  of_int(0), of_int(0), of_int(0), of_int(0)), temp___372(of_int(0),
  of_int(1), of_int(0), of_int(0), of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(1)), temp___385(of_int(0), of_int(0), of_int(0),
  of_int(0), of_int(1), of_int(1), of_int(1), of_int(1), of_int(0)),
  temp___398(of_int(1), of_int(0), of_int(0), of_int(1), of_int(1),
  of_int(0), of_int(0), of_int(1), of_int(0)), temp___411(of_int(0),
  of_int(1), of_int(0), of_int(1), of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(0)), temp___424(of_int(0), of_int(1), of_int(0),
  of_int(0), of_int(1), of_int(1), of_int(0), of_int(1), of_int(0)),
  temp___437(of_int(0), of_int(0), of_int(0), of_int(1), of_int(1),
  of_int(1), of_int(0), of_int(1), of_int(0)), temp___450(of_int(0),
  of_int(1), of_int(0), of_int(1), of_int(1), of_int(0), of_int(0),
  of_int(1), of_int(0)), temp___463(of_int(1), of_int(1), of_int(0),
  of_int(0), of_int(1), of_int(1), of_int(0), of_int(0), of_int(0)),
  temp___476(of_int(0), of_int(0), of_int(1), of_int(0), of_int(1),
  of_int(1), of_int(0), of_int(1), of_int(0)), temp___489(of_int(0),
  of_int(0), of_int(0), of_int(1), of_int(1), of_int(0), of_int(0),
  of_int(1), of_int(1)), temp___502(of_int(0), of_int(1), of_int(0),
  of_int(1), of_int(1), of_int(0), of_int(1), of_int(0),
  of_int(0))) = possible_three_shapes)

axiom H2 : in_range9(cur_state)

axiom H3 : ((get_state(cur_state) = 1) and (valid_configuration__2(cur_state,
  { rec__patris__piece__s = cur_piece__split_fields; rec__patris__piece__d =
  cur_piece__split_fields1; rec__patris__piece__x = cur_piece__split_fields2;
  rec__patris__piece__y = cur_piece__split_fields3 }, cur_board) = true))

axiom H4 : (not (to_rep1(cur_piece__split_fields) = 2))

axiom H5 : (not (to_rep1(cur_piece__split_fields) = 1))

axiom H6 :
  (forall yy1:int. (((0 <= yy1) and (yy1 <= 2)) ->
  (forall xx1:int. (((0 <= xx1) and (xx1 <= 2)) ->
  ((get(get1(possible_three_shapes, to_rep1(cur_piece__split_fields),
  to_rep4(cur_piece__split_fields1)), yy1, xx1) = true) ->
  (is_empty(cur_board, (to_rep3(cur_piece__split_fields3) + yy1),
  (to_rep2(cur_piece__split_fields2) + xx1)) = true))))))

axiom H7 : (result40 = y1)

axiom H8 : (y8 = 0)

axiom H9 : (result41 = x1)

axiom H10 : (x20 = 0)

axiom H11 : ((3 <= to_rep1(cur_piece__split_fields)) and
  (to_rep1(cur_piece__split_fields) <= 7))

axiom H12 : (o100 = to_rep1(cur_piece__split_fields))

axiom H13 : (temp___2142 = get1(possible_three_shapes, o100,
  to_rep4(cur_piece__split_fields1)))

axiom H14 : (result42 = get(temp___2142, y8, x20))

axiom H15 : (result42 = true)

axiom H16 : (to_rep(o101) = to_rep1(cur_piece__split_fields))

axiom H17 : ((1 <= (to_rep2(cur_piece__split_fields2) + x20)) and
  ((to_rep2(cur_piece__split_fields2) + x20) <= 10))

axiom H18 : (o102 = (to_rep2(cur_piece__split_fields2) + x20))

axiom H19 :
  (o103 = ((cur_board[(to_rep3(cur_piece__split_fields3) + y8)])[o102 <- o101]))

 (* File "patris.ads", line 196, characters 0-0 *)
goal WP_parameter_def : (1 <= (to_rep3(cur_piece__split_fields3) + y8))
