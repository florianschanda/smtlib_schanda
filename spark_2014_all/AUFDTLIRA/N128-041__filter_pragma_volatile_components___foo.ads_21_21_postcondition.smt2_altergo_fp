(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type tarray_tD1

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tarray_tD1, tarray_tD1 -> bool

logic dummy1 : tarray_tD1

type tarray_tD1__ref = { tarray_tD1__content : tarray_tD1
}

function tarray_tD1__ref___projection(a: tarray_tD1__ref) : tarray_tD1 =
  (a).tarray_tD1__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic r1b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic r2b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

 (* File "foo.ads", line 19, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,integer) farray. forall s:int. forall total:int.
  forall a_lb:int. forall a_ub:int. forall item:int. forall i:int.
  forall temp___208:int. forall temp___207:int.
  forall temp___206:(int,integer) farray. forall o:int. forall o1:integer.
  forall o2:int. forall o3:int. forall a1:(int,integer) farray.
  forall item1:int. forall result:int. forall a_lb1:int. forall result1:int.
  forall a_ub1:int. forall result2:int. forall total1:int.
  forall result3:int. forall i1:int. forall total2:int. forall item2:int.
  forall i2:int. forall a2:(int,integer) farray. forall result4:int.
  forall item3:int. forall result5:int. forall total3:int.
  forall a3:(int,integer) farray. forall total4:int. forall item4:int.
  forall i3:int. forall a4:(int,integer) farray. forall total5:int.
  forall item5:int. forall i4:int. forall a5:(int,integer) farray.
  forall total6:int. forall item6:int. forall i5:int.
  forall a6:(int,integer) farray. forall total7:int. forall item7:int.
  forall i6:int. forall result6:int. forall s1:int.
  forall a7:(int,integer) farray. forall s2:int. forall total8:int.
  forall a_lb2:int. forall a_ub2:int. forall item8:int. forall i7:int.
  forall a8:(int,integer) farray. forall s3:int. forall total9:int.
  forall a_lb3:int. forall a_ub3:int. forall item9:int. forall i8:int.
  (((((- 2147483648) <= 2147483647) -> in_range1(s)) and
  (((((- 2147483648) <= 2147483647) -> in_range1(total)) and
  ((((- 2147483648) <= 2147483647) -> in_range1(a_lb)) and
  ((((- 2147483648) <= 2147483647) -> in_range1(a_ub)) and
  ((((- 2147483648) <= 2147483647) -> in_range1(item)) and ((({
  int__content = result } = { int__content = a_lb }) and (a_lb1 = 1)) and
  ((({ int__content = result1 } = { int__content = a_ub }) and
  (a_ub1 = 10)) and ((({ int__content = result2 } = { int__content = total
  }) and (total1 = 0)) and (((a_lb1 = r1b) and in_range1(r1b)) and
  (((a_ub1 = r2b) and in_range1(r2b)) and (((({ int__content = result3 } = {
  int__content = i }) and (i1 = r1b)) and ((((r1b <= i1) and (i1 <= r2b)) and
  ((((temp___208 = item) and ((temp___207 = total1) and
  ((((((- 2147483648) <= 2147483647) -> in_range1(total2)) and
  (((- 2147483648) <= 2147483647) -> in_range1(item2))) and ((r1b <= i2) and
  (i2 <= r2b))) and (((((temp___206 = a2) and ((((1 <= i2) and
  (i2 <= 10)) and (o = i2)) and (o1 = (temp___206[o])))) and
  (o2 = to_rep(o1))) and ((item2 = result4) and (item3 = o2))) and
  ((((o3 = (total2 + item3)) and in_range1((total2 + item3))) and
  ((result5 = total2) and (total3 = o3))) and (i2 = r2b)))))) and
  (((i2 = i3) and ((item3 = item4) and ((total3 = total4) and
  (a2 = a3)))) and ((i4 = i2) and ((item5 = item3) and ((total5 = total3) and
  (a4 = a2)))))) and (((i3 = i5) and ((item4 = item6) and
  ((total4 = total6) and (a3 = a5)))) and ((i6 = i4) and ((item7 = item5) and
  ((total7 = total5) and (a6 = a4))))))) or ((not ((r1b <= i1) and
  (i1 <= r2b))) and (((i1 = i5) and ((item = item6) and
  ((total1 = total6) and (a = a5)))) and ((i6 = i1) and ((item7 = item1) and
  ((total7 = total1) and (a6 = a1)))))))) and ((result6 = s) and
  (s1 = total6)))))))))))) and (((i7 = i5) and ((item8 = item6) and
  ((a_ub2 = a_ub1) and ((a_lb2 = a_lb1) and ((total8 = total6) and
  ((s1 = s2) and (a7 = a5))))))) and ((i8 = i6) and ((item9 = item7) and
  ((a_ub3 = a_ub1) and ((a_lb3 = a_lb1) and ((total9 = total7) and
  ((s3 = s1) and (a8 = a6)))))))))) -> (s2 <= 100)))
