(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort cardindex 0)
(declare-fun cardindexqtint (cardindex) Int)
(assert (forall ((i cardindex)) (and (<= (- 1) (cardindexqtint i)) (<= (cardindexqtint i) 100))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 1) x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (cardindex cardindex) Bool)
(declare-const dummy1 cardindex)
(declare-datatypes () ((cardindex__ref (mk_cardindex__ref (cardindex__content cardindex)))))
(define-fun cardindex__ref___projection ((a cardindex__ref)) cardindex (cardindex__content a))
(define-fun to_rep ((x cardindex)) Int (cardindexqtint x))
(declare-fun of_rep (Int) cardindex)
(assert (forall ((x cardindex)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x cardindex)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort card1 0)
(declare-fun cardqtint (card1) Int)
(assert (forall ((i card1)) (and (<= 1 (cardqtint i)) (<= (cardqtint i) 52))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 52)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (card1 card1) Bool)
(declare-const dummy2 card1)
(declare-datatypes () ((card__ref (mk_card__ref (card__content card1)))))
(define-fun card__ref___projection ((a card__ref)) card1 (card__content a))
(define-fun to_rep1 ((x card1)) Int (cardqtint x))
(declare-fun of_rep1 (Int) card1)
(assert (forall ((x card1)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x card1)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int card1))))))
(declare-fun slide ((Array Int card1) Int Int) (Array Int card1))
(assert (forall ((a (Array Int card1))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int card1))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int card1)) (a__first Int) (a__last Int) (b (Array Int card1)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int card1)) (b (Array Int card1))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep1 (select a temp___idx_154)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy3 (Array Int card1))
(declare-const value__size Int)
(declare-fun object__size ((Array Int card1)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int card1)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int card1)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int card1))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int card1))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int card1))) (<= 0 (object__alignment a))))
(declare-fun user_eq3 ((Array Int card1) (Array Int card1)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int cardindex))))))
(declare-fun slide1 ((Array Int cardindex) Int Int) (Array Int cardindex))
(assert (forall ((a (Array Int cardindex))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int cardindex))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int cardindex)) (a__first Int) (a__last Int) (b (Array Int cardindex)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int cardindex)) (b (Array Int cardindex))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-const dummy4 (Array Int cardindex))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int cardindex)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int cardindex)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int cardindex)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int cardindex))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int cardindex))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int cardindex))) (<= 0 (object__alignment1 a))))
(declare-fun user_eq4 ((Array Int cardindex) (Array Int cardindex)) Bool)
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int (Array Int cardindex)))))))
(declare-fun slide2 ((Array Int (Array Int cardindex)) Int Int) (Array Int (Array Int cardindex)))
(assert (forall ((a (Array Int (Array Int cardindex)))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int (Array Int cardindex)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int (Array Int cardindex))) (a__first Int) (a__last Int) (b (Array Int (Array Int cardindex))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 0 99 (select b (+ (- b__first a__first) temp___idx_156)) 0 99) true)))) true false))
(assert (forall ((a (Array Int (Array Int cardindex))) (b (Array Int (Array Int cardindex)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (bool_eq1 (select a temp___idx_156) 0 99 (select b (+ (- b__first a__first) temp___idx_156)) 0 99) true))))))))
(declare-const dummy5 (Array Int (Array Int cardindex)))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int (Array Int cardindex))) Int)
(declare-const value__component__size2 Int)
(declare-fun object__component__size2 ((Array Int (Array Int cardindex))) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int (Array Int cardindex))) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int (Array Int cardindex)))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size2))
(assert (forall ((a (Array Int (Array Int cardindex)))) (<= 0 (object__component__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int (Array Int cardindex)))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq5 ((Array Int (Array Int cardindex)) (Array Int (Array Int cardindex))) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__patience__state__numelts cardindex) (rec__patience__state__values (Array Int card1)) (rec__patience__state__numstacks cardindex) (rec__patience__state__stacksizes (Array Int cardindex)) (rec__patience__state__stacks (Array Int (Array Int cardindex))) (rec__patience__state__posstack (Array Int cardindex)) (rec__patience__state__posheight (Array Int cardindex)) (rec__patience__state__preds (Array Int cardindex))))))
(define-fun us_split_fields_NumElts__projection ((a us_split_fields)) cardindex (rec__patience__state__numelts a))
(define-fun us_split_fields_Values__projection ((a us_split_fields)) (Array Int card1) (rec__patience__state__values a))
(define-fun us_split_fields_NumStacks__projection ((a us_split_fields)) cardindex (rec__patience__state__numstacks a))
(define-fun us_split_fields_StackSizes__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__stacksizes a))
(define-fun us_split_fields_Stacks__projection ((a us_split_fields)) (Array Int (Array Int cardindex)) (rec__patience__state__stacks a))
(define-fun us_split_fields_PosStack__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__posstack a))
(define-fun us_split_fields_PosHeight__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__posheight a))
(define-fun us_split_fields_Preds__projection ((a us_split_fields)) (Array Int cardindex) (rec__patience__state__preds a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq3 ((a us_rep) (b us_rep)) Bool (ite (and (and (and (and (and (and (and (= (to_rep (rec__patience__state__numelts (us_split_fields1 a))) (to_rep (rec__patience__state__numelts (us_split_fields1 b)))) (= (bool_eq (rec__patience__state__values (us_split_fields1 a)) 0 99 (rec__patience__state__values (us_split_fields1 b)) 0 99) true)) (= (to_rep (rec__patience__state__numstacks (us_split_fields1 a))) (to_rep (rec__patience__state__numstacks (us_split_fields1 b))))) (= (bool_eq1 (rec__patience__state__stacksizes (us_split_fields1 a)) 0 99 (rec__patience__state__stacksizes (us_split_fields1 b)) 0 99) true)) (= (bool_eq2 (rec__patience__state__stacks (us_split_fields1 a)) 0 99 (rec__patience__state__stacks (us_split_fields1 b)) 0 99) true)) (= (bool_eq1 (rec__patience__state__posstack (us_split_fields1 a)) 0 99 (rec__patience__state__posstack (us_split_fields1 b)) 0 99) true)) (= (bool_eq1 (rec__patience__state__posheight (us_split_fields1 a)) 0 99 (rec__patience__state__posheight (us_split_fields1 b)) 0 99) true)) (= (bool_eq1 (rec__patience__state__preds (us_split_fields1 a)) 0 99 (rec__patience__state__preds (us_split_fields1 b)) 0 99) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep)) (<= 0 (object__alignment3 a))))
(declare-const patience__state__numelts__first__bit Int)
(declare-const patience__state__numelts__last__bit Int)
(declare-const patience__state__numelts__position Int)
(assert (<= 0 patience__state__numelts__first__bit))
(assert (< patience__state__numelts__first__bit patience__state__numelts__last__bit))
(assert (<= 0 patience__state__numelts__position))
(declare-const patience__state__values__first__bit Int)
(declare-const patience__state__values__last__bit Int)
(declare-const patience__state__values__position Int)
(assert (<= 0 patience__state__values__first__bit))
(assert (< patience__state__values__first__bit patience__state__values__last__bit))
(assert (<= 0 patience__state__values__position))
(declare-const patience__state__numstacks__first__bit Int)
(declare-const patience__state__numstacks__last__bit Int)
(declare-const patience__state__numstacks__position Int)
(assert (<= 0 patience__state__numstacks__first__bit))
(assert (< patience__state__numstacks__first__bit patience__state__numstacks__last__bit))
(assert (<= 0 patience__state__numstacks__position))
(declare-const patience__state__stacksizes__first__bit Int)
(declare-const patience__state__stacksizes__last__bit Int)
(declare-const patience__state__stacksizes__position Int)
(assert (<= 0 patience__state__stacksizes__first__bit))
(assert (< patience__state__stacksizes__first__bit patience__state__stacksizes__last__bit))
(assert (<= 0 patience__state__stacksizes__position))
(declare-const patience__state__stacks__first__bit Int)
(declare-const patience__state__stacks__last__bit Int)
(declare-const patience__state__stacks__position Int)
(assert (<= 0 patience__state__stacks__first__bit))
(assert (< patience__state__stacks__first__bit patience__state__stacks__last__bit))
(assert (<= 0 patience__state__stacks__position))
(declare-const patience__state__posstack__first__bit Int)
(declare-const patience__state__posstack__last__bit Int)
(declare-const patience__state__posstack__position Int)
(assert (<= 0 patience__state__posstack__first__bit))
(assert (< patience__state__posstack__first__bit patience__state__posstack__last__bit))
(assert (<= 0 patience__state__posstack__position))
(declare-const patience__state__posheight__first__bit Int)
(declare-const patience__state__posheight__last__bit Int)
(declare-const patience__state__posheight__position Int)
(assert (<= 0 patience__state__posheight__first__bit))
(assert (< patience__state__posheight__first__bit patience__state__posheight__last__bit))
(assert (<= 0 patience__state__posheight__position))
(declare-const patience__state__preds__first__bit Int)
(declare-const patience__state__preds__last__bit Int)
(declare-const patience__state__preds__position Int)
(assert (<= 0 patience__state__preds__first__bit))
(assert (< patience__state__preds__first__bit patience__state__preds__last__bit))
(assert (<= 0 patience__state__preds__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((state__ref (mk_state__ref (state__content us_rep)))))
(define-fun state__ref___projection ((a state__ref)) us_rep (state__content a))
(declare-sort tcardarrayD1 0)
(declare-fun tcardarrayD1qtint (tcardarrayD1) Int)
(assert (forall ((i tcardarrayD1)) (and (<= 0 (tcardarrayD1qtint i)) (<= (tcardarrayD1qtint i) 99))))
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq7 (tcardarrayD1 tcardarrayD1) Bool)
(declare-const dummy7 tcardarrayD1)
(declare-datatypes () ((tcardarrayD1__ref (mk_tcardarrayD1__ref (tcardarrayD1__content tcardarrayD1)))))
(define-fun tcardarrayD1__ref___projection ((a tcardarrayD1__ref)) tcardarrayD1 (tcardarrayD1__content a))
(declare-sort tindexarrayD1 0)
(declare-fun tindexarrayD1qtint (tindexarrayD1) Int)
(assert (forall ((i tindexarrayD1)) (and (<= 0 (tindexarrayD1qtint i)) (<= (tindexarrayD1qtint i) 99))))
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq8 (tindexarrayD1 tindexarrayD1) Bool)
(declare-const dummy8 tindexarrayD1)
(declare-datatypes () ((tindexarrayD1__ref (mk_tindexarrayD1__ref (tindexarrayD1__content tindexarrayD1)))))
(define-fun tindexarrayD1__ref___projection ((a tindexarrayD1__ref)) tindexarrayD1 (tindexarrayD1__content a))
(declare-sort tindexmatrixD1 0)
(declare-fun tindexmatrixD1qtint (tindexmatrixD1) Int)
(assert (forall ((i tindexmatrixD1)) (and (<= 0 (tindexmatrixD1qtint i)) (<= (tindexmatrixD1qtint i) 99))))
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 99)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq9 (tindexmatrixD1 tindexmatrixD1) Bool)
(declare-const dummy9 tindexmatrixD1)
(declare-datatypes () ((tindexmatrixD1__ref (mk_tindexmatrixD1__ref (tindexmatrixD1__content tindexmatrixD1)))))
(define-fun tindexmatrixD1__ref___projection ((a tindexmatrixD1__ref)) tindexmatrixD1 (tindexmatrixD1__content a))
(declare-const s us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_189 Int) (temp___is_init_185 Bool) (temp___skip_constant_186 Bool) (temp___do_toplevel_187 Bool) (temp___do_typ_inv_188 Bool)) Bool (=> (or (= temp___is_init_185 true) (<= 1 52)) (in_range3 temp___expr_189)))
(define-fun dynamic_invariant2 ((temp___expr_202 Int) (temp___is_init_198 Bool) (temp___skip_constant_199 Bool) (temp___do_toplevel_200 Bool) (temp___do_typ_inv_201 Bool)) Bool (=> (or (= temp___is_init_198 true) (<= (- 1) 100)) (in_range2 temp___expr_202)))
(declare-const i Int)
(declare-const j Int)
(declare-const o Int)
(declare-const o1 cardindex)
(declare-const o2 Int)
(declare-const o3 Int)
(declare-const o4 Bool)
(declare-const k Int)
(declare-const o5 Int)
(declare-const o6 Int)
(declare-const o7 cardindex)
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Bool)
(declare-const o11 Bool)
(declare-const o12 Int)
(declare-const temp___503 (Array Int cardindex))
(declare-const o13 Int)
(declare-const temp___507 (Array Int cardindex))
(declare-const o14 Int)
(declare-const o15 cardindex)
(declare-const temp___508 Int)
(declare-const o16 Int)
(declare-const o17 card1)
(declare-const o18 Int)
(declare-const result Bool)
(declare-const result1 Bool)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 Bool)
(declare-const result5 Bool)
(assert (=> (and (and (and (<= 0 (to_rep (rec__patience__state__numstacks (us_split_fields1 s)))) (<= (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) (to_rep (rec__patience__state__numelts (us_split_fields1 s))))) (<= (to_rep (rec__patience__state__numelts (us_split_fields1 s))) 100)) (or (= (to_rep (rec__patience__state__numelts (us_split_fields1 s))) 0) (< 0 (to_rep (rec__patience__state__numstacks (us_split_fields1 s)))))) (= (= result3 true) (forall ((i1 Int)) (=> (and (<= 0 i1) (<= i1 (- (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (and (and (<= 1 (to_rep (select (rec__patience__state__stacksizes (us_split_fields1 s)) i1))) (<= (to_rep (select (rec__patience__state__stacksizes (us_split_fields1 s)) i1)) (to_rep (rec__patience__state__numelts (us_split_fields1 s))))) (forall ((j1 Int)) (=> (and (<= 0 j1) (<= j1 (- (to_rep (select (rec__patience__state__stacksizes (us_split_fields1 s)) i1)) 1))) (and (<= 0 (to_rep (select (select (rec__patience__state__stacks (us_split_fields1 s)) i1) j1))) (< (to_rep (select (select (rec__patience__state__stacks (us_split_fields1 s)) i1) j1)) (to_rep (rec__patience__state__numelts (us_split_fields1 s)))))))))))))
(assert (=> (not (and (and (and (<= 0 (to_rep (rec__patience__state__numstacks (us_split_fields1 s)))) (<= (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) (to_rep (rec__patience__state__numelts (us_split_fields1 s))))) (<= (to_rep (rec__patience__state__numelts (us_split_fields1 s))) 100)) (or (= (to_rep (rec__patience__state__numelts (us_split_fields1 s))) 0) (< 0 (to_rep (rec__patience__state__numstacks (us_split_fields1 s))))))) (= result3 false)))
(assert (=> (= result3 true) (= (= result2 true) (forall ((i1 Int)) (=> (and (<= 0 i1) (<= i1 (- (to_rep (rec__patience__state__numelts (us_split_fields1 s))) 1))) (and (and (and (<= 0 (to_rep (select (rec__patience__state__posstack (us_split_fields1 s)) i1))) (<= (to_rep (select (rec__patience__state__posstack (us_split_fields1 s)) i1)) (- (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (and (<= 0 (to_rep (select (rec__patience__state__posheight (us_split_fields1 s)) i1))) (<= (to_rep (select (rec__patience__state__posheight (us_split_fields1 s)) i1)) (- (to_rep (select (rec__patience__state__stacksizes (us_split_fields1 s)) (to_rep (select (rec__patience__state__posstack (us_split_fields1 s)) i1)))) 1)))) (= (to_rep (select (select (rec__patience__state__stacks (us_split_fields1 s)) (to_rep (select (rec__patience__state__posstack (us_split_fields1 s)) i1))) (to_rep (select (rec__patience__state__posheight (us_split_fields1 s)) i1)))) i1)))))))
(assert (=> (not (= result3 true)) (= result2 false)))
(assert (=> (= result2 true) (= (= result1 true) (forall ((ist Int)) (=> (and (<= 0 ist) (<= ist (- (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (forall ((ip Int)) (=> (and (<= 0 ip) (<= ip (- (to_rep (select (rec__patience__state__stacksizes (us_split_fields1 s)) ist)) 1))) (and (= ist (to_rep (select (rec__patience__state__posstack (us_split_fields1 s)) (to_rep (select (select (rec__patience__state__stacks (us_split_fields1 s)) ist) ip))))) (= ip (to_rep (select (rec__patience__state__posheight (us_split_fields1 s)) (to_rep (select (select (rec__patience__state__stacks (us_split_fields1 s)) ist) ip)))))))))))))
(assert (=> (not (= result2 true)) (= result1 false)))
(assert (=> (= result1 true) (= (= result true) (forall ((i1 Int)) (=> (and (<= 0 i1) (<= i1 (- (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) 1))) (forall ((j1 Int)) (=> (and (<= 0 j1) (<= j1 (- (to_rep (select (rec__patience__state__stacksizes (us_split_fields1 s)) i1)) 2))) (forall ((k1 Int)) (=> (and (<= (+ j1 1) k1) (<= k1 (- (to_rep (select (rec__patience__state__stacksizes (us_split_fields1 s)) i1)) 1))) (< (to_rep (select (select (rec__patience__state__stacks (us_split_fields1 s)) i1) j1)) (to_rep (select (select (rec__patience__state__stacks (us_split_fields1 s)) i1) k1))))))))))))
(assert (=> (not (= result1 true)) (= result false)))
(assert (= result true))
(assert (<= 0 i))
(assert (<= i (- (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
(assert (and (<= 0 i) (<= i 99)))
(assert (= o i))
(assert (= o1 (select (rec__patience__state__stacksizes (us_split_fields1 s)) o)))
(assert (= o2 (to_rep o1)))
(assert (= o3 (- o2 2)))
(assert (= o4 (ite (<= j o3) true false)))
(assert (= result4 (ite (<= 0 j) o4 false)))
(assert (= result4 true))
(assert (and (<= 0 i) (<= i 99)))
(assert (= o6 i))
(assert (= o7 (select (rec__patience__state__stacksizes (us_split_fields1 s)) o6)))
(assert (= o8 (to_rep o7)))
(assert (= o9 (- o8 1)))
(assert (= o10 (ite (<= k o9) true false)))
(assert (and (= o5 (+ j 1)) (in_range1 (+ j 1))))
(assert (= o11 (ite (<= o5 k) true false)))
(assert (= result5 (ite (= o11 true) o10 false)))
(assert (= result5 true))
(assert (and (<= 0 i) (<= i 99)))
(assert (= o13 i))
(assert (= temp___507 (select (rec__patience__state__stacks (us_split_fields1 s)) o13)))
(assert (and (<= 0 k) (<= k 99)))
(assert (= o14 k))
(assert (= o15 (select temp___507 o14)))
(assert (= temp___508 (to_rep o15)))
(assert (and (<= 0 temp___508) (<= temp___508 99)))
(assert (= o16 temp___508))
(assert (= o17 (select (rec__patience__state__values (us_split_fields1 s)) o16)))
(assert (= o18 (to_rep1 o17)))
(assert (and (<= 0 i) (<= i 99)))
(assert (= o12 i))
(assert (= temp___503 (select (rec__patience__state__stacks (us_split_fields1 s)) o12)))
(assert (not (<= 0 j)))
(check-sat)
(exit)
