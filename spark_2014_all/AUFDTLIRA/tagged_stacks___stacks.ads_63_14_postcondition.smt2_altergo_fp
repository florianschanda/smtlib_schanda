(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type less_than_max

predicate in_range(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : less_than_max, less_than_max -> bool

logic dummy : less_than_max

type less_than_max__ref = { less_than_max__content : less_than_max
}

function less_than_max__ref___projection(a: less_than_max__ref) : less_than_max =
  (a).less_than_max__content

logic to_rep : less_than_max -> int

logic of_rep : int -> less_than_max

axiom inversion_axiom :
  (forall x:less_than_max [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:less_than_max [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type element

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : element, element -> bool

logic dummy1 : element

type element__ref = { element__content : element
}

function element__ref___projection(a: element__ref) : element =
  (a).element__content

logic to_rep1 : element -> int

logic of_rep1 : int -> element

axiom inversion_axiom1 :
  (forall x:element [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:element [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,element) farray, int, int, (int,element) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,element) farray. forall a__first:int. forall a__last:int.
  forall b:(int,element) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))))))

logic dummy2 : (int,element) farray

logic value__size : int

logic object__size : (int,element) farray -> int

logic value__component__size : int

logic object__component__size : (int,element) farray -> int

logic value__alignment : int

logic object__alignment : (int,element) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,element) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,element) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,element) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,element) farray, (int,element) farray -> bool

type us_split_fields = { rec__stacks__stack_root__content :
(int,element) farray; rec__stacks__stack_root__length : less_than_max;
rec__ext__ : us_private
}

function us_split_fields_Content__projection(a: us_split_fields) : (int,element) farray =
  (a).rec__stacks__stack_root__content

function us_split_fields_Length__projection(a: us_split_fields) : less_than_max =
  (a).rec__stacks__stack_root__length

function us_split_fields___projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___2__projection(a: us_rep) : int = (a).attr__tag

logic bool_eq4 : us_rep, us_rep -> bool

axiom bool_eq_def3 :
  (forall a:us_rep. forall b:us_rep [bool_eq4(a, b)].
  ((((bool_eq3(((a).us_split_fields1).rec__stacks__stack_root__content, 1,
  100, ((b).us_split_fields1).rec__stacks__stack_root__content, 1,
  100) = true) and
  (to_rep(((a).us_split_fields1).rec__stacks__stack_root__length) = to_rep(((b).us_split_fields1).rec__stacks__stack_root__length))) ->
  (bool_eq4(a, b) = true)) and
  ((not ((bool_eq3(((a).us_split_fields1).rec__stacks__stack_root__content,
  1, 100, ((b).us_split_fields1).rec__stacks__stack_root__content, 1,
  100) = true) and
  (to_rep(((a).us_split_fields1).rec__stacks__stack_root__length) = to_rep(((b).us_split_fields1).rec__stacks__stack_root__length)))) ->
  (bool_eq4(a, b) = false))))

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,element) farray. forall a1:less_than_max.
  forall a2:us_private. forall a3:int. (0 <= object__size1({
  us_split_fields1 = { rec__stacks__stack_root__content = a;
  rec__stacks__stack_root__length = a1; rec__ext__ = a2 }; attr__tag = a3
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,element) farray. forall a1:less_than_max.
  forall a2:us_private. forall a3:int. (0 <= object__alignment1({
  us_split_fields1 = { rec__stacks__stack_root__content = a;
  rec__stacks__stack_root__length = a1; rec__ext__ = a2 }; attr__tag = a3
  })))

logic stacks__stack_root__content__first__bit : int

logic stacks__stack_root__content__last__bit : int

logic stacks__stack_root__content__position : int

axiom stacks__stack_root__content__first__bit_axiom :
  (0 <= stacks__stack_root__content__first__bit)

axiom stacks__stack_root__content__last__bit_axiom :
  (stacks__stack_root__content__first__bit <  stacks__stack_root__content__last__bit)

axiom stacks__stack_root__content__position_axiom :
  (0 <= stacks__stack_root__content__position)

logic stacks__stack_root__length__first__bit : int

logic stacks__stack_root__length__last__bit : int

logic stacks__stack_root__length__position : int

axiom stacks__stack_root__length__first__bit_axiom :
  (0 <= stacks__stack_root__length__first__bit)

axiom stacks__stack_root__length__last__bit_axiom :
  (stacks__stack_root__length__first__bit <  stacks__stack_root__length__last__bit)

axiom stacks__stack_root__length__position_axiom :
  (0 <= stacks__stack_root__length__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : (int,element) farray

logic dummy4 : less_than_max

logic dummy5 : us_private

logic dummy6 : int

type stack_root__ref = { stack_root__content : us_rep
}

function stack_root__ref___projection(a: stack_root__ref) : us_rep =
  (a).stack_root__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

type positive_less_than_max

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : positive_less_than_max, positive_less_than_max -> bool

logic dummy7 : positive_less_than_max

type positive_less_than_max__ref = { positive_less_than_max__content :
positive_less_than_max
}

function positive_less_than_max__ref___projection(a: positive_less_than_max__ref) : positive_less_than_max =
  (a).positive_less_than_max__content

logic to_rep2 : positive_less_than_max -> int

logic of_rep2 : int -> positive_less_than_max

axiom inversion_axiom2 :
  (forall x:positive_less_than_max [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:positive_less_than_max [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields2 = { rec__stacks__buffer__first :
positive_less_than_max; rec__stacks__stack_root__content1 :
(int,element) farray; rec__stacks__stack_root__length1 : less_than_max;
rec__ext__1 : us_private
}

function us_split_fields_First__projection(a: us_split_fields2) : positive_less_than_max =
  (a).rec__stacks__buffer__first

function us_split_fields_Content__2__projection(a: us_split_fields2) : (int,element) farray =
  (a).rec__stacks__stack_root__content1

function us_split_fields_Length__2__projection(a: us_split_fields2) : less_than_max =
  (a).rec__stacks__stack_root__length1

function us_split_fields___2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___4__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : positive_less_than_max, us_private -> us_private

logic extract__first : us_private -> positive_less_than_max

axiom extract__first__conv :
  (forall first:positive_less_than_max.
  (forall rec__ext__2:us_private. (extract__first(hide_ext__(first,
  rec__ext__2)) = first)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__stacks__stack_root__content =
  ((a).us_split_fields3).rec__stacks__stack_root__content1;
  rec__stacks__stack_root__length =
  ((a).us_split_fields3).rec__stacks__stack_root__length1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__stacks__buffer__first,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__stacks__buffer__first =
  extract__first(((r).us_split_fields1).rec__ext__);
  rec__stacks__stack_root__content1 =
  ((r).us_split_fields1).rec__stacks__stack_root__content;
  rec__stacks__stack_root__length1 =
  ((r).us_split_fields1).rec__stacks__stack_root__length; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

logic bool_eq6 : us_rep1, us_rep1 -> bool

axiom bool_eq_def5 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq6(a, b)].
  (((((to_rep2(((a).us_split_fields3).rec__stacks__buffer__first) = to_rep2(((b).us_split_fields3).rec__stacks__buffer__first)) and
  (bool_eq3(((a).us_split_fields3).rec__stacks__stack_root__content1, 1, 100,
  ((b).us_split_fields3).rec__stacks__stack_root__content1, 1,
  100) = true)) and
  (to_rep(((a).us_split_fields3).rec__stacks__stack_root__length1) = to_rep(((b).us_split_fields3).rec__stacks__stack_root__length1))) ->
  (bool_eq6(a, b) = true)) and
  ((not (((to_rep2(((a).us_split_fields3).rec__stacks__buffer__first) = to_rep2(((b).us_split_fields3).rec__stacks__buffer__first)) and
  (bool_eq3(((a).us_split_fields3).rec__stacks__stack_root__content1, 1, 100,
  ((b).us_split_fields3).rec__stacks__stack_root__content1, 1,
  100) = true)) and
  (to_rep(((a).us_split_fields3).rec__stacks__stack_root__length1) = to_rep(((b).us_split_fields3).rec__stacks__stack_root__length1)))) ->
  (bool_eq6(a, b) = false))))

logic us_tag1 : int

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:positive_less_than_max. forall a1:(int,element) farray.
  forall a2:less_than_max. forall a3:us_private. forall a4:int.
  (0 <= object__size2({ us_split_fields3 = { rec__stacks__buffer__first = a;
  rec__stacks__stack_root__content1 = a1; rec__stacks__stack_root__length1 =
  a2; rec__ext__1 = a3 }; attr__tag1 = a4 })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:positive_less_than_max. forall a1:(int,element) farray.
  forall a2:less_than_max. forall a3:us_private. forall a4:int.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__stacks__buffer__first = a; rec__stacks__stack_root__content1 = a1;
  rec__stacks__stack_root__length1 = a2; rec__ext__1 = a3 }; attr__tag1 = a4
  })))

logic stacks__buffer__first__first__bit : int

logic stacks__buffer__first__last__bit : int

logic stacks__buffer__first__position : int

axiom stacks__buffer__first__first__bit_axiom :
  (0 <= stacks__buffer__first__first__bit)

axiom stacks__buffer__first__last__bit_axiom :
  (stacks__buffer__first__first__bit <  stacks__buffer__first__last__bit)

axiom stacks__buffer__first__position_axiom :
  (0 <= stacks__buffer__first__position)

logic stacks__stack_root__content__first__bit1 : int

logic stacks__stack_root__content__last__bit1 : int

logic stacks__stack_root__content__position1 : int

axiom stacks__stack_root__content__first__bit_axiom1 :
  (0 <= stacks__stack_root__content__first__bit1)

axiom stacks__stack_root__content__last__bit_axiom1 :
  (stacks__stack_root__content__first__bit1 <  stacks__stack_root__content__last__bit1)

axiom stacks__stack_root__content__position_axiom1 :
  (0 <= stacks__stack_root__content__position1)

logic stacks__stack_root__length__first__bit1 : int

logic stacks__stack_root__length__last__bit1 : int

logic stacks__stack_root__length__position1 : int

axiom stacks__stack_root__length__first__bit_axiom1 :
  (0 <= stacks__stack_root__length__first__bit1)

axiom stacks__stack_root__length__last__bit_axiom1 :
  (stacks__stack_root__length__first__bit1 <  stacks__stack_root__length__last__bit1)

axiom stacks__stack_root__length__position_axiom1 :
  (0 <= stacks__stack_root__length__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy8 : positive_less_than_max

logic dummy9 : (int,element) farray

logic dummy10 : less_than_max

logic dummy11 : us_private

logic dummy12 : int

type buffer__ref = { buffer__content : us_rep1
}

function buffer__ref___projection(a: buffer__ref) : us_rep1 =
  (a).buffer__content

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

logic temp___187 : int -> (int,element) farray

logic s__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

axiom size__post_axiom :
  (forall s:(int,element) farray. forall s1:less_than_max.
  forall s2:us_private. forall s3:int [size({ us_split_fields1 = {
  rec__stacks__stack_root__content = s; rec__stacks__stack_root__length = s1;
  rec__ext__ = s2 }; attr__tag = s3 })]. in_range(size({ us_split_fields1 = {
  rec__stacks__stack_root__content = s; rec__stacks__stack_root__length = s1;
  rec__ext__ = s2 }; attr__tag = s3 })))

axiom size__def_axiom :
  (forall s:(int,element) farray. forall s1:less_than_max.
  forall s2:us_private. forall s3:int [size({ us_split_fields1 = {
  rec__stacks__stack_root__content = s; rec__stacks__stack_root__length = s1;
  rec__ext__ = s2 }; attr__tag = s3 })]. (size({ us_split_fields1 = {
  rec__stacks__stack_root__content = s; rec__stacks__stack_root__length = s1;
  rec__ext__ = s2 }; attr__tag = s3 }) = to_rep(s1)))

axiom is_empty__post_axiom : true

axiom is_empty__def_axiom :
  (forall s:(int,element) farray. forall s1:less_than_max.
  forall s2:us_private. forall s3:int [is_empty({ us_split_fields1 = {
  rec__stacks__stack_root__content = s; rec__stacks__stack_root__length = s1;
  rec__ext__ = s2 }; attr__tag = s3 })]. ((is_empty({ us_split_fields1 = {
  rec__stacks__stack_root__content = s; rec__stacks__stack_root__length = s1;
  rec__ext__ = s2 }; attr__tag = s3 }) = true) <-> (size({ us_split_fields1 =
  { rec__stacks__stack_root__content = s; rec__stacks__stack_root__length =
  s1; rec__ext__ = s2 }; attr__tag = s3 }) = 0)))

axiom def_axiom :
  (forall temp___189:int. (in_range1(temp___189) ->
  (forall temp___190:int.
  (to_rep1((temp___187(temp___189)[temp___190])) = temp___189))))

 (* File "stacks.ads", line 56, characters 0-0 *)
goal WP_parameter_def :
  (forall s__split_fields:positive_less_than_max.
  forall s__split_fields1:(int,element) farray.
  forall s__split_fields2:less_than_max. forall s__split_fields3:us_private.
  forall o:positive_less_than_max. forall o1:positive_less_than_max.
  forall o2:(int,element) farray. forall o3:less_than_max.
  forall o4:us_private. forall temp___587:positive_less_than_max.
  forall temp___5871:(int,element) farray. forall temp___5872:less_than_max.
  forall temp___5873:us_private. forall temp___5874:int.
  forall o5:less_than_max. forall o6:positive_less_than_max.
  forall o7:(int,element) farray. forall o8:less_than_max.
  forall o9:us_private. forall temp___589:positive_less_than_max.
  forall temp___5891:(int,element) farray. forall temp___5892:less_than_max.
  forall temp___5893:us_private. forall temp___5894:int.
  forall result:positive_less_than_max. forall result1:(int,element) farray.
  forall result2:less_than_max. forall result3:us_private.
  forall s__split_fields4:positive_less_than_max.
  forall s__split_fields5:(int,element) farray.
  forall s__split_fields6:less_than_max. forall s__split_fields7:us_private.
  forall result4:positive_less_than_max. forall result5:(int,element) farray.
  forall result6:less_than_max. forall result7:us_private.
  forall s__split_fields8:positive_less_than_max.
  forall s__split_fields9:(int,element) farray.
  forall s__split_fields10:less_than_max.
  forall s__split_fields11:us_private.
  forall s__split_fields12:positive_less_than_max.
  forall s__split_fields13:(int,element) farray.
  forall s__split_fields14:less_than_max.
  forall s__split_fields15:us_private.
  forall s__split_fields16:positive_less_than_max.
  forall s__split_fields17:(int,element) farray.
  forall s__split_fields18:less_than_max.
  forall s__split_fields19:us_private. (((((((to_rep2(o) = 1) and
  ((o = o1) and ((s__split_fields1 = o2) and ((s__split_fields2 = o3) and
  (s__split_fields3 = o4))))) and (((temp___587 = o1) and
  ((temp___5871 = o2) and ((temp___5872 = o3) and (temp___5873 = o4)))) and
  (s__attr__tag = temp___5874))) and (((result = s__split_fields) and
  ((result1 = s__split_fields1) and ((result2 = s__split_fields2) and
  (result3 = s__split_fields3)))) and ((temp___587 = s__split_fields4) and
  ((temp___5871 = s__split_fields5) and ((temp___5872 = s__split_fields6) and
  (temp___5873 = s__split_fields7)))))) and ((((to_rep(o5) = 0) and
  ((s__split_fields4 = o6) and ((s__split_fields5 = o7) and ((o5 = o8) and
  (s__split_fields7 = o9))))) and (((temp___589 = o6) and
  ((temp___5891 = o7) and ((temp___5892 = o8) and (temp___5893 = o9)))) and
  (s__attr__tag = temp___5894))) and (((result4 = s__split_fields4) and
  ((result5 = s__split_fields5) and ((result6 = s__split_fields6) and
  (result7 = s__split_fields7)))) and ((temp___589 = s__split_fields8) and
  ((temp___5891 = s__split_fields9) and
  ((temp___5892 = s__split_fields10) and
  (temp___5893 = s__split_fields11))))))) and
  (((s__split_fields12 = s__split_fields8) and
  ((s__split_fields13 = s__split_fields9) and
  ((s__split_fields14 = s__split_fields10) and
  (s__split_fields15 = s__split_fields11)))) and
  ((s__split_fields16 = s__split_fields8) and
  ((s__split_fields17 = s__split_fields9) and
  ((s__split_fields18 = s__split_fields10) and
  (s__split_fields19 = s__split_fields11)))))) -> (is_empty({
  us_split_fields1 = { rec__stacks__stack_root__content = s__split_fields13;
  rec__stacks__stack_root__length = s__split_fields14; rec__ext__ =
  hide_ext__(s__split_fields12, s__split_fields15) }; attr__tag =
  s__attr__tag }) = true)))
