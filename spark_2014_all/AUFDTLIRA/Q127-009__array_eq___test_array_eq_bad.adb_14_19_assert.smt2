(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__test_array_eq_bad__my_rec__f1 integer) (rec__test_array_eq_bad__my_rec__f2 integer)))))
(define-fun us_split_fields_F1__projection ((a us_split_fields)) integer (rec__test_array_eq_bad__my_rec__f1 a))
(define-fun us_split_fields_F2__projection ((a us_split_fields)) integer (rec__test_array_eq_bad__my_rec__f2 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__test_array_eq_bad__my_rec__f1 (us_split_fields1 a))) (to_rep (rec__test_array_eq_bad__my_rec__f1 (us_split_fields1 b)))) (= (to_rep (rec__test_array_eq_bad__my_rec__f2 (us_split_fields1 a))) (to_rep (rec__test_array_eq_bad__my_rec__f2 (us_split_fields1 b))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const test_array_eq_bad__my_rec__f1__first__bit Int)
(declare-const test_array_eq_bad__my_rec__f1__last__bit Int)
(declare-const test_array_eq_bad__my_rec__f1__position Int)
(assert (<= 0 test_array_eq_bad__my_rec__f1__first__bit))
(assert (< test_array_eq_bad__my_rec__f1__first__bit test_array_eq_bad__my_rec__f1__last__bit))
(assert (<= 0 test_array_eq_bad__my_rec__f1__position))
(declare-const test_array_eq_bad__my_rec__f2__first__bit Int)
(declare-const test_array_eq_bad__my_rec__f2__last__bit Int)
(declare-const test_array_eq_bad__my_rec__f2__position Int)
(assert (<= 0 test_array_eq_bad__my_rec__f2__first__bit))
(assert (< test_array_eq_bad__my_rec__f2__first__bit test_array_eq_bad__my_rec__f2__last__bit))
(assert (<= 0 test_array_eq_bad__my_rec__f2__position))
(declare-fun user_eq1 (us_rep us_rep) Bool)
(declare-const dummy1 us_rep)
(declare-datatypes () ((my_rec__ref (mk_my_rec__ref (my_rec__content us_rep)))))
(define-fun my_rec__ref___projection ((a my_rec__ref)) us_rep (my_rec__content a))
(declare-sort tmy_arrayD1 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq2 (tmy_arrayD1 tmy_arrayD1) Bool)
(declare-const dummy2 tmy_arrayD1)
(declare-datatypes () ((tmy_arrayD1__ref (mk_tmy_arrayD1__ref (tmy_arrayD1__content tmy_arrayD1)))))
(define-fun tmy_arrayD1__ref___projection ((a tmy_arrayD1__ref)) tmy_arrayD1 (tmy_arrayD1__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (user_eq1 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (user_eq1 (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun test_array_eq_bad__a__aggregate_def (us_rep us_rep) (Array Int us_rep))
(declare-fun test_array_eq_bad__b__aggregate_def (us_rep us_rep) (Array Int us_rep))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_18)))
(declare-fun oeq (us_rep us_rep) Bool)
(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)
(assert (forall ((a us_rep) (b us_rep)) (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)))))
(assert true)
(assert (forall ((x us_rep) (y us_rep)) (! (= (= (oeq x y) true) (= (to_rep (rec__test_array_eq_bad__my_rec__f1 (us_split_fields1 x))) (to_rep (rec__test_array_eq_bad__my_rec__f1 (us_split_fields1 y))))) :pattern ((oeq x y)))))
(assert (forall ((temp___219 us_rep) (temp___220 us_rep)) (let ((temp___218 (test_array_eq_bad__a__aggregate_def temp___219 temp___220))) (and (= (select temp___218 1) temp___219) (= (select temp___218 2) temp___220)))))
(assert (forall ((temp___223 us_rep) (temp___224 us_rep)) (let ((temp___222 (test_array_eq_bad__b__aggregate_def temp___223 temp___224))) (and (= (select temp___222 1) temp___223) (= (select temp___222 2) temp___224)))))
(declare-const a (Array Int us_rep))
(declare-const b (Array Int us_rep))
(declare-const o integer)
(declare-const o1 integer)
(declare-const o2 integer)
(declare-const o3 integer)
(declare-const o4 integer)
(declare-const o5 integer)
(declare-const o6 integer)
(declare-const o7 integer)
(declare-const o8 integer)
(declare-const o9 integer)
(declare-const o10 integer)
(declare-const o11 integer)
(declare-const o12 (Array Int us_rep))
(declare-const o13 integer)
(declare-const o14 integer)
(declare-const o15 integer)
(declare-const o16 integer)
(declare-const o17 integer)
(declare-const o18 integer)
(declare-const o19 integer)
(declare-const o20 integer)
(declare-const o21 integer)
(declare-const o22 integer)
(declare-const o23 integer)
(declare-const o24 integer)
(declare-const o25 (Array Int us_rep))
(declare-const result (Array Int us_rep))
(declare-const a1 (Array Int us_rep))
(declare-const result1 (Array Int us_rep))
(declare-const b1 (Array Int us_rep))
(assert (= (to_rep o4) 4))
(assert (= (to_rep o5) 3))
(assert (= o5 o6))
(assert (= o4 o7))
(assert (= o8 o6))
(assert (= o9 o7))
(assert (= (to_rep o) 2))
(assert (= (to_rep o1) 1))
(assert (= o1 o2))
(assert (= o o3))
(assert (= o10 o2))
(assert (= o11 o3))
(assert (= o12 (test_array_eq_bad__a__aggregate_def (mk___rep (mk___split_fields o10 o11)) (mk___rep (mk___split_fields o8 o9)))))
(assert (= result a))
(assert (= a1 o12))
(assert (= (to_rep o17) 3))
(assert (= (to_rep o18) 3))
(assert (= o18 o19))
(assert (= o17 o20))
(assert (= o21 o19))
(assert (= o22 o20))
(assert (= (to_rep o13) 1))
(assert (= (to_rep o14) 1))
(assert (= o14 o15))
(assert (= o13 o16))
(assert (= o23 o15))
(assert (= o24 o16))
(assert (= o25 (test_array_eq_bad__b__aggregate_def (mk___rep (mk___split_fields o23 o24)) (mk___rep (mk___split_fields o21 o22)))))
(assert (= result1 b))
(assert (= b1 o25))
(assert (not (not (= (bool_eq1 a1 1 2 b1 1 2) true))))
(check-sat)
(exit)
