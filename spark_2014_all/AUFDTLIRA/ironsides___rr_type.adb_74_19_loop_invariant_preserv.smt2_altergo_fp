(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

type domainnamestringtypeindex

predicate in_range3(x: int) = ((1 <= x) and (x <= 128))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : domainnamestringtypeindex, domainnamestringtypeindex -> bool

logic dummy2 : domainnamestringtypeindex

type domainnamestringtypeindex__ref = { domainnamestringtypeindex__content :
domainnamestringtypeindex
}

function domainnamestringtypeindex__ref___projection(a: domainnamestringtypeindex__ref) : domainnamestringtypeindex =
  (a).domainnamestringtypeindex__content

logic attr__ATTRIBUTE_ADDRESS : int

logic right : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic domainnamelength : (int,character) farray -> int

logic domainnamelength__function_guard : int, (int,character) farray -> prop

logic origin_char : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic r6b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type t7b__ref = { t7b__content : integer
}

function t7b__ref___projection(a: t7b__ref) : integer = (a).t7b__content

logic attr__ATTRIBUTE_ADDRESS7 : int

axiom origin_char__def_axiom : (origin_char = 64)

 (* File "rr_type.ads", line 131, characters 0-0 *)
goal WP_parameter_def :
  (forall left:(int,character) farray. forall success:bool.
  forall lengthl:int. forall lengthr:int. forall i:int. forall o:int.
  forall o1:int. forall o2:character. forall o3:int.
  forall o4:(int,character) farray. forall temp___351:int.
  forall o5:character. forall o6:int. forall o7:(int,character) farray.
  forall success1:bool. forall result:int. forall lengthl1:int.
  forall result1:int. forall lengthr1:int. forall result2:bool.
  forall success2:bool. forall result3:bool. forall success3:bool.
  forall result4:(int,character) farray. forall left1:(int,character) farray.
  forall result5:int. forall i1:int. forall left2:(int,character) farray.
  forall i2:int. forall result6:(int,character) farray.
  forall left3:(int,character) farray. forall result7:int. forall i3:int.
  (in_range2(origin_char) -> (((1 <= 128) -> in_range3(lengthl)) ->
  (((1 <= 128) -> in_range3(lengthr)) -> ((((o = domainnamelength(left)) and
  (in_range3(o) and ((((o = 1) and ((to_rep((left[1])) = 32) or
  (to_rep((left[2])) = 32))) or (o = 128)) or
  ((to_rep((left[(o + 1)])) = 32) and
  (forall q:int. (((1 <= q) and (q <= o)) -> (not (to_rep((left[q])) = 32)))))))) and
  ((result = lengthl) and (lengthl1 = o))) ->
  ((((o1 = domainnamelength(right)) and (in_range3(o1) and ((((o1 = 1) and
  ((to_rep((right[1])) = 32) or (to_rep((right[2])) = 32))) or (o1 = 128)) or
  ((to_rep((right[(o1 + 1)])) = 32) and
  (forall q:int. (((1 <= q) and (q <= o1)) ->
  (not (to_rep((right[q])) = 32)))))))) and ((result1 = lengthr) and
  (lengthr1 = o1))) -> ((((lengthl1 = 128) and ((result2 = success) and
  (success2 = of_int(0)))) or ((not (lengthl1 = 128)) and
  ((success2 = success) and (success2 = success1)))) ->
  ((((128 <  ((lengthl1 + 1) + lengthr1)) and ((result3 = success2) and
  (success3 = of_int(0)))) or ((not (128 <  ((lengthl1 + 1) + lengthr1))) and
  (success3 = success2))) -> ((success3 = true) ->
  ((not ((to_rep((left[lengthl1])) = 64) and (lengthl1 = 1))) ->
  ((((to_rep(o2) = 46) and ((((1 <= (lengthl1 + 1)) and
  ((lengthl1 + 1) <= 128)) and (o3 = (lengthl1 + 1))) and
  (o4 = (left[o3 <- o2])))) and ((result4 = left) and (left1 = o4))) ->
  (((lengthr1 = r6b) and in_range3(r6b)) -> (((result5 = i) and (i1 = 1)) ->
  (((1 <= i1) and (i1 <= r6b)) -> ((((1 <= lengthl1) and
  (lengthl1 <  128)) and (((lengthl1 + 1) + lengthr1) <= 128)) ->
  (((((1 <= r6b) -> dynamic_property(1, r6b, i2)) and ((1 <= i2) and
  (i2 <= r6b))) and ((((to_rep(o5) = to_rep((right[i2]))) and
  ((((temp___351 = ((lengthl1 + 1) + i2)) and
  in_range1(((lengthl1 + 1) + i2))) and (((1 <= temp___351) and
  (temp___351 <= 128)) and (o6 = temp___351))) and
  (o7 = (left2[o6 <- o5])))) and ((result6 = left2) and (left3 = o7))) and
  ((not (i2 = r6b)) and ((result7 = i2) and (i3 = (i2 + 1)))))) ->
  (1 <= lengthl1)))))))))))))))))
