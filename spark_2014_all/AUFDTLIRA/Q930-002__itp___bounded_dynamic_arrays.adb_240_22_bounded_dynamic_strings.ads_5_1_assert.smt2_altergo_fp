(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

type positive

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

type list__ref = { list__content : us_t
}

function list__ref___projection(a: list__ref) : us_t = (a).list__content

type natural_index

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural_index, natural_index -> bool

logic dummy5 : natural_index

type natural_index__ref = { natural_index__content : natural_index
}

function natural_index__ref___projection(a: natural_index__ref) : natural_index =
  (a).natural_index__content

logic to_rep2 : natural_index -> int

logic of_rep2 : int -> natural_index

axiom inversion_axiom2 :
  (forall x:natural_index [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:natural_index [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type t48s__ref = { t48s__content : integer
}

function t48s__ref___projection(a: t48s__ref) : integer = (a).t48s__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq6 : us_t1, us_t1 -> bool

logic dummy7 : (int,character) farray

logic dummy8 : t1

type t49s__ref = { t49s__content : us_t1
}

function t49s__ref___projection(a: t49s__ref) : us_t1 = (a).t49s__content

type us_split_discrs = { rec__bounded_dynamic_strings__sequence__capacity :
natural_index
}

function us_split_discrs___projection(a: us_split_discrs) : natural_index =
  (a).rec__bounded_dynamic_strings__sequence__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__bounded_dynamic_strings__sequence__current_length : natural_index;
rec__bounded_dynamic_strings__sequence__content : us_t1
}

function us_split_fields_Current_Length__projection(a: us_split_fields) : natural_index =
  (a).rec__bounded_dynamic_strings__sequence__current_length

function us_split_fields_Content__projection(a: us_split_fields) : us_t1 =
  (a).rec__bounded_dynamic_strings__sequence__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq10 : us_rep, us_rep -> bool

axiom bool_eq_def7 :
  (forall a:us_rep. forall b:us_rep [bool_eq10(a, b)].
  ((((to_rep2(((a).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity) = to_rep2(((b).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity)) and
  ((to_rep2(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) = to_rep2(((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)) and
  (bool_eq9(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__content,
  ((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__content) = true))) ->
  (bool_eq10(a, b) = true)) and
  ((not ((to_rep2(((a).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity) = to_rep2(((b).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity)) and
  ((to_rep2(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) = to_rep2(((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)) and
  (bool_eq9(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__content,
  ((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__content) = true)))) ->
  (bool_eq10(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:natural_index. forall a1:natural_index.
  forall a2:(int,character) farray. forall a3:t1. (0 <= object__size2({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity = a
  }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = a1;
  rec__bounded_dynamic_strings__sequence__content = { elts1 = a2; rt1 = a3 }
  } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:natural_index. forall a1:natural_index.
  forall a2:(int,character) farray. forall a3:t1. (0 <= object__alignment2({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity = a
  }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = a1;
  rec__bounded_dynamic_strings__sequence__content = { elts1 = a2; rt1 = a3 }
  } })))

logic bounded_dynamic_strings__sequence__capacity__first__bit : int

logic bounded_dynamic_strings__sequence__capacity__last__bit : int

logic bounded_dynamic_strings__sequence__capacity__position : int

axiom bounded_dynamic_strings__sequence__capacity__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__capacity__first__bit)

axiom bounded_dynamic_strings__sequence__capacity__last__bit_axiom :
  (bounded_dynamic_strings__sequence__capacity__first__bit <  bounded_dynamic_strings__sequence__capacity__last__bit)

axiom bounded_dynamic_strings__sequence__capacity__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__capacity__position)

logic bounded_dynamic_strings__sequence__current_length__first__bit : int

logic bounded_dynamic_strings__sequence__current_length__last__bit : int

logic bounded_dynamic_strings__sequence__current_length__position : int

axiom bounded_dynamic_strings__sequence__current_length__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__current_length__first__bit)

axiom bounded_dynamic_strings__sequence__current_length__last__bit_axiom :
  (bounded_dynamic_strings__sequence__current_length__first__bit <  bounded_dynamic_strings__sequence__current_length__last__bit)

axiom bounded_dynamic_strings__sequence__current_length__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__current_length__position)

logic bounded_dynamic_strings__sequence__content__first__bit : int

logic bounded_dynamic_strings__sequence__content__last__bit : int

logic bounded_dynamic_strings__sequence__content__position : int

axiom bounded_dynamic_strings__sequence__content__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__content__first__bit)

axiom bounded_dynamic_strings__sequence__content__last__bit_axiom :
  (bounded_dynamic_strings__sequence__content__first__bit <  bounded_dynamic_strings__sequence__content__last__bit)

axiom bounded_dynamic_strings__sequence__content__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__content__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy9 : natural_index

logic dummy10 : natural_index

logic dummy11 : (int,character) farray

logic dummy12 : t1

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic fragment : (int,character) farray

logic fragment1 : t

logic attr__ATTRIBUTE_ADDRESS : int

logic within : natural_index

logic within1 : natural_index

logic within2 : (int,character) farray

logic within3 : t1

logic attr__ATTRIBUTE_ADDRESS1 : int

logic contains__2 : us_rep, us_t -> bool

logic contains__2__function_guard : bool, us_rep, us_t -> prop

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy13 : integer

type t76s__ref = { t76s__content : integer
}

function t76s__ref___projection(a: t76s__ref) : integer = (a).t76s__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

function bool_eq12(x: us_t2, y: us_t2) : bool = bool_eq4((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq9 : us_t2, us_t2 -> bool

logic dummy14 : (int,character) farray

logic dummy15 : t2

type t77s__ref = { t77s__content : us_t2
}

function t77s__ref___projection(a: t77s__ref) : us_t2 = (a).t77s__content

axiom contains__2__post_axiom : true

axiom contains__2__def_axiom :
  (forall within4:natural_index. forall within5:natural_index.
  forall within6:(int,character) farray. forall within7:t1.
  (forall fragment2:(int,character) farray. forall fragment3:t [contains__2({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  within4 }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = within5;
  rec__bounded_dynamic_strings__sequence__content = { elts1 = within6; rt1 =
  within7 } } }, { elts = fragment2; rt = fragment3 })]. ((contains__2({
  us_split_discrs1 = { rec__bounded_dynamic_strings__sequence__capacity =
  within4 }; us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = within5;
  rec__bounded_dynamic_strings__sequence__content = { elts1 = within6; rt1 =
  within7 } } }, { elts = fragment2; rt = fragment3 }) = true) <->
  (((1 <= length({ elts = fragment2; rt = fragment3 })) and (length({ elts =
  fragment2; rt = fragment3 }) <= to_rep2(within5))) and
  (exists k:int. (((1 <= k) and (k <= ((to_rep2(within5) - length({ elts =
  fragment2; rt = fragment3 })) + 1))) and (bool_eq4(within6,
  to_rep1(first4(mk2(k, ((k + length({ elts = fragment2; rt = fragment3
  })) - 1)))), to_rep1(last4(mk2(k, ((k + length({ elts = fragment2; rt =
  fragment3 })) - 1)))), fragment2, to_rep1(first(fragment3)),
  to_rep1(last(fragment3))) = true)))))))

logic i52s : natural_index

logic i52s1 : natural_index

logic i52s2 : (int,character) farray

logic i52s3 : t1

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq13 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq13(x, y)]. (((x = y) -> (bool_eq13(x,
  y) = true)) and ((not (x = y)) -> (bool_eq13(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy16 : integer

type t153b__ref = { t153b__content : integer
}

function t153b__ref___projection(a: t153b__ref) : integer =
  (a).t153b__content

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property6(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : integer, integer -> bool

logic dummy17 : integer

type t155b__ref = { t155b__content : integer
}

function t155b__ref___projection(a: t155b__ref) : integer =
  (a).t155b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property7(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property6(range_first, range_last, low) and
  dynamic_property6(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,character) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,character) farray. (0 <= object__alignment4(a)))

function bool_eq15(x: us_t3, y: us_t3) : bool = bool_eq4((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq12 : us_t3, us_t3 -> bool

logic dummy18 : (int,character) farray

logic dummy19 : t3

type t156b__ref = { t156b__content : us_t3
}

function t156b__ref___projection(a: t156b__ref) : us_t3 = (a).t156b__content

predicate dynamic_property8(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq13 : integer, integer -> bool

logic dummy20 : integer

type t166b__ref = { t166b__content : integer
}

function t166b__ref___projection(a: t166b__ref) : integer =
  (a).t166b__content

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last8(mk4(f, l))) = l)))))

predicate dynamic_property9(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (dynamic_property8(range_first, range_last, low) and
  dynamic_property8(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,character) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,character) farray = (a).elts4

function of_array4(a: (int,character) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last9(a: us_t4) : int = to_rep1(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,character) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,character) farray. (0 <= object__alignment5(a)))

function bool_eq17(x: us_t4, y: us_t4) : bool = bool_eq4((x).elts4,
  to_rep1(first8((x).rt4)), to_rep1(last8((x).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last8((y).rt4)))

logic user_eq14 : us_t4, us_t4 -> bool

logic dummy21 : (int,character) farray

logic dummy22 : t4

type t167b__ref = { t167b__content : us_t4
}

function t167b__ref___projection(a: t167b__ref) : us_t4 = (a).t167b__content

 (* File "bounded_dynamic_arrays.ads", line 19, characters 0-0 *)
goal WP_parameter_def :
  (forall k:int. forall bounded_dynamic_strings__location__2__result:int.
  forall us:int. forall o:int. forall o1:int. forall o2:bool. forall o3:bool.
  forall o4:int. forall o5:int. forall temp___1306:int.
  forall temp___1295:int. forall o6:int. forall o7:int.
  forall temp___1292:int. forall o8:(int,character) farray.
  forall temp___1294:(int,character) farray. forall temp___12941:t3.
  forall k1:int. forall bounded_dynamic_strings__location__2__result1:int.
  forall result:bool. forall result1:int. forall k2:int. forall result2:bool.
  forall bounded_dynamic_strings__location__2__result2:int. forall k3:int.
  forall bounded_dynamic_strings__location__2__result3:int. forall k4:int.
  forall bounded_dynamic_strings__location__2__result4:int. forall k5:int.
  forall bounded_dynamic_strings__location__2__result5:int. forall k6:int.
  forall bounded_dynamic_strings__location__2__result6:int. forall k7:int.
  forall bounded_dynamic_strings__location__2__result7:int. forall k8:int.
  forall bounded_dynamic_strings__location__2__result8:int. forall k9:int.
  forall bounded_dynamic_strings__location__2__result9:int.
  ((((0 <= to_rep2(i52s1)) and (to_rep2(i52s1) <= to_rep2(i52s))) and
  (dynamic_property2(1, to_rep2(i52s), to_rep1(first2(i52s3)),
  to_rep1(last2(i52s3))) and ((to_rep1(first2(i52s3)) = 1) and
  (to_rep1(last2(i52s3)) = to_rep2(i52s))))) -> (dynamic_property(1,
  2147483647, to_rep1(first(fragment1)), to_rep1(last(fragment1))) ->
  ((((0 <= to_rep2(within1)) and (to_rep2(within1) <= to_rep2(within))) and
  (dynamic_property2(1, to_rep2(within), to_rep1(first2(within3)),
  to_rep1(last2(within3))) and ((to_rep1(first2(within3)) = 1) and
  (to_rep1(last2(within3)) = to_rep2(within))))) ->
  (((us = to_rep2(within)) and in_range4(to_rep2(within))) ->
  ((((((o1 = length({ elts = fragment; rt = fragment1 })) and
  in_range1(length({ elts = fragment; rt = fragment1 }))) and
  (((o1 <= to_rep2(within1)) and (o2 = true)) or
  ((not (o1 <= to_rep2(within1))) and (o2 = false)))) and ((((o = length({
  elts = fragment; rt = fragment1 })) and in_range1(length({ elts = fragment;
  rt = fragment1 }))) and (((1 <= o) and (o3 = true)) or ((not (1 <= o)) and
  (o3 = false)))) and (result = match_bool(o3, o2, false)))) and
  (((result = true) and ((((((o4 = length({ elts = fragment; rt = fragment1
  })) and in_range1(length({ elts = fragment; rt = fragment1 }))) and
  (o5 = (to_rep2(within1) - o4))) and (temp___1306 = (o5 + 1))) and ((({
  int__content = result1 } = { int__content = k }) and (k2 = 1)) and
  ((((1 <= k2) and (k2 <= temp___1306)) and ((((temp___1295 = k2) and
  ((((((((o6 = length({ elts = fragment; rt = fragment1 })) and
  in_range1(length({ elts = fragment; rt = fragment1 }))) and
  (o7 = (k2 + o6))) and (temp___1292 = (o7 - 1))) and
  ((((k2 <= temp___1292) -> (((to_rep1(first2(within3)) <= k2) and
  (k2 <= to_rep1(last2(within3)))) and
  ((to_rep1(first2(within3)) <= temp___1292) and
  (temp___1292 <= to_rep1(last2(within3)))))) and (o8 = within2)) and
  ((o8 = temp___1294) and (mk3(k2, temp___1292) = temp___12941)))) and
  (result2 = bool_eq4(temp___1294, to_rep1(first6(temp___12941)),
  to_rep1(last6(temp___12941)), fragment, to_rep1(first(fragment1)),
  to_rep1(last(fragment1))))) and ((not (result2 = true)) and
  ((bounded_dynamic_strings__location__2__result2 = bounded_dynamic_strings__location__2__result) and
  (bounded_dynamic_strings__location__2__result2 = bounded_dynamic_strings__location__2__result1)))) and
  ((forall j:int. (((1 <= j) and (j <= k3)) -> (not (bool_eq4(within2,
   to_rep1(first8(mk4(j, ((j + length({ elts = fragment; rt = fragment1
   })) - 1)))), to_rep1(last8(mk4(j, ((j + length({ elts = fragment; rt =
   fragment1 })) - 1)))), fragment, to_rep1(first(fragment1)),
   to_rep1(last(fragment1))) = true)))) and
  ((((1 <= ((to_rep2(within1) - length({ elts = fragment; rt = fragment1
  })) + 1)) -> dynamic_property5(1, ((to_rep2(within1) - length({ elts =
  fragment; rt = fragment1 })) + 1), k3)) and ((1 <= k3) and
  (k3 <= ((to_rep2(within1) - length({ elts = fragment; rt = fragment1
  })) + 1)))) and (k3 = temp___1306))))) and
  (((bounded_dynamic_strings__location__2__result3 = bounded_dynamic_strings__location__2__result4) and
  (k3 = k4)) and
  ((bounded_dynamic_strings__location__2__result5 = bounded_dynamic_strings__location__2__result3) and
  (k5 = k3)))) and ((({ int__content =
  bounded_dynamic_strings__location__2__result6 } = { int__content =
  bounded_dynamic_strings__location__2__result4 }) and ({ int__content = k6
  } = { int__content = k4 })) and
  ((bounded_dynamic_strings__location__2__result7 = bounded_dynamic_strings__location__2__result5) and
  (k7 = k5))))) or ((not ((1 <= k2) and (k2 <= temp___1306))) and ((({
  int__content = bounded_dynamic_strings__location__2__result6 } = {
  int__content = bounded_dynamic_strings__location__2__result }) and
  (k2 = k6)) and
  ((bounded_dynamic_strings__location__2__result7 = bounded_dynamic_strings__location__2__result1) and
  (k7 = k2))))))) and ((({ int__content =
  bounded_dynamic_strings__location__2__result8 } = { int__content =
  bounded_dynamic_strings__location__2__result6 }) and ({ int__content = k8
  } = { int__content = k6 })) and
  ((bounded_dynamic_strings__location__2__result9 = bounded_dynamic_strings__location__2__result7) and
  (k9 = k7))))) or ((not (result = true)) and ((({ int__content =
  bounded_dynamic_strings__location__2__result8 } = { int__content =
  bounded_dynamic_strings__location__2__result }) and ({ int__content = k8
  } = { int__content = k })) and
  ((bounded_dynamic_strings__location__2__result9 = bounded_dynamic_strings__location__2__result1) and
  (k9 = k1)))))) -> (not (contains__2({ us_split_discrs1 = {
  rec__bounded_dynamic_strings__sequence__capacity = within };
  us_split_fields1 = {
  rec__bounded_dynamic_strings__sequence__current_length = within1;
  rec__bounded_dynamic_strings__sequence__content = { elts1 = within2; rt1 =
  within3 } } }, { elts = fragment; rt = fragment1 }) = true))))))))
