(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type index_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 65536))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : index_type, index_type -> bool

logic dummy5 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type size_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 65536))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : size_type, size_type -> bool

logic dummy6 : size_type

type size_type__ref = { size_type__content : size_type
}

function size_type__ref___projection(a: size_type__ref) : size_type =
  (a).size_type__content

logic to_rep2 : size_type -> int

logic of_rep2 : int -> size_type

axiom inversion_axiom2 :
  (forall x:size_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:size_type [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

logic to_rep3 : index_type -> int

logic of_rep3 : int -> index_type

axiom inversion_axiom3 :
  (forall x:index_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:index_type [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t3s__ref = { t3s__content : integer
}

function t3s__ref___projection(a: t3s__ref) : integer = (a).t3s__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy8 : (int,character) farray

logic dummy9 : t1

type t4s__ref = { t4s__content : us_t1
}

function t4s__ref___projection(a: t4s__ref) : us_t1 = (a).t4s__content

type us_split_discrs = { rec__bounded_strings__bounded_string__bound :
index_type
}

function us_split_discrs___projection(a: us_split_discrs) : index_type =
  (a).rec__bounded_strings__bounded_string__bound

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__bounded_strings__bounded_string__text : us_t1;
rec__bounded_strings__bounded_string__size : size_type
}

function us_split_fields_Text__projection(a: us_split_fields) : us_t1 =
  (a).rec__bounded_strings__bounded_string__text

function us_split_fields_Size__projection(a: us_split_fields) : size_type =
  (a).rec__bounded_strings__bounded_string__size

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq10 : us_rep, us_rep -> bool

axiom bool_eq_def7 :
  (forall a:us_rep. forall b:us_rep [bool_eq10(a, b)].
  (((((to_rep3(((a).us_split_discrs1).rec__bounded_strings__bounded_string__bound) = to_rep3(((b).us_split_discrs1).rec__bounded_strings__bounded_string__bound)) and
  (bool_eq9(((a).us_split_fields1).rec__bounded_strings__bounded_string__text,
  ((b).us_split_fields1).rec__bounded_strings__bounded_string__text) = true)) and
  (to_rep2(((a).us_split_fields1).rec__bounded_strings__bounded_string__size) = to_rep2(((b).us_split_fields1).rec__bounded_strings__bounded_string__size))) ->
  (bool_eq10(a, b) = true)) and
  ((not (((to_rep3(((a).us_split_discrs1).rec__bounded_strings__bounded_string__bound) = to_rep3(((b).us_split_discrs1).rec__bounded_strings__bounded_string__bound)) and
  (bool_eq9(((a).us_split_fields1).rec__bounded_strings__bounded_string__text,
  ((b).us_split_fields1).rec__bounded_strings__bounded_string__text) = true)) and
  (to_rep2(((a).us_split_fields1).rec__bounded_strings__bounded_string__size) = to_rep2(((b).us_split_fields1).rec__bounded_strings__bounded_string__size)))) ->
  (bool_eq10(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:index_type. forall a1:(int,character) farray. forall a2:t1.
  forall a3:size_type. (0 <= object__size2({ us_split_discrs1 = {
  rec__bounded_strings__bounded_string__bound = a }; us_split_fields1 = {
  rec__bounded_strings__bounded_string__text = { elts1 = a1; rt1 = a2 };
  rec__bounded_strings__bounded_string__size = a3 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:index_type. forall a1:(int,character) farray. forall a2:t1.
  forall a3:size_type. (0 <= object__alignment2({ us_split_discrs1 = {
  rec__bounded_strings__bounded_string__bound = a }; us_split_fields1 = {
  rec__bounded_strings__bounded_string__text = { elts1 = a1; rt1 = a2 };
  rec__bounded_strings__bounded_string__size = a3 } })))

logic bounded_strings__bounded_string__bound__first__bit : int

logic bounded_strings__bounded_string__bound__last__bit : int

logic bounded_strings__bounded_string__bound__position : int

axiom bounded_strings__bounded_string__bound__first__bit_axiom :
  (0 <= bounded_strings__bounded_string__bound__first__bit)

axiom bounded_strings__bounded_string__bound__last__bit_axiom :
  (bounded_strings__bounded_string__bound__first__bit <  bounded_strings__bounded_string__bound__last__bit)

axiom bounded_strings__bounded_string__bound__position_axiom :
  (0 <= bounded_strings__bounded_string__bound__position)

logic bounded_strings__bounded_string__text__first__bit : int

logic bounded_strings__bounded_string__text__last__bit : int

logic bounded_strings__bounded_string__text__position : int

axiom bounded_strings__bounded_string__text__first__bit_axiom :
  (0 <= bounded_strings__bounded_string__text__first__bit)

axiom bounded_strings__bounded_string__text__last__bit_axiom :
  (bounded_strings__bounded_string__text__first__bit <  bounded_strings__bounded_string__text__last__bit)

axiom bounded_strings__bounded_string__text__position_axiom :
  (0 <= bounded_strings__bounded_string__text__position)

logic bounded_strings__bounded_string__size__first__bit : int

logic bounded_strings__bounded_string__size__last__bit : int

logic bounded_strings__bounded_string__size__position : int

axiom bounded_strings__bounded_string__size__first__bit_axiom :
  (0 <= bounded_strings__bounded_string__size__first__bit)

axiom bounded_strings__bounded_string__size__last__bit_axiom :
  (bounded_strings__bounded_string__size__first__bit <  bounded_strings__bounded_string__size__last__bit)

axiom bounded_strings__bounded_string__size__position_axiom :
  (0 <= bounded_strings__bounded_string__size__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy10 : index_type

logic dummy11 : (int,character) farray

logic dummy12 : t1

logic dummy13 : size_type

type bounded_string__ref = { bounded_string__content : us_rep
}

function bounded_string__ref___projection(a: bounded_string__ref) : us_rep =
  (a).bounded_string__content

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

axiom size__post_axiom :
  (forall b:index_type. forall b1:(int,character) farray. forall b2:t1.
  forall b3:size_type [size({ us_split_discrs1 = {
  rec__bounded_strings__bounded_string__bound = b }; us_split_fields1 = {
  rec__bounded_strings__bounded_string__text = { elts1 = b1; rt1 = b2 };
  rec__bounded_strings__bounded_string__size = b3 } })].
  ((dynamic_property2(1, to_rep3(b), to_rep1(first2(b2)),
  to_rep1(last2(b2))) and ((to_rep1(first2(b2)) = 1) and
  (to_rep1(last2(b2)) = to_rep3(b)))) -> in_range4(size({ us_split_discrs1 =
  { rec__bounded_strings__bounded_string__bound = b }; us_split_fields1 = {
  rec__bounded_strings__bounded_string__text = { elts1 = b1; rt1 = b2 };
  rec__bounded_strings__bounded_string__size = b3 } }))))

axiom size__def_axiom :
  (forall b:index_type. forall b1:(int,character) farray. forall b2:t1.
  forall b3:size_type [size({ us_split_discrs1 = {
  rec__bounded_strings__bounded_string__bound = b }; us_split_fields1 = {
  rec__bounded_strings__bounded_string__text = { elts1 = b1; rt1 = b2 };
  rec__bounded_strings__bounded_string__size = b3 } })].
  ((dynamic_property2(1, to_rep3(b), to_rep1(first2(b2)),
  to_rep1(last2(b2))) and ((to_rep1(first2(b2)) = 1) and
  (to_rep1(last2(b2)) = to_rep3(b)))) -> (size({ us_split_discrs1 = {
  rec__bounded_strings__bounded_string__bound = b }; us_split_fields1 = {
  rec__bounded_strings__bounded_string__text = { elts1 = b1; rt1 = b2 };
  rec__bounded_strings__bounded_string__size = b3 } }) = to_rep2(b3))))

logic upper_bound : int

logic attr__ATTRIBUTE_ADDRESS : int

logic initializer : (int,character) farray

logic initializer1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy14 : integer

type tT2bP1__ref = { tT2bP1__content : integer
}

function tT2bP1__ref___projection(a: tT2bP1__ref) : integer =
  (a).tT2bP1__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first4(mk2(f, l))) = f) and (to_rep1(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,character) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,character) farray = (a).elts2

function of_array2(a: (int,character) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

function bool_eq12(x: us_t2, y: us_t2) : bool = bool_eq4((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq10 : us_t2, us_t2 -> bool

logic dummy15 : (int,character) farray

logic dummy16 : t2

type t2b__ref = { t2b__content : us_t2
}

function t2b__ref___projection(a: t2b__ref) : us_t2 = (a).t2b__content

type us_split_fields2 = { rec__bounded_strings__bounded_string__text1 :
us_t2; rec__bounded_strings__bounded_string__size1 : size_type
}

function us_split_fields_Text__2__projection(a: us_split_fields2) : us_t2 =
  (a).rec__bounded_strings__bounded_string__text1

function us_split_fields_Size__2__projection(a: us_split_fields2) : size_type =
  (a).rec__bounded_strings__bounded_string__size1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___3__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__bounded_strings__bounded_string__text =
  of_array1(to_array2(((a).us_split_fields3).rec__bounded_strings__bounded_string__text1),
  first5(((a).us_split_fields3).rec__bounded_strings__bounded_string__text1),
  last5(((a).us_split_fields3).rec__bounded_strings__bounded_string__text1));
  rec__bounded_strings__bounded_string__size =
  ((a).us_split_fields3).rec__bounded_strings__bounded_string__size1 } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__bounded_strings__bounded_string__text1 =
  of_array2(to_array1(((r).us_split_fields1).rec__bounded_strings__bounded_string__text),
  first3(((r).us_split_fields1).rec__bounded_strings__bounded_string__text),
  last3(((r).us_split_fields1).rec__bounded_strings__bounded_string__text));
  rec__bounded_strings__bounded_string__size1 =
  ((r).us_split_fields1).rec__bounded_strings__bounded_string__size } }

logic bool_eq13 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq13(a, b)].
  (((((to_rep3(((a).us_split_discrs2).rec__bounded_strings__bounded_string__bound) = to_rep3(((b).us_split_discrs2).rec__bounded_strings__bounded_string__bound)) and
  (bool_eq12(((a).us_split_fields3).rec__bounded_strings__bounded_string__text1,
  ((b).us_split_fields3).rec__bounded_strings__bounded_string__text1) = true)) and
  (to_rep2(((a).us_split_fields3).rec__bounded_strings__bounded_string__size1) = to_rep2(((b).us_split_fields3).rec__bounded_strings__bounded_string__size1))) ->
  (bool_eq13(a, b) = true)) and
  ((not (((to_rep3(((a).us_split_discrs2).rec__bounded_strings__bounded_string__bound) = to_rep3(((b).us_split_discrs2).rec__bounded_strings__bounded_string__bound)) and
  (bool_eq12(((a).us_split_fields3).rec__bounded_strings__bounded_string__text1,
  ((b).us_split_fields3).rec__bounded_strings__bounded_string__text1) = true)) and
  (to_rep2(((a).us_split_fields3).rec__bounded_strings__bounded_string__size1) = to_rep2(((b).us_split_fields3).rec__bounded_strings__bounded_string__size1)))) ->
  (bool_eq13(a, b) = false))))

predicate in_range5(rec__bounded_strings__bounded_string__bound1: int,
  a: us_rep) =
  (rec__bounded_strings__bounded_string__bound1 = to_rep3(((a).us_split_discrs1).rec__bounded_strings__bounded_string__bound))

logic value__size4 : int

logic object__size4 : us_rep1 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep1 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:index_type. forall a1:(int,character) farray. forall a2:t2.
  forall a3:size_type. (0 <= object__size4({ us_split_discrs2 = {
  rec__bounded_strings__bounded_string__bound = a }; us_split_fields3 = {
  rec__bounded_strings__bounded_string__text1 = { elts2 = a1; rt2 = a2 };
  rec__bounded_strings__bounded_string__size1 = a3 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:index_type. forall a1:(int,character) farray. forall a2:t2.
  forall a3:size_type. (0 <= object__alignment4({ us_split_discrs2 = {
  rec__bounded_strings__bounded_string__bound = a }; us_split_fields3 = {
  rec__bounded_strings__bounded_string__text1 = { elts2 = a1; rt2 = a2 };
  rec__bounded_strings__bounded_string__size1 = a3 } })))

logic bounded_strings__bounded_string__bound__first__bit1 : int

logic bounded_strings__bounded_string__bound__last__bit1 : int

logic bounded_strings__bounded_string__bound__position1 : int

axiom bounded_strings__bounded_string__bound__first__bit_axiom1 :
  (0 <= bounded_strings__bounded_string__bound__first__bit1)

axiom bounded_strings__bounded_string__bound__last__bit_axiom1 :
  (bounded_strings__bounded_string__bound__first__bit1 <  bounded_strings__bounded_string__bound__last__bit1)

axiom bounded_strings__bounded_string__bound__position_axiom1 :
  (0 <= bounded_strings__bounded_string__bound__position1)

logic bounded_strings__bounded_string__text__first__bit1 : int

logic bounded_strings__bounded_string__text__last__bit1 : int

logic bounded_strings__bounded_string__text__position1 : int

axiom bounded_strings__bounded_string__text__first__bit_axiom1 :
  (0 <= bounded_strings__bounded_string__text__first__bit1)

axiom bounded_strings__bounded_string__text__last__bit_axiom1 :
  (bounded_strings__bounded_string__text__first__bit1 <  bounded_strings__bounded_string__text__last__bit1)

axiom bounded_strings__bounded_string__text__position_axiom1 :
  (0 <= bounded_strings__bounded_string__text__position1)

logic bounded_strings__bounded_string__size__first__bit1 : int

logic bounded_strings__bounded_string__size__last__bit1 : int

logic bounded_strings__bounded_string__size__position1 : int

axiom bounded_strings__bounded_string__size__first__bit_axiom1 :
  (0 <= bounded_strings__bounded_string__size__first__bit1)

axiom bounded_strings__bounded_string__size__last__bit_axiom1 :
  (bounded_strings__bounded_string__size__first__bit1 <  bounded_strings__bounded_string__size__last__bit1)

axiom bounded_strings__bounded_string__size__position_axiom1 :
  (0 <= bounded_strings__bounded_string__size__position1)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy17 : index_type

logic dummy18 : (int,character) farray

logic dummy19 : t2

logic dummy20 : size_type

type tbS__ref = { tbS__content : us_rep1
}

function tbS__ref___projection(a: tbS__ref) : us_rep1 = (a).tbS__content

logic b__split_discrs : index_type

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq12 : integer, integer -> bool

logic dummy21 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref___projection(a: t3b__ref) : integer = (a).t3b__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first6(mk3(f, l))) = f) and (to_rep1(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,character) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,character) farray = (a).elts3

function of_array3(a: (int,character) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep1(first6((a).rt3))

function last7(a: us_t3) : int = to_rep1(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size5 : int

logic object__size5 : (int,character) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,character) farray -> int

logic value__alignment5 : int

logic object__alignment5 : (int,character) farray -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:(int,character) farray. (0 <= object__size5(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:(int,character) farray. (0 <= object__alignment5(a)))

function bool_eq15(x: us_t3, y: us_t3) : bool = bool_eq4((x).elts3,
  to_rep1(first6((x).rt3)), to_rep1(last6((x).rt3)), (y).elts3,
  to_rep1(first6((y).rt3)), to_rep1(last6((y).rt3)))

logic user_eq13 : us_t3, us_t3 -> bool

logic dummy22 : (int,character) farray

logic dummy23 : t3

type t4b__ref = { t4b__content : us_t3
}

function t4b__ref___projection(a: t4b__ref) : us_t3 = (a).t4b__content

predicate dynamic_property7(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq16 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq16(x, y)]. (((x = y) -> (bool_eq16(x,
  y) = true)) and ((not (x = y)) -> (bool_eq16(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : integer, integer -> bool

logic dummy24 : integer

type t5b__ref = { t5b__content : integer
}

function t5b__ref___projection(a: t5b__ref) : integer = (a).t5b__content

type t4

logic first8 : t4 -> integer

logic last8 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first8(mk4(f, l))) = f) and (to_rep1(last8(mk4(f, l))) = l)))))

predicate dynamic_property8(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property7(range_first, range_last, low) and
  dynamic_property7(range_first, range_last, high)))))

type us_t4 = { elts4 : (int,character) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,character) farray = (a).elts4

function of_array4(a: (int,character) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep1(first8((a).rt4))

function last9(a: us_t4) : int = to_rep1(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size6 : int

logic object__size6 : (int,character) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,character) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,character) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,character) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,character) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,character) farray. (0 <= object__alignment6(a)))

function bool_eq17(x: us_t4, y: us_t4) : bool = bool_eq4((x).elts4,
  to_rep1(first8((x).rt4)), to_rep1(last8((x).rt4)), (y).elts4,
  to_rep1(first8((y).rt4)), to_rep1(last8((y).rt4)))

logic user_eq15 : us_t4, us_t4 -> bool

logic dummy25 : (int,character) farray

logic dummy26 : t4

type t6b__ref = { t6b__content : us_t4
}

function t6b__ref___projection(a: t6b__ref) : us_t4 = (a).t6b__content

logic temp___192 : int, int, int -> us_t3

axiom def_axiom :
  (forall temp___194:int. forall temp___195:int. forall temp___196:int.
  ((dynamic_property(1, 2147483647, temp___195, temp___196) ->
  ((to_rep1(first6((temp___192(temp___194, temp___195,
  temp___196)).rt3)) = temp___195) and (to_rep1(last6((temp___192(temp___194,
  temp___195, temp___196)).rt3)) = temp___196))) and
  (forall temp___197:int. (((temp___192(temp___194, temp___195,
  temp___196)).elts3[temp___197]) = of_rep(temp___194)))))

 (* File "bounded_strings.ads", line 24, characters 0-0 *)
goal WP_parameter_def :
  (forall b__split_fields:(int,character) farray. forall b__split_fields1:t2.
  forall b__split_fields2:size_type. forall us:int.
  forall temp___199:(int,character) farray. forall temp___1991:t3.
  forall temp___200:(int,character) farray. forall temp___2001:t2.
  forall o:(int,character) farray. forall o1:t2.
  forall o2:(int,character) farray. forall o3:t2. forall o4:size_type.
  forall temp___203:index_type. forall temp___2031:(int,character) farray.
  forall temp___2032:t2. forall temp___2033:size_type.
  forall temp___204:(int,character) farray. forall temp___2041:t4.
  forall temp___206:int. forall result:(int,character) farray.
  forall result1:t2. forall result2:size_type.
  forall b__split_fields3:(int,character) farray. forall b__split_fields4:t2.
  forall b__split_fields5:size_type. (in_range3(upper_bound) ->
  (dynamic_property(1, 2147483647, to_rep1(first(initializer1)),
  to_rep1(last(initializer1))) -> ((length({ elts = initializer; rt =
  initializer1 }) <= upper_bound) -> (((us = upper_bound) and
  in_range3(upper_bound)) -> ((to_rep3(b__split_discrs) = upper_bound) ->
  (((upper_bound = to_rep3(((to_base({ us_split_discrs2 = {
  rec__bounded_strings__bounded_string__bound = b__split_discrs };
  us_split_fields3 = { rec__bounded_strings__bounded_string__text1 = {
  elts2 = b__split_fields; rt2 = b__split_fields1 };
  rec__bounded_strings__bounded_string__size1 = b__split_fields2 }
  })).us_split_discrs1).rec__bounded_strings__bounded_string__bound)) and
  (dynamic_property4(1, upper_bound, to_rep1(first4(b__split_fields1)),
  to_rep1(last4(b__split_fields1))) and
  ((to_rep1(first4(b__split_fields1)) = 1) and
  (to_rep1(last4(b__split_fields1)) = upper_bound)))) ->
  ((((((((to_rep1(first6((temp___192(0, 1, upper_bound)).rt3)) = 1) and
  ((to_rep1(last6((temp___192(0, 1, upper_bound)).rt3)) = upper_bound) and ({
  elts3 = temp___199; rt3 = temp___1991 } = temp___192(0, 1,
  upper_bound)))) and
  ((((to_rep1(first6(temp___1991)) <= to_rep1(last6(temp___1991))) and
  (((1 <= upper_bound) and
  (((to_rep1(last6(temp___1991)) - to_rep1(first6(temp___1991))) + 1) = ((upper_bound - 1) + 1))) or
  ((not (1 <= upper_bound)) and
  (((to_rep1(last6(temp___1991)) - to_rep1(first6(temp___1991))) + 1) = 0)))) or
  ((not (to_rep1(first6(temp___1991)) <= to_rep1(last6(temp___1991)))) and
  (((1 <= upper_bound) and (0 = ((upper_bound - 1) + 1))) or
  (not (1 <= upper_bound))))) and ((temp___199 = temp___200) and
  (mk2(to_rep1(first6(temp___1991)),
  to_rep1(last6(temp___1991))) = temp___2001)))) and
  ((((to_rep1(first4(temp___2001)) <= to_rep1(last4(temp___2001))) and
  (((to_rep1(first4(b__split_fields1)) <= to_rep1(last4(b__split_fields1))) and
  (((to_rep1(last4(temp___2001)) - to_rep1(first4(temp___2001))) + 1) = ((to_rep1(last4(b__split_fields1)) - to_rep1(first4(b__split_fields1))) + 1))) or
  ((not (to_rep1(first4(b__split_fields1)) <= to_rep1(last4(b__split_fields1)))) and
  (((to_rep1(last4(temp___2001)) - to_rep1(first4(temp___2001))) + 1) = 0)))) or
  ((not (to_rep1(first4(temp___2001)) <= to_rep1(last4(temp___2001)))) and
  (((to_rep1(first4(b__split_fields1)) <= to_rep1(last4(b__split_fields1))) and
  (0 = ((to_rep1(last4(b__split_fields1)) - to_rep1(first4(b__split_fields1))) + 1))) or
  (not (to_rep1(first4(b__split_fields1)) <= to_rep1(last4(b__split_fields1))))))) and
  ({ elts2 = o; rt2 = o1 } = { elts2 = temp___200; rt2 = temp___2001 }))) and
  (((o2 = o) and (o3 = o1)) and (b__split_fields2 = o4))) and
  ((b__split_discrs = temp___203) and (((temp___2031 = o2) and
  (temp___2032 = o3)) and (temp___2033 = o4)))) and
  (((((result = b__split_fields) and (result1 = b__split_fields1)) and
  (result2 = b__split_fields2)) and (((temp___2031 = b__split_fields3) and
  (temp___2032 = b__split_fields4)) and
  (temp___2033 = b__split_fields5))) and (b__split_discrs = temp___203))) ->
  (((((to_rep1(first(initializer1)) <= to_rep1(last(initializer1))) and
  (((1 <= length({ elts = initializer; rt = initializer1 })) and
  (((to_rep1(last(initializer1)) - to_rep1(first(initializer1))) + 1) = ((length({
  elts = initializer; rt = initializer1 }) - 1) + 1))) or
  ((not (1 <= length({ elts = initializer; rt = initializer1 }))) and
  (((to_rep1(last(initializer1)) - to_rep1(first(initializer1))) + 1) = 0)))) or
  ((not (to_rep1(first(initializer1)) <= to_rep1(last(initializer1)))) and
  (((1 <= length({ elts = initializer; rt = initializer1 })) and
  (0 = ((length({ elts = initializer; rt = initializer1 }) - 1) + 1))) or
  (not (1 <= length({ elts = initializer; rt = initializer1 })))))) and
  ((slide(initializer, to_rep1(first(initializer1)), 1) = temp___204) and
  (mk4(1, length({ elts = initializer; rt = initializer1
  })) = temp___2041))) -> (((temp___206 = length({ elts = initializer; rt =
  initializer1 })) and in_range(length({ elts = initializer; rt =
  initializer1 }))) -> ((1 <= temp___206) ->
  (to_rep1(first4(b__split_fields4)) <= 1))))))))))))
