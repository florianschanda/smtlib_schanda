(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type resource

predicate in_range(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : resource, resource -> bool

logic dummy : resource

type resource__ref = { resource__content : resource
}

function resource__ref___projection(a: resource__ref) : resource =
  (a).resource__content

type valid_resource

predicate in_range1(x: int) = ((1 <= x) and (x <= 10000))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : valid_resource, valid_resource -> bool

logic dummy1 : valid_resource

type valid_resource__ref = { valid_resource__content : valid_resource
}

function valid_resource__ref___projection(a: valid_resource__ref) : valid_resource =
  (a).valid_resource__content

type status

predicate in_range2(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : status, status -> bool

logic dummy2 : status

type status__ref = { status__content : status
}

function status__ref___projection(a: status__ref) : status =
  (a).status__content

logic to_rep : status -> int

logic of_rep : int -> status

axiom inversion_axiom :
  (forall x:status [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:status [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,status) farray
}

logic slide : (int,status) farray, int, int -> (int,status) farray

axiom slide_eq :
  (forall a:(int,status) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,status) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,status) farray, int, int, (int,status) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,status) farray. forall a__first:int. forall a__last:int.
  forall b:(int,status) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,status) farray. forall b:(int,status) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq5 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type set__ref = { set__content : us_rep
}

function set__ref___projection(a: set__ref) : us_rep = (a).set__content

logic contains : us_rep, int -> bool

logic contains__function_guard : bool, us_rep, int -> prop

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq6 : bool, bool -> bool

axiom bool_eq_def4 :
  (forall x:bool. forall y:bool [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

predicate in_range3(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

type element_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 10000))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : element_type, element_type -> bool

logic dummy4 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom contains__post_axiom :
  (forall container:us_rep.
  (forall item:int [contains(container, item)]. (in_range4(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range4(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

type us_split_fields = { rec__simple_allocator__m__t__available : us_rep;
rec__simple_allocator__m__t__allocated : us_rep
}

function us_split_fields_Available__projection(a: us_split_fields) : us_rep =
  (a).rec__simple_allocator__m__t__available

function us_split_fields_Allocated__projection(a: us_split_fields) : us_rep =
  (a).rec__simple_allocator__m__t__allocated

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq8 : us_rep1, us_rep1 -> bool

axiom bool_eq_def6 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq8(a, b)].
  ((((bool_eq5(((a).us_split_fields1).rec__simple_allocator__m__t__available,
  ((b).us_split_fields1).rec__simple_allocator__m__t__available) = true) and
  (bool_eq5(((a).us_split_fields1).rec__simple_allocator__m__t__allocated,
  ((b).us_split_fields1).rec__simple_allocator__m__t__allocated) = true)) ->
  (bool_eq8(a, b) = true)) and
  ((not ((bool_eq5(((a).us_split_fields1).rec__simple_allocator__m__t__available,
  ((b).us_split_fields1).rec__simple_allocator__m__t__available) = true) and
  (bool_eq5(((a).us_split_fields1).rec__simple_allocator__m__t__allocated,
  ((b).us_split_fields1).rec__simple_allocator__m__t__allocated) = true))) ->
  (bool_eq8(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. forall a1:us_rep. (0 <= object__size1({
  us_split_fields1 = { rec__simple_allocator__m__t__available = a;
  rec__simple_allocator__m__t__allocated = a1 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. forall a1:us_rep. (0 <= object__alignment1({
  us_split_fields1 = { rec__simple_allocator__m__t__available = a;
  rec__simple_allocator__m__t__allocated = a1 } })))

logic simple_allocator__m__t__available__first__bit : int

logic simple_allocator__m__t__available__last__bit : int

logic simple_allocator__m__t__available__position : int

axiom simple_allocator__m__t__available__first__bit_axiom :
  (0 <= simple_allocator__m__t__available__first__bit)

axiom simple_allocator__m__t__available__last__bit_axiom :
  (simple_allocator__m__t__available__first__bit <  simple_allocator__m__t__available__last__bit)

axiom simple_allocator__m__t__available__position_axiom :
  (0 <= simple_allocator__m__t__available__position)

logic simple_allocator__m__t__allocated__first__bit : int

logic simple_allocator__m__t__allocated__last__bit : int

logic simple_allocator__m__t__allocated__position : int

axiom simple_allocator__m__t__allocated__first__bit_axiom :
  (0 <= simple_allocator__m__t__allocated__first__bit)

axiom simple_allocator__m__t__allocated__last__bit_axiom :
  (simple_allocator__m__t__allocated__first__bit <  simple_allocator__m__t__allocated__last__bit)

axiom simple_allocator__m__t__allocated__position_axiom :
  (0 <= simple_allocator__m__t__allocated__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep

logic dummy6 : us_rep

type t__ref = { t__content : us_rep1
}

function t__ref___projection(a: t__ref) : us_rep1 = (a).t__content

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

logic oeq1 : us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall a1:us_rep. forall b:us_rep. forall b1:us_rep
  [user_eq5({ us_split_fields1 = { rec__simple_allocator__m__t__available =
  a; rec__simple_allocator__m__t__allocated = a1 } }, { us_split_fields1 = {
  rec__simple_allocator__m__t__available = b;
  rec__simple_allocator__m__t__allocated = b1 } })]. (user_eq5({
  us_split_fields1 = { rec__simple_allocator__m__t__available = a;
  rec__simple_allocator__m__t__allocated = a1 } }, { us_split_fields1 = {
  rec__simple_allocator__m__t__available = b;
  rec__simple_allocator__m__t__allocated = b1 } }) = oeq({ us_split_fields1 =
  { rec__simple_allocator__m__t__available = a;
  rec__simple_allocator__m__t__allocated = a1 } }, { us_split_fields1 = {
  rec__simple_allocator__m__t__available = b;
  rec__simple_allocator__m__t__allocated = b1 } })))

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall x:us_rep. forall x1:us_rep. forall y:us_rep. forall y1:us_rep
  [oeq({ us_split_fields1 = { rec__simple_allocator__m__t__available = x;
  rec__simple_allocator__m__t__allocated = x1 } }, { us_split_fields1 = {
  rec__simple_allocator__m__t__available = y;
  rec__simple_allocator__m__t__allocated = y1 } })]. ((oeq({
  us_split_fields1 = { rec__simple_allocator__m__t__available = x;
  rec__simple_allocator__m__t__allocated = x1 } }, { us_split_fields1 = {
  rec__simple_allocator__m__t__available = y;
  rec__simple_allocator__m__t__allocated = y1 } }) = true) <-> ((oeq1(x,
  y) = true) and (oeq1(x1, y1) = true))))

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

logic ole : us_rep, us_rep -> bool

logic ole__function_guard : bool, us_rep, us_rep -> prop

logic included_except : us_rep, us_rep, int -> bool

logic included_except__function_guard : bool, us_rep, us_rep, int -> prop

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s:us_rep. forall result__:us_rep.
  (forall e:int [is_add(s, e, result__)]. ((is_add(s, e,
  result__) = true) <-> ((((not (contains(s, e) = true)) and
  (contains(result__, e) = true)) and (included_except(result__, s,
  e) = true)) and (ole(s, result__) = true)))))

logic model__ : (int,status) farray -> us_rep1

logic model____function_guard : us_rep1, (int,status) farray -> prop

logic is_valid : us_rep1, (int,status) farray -> bool

logic is_valid__function_guard : bool, us_rep1, (int,status) farray -> prop

axiom model____post_axiom :
  (forall simple_allocator__data:(int,status) farray
  [model__(simple_allocator__data)].
  (is_valid(model__(simple_allocator__data), simple_allocator__data) = true))

logic res : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom is_valid__post_axiom : true

axiom is_valid__def_axiom :
  (forall m:us_rep. forall m1:us_rep.
  (forall simple_allocator__data:(int,status) farray [is_valid({
  us_split_fields1 = { rec__simple_allocator__m__t__available = m;
  rec__simple_allocator__m__t__allocated = m1 } }, simple_allocator__data)].
  (((is_valid({ us_split_fields1 = { rec__simple_allocator__m__t__available =
  m; rec__simple_allocator__m__t__allocated = m1 } },
  simple_allocator__data) = true) ->
  (((forall e:int. ((in_range4(e) and (contains(m, e) = true)) ->
    in_range1(e))) and
  (forall e:int. ((in_range4(e) and (contains(m1, e) = true)) ->
  in_range1(e)))) and
  (forall r:int. (((1 <= r) and (r <= 10000)) ->
  (((to_rep((simple_allocator__data[r])) = 0) -> ((contains(m, r) = true) and
  (not (contains(m1, r) = true)))) and
  ((not (to_rep((simple_allocator__data[r])) = 0)) -> ((not (contains(m,
  r) = true)) and (contains(m1, r) = true)))))))) and
  ((((forall e:int. ((in_range4(e) and (contains(m, e) = true)) ->
     in_range1(e))) and
  (forall e:int. ((in_range4(e) and (contains(m1, e) = true)) ->
  in_range1(e)))) and
  (forall r:int. (((1 <= r) and (r <= 10000)) ->
  (((to_rep((simple_allocator__data[r])) = 0) and ((contains(m,
  r) = true) and (not (contains(m1, r) = true)))) or
  ((not (to_rep((simple_allocator__data[r])) = 0)) and ((not (contains(m,
  r) = true)) and (contains(m1, r) = true))))))) -> (is_valid({
  us_split_fields1 = { rec__simple_allocator__m__t__available = m;
  rec__simple_allocator__m__t__allocated = m1 } },
  simple_allocator__data) = true)))))

type count_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : count_type, count_type -> bool

logic dummy7 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:us_rep [length(container)]. in_range5(length(container)))

axiom ole__post_axiom :
  (forall left:us_rep. forall right:us_rep [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall item:int. ((in_range4(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq1(left, right)]. ((oeq1(left,
  right) = true) <-> ((ole(left, right) = true) and (ole(right,
  left) = true))))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  (((is_empty(container) = true) <->
  (forall item:int. (not (in_range4(item) and (contains(container,
  item) = true))))) and ((is_empty(container) = true) <->
  (length(container) = 0))))

axiom included_except__post_axiom :
  (forall left:us_rep. forall right:us_rep.
  (forall item:int [included_except(left, right, item)]. (in_range4(item) ->
  ((included_except(left, right, item) = true) <->
  (forall e:int. ((in_range4(e) and (contains(left, e) = true)) ->
  ((contains(right, e) = true) or (e = item))))))))

 (* File "simple_allocator.adb", line 9, characters 0-0 *)
goal WP_parameter_def :
  (forall data:(int,status) farray. forall o:int. forall o1:status.
  forall o2:int. forall o3:status. forall o4:int.
  forall o5:(int,status) farray. forall data1:(int,status) farray.
  forall result:bool. forall result1:(int,status) farray.
  forall data2:(int,status) farray. forall data3:(int,status) farray.
  forall data4:(int,status) farray. (in_range(res) ->
  ((((((not (res = 0)) and ((((((1 <= res) and (res <= 10000)) and
  (o = res)) and (o1 = (data[o]))) and (o2 = to_rep(o1))) and (((o2 = 1) and
  (result = true)) or ((not (o2 = 1)) and (result = false))))) or
  ((res = 0) and (result = false))) and (((result = true) and
  (((to_rep(o3) = 0) and ((((1 <= res) and (res <= 10000)) and
  (o4 = res)) and (o5 = (data[o4 <- o3])))) and ((result1 = data) and
  (data2 = o5)))) or ((not (result = true)) and ((data2 = data) and
  (data2 = data1))))) and ((data2 = data3) and (data4 = data2))) ->
  ((((contains(((model__(data)).us_split_fields1).rec__simple_allocator__m__t__allocated,
  res) = true) and
  ((is_add(((model__(data)).us_split_fields1).rec__simple_allocator__m__t__available,
  res,
  ((model__(data3)).us_split_fields1).rec__simple_allocator__m__t__available) = true) and
  (is_add(((model__(data3)).us_split_fields1).rec__simple_allocator__m__t__allocated,
  res,
  ((model__(data)).us_split_fields1).rec__simple_allocator__m__t__allocated) = true))) or
  (not (contains(((model__(data)).us_split_fields1).rec__simple_allocator__m__t__allocated,
  res) = true))) ->
  ((not (contains(((model__(data)).us_split_fields1).rec__simple_allocator__m__t__allocated,
  res) = true)) -> (oeq(model__(data3), model__(data)) = true))))))
