(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned32t

predicate in_range1(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : unsigned32t, unsigned32t -> bool

logic dummy : unsigned32t

type unsigned32t__ref = { unsigned32t__content : unsigned32t
}

function unsigned32t__ref___projection(a: unsigned32t__ref) : unsigned32t =
  (a).unsigned32t__content

logic to_rep : unsigned32t -> int

logic of_rep : int -> unsigned32t

axiom inversion_axiom :
  (forall x:unsigned32t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:unsigned32t [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type namecountt

predicate in_range2(x: int) = ((0 <= x) and (x <= 40))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : namecountt, namecountt -> bool

logic dummy1 : namecountt

type namecountt__ref = { namecountt__content : namecountt
}

function namecountt__ref___projection(a: namecountt__ref) : namecountt =
  (a).namecountt__content

logic to_rep1 : namecountt -> int

logic of_rep1 : int -> namecountt

axiom inversion_axiom1 :
  (forall x:namecountt [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:namecountt [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep2 : character -> int

logic of_rep2 : int -> character

axiom inversion_axiom2 :
  (forall x:character [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:character [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep2((a[temp___idx_78])) = to_rep2((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep2((a[temp___idx_78])) = to_rep2((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep2((a[temp___idx_78])) = to_rep2((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

logic dummy3 : (int,character) farray

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

logic user_eq3 : (int,character) farray, (int,character) farray -> bool

type issueridt

predicate in_range4(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : issueridt, issueridt -> bool

logic dummy4 : issueridt

type issueridt__ref = { issueridt__content : issueridt
}

function issueridt__ref___projection(a: issueridt__ref) : issueridt =
  (a).issueridt__content

logic to_rep3 : issueridt -> int

logic of_rep3 : int -> issueridt

axiom inversion_axiom3 :
  (forall x:issueridt [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:issueridt [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__cryptotypes__issuert__id : issueridt;
rec__cryptotypes__issuert__namelength : namecountt;
rec__cryptotypes__issuert__name : (int,character) farray
}

function us_split_fields_ID__projection(a: us_split_fields) : issueridt =
  (a).rec__cryptotypes__issuert__id

function us_split_fields_NameLength__projection(a: us_split_fields) : namecountt =
  (a).rec__cryptotypes__issuert__namelength

function us_split_fields_Name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__cryptotypes__issuert__name

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq7 : us_rep, us_rep -> bool

axiom bool_eq_def6 :
  (forall a:us_rep. forall b:us_rep [bool_eq7(a, b)].
  (((((to_rep3(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep3(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep1(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep1(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq5(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true)) ->
  (bool_eq7(a, b) = true)) and
  ((not (((to_rep3(((a).us_split_fields1).rec__cryptotypes__issuert__id) = to_rep3(((b).us_split_fields1).rec__cryptotypes__issuert__id)) and
  (to_rep1(((a).us_split_fields1).rec__cryptotypes__issuert__namelength) = to_rep1(((b).us_split_fields1).rec__cryptotypes__issuert__namelength))) and
  (bool_eq5(((a).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40,
  ((b).us_split_fields1).rec__cryptotypes__issuert__name, 1, 40) = true))) ->
  (bool_eq7(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__size1({ us_split_fields1 =
  { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. (0 <= object__alignment1({
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } })))

logic cryptotypes__issuert__id__first__bit : int

logic cryptotypes__issuert__id__last__bit : int

logic cryptotypes__issuert__id__position : int

axiom cryptotypes__issuert__id__first__bit_axiom :
  (0 <= cryptotypes__issuert__id__first__bit)

axiom cryptotypes__issuert__id__last__bit_axiom :
  (cryptotypes__issuert__id__first__bit <  cryptotypes__issuert__id__last__bit)

axiom cryptotypes__issuert__id__position_axiom :
  (0 <= cryptotypes__issuert__id__position)

logic cryptotypes__issuert__namelength__first__bit : int

logic cryptotypes__issuert__namelength__last__bit : int

logic cryptotypes__issuert__namelength__position : int

axiom cryptotypes__issuert__namelength__first__bit_axiom :
  (0 <= cryptotypes__issuert__namelength__first__bit)

axiom cryptotypes__issuert__namelength__last__bit_axiom :
  (cryptotypes__issuert__namelength__first__bit <  cryptotypes__issuert__namelength__last__bit)

axiom cryptotypes__issuert__namelength__position_axiom :
  (0 <= cryptotypes__issuert__namelength__position)

logic cryptotypes__issuert__name__first__bit : int

logic cryptotypes__issuert__name__last__bit : int

logic cryptotypes__issuert__name__position : int

axiom cryptotypes__issuert__name__first__bit_axiom :
  (0 <= cryptotypes__issuert__name__first__bit)

axiom cryptotypes__issuert__name__last__bit_axiom :
  (cryptotypes__issuert__name__first__bit <  cryptotypes__issuert__name__last__bit)

axiom cryptotypes__issuert__name__position_axiom :
  (0 <= cryptotypes__issuert__name__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : issueridt

logic dummy6 : namecountt

logic dummy7 : (int,character) farray

type issuert__ref = { issuert__content : us_rep
}

function issuert__ref___projection(a: issuert__ref) : us_rep =
  (a).issuert__content

type algorithmt

predicate in_range5(x: int) = ((0 <= x) and (x <= 10))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : algorithmt, algorithmt -> bool

logic dummy8 : algorithmt

type algorithmt__ref = { algorithmt__content : algorithmt
}

function algorithmt__ref___projection(a: algorithmt__ref) : algorithmt =
  (a).algorithmt__content

logic to_rep4 : algorithmt -> int

logic of_rep4 : int -> algorithmt

axiom inversion_axiom4 :
  (forall x:algorithmt [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:algorithmt [to_rep4(x)]. in_range5(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range5(x) ->
  (to_rep4(of_rep4(x)) = x)))

type keyidt

predicate in_range6(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : keyidt, keyidt -> bool

logic dummy9 : keyidt

type keyidt__ref = { keyidt__content : keyidt
}

function keyidt__ref___projection(a: keyidt__ref) : keyidt =
  (a).keyidt__content

logic to_rep5 : keyidt -> int

logic of_rep5 : int -> keyidt

axiom inversion_axiom5 :
  (forall x:keyidt [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:keyidt [to_rep5(x)]. in_range6(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range6(x) ->
  (to_rep5(of_rep5(x)) = x)))

type keylengtht

predicate in_range7(x: int) = ((0 <= x) and (x <= 128))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def9 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : keylengtht, keylengtht -> bool

logic dummy10 : keylengtht

type keylengtht__ref = { keylengtht__content : keylengtht
}

function keylengtht__ref___projection(a: keylengtht__ref) : keylengtht =
  (a).keylengtht__content

logic to_rep6 : keylengtht -> int

logic of_rep6 : int -> keylengtht

axiom inversion_axiom6 :
  (forall x:keylengtht [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:keylengtht [to_rep6(x)]. in_range7(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range7(x) ->
  (to_rep6(of_rep6(x)) = x)))

type us_split_fields2 = { rec__cryptotypes__keypartt__algorithmid :
algorithmt; rec__cryptotypes__keypartt__keyid : keyidt;
rec__cryptotypes__keypartt__keylength : keylengtht
}

function us_split_fields_AlgorithmID__projection(a: us_split_fields2) : algorithmt =
  (a).rec__cryptotypes__keypartt__algorithmid

function us_split_fields_KeyID__projection(a: us_split_fields2) : keyidt =
  (a).rec__cryptotypes__keypartt__keyid

function us_split_fields_KeyLength__projection(a: us_split_fields2) : keylengtht =
  (a).rec__cryptotypes__keypartt__keylength

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq11 : us_rep1, us_rep1 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq11(a, b)].
  (((((to_rep4(((a).us_split_fields3).rec__cryptotypes__keypartt__algorithmid) = to_rep4(((b).us_split_fields3).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep5(((a).us_split_fields3).rec__cryptotypes__keypartt__keyid) = to_rep5(((b).us_split_fields3).rec__cryptotypes__keypartt__keyid))) and
  (to_rep6(((a).us_split_fields3).rec__cryptotypes__keypartt__keylength) = to_rep6(((b).us_split_fields3).rec__cryptotypes__keypartt__keylength))) ->
  (bool_eq11(a, b) = true)) and
  ((not (((to_rep4(((a).us_split_fields3).rec__cryptotypes__keypartt__algorithmid) = to_rep4(((b).us_split_fields3).rec__cryptotypes__keypartt__algorithmid)) and
  (to_rep5(((a).us_split_fields3).rec__cryptotypes__keypartt__keyid) = to_rep5(((b).us_split_fields3).rec__cryptotypes__keypartt__keyid))) and
  (to_rep6(((a).us_split_fields3).rec__cryptotypes__keypartt__keylength) = to_rep6(((b).us_split_fields3).rec__cryptotypes__keypartt__keylength)))) ->
  (bool_eq11(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep1 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep1 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__size2({ us_split_fields3 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:algorithmt. forall a1:keyidt. forall a2:keylengtht.
  (0 <= object__alignment2({ us_split_fields3 = {
  rec__cryptotypes__keypartt__algorithmid = a;
  rec__cryptotypes__keypartt__keyid = a1;
  rec__cryptotypes__keypartt__keylength = a2 } })))

logic cryptotypes__keypartt__algorithmid__first__bit : int

logic cryptotypes__keypartt__algorithmid__last__bit : int

logic cryptotypes__keypartt__algorithmid__position : int

axiom cryptotypes__keypartt__algorithmid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__first__bit)

axiom cryptotypes__keypartt__algorithmid__last__bit_axiom :
  (cryptotypes__keypartt__algorithmid__first__bit <  cryptotypes__keypartt__algorithmid__last__bit)

axiom cryptotypes__keypartt__algorithmid__position_axiom :
  (0 <= cryptotypes__keypartt__algorithmid__position)

logic cryptotypes__keypartt__keyid__first__bit : int

logic cryptotypes__keypartt__keyid__last__bit : int

logic cryptotypes__keypartt__keyid__position : int

axiom cryptotypes__keypartt__keyid__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keyid__first__bit)

axiom cryptotypes__keypartt__keyid__last__bit_axiom :
  (cryptotypes__keypartt__keyid__first__bit <  cryptotypes__keypartt__keyid__last__bit)

axiom cryptotypes__keypartt__keyid__position_axiom :
  (0 <= cryptotypes__keypartt__keyid__position)

logic cryptotypes__keypartt__keylength__first__bit : int

logic cryptotypes__keypartt__keylength__last__bit : int

logic cryptotypes__keypartt__keylength__position : int

axiom cryptotypes__keypartt__keylength__first__bit_axiom :
  (0 <= cryptotypes__keypartt__keylength__first__bit)

axiom cryptotypes__keypartt__keylength__last__bit_axiom :
  (cryptotypes__keypartt__keylength__first__bit <  cryptotypes__keypartt__keylength__last__bit)

axiom cryptotypes__keypartt__keylength__position_axiom :
  (0 <= cryptotypes__keypartt__keylength__position)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy11 : algorithmt

logic dummy12 : keyidt

logic dummy13 : keylengtht

type keypartt__ref = { keypartt__content : us_rep1
}

function keypartt__ref___projection(a: keypartt__ref) : us_rep1 =
  (a).keypartt__content

type serialnumbert

predicate in_range8(x: int) = ((0 <= x) and (x <= 4294967295))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : serialnumbert, serialnumbert -> bool

logic dummy14 : serialnumbert

type serialnumbert__ref = { serialnumbert__content : serialnumbert
}

function serialnumbert__ref___projection(a: serialnumbert__ref) : serialnumbert =
  (a).serialnumbert__content

logic to_rep7 : serialnumbert -> int

logic of_rep7 : int -> serialnumbert

axiom inversion_axiom7 :
  (forall x:serialnumbert [to_rep7(x)]. (of_rep7(to_rep7(x)) = x))

axiom range_axiom7 :
  (forall x:serialnumbert [to_rep7(x)]. in_range8(to_rep7(x)))

axiom coerce_axiom7 :
  (forall x:int [to_rep7(of_rep7(x))]. (in_range8(x) ->
  (to_rep7(of_rep7(x)) = x)))

type us_split_fields4 = { rec__certtypes__idt__issuer : us_rep;
rec__certtypes__idt__serialnumber : serialnumbert
}

function us_split_fields_Issuer__projection(a: us_split_fields4) : us_rep =
  (a).rec__certtypes__idt__issuer

function us_split_fields_SerialNumber__projection(a: us_split_fields4) : serialnumbert =
  (a).rec__certtypes__idt__serialnumber

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___5__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq13 : us_rep2, us_rep2 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq13(a, b)].
  ((((bool_eq7(((a).us_split_fields5).rec__certtypes__idt__issuer,
  ((b).us_split_fields5).rec__certtypes__idt__issuer) = true) and
  (to_rep7(((a).us_split_fields5).rec__certtypes__idt__serialnumber) = to_rep7(((b).us_split_fields5).rec__certtypes__idt__serialnumber))) ->
  (bool_eq13(a, b) = true)) and
  ((not ((bool_eq7(((a).us_split_fields5).rec__certtypes__idt__issuer,
  ((b).us_split_fields5).rec__certtypes__idt__issuer) = true) and
  (to_rep7(((a).us_split_fields5).rec__certtypes__idt__serialnumber) = to_rep7(((b).us_split_fields5).rec__certtypes__idt__serialnumber)))) ->
  (bool_eq13(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep2 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep2 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__size3({ us_split_fields5 = { rec__certtypes__idt__issuer = {
  us_split_fields1 = { rec__cryptotypes__issuert__id = a;
  rec__cryptotypes__issuert__namelength = a1;
  rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:issueridt. forall a1:namecountt.
  forall a2:(int,character) farray. forall a3:serialnumbert.
  (0 <= object__alignment3({ us_split_fields5 = {
  rec__certtypes__idt__issuer = { us_split_fields1 = {
  rec__cryptotypes__issuert__id = a; rec__cryptotypes__issuert__namelength =
  a1; rec__cryptotypes__issuert__name = a2 } };
  rec__certtypes__idt__serialnumber = a3 } })))

logic certtypes__idt__issuer__first__bit : int

logic certtypes__idt__issuer__last__bit : int

logic certtypes__idt__issuer__position : int

axiom certtypes__idt__issuer__first__bit_axiom :
  (0 <= certtypes__idt__issuer__first__bit)

axiom certtypes__idt__issuer__last__bit_axiom :
  (certtypes__idt__issuer__first__bit <  certtypes__idt__issuer__last__bit)

axiom certtypes__idt__issuer__position_axiom :
  (0 <= certtypes__idt__issuer__position)

logic certtypes__idt__serialnumber__first__bit : int

logic certtypes__idt__serialnumber__last__bit : int

logic certtypes__idt__serialnumber__position : int

axiom certtypes__idt__serialnumber__first__bit_axiom :
  (0 <= certtypes__idt__serialnumber__first__bit)

axiom certtypes__idt__serialnumber__last__bit_axiom :
  (certtypes__idt__serialnumber__first__bit <  certtypes__idt__serialnumber__last__bit)

axiom certtypes__idt__serialnumber__position_axiom :
  (0 <= certtypes__idt__serialnumber__position)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy15 : issueridt

logic dummy16 : namecountt

logic dummy17 : (int,character) farray

logic dummy18 : serialnumbert

type idt__ref = { idt__content : us_rep2
}

function idt__ref___projection(a: idt__ref) : us_rep2 = (a).idt__content

type us_split_fields6 = { rec__certprocessing__timet__year : unsigned32t;
rec__certprocessing__timet__month : unsigned32t;
rec__certprocessing__timet__day : unsigned32t;
rec__certprocessing__timet__hour : unsigned32t;
rec__certprocessing__timet__minute : unsigned32t
}

function us_split_fields_Year__projection(a: us_split_fields6) : unsigned32t =
  (a).rec__certprocessing__timet__year

function us_split_fields_Month__projection(a: us_split_fields6) : unsigned32t =
  (a).rec__certprocessing__timet__month

function us_split_fields_Day__projection(a: us_split_fields6) : unsigned32t =
  (a).rec__certprocessing__timet__day

function us_split_fields_Hour__projection(a: us_split_fields6) : unsigned32t =
  (a).rec__certprocessing__timet__hour

function us_split_fields_Minute__projection(a: us_split_fields6) : unsigned32t =
  (a).rec__certprocessing__timet__minute

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___8__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___8__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq14 : us_rep3, us_rep3 -> bool

axiom bool_eq_def13 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq14(a, b)].
  (((((((to_rep(((a).us_split_fields7).rec__certprocessing__timet__year) = to_rep(((b).us_split_fields7).rec__certprocessing__timet__year)) and
  (to_rep(((a).us_split_fields7).rec__certprocessing__timet__month) = to_rep(((b).us_split_fields7).rec__certprocessing__timet__month))) and
  (to_rep(((a).us_split_fields7).rec__certprocessing__timet__day) = to_rep(((b).us_split_fields7).rec__certprocessing__timet__day))) and
  (to_rep(((a).us_split_fields7).rec__certprocessing__timet__hour) = to_rep(((b).us_split_fields7).rec__certprocessing__timet__hour))) and
  (to_rep(((a).us_split_fields7).rec__certprocessing__timet__minute) = to_rep(((b).us_split_fields7).rec__certprocessing__timet__minute))) ->
  (bool_eq14(a, b) = true)) and
  ((not (((((to_rep(((a).us_split_fields7).rec__certprocessing__timet__year) = to_rep(((b).us_split_fields7).rec__certprocessing__timet__year)) and
  (to_rep(((a).us_split_fields7).rec__certprocessing__timet__month) = to_rep(((b).us_split_fields7).rec__certprocessing__timet__month))) and
  (to_rep(((a).us_split_fields7).rec__certprocessing__timet__day) = to_rep(((b).us_split_fields7).rec__certprocessing__timet__day))) and
  (to_rep(((a).us_split_fields7).rec__certprocessing__timet__hour) = to_rep(((b).us_split_fields7).rec__certprocessing__timet__hour))) and
  (to_rep(((a).us_split_fields7).rec__certprocessing__timet__minute) = to_rep(((b).us_split_fields7).rec__certprocessing__timet__minute)))) ->
  (bool_eq14(a, b) = false))))

logic value__size4 : int

logic object__size4 : us_rep3 -> int

logic value__alignment4 : int

logic object__alignment4 : us_rep3 -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:unsigned32t. forall a1:unsigned32t. forall a2:unsigned32t.
  forall a3:unsigned32t. forall a4:unsigned32t. (0 <= object__size4({
  us_split_fields7 = { rec__certprocessing__timet__year = a;
  rec__certprocessing__timet__month = a1; rec__certprocessing__timet__day =
  a2; rec__certprocessing__timet__hour = a3;
  rec__certprocessing__timet__minute = a4 } })))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:unsigned32t. forall a1:unsigned32t. forall a2:unsigned32t.
  forall a3:unsigned32t. forall a4:unsigned32t. (0 <= object__alignment4({
  us_split_fields7 = { rec__certprocessing__timet__year = a;
  rec__certprocessing__timet__month = a1; rec__certprocessing__timet__day =
  a2; rec__certprocessing__timet__hour = a3;
  rec__certprocessing__timet__minute = a4 } })))

logic certprocessing__timet__year__first__bit : int

logic certprocessing__timet__year__last__bit : int

logic certprocessing__timet__year__position : int

axiom certprocessing__timet__year__first__bit_axiom :
  (0 <= certprocessing__timet__year__first__bit)

axiom certprocessing__timet__year__last__bit_axiom :
  (certprocessing__timet__year__first__bit <  certprocessing__timet__year__last__bit)

axiom certprocessing__timet__year__position_axiom :
  (0 <= certprocessing__timet__year__position)

logic certprocessing__timet__month__first__bit : int

logic certprocessing__timet__month__last__bit : int

logic certprocessing__timet__month__position : int

axiom certprocessing__timet__month__first__bit_axiom :
  (0 <= certprocessing__timet__month__first__bit)

axiom certprocessing__timet__month__last__bit_axiom :
  (certprocessing__timet__month__first__bit <  certprocessing__timet__month__last__bit)

axiom certprocessing__timet__month__position_axiom :
  (0 <= certprocessing__timet__month__position)

logic certprocessing__timet__day__first__bit : int

logic certprocessing__timet__day__last__bit : int

logic certprocessing__timet__day__position : int

axiom certprocessing__timet__day__first__bit_axiom :
  (0 <= certprocessing__timet__day__first__bit)

axiom certprocessing__timet__day__last__bit_axiom :
  (certprocessing__timet__day__first__bit <  certprocessing__timet__day__last__bit)

axiom certprocessing__timet__day__position_axiom :
  (0 <= certprocessing__timet__day__position)

logic certprocessing__timet__hour__first__bit : int

logic certprocessing__timet__hour__last__bit : int

logic certprocessing__timet__hour__position : int

axiom certprocessing__timet__hour__first__bit_axiom :
  (0 <= certprocessing__timet__hour__first__bit)

axiom certprocessing__timet__hour__last__bit_axiom :
  (certprocessing__timet__hour__first__bit <  certprocessing__timet__hour__last__bit)

axiom certprocessing__timet__hour__position_axiom :
  (0 <= certprocessing__timet__hour__position)

logic certprocessing__timet__minute__first__bit : int

logic certprocessing__timet__minute__last__bit : int

logic certprocessing__timet__minute__position : int

axiom certprocessing__timet__minute__first__bit_axiom :
  (0 <= certprocessing__timet__minute__first__bit)

axiom certprocessing__timet__minute__last__bit_axiom :
  (certprocessing__timet__minute__first__bit <  certprocessing__timet__minute__last__bit)

axiom certprocessing__timet__minute__position_axiom :
  (0 <= certprocessing__timet__minute__position)

logic user_eq12 : us_rep3, us_rep3 -> bool

logic dummy19 : unsigned32t

logic dummy20 : unsigned32t

logic dummy21 : unsigned32t

logic dummy22 : unsigned32t

logic dummy23 : unsigned32t

type timet__ref = { timet__content : us_rep3
}

function timet__ref___projection(a: timet__ref) : us_rep3 =
  (a).timet__content

type us_split_fields8 = { rec__certprocessing__validityt__notbefore :
us_rep3; rec__certprocessing__validityt__notafter : us_rep3
}

function us_split_fields_NotBefore__projection(a: us_split_fields8) : us_rep3 =
  (a).rec__certprocessing__validityt__notbefore

function us_split_fields_NotAfter__projection(a: us_split_fields8) : us_rep3 =
  (a).rec__certprocessing__validityt__notafter

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___9__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8
}

function us_rep___9__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

logic bool_eq15 : us_rep4, us_rep4 -> bool

axiom bool_eq_def14 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq15(a, b)].
  ((((bool_eq14(((a).us_split_fields9).rec__certprocessing__validityt__notbefore,
  ((b).us_split_fields9).rec__certprocessing__validityt__notbefore) = true) and
  (bool_eq14(((a).us_split_fields9).rec__certprocessing__validityt__notafter,
  ((b).us_split_fields9).rec__certprocessing__validityt__notafter) = true)) ->
  (bool_eq15(a, b) = true)) and
  ((not ((bool_eq14(((a).us_split_fields9).rec__certprocessing__validityt__notbefore,
  ((b).us_split_fields9).rec__certprocessing__validityt__notbefore) = true) and
  (bool_eq14(((a).us_split_fields9).rec__certprocessing__validityt__notafter,
  ((b).us_split_fields9).rec__certprocessing__validityt__notafter) = true))) ->
  (bool_eq15(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep4 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep4 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:unsigned32t. forall a1:unsigned32t. forall a2:unsigned32t.
  forall a3:unsigned32t. forall a4:unsigned32t. forall a5:unsigned32t.
  forall a6:unsigned32t. forall a7:unsigned32t. forall a8:unsigned32t.
  forall a9:unsigned32t. (0 <= object__size5({ us_split_fields9 = {
  rec__certprocessing__validityt__notbefore = { us_split_fields7 = {
  rec__certprocessing__timet__year = a; rec__certprocessing__timet__month =
  a1; rec__certprocessing__timet__day = a2;
  rec__certprocessing__timet__hour = a3; rec__certprocessing__timet__minute =
  a4 } }; rec__certprocessing__validityt__notafter = { us_split_fields7 = {
  rec__certprocessing__timet__year = a5; rec__certprocessing__timet__month =
  a6; rec__certprocessing__timet__day = a7;
  rec__certprocessing__timet__hour = a8; rec__certprocessing__timet__minute =
  a9 } } } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:unsigned32t. forall a1:unsigned32t. forall a2:unsigned32t.
  forall a3:unsigned32t. forall a4:unsigned32t. forall a5:unsigned32t.
  forall a6:unsigned32t. forall a7:unsigned32t. forall a8:unsigned32t.
  forall a9:unsigned32t. (0 <= object__alignment5({ us_split_fields9 = {
  rec__certprocessing__validityt__notbefore = { us_split_fields7 = {
  rec__certprocessing__timet__year = a; rec__certprocessing__timet__month =
  a1; rec__certprocessing__timet__day = a2;
  rec__certprocessing__timet__hour = a3; rec__certprocessing__timet__minute =
  a4 } }; rec__certprocessing__validityt__notafter = { us_split_fields7 = {
  rec__certprocessing__timet__year = a5; rec__certprocessing__timet__month =
  a6; rec__certprocessing__timet__day = a7;
  rec__certprocessing__timet__hour = a8; rec__certprocessing__timet__minute =
  a9 } } } })))

logic certprocessing__validityt__notbefore__first__bit : int

logic certprocessing__validityt__notbefore__last__bit : int

logic certprocessing__validityt__notbefore__position : int

axiom certprocessing__validityt__notbefore__first__bit_axiom :
  (0 <= certprocessing__validityt__notbefore__first__bit)

axiom certprocessing__validityt__notbefore__last__bit_axiom :
  (certprocessing__validityt__notbefore__first__bit <  certprocessing__validityt__notbefore__last__bit)

axiom certprocessing__validityt__notbefore__position_axiom :
  (0 <= certprocessing__validityt__notbefore__position)

logic certprocessing__validityt__notafter__first__bit : int

logic certprocessing__validityt__notafter__last__bit : int

logic certprocessing__validityt__notafter__position : int

axiom certprocessing__validityt__notafter__first__bit_axiom :
  (0 <= certprocessing__validityt__notafter__first__bit)

axiom certprocessing__validityt__notafter__last__bit_axiom :
  (certprocessing__validityt__notafter__first__bit <  certprocessing__validityt__notafter__last__bit)

axiom certprocessing__validityt__notafter__position_axiom :
  (0 <= certprocessing__validityt__notafter__position)

logic user_eq13 : us_rep4, us_rep4 -> bool

logic dummy24 : unsigned32t

logic dummy25 : unsigned32t

logic dummy26 : unsigned32t

logic dummy27 : unsigned32t

logic dummy28 : unsigned32t

logic dummy29 : unsigned32t

logic dummy30 : unsigned32t

logic dummy31 : unsigned32t

logic dummy32 : unsigned32t

logic dummy33 : unsigned32t

type validityt__ref = { validityt__content : us_rep4
}

function validityt__ref___projection(a: validityt__ref) : us_rep4 =
  (a).validityt__content

type us_split_fields10 = { rec__certprocessing__publickeyinfot__algorithmid :
algorithmt; rec__certprocessing__publickeyinfot__keyid : unsigned32t;
rec__certprocessing__publickeyinfot__keylength : unsigned32t
}

function us_split_fields_AlgorithmId__projection(a: us_split_fields10) : algorithmt =
  (a).rec__certprocessing__publickeyinfot__algorithmid

function us_split_fields_KeyID__2__projection(a: us_split_fields10) : unsigned32t =
  (a).rec__certprocessing__publickeyinfot__keyid

function us_split_fields_KeyLength__2__projection(a: us_split_fields10) : unsigned32t =
  (a).rec__certprocessing__publickeyinfot__keylength

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___11__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_fields11 : us_split_fields10
}

function us_rep___11__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

logic bool_eq16 : us_rep5, us_rep5 -> bool

axiom bool_eq_def15 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq16(a, b)].
  (((((to_rep4(((a).us_split_fields11).rec__certprocessing__publickeyinfot__algorithmid) = to_rep4(((b).us_split_fields11).rec__certprocessing__publickeyinfot__algorithmid)) and
  (to_rep(((a).us_split_fields11).rec__certprocessing__publickeyinfot__keyid) = to_rep(((b).us_split_fields11).rec__certprocessing__publickeyinfot__keyid))) and
  (to_rep(((a).us_split_fields11).rec__certprocessing__publickeyinfot__keylength) = to_rep(((b).us_split_fields11).rec__certprocessing__publickeyinfot__keylength))) ->
  (bool_eq16(a, b) = true)) and
  ((not (((to_rep4(((a).us_split_fields11).rec__certprocessing__publickeyinfot__algorithmid) = to_rep4(((b).us_split_fields11).rec__certprocessing__publickeyinfot__algorithmid)) and
  (to_rep(((a).us_split_fields11).rec__certprocessing__publickeyinfot__keyid) = to_rep(((b).us_split_fields11).rec__certprocessing__publickeyinfot__keyid))) and
  (to_rep(((a).us_split_fields11).rec__certprocessing__publickeyinfot__keylength) = to_rep(((b).us_split_fields11).rec__certprocessing__publickeyinfot__keylength)))) ->
  (bool_eq16(a, b) = false))))

logic value__size6 : int

logic object__size6 : us_rep5 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep5 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:algorithmt. forall a1:unsigned32t. forall a2:unsigned32t.
  (0 <= object__size6({ us_split_fields11 = {
  rec__certprocessing__publickeyinfot__algorithmid = a;
  rec__certprocessing__publickeyinfot__keyid = a1;
  rec__certprocessing__publickeyinfot__keylength = a2 } })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:algorithmt. forall a1:unsigned32t. forall a2:unsigned32t.
  (0 <= object__alignment6({ us_split_fields11 = {
  rec__certprocessing__publickeyinfot__algorithmid = a;
  rec__certprocessing__publickeyinfot__keyid = a1;
  rec__certprocessing__publickeyinfot__keylength = a2 } })))

logic certprocessing__publickeyinfot__algorithmid__first__bit : int

logic certprocessing__publickeyinfot__algorithmid__last__bit : int

logic certprocessing__publickeyinfot__algorithmid__position : int

axiom certprocessing__publickeyinfot__algorithmid__first__bit_axiom :
  (0 <= certprocessing__publickeyinfot__algorithmid__first__bit)

axiom certprocessing__publickeyinfot__algorithmid__last__bit_axiom :
  (certprocessing__publickeyinfot__algorithmid__first__bit <  certprocessing__publickeyinfot__algorithmid__last__bit)

axiom certprocessing__publickeyinfot__algorithmid__position_axiom :
  (0 <= certprocessing__publickeyinfot__algorithmid__position)

logic certprocessing__publickeyinfot__keyid__first__bit : int

logic certprocessing__publickeyinfot__keyid__last__bit : int

logic certprocessing__publickeyinfot__keyid__position : int

axiom certprocessing__publickeyinfot__keyid__first__bit_axiom :
  (0 <= certprocessing__publickeyinfot__keyid__first__bit)

axiom certprocessing__publickeyinfot__keyid__last__bit_axiom :
  (certprocessing__publickeyinfot__keyid__first__bit <  certprocessing__publickeyinfot__keyid__last__bit)

axiom certprocessing__publickeyinfot__keyid__position_axiom :
  (0 <= certprocessing__publickeyinfot__keyid__position)

logic certprocessing__publickeyinfot__keylength__first__bit : int

logic certprocessing__publickeyinfot__keylength__last__bit : int

logic certprocessing__publickeyinfot__keylength__position : int

axiom certprocessing__publickeyinfot__keylength__first__bit_axiom :
  (0 <= certprocessing__publickeyinfot__keylength__first__bit)

axiom certprocessing__publickeyinfot__keylength__last__bit_axiom :
  (certprocessing__publickeyinfot__keylength__first__bit <  certprocessing__publickeyinfot__keylength__last__bit)

axiom certprocessing__publickeyinfot__keylength__position_axiom :
  (0 <= certprocessing__publickeyinfot__keylength__position)

logic user_eq14 : us_rep5, us_rep5 -> bool

logic dummy34 : algorithmt

logic dummy35 : unsigned32t

logic dummy36 : unsigned32t

type publickeyinfot__ref = { publickeyinfot__content : us_rep5
}

function publickeyinfot__ref___projection(a: publickeyinfot__ref) : us_rep5 =
  (a).publickeyinfot__content

type us_split_fields12 = { rec__certprocessing__idcertdatat__serialnumber :
unsigned32t; rec__certprocessing__idcertdatat__sigalgid : algorithmt;
rec__certprocessing__idcertdatat__issuer : us_rep;
rec__certprocessing__idcertdatat__validity : us_rep4;
rec__certprocessing__idcertdatat__subject : us_rep;
rec__certprocessing__idcertdatat__subjectpublickeyinfo : us_rep5
}

function us_split_fields_SerialNumber__2__projection(a: us_split_fields12) : unsigned32t =
  (a).rec__certprocessing__idcertdatat__serialnumber

function us_split_fields_SigAlgId__projection(a: us_split_fields12) : algorithmt =
  (a).rec__certprocessing__idcertdatat__sigalgid

function us_split_fields_Issuer__2__projection(a: us_split_fields12) : us_rep =
  (a).rec__certprocessing__idcertdatat__issuer

function us_split_fields_Validity__projection(a: us_split_fields12) : us_rep4 =
  (a).rec__certprocessing__idcertdatat__validity

function us_split_fields_Subject__projection(a: us_split_fields12) : us_rep =
  (a).rec__certprocessing__idcertdatat__subject

function us_split_fields_SubjectPublicKeyInfo__projection(a: us_split_fields12) : us_rep5 =
  (a).rec__certprocessing__idcertdatat__subjectpublickeyinfo

type us_split_fields__ref6 = { us_split_fields__content6 : us_split_fields12
}

function us_split_fields__ref___12__projection(a: us_split_fields__ref6) : us_split_fields12 =
  (a).us_split_fields__content6

type us_rep6 = { us_split_fields13 : us_split_fields12
}

function us_rep___12__projection(a: us_rep6) : us_split_fields12 =
  (a).us_split_fields13

logic bool_eq17 : us_rep6, us_rep6 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep6. forall b:us_rep6 [bool_eq17(a, b)].
  ((((((((to_rep(((a).us_split_fields13).rec__certprocessing__idcertdatat__serialnumber) = to_rep(((b).us_split_fields13).rec__certprocessing__idcertdatat__serialnumber)) and
  (to_rep4(((a).us_split_fields13).rec__certprocessing__idcertdatat__sigalgid) = to_rep4(((b).us_split_fields13).rec__certprocessing__idcertdatat__sigalgid))) and
  (bool_eq7(((a).us_split_fields13).rec__certprocessing__idcertdatat__issuer,
  ((b).us_split_fields13).rec__certprocessing__idcertdatat__issuer) = true)) and
  (bool_eq15(((a).us_split_fields13).rec__certprocessing__idcertdatat__validity,
  ((b).us_split_fields13).rec__certprocessing__idcertdatat__validity) = true)) and
  (bool_eq7(((a).us_split_fields13).rec__certprocessing__idcertdatat__subject,
  ((b).us_split_fields13).rec__certprocessing__idcertdatat__subject) = true)) and
  (bool_eq16(((a).us_split_fields13).rec__certprocessing__idcertdatat__subjectpublickeyinfo,
  ((b).us_split_fields13).rec__certprocessing__idcertdatat__subjectpublickeyinfo) = true)) ->
  (bool_eq17(a, b) = true)) and
  ((not ((((((to_rep(((a).us_split_fields13).rec__certprocessing__idcertdatat__serialnumber) = to_rep(((b).us_split_fields13).rec__certprocessing__idcertdatat__serialnumber)) and
  (to_rep4(((a).us_split_fields13).rec__certprocessing__idcertdatat__sigalgid) = to_rep4(((b).us_split_fields13).rec__certprocessing__idcertdatat__sigalgid))) and
  (bool_eq7(((a).us_split_fields13).rec__certprocessing__idcertdatat__issuer,
  ((b).us_split_fields13).rec__certprocessing__idcertdatat__issuer) = true)) and
  (bool_eq15(((a).us_split_fields13).rec__certprocessing__idcertdatat__validity,
  ((b).us_split_fields13).rec__certprocessing__idcertdatat__validity) = true)) and
  (bool_eq7(((a).us_split_fields13).rec__certprocessing__idcertdatat__subject,
  ((b).us_split_fields13).rec__certprocessing__idcertdatat__subject) = true)) and
  (bool_eq16(((a).us_split_fields13).rec__certprocessing__idcertdatat__subjectpublickeyinfo,
  ((b).us_split_fields13).rec__certprocessing__idcertdatat__subjectpublickeyinfo) = true))) ->
  (bool_eq17(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep6 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep6 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (forall a:us_rep6. (0 <= object__size7(a)))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:us_rep6. (0 <= object__alignment7(a)))

logic certprocessing__idcertdatat__serialnumber__first__bit : int

logic certprocessing__idcertdatat__serialnumber__last__bit : int

logic certprocessing__idcertdatat__serialnumber__position : int

axiom certprocessing__idcertdatat__serialnumber__first__bit_axiom :
  (0 <= certprocessing__idcertdatat__serialnumber__first__bit)

axiom certprocessing__idcertdatat__serialnumber__last__bit_axiom :
  (certprocessing__idcertdatat__serialnumber__first__bit <  certprocessing__idcertdatat__serialnumber__last__bit)

axiom certprocessing__idcertdatat__serialnumber__position_axiom :
  (0 <= certprocessing__idcertdatat__serialnumber__position)

logic certprocessing__idcertdatat__sigalgid__first__bit : int

logic certprocessing__idcertdatat__sigalgid__last__bit : int

logic certprocessing__idcertdatat__sigalgid__position : int

axiom certprocessing__idcertdatat__sigalgid__first__bit_axiom :
  (0 <= certprocessing__idcertdatat__sigalgid__first__bit)

axiom certprocessing__idcertdatat__sigalgid__last__bit_axiom :
  (certprocessing__idcertdatat__sigalgid__first__bit <  certprocessing__idcertdatat__sigalgid__last__bit)

axiom certprocessing__idcertdatat__sigalgid__position_axiom :
  (0 <= certprocessing__idcertdatat__sigalgid__position)

logic certprocessing__idcertdatat__issuer__first__bit : int

logic certprocessing__idcertdatat__issuer__last__bit : int

logic certprocessing__idcertdatat__issuer__position : int

axiom certprocessing__idcertdatat__issuer__first__bit_axiom :
  (0 <= certprocessing__idcertdatat__issuer__first__bit)

axiom certprocessing__idcertdatat__issuer__last__bit_axiom :
  (certprocessing__idcertdatat__issuer__first__bit <  certprocessing__idcertdatat__issuer__last__bit)

axiom certprocessing__idcertdatat__issuer__position_axiom :
  (0 <= certprocessing__idcertdatat__issuer__position)

logic certprocessing__idcertdatat__validity__first__bit : int

logic certprocessing__idcertdatat__validity__last__bit : int

logic certprocessing__idcertdatat__validity__position : int

axiom certprocessing__idcertdatat__validity__first__bit_axiom :
  (0 <= certprocessing__idcertdatat__validity__first__bit)

axiom certprocessing__idcertdatat__validity__last__bit_axiom :
  (certprocessing__idcertdatat__validity__first__bit <  certprocessing__idcertdatat__validity__last__bit)

axiom certprocessing__idcertdatat__validity__position_axiom :
  (0 <= certprocessing__idcertdatat__validity__position)

logic certprocessing__idcertdatat__subject__first__bit : int

logic certprocessing__idcertdatat__subject__last__bit : int

logic certprocessing__idcertdatat__subject__position : int

axiom certprocessing__idcertdatat__subject__first__bit_axiom :
  (0 <= certprocessing__idcertdatat__subject__first__bit)

axiom certprocessing__idcertdatat__subject__last__bit_axiom :
  (certprocessing__idcertdatat__subject__first__bit <  certprocessing__idcertdatat__subject__last__bit)

axiom certprocessing__idcertdatat__subject__position_axiom :
  (0 <= certprocessing__idcertdatat__subject__position)

logic certprocessing__idcertdatat__subjectpublickeyinfo__first__bit : int

logic certprocessing__idcertdatat__subjectpublickeyinfo__last__bit : int

logic certprocessing__idcertdatat__subjectpublickeyinfo__position : int

axiom certprocessing__idcertdatat__subjectpublickeyinfo__first__bit_axiom :
  (0 <= certprocessing__idcertdatat__subjectpublickeyinfo__first__bit)

axiom certprocessing__idcertdatat__subjectpublickeyinfo__last__bit_axiom :
  (certprocessing__idcertdatat__subjectpublickeyinfo__first__bit <  certprocessing__idcertdatat__subjectpublickeyinfo__last__bit)

axiom certprocessing__idcertdatat__subjectpublickeyinfo__position_axiom :
  (0 <= certprocessing__idcertdatat__subjectpublickeyinfo__position)

logic user_eq15 : us_rep6, us_rep6 -> bool

logic dummy37 : unsigned32t

logic dummy38 : algorithmt

logic dummy39 : issueridt

logic dummy40 : namecountt

logic dummy41 : (int,character) farray

logic dummy42 : unsigned32t

logic dummy43 : unsigned32t

logic dummy44 : unsigned32t

logic dummy45 : unsigned32t

logic dummy46 : unsigned32t

logic dummy47 : unsigned32t

logic dummy48 : unsigned32t

logic dummy49 : unsigned32t

logic dummy50 : unsigned32t

logic dummy51 : unsigned32t

logic dummy52 : issueridt

logic dummy53 : namecountt

logic dummy54 : (int,character) farray

logic dummy55 : algorithmt

logic dummy56 : unsigned32t

logic dummy57 : unsigned32t

type idcertdatat__ref = { idcertdatat__content : us_rep6
}

function idcertdatat__ref___projection(a: idcertdatat__ref) : us_rep6 =
  (a).idcertdatat__content

type yearst

predicate in_range9(x: int) = ((1901 <= x) and (x <= 2099))

logic bool_eq18 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq18(x, y)]. (((x = y) -> (bool_eq18(x,
  y) = true)) and ((not (x = y)) -> (bool_eq18(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq16 : yearst, yearst -> bool

logic dummy58 : yearst

type yearst__ref = { yearst__content : yearst
}

function yearst__ref___projection(a: yearst__ref) : yearst =
  (a).yearst__content

logic to_rep8 : yearst -> int

logic of_rep8 : int -> yearst

axiom inversion_axiom8 :
  (forall x:yearst [to_rep8(x)]. (of_rep8(to_rep8(x)) = x))

axiom range_axiom8 : (forall x:yearst [to_rep8(x)]. in_range9(to_rep8(x)))

axiom coerce_axiom8 :
  (forall x:int [to_rep8(of_rep8(x))]. (in_range9(x) ->
  (to_rep8(of_rep8(x)) = x)))

type monthst

predicate in_range10(x: int) = ((1 <= x) and (x <= 12))

logic bool_eq19 : int, int -> bool

axiom bool_eq_def18 :
  (forall x:int. forall y:int [bool_eq19(x, y)]. (((x = y) -> (bool_eq19(x,
  y) = true)) and ((not (x = y)) -> (bool_eq19(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq17 : monthst, monthst -> bool

logic dummy59 : monthst

type monthst__ref = { monthst__content : monthst
}

function monthst__ref___projection(a: monthst__ref) : monthst =
  (a).monthst__content

logic to_rep9 : monthst -> int

logic of_rep9 : int -> monthst

axiom inversion_axiom9 :
  (forall x:monthst [to_rep9(x)]. (of_rep9(to_rep9(x)) = x))

axiom range_axiom9 : (forall x:monthst [to_rep9(x)]. in_range10(to_rep9(x)))

axiom coerce_axiom9 :
  (forall x:int [to_rep9(of_rep9(x))]. (in_range10(x) ->
  (to_rep9(of_rep9(x)) = x)))

type dayst

predicate in_range11(x: int) = ((1 <= x) and (x <= 31))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def19 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq18 : dayst, dayst -> bool

logic dummy60 : dayst

type dayst__ref = { dayst__content : dayst
}

function dayst__ref___projection(a: dayst__ref) : dayst = (a).dayst__content

logic to_rep10 : dayst -> int

logic of_rep10 : int -> dayst

axiom inversion_axiom10 :
  (forall x:dayst [to_rep10(x)]. (of_rep10(to_rep10(x)) = x))

axiom range_axiom10 : (forall x:dayst [to_rep10(x)]. in_range11(to_rep10(x)))

axiom coerce_axiom10 :
  (forall x:int [to_rep10(of_rep10(x))]. (in_range11(x) ->
  (to_rep10(of_rep10(x)) = x)))

type millisecst

predicate in_range12(x: int) = ((0 <= x) and (x <= 86399999))

logic bool_eq21 : int, int -> bool

axiom bool_eq_def20 :
  (forall x:int. forall y:int [bool_eq21(x, y)]. (((x = y) -> (bool_eq21(x,
  y) = true)) and ((not (x = y)) -> (bool_eq21(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq19 : millisecst, millisecst -> bool

logic dummy61 : millisecst

type millisecst__ref = { millisecst__content : millisecst
}

function millisecst__ref___projection(a: millisecst__ref) : millisecst =
  (a).millisecst__content

logic to_rep11 : millisecst -> int

logic of_rep11 : int -> millisecst

axiom inversion_axiom11 :
  (forall x:millisecst [to_rep11(x)]. (of_rep11(to_rep11(x)) = x))

axiom range_axiom11 :
  (forall x:millisecst [to_rep11(x)]. in_range12(to_rep11(x)))

axiom coerce_axiom11 :
  (forall x:int [to_rep11(of_rep11(x))]. (in_range12(x) ->
  (to_rep11(of_rep11(x)) = x)))

type us_split_fields14 = { rec__clock__timet__year : yearst;
rec__clock__timet__month : monthst; rec__clock__timet__day : dayst;
rec__clock__timet__millisec : millisecst
}

function us_split_fields_Year__2__projection(a: us_split_fields14) : yearst =
  (a).rec__clock__timet__year

function us_split_fields_Month__2__projection(a: us_split_fields14) : monthst =
  (a).rec__clock__timet__month

function us_split_fields_Day__2__projection(a: us_split_fields14) : dayst =
  (a).rec__clock__timet__day

function us_split_fields_MilliSec__projection(a: us_split_fields14) : millisecst =
  (a).rec__clock__timet__millisec

type us_split_fields__ref7 = { us_split_fields__content7 : us_split_fields14
}

function us_split_fields__ref___16__projection(a: us_split_fields__ref7) : us_split_fields14 =
  (a).us_split_fields__content7

type us_rep7 = { us_split_fields15 : us_split_fields14
}

function us_rep___16__projection(a: us_rep7) : us_split_fields14 =
  (a).us_split_fields15

logic bool_eq22 : us_rep7, us_rep7 -> bool

axiom bool_eq_def21 :
  (forall a:us_rep7. forall b:us_rep7 [bool_eq22(a, b)].
  ((((((to_rep8(((a).us_split_fields15).rec__clock__timet__year) = to_rep8(((b).us_split_fields15).rec__clock__timet__year)) and
  (to_rep9(((a).us_split_fields15).rec__clock__timet__month) = to_rep9(((b).us_split_fields15).rec__clock__timet__month))) and
  (to_rep10(((a).us_split_fields15).rec__clock__timet__day) = to_rep10(((b).us_split_fields15).rec__clock__timet__day))) and
  (to_rep11(((a).us_split_fields15).rec__clock__timet__millisec) = to_rep11(((b).us_split_fields15).rec__clock__timet__millisec))) ->
  (bool_eq22(a, b) = true)) and
  ((not ((((to_rep8(((a).us_split_fields15).rec__clock__timet__year) = to_rep8(((b).us_split_fields15).rec__clock__timet__year)) and
  (to_rep9(((a).us_split_fields15).rec__clock__timet__month) = to_rep9(((b).us_split_fields15).rec__clock__timet__month))) and
  (to_rep10(((a).us_split_fields15).rec__clock__timet__day) = to_rep10(((b).us_split_fields15).rec__clock__timet__day))) and
  (to_rep11(((a).us_split_fields15).rec__clock__timet__millisec) = to_rep11(((b).us_split_fields15).rec__clock__timet__millisec)))) ->
  (bool_eq22(a, b) = false))))

logic value__size8 : int

logic object__size8 : us_rep7 -> int

logic value__alignment8 : int

logic object__alignment8 : us_rep7 -> int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__size8({ us_split_fields15 = { rec__clock__timet__year = a;
  rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

axiom value__alignment_axiom8 : (0 <= value__alignment8)

axiom object__alignment_axiom8 :
  (forall a:yearst. forall a1:monthst. forall a2:dayst. forall a3:millisecst.
  (0 <= object__alignment8({ us_split_fields15 = { rec__clock__timet__year =
  a; rec__clock__timet__month = a1; rec__clock__timet__day = a2;
  rec__clock__timet__millisec = a3 } })))

logic clock__timet__year__first__bit : int

logic clock__timet__year__last__bit : int

logic clock__timet__year__position : int

axiom clock__timet__year__first__bit_axiom :
  (0 <= clock__timet__year__first__bit)

axiom clock__timet__year__last__bit_axiom :
  (clock__timet__year__first__bit <  clock__timet__year__last__bit)

axiom clock__timet__year__position_axiom :
  (0 <= clock__timet__year__position)

logic clock__timet__month__first__bit : int

logic clock__timet__month__last__bit : int

logic clock__timet__month__position : int

axiom clock__timet__month__first__bit_axiom :
  (0 <= clock__timet__month__first__bit)

axiom clock__timet__month__last__bit_axiom :
  (clock__timet__month__first__bit <  clock__timet__month__last__bit)

axiom clock__timet__month__position_axiom :
  (0 <= clock__timet__month__position)

logic clock__timet__day__first__bit : int

logic clock__timet__day__last__bit : int

logic clock__timet__day__position : int

axiom clock__timet__day__first__bit_axiom :
  (0 <= clock__timet__day__first__bit)

axiom clock__timet__day__last__bit_axiom :
  (clock__timet__day__first__bit <  clock__timet__day__last__bit)

axiom clock__timet__day__position_axiom : (0 <= clock__timet__day__position)

logic clock__timet__millisec__first__bit : int

logic clock__timet__millisec__last__bit : int

logic clock__timet__millisec__position : int

axiom clock__timet__millisec__first__bit_axiom :
  (0 <= clock__timet__millisec__first__bit)

axiom clock__timet__millisec__last__bit_axiom :
  (clock__timet__millisec__first__bit <  clock__timet__millisec__last__bit)

axiom clock__timet__millisec__position_axiom :
  (0 <= clock__timet__millisec__position)

logic user_eq20 : us_rep7, us_rep7 -> bool

logic dummy62 : yearst

logic dummy63 : monthst

logic dummy64 : dayst

logic dummy65 : millisecst

type timet__ref1 = { timet__content1 : us_rep7
}

function timet__ref___2__projection(a: timet__ref1) : us_rep7 =
  (a).timet__content1

type us_split_fields16 = { rec__cert__id__contentst__id : us_rep2;
rec__cert__id__contentst__notbefore : us_rep7;
rec__cert__id__contentst__notafter : us_rep7;
rec__cert__id__contentst__mechanism : algorithmt;
rec__cert__id__contentst__subject : us_rep;
rec__cert__id__contentst__subjectpublickey : us_rep1
}

function us_split_fields_ID__4__projection(a: us_split_fields16) : us_rep2 =
  (a).rec__cert__id__contentst__id

function us_split_fields_NotBefore__3__projection(a: us_split_fields16) : us_rep7 =
  (a).rec__cert__id__contentst__notbefore

function us_split_fields_NotAfter__3__projection(a: us_split_fields16) : us_rep7 =
  (a).rec__cert__id__contentst__notafter

function us_split_fields_Mechanism__2__projection(a: us_split_fields16) : algorithmt =
  (a).rec__cert__id__contentst__mechanism

function us_split_fields_Subject__2__projection(a: us_split_fields16) : us_rep =
  (a).rec__cert__id__contentst__subject

function us_split_fields_SubjectPublicKey__projection(a: us_split_fields16) : us_rep1 =
  (a).rec__cert__id__contentst__subjectpublickey

type us_split_fields__ref8 = { us_split_fields__content8 : us_split_fields16
}

function us_split_fields__ref___22__projection(a: us_split_fields__ref8) : us_split_fields16 =
  (a).us_split_fields__content8

type us_rep8 = { us_split_fields17 : us_split_fields16
}

function us_rep___23__projection(a: us_rep8) : us_split_fields16 =
  (a).us_split_fields17

logic bool_eq23 : us_rep8, us_rep8 -> bool

axiom bool_eq_def22 :
  (forall a:us_rep8. forall b:us_rep8 [bool_eq23(a, b)].
  ((((((((bool_eq13(((a).us_split_fields17).rec__cert__id__contentst__id,
  ((b).us_split_fields17).rec__cert__id__contentst__id) = true) and
  (bool_eq22(((a).us_split_fields17).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields17).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq22(((a).us_split_fields17).rec__cert__id__contentst__notafter,
  ((b).us_split_fields17).rec__cert__id__contentst__notafter) = true)) and
  (to_rep4(((a).us_split_fields17).rec__cert__id__contentst__mechanism) = to_rep4(((b).us_split_fields17).rec__cert__id__contentst__mechanism))) and
  (bool_eq7(((a).us_split_fields17).rec__cert__id__contentst__subject,
  ((b).us_split_fields17).rec__cert__id__contentst__subject) = true)) and
  (bool_eq11(((a).us_split_fields17).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields17).rec__cert__id__contentst__subjectpublickey) = true)) ->
  (bool_eq23(a, b) = true)) and
  ((not ((((((bool_eq13(((a).us_split_fields17).rec__cert__id__contentst__id,
  ((b).us_split_fields17).rec__cert__id__contentst__id) = true) and
  (bool_eq22(((a).us_split_fields17).rec__cert__id__contentst__notbefore,
  ((b).us_split_fields17).rec__cert__id__contentst__notbefore) = true)) and
  (bool_eq22(((a).us_split_fields17).rec__cert__id__contentst__notafter,
  ((b).us_split_fields17).rec__cert__id__contentst__notafter) = true)) and
  (to_rep4(((a).us_split_fields17).rec__cert__id__contentst__mechanism) = to_rep4(((b).us_split_fields17).rec__cert__id__contentst__mechanism))) and
  (bool_eq7(((a).us_split_fields17).rec__cert__id__contentst__subject,
  ((b).us_split_fields17).rec__cert__id__contentst__subject) = true)) and
  (bool_eq11(((a).us_split_fields17).rec__cert__id__contentst__subjectpublickey,
  ((b).us_split_fields17).rec__cert__id__contentst__subjectpublickey) = true))) ->
  (bool_eq23(a, b) = false))))

logic value__size9 : int

logic object__size9 : us_rep8 -> int

logic value__alignment9 : int

logic object__alignment9 : us_rep8 -> int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (forall a:us_rep8. (0 <= object__size9(a)))

axiom value__alignment_axiom9 : (0 <= value__alignment9)

axiom object__alignment_axiom9 :
  (forall a:us_rep8. (0 <= object__alignment9(a)))

logic cert__id__contentst__id__first__bit : int

logic cert__id__contentst__id__last__bit : int

logic cert__id__contentst__id__position : int

axiom cert__id__contentst__id__first__bit_axiom :
  (0 <= cert__id__contentst__id__first__bit)

axiom cert__id__contentst__id__last__bit_axiom :
  (cert__id__contentst__id__first__bit <  cert__id__contentst__id__last__bit)

axiom cert__id__contentst__id__position_axiom :
  (0 <= cert__id__contentst__id__position)

logic cert__id__contentst__notbefore__first__bit : int

logic cert__id__contentst__notbefore__last__bit : int

logic cert__id__contentst__notbefore__position : int

axiom cert__id__contentst__notbefore__first__bit_axiom :
  (0 <= cert__id__contentst__notbefore__first__bit)

axiom cert__id__contentst__notbefore__last__bit_axiom :
  (cert__id__contentst__notbefore__first__bit <  cert__id__contentst__notbefore__last__bit)

axiom cert__id__contentst__notbefore__position_axiom :
  (0 <= cert__id__contentst__notbefore__position)

logic cert__id__contentst__notafter__first__bit : int

logic cert__id__contentst__notafter__last__bit : int

logic cert__id__contentst__notafter__position : int

axiom cert__id__contentst__notafter__first__bit_axiom :
  (0 <= cert__id__contentst__notafter__first__bit)

axiom cert__id__contentst__notafter__last__bit_axiom :
  (cert__id__contentst__notafter__first__bit <  cert__id__contentst__notafter__last__bit)

axiom cert__id__contentst__notafter__position_axiom :
  (0 <= cert__id__contentst__notafter__position)

logic cert__id__contentst__mechanism__first__bit : int

logic cert__id__contentst__mechanism__last__bit : int

logic cert__id__contentst__mechanism__position : int

axiom cert__id__contentst__mechanism__first__bit_axiom :
  (0 <= cert__id__contentst__mechanism__first__bit)

axiom cert__id__contentst__mechanism__last__bit_axiom :
  (cert__id__contentst__mechanism__first__bit <  cert__id__contentst__mechanism__last__bit)

axiom cert__id__contentst__mechanism__position_axiom :
  (0 <= cert__id__contentst__mechanism__position)

logic cert__id__contentst__subject__first__bit : int

logic cert__id__contentst__subject__last__bit : int

logic cert__id__contentst__subject__position : int

axiom cert__id__contentst__subject__first__bit_axiom :
  (0 <= cert__id__contentst__subject__first__bit)

axiom cert__id__contentst__subject__last__bit_axiom :
  (cert__id__contentst__subject__first__bit <  cert__id__contentst__subject__last__bit)

axiom cert__id__contentst__subject__position_axiom :
  (0 <= cert__id__contentst__subject__position)

logic cert__id__contentst__subjectpublickey__first__bit : int

logic cert__id__contentst__subjectpublickey__last__bit : int

logic cert__id__contentst__subjectpublickey__position : int

axiom cert__id__contentst__subjectpublickey__first__bit_axiom :
  (0 <= cert__id__contentst__subjectpublickey__first__bit)

axiom cert__id__contentst__subjectpublickey__last__bit_axiom :
  (cert__id__contentst__subjectpublickey__first__bit <  cert__id__contentst__subjectpublickey__last__bit)

axiom cert__id__contentst__subjectpublickey__position_axiom :
  (0 <= cert__id__contentst__subjectpublickey__position)

logic user_eq21 : us_rep8, us_rep8 -> bool

logic dummy66 : issueridt

logic dummy67 : namecountt

logic dummy68 : (int,character) farray

logic dummy69 : serialnumbert

logic dummy70 : yearst

logic dummy71 : monthst

logic dummy72 : dayst

logic dummy73 : millisecst

logic dummy74 : yearst

logic dummy75 : monthst

logic dummy76 : dayst

logic dummy77 : millisecst

logic dummy78 : algorithmt

logic dummy79 : issueridt

logic dummy80 : namecountt

logic dummy81 : (int,character) farray

logic dummy82 : algorithmt

logic dummy83 : keyidt

logic dummy84 : keylengtht

type contentst__ref = { contentst__content : us_rep8
}

function contentst__ref___2__projection(a: contentst__ref) : us_rep8 =
  (a).contentst__content

logic rawcert : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic contents__split_fields : issueridt

logic contents__split_fields1 : namecountt

logic contents__split_fields2 : (int,character) farray

logic contents__split_fields3 : serialnumbert

logic contents__split_fields4 : yearst

logic contents__split_fields5 : monthst

logic contents__split_fields6 : dayst

logic contents__split_fields7 : millisecst

logic contents__split_fields8 : yearst

logic contents__split_fields9 : monthst

logic contents__split_fields10 : dayst

logic contents__split_fields11 : millisecst

logic contents__split_fields12 : algorithmt

logic contents__split_fields13 : issueridt

logic contents__split_fields14 : namecountt

logic contents__split_fields15 : (int,character) farray

logic contents__split_fields16 : algorithmt

logic contents__split_fields17 : keyidt

logic contents__split_fields18 : keylengtht

logic localcontents__split_fields : unsigned32t

logic localcontents__split_fields1 : algorithmt

logic localcontents__split_fields2 : issueridt

logic localcontents__split_fields3 : namecountt

logic localcontents__split_fields4 : (int,character) farray

logic localcontents__split_fields5 : unsigned32t

logic localcontents__split_fields6 : unsigned32t

logic localcontents__split_fields7 : unsigned32t

logic localcontents__split_fields8 : unsigned32t

logic localcontents__split_fields9 : unsigned32t

logic localcontents__split_fields10 : unsigned32t

logic localcontents__split_fields11 : unsigned32t

logic localcontents__split_fields12 : unsigned32t

logic localcontents__split_fields13 : unsigned32t

logic localcontents__split_fields14 : unsigned32t

logic localcontents__split_fields15 : issueridt

logic localcontents__split_fields16 : namecountt

logic localcontents__split_fields17 : (int,character) farray

logic localcontents__split_fields18 : algorithmt

logic localcontents__split_fields19 : unsigned32t

logic localcontents__split_fields20 : unsigned32t

logic o : serialnumbert

logic o1 : issueridt

logic o2 : namecountt

logic o3 : (int,character) farray

logic o4 : serialnumbert

logic o5 : issueridt

logic o6 : namecountt

logic o7 : (int,character) farray

logic o8 : serialnumbert

logic o9 : issueridt

logic o10 : namecountt

logic o11 : (int,character) farray

logic o12 : serialnumbert

logic o13 : yearst

logic o14 : monthst

logic o15 : dayst

logic o16 : millisecst

logic o17 : yearst

logic o18 : monthst

logic o19 : dayst

logic o20 : millisecst

logic o21 : algorithmt

logic o22 : issueridt

logic o23 : namecountt

logic o24 : (int,character) farray

logic o25 : algorithmt

logic o26 : keyidt

logic o27 : keylengtht

logic temp___1746 : issueridt

logic temp___17461 : namecountt

logic temp___17462 : (int,character) farray

logic temp___17463 : serialnumbert

logic temp___17464 : yearst

logic temp___17465 : monthst

logic temp___17466 : dayst

logic temp___17467 : millisecst

logic temp___17468 : yearst

logic temp___17469 : monthst

logic temp___174610 : dayst

logic temp___174611 : millisecst

logic temp___174612 : algorithmt

logic temp___174613 : issueridt

logic temp___174614 : namecountt

logic temp___174615 : (int,character) farray

logic temp___174616 : algorithmt

logic temp___174617 : keyidt

logic temp___174618 : keylengtht

logic o28 : algorithmt

logic o29 : issueridt

logic o30 : namecountt

logic o31 : (int,character) farray

logic o32 : serialnumbert

logic o33 : yearst

logic o34 : monthst

logic o35 : dayst

logic o36 : millisecst

logic o37 : yearst

logic o38 : monthst

logic o39 : dayst

logic o40 : millisecst

logic o41 : algorithmt

logic o42 : issueridt

logic o43 : namecountt

logic o44 : (int,character) farray

logic o45 : algorithmt

logic o46 : keyidt

logic o47 : keylengtht

logic temp___1748 : issueridt

logic temp___17481 : namecountt

logic temp___17482 : (int,character) farray

logic temp___17483 : serialnumbert

logic temp___17484 : yearst

logic temp___17485 : monthst

logic temp___17486 : dayst

logic temp___17487 : millisecst

logic temp___17488 : yearst

logic temp___17489 : monthst

logic temp___174810 : dayst

logic temp___174811 : millisecst

logic temp___174812 : algorithmt

logic temp___174813 : issueridt

logic temp___174814 : namecountt

logic temp___174815 : (int,character) farray

logic temp___174816 : algorithmt

logic temp___174817 : keyidt

logic temp___174818 : keylengtht

logic o48 : algorithmt

logic o49 : algorithmt

logic o50 : keyidt

logic o51 : keylengtht

logic o52 : algorithmt

logic o53 : keyidt

logic o54 : keylengtht

logic o55 : issueridt

logic o56 : namecountt

logic o57 : (int,character) farray

logic o58 : serialnumbert

logic o59 : yearst

logic o60 : monthst

logic o61 : dayst

logic o62 : millisecst

logic o63 : yearst

logic o64 : monthst

logic o65 : dayst

logic o66 : millisecst

logic o67 : algorithmt

logic o68 : issueridt

logic o69 : namecountt

logic o70 : (int,character) farray

logic o71 : algorithmt

logic o72 : keyidt

logic o73 : keylengtht

logic temp___1753 : issueridt

logic temp___17531 : namecountt

logic temp___17532 : (int,character) farray

logic temp___17533 : serialnumbert

logic temp___17534 : yearst

logic temp___17535 : monthst

logic temp___17536 : dayst

logic temp___17537 : millisecst

logic temp___17538 : yearst

logic temp___17539 : monthst

logic temp___175310 : dayst

logic temp___175311 : millisecst

logic temp___175312 : algorithmt

logic temp___175313 : issueridt

logic temp___175314 : namecountt

logic temp___175315 : (int,character) farray

logic temp___175316 : algorithmt

logic temp___175317 : keyidt

logic temp___175318 : keylengtht

logic o74 : keyidt

logic o75 : algorithmt

logic o76 : keyidt

logic o77 : keylengtht

logic o78 : algorithmt

logic o79 : keyidt

logic o80 : keylengtht

logic o81 : issueridt

logic o82 : namecountt

logic o83 : (int,character) farray

logic o84 : serialnumbert

logic o85 : yearst

logic o86 : monthst

logic o87 : dayst

logic o88 : millisecst

logic o89 : yearst

logic o90 : monthst

logic o91 : dayst

logic o92 : millisecst

logic o93 : algorithmt

logic o94 : issueridt

logic o95 : namecountt

logic o96 : (int,character) farray

logic o97 : algorithmt

logic o98 : keyidt

logic o99 : keylengtht

logic temp___1756 : issueridt

logic temp___17561 : namecountt

logic temp___17562 : (int,character) farray

logic temp___17563 : serialnumbert

logic temp___17564 : yearst

logic temp___17565 : monthst

logic temp___17566 : dayst

logic temp___17567 : millisecst

logic temp___17568 : yearst

logic temp___17569 : monthst

logic temp___175610 : dayst

logic temp___175611 : millisecst

logic temp___175612 : algorithmt

logic temp___175613 : issueridt

logic temp___175614 : namecountt

logic temp___175615 : (int,character) farray

logic temp___175616 : algorithmt

logic temp___175617 : keyidt

logic temp___175618 : keylengtht

logic o100 : int

logic localcontents__split_fields21 : unsigned32t

logic localcontents__split_fields22 : algorithmt

logic localcontents__split_fields23 : issueridt

logic localcontents__split_fields24 : namecountt

logic localcontents__split_fields25 : (int,character) farray

logic localcontents__split_fields26 : unsigned32t

logic localcontents__split_fields27 : unsigned32t

logic localcontents__split_fields28 : unsigned32t

logic localcontents__split_fields29 : unsigned32t

logic localcontents__split_fields30 : unsigned32t

logic localcontents__split_fields31 : unsigned32t

logic localcontents__split_fields32 : unsigned32t

logic localcontents__split_fields33 : unsigned32t

logic localcontents__split_fields34 : unsigned32t

logic localcontents__split_fields35 : unsigned32t

logic localcontents__split_fields36 : issueridt

logic localcontents__split_fields37 : namecountt

logic localcontents__split_fields38 : (int,character) farray

logic localcontents__split_fields39 : algorithmt

logic localcontents__split_fields40 : unsigned32t

logic localcontents__split_fields41 : unsigned32t

logic result : issueridt

logic result1 : namecountt

logic result2 : (int,character) farray

logic result3 : serialnumbert

logic result4 : yearst

logic result5 : monthst

logic result6 : dayst

logic result7 : millisecst

logic result8 : yearst

logic result9 : monthst

logic result10 : dayst

logic result11 : millisecst

logic result12 : algorithmt

logic result13 : issueridt

logic result14 : namecountt

logic result15 : (int,character) farray

logic result16 : algorithmt

logic result17 : keyidt

logic result18 : keylengtht

logic contents__split_fields19 : issueridt

logic contents__split_fields20 : namecountt

logic contents__split_fields21 : (int,character) farray

logic contents__split_fields22 : serialnumbert

logic contents__split_fields23 : yearst

logic contents__split_fields24 : monthst

logic contents__split_fields25 : dayst

logic contents__split_fields26 : millisecst

logic contents__split_fields27 : yearst

logic contents__split_fields28 : monthst

logic contents__split_fields29 : dayst

logic contents__split_fields30 : millisecst

logic contents__split_fields31 : algorithmt

logic contents__split_fields32 : issueridt

logic contents__split_fields33 : namecountt

logic contents__split_fields34 : (int,character) farray

logic contents__split_fields35 : algorithmt

logic contents__split_fields36 : keyidt

logic contents__split_fields37 : keylengtht

logic result19 : issueridt

logic result20 : namecountt

logic result21 : (int,character) farray

logic result22 : serialnumbert

logic result23 : yearst

logic result24 : monthst

logic result25 : dayst

logic result26 : millisecst

logic result27 : yearst

logic result28 : monthst

logic result29 : dayst

logic result30 : millisecst

logic result31 : algorithmt

logic result32 : issueridt

logic result33 : namecountt

logic result34 : (int,character) farray

logic result35 : algorithmt

logic result36 : keyidt

logic result37 : keylengtht

logic contents__split_fields38 : issueridt

logic contents__split_fields39 : namecountt

logic contents__split_fields40 : (int,character) farray

logic contents__split_fields41 : serialnumbert

logic contents__split_fields42 : yearst

logic contents__split_fields43 : monthst

logic contents__split_fields44 : dayst

logic contents__split_fields45 : millisecst

logic contents__split_fields46 : yearst

logic contents__split_fields47 : monthst

logic contents__split_fields48 : dayst

logic contents__split_fields49 : millisecst

logic contents__split_fields50 : algorithmt

logic contents__split_fields51 : issueridt

logic contents__split_fields52 : namecountt

logic contents__split_fields53 : (int,character) farray

logic contents__split_fields54 : algorithmt

logic contents__split_fields55 : keyidt

logic contents__split_fields56 : keylengtht

logic result38 : issueridt

logic result39 : namecountt

logic result40 : (int,character) farray

logic result41 : serialnumbert

logic result42 : yearst

logic result43 : monthst

logic result44 : dayst

logic result45 : millisecst

logic result46 : yearst

logic result47 : monthst

logic result48 : dayst

logic result49 : millisecst

logic result50 : algorithmt

logic result51 : issueridt

logic result52 : namecountt

logic result53 : (int,character) farray

logic result54 : algorithmt

logic result55 : keyidt

logic result56 : keylengtht

logic contents__split_fields57 : issueridt

logic contents__split_fields58 : namecountt

logic contents__split_fields59 : (int,character) farray

logic contents__split_fields60 : serialnumbert

logic contents__split_fields61 : yearst

logic contents__split_fields62 : monthst

logic contents__split_fields63 : dayst

logic contents__split_fields64 : millisecst

logic contents__split_fields65 : yearst

logic contents__split_fields66 : monthst

logic contents__split_fields67 : dayst

logic contents__split_fields68 : millisecst

logic contents__split_fields69 : algorithmt

logic contents__split_fields70 : issueridt

logic contents__split_fields71 : namecountt

logic contents__split_fields72 : (int,character) farray

logic contents__split_fields73 : algorithmt

logic contents__split_fields74 : keyidt

logic contents__split_fields75 : keylengtht

logic result57 : issueridt

logic result58 : namecountt

logic result59 : (int,character) farray

logic result60 : serialnumbert

logic result61 : yearst

logic result62 : monthst

logic result63 : dayst

logic result64 : millisecst

logic result65 : yearst

logic result66 : monthst

logic result67 : dayst

logic result68 : millisecst

logic result69 : algorithmt

logic result70 : issueridt

logic result71 : namecountt

logic result72 : (int,character) farray

logic result73 : algorithmt

logic result74 : keyidt

logic result75 : keylengtht

logic contents__split_fields76 : issueridt

logic contents__split_fields77 : namecountt

logic contents__split_fields78 : (int,character) farray

logic contents__split_fields79 : serialnumbert

logic contents__split_fields80 : yearst

logic contents__split_fields81 : monthst

logic contents__split_fields82 : dayst

logic contents__split_fields83 : millisecst

logic contents__split_fields84 : yearst

logic contents__split_fields85 : monthst

logic contents__split_fields86 : dayst

logic contents__split_fields87 : millisecst

logic contents__split_fields88 : algorithmt

logic contents__split_fields89 : issueridt

logic contents__split_fields90 : namecountt

logic contents__split_fields91 : (int,character) farray

logic contents__split_fields92 : algorithmt

logic contents__split_fields93 : keyidt

logic contents__split_fields94 : keylengtht

logic result76 : issueridt

logic result77 : namecountt

logic result78 : (int,character) farray

logic result79 : serialnumbert

logic result80 : yearst

logic result81 : monthst

logic result82 : dayst

logic result83 : millisecst

logic result84 : yearst

logic result85 : monthst

logic result86 : dayst

logic result87 : millisecst

logic result88 : algorithmt

logic result89 : issueridt

logic result90 : namecountt

logic result91 : (int,character) farray

logic result92 : algorithmt

logic result93 : keyidt

logic result94 : keylengtht

logic contents__split_fields95 : issueridt

logic contents__split_fields96 : namecountt

logic contents__split_fields97 : (int,character) farray

logic contents__split_fields98 : serialnumbert

logic contents__split_fields99 : yearst

logic contents__split_fields100 : monthst

logic contents__split_fields101 : dayst

logic contents__split_fields102 : millisecst

logic contents__split_fields103 : yearst

logic contents__split_fields104 : monthst

logic contents__split_fields105 : dayst

logic contents__split_fields106 : millisecst

logic contents__split_fields107 : algorithmt

logic contents__split_fields108 : issueridt

logic contents__split_fields109 : namecountt

logic contents__split_fields110 : (int,character) farray

logic contents__split_fields111 : algorithmt

logic contents__split_fields112 : keyidt

logic contents__split_fields113 : keylengtht

logic result95 : issueridt

logic result96 : namecountt

logic result97 : (int,character) farray

logic result98 : serialnumbert

logic result99 : yearst

logic result100 : monthst

logic result101 : dayst

logic result102 : millisecst

logic result103 : yearst

logic result104 : monthst

logic result105 : dayst

logic result106 : millisecst

logic result107 : algorithmt

logic result108 : issueridt

logic result109 : namecountt

logic result110 : (int,character) farray

logic result111 : algorithmt

logic result112 : keyidt

logic result113 : keylengtht

logic contents__split_fields114 : issueridt

logic contents__split_fields115 : namecountt

logic contents__split_fields116 : (int,character) farray

logic contents__split_fields117 : serialnumbert

logic contents__split_fields118 : yearst

logic contents__split_fields119 : monthst

logic contents__split_fields120 : dayst

logic contents__split_fields121 : millisecst

logic contents__split_fields122 : yearst

logic contents__split_fields123 : monthst

logic contents__split_fields124 : dayst

logic contents__split_fields125 : millisecst

logic contents__split_fields126 : algorithmt

logic contents__split_fields127 : issueridt

logic contents__split_fields128 : namecountt

logic contents__split_fields129 : (int,character) farray

logic contents__split_fields130 : algorithmt

logic contents__split_fields131 : keyidt

logic contents__split_fields132 : keylengtht

axiom H : ((((result = contents__split_fields) and
  ((result1 = contents__split_fields1) and
  (result2 = contents__split_fields2))) and
  (result3 = contents__split_fields3)) and
  (((result4 = contents__split_fields4) and
  ((result5 = contents__split_fields5) and
  ((result6 = contents__split_fields6) and
  (result7 = contents__split_fields7)))) and
  (((result8 = contents__split_fields8) and
  ((result9 = contents__split_fields9) and
  ((result10 = contents__split_fields10) and
  (result11 = contents__split_fields11)))) and
  ((result12 = contents__split_fields12) and
  (((result13 = contents__split_fields13) and
  ((result14 = contents__split_fields14) and
  (result15 = contents__split_fields15))) and
  ((result16 = contents__split_fields16) and
  ((result17 = contents__split_fields17) and
  (result18 = contents__split_fields18))))))))

axiom H1 : ((((contents__split_fields19 = localcontents__split_fields23) and
  ((contents__split_fields20 = localcontents__split_fields24) and
  (contents__split_fields21 = localcontents__split_fields25))) and
  (contents__split_fields22 = contents__split_fields3)) and
  (((contents__split_fields23 = contents__split_fields4) and
  ((contents__split_fields24 = contents__split_fields5) and
  ((contents__split_fields25 = contents__split_fields6) and
  (contents__split_fields26 = contents__split_fields7)))) and
  (((contents__split_fields27 = contents__split_fields8) and
  ((contents__split_fields28 = contents__split_fields9) and
  ((contents__split_fields29 = contents__split_fields10) and
  (contents__split_fields30 = contents__split_fields11)))) and
  ((contents__split_fields31 = contents__split_fields12) and
  (((contents__split_fields32 = contents__split_fields13) and
  ((contents__split_fields33 = contents__split_fields14) and
  (contents__split_fields34 = contents__split_fields15))) and
  ((contents__split_fields35 = contents__split_fields16) and
  ((contents__split_fields36 = contents__split_fields17) and
  (contents__split_fields37 = contents__split_fields18))))))))

axiom H2 : (to_rep7(o) = to_rep(localcontents__split_fields21))

axiom H3 : ((contents__split_fields19 = o1) and
  ((contents__split_fields20 = o2) and (contents__split_fields21 = o3)))

axiom H4 : (o = o4)

axiom H5 : (o5 = o1)

axiom H6 : (o6 = o2)

axiom H7 : (o7 = o3)

axiom H8 : (o8 = o4)

axiom H9 : ((((o9 = o5) and ((o10 = o6) and (o11 = o7))) and (o12 = o8)) and
  (((o13 = contents__split_fields23) and
  ((o14 = contents__split_fields24) and ((o15 = contents__split_fields25) and
  (o16 = contents__split_fields26)))) and
  (((o17 = contents__split_fields27) and
  ((o18 = contents__split_fields28) and ((o19 = contents__split_fields29) and
  (o20 = contents__split_fields30)))) and
  ((o21 = contents__split_fields31) and
  (((o22 = contents__split_fields32) and
  ((o23 = contents__split_fields33) and
  (o24 = contents__split_fields34))) and
  ((o25 = contents__split_fields35) and ((o26 = contents__split_fields36) and
  (o27 = contents__split_fields37))))))))

axiom H10 : ((((temp___1746 = o9) and ((temp___17461 = o10) and
  (temp___17462 = o11))) and (temp___17463 = o12)) and
  (((temp___17464 = o13) and ((temp___17465 = o14) and
  ((temp___17466 = o15) and (temp___17467 = o16)))) and
  (((temp___17468 = o17) and ((temp___17469 = o18) and
  ((temp___174610 = o19) and (temp___174611 = o20)))) and
  ((temp___174612 = o21) and (((temp___174613 = o22) and
  ((temp___174614 = o23) and (temp___174615 = o24))) and
  ((temp___174616 = o25) and ((temp___174617 = o26) and
  (temp___174618 = o27))))))))

axiom H11 : ((((result19 = contents__split_fields19) and
  ((result20 = contents__split_fields20) and
  (result21 = contents__split_fields21))) and
  (result22 = contents__split_fields22)) and
  (((result23 = contents__split_fields23) and
  ((result24 = contents__split_fields24) and
  ((result25 = contents__split_fields25) and
  (result26 = contents__split_fields26)))) and
  (((result27 = contents__split_fields27) and
  ((result28 = contents__split_fields28) and
  ((result29 = contents__split_fields29) and
  (result30 = contents__split_fields30)))) and
  ((result31 = contents__split_fields31) and
  (((result32 = contents__split_fields32) and
  ((result33 = contents__split_fields33) and
  (result34 = contents__split_fields34))) and
  ((result35 = contents__split_fields35) and
  ((result36 = contents__split_fields36) and
  (result37 = contents__split_fields37))))))))

axiom H12 : ((((contents__split_fields38 = temp___1746) and
  ((contents__split_fields39 = temp___17461) and
  (contents__split_fields40 = temp___17462))) and
  (contents__split_fields41 = temp___17463)) and
  (((contents__split_fields42 = temp___17464) and
  ((contents__split_fields43 = temp___17465) and
  ((contents__split_fields44 = temp___17466) and
  (contents__split_fields45 = temp___17467)))) and
  (((contents__split_fields46 = temp___17468) and
  ((contents__split_fields47 = temp___17469) and
  ((contents__split_fields48 = temp___174610) and
  (contents__split_fields49 = temp___174611)))) and
  ((contents__split_fields50 = temp___174612) and
  (((contents__split_fields51 = temp___174613) and
  ((contents__split_fields52 = temp___174614) and
  (contents__split_fields53 = temp___174615))) and
  ((contents__split_fields54 = temp___174616) and
  ((contents__split_fields55 = temp___174617) and
  (contents__split_fields56 = temp___174618))))))))

axiom H13 : (to_rep4(o28) = to_rep4(localcontents__split_fields22))

axiom H14 : ((((o29 = contents__split_fields38) and
  ((o30 = contents__split_fields39) and
  (o31 = contents__split_fields40))) and
  (o32 = contents__split_fields41)) and
  (((o33 = contents__split_fields42) and
  ((o34 = contents__split_fields43) and ((o35 = contents__split_fields44) and
  (o36 = contents__split_fields45)))) and
  (((o37 = contents__split_fields46) and
  ((o38 = contents__split_fields47) and ((o39 = contents__split_fields48) and
  (o40 = contents__split_fields49)))) and ((o41 = o28) and
  (((o42 = contents__split_fields51) and
  ((o43 = contents__split_fields52) and
  (o44 = contents__split_fields53))) and
  ((o45 = contents__split_fields54) and ((o46 = contents__split_fields55) and
  (o47 = contents__split_fields56))))))))

axiom H15 : ((((temp___1748 = o29) and ((temp___17481 = o30) and
  (temp___17482 = o31))) and (temp___17483 = o32)) and
  (((temp___17484 = o33) and ((temp___17485 = o34) and
  ((temp___17486 = o35) and (temp___17487 = o36)))) and
  (((temp___17488 = o37) and ((temp___17489 = o38) and
  ((temp___174810 = o39) and (temp___174811 = o40)))) and
  ((temp___174812 = o41) and (((temp___174813 = o42) and
  ((temp___174814 = o43) and (temp___174815 = o44))) and
  ((temp___174816 = o45) and ((temp___174817 = o46) and
  (temp___174818 = o47))))))))

axiom H16 : ((((result38 = contents__split_fields38) and
  ((result39 = contents__split_fields39) and
  (result40 = contents__split_fields40))) and
  (result41 = contents__split_fields41)) and
  (((result42 = contents__split_fields42) and
  ((result43 = contents__split_fields43) and
  ((result44 = contents__split_fields44) and
  (result45 = contents__split_fields45)))) and
  (((result46 = contents__split_fields46) and
  ((result47 = contents__split_fields47) and
  ((result48 = contents__split_fields48) and
  (result49 = contents__split_fields49)))) and
  ((result50 = contents__split_fields50) and
  (((result51 = contents__split_fields51) and
  ((result52 = contents__split_fields52) and
  (result53 = contents__split_fields53))) and
  ((result54 = contents__split_fields54) and
  ((result55 = contents__split_fields55) and
  (result56 = contents__split_fields56))))))))

axiom H17 : ((((contents__split_fields57 = temp___1748) and
  ((contents__split_fields58 = temp___17481) and
  (contents__split_fields59 = temp___17482))) and
  (contents__split_fields60 = temp___17483)) and
  (((contents__split_fields61 = temp___17484) and
  ((contents__split_fields62 = temp___17485) and
  ((contents__split_fields63 = temp___17486) and
  (contents__split_fields64 = temp___17487)))) and
  (((contents__split_fields65 = temp___17488) and
  ((contents__split_fields66 = temp___17489) and
  ((contents__split_fields67 = temp___174810) and
  (contents__split_fields68 = temp___174811)))) and
  ((contents__split_fields69 = temp___174812) and
  (((contents__split_fields70 = temp___174813) and
  ((contents__split_fields71 = temp___174814) and
  (contents__split_fields72 = temp___174815))) and
  ((contents__split_fields73 = temp___174816) and
  ((contents__split_fields74 = temp___174817) and
  (contents__split_fields75 = temp___174818))))))))

axiom H18 : ((((result57 = contents__split_fields57) and
  ((result58 = contents__split_fields58) and
  (result59 = contents__split_fields59))) and
  (result60 = contents__split_fields60)) and
  (((result61 = contents__split_fields61) and
  ((result62 = contents__split_fields62) and
  ((result63 = contents__split_fields63) and
  (result64 = contents__split_fields64)))) and
  (((result65 = contents__split_fields65) and
  ((result66 = contents__split_fields66) and
  ((result67 = contents__split_fields67) and
  (result68 = contents__split_fields68)))) and
  ((result69 = contents__split_fields69) and
  (((result70 = contents__split_fields70) and
  ((result71 = contents__split_fields71) and
  (result72 = contents__split_fields72))) and
  ((result73 = contents__split_fields73) and
  ((result74 = contents__split_fields74) and
  (result75 = contents__split_fields75))))))))

axiom H19 : ((((contents__split_fields76 = contents__split_fields57) and
  ((contents__split_fields77 = contents__split_fields58) and
  (contents__split_fields78 = contents__split_fields59))) and
  (contents__split_fields79 = contents__split_fields60)) and
  (((contents__split_fields80 = contents__split_fields61) and
  ((contents__split_fields81 = contents__split_fields62) and
  ((contents__split_fields82 = contents__split_fields63) and
  (contents__split_fields83 = contents__split_fields64)))) and
  (((contents__split_fields84 = contents__split_fields65) and
  ((contents__split_fields85 = contents__split_fields66) and
  ((contents__split_fields86 = contents__split_fields67) and
  (contents__split_fields87 = contents__split_fields68)))) and
  ((contents__split_fields88 = contents__split_fields69) and
  (((contents__split_fields89 = localcontents__split_fields36) and
  ((contents__split_fields90 = localcontents__split_fields37) and
  (contents__split_fields91 = localcontents__split_fields38))) and
  ((contents__split_fields92 = contents__split_fields73) and
  ((contents__split_fields93 = contents__split_fields74) and
  (contents__split_fields94 = contents__split_fields75))))))))

axiom H20 : (to_rep4(o48) = to_rep4(localcontents__split_fields39))

axiom H21 : (o48 = o49)

axiom H22 : (contents__split_fields93 = o50)

axiom H23 : (contents__split_fields94 = o51)

axiom H24 : (o52 = o49)

axiom H25 : (o53 = o50)

axiom H26 : (o54 = o51)

axiom H27 : ((((o55 = contents__split_fields76) and
  ((o56 = contents__split_fields77) and
  (o57 = contents__split_fields78))) and
  (o58 = contents__split_fields79)) and
  (((o59 = contents__split_fields80) and
  ((o60 = contents__split_fields81) and ((o61 = contents__split_fields82) and
  (o62 = contents__split_fields83)))) and
  (((o63 = contents__split_fields84) and
  ((o64 = contents__split_fields85) and ((o65 = contents__split_fields86) and
  (o66 = contents__split_fields87)))) and
  ((o67 = contents__split_fields88) and
  (((o68 = contents__split_fields89) and
  ((o69 = contents__split_fields90) and
  (o70 = contents__split_fields91))) and ((o71 = o52) and ((o72 = o53) and
  (o73 = o54))))))))

axiom H28 : ((((temp___1753 = o55) and ((temp___17531 = o56) and
  (temp___17532 = o57))) and (temp___17533 = o58)) and
  (((temp___17534 = o59) and ((temp___17535 = o60) and
  ((temp___17536 = o61) and (temp___17537 = o62)))) and
  (((temp___17538 = o63) and ((temp___17539 = o64) and
  ((temp___175310 = o65) and (temp___175311 = o66)))) and
  ((temp___175312 = o67) and (((temp___175313 = o68) and
  ((temp___175314 = o69) and (temp___175315 = o70))) and
  ((temp___175316 = o71) and ((temp___175317 = o72) and
  (temp___175318 = o73))))))))

axiom H29 : ((((result76 = contents__split_fields76) and
  ((result77 = contents__split_fields77) and
  (result78 = contents__split_fields78))) and
  (result79 = contents__split_fields79)) and
  (((result80 = contents__split_fields80) and
  ((result81 = contents__split_fields81) and
  ((result82 = contents__split_fields82) and
  (result83 = contents__split_fields83)))) and
  (((result84 = contents__split_fields84) and
  ((result85 = contents__split_fields85) and
  ((result86 = contents__split_fields86) and
  (result87 = contents__split_fields87)))) and
  ((result88 = contents__split_fields88) and
  (((result89 = contents__split_fields89) and
  ((result90 = contents__split_fields90) and
  (result91 = contents__split_fields91))) and
  ((result92 = contents__split_fields92) and
  ((result93 = contents__split_fields93) and
  (result94 = contents__split_fields94))))))))

axiom H30 : ((((contents__split_fields95 = temp___1753) and
  ((contents__split_fields96 = temp___17531) and
  (contents__split_fields97 = temp___17532))) and
  (contents__split_fields98 = temp___17533)) and
  (((contents__split_fields99 = temp___17534) and
  ((contents__split_fields100 = temp___17535) and
  ((contents__split_fields101 = temp___17536) and
  (contents__split_fields102 = temp___17537)))) and
  (((contents__split_fields103 = temp___17538) and
  ((contents__split_fields104 = temp___17539) and
  ((contents__split_fields105 = temp___175310) and
  (contents__split_fields106 = temp___175311)))) and
  ((contents__split_fields107 = temp___175312) and
  (((contents__split_fields108 = temp___175313) and
  ((contents__split_fields109 = temp___175314) and
  (contents__split_fields110 = temp___175315))) and
  ((contents__split_fields111 = temp___175316) and
  ((contents__split_fields112 = temp___175317) and
  (contents__split_fields113 = temp___175318))))))))

axiom H31 : (to_rep5(o74) = to_rep(localcontents__split_fields40))

axiom H32 : (contents__split_fields111 = o75)

axiom H33 : (o74 = o76)

axiom H34 : (contents__split_fields113 = o77)

axiom H35 : (o78 = o75)

axiom H36 : (o79 = o76)

axiom H37 : (o80 = o77)

axiom H38 : ((((o81 = contents__split_fields95) and
  ((o82 = contents__split_fields96) and
  (o83 = contents__split_fields97))) and
  (o84 = contents__split_fields98)) and
  (((o85 = contents__split_fields99) and
  ((o86 = contents__split_fields100) and
  ((o87 = contents__split_fields101) and
  (o88 = contents__split_fields102)))) and
  (((o89 = contents__split_fields103) and
  ((o90 = contents__split_fields104) and
  ((o91 = contents__split_fields105) and
  (o92 = contents__split_fields106)))) and
  ((o93 = contents__split_fields107) and
  (((o94 = contents__split_fields108) and
  ((o95 = contents__split_fields109) and
  (o96 = contents__split_fields110))) and ((o97 = o78) and ((o98 = o79) and
  (o99 = o80))))))))

axiom H39 : ((((temp___1756 = o81) and ((temp___17561 = o82) and
  (temp___17562 = o83))) and (temp___17563 = o84)) and
  (((temp___17564 = o85) and ((temp___17565 = o86) and
  ((temp___17566 = o87) and (temp___17567 = o88)))) and
  (((temp___17568 = o89) and ((temp___17569 = o90) and
  ((temp___175610 = o91) and (temp___175611 = o92)))) and
  ((temp___175612 = o93) and (((temp___175613 = o94) and
  ((temp___175614 = o95) and (temp___175615 = o96))) and
  ((temp___175616 = o97) and ((temp___175617 = o98) and
  (temp___175618 = o99))))))))

axiom H40 : ((((result95 = contents__split_fields95) and
  ((result96 = contents__split_fields96) and
  (result97 = contents__split_fields97))) and
  (result98 = contents__split_fields98)) and
  (((result99 = contents__split_fields99) and
  ((result100 = contents__split_fields100) and
  ((result101 = contents__split_fields101) and
  (result102 = contents__split_fields102)))) and
  (((result103 = contents__split_fields103) and
  ((result104 = contents__split_fields104) and
  ((result105 = contents__split_fields105) and
  (result106 = contents__split_fields106)))) and
  ((result107 = contents__split_fields107) and
  (((result108 = contents__split_fields108) and
  ((result109 = contents__split_fields109) and
  (result110 = contents__split_fields110))) and
  ((result111 = contents__split_fields111) and
  ((result112 = contents__split_fields112) and
  (result113 = contents__split_fields113))))))))

axiom H41 : ((((contents__split_fields114 = temp___1756) and
  ((contents__split_fields115 = temp___17561) and
  (contents__split_fields116 = temp___17562))) and
  (contents__split_fields117 = temp___17563)) and
  (((contents__split_fields118 = temp___17564) and
  ((contents__split_fields119 = temp___17565) and
  ((contents__split_fields120 = temp___17566) and
  (contents__split_fields121 = temp___17567)))) and
  (((contents__split_fields122 = temp___17568) and
  ((contents__split_fields123 = temp___17569) and
  ((contents__split_fields124 = temp___175610) and
  (contents__split_fields125 = temp___175611)))) and
  ((contents__split_fields126 = temp___175612) and
  (((contents__split_fields127 = temp___175613) and
  ((contents__split_fields128 = temp___175614) and
  (contents__split_fields129 = temp___175615))) and
  ((contents__split_fields130 = temp___175616) and
  ((contents__split_fields131 = temp___175617) and
  (contents__split_fields132 = temp___175618))))))))

axiom H42 : (0 <= to_rep(localcontents__split_fields41))

axiom H43 : (to_rep(localcontents__split_fields41) <= 128)

 (* File "cryptotypes.ads", line 79, characters 0-0 *)
goal WP_parameter_def : in_range7(to_rep(localcontents__split_fields41))
