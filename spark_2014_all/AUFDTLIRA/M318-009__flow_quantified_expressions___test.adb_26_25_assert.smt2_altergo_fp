(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "test.adb", line 2, characters 0-0 *)
goal WP_parameter_def :
  (forall table:(int,integer) farray. forall i:int.
  forall temp_table:(int,integer) farray. forall i1:int. forall o:integer.
  forall o1:(int,integer) farray. forall o2:integer.
  forall o3:(int,integer) farray. forall o4:integer.
  forall o5:(int,integer) farray. forall o6:integer.
  forall o7:(int,integer) farray. forall o8:integer.
  forall o9:(int,integer) farray. forall o10:integer.
  forall o11:(int,integer) farray. forall o12:integer.
  forall o13:(int,integer) farray. forall o14:integer.
  forall o15:(int,integer) farray. forall o16:integer.
  forall o17:(int,integer) farray. forall o18:integer.
  forall o19:(int,integer) farray. forall o20:integer.
  forall o21:(int,integer) farray. forall o22:integer.
  forall o23:(int,integer) farray. forall o24:integer.
  forall o25:(int,integer) farray. forall o26:integer.
  forall o27:(int,integer) farray. forall o28:integer.
  forall o29:(int,integer) farray. forall o30:integer.
  forall o31:(int,integer) farray. forall o32:integer.
  forall o33:(int,integer) farray. forall o34:integer.
  forall o35:(int,integer) farray. forall o36:integer.
  forall o37:(int,integer) farray. forall result:int. forall i2:int.
  forall result1:(int,integer) farray. forall table1:(int,integer) farray.
  forall result2:int. forall i3:int. forall result3:(int,integer) farray.
  forall table2:(int,integer) farray. forall result4:int. forall i4:int.
  forall result5:(int,integer) farray. forall table3:(int,integer) farray.
  forall result6:int. forall i5:int. forall result7:(int,integer) farray.
  forall table4:(int,integer) farray. forall result8:int. forall i6:int.
  forall result9:(int,integer) farray. forall table5:(int,integer) farray.
  forall result10:int. forall i7:int. forall result11:(int,integer) farray.
  forall table6:(int,integer) farray. forall result12:int. forall i8:int.
  forall result13:(int,integer) farray. forall table7:(int,integer) farray.
  forall result14:int. forall i9:int. forall result15:(int,integer) farray.
  forall table8:(int,integer) farray. forall result16:int. forall i10:int.
  forall result17:(int,integer) farray. forall table9:(int,integer) farray.
  forall result18:bool. forall result19:(int,integer) farray.
  forall table10:(int,integer) farray. forall result20:int. forall i11:int.
  forall result21:(int,integer) farray.
  forall temp_table1:(int,integer) farray. forall result22:int.
  forall i12:int. forall result23:(int,integer) farray.
  forall temp_table2:(int,integer) farray. forall result24:int.
  forall i13:int. forall result25:(int,integer) farray.
  forall temp_table3:(int,integer) farray. forall result26:int.
  forall i14:int. forall result27:(int,integer) farray.
  forall temp_table4:(int,integer) farray. forall result28:int.
  forall i15:int. forall result29:(int,integer) farray.
  forall temp_table5:(int,integer) farray. forall result30:int.
  forall i16:int. forall result31:(int,integer) farray.
  forall temp_table6:(int,integer) farray. forall result32:int.
  forall i17:int. forall result33:(int,integer) farray.
  forall temp_table7:(int,integer) farray. forall result34:int.
  forall i18:int. forall result35:(int,integer) farray.
  forall temp_table8:(int,integer) farray. forall result36:int.
  forall i19:int. forall result37:(int,integer) farray.
  forall temp_table9:(int,integer) farray. ((((({ int__content = result } = {
  int__content = i }) and (i2 = 9)) and ((((to_rep(o) = i2) and
  (o1 = (table[(10 - i2) <- o]))) and (({ map__content = result1 } = {
  map__content = table }) and (table1 = o1))) and (((i2 = result2) and
  (i3 = 8)) and ((((to_rep(o2) = i3) and
  (o3 = (table1[(10 - i3) <- o2]))) and ((table1 = result3) and
  (table2 = o3))) and (((i3 = result4) and (i4 = 7)) and
  ((((to_rep(o4) = i4) and (o5 = (table2[(10 - i4) <- o4]))) and
  ((table2 = result5) and (table3 = o5))) and (((i4 = result6) and
  (i5 = 6)) and ((((to_rep(o6) = i5) and
  (o7 = (table3[(10 - i5) <- o6]))) and ((table3 = result7) and
  (table4 = o7))) and (((i5 = result8) and (i6 = 5)) and
  ((((to_rep(o8) = i6) and (o9 = (table4[(10 - i6) <- o8]))) and
  ((table4 = result9) and (table5 = o9))) and (((i6 = result10) and
  (i7 = 4)) and ((((to_rep(o10) = i7) and
  (o11 = (table5[(10 - i7) <- o10]))) and ((table5 = result11) and
  (table6 = o11))) and (((i7 = result12) and (i8 = 3)) and
  ((((to_rep(o12) = i8) and (o13 = (table6[(10 - i8) <- o12]))) and
  ((table6 = result13) and (table7 = o13))) and (((i8 = result14) and
  (i9 = 2)) and ((((to_rep(o14) = i9) and
  (o15 = (table7[(10 - i9) <- o14]))) and ((table7 = result15) and
  (table8 = o15))) and (((i9 = result16) and (i10 = 1)) and
  (((to_rep(o16) = i10) and (o17 = (table8[(10 - i10) <- o16]))) and
  ((result17 = table8) and (table9 = o17)))))))))))))))))))) and
  ((exists x:int. (((1 <= x) and (x <= 9)) and (x = to_rep((table9[x]))))) and
  (((result18 = true) <->
  (forall x:int. (((1 <= x) and (x <= 9)) -> (0 <  to_rep((table9[x])))))) and
  (((result18 = true) and (((to_rep(o18) = 0) and
  (o19 = (table9[5 <- o18]))) and ((result19 = table9) and
  (table10 = o19)))) or ((not (result18 = true)) and
  (table10 = table9)))))) -> ((((result20 = i1) and (i11 = 1)) and
  ((((to_rep(o20) = i11) and (o21 = (temp_table[i11 <- o20]))) and
  ((result21 = temp_table) and (temp_table1 = o21))) and
  (((result22 = i11) and (i12 = 2)) and ((((to_rep(o22) = i12) and
  (o23 = (temp_table1[i12 <- o22]))) and ((result23 = temp_table1) and
  (temp_table2 = o23))) and (((result24 = i12) and (i13 = 3)) and
  ((((to_rep(o24) = i13) and (o25 = (temp_table2[i13 <- o24]))) and
  ((result25 = temp_table2) and (temp_table3 = o25))) and
  (((result26 = i13) and (i14 = 4)) and ((((to_rep(o26) = i14) and
  (o27 = (temp_table3[i14 <- o26]))) and ((result27 = temp_table3) and
  (temp_table4 = o27))) and (((result28 = i14) and (i15 = 5)) and
  ((((to_rep(o28) = i15) and (o29 = (temp_table4[i15 <- o28]))) and
  ((result29 = temp_table4) and (temp_table5 = o29))) and
  (((result30 = i15) and (i16 = 6)) and ((((to_rep(o30) = i16) and
  (o31 = (temp_table5[i16 <- o30]))) and ((result31 = temp_table5) and
  (temp_table6 = o31))) and (((result32 = i16) and (i17 = 7)) and
  ((((to_rep(o32) = i17) and (o33 = (temp_table6[i17 <- o32]))) and
  ((result33 = temp_table6) and (temp_table7 = o33))) and
  (((result34 = i17) and (i18 = 8)) and ((((to_rep(o34) = i18) and
  (o35 = (temp_table7[i18 <- o34]))) and ((result35 = temp_table7) and
  (temp_table8 = o35))) and (((result36 = i18) and (i19 = 9)) and
  (((to_rep(o36) = i19) and (o37 = (temp_table8[i19 <- o36]))) and
  ((result37 = temp_table8) and (temp_table9 = o37)))))))))))))))))))) ->
  (forall x:int. (((1 <= x) and (x <= 9)) ->
  (not (to_rep((table10[x])) = to_rep((temp_table9[x])))))))))
