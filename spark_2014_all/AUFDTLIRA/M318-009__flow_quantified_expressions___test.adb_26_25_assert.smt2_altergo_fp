(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep((a[temp___idx_132])) = to_rep((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic table : (int,integer) farray

logic i : int

logic temp_table : (int,integer) farray

logic i1 : int

logic o : integer

logic o1 : (int,integer) farray

logic o2 : integer

logic o3 : (int,integer) farray

logic o4 : integer

logic o5 : (int,integer) farray

logic o6 : integer

logic o7 : (int,integer) farray

logic o8 : integer

logic o9 : (int,integer) farray

logic o10 : integer

logic o11 : (int,integer) farray

logic o12 : integer

logic o13 : (int,integer) farray

logic o14 : integer

logic o15 : (int,integer) farray

logic o16 : integer

logic o17 : (int,integer) farray

logic o18 : integer

logic o19 : (int,integer) farray

logic o20 : integer

logic o21 : (int,integer) farray

logic o22 : integer

logic o23 : (int,integer) farray

logic o24 : integer

logic o25 : (int,integer) farray

logic o26 : integer

logic o27 : (int,integer) farray

logic o28 : integer

logic o29 : (int,integer) farray

logic o30 : integer

logic o31 : (int,integer) farray

logic o32 : integer

logic o33 : (int,integer) farray

logic o34 : integer

logic o35 : (int,integer) farray

logic o36 : integer

logic o37 : (int,integer) farray

logic result : int

logic i2 : int

logic result1 : (int,integer) farray

logic table1 : (int,integer) farray

logic result2 : int

logic i3 : int

logic result3 : (int,integer) farray

logic table2 : (int,integer) farray

logic result4 : int

logic i4 : int

logic result5 : (int,integer) farray

logic table3 : (int,integer) farray

logic result6 : int

logic i5 : int

logic result7 : (int,integer) farray

logic table4 : (int,integer) farray

logic result8 : int

logic i6 : int

logic result9 : (int,integer) farray

logic table5 : (int,integer) farray

logic result10 : int

logic i7 : int

logic result11 : (int,integer) farray

logic table6 : (int,integer) farray

logic result12 : int

logic i8 : int

logic result13 : (int,integer) farray

logic table7 : (int,integer) farray

logic result14 : int

logic i9 : int

logic result15 : (int,integer) farray

logic table8 : (int,integer) farray

logic result16 : int

logic i10 : int

logic result17 : (int,integer) farray

logic table9 : (int,integer) farray

logic result18 : bool

logic result19 : (int,integer) farray

logic table10 : (int,integer) farray

logic result20 : int

logic i11 : int

logic result21 : (int,integer) farray

logic temp_table1 : (int,integer) farray

logic result22 : int

logic i12 : int

logic result23 : (int,integer) farray

logic temp_table2 : (int,integer) farray

logic result24 : int

logic i13 : int

logic result25 : (int,integer) farray

logic temp_table3 : (int,integer) farray

logic result26 : int

logic i14 : int

logic result27 : (int,integer) farray

logic temp_table4 : (int,integer) farray

logic result28 : int

logic i15 : int

logic result29 : (int,integer) farray

logic temp_table5 : (int,integer) farray

logic result30 : int

logic i16 : int

logic result31 : (int,integer) farray

logic temp_table6 : (int,integer) farray

logic result32 : int

logic i17 : int

logic result33 : (int,integer) farray

logic temp_table7 : (int,integer) farray

logic result34 : int

logic i18 : int

logic result35 : (int,integer) farray

logic temp_table8 : (int,integer) farray

logic result36 : int

logic i19 : int

logic result37 : (int,integer) farray

logic temp_table9 : (int,integer) farray

axiom H : (result = i)

axiom H1 : (i2 = 9)

axiom H2 : (to_rep(o) = i2)

axiom H3 : (o1 = (table[(10 - i2) <- o]))

axiom H4 : (result1 = table)

axiom H5 : (table1 = o1)

axiom H6 : (i2 = result2)

axiom H7 : (i3 = 8)

axiom H8 : (to_rep(o2) = i3)

axiom H9 : (o3 = (table1[(10 - i3) <- o2]))

axiom H10 : (table1 = result3)

axiom H11 : (table2 = o3)

axiom H12 : (i3 = result4)

axiom H13 : (i4 = 7)

axiom H14 : (to_rep(o4) = i4)

axiom H15 : (o5 = (table2[(10 - i4) <- o4]))

axiom H16 : (table2 = result5)

axiom H17 : (table3 = o5)

axiom H18 : (i4 = result6)

axiom H19 : (i5 = 6)

axiom H20 : (to_rep(o6) = i5)

axiom H21 : (o7 = (table3[(10 - i5) <- o6]))

axiom H22 : (table3 = result7)

axiom H23 : (table4 = o7)

axiom H24 : (i5 = result8)

axiom H25 : (i6 = 5)

axiom H26 : (to_rep(o8) = i6)

axiom H27 : (o9 = (table4[(10 - i6) <- o8]))

axiom H28 : (table4 = result9)

axiom H29 : (table5 = o9)

axiom H30 : (i6 = result10)

axiom H31 : (i7 = 4)

axiom H32 : (to_rep(o10) = i7)

axiom H33 : (o11 = (table5[(10 - i7) <- o10]))

axiom H34 : (table5 = result11)

axiom H35 : (table6 = o11)

axiom H36 : (i7 = result12)

axiom H37 : (i8 = 3)

axiom H38 : (to_rep(o12) = i8)

axiom H39 : (o13 = (table6[(10 - i8) <- o12]))

axiom H40 : (table6 = result13)

axiom H41 : (table7 = o13)

axiom H42 : (i8 = result14)

axiom H43 : (i9 = 2)

axiom H44 : (to_rep(o14) = i9)

axiom H45 : (o15 = (table7[(10 - i9) <- o14]))

axiom H46 : (table7 = result15)

axiom H47 : (table8 = o15)

axiom H48 : (i9 = result16)

axiom H49 : (i10 = 1)

axiom H50 : (to_rep(o16) = i10)

axiom H51 : (o17 = (table8[(10 - i10) <- o16]))

axiom H52 : (result17 = table8)

axiom H53 : (table9 = o17)

axiom H54 :
  (exists x:int. (((1 <= x) and (x <= 9)) and (x = to_rep((table9[x])))))

axiom H55 : ((result18 = true) <->
  (forall x:int. (((1 <= x) and (x <= 9)) -> (0 <  to_rep((table9[x]))))))

axiom H56 : ((result18 = true) -> (to_rep(o18) = 0))

axiom H57 : ((result18 = true) -> (o19 = (table9[5 <- o18])))

axiom H58 : ((result18 = true) -> (result19 = table9))

axiom H59 : ((result18 = true) -> (table10 = o19))

axiom H60 : ((not (result18 = true)) -> (table10 = table9))

axiom H61 : (result20 = i1)

axiom H62 : (i11 = 1)

axiom H63 : (to_rep(o20) = i11)

axiom H64 : (o21 = (temp_table[i11 <- o20]))

axiom H65 : (result21 = temp_table)

axiom H66 : (temp_table1 = o21)

axiom H67 : (result22 = i11)

axiom H68 : (i12 = 2)

axiom H69 : (to_rep(o22) = i12)

axiom H70 : (o23 = (temp_table1[i12 <- o22]))

axiom H71 : (result23 = temp_table1)

axiom H72 : (temp_table2 = o23)

axiom H73 : (result24 = i12)

axiom H74 : (i13 = 3)

axiom H75 : (to_rep(o24) = i13)

axiom H76 : (o25 = (temp_table2[i13 <- o24]))

axiom H77 : (result25 = temp_table2)

axiom H78 : (temp_table3 = o25)

axiom H79 : (result26 = i13)

axiom H80 : (i14 = 4)

axiom H81 : (to_rep(o26) = i14)

axiom H82 : (o27 = (temp_table3[i14 <- o26]))

axiom H83 : (result27 = temp_table3)

axiom H84 : (temp_table4 = o27)

axiom H85 : (result28 = i14)

axiom H86 : (i15 = 5)

axiom H87 : (to_rep(o28) = i15)

axiom H88 : (o29 = (temp_table4[i15 <- o28]))

axiom H89 : (result29 = temp_table4)

axiom H90 : (temp_table5 = o29)

axiom H91 : (result30 = i15)

axiom H92 : (i16 = 6)

axiom H93 : (to_rep(o30) = i16)

axiom H94 : (o31 = (temp_table5[i16 <- o30]))

axiom H95 : (result31 = temp_table5)

axiom H96 : (temp_table6 = o31)

axiom H97 : (result32 = i16)

axiom H98 : (i17 = 7)

axiom H99 : (to_rep(o32) = i17)

axiom H100 : (o33 = (temp_table6[i17 <- o32]))

axiom H101 : (result33 = temp_table6)

axiom H102 : (temp_table7 = o33)

axiom H103 : (result34 = i17)

axiom H104 : (i18 = 8)

axiom H105 : (to_rep(o34) = i18)

axiom H106 : (o35 = (temp_table7[i18 <- o34]))

axiom H107 : (result35 = temp_table7)

axiom H108 : (temp_table8 = o35)

axiom H109 : (result36 = i18)

axiom H110 : (i19 = 9)

axiom H111 : (to_rep(o36) = i19)

axiom H112 : (o37 = (temp_table8[i19 <- o36]))

axiom H113 : (result37 = temp_table8)

axiom H114 : (temp_table9 = o37)

logic x : int

axiom H115 : (1 <= x)

axiom H116 : (x <= 9)

 (* File "test.adb", line 2, characters 0-0 *)
goal WP_parameter_def :
  (not (to_rep((table10[x])) = to_rep((temp_table9[x]))))
