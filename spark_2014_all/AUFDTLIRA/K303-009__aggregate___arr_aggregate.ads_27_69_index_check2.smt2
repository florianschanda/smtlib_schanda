(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort ta2D1 0)
(declare-fun ta2D1qtint (ta2D1) Int)
(assert (forall ((i ta2D1)) (and (<= 1 (ta2D1qtint i)) (<= (ta2D1qtint i) 2))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (ta2D1 ta2D1) Bool)
(declare-const dummy1 ta2D1)
(declare-datatypes () ((ta2D1__ref (mk_ta2D1__ref (ta2D1__content ta2D1)))))
(define-fun ta2D1__ref___projection ((a ta2D1__ref)) ta2D1 (ta2D1__content a))
(declare-const dummy2 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int integer)))))))
(declare-fun slide1 ((Array Int (Array Int integer)) Int Int) (Array Int (Array Int integer)))
(assert (forall ((a (Array Int (Array Int integer)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int integer)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int integer))) (a__first Int) (a__last Int) (b (Array Int (Array Int integer))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 2 (select b (+ (- b__first a__first) temp___idx_155)) 1 2) true)))) true false))
(assert (forall ((a (Array Int (Array Int integer))) (b (Array Int (Array Int integer)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (bool_eq (select a temp___idx_155) 1 2 (select b (+ (- b__first a__first) temp___idx_155)) 1 2) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-fun temp_____aggregate_def_372 ((Array Int integer) (Array Int integer)) (Array Int (Array Int integer)))
(declare-fun temp_____aggregate_def_377 (Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_382 (Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_387 ((Array Int integer) (Array Int integer)) (Array Int (Array Int integer)))
(declare-fun temp_____aggregate_def_392 (Int) (Array Int integer))
(declare-fun temp_____aggregate_def_396 (Int) (Array Int integer))
(declare-fun temp_____aggregate_def_400 ((Array Int integer) (Array Int integer)) (Array Int (Array Int integer)))
(declare-fun temp_____aggregate_def_405 (Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_410 (Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_415 ((Array Int integer) (Array Int integer)) (Array Int (Array Int integer)))
(declare-fun temp_____aggregate_def_420 (Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_425 (Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_430 ((Array Int integer) (Array Int integer)) (Array Int (Array Int integer)))
(declare-fun temp_____aggregate_def_435 (Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_440 (Int Int) (Array Int integer))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 2))
(assert (forall ((temp___379 Int) (temp___380 Int)) (let ((temp___378 (temp_____aggregate_def_377 temp___379 temp___380))) (=> (and (dynamic_invariant temp___379 true true true true) (dynamic_invariant temp___380 true true true true)) (and (= (to_rep (select temp___378 1)) temp___379) (= (select temp___378 2) rliteral))))))
(assert (forall ((temp___374 (Array Int integer)) (temp___375 (Array Int integer))) (let ((temp___373 (temp_____aggregate_def_372 temp___374 temp___375))) (and (= (select temp___373 1) temp___374) (= (select temp___373 2) temp___375)))))
(assert (forall ((temp___384 Int) (temp___385 Int)) (let ((temp___383 (temp_____aggregate_def_382 temp___384 temp___385))) (=> (and (dynamic_invariant temp___384 true true true true) (dynamic_invariant temp___385 true true true true)) (and (= (to_rep (select temp___383 1)) temp___384) (= (select temp___383 2) rliteral))))))
(assert (forall ((temp___389 (Array Int integer)) (temp___390 (Array Int integer))) (let ((temp___388 (temp_____aggregate_def_387 temp___389 temp___390))) (forall ((temp___391 Int)) (ite (= temp___391 2) (= (select temp___388 temp___391) temp___389) (= (select temp___388 temp___391) temp___390))))))
(assert (forall ((temp___394 Int)) (=> (dynamic_invariant temp___394 true true true true) (forall ((temp___395 Int)) (= (to_rep (select (temp_____aggregate_def_392 temp___394) temp___395)) temp___394)))))
(assert (forall ((temp___398 Int)) (=> (dynamic_invariant temp___398 true true true true) (forall ((temp___399 Int)) (= (to_rep (select (temp_____aggregate_def_396 temp___398) temp___399)) temp___398)))))
(assert (forall ((temp___407 Int) (temp___408 Int)) (let ((temp___406 (temp_____aggregate_def_405 temp___407 temp___408))) (=> (and (dynamic_invariant temp___407 true true true true) (dynamic_invariant temp___408 true true true true)) (forall ((temp___409 Int)) (ite (= temp___409 1) (= (to_rep (select temp___406 temp___409)) temp___407) (= (to_rep (select temp___406 temp___409)) temp___408)))))))
(assert (forall ((temp___402 (Array Int integer)) (temp___403 (Array Int integer))) (let ((temp___401 (temp_____aggregate_def_400 temp___402 temp___403))) (and (= (select temp___401 1) temp___402) (= (select temp___401 2) temp___403)))))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 1))
(assert (forall ((temp___412 Int) (temp___413 Int)) (let ((temp___411 (temp_____aggregate_def_410 temp___412 temp___413))) (=> (and (dynamic_invariant temp___412 true true true true) (dynamic_invariant temp___413 true true true true)) (forall ((temp___414 Int)) (ite (= temp___414 1) (= (select temp___411 temp___414) rliteral1) (= (to_rep (select temp___411 temp___414)) temp___413)))))))
(assert (forall ((temp___417 (Array Int integer)) (temp___418 (Array Int integer))) (let ((temp___416 (temp_____aggregate_def_415 temp___417 temp___418))) (and (= (select temp___416 1) temp___417) (= (select temp___416 2) temp___418)))))
(assert (forall ((temp___422 Int) (temp___423 Int)) (let ((temp___421 (temp_____aggregate_def_420 temp___422 temp___423))) (=> (and (dynamic_invariant temp___422 true true true true) (dynamic_invariant temp___423 true true true true)) (forall ((temp___424 Int)) (ite (= temp___424 1) (= (select temp___421 temp___424) rliteral) (= (to_rep (select temp___421 temp___424)) temp___423)))))))
(assert (forall ((temp___427 Int) (temp___428 Int)) (let ((temp___426 (temp_____aggregate_def_425 temp___427 temp___428))) (=> (and (dynamic_invariant temp___427 true true true true) (dynamic_invariant temp___428 true true true true)) (forall ((temp___429 Int)) (ite (= temp___429 1) (= (select temp___426 temp___429) rliteral) (= (to_rep (select temp___426 temp___429)) temp___428)))))))
(assert (forall ((temp___432 (Array Int integer)) (temp___433 (Array Int integer))) (let ((temp___431 (temp_____aggregate_def_430 temp___432 temp___433))) (and (= (select temp___431 2) temp___432) (= (select temp___431 1) temp___433)))))
(assert (forall ((temp___437 Int) (temp___438 Int)) (let ((temp___436 (temp_____aggregate_def_435 temp___437 temp___438))) (=> (and (dynamic_invariant temp___437 true true true true) (dynamic_invariant temp___438 true true true true)) (forall ((temp___439 Int)) (ite (= temp___439 1) (= (select temp___436 temp___439) rliteral) (= (to_rep (select temp___436 temp___439)) temp___438)))))))
(assert (forall ((temp___442 Int) (temp___443 Int)) (let ((temp___441 (temp_____aggregate_def_440 temp___442 temp___443))) (=> (and (dynamic_invariant temp___442 true true true true) (dynamic_invariant temp___443 true true true true)) (forall ((temp___444 Int)) (ite (= temp___444 2) (= (select temp___441 temp___444) rliteral) (= (to_rep (select temp___441 temp___444)) temp___443)))))))
(declare-const one Int)
(declare-const a (Array Int (Array Int integer)))
(declare-const j Int)
(declare-const result (Array Int (Array Int integer)))
(declare-const a1 (Array Int (Array Int integer)))
(declare-const result1 (Array Int (Array Int integer)))
(declare-const a2 (Array Int (Array Int integer)))
(declare-const result2 (Array Int (Array Int integer)))
(declare-const a3 (Array Int (Array Int integer)))
(declare-const result3 (Array Int (Array Int integer)))
(declare-const a4 (Array Int (Array Int integer)))
(declare-const result4 (Array Int (Array Int integer)))
(declare-const a5 (Array Int (Array Int integer)))
(declare-const a6 (Array Int (Array Int integer)))
(declare-const a7 (Array Int (Array Int integer)))
(define-fun a8 () map__ref1 (mk_map__ref1 a))
(assert (in_range1 one))
(assert (in_range1 b))
(assert (= one 1))
(assert (=> (= b 1) (= (mk_map__ref1 result) a8)))
(assert (=> (= b 1) (= a1 (temp_____aggregate_def_372 (temp_____aggregate_def_377 one 2) (temp_____aggregate_def_382 one 2)))))
(assert (=> (not (= b 1)) (=> (= b 2) (= (mk_map__ref1 result1) a8))))
(assert (=> (not (= b 1)) (=> (= b 2) (= a2 (temp_____aggregate_def_387 (temp_____aggregate_def_392 one) (temp_____aggregate_def_396 one))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= (mk_map__ref1 result2) a8)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (= b 3) (= a3 (temp_____aggregate_def_400 (temp_____aggregate_def_405 one one) (temp_____aggregate_def_410 1 one)))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= (mk_map__ref1 result3) a8))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (= b 4) (= a4 (temp_____aggregate_def_415 (temp_____aggregate_def_420 2 one) (temp_____aggregate_def_425 2 one))))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= (mk_map__ref1 result4) a8))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= a5 (temp_____aggregate_def_430 (temp_____aggregate_def_435 2 one) (temp_____aggregate_def_440 2 one))))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (=> (not (= b 4)) (= a4 a5))))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (=> (not (= b 3)) (= a3 a4)))))
(assert (=> (not (= b 1)) (=> (not (= b 2)) (= a2 a3))))
(assert (=> (not (= b 1)) (= a1 a2)))
(assert (= a1 a6))
(assert (= a7 a1))
(assert (not (= b 1)))
(assert (not (= b 2)))
(assert (not (= b 3)))
(assert (= b 4))
(assert (<= 1 j))
(assert (<= j 2))
(assert (not (<= 1 one)))
(check-sat)
(exit)
