(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (positive positive) Bool)
(declare-const dummy positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-fun found_none (Int) Bool)
(declare-fun found_none__function_guard (Bool Int) Bool)
(declare-sort fruits 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 9)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (fruits fruits) Bool)
(declare-const dummy2 fruits)
(declare-datatypes () ((fruits__ref (mk_fruits__ref (fruits__content fruits)))))
(define-fun fruits__ref___projection ((a fruits__ref)) fruits (fruits__content a))
(define-fun dynamic_invariant ((temp___expr_268 Int) (temp___is_init_264 Bool) (temp___skip_constant_265 Bool) (temp___do_toplevel_266 Bool) (temp___do_typ_inv_267 Bool)) Bool (=> (or (= temp___is_init_264 true) (<= 0 9)) (in_range3 temp___expr_268)))
(assert true)
(assert (forall ((fruit Int)) (! (= (= (found_none fruit) true) (= fruit 0)) :pattern ((found_none fruit)))))
(declare-fun to_rep1 (fruits) Int)
(declare-fun of_rep1 (Int) fruits)
(assert (forall ((x fruits)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x fruits)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int fruits))))))
(declare-fun slide ((Array Int fruits) Int Int) (Array Int fruits))
(assert (forall ((a (Array Int fruits))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int fruits))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int fruits)) (a__first Int) (a__last Int) (b (Array Int fruits)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep1 (select a temp___idx_156)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_156))))))) true false))
(assert (forall ((a (Array Int fruits)) (b (Array Int fruits))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_156 Int)) (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last)) (= (to_rep1 (select a temp___idx_156)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_156)))))))))))
(declare-sort item_t 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 9)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (item_t item_t) Bool)
(declare-const dummy3 item_t)
(declare-datatypes () ((item_t__ref (mk_item_t__ref (item_t__content item_t)))))
(define-fun item_t__ref___5__projection ((a item_t__ref)) item_t (item_t__content a))
(define-fun dynamic_invariant1 ((temp___expr_364 Int) (temp___is_init_360 Bool) (temp___skip_constant_361 Bool) (temp___do_toplevel_362 Bool) (temp___do_typ_inv_363 Bool)) Bool (=> (or (= temp___is_init_360 true) (<= 0 9)) (in_range4 temp___expr_364)))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range2 f) (=> (in_range2 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range2 low) (and (in_range2 high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int fruits)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int fruits) (elts a))
(define-fun of_array ((a (Array Int fruits)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int fruits)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int fruits)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int fruits)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int fruits))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int fruits))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int fruits))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq4 (us_t us_t) Bool)
(declare-const dummy4 us_t)
(declare-datatypes () ((inventory_t__ref (mk_inventory_t__ref (inventory_t__content us_t)))))
(define-fun inventory_t__ref___projection ((a inventory_t__ref)) us_t (inventory_t__content a))
(declare-const inventory__first integer)
(declare-const inventory__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const fill_with Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range1 temp___expr_46)))
(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range2 temp___expr_18)))
(define-fun dynamic_invariant4 ((temp___expr_371 us_t) (temp___is_init_367 Bool) (temp___skip_constant_368 Bool) (temp___do_toplevel_369 Bool) (temp___do_typ_inv_370 Bool)) Bool (=> (not (= temp___skip_constant_368 true)) (dynamic_property 1 2147483647 (first1 temp___expr_371) (last1 temp___expr_371))))
(declare-const inventory (Array Int fruits))
(declare-const i Int)
(declare-const temp___512 (Array Int fruits))
(declare-const o fruits)
(declare-const o1 (Array Int fruits))
(declare-const i1 Int)
(declare-const inventory1 (Array Int fruits))
(declare-const result Int)
(declare-const i2 Int)
(declare-const inventory2 (Array Int fruits))
(declare-const i3 Int)
(declare-const result1 Bool)
(declare-const result2 (Array Int fruits))
(declare-const inventory3 (Array Int fruits))
(declare-const inventory4 (Array Int fruits))
(declare-const i4 Int)
(declare-const inventory5 (Array Int fruits))
(declare-const i5 Int)
(declare-const inventory6 (Array Int fruits))
(declare-const i6 Int)
(declare-const inventory7 (Array Int fruits))
(declare-const i7 Int)
(declare-const inventory8 (Array Int fruits))
(declare-const i8 Int)
(declare-const inventory9 (Array Int fruits))
(declare-const i9 Int)
(define-fun i10 () int__ref (mk_int__ref i6))
(define-fun inventory10 () map__ref (mk_map__ref inventory6))
(assert (dynamic_property 1 2147483647 (to_rep inventory__first) (to_rep inventory__last)))
(assert (in_range4 fill_with))
(assert (< (to_rep inventory__first) (to_rep inventory__last)))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i2 (to_rep inventory__first)))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (= temp___512 inventory)))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (and (forall ((temp___513 Int)) (=> (and (<= (to_rep inventory__first) temp___513) (<= temp___513 (to_rep inventory__last))) (=> (or (< (to_rep inventory__last) temp___513) (or (< temp___513 (to_rep inventory__first)) (<= i3 temp___513))) (= (select inventory2 temp___513) (select temp___512 temp___513))))) (and (<= (to_rep inventory__first) i3) (<= i3 (to_rep inventory__last))))))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (and (= result1 (found_none (to_rep1 (select inventory2 i3)))) (= (= result1 true) (= (to_rep1 (select inventory2 i3)) 0)))))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (=> (= result1 true) (= (to_rep1 o) fill_with))))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (=> (= result1 true) (= o1 (store inventory2 i3 o)))))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (=> (= result1 true) (= inventory2 result2))))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (=> (= result1 true) (= inventory3 o1))))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (=> (not (= result1 true)) (= inventory3 inventory2))))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (= i3 (to_rep inventory__last))))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (= i3 i4)))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (= inventory3 inventory4)))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (= i5 i3)))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (= inventory5 inventory3)))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (= i10 (mk_int__ref i4))))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (= inventory10 (mk_map__ref inventory4))))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (= i7 i5)))
(assert (=> (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last))) (= inventory7 inventory5)))
(assert (=> (not (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last)))) (= i2 i6)))
(assert (=> (not (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last)))) (= inventory10 (mk_map__ref inventory))))
(assert (=> (not (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last)))) (= i7 i2)))
(assert (=> (not (and (<= (to_rep inventory__first) i2) (<= i2 (to_rep inventory__last)))) (= inventory7 inventory1)))
(assert (= (mk_int__ref i8) i10))
(assert (= (mk_map__ref inventory8) inventory10))
(assert (= i9 i7))
(assert (= inventory9 inventory7))
(assert (<= (to_rep inventory__first) i1))
(assert (<= i1 (to_rep inventory__last)))
(assert (not (<= i1 (to_rep inventory__last))))
(check-sat)
(exit)
