(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort program_phase_t 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (program_phase_t program_phase_t) Bool)
(declare-const dummy program_phase_t)
(declare-datatypes () ((program_phase_t__ref (mk_program_phase_t__ref (program_phase_t__content program_phase_t)))))
(define-fun program_phase_t__ref___projection ((a program_phase_t__ref)) program_phase_t (program_phase_t__content a))
(define-fun dynamic_invariant ((temp___expr_533 Int) (temp___is_init_530 Bool) (temp___skip_constant_531 Bool) (temp___do_toplevel_532 Bool)) Bool (=> (or (= temp___is_init_530 true) (<= 0 2)) (in_range1 temp___expr_533)))
(declare-sort counter_range_t 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (counter_range_t counter_range_t) Bool)
(declare-const dummy1 counter_range_t)
(declare-datatypes () ((counter_range_t__ref (mk_counter_range_t__ref (counter_range_t__content counter_range_t)))))
(define-fun counter_range_t__ref___projection ((a counter_range_t__ref)) counter_range_t (counter_range_t__content a))
(declare-fun to_rep (counter_range_t) Int)
(declare-fun of_rep (Int) counter_range_t)
(assert (forall ((x counter_range_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x counter_range_t)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort tcandidate_number_tB 0)
(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (tcandidate_number_tB tcandidate_number_tB) Bool)
(declare-const dummy2 tcandidate_number_tB)
(declare-datatypes () ((tcandidate_number_tB__ref (mk_tcandidate_number_tB__ref (tcandidate_number_tB__content tcandidate_number_tB)))))
(define-fun tcandidate_number_tB__ref___projection ((a tcandidate_number_tB__ref)) tcandidate_number_tB (tcandidate_number_tB__content a))
(declare-sort candidate_number_t 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 20)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq3 (candidate_number_t candidate_number_t) Bool)
(declare-const dummy3 candidate_number_t)
(declare-datatypes () ((candidate_number_t__ref (mk_candidate_number_t__ref (candidate_number_t__content candidate_number_t)))))
(define-fun candidate_number_t__ref___projection ((a candidate_number_t__ref)) candidate_number_t (candidate_number_t__content a))
(define-fun dynamic_invariant1 ((temp___expr_545 Int) (temp___is_init_542 Bool) (temp___skip_constant_543 Bool) (temp___do_toplevel_544 Bool)) Bool (=> (or (= temp___is_init_542 true) (<= 0 20)) (in_range4 temp___expr_545)))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int counter_range_t))))))
(declare-fun slide ((Array Int counter_range_t) Int Int) (Array Int counter_range_t))
(assert (forall ((a (Array Int counter_range_t))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int counter_range_t))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int counter_range_t) Int Int (Array Int counter_range_t) Int Int) (Array Int counter_range_t))
(assert (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (counter_range_t Int) (Array Int counter_range_t))
(assert (forall ((v counter_range_t)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int counter_range_t)) (a__first Int) (a__last Int) (b (Array Int counter_range_t)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_153 Int)) (=> (and (<= a__first temp___idx_153) (<= temp___idx_153 a__last)) (= (to_rep (select a temp___idx_153)) (to_rep (select b (+ (- b__first a__first) temp___idx_153))))))) true false))
(assert (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_153 Int)) (=> (and (<= a__first temp___idx_153) (<= temp___idx_153 a__last)) (= (to_rep (select a temp___idx_153)) (to_rep (select b (+ (- b__first a__first) temp___idx_153)))))))))))
(declare-fun compare ((Array Int counter_range_t) Int Int (Array Int counter_range_t) Int Int) Int)
(assert (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int counter_range_t)) (b (Array Int counter_range_t))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int Bool))))))
(declare-fun slide1 ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(declare-fun concat2 ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat2 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton2 (Bool Int) (Array Int Bool))
(assert (forall ((v Bool)) (forall ((i Int)) (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i))))))
(define-fun bool_eq1 ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))))))))))
(declare-fun compare1 ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare1 a a_first a_last b b_first b_last) 0) (= (bool_eq1 a a_first a_last b b_first b_last) true)) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare1 a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq1 a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare1 a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq1 a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern ((compare1 a a_first a_last b b_first b_last))))))
(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (orb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (andb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (xorb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool))) (forall ((a_first Int) (a_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select (notb a a_first a_last) i)))))))
(declare-const program_phase Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const last_candidate Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const counters (Array Int counter_range_t))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun to_rep1 (tcandidate_number_tB) Int)
(declare-fun of_rep1 (Int) tcandidate_number_tB)
(assert (forall ((x tcandidate_number_tB)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x tcandidate_number_tB)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq4 (tcandidate_number_tB tcandidate_number_tB) Bool)
(declare-const dummy4 tcandidate_number_tB)
(declare-datatypes () ((t59b__ref (mk_t59b__ref (t59b__content tcandidate_number_tB)))))
(define-fun t59b__ref___projection ((a t59b__ref)) tcandidate_number_tB (t59b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq5 (tcandidate_number_tB tcandidate_number_tB) Bool)
(declare-const dummy5 tcandidate_number_tB)
(declare-datatypes () ((t68b__ref (mk_t68b__ref (t68b__content tcandidate_number_tB)))))
(define-fun t68b__ref___projection ((a t68b__ref)) tcandidate_number_tB (t68b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(define-fun dynamic_property2 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq6 (tcandidate_number_tB tcandidate_number_tB) Bool)
(declare-const dummy6 tcandidate_number_tB)
(declare-datatypes () ((t73b__ref (mk_t73b__ref (t73b__content tcandidate_number_tB)))))
(define-fun t73b__ref___projection ((a t73b__ref)) tcandidate_number_tB (t73b__content a))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(define-fun dynamic_invariant2 ((temp___expr_539 Int) (temp___is_init_536 Bool) (temp___skip_constant_537 Bool) (temp___do_toplevel_538 Bool)) Bool (=> (or (= temp___is_init_536 true) (<= 0 10000)) (in_range2 temp___expr_539)))
(declare-const winners (Array Int Bool))
(declare-const latest_highest_score Int)
(declare-const i Int)
(declare-const j Int)
(declare-const i1 Int)
(declare-const temp___706 (Array Int Bool))
(declare-const temp___705 Int)
(declare-const temp___704 Int)
(declare-const j1 Int)
(declare-const o Int)
(declare-const j2 Int)
(declare-const temp___700 (Array Int Bool))
(declare-const temp___699 Int)
(declare-const k Int)
(declare-const o1 Int)
(declare-const o2 (Array Int Bool))
(declare-const temp___711 (Array Int Bool))
(declare-const temp___713 (Array Int Bool))
(declare-const temp___710 Int)
(declare-const j3 Int)
(declare-const o3 Int)
(declare-const o4 Bool)
(declare-const o5 Int)
(declare-const j4 Int)
(declare-const o6 Int)
(declare-const o7 Bool)
(declare-const i2 Int)
(declare-const winner Int)
(declare-const i3 Int)
(declare-const o8 Int)
(declare-const o9 Bool)
(declare-const o10 Int)
(declare-const o11 Bool)
(declare-const o12 Bool)
(declare-const o13 Int)
(declare-const o14 counter_range_t)
(declare-const o15 Int)
(declare-const j5 Int)
(declare-const result (Array Int Bool))
(declare-const winners1 (Array Int Bool))
(declare-const result1 Int)
(declare-const latest_highest_score1 Int)
(declare-const result2 (Array Int Bool))
(declare-const winners2 (Array Int Bool))
(declare-const result3 Int)
(declare-const i4 Int)
(declare-const winners3 (Array Int Bool))
(declare-const latest_highest_score2 Int)
(declare-const i5 Int)
(declare-const j6 Int)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Int)
(declare-const j7 Int)
(declare-const winners4 (Array Int Bool))
(declare-const j8 Int)
(declare-const result7 (Array Int Bool))
(declare-const winners5 (Array Int Bool))
(declare-const result8 Int)
(declare-const j9 Int)
(declare-const winners6 (Array Int Bool))
(declare-const j10 Int)
(declare-const winners7 (Array Int Bool))
(declare-const j11 Int)
(declare-const winners8 (Array Int Bool))
(declare-const j12 Int)
(declare-const winners9 (Array Int Bool))
(declare-const j13 Int)
(declare-const winners10 (Array Int Bool))
(declare-const j14 Int)
(declare-const winners11 (Array Int Bool))
(declare-const j15 Int)
(declare-const result9 (Array Int Bool))
(declare-const winners12 (Array Int Bool))
(declare-const result10 Int)
(declare-const latest_highest_score3 Int)
(declare-const result11 (Array Int Bool))
(declare-const winners13 (Array Int Bool))
(declare-const result12 int__ref)
(declare-const latest_highest_score4 Int)
(declare-const result13 map__ref1)
(declare-const winners14 (Array Int Bool))
(declare-const winners15 map__ref1)
(declare-const latest_highest_score5 int__ref)
(declare-const j16 int__ref)
(declare-const winners16 (Array Int Bool))
(declare-const latest_highest_score6 Int)
(declare-const j17 Int)
(declare-const result14 int__ref)
(declare-const i6 Int)
(declare-const winners17 map__ref1)
(declare-const latest_highest_score7 int__ref)
(declare-const i7 int__ref)
(declare-const j18 int__ref)
(declare-const winners18 (Array Int Bool))
(declare-const latest_highest_score8 Int)
(declare-const i8 Int)
(declare-const j19 Int)
(declare-const winners19 map__ref1)
(declare-const latest_highest_score9 int__ref)
(declare-const i9 int__ref)
(declare-const j20 int__ref)
(declare-const winners20 (Array Int Bool))
(declare-const latest_highest_score10 Int)
(declare-const i10 Int)
(declare-const j21 Int)
(declare-const winners21 map__ref1)
(declare-const latest_highest_score11 int__ref)
(declare-const i11 int__ref)
(declare-const j22 int__ref)
(declare-const winners22 (Array Int Bool))
(declare-const latest_highest_score12 Int)
(declare-const i12 Int)
(declare-const j23 Int)
(declare-const winners23 map__ref1)
(declare-const latest_highest_score13 int__ref)
(declare-const i13 int__ref)
(declare-const j24 int__ref)
(declare-const winners24 (Array Int Bool))
(declare-const latest_highest_score14 Int)
(declare-const i14 Int)
(declare-const j25 Int)
(declare-const result15 int__ref)
(declare-const i15 Int)
(declare-const winners25 (Array Int Bool))
(declare-const i16 Int)
(declare-const result16 Bool)
(declare-const result17 Bool)
(declare-const result18 map__ref1)
(declare-const winners26 (Array Int Bool))
(declare-const result19 int__ref)
(declare-const i17 Int)
(declare-const winners27 map__ref1)
(declare-const i18 int__ref)
(declare-const winners28 (Array Int Bool))
(declare-const i19 Int)
(declare-const winners29 map__ref1)
(declare-const i20 int__ref)
(declare-const winners30 (Array Int Bool))
(declare-const i21 Int)
(declare-const winners31 map__ref1)
(declare-const i22 int__ref)
(declare-const winners32 (Array Int Bool))
(declare-const i23 Int)
(declare-const winners33 map__ref1)
(declare-const i24 int__ref)
(declare-const winners34 (Array Int Bool))
(declare-const i25 Int)
(declare-const winners35 map__ref1)
(declare-const latest_highest_score15 int__ref)
(declare-const i26 int__ref)
(declare-const j26 int__ref)
(declare-const i27 int__ref)
(declare-const winners36 (Array Int Bool))
(declare-const latest_highest_score16 Int)
(declare-const i28 Int)
(declare-const j27 Int)
(declare-const i29 Int)
(declare-const result20 Bool)
(declare-const result21 Bool)
(declare-const result22 Bool)
(declare-const result23 Bool)
(assert (in_range1 program_phase))
(assert (in_range4 last_candidate))
(assert (= program_phase 2))
(assert (and (and (=> (<= 0 20) (in_range4 latest_highest_score)) (and (and (= (mk_map__ref1 result) (mk_map__ref1 winners)) (= winners1 (store winners 0 (of_int 0)))) (and (and (= (mk_int__ref result1) (mk_int__ref latest_highest_score)) (= latest_highest_score1 1)) (and (and (= winners1 result2) (= winners2 (store winners1 latest_highest_score1 (of_int 1)))) (and (and (and (= (mk_int__ref result3) (mk_int__ref i)) (= i4 2)) (ite (and (<= 2 i4) (<= i4 last_candidate)) (and (and (and (= temp___706 winners2) (and (= temp___705 latest_highest_score1) (and (= temp___704 i4) (and (and (and (and (and (not (= (select winners3 0) true)) (< latest_highest_score2 i5)) (= (select winners3 latest_highest_score2) true)) (forall ((j28 Int)) (=> (and (<= 1 j28) (<= j28 (- i5 1))) (=> (< latest_highest_score2 j28) (< (to_rep (select counters j28)) (to_rep (select counters latest_highest_score2))))))) (forall ((j28 Int)) (=> (and (<= 1 j28) (<= j28 (- i5 1))) (ite (= (select winners3 j28) true) (= (to_rep (select counters latest_highest_score2)) (to_rep (select counters j28))) (< (to_rep (select counters j28)) (to_rep (select counters latest_highest_score2))))))) (and (and (and (=> (<= 2 last_candidate) (dynamic_property 2 last_candidate i5)) (=> (<= 0 20) (in_range4 latest_highest_score2))) (and (<= 2 i5) (<= i5 last_candidate))) (and (ite (< (to_rep (select counters latest_highest_score2)) (to_rep (select counters i5))) (and (and (and (and (= j6 result6) (= j7 0)) (ite (and (<= 0 j7) (<= j7 (- i5 1))) (and (and (and (= temp___700 winners3) (and (= temp___699 j7) (and (forall ((k1 Int)) (=> (and (<= 0 k1) (<= k1 (- j8 1))) (not (= (select winners4 k1) true)))) (and (and (and (=> (<= 0 (- i5 1)) (dynamic_property1 0 (- i5 1) j8)) (forall ((temp___701 Int)) (=> (and (<= 0 temp___701) (<= temp___701 20)) (=> (<= j8 temp___701) (= (select winners4 temp___701) (select temp___700 temp___701)))))) (and (<= 0 j8) (<= j8 (- i5 1)))) (and (and (and (and (and (<= 0 j8) (<= j8 20)) (= o1 j8)) (= o2 (store winners4 o1 (of_int 0)))) (and (= winners4 result7) (= winners5 o2))) (= j8 (- i5 1))))))) (and (and (= j8 j12) (= winners5 winners8)) (and (= j13 j8) (= winners9 winners5)))) (and (and (= (mk_int__ref j14) (mk_int__ref j12)) (= (mk_map__ref1 winners10) (mk_map__ref1 winners8))) (and (= j15 j13) (= winners11 winners9)))) (and (and (= j7 j14) (= winners3 winners10)) (and (= j15 j7) (= winners11 winners3))))) (and (and (= (mk_map__ref1 result9) (mk_map__ref1 winners10)) (= winners12 (store winners10 i5 (of_int 1)))) (and (= latest_highest_score2 result10) (= latest_highest_score3 i5)))) (and (and (= j16 (mk_int__ref j14)) (and (= latest_highest_score5 (mk_int__ref latest_highest_score3)) (= winners15 (mk_map__ref1 winners12)))) (and (= j17 j15) (and (= latest_highest_score6 latest_highest_score3) (= winners16 winners12))))) (and (ite (= (to_rep (select counters i5)) (to_rep (select counters latest_highest_score2))) (and (and (= winners3 result11) (= winners13 (store winners3 i5 (of_int 1)))) (and (= result12 (mk_int__ref latest_highest_score2)) (= latest_highest_score4 i5))) (and (and (= result13 (mk_map__ref1 winners3)) (= winners14 (store winners3 i5 (of_int 0)))) (and (= latest_highest_score4 latest_highest_score2) (= winners13 winners14)))) (and (and (= j16 (mk_int__ref j6)) (and (= latest_highest_score5 (mk_int__ref latest_highest_score4)) (= winners15 (mk_map__ref1 winners13)))) (and (= j17 j6) (and (= latest_highest_score6 latest_highest_score4) (= winners16 winners13)))))) (= i5 last_candidate))))))) (and (and (= j22 j16) (and (= i11 (mk_int__ref i5)) (and (= latest_highest_score11 latest_highest_score5) (= winners21 winners15)))) (and (= j23 j17) (and (= i12 i5) (and (= latest_highest_score12 latest_highest_score6) (= winners22 winners16)))))) (and (and (= j24 j22) (and (= i13 i11) (and (= latest_highest_score13 latest_highest_score11) (= winners23 winners21)))) (and (= j25 j23) (and (= i14 i12) (and (= latest_highest_score14 latest_highest_score12) (= winners24 winners22)))))) (and (and (= j24 (mk_int__ref j)) (and (= i13 (mk_int__ref i4)) (and (= latest_highest_score13 (mk_int__ref latest_highest_score1)) (= winners23 (mk_map__ref1 winners2))))) (and (= j25 j5) (and (= i14 i4) (and (= latest_highest_score14 latest_highest_score1) (= winners24 winners2))))))) (and (and (= result15 (mk_int__ref i1)) (= i15 (+ last_candidate 1))) (ite (and (<= (+ last_candidate 1) i15) (<= i15 20)) (and (and (and (= temp___711 (map__content1 winners23)) (and (= temp___713 (map__content1 winners23)) (and (= temp___710 i15) (and (and (forall ((j28 Int)) (=> (and (<= (+ last_candidate 1) j28) (<= j28 (- i16 1))) (not (= (select winners25 j28) true)))) (forall ((j28 Int)) (=> (and (<= 0 j28) (<= j28 last_candidate)) (= (= (select winners25 j28) true) (= (select temp___713 j28) true))))) (and (and (and (=> (<= (+ last_candidate 1) 20) (dynamic_property2 (+ last_candidate 1) 20 i16)) (forall ((temp___712 Int)) (=> (and (<= 0 temp___712) (<= temp___712 20)) (=> (<= i16 temp___712) (= (select winners25 temp___712) (select temp___711 temp___712)))))) (and (<= (+ last_candidate 1) i16) (<= i16 20))) (and (and (= result18 (mk_map__ref1 winners25)) (= winners26 (store winners25 i16 (of_int 0)))) (= i16 20))))))) (and (and (= i22 (mk_int__ref i16)) (= winners31 (mk_map__ref1 winners26))) (and (= i23 i16) (= winners32 winners26)))) (and (and (= i24 i22) (= winners33 winners31)) (and (= i25 i23) (= winners34 winners32)))) (and (and (= i24 (mk_int__ref i15)) (= winners33 winners23)) (and (= i25 i15) (= winners34 winners24)))))))))) (and (and (= i27 i24) (and (= j26 j24) (and (= i26 i13) (and (= latest_highest_score15 latest_highest_score13) (= winners35 winners33))))) (and (= i29 i25) (and (= j27 j25) (and (= i28 i14) (and (= latest_highest_score16 latest_highest_score14) (= winners36 winners34))))))))
(assert (<= 0 winner))
(assert (<= winner 20))
(assert (<= 1 i3))
(assert (<= i3 last_candidate))
(assert (and (<= 0 i3) (<= i3 20)))
(assert (= o10 i3))
(assert (= o11 (select (map__content1 winners35) o10)))
(assert (= o12 (ite (not (= o11 true)) true false)))
(assert (= result22 (ite (= (select (map__content1 winners35) winner) true) o12 false)))
(assert (=> (= result22 true) (and (<= 0 i3) (<= i3 20))))
(assert (=> (= result22 true) (= o13 i3)))
(assert (=> (= result22 true) (= o14 (select counters o13))))
(assert (=> (= result22 true) (= o15 (to_rep o14))))
(assert (=> (= result22 true) (= result21 (ite (< o15 (to_rep (select counters winner))) true false))))
(assert (=> (not (= result22 true)) (= result21 (of_int 1))))
(assert (= result21 true))
(assert (and (<= 0 i3) (<= i3 20)))
(assert (= o8 i3))
(assert (= o9 (select (map__content1 winners35) o8)))
(assert (= result23 (ite (= (select (map__content1 winners35) winner) true) o9 false)))
(assert (= result23 true))
(assert (not (<= 0 i3)))
(check-sat)
(exit)
