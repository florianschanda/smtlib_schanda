(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((-2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq5(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq5(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq5(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic overwrite : us_t, int, us_t -> us_t

logic overwrite__function_guard : us_t, us_t, int, us_t -> prop

axiom overwrite__post_axiom :
  (forall source:(int,character) farray. forall source1:t.
  forall new_item:(int,character) farray. forall new_item1:t.
  (forall position:int [overwrite({ elts = source; rt = source1 }, position,
  { elts = new_item; rt = new_item1 })]. (in_range2(position) ->
  dynamic_property(1, 2147483647, to_rep1(first((overwrite({ elts = source;
  rt = source1 }, position, { elts = new_item; rt = new_item1 })).rt)),
  to_rep1(last((overwrite({ elts = source; rt = source1 }, position, { elts =
  new_item; rt = new_item1 })).rt))))))

type messagelengtht

predicate in_range4(x: int) = ((0 <= x) and (x <= 4096))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : messagelengtht, messagelengtht -> bool

logic dummy5 : messagelengtht

type messagelengtht__ref = { messagelengtht__content : messagelengtht
}

function messagelengtht__ref___projection(a: messagelengtht__ref) : messagelengtht =
  (a).messagelengtht__content

logic to_rep2 : messagelengtht -> int

logic of_rep2 : int -> messagelengtht

axiom inversion_axiom2 :
  (forall x:messagelengtht [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:messagelengtht [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type messageindext

predicate in_range5(x: int) = ((1 <= x) and (x <= 4096))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : messageindext, messageindext -> bool

logic dummy6 : messageindext

type messageindext__ref = { messageindext__content : messageindext
}

function messageindext__ref___projection(a: messageindext__ref) : messageindext =
  (a).messageindext__content

logic dummy7 : (int,character) farray

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

logic user_eq6 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__tcpip__messaget__data : (int,character) farray;
rec__tcpip__messaget__length : messagelengtht
}

function us_split_fields_Data__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__tcpip__messaget__data

function us_split_fields_Length__projection(a: us_split_fields) : messagelengtht =
  (a).rec__tcpip__messaget__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic bool_eq9 : us_rep, us_rep -> bool

axiom bool_eq_def7 :
  (forall a:us_rep. forall b:us_rep [bool_eq9(a, b)].
  ((((bool_eq5(((a).us_split_fields1).rec__tcpip__messaget__data, 1, 4096,
  ((b).us_split_fields1).rec__tcpip__messaget__data, 1, 4096) = true) and
  (to_rep2(((a).us_split_fields1).rec__tcpip__messaget__length) = to_rep2(((b).us_split_fields1).rec__tcpip__messaget__length))) ->
  (bool_eq9(a, b) = true)) and
  ((not ((bool_eq5(((a).us_split_fields1).rec__tcpip__messaget__data, 1,
  4096, ((b).us_split_fields1).rec__tcpip__messaget__data, 1,
  4096) = true) and
  (to_rep2(((a).us_split_fields1).rec__tcpip__messaget__length) = to_rep2(((b).us_split_fields1).rec__tcpip__messaget__length)))) ->
  (bool_eq9(a, b) = false))))

logic value__size2 : int

logic object__size2 : us_rep -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,character) farray. forall a1:messagelengtht.
  (0 <= object__size2({ us_split_fields1 = { rec__tcpip__messaget__data = a;
  rec__tcpip__messaget__length = a1 } })))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,character) farray. forall a1:messagelengtht.
  (0 <= object__alignment2({ us_split_fields1 = {
  rec__tcpip__messaget__data = a; rec__tcpip__messaget__length = a1 } })))

logic tcpip__messaget__data__first__bit : int

logic tcpip__messaget__data__last__bit : int

logic tcpip__messaget__data__position : int

axiom tcpip__messaget__data__first__bit_axiom :
  (0 <= tcpip__messaget__data__first__bit)

axiom tcpip__messaget__data__last__bit_axiom :
  (tcpip__messaget__data__first__bit <  tcpip__messaget__data__last__bit)

axiom tcpip__messaget__data__position_axiom :
  (0 <= tcpip__messaget__data__position)

logic tcpip__messaget__length__first__bit : int

logic tcpip__messaget__length__last__bit : int

logic tcpip__messaget__length__position : int

axiom tcpip__messaget__length__first__bit_axiom :
  (0 <= tcpip__messaget__length__first__bit)

axiom tcpip__messaget__length__last__bit_axiom :
  (tcpip__messaget__length__first__bit <  tcpip__messaget__length__last__bit)

axiom tcpip__messaget__length__position_axiom :
  (0 <= tcpip__messaget__length__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy8 : (int,character) farray

logic dummy9 : messagelengtht

type messaget__ref = { messaget__content : us_rep
}

function messaget__ref___projection(a: messaget__ref) : us_rep =
  (a).messaget__content

logic temp___571 : int -> (int,character) farray

axiom def_axiom :
  (forall temp___573:int.
  (forall temp___574:int.
  ((temp___571(temp___573)[temp___574]) = of_rep(temp___573))))

logic nullmsg : (int,character) farray

logic nullmsg1 : messagelengtht

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___139 : int -> (int,character) farray

axiom def_axiom1 :
  (forall temp___141:int.
  (forall temp___142:int.
  ((temp___139(temp___141)[temp___142]) = of_rep(temp___141))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,character) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,character) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,character) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,character) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,character) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,character) farray. (0 <= object__alignment3(a)))

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq8 : us_t1, us_t1 -> bool

logic dummy10 : (int,character) farray

logic dummy11 : t1

type dictionaryt__ref = { dictionaryt__content : us_t1
}

function dictionaryt__ref___projection(a: dictionaryt__ref) : us_t1 =
  (a).dictionaryt__content

logic getdictionary : us_t, int -> us_t1

logic getdictionary__function_guard : us_t1, us_t, int -> prop

logic getstringbykey : us_t1, us_t -> us_t

logic getstringbykey__function_guard : us_t, us_t1, us_t -> prop

logic getresponsefrommsg : us_rep -> us_t

logic getresponsefrommsg__function_guard : us_t, us_rep -> prop

type doorstatet

predicate in_range6(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : doorstatet, doorstatet -> bool

logic dummy12 : doorstatet

type doorstatet__ref = { doorstatet__content : doorstatet
}

function doorstatet__ref___projection(a: doorstatet__ref) : doorstatet =
  (a).doorstatet__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic outmsg : (int,character) farray

logic outmsg1 : messagelengtht

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___String_Literal_143 : unit -> (int,character) farray

axiom temp___String_Literal_143__def_axiom :
  (((((((((((((((to_rep((temp___String_Literal_143(void)[1])) = 100) and
  (to_rep((temp___String_Literal_143(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_143(void)[3])) = 111)) and
  (to_rep((temp___String_Literal_143(void)[4])) = 114)) and
  (to_rep((temp___String_Literal_143(void)[5])) = 46)) and
  (to_rep((temp___String_Literal_143(void)[6])) = 103)) and
  (to_rep((temp___String_Literal_143(void)[7])) = 101)) and
  (to_rep((temp___String_Literal_143(void)[8])) = 116)) and
  (to_rep((temp___String_Literal_143(void)[9])) = 83)) and
  (to_rep((temp___String_Literal_143(void)[10])) = 116)) and
  (to_rep((temp___String_Literal_143(void)[11])) = 97)) and
  (to_rep((temp___String_Literal_143(void)[12])) = 116)) and
  (to_rep((temp___String_Literal_143(void)[13])) = 101)) and
  (to_rep((temp___String_Literal_143(void)[14])) = 40)) and
  (to_rep((temp___String_Literal_143(void)[15])) = 41))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic msg__first : integer

logic msg__last : integer

logic attr__ATTRIBUTE_ADDRESS7 : int

logic statedict__first : integer

logic statedict__last : integer

logic attr__ATTRIBUTE_ADDRESS8 : int

logic temp___String_Literal_629 : unit -> (int,character) farray

axiom temp___String_Literal_629__def_axiom :
  ((((((((((((to_rep((temp___String_Literal_629(void)[1])) = 111) and
  (to_rep((temp___String_Literal_629(void)[2])) = 112)) and
  (to_rep((temp___String_Literal_629(void)[3])) = 101)) and
  (to_rep((temp___String_Literal_629(void)[4])) = 114)) and
  (to_rep((temp___String_Literal_629(void)[5])) = 97)) and
  (to_rep((temp___String_Literal_629(void)[6])) = 116)) and
  (to_rep((temp___String_Literal_629(void)[7])) = 105)) and
  (to_rep((temp___String_Literal_629(void)[8])) = 111)) and
  (to_rep((temp___String_Literal_629(void)[9])) = 110)) and
  (to_rep((temp___String_Literal_629(void)[10])) = 97)) and
  (to_rep((temp___String_Literal_629(void)[11])) = 108)) and
  (to_rep((temp___String_Literal_629(void)[12])) = 63))

logic temp___String_Literal_630 : unit -> (int,character) farray

axiom temp___String_Literal_630__def_axiom :
  (((((((to_rep((temp___String_Literal_630(void)[1])) = 99) and
  (to_rep((temp___String_Literal_630(void)[2])) = 108)) and
  (to_rep((temp___String_Literal_630(void)[3])) = 111)) and
  (to_rep((temp___String_Literal_630(void)[4])) = 115)) and
  (to_rep((temp___String_Literal_630(void)[5])) = 101)) and
  (to_rep((temp___String_Literal_630(void)[6])) = 100)) and
  (to_rep((temp___String_Literal_630(void)[7])) = 63))

axiom outmsg__def_axiom : ((outmsg = slide((overwrite({ elts = nullmsg; rt =
  mk(1, 4096) }, 1, { elts = temp___String_Literal_143(void); rt = mk(1, 15)
  })).elts, to_rep1(first((overwrite({ elts = nullmsg; rt = mk(1, 4096) }, 1,
  { elts = temp___String_Literal_143(void); rt = mk(1, 15) })).rt)), 1)) and
  (outmsg1 = of_rep2(15)))

axiom nullmsg__def_axiom : ((nullmsg = temp___139(0)) and
  (nullmsg1 = of_rep2(0)))

 (* File "doorapi.ads", line 30, characters 0-0 *)
goal WP_parameter_def :
  (forall inmsg__split_fields:(int,character) farray.
  forall inmsg__split_fields1:messagelengtht. forall doorstate:int.
  forall isop:bool. forall msg:(int,character) farray.
  forall statedict:(int,character) farray. forall o:messagelengtht.
  forall o1:(int,character) farray. forall o2:messagelengtht.
  forall temp___633:(int,character) farray.
  forall temp___6331:messagelengtht.
  forall temp___628:(int,character) farray. forall temp___6281:t.
  forall o3:messagelengtht. forall o4:(int,character) farray.
  forall o5:(int,character) farray. forall o6:messagelengtht.
  forall doorapi__getdoorstateraw__outmsg__assume:(int,character) farray.
  forall doorapi__getdoorstateraw__outmsg__assume1:messagelengtht.
  forall doorapi__getdoorstateraw__B_1__msg__assume:(int,character) farray.
  forall doorapi__getdoorstateraw__B_1__msg__assume1:t.
  forall doorapi__getdoorstateraw__B_1__statedict__assume:(int,character) farray.
  forall doorapi__getdoorstateraw__B_1__statedict__assume1:t1.
  forall o7:(int,character) farray. forall o8:t. forall o9:us_image.
  forall o10:bool. forall o11:(int,character) farray. forall o12:t.
  forall o13:us_image. forall result:int. forall doorstate1:int.
  forall inmsg__split_fields2:(int,character) farray.
  forall inmsg__split_fields3:messagelengtht. forall commsisok:bool.
  forall result1:(int,character) farray. forall msg1:(int,character) farray.
  forall result2:(int,character) farray.
  forall statedict1:(int,character) farray. forall result3:bool.
  forall isop1:bool. (((((to_rep2(o) = 0) and ((temp___139(0) = o1) and
  (o = o2))) and ((temp___633 = o1) and (temp___6331 = o2))) and
  ((temp___633 = nullmsg) and (temp___6331 = nullmsg1))) ->
  (((inmsg__split_fields = temp___571(0)) and
  (to_rep2(inmsg__split_fields1) = 0)) -> (((((to_rep2(o3) = 15) and (((({
  elts = temp___628; rt = temp___6281 } = overwrite({ elts = nullmsg; rt =
  mk(1, 4096) }, 1, { elts = temp___String_Literal_143(void); rt = mk(1, 15)
  })) and dynamic_property(1, 2147483647, to_rep1(first(temp___6281)),
  to_rep1(last(temp___6281)))) and
  ((((to_rep1(first(temp___6281)) <= to_rep1(last(temp___6281))) and
  (((1 <= 4096) and
  (((to_rep1(last(temp___6281)) - to_rep1(first(temp___6281))) + 1) = ((4096 - 1) + 1))) or
  ((not (1 <= 4096)) and
  (((to_rep1(last(temp___6281)) - to_rep1(first(temp___6281))) + 1) = 0)))) or
  ((not (to_rep1(first(temp___6281)) <= to_rep1(last(temp___6281)))) and
  (((1 <= 4096) and (0 = ((4096 - 1) + 1))) or (not (1 <= 4096))))) and
  (o4 = slide(temp___628, to_rep1(first(temp___6281)), 1)))) and
  ((o4 = o5) and (o3 = o6)))) and
  ((doorapi__getdoorstateraw__outmsg__assume = o5) and
  (doorapi__getdoorstateraw__outmsg__assume1 = o6))) and
  ((doorapi__getdoorstateraw__outmsg__assume = outmsg) and
  (doorapi__getdoorstateraw__outmsg__assume1 = outmsg1))) ->
  (((result = doorstate) and (doorstate1 = 0)) -> (in_range6(doorstate1) ->
  ((commsisok = true) -> (((({ elts =
  doorapi__getdoorstateraw__B_1__msg__assume; rt =
  doorapi__getdoorstateraw__B_1__msg__assume1 } = getresponsefrommsg({
  us_split_fields1 = { rec__tcpip__messaget__data = inmsg__split_fields2;
  rec__tcpip__messaget__length = inmsg__split_fields3 } })) and
  dynamic_property(1, 2147483647,
  to_rep1(first(doorapi__getdoorstateraw__B_1__msg__assume1)),
  to_rep1(last(doorapi__getdoorstateraw__B_1__msg__assume1)))) and
  (((result1 = msg) and
  (msg1 = doorapi__getdoorstateraw__B_1__msg__assume)) and
  ((to_rep1(msg__first) = to_rep1(first(doorapi__getdoorstateraw__B_1__msg__assume1))) and
  (to_rep1(msg__last) = to_rep1(last(doorapi__getdoorstateraw__B_1__msg__assume1)))))) ->
  (dynamic_property(1, 2147483647, to_rep1(msg__first),
  to_rep1(msg__last)) -> (((({ elts1 =
  doorapi__getdoorstateraw__B_1__statedict__assume; rt1 =
  doorapi__getdoorstateraw__B_1__statedict__assume1 } = getdictionary({
  elts = msg1; rt = mk(to_rep1(msg__first), to_rep1(msg__last)) }, 1)) and
  dynamic_property1(1, 2147483647,
  to_rep1(first2(doorapi__getdoorstateraw__B_1__statedict__assume1)),
  to_rep1(last2(doorapi__getdoorstateraw__B_1__statedict__assume1)))) and
  (((result2 = statedict) and
  (statedict1 = doorapi__getdoorstateraw__B_1__statedict__assume)) and
  ((to_rep1(statedict__first) = to_rep1(first2(doorapi__getdoorstateraw__B_1__statedict__assume1))) and
  (to_rep1(statedict__last) = to_rep1(last2(doorapi__getdoorstateraw__B_1__statedict__assume1)))))) ->
  (dynamic_property1(1, 2147483647, to_rep1(statedict__first),
  to_rep1(statedict__last)) -> ((((({ elts = o7; rt = o8 } = getstringbykey({
  elts1 = statedict1; rt1 = mk1(to_rep1(statedict__first),
  to_rep1(statedict__last)) }, { elts = temp___String_Literal_629(void); rt =
  mk(1, 12) })) and dynamic_property(1, 2147483647, to_rep1(first(o8)),
  to_rep1(last(o8)))) and (o9 = from_string({ elts = o7; rt = o8 }))) and
  ((result3 = isop) and (isop1 = o10))) -> (((({ elts = o11; rt = o12
  } = getstringbykey({ elts1 = statedict1; rt1 =
  mk1(to_rep1(statedict__first), to_rep1(statedict__last)) }, { elts =
  temp___String_Literal_630(void); rt = mk(1, 7) })) and dynamic_property(1,
  2147483647, to_rep1(first(o12)), to_rep1(last(o12)))) and
  (o13 = from_string({ elts = o11; rt = o12 }))) ->
  attr__ATTRIBUTE_VALUE__pre_check(o13))))))))))))))
