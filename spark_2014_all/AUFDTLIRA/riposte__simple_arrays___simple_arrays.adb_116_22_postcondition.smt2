(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep (select a temp___idx_155)) (to_rep (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-const a (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const c (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const d (Array Int integer))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp_____aggregate_def_238 ((Array Int integer) Int Int) (Array Int integer))
(declare-fun temp_____aggregate_def_245 ((Array Int integer) Int Int Int Int) (Array Int integer))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 42))
(assert (forall ((temp___240 (Array Int integer))) (forall ((temp___241 Int) (temp___242 Int)) (let ((temp___239 (temp_____aggregate_def_238 temp___240 temp___241 temp___242))) (=> (and (dynamic_invariant temp___241 true true true true) (dynamic_invariant temp___242 true true true true)) (forall ((temp___243 Int)) (ite (= temp___243 temp___241) (= (select temp___239 temp___243) rliteral) (= (select temp___239 temp___243) (select temp___240 temp___243)))))))))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 23))
(assert (forall ((temp___247 (Array Int integer))) (forall ((temp___248 Int) (temp___249 Int) (temp___250 Int) (temp___251 Int)) (let ((temp___246 (temp_____aggregate_def_245 temp___247 temp___248 temp___249 temp___250 temp___251))) (=> (and (and (and (dynamic_invariant temp___248 true true true true) (dynamic_invariant temp___249 true true true true)) (dynamic_invariant temp___250 true true true true)) (dynamic_invariant temp___251 true true true true)) (forall ((temp___252 Int)) (ite (= temp___252 temp___250) (= (select temp___246 temp___252) rliteral) (ite (= temp___252 temp___248) (= (select temp___246 temp___252) rliteral1) (= (select temp___246 temp___252) (select temp___247 temp___252))))))))))
(declare-const simple_arrays__array_axiom_transitivity_worse__result Int)
(declare-const result Int)
(declare-const simple_arrays__array_axiom_transitivity_worse__result1 Int)
(declare-const simple_arrays__array_axiom_transitivity_worse__result2 Int)
(declare-const simple_arrays__array_axiom_transitivity_worse__result3 Int)
(declare-const simple_arrays__array_axiom_transitivity_worse__result4 Int)
(declare-const simple_arrays__array_axiom_transitivity_worse__result5 Int)
(declare-const result1 Int)
(assert (and (and (= (bool_eq b (- 2147483648) 2147483647 (temp_____aggregate_def_238 a 23 42) (- 2147483648) 2147483647) true) (= (bool_eq c (- 2147483648) 2147483647 (temp_____aggregate_def_245 a 42 23 23 42) (- 2147483648) 2147483647) true)) (or (= (bool_eq d (- 2147483648) 2147483647 b (- 2147483648) 2147483647) true) (= (bool_eq d (- 2147483648) 2147483647 c (- 2147483648) 2147483647) true))))
(assert (= simple_arrays__array_axiom_transitivity_worse__result1 simple_arrays__array_axiom_transitivity_worse__result2))
(assert (= simple_arrays__array_axiom_transitivity_worse__result3 simple_arrays__array_axiom_transitivity_worse__result1))
(assert (= result simple_arrays__array_axiom_transitivity_worse__result))
(assert (= simple_arrays__array_axiom_transitivity_worse__result1 (to_rep (select d 23))))
(assert (= (mk_int__ref simple_arrays__array_axiom_transitivity_worse__result4) (mk_int__ref simple_arrays__array_axiom_transitivity_worse__result2)))
(assert (= simple_arrays__array_axiom_transitivity_worse__result5 simple_arrays__array_axiom_transitivity_worse__result3))
(assert (= result1 simple_arrays__array_axiom_transitivity_worse__result4))
(assert (not (= simple_arrays__array_axiom_transitivity_worse__result4 42)))
(check-sat)
(exit)
