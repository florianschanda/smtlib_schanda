(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq5(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_91:int. ((((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) and
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))) or
  (not ((a__first <= temp___idx_91) and (temp___idx_91 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

logic is_letter : int -> bool

logic is_letter__function_guard : bool, int -> prop

axiom is_letter__post_axiom : true

logic is_digit : int -> bool

logic is_digit__function_guard : bool, int -> prop

axiom is_digit__post_axiom : true

type iso_646

predicate in_range4(x: int) = ((0 <= x) and (x <= 127))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : iso_646, iso_646 -> bool

logic dummy5 : iso_646

type iso_646__ref = { iso_646__content : iso_646
}

function iso_646__ref___projection(a: iso_646__ref) : iso_646 =
  (a).iso_646__content

logic name : (int,character) farray

logic name1 : t

logic attr__ATTRIBUTE_ADDRESS : int

type state_type

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : state_type, state_type -> bool

logic dummy6 : state_type

type state_type__ref = { state_type__content : state_type
}

function state_type__ref___projection(a: state_type__ref) : state_type =
  (a).state_type__content

type length_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : length_type, length_type -> bool

logic dummy7 : length_type

type length_type__ref = { length_type__content : length_type
}

function length_type__ref___projection(a: length_type__ref) : length_type =
  (a).length_type__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy8 : integer

type t3b__ref = { t3b__content : integer
}

function t3b__ref___projection(a: t3b__ref) : integer = (a).t3b__content

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "names.ads", line 12, characters 0-0 *)
goal WP_parameter_def :
  (forall state:int. forall label_length:int. forall ch:int. forall i:int.
  forall names__is_domain_name__result:bool. forall temp___231:int.
  forall temp___232:int. forall temp___230:int. forall temp___229:int.
  forall temp___228:int. forall temp___227:int. forall o:bool. forall o1:int.
  forall o2:int. forall o3:bool. forall o4:bool. forall o5:bool.
  forall o6:int. forall o7:int. forall o8:bool. forall o9:bool.
  forall o10:bool. forall o11:int. forall i1:int. forall o12:int.
  forall o13:character. forall o14:int. forall o15:bool. forall ch1:int.
  forall i2:int. forall names__is_domain_name__result1:bool.
  forall result:int. forall state1:int. forall result1:int.
  forall label_length1:int. forall result2:bool.
  forall names__is_domain_name__result2:bool. forall result3:int.
  forall i3:int. forall state2:int. forall label_length2:int. forall ch2:int.
  forall i4:int. forall names__is_domain_name__result3:bool.
  forall result4:int. forall ch3:int. forall result5:bool.
  forall names__is_domain_name__result4:bool. forall result6:bool.
  forall result7:bool. forall names__is_domain_name__result5:bool.
  forall result8:int. forall state3:int. forall result9:int.
  forall label_length3:int. forall result10:bool.
  forall names__is_domain_name__result6:bool. forall result11:int.
  forall state4:int. forall result12:int. forall label_length4:int.
  forall result13:int. forall state5:int. forall result14:int.
  forall label_length5:int. forall result15:bool. forall result16:bool.
  forall names__is_domain_name__result7:bool. forall result17:int.
  forall label_length6:int. forall names__is_domain_name__result8:bool.
  forall names__is_domain_name__result9:bool. forall result18:int.
  forall label_length7:int. forall result19:bool. forall result20:bool.
  forall names__is_domain_name__result10:bool. forall result21:int.
  forall state6:int. forall result22:int. forall label_length8:int.
  forall names__is_domain_name__result11:bool.
  forall names__is_domain_name__result12:bool.
  forall names__is_domain_name__result13:bool.
  forall names__is_domain_name__result14:bool.
  forall names__is_domain_name__result15:bool.
  forall names__is_domain_name__result16:bool. forall state7:int.
  forall label_length9:int. forall ch4:int. forall i5:int.
  forall names__is_domain_name__result17:bool. forall state8:int.
  forall label_length10:int. forall ch5:int. forall i6:int.
  forall names__is_domain_name__result18:bool. forall state9:int.
  forall label_length11:int. forall ch6:int__ref. forall i7:int__ref.
  forall names__is_domain_name__result19:bool__ref. forall state10:int.
  forall label_length12:int. forall ch7:int. forall i8:int.
  forall names__is_domain_name__result20:bool. forall result23:bool__ref.
  forall names__is_domain_name__result21:bool. forall result24:bool__ref.
  forall names__is_domain_name__result22:bool.
  forall names__is_domain_name__result23:bool__ref.
  forall names__is_domain_name__result24:bool.
  forall names__is_domain_name__result25:bool__ref.
  forall names__is_domain_name__result26:bool.
  forall names__is_domain_name__result27:bool__ref.
  forall names__is_domain_name__result28:bool. forall result25:bool__ref.
  forall names__is_domain_name__result29:bool.
  forall names__is_domain_name__result30:bool__ref.
  forall names__is_domain_name__result31:bool. forall state11:int__ref.
  forall label_length13:int__ref. forall ch8:int__ref. forall i9:int__ref.
  forall names__is_domain_name__result32:bool__ref. forall state12:int.
  forall label_length14:int. forall ch9:int. forall i10:int.
  forall names__is_domain_name__result33:bool. forall state13:int__ref.
  forall label_length15:int__ref. forall ch10:int__ref. forall i11:int__ref.
  forall names__is_domain_name__result34:bool__ref. forall state14:int.
  forall label_length16:int. forall ch11:int. forall i12:int.
  forall names__is_domain_name__result35:bool. forall state15:int__ref.
  forall label_length17:int__ref. forall ch12:int__ref. forall i13:int__ref.
  forall names__is_domain_name__result36:bool__ref. forall state16:int.
  forall label_length18:int. forall ch13:int. forall i14:int.
  forall names__is_domain_name__result37:bool. forall state17:int__ref.
  forall label_length19:int__ref. forall ch14:int__ref. forall i15:int__ref.
  forall names__is_domain_name__result38:bool__ref. forall state18:int.
  forall label_length20:int. forall ch15:int. forall i16:int.
  forall names__is_domain_name__result39:bool. (dynamic_property(1,
  2147483647, to_rep1(first(name1)), to_rep1(last(name1))) -> (((((0 <= 2) ->
  in_range5(state)) and (((0 <= 255) -> in_range6(label_length)) and
  (((0 <= 255) -> in_range3(ch)) and ((({ int__content = result } = {
  int__content = state }) and (state1 = 0)) and ((({ int__content = result1
  } = { int__content = label_length }) and (label_length1 = 0)) and
  ((((names__is_domain_name__result36 = names__is_domain_name__result34) and
  ((i13 = i11) and ((ch12 = ch10) and ((label_length17 = label_length15) and
  (state15 = state13))))) and
  ((names__is_domain_name__result37 = names__is_domain_name__result35) and
  ((i14 = i12) and ((ch13 = ch11) and ((label_length18 = label_length16) and
  (state16 = state14)))))) and ((((not (length({ elts = name; rt = name1
  }) <  1)) -> (255 <  length({ elts = name; rt = name1 }))) and
  ((((names__is_domain_name__result34 = { bool__content =
  names__is_domain_name__result2 }) and ((i11 = { int__content = i }) and
  ((ch10 = { int__content = ch }) and ((label_length15 = { int__content =
  label_length1 }) and (state13 = { int__content = state1 }))))) and
  ((names__is_domain_name__result35 = names__is_domain_name__result2) and
  ((i12 = i2) and ((ch11 = ch1) and ((label_length16 = label_length1) and
  (state14 = state1)))))) and (({ bool__content = result2 } = {
  bool__content = names__is_domain_name__result }) and
  (names__is_domain_name__result2 = of_int(0))))) or ((not ((not (length({
  elts = name; rt = name1 }) <  1)) -> (255 <  length({ elts = name; rt =
  name1 })))) and
  ((((names__is_domain_name__result34 = names__is_domain_name__result32) and
  ((i11 = i9) and ((ch10 = ch8) and ((label_length15 = label_length13) and
  (state13 = state11))))) and
  ((names__is_domain_name__result35 = names__is_domain_name__result33) and
  ((i12 = i10) and ((ch11 = ch9) and ((label_length16 = label_length14) and
  (state14 = state12)))))) and (((((names__is_domain_name__result32 = {
  bool__content = names__is_domain_name__result15 }) and ((i9 = {
  int__content = i4 }) and ((ch8 = { int__content = ch3 }) and
  ((label_length13 = { int__content = label_length2 }) and (state11 = {
  int__content = state2 }))))) and
  ((names__is_domain_name__result33 = names__is_domain_name__result16) and
  ((i10 = i4) and ((ch9 = ch3) and ((label_length14 = label_length2) and
  (state12 = state2)))))) and ((temp___231 = to_rep1(first(name1))) and
  ((temp___232 = to_rep1(last(name1))) and ((({ int__content = result3 } = {
  int__content = i }) and (i3 = temp___231)) and (((temp___231 <= i3) and
  (i3 <= temp___232)) and ((temp___230 = ch) and
  ((temp___229 = label_length1) and ((temp___228 = state1) and
  ((temp___227 = i3) and
  ((label_length2 <  ((i4 - to_rep1(first(name1))) + 1)) and
  (((((((to_rep1(first(name1)) <= to_rep1(last(name1))) ->
  dynamic_property1(to_rep1(first(name1)), to_rep1(last(name1)), i4)) and
  ((0 <= 2) -> in_range5(state2))) and ((0 <= 255) ->
  in_range6(label_length2))) and ((0 <= 255) -> in_range3(ch2))) and
  ((to_rep1(first(name1)) <= i4) and (i4 <= to_rep1(last(name1))))) and
  (((ch2 = result4) and (ch3 = to_rep((name[i4])))) and
  ((((names__is_domain_name__result4 = names__is_domain_name__result15) and
  (names__is_domain_name__result16 = names__is_domain_name__result4)) and
  ((not in_range4(ch3)) and ((names__is_domain_name__result3 = result5) and
  (names__is_domain_name__result4 = of_int(0))))) or ((in_range4(ch3) and
  (names__is_domain_name__result4 = names__is_domain_name__result3)) and ((({
  bool__content = names__is_domain_name__result15 } = { bool__content =
  names__is_domain_name__result13 }) and
  (names__is_domain_name__result16 = names__is_domain_name__result14)) and
  (((state2 = 0) and
  (((names__is_domain_name__result5 = names__is_domain_name__result13) and
  (names__is_domain_name__result14 = names__is_domain_name__result5)) and
  (((o = is_letter(ch3)) and (((not (o = true)) and (result6 = true)) or
  ((o = true) and (result6 = false)))) and ((result6 = true) and
  ((names__is_domain_name__result4 = result7) and
  (names__is_domain_name__result5 = of_int(0))))))) or
  ((not (state2 = 0)) and ((({ bool__content =
  names__is_domain_name__result13 } = { bool__content =
  names__is_domain_name__result11 }) and
  (names__is_domain_name__result14 = names__is_domain_name__result12)) and
  (((state2 = 1) and ((({ bool__content = names__is_domain_name__result11
  } = { bool__content = names__is_domain_name__result8 }) and
  (names__is_domain_name__result12 = names__is_domain_name__result9)) and
  (((ch3 = 46) and
  (((names__is_domain_name__result6 = names__is_domain_name__result8) and
  (names__is_domain_name__result9 = names__is_domain_name__result6)) and
  ((63 <  label_length2) and ((names__is_domain_name__result4 = result10) and
  (names__is_domain_name__result6 = of_int(0)))))) or ((not (ch3 = 46)) and
  (((names__is_domain_name__result7 = names__is_domain_name__result8) and
  (names__is_domain_name__result9 = names__is_domain_name__result7)) and
  ((not (ch3 = 45)) and ((((o3 = is_digit(ch3)) and
  ((o4 = is_letter(ch3)) and (o5 = match_bool(o4, true, o3)))) and
  (((not (o5 = true)) and (result15 = true)) or ((o5 = true) and
  (result15 = false)))) and ((result15 = true) and
  ((names__is_domain_name__result4 = result16) and
  (names__is_domain_name__result7 = of_int(0))))))))))) or
  ((not (state2 = 1)) and
  (((names__is_domain_name__result10 = names__is_domain_name__result11) and
  (names__is_domain_name__result12 = names__is_domain_name__result10)) and
  ((not (ch3 = 45)) and ((((o8 = is_digit(ch3)) and
  ((o9 = is_letter(ch3)) and (o10 = match_bool(o9, true, o8)))) and
  (((not (o10 = true)) and (result19 = true)) or ((o10 = true) and
  (result19 = false)))) and ((result19 = true) and
  ((result20 = names__is_domain_name__result4) and
  (names__is_domain_name__result10 = of_int(0))))))))))))))))))))))))))) or
  (((({ int__content = result3 } = { int__content = i }) and
  (i3 = to_rep1(first(name1)))) and ((((to_rep1(first(name1)) <= i3) and
  (i3 <= to_rep1(last(name1)))) and ((((temp___230 = ch) and
  ((temp___229 = label_length1) and ((temp___228 = state1) and
  ((temp___227 = i3) and
  ((label_length2 <  ((i4 - to_rep1(first(name1))) + 1)) and
  (((((((to_rep1(first(name1)) <= to_rep1(last(name1))) ->
  dynamic_property1(to_rep1(first(name1)), to_rep1(last(name1)), i4)) and
  ((0 <= 2) -> in_range5(state2))) and ((0 <= 255) ->
  in_range6(label_length2))) and ((0 <= 255) -> in_range3(ch2))) and
  ((to_rep1(first(name1)) <= i4) and (i4 <= to_rep1(last(name1))))) and
  (((ch2 = result4) and (ch3 = to_rep((name[i4])))) and ((in_range4(ch3) and
  (names__is_domain_name__result4 = names__is_domain_name__result3)) and
  ((((state2 = 0) and (((o = is_letter(ch3)) and (((not (o = true)) and
  (result6 = true)) or ((o = true) and (result6 = false)))) and
  ((not (result6 = true)) and ((((state2 = result8) and (state3 = 1)) and
  (((o1 = (label_length2 + 1)) and in_range6((label_length2 + 1))) and
  ((label_length2 = result9) and (label_length3 = o1)))) and
  (names__is_domain_name__result5 = names__is_domain_name__result4))))) or
  ((not (state2 = 0)) and ((((state2 = 1) and (((ch3 = 46) and
  (((not (63 <  label_length2)) and
  (names__is_domain_name__result6 = names__is_domain_name__result4)) and
  (((state2 = result11) and (state4 = 0)) and ((label_length2 = result12) and
  (label_length4 = 0))))) or ((not (ch3 = 46)) and ((((ch3 = 45) and
  ((((state2 = result13) and (state5 = 2)) and
  (((o2 = (label_length2 + 1)) and in_range6((label_length2 + 1))) and
  ((label_length2 = result14) and (label_length5 = o2)))) and
  (names__is_domain_name__result7 = names__is_domain_name__result4))) or
  ((not (ch3 = 45)) and (((((o3 = is_digit(ch3)) and
  ((o4 = is_letter(ch3)) and (o5 = match_bool(o4, true, o3)))) and
  (((not (o5 = true)) and (result15 = true)) or ((o5 = true) and
  (result15 = false)))) and ((not (result15 = true)) and
  ((((o6 = (label_length2 + 1)) and in_range6((label_length2 + 1))) and
  ((label_length2 = result17) and (label_length6 = o6))) and
  (names__is_domain_name__result7 = names__is_domain_name__result4)))) and
  ((label_length5 = label_length6) and (state5 = state2))))) and
  ((names__is_domain_name__result6 = names__is_domain_name__result7) and
  ((label_length4 = label_length5) and (state4 = state5))))))) or
  ((not (state2 = 1)) and ((((ch3 = 45) and ((((o7 = (label_length2 + 1)) and
  in_range6((label_length2 + 1))) and ((result18 = label_length2) and
  (label_length7 = o7))) and
  ((names__is_domain_name__result10 = names__is_domain_name__result4) and
  (state6 = state2)))) or ((not (ch3 = 45)) and (((((o8 = is_digit(ch3)) and
  ((o9 = is_letter(ch3)) and (o10 = match_bool(o9, true, o8)))) and
  (((not (o10 = true)) and (result19 = true)) or ((o10 = true) and
  (result19 = false)))) and ((not (result19 = true)) and
  ((((result21 = state2) and (state6 = 1)) and
  (((o11 = (label_length2 + 1)) and in_range6((label_length2 + 1))) and
  ((result22 = label_length2) and (label_length8 = o11)))) and
  (names__is_domain_name__result10 = names__is_domain_name__result4)))) and
  (label_length7 = label_length8)))) and
  ((names__is_domain_name__result6 = names__is_domain_name__result10) and
  ((label_length4 = label_length7) and (state4 = state6)))))) and
  ((names__is_domain_name__result5 = names__is_domain_name__result6) and
  ((label_length3 = label_length4) and (state3 = state4)))))) and
  (i4 = to_rep1(last(name1)))))))))))) and
  (((names__is_domain_name__result5 = names__is_domain_name__result17) and
  ((i4 = i5) and ((ch3 = ch4) and ((label_length3 = label_length9) and
  (state3 = state7))))) and
  ((names__is_domain_name__result18 = names__is_domain_name__result5) and
  ((i6 = i4) and ((ch5 = ch3) and ((label_length10 = label_length3) and
  (state8 = state3))))))) and (((names__is_domain_name__result19 = {
  bool__content = names__is_domain_name__result17 }) and ((i7 = {
  int__content = i5 }) and ((ch6 = { int__content = ch4 }) and (({
  int__content = label_length11 } = { int__content = label_length9 }) and ({
  int__content = state9 } = { int__content = state7 }))))) and
  ((names__is_domain_name__result20 = names__is_domain_name__result18) and
  ((i8 = i6) and ((ch7 = ch5) and ((label_length12 = label_length10) and
  (state10 = state8)))))))) or ((not ((to_rep1(first(name1)) <= i3) and
  (i3 <= to_rep1(last(name1))))) and (((names__is_domain_name__result19 = {
  bool__content = names__is_domain_name__result }) and ((i7 = {
  int__content = i3 }) and ((ch6 = { int__content = ch }) and
  ((label_length1 = label_length11) and (state1 = state9))))) and
  ((names__is_domain_name__result20 = names__is_domain_name__result1) and
  ((i8 = i3) and ((ch7 = ch1) and ((label_length12 = label_length1) and
  (state10 = state1))))))))) and
  ((((names__is_domain_name__result32 = names__is_domain_name__result30) and
  ((i9 = i7) and ((ch8 = ch6) and ((label_length13 = { int__content =
  label_length11 }) and (state11 = { int__content = state9 }))))) and
  ((names__is_domain_name__result33 = names__is_domain_name__result31) and
  ((i10 = i8) and ((ch9 = ch7) and ((label_length14 = label_length12) and
  (state12 = state10)))))) and
  ((((names__is_domain_name__result30 = names__is_domain_name__result27) and
  (names__is_domain_name__result31 = names__is_domain_name__result28)) and
  (((state9 = 0) and (((names__is_domain_name__result27 = { bool__content =
  names__is_domain_name__result21 }) and
  (names__is_domain_name__result28 = names__is_domain_name__result21)) and
  ((result23 = names__is_domain_name__result19) and
  (names__is_domain_name__result21 = of_int(0))))) or ((not (state9 = 0)) and
  (((names__is_domain_name__result27 = { bool__content =
  names__is_domain_name__result22 }) and
  (names__is_domain_name__result28 = names__is_domain_name__result22)) and
  ((not (state9 = 1)) and ((result24 = names__is_domain_name__result19) and
  (names__is_domain_name__result22 = of_int(0)))))))) or
  (((not (state9 = 0)) and (((state9 = 1) and
  ((names__is_domain_name__result23 = names__is_domain_name__result19) and
  (names__is_domain_name__result24 = names__is_domain_name__result20))) and
  ((names__is_domain_name__result25 = names__is_domain_name__result23) and
  (names__is_domain_name__result26 = names__is_domain_name__result24)))) and
  (((names__is_domain_name__result30 = { bool__content =
  names__is_domain_name__result29 }) and
  (names__is_domain_name__result31 = names__is_domain_name__result29)) and
  ((result25 = names__is_domain_name__result25) and
  (names__is_domain_name__result29 = of_int(1)))))))))))))))))) and
  (((names__is_domain_name__result38 = names__is_domain_name__result36) and
  ((i15 = i13) and ((ch14 = ch12) and ((label_length19 = label_length17) and
  (state17 = state15))))) and
  ((names__is_domain_name__result39 = names__is_domain_name__result37) and
  ((i16 = i14) and ((ch15 = ch13) and ((label_length20 = label_length18) and
  (state18 = state16))))))) ->
  (((names__is_domain_name__result38).bool__content = true) ->
  (((to_rep1(first(name1)) <= i1) and (i1 <= to_rep1(last(name1)))) ->
  (((((((to_rep1(first(name1)) <= i1) and (i1 <= to_rep1(last(name1)))) and
  (o12 = i1)) and (o13 = (name[o12]))) and (o14 = to_rep(o13))) and
  (((o14 = 45) and (o15 = true)) or ((not (o14 = 45)) and (o15 = false)))) ->
  (to_rep1(first(name1)) <= i1)))))))
