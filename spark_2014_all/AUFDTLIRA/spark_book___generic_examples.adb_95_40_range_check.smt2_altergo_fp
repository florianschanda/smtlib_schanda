(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type natural

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy5 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

type field

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : field, field -> bool

logic dummy6 : field

type field__ref = { field__content : field
}

function field__ref___projection(a: field__ref) : field = (a).field__content

type number_base

predicate in_range5(x: int) = ((2 <= x) and (x <= 16))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : number_base, number_base -> bool

logic dummy7 : number_base

type number_base__ref = { number_base__content : number_base
}

function number_base__ref___projection(a: number_base__ref) : number_base =
  (a).number_base__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic count : us_t, int -> int

logic count__function_guard : int, us_t, int -> prop

axiom count__post_axiom :
  (forall source:(int,character) farray. forall source1:t.
  (forall pattern:int [count({ elts = source; rt = source1 }, pattern)].
  (in_range2(pattern) -> in_range3(count({ elts = source; rt = source1 },
  pattern)))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first2(mk1(f, l))) = f) and (to_rep1(last2(mk1(f, l))) = l)))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t1 = { elts1 : (int,character) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,character) farray = (a).elts1

function of_array1(a: (int,character) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size1 : int

logic object__size1 : (int,character) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,character) farray -> int

logic value__alignment1 : int

logic object__alignment1 : (int,character) farray -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__size1(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,character) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:(int,character) farray. (0 <= object__alignment1(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy8 : (int,character) farray

logic dummy9 : t1

type array_type__ref = { array_type__content : us_t1
}

function array_type__ref___projection(a: array_type__ref) : us_t1 =
  (a).array_type__content

type component_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : component_type, component_type -> bool

logic dummy10 : component_type

type component_type__ref = { component_type__content : component_type
}

function component_type__ref___projection(a: component_type__ref) : component_type =
  (a).component_type__content

logic char_count : us_t1, int -> int

logic char_count__function_guard : int, us_t1, int -> prop

axiom char_count__post_axiom :
  (forall source:(int,character) farray. forall source1:t1.
  (forall pattern:int [char_count({ elts1 = source; rt1 = source1 },
  pattern)]. (in_range6(pattern) -> in_range3(char_count({ elts1 = source;
  rt1 = source1 }, pattern)))))

type percent

predicate in_range7(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq11 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq11(x, y)]. (((x = y) -> (bool_eq11(x,
  y) = true)) and ((not (x = y)) -> (bool_eq11(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : percent, percent -> bool

logic dummy11 : percent

type percent__ref = { percent__content : percent
}

function percent__ref___projection(a: percent__ref) : percent =
  (a).percent__content

logic to_rep2 : percent -> int

logic of_rep2 : int -> percent

axiom inversion_axiom2 :
  (forall x:percent [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:percent [to_rep2(x)]. in_range7(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range7(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (int,percent) farray
}

logic slide1 : (int,percent) farray, int, int -> (int,percent) farray

axiom slide_eq1 :
  (forall a:(int,percent) farray.
  (forall first4:int [slide1(a, first4, first4)]. (slide1(a, first4,
  first4) = a)))

axiom slide_def1 :
  (forall a:(int,percent) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,percent) farray, int, int, (int,percent) farray, int,
  int -> (int,percent) farray

axiom concat_def1 :
  (forall a:(int,percent) farray. forall b:(int,percent) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : percent, int -> (int,percent) farray

axiom singleton_def1 :
  (forall v:percent.
  (forall i:int [(singleton1(v, i)[i])]. ((singleton1(v, i)[i]) = v)))

logic bool_eq12 : (int,percent) farray, int, int, (int,percent) farray, int,
  int -> bool

axiom bool_eq_def9 :
  (forall a:(int,percent) farray. forall a__first:int. forall a__last:int.
  forall b:(int,percent) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_151:int. ((((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) and
  (to_rep2((a[temp___idx_151])) = to_rep2((b[((b__first - a__first) + temp___idx_151)])))) or
  (not ((a__first <= temp___idx_151) and (temp___idx_151 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep2((a[temp___idx_151])) = to_rep2((b[((b__first - a__first) + temp___idx_151)]))))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,percent) farray. forall b:(int,percent) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_151:int. (((a__first <= temp___idx_151) and
  (temp___idx_151 <= a__last)) ->
  (to_rep2((a[temp___idx_151])) = to_rep2((b[((b__first - a__first) + temp___idx_151)])))))))))

logic compare1 : (int,percent) farray, int, int, (int,percent) farray, int,
  int -> int

axiom compare_def_eq1 :
  (forall a:(int,percent) farray. forall b:(int,percent) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq12(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt1 :
  (forall a:(int,percent) farray. forall b:(int,percent) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((compare1(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq12(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,percent) farray. forall b:(int,percent) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare1(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare1(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq12(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a[(j + 1)]))))))))))))

type t2

logic first4 : t2 -> character

logic last4 : t2 -> character

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep(first4(mk2(f, l))) = f) and (to_rep(last4(mk2(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t2 = { elts2 : (int,percent) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,percent) farray = (a).elts2

function of_array2(a: (int,percent) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep(first4((a).rt2))

function last5(a: us_t2) : int = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,percent) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,percent) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,percent) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,percent) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,percent) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,percent) farray. (0 <= object__alignment2(a)))

function bool_eq13(x: us_t2, y: us_t2) : bool = bool_eq12((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y).elts2,
  to_rep(first4((y).rt2)), to_rep(last4((y).rt2)))

logic user_eq10 : us_t2, us_t2 -> bool

logic dummy12 : (int,percent) farray

logic dummy13 : t2

type percent_array__ref = { percent_array__content : us_t2
}

function percent_array__ref___projection(a: percent_array__ref) : us_t2 =
  (a).percent_array__content

type t3

logic first6 : t3 -> character

logic last6 : t3 -> character

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep(first6(mk3(f, l))) = f) and (to_rep(last6(mk3(f, l))) = l)))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t3 = { elts3 : (int,percent) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,percent) farray = (a).elts3

function of_array3(a: (int,percent) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep(first6((a).rt3))

function last7(a: us_t3) : int = to_rep(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,percent) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,percent) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,percent) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,percent) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,percent) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,percent) farray. (0 <= object__alignment3(a)))

function bool_eq14(x: us_t3, y: us_t3) : bool = bool_eq12((x).elts3,
  to_rep(first6((x).rt3)), to_rep(last6((x).rt3)), (y).elts3,
  to_rep(first6((y).rt3)), to_rep(last6((y).rt3)))

logic user_eq11 : us_t3, us_t3 -> bool

logic dummy14 : (int,percent) farray

logic dummy15 : t3

type array_type__ref1 = { array_type__content1 : us_t3
}

function array_type__ref___2__projection(a: array_type__ref1) : us_t3 =
  (a).array_type__content1

type component_type1

predicate in_range8(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq15 : int, int -> bool

axiom bool_eq_def10 :
  (forall x:int. forall y:int [bool_eq15(x, y)]. (((x = y) -> (bool_eq15(x,
  y) = true)) and ((not (x = y)) -> (bool_eq15(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq12 : component_type1, component_type1 -> bool

logic dummy16 : component_type1

type component_type__ref1 = { component_type__content1 : component_type1
}

function component_type__ref___2__projection(a: component_type__ref1) : component_type1 =
  (a).component_type__content1

logic percent_count : us_t3, int -> int

logic percent_count__function_guard : int, us_t3, int -> prop

axiom percent_count__post_axiom :
  (forall source:(int,percent) farray. forall source1:t3.
  (forall pattern:int [percent_count({ elts3 = source; rt3 = source1 },
  pattern)]. (in_range8(pattern) -> in_range3(percent_count({ elts3 = source;
  rt3 = source1 }, pattern)))))

type t4

logic first8 : t4 -> character

logic last8 : t4 -> character

logic mk4 : int, int -> t4

axiom mk_def4 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range2(f) -> (in_range2(l) ->
  ((to_rep(first8(mk4(f, l))) = f) and (to_rep(last8(mk4(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t4 = { elts4 : (int,percent) farray; rt4 : t4
}

function to_array4(a: us_t4) : (int,percent) farray = (a).elts4

function of_array4(a: (int,percent) farray, f: int, l: int) : us_t4 = {
  elts4 = a; rt4 = mk4(f, l) }

function first9(a: us_t4) : int = to_rep(first8((a).rt4))

function last9(a: us_t4) : int = to_rep(last8((a).rt4))

logic length4 : us_t4 -> int

axiom length_def4 :
  (forall a:us_t4 [length4(a)]. (((first9(a) <= last9(a)) ->
  (length4(a) = ((last9(a) - first9(a)) + 1))) and
  ((not (first9(a) <= last9(a))) -> (length4(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,percent) farray -> int

logic value__component__size4 : int

logic object__component__size4 : (int,percent) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,percent) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,percent) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom4 : (0 <= value__component__size4)

axiom object__component__size_axiom4 :
  (forall a:(int,percent) farray. (0 <= object__component__size4(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,percent) farray. (0 <= object__alignment4(a)))

function bool_eq16(x: us_t4, y: us_t4) : bool = bool_eq12((x).elts4,
  to_rep(first8((x).rt4)), to_rep(last8((x).rt4)), (y).elts4,
  to_rep(first8((y).rt4)), to_rep(last8((y).rt4)))

logic user_eq13 : us_t4, us_t4 -> bool

logic dummy17 : (int,percent) farray

logic dummy18 : t4

type array_type__ref2 = { array_type__content2 : us_t4
}

function array_type__ref___3__projection(a: array_type__ref2) : us_t4 =
  (a).array_type__content2

logic attr__ATTRIBUTE_ADDRESS2 : int

type t17b

predicate in_range9(x: int) = ((0 <= x) and (x <= 12))

logic bool_eq17 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq17(x, y)]. (((x = y) -> (bool_eq17(x,
  y) = true)) and ((not (x = y)) -> (bool_eq17(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq14 : t17b, t17b -> bool

logic dummy19 : t17b

type t17b__ref = { t17b__content : t17b
}

function t17b__ref___projection(a: t17b__ref) : t17b = (a).t17b__content

logic my_percents__first : character

logic my_percents__last : character

logic attr__ATTRIBUTE_ADDRESS3 : int

logic generic_examples__my_percents__aggregate_def : int, int, int, int, int,
  int, int, int, int, int, int, int, int -> (int,percent) farray

axiom def_axiom :
  (forall temp___619:int. forall temp___620:int. forall temp___621:int.
  forall temp___622:int. forall temp___623:int. forall temp___624:int.
  forall temp___625:int. forall temp___626:int. forall temp___627:int.
  forall temp___628:int. forall temp___629:int. forall temp___630:int.
  forall temp___631:int.
  ((((((((((((((generic_examples__my_percents__aggregate_def(temp___619,
  temp___620, temp___621, temp___622, temp___623, temp___624, temp___625,
  temp___626, temp___627, temp___628, temp___629, temp___630,
  temp___631)[0]) = of_rep2(temp___619)) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[1]) = of_rep2(temp___620))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[2]) = of_rep2(temp___621))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[3]) = of_rep2(temp___622))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[4]) = of_rep2(temp___623))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[5]) = of_rep2(temp___624))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[6]) = of_rep2(temp___625))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[7]) = of_rep2(temp___626))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[8]) = of_rep2(temp___627))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[9]) = of_rep2(temp___628))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[10]) = of_rep2(temp___629))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[11]) = of_rep2(temp___630))) and
  ((generic_examples__my_percents__aggregate_def(temp___619, temp___620,
  temp___621, temp___622, temp___623, temp___624, temp___625, temp___626,
  temp___627, temp___628, temp___629, temp___630,
  temp___631)[12]) = of_rep2(temp___631))))

logic temp___String_Literal_634 : unit -> (int,character) farray

axiom temp___String_Literal_634__def_axiom :
  (((((((((((((((((to_rep((temp___String_Literal_634(void)[1])) = 72) and
  (to_rep((temp___String_Literal_634(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_634(void)[3])) = 119)) and
  (to_rep((temp___String_Literal_634(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_634(void)[5])) = 110)) and
  (to_rep((temp___String_Literal_634(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_634(void)[7])) = 119)) and
  (to_rep((temp___String_Literal_634(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_634(void)[9])) = 98)) and
  (to_rep((temp___String_Literal_634(void)[10])) = 114)) and
  (to_rep((temp___String_Literal_634(void)[11])) = 111)) and
  (to_rep((temp___String_Literal_634(void)[12])) = 119)) and
  (to_rep((temp___String_Literal_634(void)[13])) = 110)) and
  (to_rep((temp___String_Literal_634(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_634(void)[15])) = 99)) and
  (to_rep((temp___String_Literal_634(void)[16])) = 111)) and
  (to_rep((temp___String_Literal_634(void)[17])) = 119))

logic temp___String_Literal_635 : unit -> (int,character) farray

axiom temp___String_Literal_635__def_axiom :
  (((((((((((((((((to_rep((temp___String_Literal_635(void)[1])) = 72) and
  (to_rep((temp___String_Literal_635(void)[2])) = 111)) and
  (to_rep((temp___String_Literal_635(void)[3])) = 119)) and
  (to_rep((temp___String_Literal_635(void)[4])) = 32)) and
  (to_rep((temp___String_Literal_635(void)[5])) = 110)) and
  (to_rep((temp___String_Literal_635(void)[6])) = 111)) and
  (to_rep((temp___String_Literal_635(void)[7])) = 119)) and
  (to_rep((temp___String_Literal_635(void)[8])) = 32)) and
  (to_rep((temp___String_Literal_635(void)[9])) = 98)) and
  (to_rep((temp___String_Literal_635(void)[10])) = 114)) and
  (to_rep((temp___String_Literal_635(void)[11])) = 111)) and
  (to_rep((temp___String_Literal_635(void)[12])) = 119)) and
  (to_rep((temp___String_Literal_635(void)[13])) = 110)) and
  (to_rep((temp___String_Literal_635(void)[14])) = 32)) and
  (to_rep((temp___String_Literal_635(void)[15])) = 99)) and
  (to_rep((temp___String_Literal_635(void)[16])) = 111)) and
  (to_rep((temp___String_Literal_635(void)[17])) = 119))

logic default_width : int

logic default_base : int

logic the_count : int

logic my_percents : (int,percent) farray

logic o : int

logic o1 : (int,character) farray

logic o2 : t1

logic o3 : int

logic o4 : (int,percent) farray

logic o5 : t3

logic o6 : int

logic result : (int,percent) farray

logic my_percents1 : (int,percent) farray

logic result1 : int

logic the_count1 : int

logic result2 : int

logic the_count2 : int

logic result3 : int

logic the_count3 : int

axiom H : in_range4(default_width)

axiom H1 : in_range5(default_base)

axiom H2 : ((0 <= 2147483647) -> in_range3(the_count))

axiom H3 : (result = my_percents)

axiom H4 : (my_percents1 = generic_examples__my_percents__aggregate_def(5, 6,
  7, 5, 3, 4, 19, 16, 5, 23, 45, 4, 3))

axiom H5 : (to_rep(my_percents__first) = to_rep(first4(mk2(0, 12))))

axiom H6 : (to_rep(my_percents__last) = to_rep(last4(mk2(0, 12))))

axiom H7 : dynamic_property2(0, 255, to_rep(my_percents__first),
  to_rep(my_percents__last))

axiom H8 : ((o = count({ elts = temp___String_Literal_634(void); rt = mk(1,
  17) }, 119)) and in_range3(o))

axiom H9 : (result1 = the_count)

axiom H10 : (the_count1 = o)

 (* File "generic_examples.adb", line 59, characters 0-0 *)
goal WP_parameter_def : dynamic_property1(1, 2147483647, 1, 17)
