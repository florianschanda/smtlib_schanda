(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

type ta2D1

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : ta2D1, ta2D1 -> bool

logic dummy1 : ta2D1

type ta2D1__ref = { ta2D1__content : ta2D1
}

function ta2D1__ref___projection(a: ta2D1__ref) : ta2D1 = (a).ta2D1__content

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type map__ref1 = { map__content1 : (int,(int,integer) farray) farray
}

logic slide1 : (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq5 : (int,(int,integer) farray) farray, int, int,
  (int,(int,integer) farray) farray, int, int -> bool

axiom bool_eq_def4 :
  (forall a:(int,(int,integer) farray) farray. forall a__first:int.
  forall a__last:int. forall b:(int,(int,integer) farray) farray.
  forall b__first:int. forall b__last:int [bool_eq5(a, a__first, a__last, b,
  b__first, b__last)]. ((((((a__first <= a__last) and
  ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and (bool_eq3((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true)) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true))))) ->
  (bool_eq5(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___372 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp___377 : int, int -> (int,integer) farray

logic temp___382 : int, int -> (int,integer) farray

logic temp___387 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp___392 : int -> (int,integer) farray

logic temp___396 : int -> (int,integer) farray

logic temp___400 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp___405 : int, int -> (int,integer) farray

logic temp___410 : int, int -> (int,integer) farray

logic temp___415 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp___420 : int, int -> (int,integer) farray

logic temp___425 : int, int -> (int,integer) farray

logic temp___430 : (int,integer) farray,
  (int,integer) farray -> (int,(int,integer) farray) farray

logic temp___435 : int, int -> (int,integer) farray

logic temp___440 : int, int -> (int,integer) farray

axiom def_axiom :
  (forall temp___379:int. forall temp___380:int. ((in_range1(temp___379) and
  in_range1(temp___380)) -> ((to_rep((temp___377(temp___379,
  temp___380)[1])) = temp___379) and (to_rep((temp___377(temp___379,
  temp___380)[2])) = temp___380))))

axiom def_axiom1 :
  (forall temp___374:(int,integer) farray.
  forall temp___375:(int,integer) farray. (((temp___372(temp___374,
  temp___375)[1]) = temp___374) and ((temp___372(temp___374,
  temp___375)[2]) = temp___375)))

axiom def_axiom2 :
  (forall temp___384:int. forall temp___385:int. ((in_range1(temp___384) and
  in_range1(temp___385)) -> ((to_rep((temp___382(temp___384,
  temp___385)[1])) = temp___384) and (to_rep((temp___382(temp___384,
  temp___385)[2])) = temp___385))))

axiom def_axiom3 :
  (forall temp___389:(int,integer) farray.
  forall temp___390:(int,integer) farray.
  (forall temp___391:int. (((temp___391 = 2) -> ((temp___387(temp___389,
  temp___390)[temp___391]) = temp___389)) and ((not (temp___391 = 2)) ->
  ((temp___387(temp___389, temp___390)[temp___391]) = temp___390)))))

axiom def_axiom4 :
  (forall temp___394:int. (in_range1(temp___394) ->
  (forall temp___395:int.
  (to_rep((temp___392(temp___394)[temp___395])) = temp___394))))

axiom def_axiom5 :
  (forall temp___398:int. (in_range1(temp___398) ->
  (forall temp___399:int.
  (to_rep((temp___396(temp___398)[temp___399])) = temp___398))))

axiom def_axiom6 :
  (forall temp___407:int. forall temp___408:int. ((in_range1(temp___407) and
  in_range1(temp___408)) ->
  (forall temp___409:int. (((temp___409 = 1) ->
  (to_rep((temp___405(temp___407,
  temp___408)[temp___409])) = temp___407)) and ((not (temp___409 = 1)) ->
  (to_rep((temp___405(temp___407, temp___408)[temp___409])) = temp___408))))))

axiom def_axiom7 :
  (forall temp___402:(int,integer) farray.
  forall temp___403:(int,integer) farray. (((temp___400(temp___402,
  temp___403)[1]) = temp___402) and ((temp___400(temp___402,
  temp___403)[2]) = temp___403)))

axiom def_axiom8 :
  (forall temp___412:int. forall temp___413:int. ((in_range1(temp___412) and
  in_range1(temp___413)) ->
  (forall temp___414:int. (((temp___414 = 1) ->
  (to_rep((temp___410(temp___412,
  temp___413)[temp___414])) = temp___412)) and ((not (temp___414 = 1)) ->
  (to_rep((temp___410(temp___412, temp___413)[temp___414])) = temp___413))))))

axiom def_axiom9 :
  (forall temp___417:(int,integer) farray.
  forall temp___418:(int,integer) farray. (((temp___415(temp___417,
  temp___418)[1]) = temp___417) and ((temp___415(temp___417,
  temp___418)[2]) = temp___418)))

axiom def_axiom10 :
  (forall temp___422:int. forall temp___423:int. ((in_range1(temp___422) and
  in_range1(temp___423)) ->
  (forall temp___424:int. (((temp___424 = 1) ->
  (to_rep((temp___420(temp___422,
  temp___423)[temp___424])) = temp___422)) and ((not (temp___424 = 1)) ->
  (to_rep((temp___420(temp___422, temp___423)[temp___424])) = temp___423))))))

axiom def_axiom11 :
  (forall temp___427:int. forall temp___428:int. ((in_range1(temp___427) and
  in_range1(temp___428)) ->
  (forall temp___429:int. (((temp___429 = 1) ->
  (to_rep((temp___425(temp___427,
  temp___428)[temp___429])) = temp___427)) and ((not (temp___429 = 1)) ->
  (to_rep((temp___425(temp___427, temp___428)[temp___429])) = temp___428))))))

axiom def_axiom12 :
  (forall temp___432:(int,integer) farray.
  forall temp___433:(int,integer) farray. (((temp___430(temp___432,
  temp___433)[2]) = temp___432) and ((temp___430(temp___432,
  temp___433)[1]) = temp___433)))

axiom def_axiom13 :
  (forall temp___437:int. forall temp___438:int. ((in_range1(temp___437) and
  in_range1(temp___438)) ->
  (forall temp___439:int. (((temp___439 = 1) ->
  (to_rep((temp___435(temp___437,
  temp___438)[temp___439])) = temp___437)) and ((not (temp___439 = 1)) ->
  (to_rep((temp___435(temp___437, temp___438)[temp___439])) = temp___438))))))

axiom def_axiom14 :
  (forall temp___442:int. forall temp___443:int. ((in_range1(temp___442) and
  in_range1(temp___443)) ->
  (forall temp___444:int. (((temp___444 = 2) ->
  (to_rep((temp___440(temp___442,
  temp___443)[temp___444])) = temp___442)) and ((not (temp___444 = 2)) ->
  (to_rep((temp___440(temp___442, temp___443)[temp___444])) = temp___443))))))

 (* File "arr_aggregate.adb", line 40, characters 0-0 *)
goal WP_parameter_def :
  (forall one:int. forall a:(int,(int,integer) farray) farray. forall j:int.
  forall result:(int,(int,integer) farray) farray.
  forall a1:(int,(int,integer) farray) farray.
  forall result1:(int,(int,integer) farray) farray.
  forall a2:(int,(int,integer) farray) farray.
  forall result2:(int,(int,integer) farray) farray.
  forall a3:(int,(int,integer) farray) farray.
  forall result3:(int,(int,integer) farray) farray.
  forall a4:(int,(int,integer) farray) farray.
  forall result4:(int,(int,integer) farray) farray.
  forall a5:(int,(int,integer) farray) farray.
  forall a6:(int,(int,integer) farray) farray.
  forall a7:(int,(int,integer) farray) farray. (in_range1(one) ->
  (in_range1(b) -> ((one = 1) -> (((((b = 1) and (({ map__content1 = result
  } = { map__content1 = a }) and (a1 = temp___372(temp___377(one, 2),
  temp___382(one, 2))))) or ((not (b = 1)) and ((((b = 2) and (({
  map__content1 = result1 } = { map__content1 = a }) and
  (a2 = temp___387(temp___392(one), temp___396(one))))) or ((not (b = 2)) and
  ((((b = 3) and (({ map__content1 = result2 } = { map__content1 = a }) and
  (a3 = temp___400(temp___405(one, one), temp___410(1, one))))) or
  ((not (b = 3)) and ((((b = 4) and (({ map__content1 = result3 } = {
  map__content1 = a }) and (a4 = temp___415(temp___420(2, one), temp___425(2,
  one))))) or ((not (b = 4)) and ((({ map__content1 = result4 } = {
  map__content1 = a }) and (a5 = temp___430(temp___435(2, one), temp___440(2,
  one)))) and (a4 = a5)))) and (a3 = a4)))) and (a2 = a3)))) and
  (a1 = a2)))) and ((a1 = a6) and (a7 = a1))) -> ((not (b = 1)) ->
  ((not (b = 2)) -> ((not (b = 3)) -> ((not (b = 4)) -> (((1 <= j) and
  (j <= 2)) -> (1 <= one)))))))))))
