(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> (int,integer) farray

axiom concat_def :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : integer, int -> (int,integer) farray

axiom singleton_def :
  (forall v:integer.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) ->
  (to_rep((a[temp___idx_133])) = to_rep((b[((b__first - a__first) + temp___idx_133)])))))))))

logic compare : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq3(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq3(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq3(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq1 : us_t, us_t -> bool

logic dummy1 : (int,integer) farray

logic dummy2 : t

type arr__ref = { arr__content : us_t
}

function arr__ref___projection(a: arr__ref) : us_t = (a).arr__content

logic a_v1__first : integer

logic a_v1__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic a_v2__first : integer

logic a_v2__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b_v1 : (int,integer) farray

logic b_v11 : t

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c_v1 : (int,integer) farray

logic c_v11 : t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic b_v2 : (int,integer) farray

logic b_v21 : t

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c_v2 : (int,integer) farray

logic c_v21 : t

logic attr__ATTRIBUTE_ADDRESS5 : int

logic k_1 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic k_2 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS8 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy3 : integer

type t42b__ref = { t42b__content : integer
}

function t42b__ref___projection(a: t42b__ref) : integer = (a).t42b__content

logic attr__ATTRIBUTE_ADDRESS9 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy4 : integer

type t49b__ref = { t49b__content : integer
}

function t49b__ref___projection(a: t49b__ref) : integer = (a).t49b__content

logic attr__ATTRIBUTE_ADDRESS10 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type t62b__ref = { t62b__content : integer
}

function t62b__ref___projection(a: t62b__ref) : integer = (a).t62b__content

logic attr__ATTRIBUTE_ADDRESS11 : int

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type t73b__ref = { t73b__content : integer
}

function t73b__ref___projection(a: t73b__ref) : integer = (a).t73b__content

logic attr__ATTRIBUTE_ADDRESS12 : int

logic a_v1 : (int,integer) farray

logic a_v2 : (int,integer) farray

logic i_v1 : int

logic i_v11 : int

logic i_v2 : int

logic i_v21 : int

logic o : int

logic o1 : integer

logic o2 : int

logic o3 : int

logic o4 : integer

logic o5 : int

logic temp___433 : int

logic temp___431 : (int,integer) farray

logic m : int

logic o6 : int

logic o7 : integer

logic o8 : int

logic o9 : int

logic o10 : integer

logic o11 : int

logic o12 : integer

logic o13 : int

logic o14 : (int,integer) farray

logic m1 : int

logic o15 : int

logic o16 : integer

logic o17 : int

logic temp___443 : int

logic temp___440 : (int,integer) farray

logic temp___438 : int

logic m2 : int

logic o18 : int

logic o19 : integer

logic o20 : int

logic m3 : int

logic o21 : int

logic o22 : integer

logic o23 : int

logic temp___437 : int

logic o24 : int

logic o25 : integer

logic o26 : int

logic o27 : integer

logic o28 : int

logic o29 : (int,integer) farray

logic m4 : int

logic o30 : int

logic o31 : integer

logic o32 : int

logic m5 : int

logic o33 : int

logic o34 : integer

logic o35 : int

logic temp___451 : int

logic temp___449 : (int,integer) farray

logic m6 : int

logic o36 : int

logic o37 : integer

logic o38 : int

logic o39 : int

logic o40 : integer

logic o41 : int

logic o42 : integer

logic o43 : int

logic o44 : (int,integer) farray

logic m7 : int

logic o45 : int

logic o46 : integer

logic o47 : int

logic m8 : int

logic o48 : int

logic o49 : integer

logic o50 : int

logic m9 : int

logic o51 : int

logic o52 : integer

logic o53 : int

logic temp___464 : int

logic temp___462 : int

logic temp___460 : (int,integer) farray

logic m10 : int

logic o54 : int

logic o55 : integer

logic o56 : int

logic m11 : int

logic o57 : int

logic o58 : integer

logic o59 : int

logic temp___458 : int

logic o60 : int

logic o61 : integer

logic o62 : int

logic o63 : integer

logic o64 : int

logic o65 : (int,integer) farray

logic o66 : int

logic o67 : integer

logic o68 : int

logic o69 : int

logic o70 : integer

logic o71 : int

logic a_v11 : (int,integer) farray

logic a_v21 : (int,integer) farray

logic result : bool

logic result1 : bool

logic result2 : int

logic i_v12 : int

logic a_v12 : (int,integer) farray

logic i_v13 : int

logic result3 : (int,integer) farray

logic a_v13 : (int,integer) farray

logic result4 : int

logic i_v14 : int

logic a_v14 : (int,integer) farray

logic i_v15 : int

logic a_v15 : (int,integer) farray

logic i_v16 : int

logic a_v16 : (int,integer) farray

logic i_v17 : int

logic a_v17 : (int,integer) farray

logic i_v18 : int

logic a_v18 : (int,integer) farray

logic i_v19 : int

logic a_v19 : (int,integer) farray

logic i_v110 : int

logic result5 : int

logic i_v111 : int

logic a_v110 : (int,integer) farray

logic i_v112 : int

logic result6 : bool

logic result7 : (int,integer) farray

logic a_v111 : (int,integer) farray

logic result8 : int

logic i_v113 : int

logic a_v112 : (int,integer) farray

logic i_v114 : int

logic a_v113 : (int,integer) farray

logic i_v115 : int

logic a_v114 : (int,integer) farray

logic i_v116 : int

logic a_v115 : (int,integer) farray

logic i_v117 : int

logic a_v116 : (int,integer) farray

logic i_v118 : int

logic a_v117 : (int,integer) farray

logic i_v119 : int

logic a_v118 : (int,integer) farray

logic i_v120 : int

logic a_v119 : (int,integer) farray

logic i_v121 : int

logic result9 : bool

logic result10 : int

logic i_v22 : int

logic a_v22 : (int,integer) farray

logic i_v23 : int

logic result11 : (int,integer) farray

logic a_v23 : (int,integer) farray

logic result12 : int

logic i_v24 : int

logic a_v24 : (int,integer) farray

logic i_v25 : int

logic a_v25 : (int,integer) farray

logic i_v26 : int

logic a_v26 : (int,integer) farray

logic i_v27 : int

logic a_v27 : (int,integer) farray

logic i_v28 : int

logic a_v28 : (int,integer) farray

logic i_v29 : int

logic a_v29 : (int,integer) farray

logic i_v210 : int

logic a_v210 : (int,integer) farray

logic i_v211 : int

logic a_v211 : (int,integer) farray

logic i_v212 : int

logic result13 : bool

logic result14 : bool

logic result15 : int

logic i_v213 : int

logic a_v212 : (int,integer) farray

logic i_v214 : int

logic result16 : bool

logic result17 : (int,integer) farray

logic a_v213 : (int,integer) farray

logic result18 : int

logic i_v215 : int

logic a_v214 : (int,integer) farray

logic i_v216 : int

logic a_v215 : (int,integer) farray

logic i_v217 : int

logic a_v216 : (int,integer) farray

logic i_v218 : int

logic a_v217 : (int,integer) farray

logic i_v219 : int

logic a_v218 : (int,integer) farray

logic i_v220 : int

logic a_v219 : (int,integer) farray

logic i_v221 : int

logic a_v220 : (int,integer) farray

logic i_v222 : int

logic a_v221 : (int,integer) farray

logic i_v223 : int

logic a_v120 : (int,integer) farray

logic a_v222 : (int,integer) farray

logic i_v122 : int

logic i_v123 : int

logic i_v224 : int

logic i_v225 : int

logic a_v121 : (int,integer) farray

logic a_v223 : (int,integer) farray

logic i_v124 : int

logic i_v125 : int

logic i_v226 : int

logic i_v227 : int

axiom H : dynamic_property((- 2147483648), 2147483647, to_rep(a_v1__first),
  to_rep(a_v1__last))

axiom H1 : dynamic_property((- 2147483648), 2147483647, to_rep(a_v2__first),
  to_rep(a_v2__last))

axiom H2 : dynamic_property((- 2147483648), 2147483647, to_rep(first(b_v11)),
  to_rep(last(b_v11)))

axiom H3 : dynamic_property((- 2147483648), 2147483647, to_rep(first(c_v11)),
  to_rep(last(c_v11)))

axiom H4 : dynamic_property((- 2147483648), 2147483647, to_rep(first(b_v21)),
  to_rep(last(b_v21)))

axiom H5 : dynamic_property((- 2147483648), 2147483647, to_rep(first(c_v21)),
  to_rep(last(c_v21)))

axiom H6 : in_range1(k_1)

axiom H7 : in_range1(k_2)

axiom H8 : in_range1(i)

axiom H9 : ((to_rep(a_v1__first) = 1) and ((to_rep(first(b_v11)) = 1) and
  ((to_rep(first(c_v11)) = 1) and
  ((to_rep(a_v1__last) = to_rep(last(b_v11))) and
  ((to_rep(a_v1__last) = to_rep(last(c_v11))) and
  (((to_rep(first(b_v11)) <= k_1) and (k_1 <= to_rep(last(b_v11)))) and
  ((to_rep(a_v2__first) = 1) and ((to_rep(first(b_v21)) = 1) and
  ((to_rep(first(c_v21)) = 1) and
  ((to_rep(a_v2__last) = to_rep(last(b_v21))) and
  ((to_rep(a_v2__last) = to_rep(last(c_v21))) and
  (((to_rep(first(b_v21)) <= k_2) and (k_2 <= to_rep(last(b_v21)))) and
  (to_rep(a_v1__last) = to_rep(a_v2__last))))))))))))))

axiom H10 :
  ((forall m12:int. (((to_rep(a_v1__first) <= m12) and (m12 <= k_1)) ->
   (to_rep((a_v118[m12])) = to_rep((b_v1[m12]))))) and
  (forall m12:int. ((((k_1 + 1) <= m12) and (m12 <= to_rep(a_v1__last))) ->
  (to_rep((a_v118[m12])) = to_rep((c_v1[(m12 - k_1)]))))))

axiom H11 : (result10 = i_v2)

axiom H12 : (i_v22 = to_rep(a_v2__first))

axiom H13 : (to_rep(a_v2__first) <= i_v22)

axiom H14 : (i_v22 <= k_2)

axiom H15 :
  (forall m12:int. (((to_rep(a_v2__first) <= m12) and
  (m12 <= (i_v23 - 1))) -> (to_rep((a_v22[m12])) = to_rep((b_v2[m12])))))

axiom H16 :
  (((forall temp___450:int. (((to_rep(a_v2__first) <= temp___450) and
    (temp___450 <= to_rep(a_v2__last))) -> ((i_v23 <= temp___450) ->
    ((a_v22[temp___450]) = (a_v2[temp___450]))))) and
  ((to_rep(a_v2__first) <= k_2) -> dynamic_property3(to_rep(a_v2__first),
  k_2, i_v23))) and ((to_rep(a_v2__first) <= i_v23) and (i_v23 <= k_2)))

axiom H17 : ((to_rep(first(b_v21)) <= i_v23) and
  (i_v23 <= to_rep(last(b_v21))))

axiom H18 : (o39 = i_v23)

axiom H19 : (o40 = (b_v2[o39]))

axiom H20 : (o41 = to_rep(o40))

axiom H21 : (to_rep(o42) = o41)

 (* File "infoflow.ads", line 89, characters 0-0 *)
goal WP_parameter_def : (to_rep(a_v2__first) <= i_v23)
