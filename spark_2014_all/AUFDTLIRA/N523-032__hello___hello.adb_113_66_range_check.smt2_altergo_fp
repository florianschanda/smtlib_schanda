(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref___projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,character) farray, int, int, (int,character) farray,
  int, int -> bool

axiom bool_eq_def3 :
  (forall a:(int,character) farray. forall a__first:int. forall a__last:int.
  forall b:(int,character) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_78:int. ((((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) and
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))) or
  (not ((a__first <= temp___idx_78) and (temp___idx_78 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_78:int. (((a__first <= temp___idx_78) and
  (temp___idx_78 <= a__last)) ->
  (to_rep((a[temp___idx_78])) = to_rep((b[((b__first - a__first) + temp___idx_78)])))))))))

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic to_rep1 : integer -> int

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep1(first(mk(f, l))) = f) and (to_rep1(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,character) farray -> int

logic value__component__size : int

logic object__component__size : (int,character) farray -> int

logic value__alignment : int

logic object__alignment : (int,character) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,character) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,character) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,character) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,character) farray

logic dummy4 : t

logic to_string : us_image -> us_t

logic from_string : us_t -> us_image

type string__ref = { string__content : us_t
}

function string__ref___projection(a: string__ref) : us_t =
  (a).string__content

type language_level

predicate in_range3(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : language_level, language_level -> bool

logic dummy5 : language_level

type language_level__ref = { language_level__content : language_level
}

function language_level__ref___projection(a: language_level__ref) : language_level =
  (a).language_level__content

logic attr__ATTRIBUTE_ADDRESS : int

logic who : (int,character) farray

logic who1 : t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic to_caml_char2 : us_t, us_t, int -> bool

logic to_caml_char2__function_guard : bool, us_t, us_t, int -> prop

logic to_camel_case : us_t -> us_t

logic to_camel_case__function_guard : us_t, us_t -> prop

axiom to_camel_case__post_axiom :
  (forall str:(int,character) farray. forall str1:t [to_camel_case({ elts =
  str; rt = str1 })]. (((to_rep1(first((to_camel_case({ elts = str; rt = str1
  })).rt)) = to_rep1(first(str1))) and ((to_rep1(last((to_camel_case({ elts =
  str; rt = str1 })).rt)) = to_rep1(last(str1))) and (to_caml_char2({ elts =
  str; rt = str1 }, to_camel_case({ elts = str; rt = str1 }),
  to_rep1(last(str1))) = true))) and dynamic_property(1, 2147483647,
  to_rep1(first((to_camel_case({ elts = str; rt = str1 })).rt)),
  to_rep1(last((to_camel_case({ elts = str; rt = str1 })).rt)))))

logic hello : (int,character) farray

logic hello1 : t

logic attr__ATTRIBUTE_ADDRESS2 : int

logic temp___String_Literal_151 : unit -> (int,character) farray

axiom temp___String_Literal_151__def_axiom :
  (((((to_rep((temp___String_Literal_151(void)[1])) = 72) and
  (to_rep((temp___String_Literal_151(void)[2])) = 101)) and
  (to_rep((temp___String_Literal_151(void)[3])) = 108)) and
  (to_rep((temp___String_Literal_151(void)[4])) = 108)) and
  (to_rep((temp___String_Literal_151(void)[5])) = 111))

logic temp___String_Literal_152 : unit -> (int,character) farray

axiom temp___String_Literal_152__def_axiom :
  ((to_rep((temp___String_Literal_152(void)[1])) = 72) and
  (to_rep((temp___String_Literal_152(void)[2])) = 105))

logic prefix : (int,character) farray

logic prefix1 : t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic temp___String_Literal_153 : unit -> (int,character) farray

axiom temp___String_Literal_153__def_axiom : true

logic temp___String_Literal_154 : unit -> (int,character) farray

axiom temp___String_Literal_154__def_axiom :
  (to_rep((temp___String_Literal_154(void)[1])) = 32)

logic temp___String_Literal_579 : unit -> (int,character) farray

axiom temp___String_Literal_579__def_axiom :
  (to_rep((temp___String_Literal_579(void)[1])) = 33)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq7 : bool, bool -> bool

axiom bool_eq_def5 :
  (forall x:bool. forall y:bool [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range4(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE4 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> bool

logic to_lower : int -> int

logic to_lower__function_guard : int, int -> prop

logic to_upper : int -> int

logic to_upper__function_guard : int, int -> prop

axiom to_caml_char2__post_axiom : true

axiom to_caml_char2__def_axiom :
  (forall str:(int,character) farray. forall str1:t.
  forall res:(int,character) farray. forall res1:t.
  (forall last2:int [to_caml_char2({ elts = str; rt = str1 }, { elts = res;
  rt = res1 }, last2)]. (((to_caml_char2({ elts = str; rt = str1 }, { elts =
  res; rt = res1 }, last2) = true) ->
  (forall j:int. (((to_rep1(first(str1)) <= j) and (j <= last2)) ->
  (((j = to_rep1(first(str1))) ->
  (to_rep((res[j])) = to_upper(to_rep((str[j]))))) and
  ((not (j = to_rep1(first(str1)))) -> (((((97 <= to_rep((str[(j - 1)]))) ->
  (not (to_rep((str[(j - 1)])) <= 122))) and
  ((65 <= to_rep((str[(j - 1)]))) ->
  (not (to_rep((str[(j - 1)])) <= 90)))) ->
  (to_rep((res[j])) = to_upper(to_rep((str[j]))))) and
  ((not (((97 <= to_rep((str[(j - 1)]))) ->
  (not (to_rep((str[(j - 1)])) <= 122))) and
  ((65 <= to_rep((str[(j - 1)]))) ->
  (not (to_rep((str[(j - 1)])) <= 90))))) ->
  (to_rep((res[j])) = to_lower(to_rep((str[j]))))))))))) and
  ((forall j:int. (((to_rep1(first(str1)) <= j) and (j <= last2)) ->
   (((j = to_rep1(first(str1))) and
   (to_rep((res[j])) = to_upper(to_rep((str[j]))))) or
   ((not (j = to_rep1(first(str1)))) and
   (((((97 <= to_rep((str[(j - 1)]))) ->
   (not (to_rep((str[(j - 1)])) <= 122))) and
   ((65 <= to_rep((str[(j - 1)]))) ->
   (not (to_rep((str[(j - 1)])) <= 90)))) and
   (to_rep((res[j])) = to_upper(to_rep((str[j]))))) or
   ((not (((97 <= to_rep((str[(j - 1)]))) ->
   (not (to_rep((str[(j - 1)])) <= 122))) and
   ((65 <= to_rep((str[(j - 1)]))) ->
   (not (to_rep((str[(j - 1)])) <= 90))))) and
   (to_rep((res[j])) = to_lower(to_rep((str[j])))))))))) ->
  (to_caml_char2({ elts = str; rt = str1 }, { elts = res; rt = res1 },
  last2) = true)))))

axiom prefix__def_axiom : (((length({ elts = who; rt = who1 }) = 0) ->
  ((prefix = temp___String_Literal_153(void)) and (prefix1 = mk(1, 0)))) and
  ((not (length({ elts = who; rt = who1 }) = 0)) ->
  ((prefix = temp___String_Literal_154(void)) and (prefix1 = mk(1, 1)))))

axiom to_lower__post_axiom :
  (forall item:int [to_lower(item)]. (in_range2(item) ->
  in_range2(to_lower(item))))

axiom to_upper__post_axiom :
  (forall item:int [to_upper(item)]. (in_range2(item) ->
  in_range2(to_upper(item))))

logic g_lang_level : int

logic hello__say_hello__hello__assume : (int,character) farray

logic hello__say_hello__hello__assume1 : t

logic hello__say_hello__prefix__assume : (int,character) farray

logic hello__say_hello__prefix__assume1 : t

logic temp___578 : (int,character) farray

logic temp___5781 : t

logic o : int

logic o1 : int

logic o2 : int

logic o3 : int

logic o4 : int

logic o5 : int

logic temp___577 : (int,character) farray

logic temp___5771 : t

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : int

logic temp___580 : (int,character) farray

logic temp___5801 : t

logic o12 : int

logic o13 : int

logic o14 : int

logic o15 : int

logic o16 : int

logic o17 : int

axiom H : in_range3(g_lang_level)

axiom H1 : dynamic_property(1, 2147483647, to_rep1(first(who1)),
  to_rep1(last(who1)))

axiom H2 : ((g_lang_level = 0) ->
  (temp___String_Literal_151(void) = hello__say_hello__hello__assume))

axiom H3 : ((g_lang_level = 0) -> (mk(1,
  5) = hello__say_hello__hello__assume1))

axiom H4 : ((not (g_lang_level = 0)) ->
  (temp___String_Literal_152(void) = hello__say_hello__hello__assume))

axiom H5 : ((not (g_lang_level = 0)) -> (mk(1,
  2) = hello__say_hello__hello__assume1))

axiom H6 : ((hello__say_hello__hello__assume = hello) and
  (hello__say_hello__hello__assume1 = hello1))

axiom H7 : dynamic_property(1, 2147483647, to_rep1(first(hello1)),
  to_rep1(last(hello1)))

axiom H8 : ((length({ elts = who; rt = who1 }) = 0) ->
  (temp___String_Literal_153(void) = hello__say_hello__prefix__assume))

axiom H9 : ((length({ elts = who; rt = who1 }) = 0) -> (mk(1,
  0) = hello__say_hello__prefix__assume1))

axiom H10 : ((not (length({ elts = who; rt = who1 }) = 0)) ->
  (temp___String_Literal_154(void) = hello__say_hello__prefix__assume))

axiom H11 : ((not (length({ elts = who; rt = who1 }) = 0)) -> (mk(1,
  1) = hello__say_hello__prefix__assume1))

axiom H12 : ((hello__say_hello__prefix__assume = prefix) and
  (hello__say_hello__prefix__assume1 = prefix1))

axiom H13 : dynamic_property(1, 2147483647, to_rep1(first(prefix1)),
  to_rep1(last(prefix1)))

axiom H14 : (({ elts = temp___578; rt = temp___5781 } = to_camel_case({
  elts = who; rt = who1 })) and (dynamic_property(1, 2147483647,
  to_rep1(first(temp___5781)), to_rep1(last(temp___5781))) and
  ((to_rep1(first(temp___5781)) = to_rep1(first(who1))) and
  ((to_rep1(last(temp___5781)) = to_rep1(last(who1))) and (to_caml_char2({
  elts = who; rt = who1 }, { elts = temp___578; rt = temp___5781 },
  to_rep1(last(who1))) = true)))))

axiom H15 : ((length({ elts = hello; rt = hello1 }) = 0) ->
  (prefix = temp___577))

axiom H16 : ((length({ elts = hello; rt = hello1 }) = 0) ->
  (mk(to_rep1(first(prefix1)), to_rep1(last(prefix1))) = temp___5771))

axiom H17 : ((not (length({ elts = hello; rt = hello1 }) = 0)) ->
  ((to_rep1(first(prefix1)) <= to_rep1(last(prefix1))) ->
  (o = ((to_rep1(last(prefix1)) - to_rep1(first(prefix1))) + 1))))

axiom H18 : ((not (length({ elts = hello; rt = hello1 }) = 0)) ->
  ((not (to_rep1(first(prefix1)) <= to_rep1(last(prefix1)))) -> (o = 0)))

axiom H19 : ((not (length({ elts = hello; rt = hello1 }) = 0)) ->
  ((to_rep1(first(hello1)) <= to_rep1(last(hello1))) ->
  (o1 = ((to_rep1(last(hello1)) - to_rep1(first(hello1))) + 1))))

axiom H20 : ((not (length({ elts = hello; rt = hello1 }) = 0)) ->
  ((not (to_rep1(first(hello1)) <= to_rep1(last(hello1)))) -> (o1 = 0)))

axiom H21 : ((not (length({ elts = hello; rt = hello1 }) = 0)) ->
  (o2 = (o1 + o)))

axiom H22 : ((not (length({ elts = hello; rt = hello1 }) = 0)) ->
  (o3 = (to_rep1(first(hello1)) + o2)))

axiom H23 : ((not (length({ elts = hello; rt = hello1 }) = 0)) ->
  (o4 = (o3 - 1)))

axiom H24 : ((not (length({ elts = hello; rt = hello1 }) = 0)) ->
  ((o5 = o4) and in_range1(o4)))

axiom H25 : ((not (length({ elts = hello; rt = hello1 }) = 0)) ->
  (concat(hello, to_rep1(first(hello1)), to_rep1(last(hello1)), prefix,
  to_rep1(first(prefix1)), to_rep1(last(prefix1))) = temp___577))

axiom H26 : ((not (length({ elts = hello; rt = hello1 }) = 0)) ->
  (mk(to_rep1(first(hello1)), o5) = temp___5771))

axiom H27 : ((length({ elts = temp___577; rt = temp___5771 }) = 0) ->
  (temp___578 = temp___580))

axiom H28 : ((length({ elts = temp___577; rt = temp___5771 }) = 0) ->
  (mk(to_rep1(first(temp___5781)),
  to_rep1(last(temp___5781))) = temp___5801))

axiom H29 : ((not (length({ elts = temp___577; rt = temp___5771 }) = 0)) ->
  ((to_rep1(first(temp___5781)) <= to_rep1(last(temp___5781))) ->
  (o6 = ((to_rep1(last(temp___5781)) - to_rep1(first(temp___5781))) + 1))))

axiom H30 : ((not (length({ elts = temp___577; rt = temp___5771 }) = 0)) ->
  ((not (to_rep1(first(temp___5781)) <= to_rep1(last(temp___5781)))) ->
  (o6 = 0)))

axiom H31 : ((not (length({ elts = temp___577; rt = temp___5771 }) = 0)) ->
  ((to_rep1(first(temp___5771)) <= to_rep1(last(temp___5771))) ->
  (o7 = ((to_rep1(last(temp___5771)) - to_rep1(first(temp___5771))) + 1))))

axiom H32 : ((not (length({ elts = temp___577; rt = temp___5771 }) = 0)) ->
  ((not (to_rep1(first(temp___5771)) <= to_rep1(last(temp___5771)))) ->
  (o7 = 0)))

axiom H33 : ((not (length({ elts = temp___577; rt = temp___5771 }) = 0)) ->
  (o8 = (o7 + o6)))

axiom H34 : ((not (length({ elts = temp___577; rt = temp___5771 }) = 0)) ->
  (o9 = (to_rep1(first(temp___5771)) + o8)))

axiom H35 : ((not (length({ elts = temp___577; rt = temp___5771 }) = 0)) ->
  (o10 = (o9 - 1)))

axiom H36 : ((not (length({ elts = temp___577; rt = temp___5771 }) = 0)) ->
  ((o11 = o10) and in_range1(o10)))

axiom H37 : ((not (length({ elts = temp___577; rt = temp___5771 }) = 0)) ->
  (concat(temp___577, to_rep1(first(temp___5771)),
  to_rep1(last(temp___5771)), temp___578, to_rep1(first(temp___5781)),
  to_rep1(last(temp___5781))) = temp___580))

axiom H38 : ((not (length({ elts = temp___577; rt = temp___5771 }) = 0)) ->
  (mk(to_rep1(first(temp___5771)), o11) = temp___5801))

axiom H39 : (not (length({ elts = temp___580; rt = temp___5801 }) = 0))

axiom H40 : ((1 <= 1) -> (o12 = ((1 - 1) + 1)))

axiom H41 : ((not (1 <= 1)) -> (o12 = 0))

axiom H42 : ((to_rep1(first(temp___5801)) <= to_rep1(last(temp___5801))) ->
  (o13 = ((to_rep1(last(temp___5801)) - to_rep1(first(temp___5801))) + 1)))

axiom H43 :
  ((not (to_rep1(first(temp___5801)) <= to_rep1(last(temp___5801)))) ->
  (o13 = 0))

axiom H44 : (o14 = (o13 + o12))

axiom H45 : (o15 = (to_rep1(first(temp___5801)) + o14))

axiom H46 : (o16 = (o15 - 1))

 (* File "hello.adb", line 90, characters 0-0 *)
goal WP_parameter_def : in_range1(o16)
