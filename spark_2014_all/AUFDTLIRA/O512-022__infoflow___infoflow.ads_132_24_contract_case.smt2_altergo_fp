(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq1 : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq3 : (int,integer) farray, int, int, (int,integer) farray, int,
  int -> bool

axiom bool_eq_def2 :
  (forall a:(int,integer) farray. forall a__first:int. forall a__last:int.
  forall b:(int,integer) farray. forall b__first:int. forall b__last:int
  [bool_eq3(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_155:int. ((((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) and
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))) or
  (not ((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))) ->
  (bool_eq3(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,integer) farray -> int

logic value__component__size : int

logic object__component__size : (int,integer) farray -> int

logic value__alignment : int

logic object__alignment : (int,integer) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,integer) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,integer) farray. (0 <= object__alignment(a)))

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq1 : us_t, us_t -> bool

logic dummy1 : (int,integer) farray

logic dummy2 : t

type arr__ref = { arr__content : us_t
}

function arr__ref___projection(a: arr__ref) : us_t = (a).arr__content

logic a_v1__first : integer

logic a_v1__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic a_v2__first : integer

logic a_v2__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b_v1 : (int,integer) farray

logic b_v11 : t

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c_v1 : (int,integer) farray

logic c_v11 : t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic b_v2 : (int,integer) farray

logic b_v21 : t

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c_v2 : (int,integer) farray

logic c_v21 : t

logic attr__ATTRIBUTE_ADDRESS5 : int

logic k_1 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic k_2 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS8 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy3 : integer

type t42b__ref = { t42b__content : integer
}

function t42b__ref___projection(a: t42b__ref) : integer = (a).t42b__content

logic attr__ATTRIBUTE_ADDRESS9 : int

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy4 : integer

type t49b__ref = { t49b__content : integer
}

function t49b__ref___projection(a: t49b__ref) : integer = (a).t49b__content

logic attr__ATTRIBUTE_ADDRESS10 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq7 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy5 : integer

type t62b__ref = { t62b__content : integer
}

function t62b__ref___projection(a: t62b__ref) : integer = (a).t62b__content

logic attr__ATTRIBUTE_ADDRESS11 : int

predicate dynamic_property4(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy6 : integer

type t73b__ref = { t73b__content : integer
}

function t73b__ref___projection(a: t73b__ref) : integer = (a).t73b__content

logic attr__ATTRIBUTE_ADDRESS12 : int

 (* File "infoflow.ads", line 89, characters 0-0 *)
goal WP_parameter_def :
  (forall i_v2:int. forall temp___507:int. forall temp___505:int.
  forall temp___503:(int,integer) farray. forall temp___501:int.
  forall o:int. forall o1:integer. forall o2:int. forall o3:integer.
  forall o4:int. forall o5:(int,integer) farray. forall i_v1:int.
  forall i_v11:int. forall a_v1:(int,integer) farray. forall i_v12:int.
  forall a_v11:(int,integer) farray. forall i_v13:int.
  forall a_v2:(int,integer) farray. forall i_v21:int.
  forall a_v21:(int,integer) farray. forall i_v22:int. forall result:int.
  forall i_v23:int. forall a_v22:(int,integer) farray. forall i_v24:int.
  forall result1:(int,integer) farray. forall a_v23:(int,integer) farray.
  forall a_v24:map__ref. forall i_v25:int__ref.
  forall a_v25:(int,integer) farray. forall i_v26:int. forall a_v26:map__ref.
  forall i_v27:int__ref. forall a_v27:(int,integer) farray. forall i_v28:int.
  forall a_v12:map__ref. forall a_v28:map__ref. forall i_v14:int__ref.
  forall i_v15:int__ref. forall i_v29:int__ref. forall i_v210:int__ref.
  forall a_v13:(int,integer) farray. forall a_v29:(int,integer) farray.
  forall i_v16:int. forall i_v17:int. forall i_v211:int. forall i_v212:int.
  (dynamic_property((- 2147483648), 2147483647, to_rep(a_v1__first),
  to_rep(a_v1__last)) -> (dynamic_property((- 2147483648), 2147483647,
  to_rep(a_v2__first), to_rep(a_v2__last)) ->
  (dynamic_property((- 2147483648), 2147483647, to_rep(first(b_v11)),
  to_rep(last(b_v11))) -> (dynamic_property((- 2147483648), 2147483647,
  to_rep(first(c_v11)), to_rep(last(c_v11))) ->
  (dynamic_property((- 2147483648), 2147483647, to_rep(first(b_v21)),
  to_rep(last(b_v21))) -> (dynamic_property((- 2147483648), 2147483647,
  to_rep(first(c_v21)), to_rep(last(c_v21))) -> (in_range1(k_1) ->
  (in_range1(k_2) -> (in_range1(i) -> (((to_rep(a_v1__first) = 1) and
  ((to_rep(first(b_v11)) = 1) and ((to_rep(first(c_v11)) = 1) and
  ((to_rep(a_v1__last) = to_rep(last(b_v11))) and
  ((to_rep(a_v1__last) = to_rep(last(c_v11))) and
  (((to_rep(first(b_v11)) <= k_1) and (k_1 <= to_rep(last(b_v11)))) and
  ((to_rep(a_v2__first) = 1) and ((to_rep(first(b_v21)) = 1) and
  ((to_rep(first(c_v21)) = 1) and
  ((to_rep(a_v2__last) = to_rep(last(b_v21))) and
  ((to_rep(a_v2__last) = to_rep(last(c_v21))) and
  (((to_rep(first(b_v21)) <= k_2) and (k_2 <= to_rep(last(b_v21)))) and
  (to_rep(a_v1__last) = to_rep(a_v2__last)))))))))))))) ->
  ((((((forall m:int. (((to_rep(a_v1__first) <= m) and (m <= k_1)) ->
       (to_rep((a_v1[m])) = to_rep((b_v1[m]))))) and
  (forall m:int. ((((k_1 + 1) <= m) and (m <= to_rep(a_v1__last))) ->
  (to_rep((a_v1[m])) = to_rep((c_v1[(m - k_1)])))))) and
  (forall m:int. (((to_rep(a_v2__first) <= m) and (m <= k_2)) ->
  (to_rep((a_v2[m])) = to_rep((b_v2[m])))))) and
  (((temp___507 = (k_2 + 1)) and in_range1((k_2 + 1))) and
  (((result = i_v2) and (i_v23 = temp___507)) and
  ((((temp___507 <= i_v23) and (i_v23 <= to_rep(a_v2__last))) and
  ((((temp___505 = i_v23) and ((temp___503 = a_v2) and
  (((forall m:int. (((to_rep(a_v2__first) <= m) and (m <= k_2)) ->
    (to_rep((a_v22[m])) = to_rep((b_v2[m]))))) and
  (forall m:int. ((((k_2 + 1) <= m) and (m <= (i_v24 - 1))) ->
  (to_rep((a_v22[m])) = to_rep((c_v2[(m - k_2)])))))) and
  ((((forall temp___504:int. (((to_rep(a_v2__first) <= temp___504) and
     (temp___504 <= to_rep(a_v2__last))) -> ((i_v24 <= temp___504) ->
     ((a_v22[temp___504]) = (temp___503[temp___504]))))) and
  (((k_2 + 1) <= to_rep(a_v2__last)) -> dynamic_property4((k_2 + 1),
  to_rep(a_v2__last), i_v24))) and (((k_2 + 1) <= i_v24) and
  (i_v24 <= to_rep(a_v2__last)))) and
  (((((((((temp___501 = (i_v24 - k_2)) and in_range1((i_v24 - k_2))) and
  (((to_rep(first(c_v21)) <= temp___501) and
  (temp___501 <= to_rep(last(c_v21)))) and (o = temp___501))) and
  (o1 = (c_v2[o]))) and (o2 = to_rep(o1))) and (to_rep(o3) = o2)) and
  ((((to_rep(a_v2__first) <= i_v24) and (i_v24 <= to_rep(a_v2__last))) and
  (o4 = i_v24)) and (o5 = (a_v22[o4 <- o3])))) and ((result1 = a_v22) and
  (a_v23 = o5))) and (i_v24 = to_rep(a_v2__last))))))) and (((i_v25 = {
  int__content = i_v24 }) and (a_v24 = { map__content = a_v23 })) and
  ((i_v26 = i_v24) and (a_v25 = a_v23)))) and (((i_v27 = i_v25) and
  (a_v26 = a_v24)) and ((i_v28 = i_v26) and (a_v27 = a_v25))))) or
  ((not ((temp___507 <= i_v23) and (i_v23 <= to_rep(a_v2__last)))) and
  (((i_v27 = { int__content = i_v23 }) and (a_v26 = { map__content = a_v2
  })) and ((i_v28 = i_v23) and (a_v27 = a_v21)))))))) and
  (((i_v210 = i_v27) and ((i_v29 = { int__content = i_v21 }) and ((i_v15 = {
  int__content = i_v12 }) and ((i_v14 = { int__content = i_v1 }) and
  ((a_v28 = a_v26) and (a_v12 = { map__content = a_v1 })))))) and
  ((i_v212 = i_v28) and ((i_v211 = i_v22) and ((i_v17 = i_v13) and
  ((i_v16 = i_v11) and ((a_v29 = a_v27) and (a_v13 = a_v11)))))))) ->
  ((((to_rep(a_v1__first) <= i) and (((i <= k_1) and (match_bool(bool_eq(k_1,
  k_2), bool_eq(to_rep((b_v1[i])), to_rep((b_v2[i]))), false) = true)) or
  ((not (i <= k_1)) and (match_bool(bool_eq(k_1, k_2), false,
  false) = true)))) or ((not (to_rep(a_v1__first) <= i)) and
  (match_bool(bool_eq(k_1, k_2), false, false) = true))) ->
  (to_rep(((a_v12).map__content[i])) = to_rep(((a_v28).map__content[i]))))))))))))))))
