(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort index_t 0)
(declare-fun index_tqtint (index_t) Int)
(assert (forall ((i index_t)) (and (<= 1 (index_tqtint i)) (<= (index_tqtint i) 1000))))
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (index_t index_t) Bool)
(declare-const dummy index_t)
(declare-datatypes () ((index_t__ref (mk_index_t__ref (index_t__content index_t)))))
(define-fun index_t__ref___projection ((a index_t__ref)) index_t (index_t__content a))
(define-fun dynamic_invariant ((temp___expr_215 Int) (temp___is_init_211 Bool) (temp___skip_constant_212 Bool) (temp___do_toplevel_213 Bool) (temp___do_typ_inv_214 Bool)) Bool (=> (or (= temp___is_init_211 true) (<= 1 1000)) (in_range1 temp___expr_215)))
(declare-sort component_t 0)
(declare-fun component_tqtint (component_t) Int)
(assert (forall ((i component_t)) (and (<= 0 (component_tqtint i)) (<= (component_tqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (component_t component_t) Bool)
(declare-const dummy1 component_t)
(declare-datatypes () ((component_t__ref (mk_component_t__ref (component_t__content component_t)))))
(define-fun component_t__ref___projection ((a component_t__ref)) component_t (component_t__content a))
(define-fun to_rep ((x component_t)) Int (component_tqtint x))
(declare-fun of_rep (Int) component_t)
(assert (forall ((x component_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x component_t)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int component_t))))))
(declare-fun slide ((Array Int component_t) Int Int) (Array Int component_t))
(assert (forall ((a (Array Int component_t))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int component_t))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int component_t)) (a__first Int) (a__last Int) (b (Array Int component_t)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int component_t)) (b (Array Int component_t))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const first Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const last Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-fun temp_____aggregate_def_589 ((Array Int component_t) Int Int Int) (Array Int component_t))
(define-fun dynamic_invariant1 ((temp___expr_229 Int) (temp___is_init_225 Bool) (temp___skip_constant_226 Bool) (temp___do_toplevel_227 Bool) (temp___do_typ_inv_228 Bool)) Bool (=> (or (= temp___is_init_225 true) (<= 0 2147483647)) (in_range2 temp___expr_229)))
(declare-const rliteral component_t)
(assert (= (component_tqtint rliteral) 0))
(assert (forall ((temp___591 (Array Int component_t))) (forall ((temp___592 Int) (temp___593 Int) (temp___594 Int)) (let ((temp___590 (temp_____aggregate_def_589 temp___591 temp___592 temp___593 temp___594))) (=> (and (and (dynamic_invariant temp___592 true true true true) (dynamic_invariant temp___593 true true true true)) (dynamic_invariant1 temp___594 true true true true)) (forall ((temp___595 Int)) (ite (and (<= temp___592 temp___595) (<= temp___595 temp___593)) (= (select temp___590 temp___595) rliteral) (= (select temp___590 temp___595) (select temp___591 temp___595)))))))))
(declare-const a (Array Int component_t))
(declare-const j Int)
(declare-const temp___611 (Array Int component_t))
(declare-const a1 (Array Int component_t))
(declare-const result Int)
(declare-const j1 Int)
(declare-const a2 (Array Int component_t))
(declare-const j2 Int)
(declare-const result1 (Array Int component_t))
(declare-const a3 (Array Int component_t))
(declare-const a4 (Array Int component_t))
(declare-const j3 Int)
(declare-const a5 (Array Int component_t))
(declare-const j4 Int)
(declare-const a6 (Array Int component_t))
(declare-const j5 Int)
(declare-const a7 (Array Int component_t))
(declare-const j6 Int)
(declare-const a8 (Array Int component_t))
(declare-const j7 Int)
(declare-const a9 (Array Int component_t))
(declare-const j8 Int)
(define-fun a10 () map__ref (mk_map__ref a6))
(assert (in_range1 first))
(assert (in_range1 last))
(assert (= result j))
(assert (= j1 first))
(assert (=> (and (<= first j1) (<= j1 last)) (= temp___611 a)))
(assert (=> (and (<= first j1) (<= j1 last)) (and (forall ((temp___612 Int)) (=> (and (<= 1 temp___612) (<= temp___612 1000)) (=> (or (< last temp___612) (or (< temp___612 first) (<= j2 temp___612))) (= (select a2 temp___612) (select temp___611 temp___612))))) (and (<= first j2) (<= j2 last)))))
(assert (=> (and (<= first j1) (<= j1 last)) (= result1 a2)))
(assert (=> (and (<= first j1) (<= j1 last)) (= a3 (store a2 j2 rliteral))))
(assert (=> (and (<= first j1) (<= j1 last)) (= j2 last)))
(assert (=> (and (<= first j1) (<= j1 last)) (= j2 j3)))
(assert (=> (and (<= first j1) (<= j1 last)) (= a3 a4)))
(assert (=> (and (<= first j1) (<= j1 last)) (= j4 j2)))
(assert (=> (and (<= first j1) (<= j1 last)) (= a5 a3)))
(assert (=> (and (<= first j1) (<= j1 last)) (= (mk_int__ref j5) (mk_int__ref j3))))
(assert (=> (and (<= first j1) (<= j1 last)) (= a10 (mk_map__ref a4))))
(assert (=> (and (<= first j1) (<= j1 last)) (= j6 j4)))
(assert (=> (and (<= first j1) (<= j1 last)) (= a7 a5)))
(assert (=> (not (and (<= first j1) (<= j1 last))) (= j1 j5)))
(assert (=> (not (and (<= first j1) (<= j1 last))) (= a10 (mk_map__ref a))))
(assert (=> (not (and (<= first j1) (<= j1 last))) (= j6 j1)))
(assert (=> (not (and (<= first j1) (<= j1 last))) (= a7 a1)))
(assert (= j7 j5))
(assert (= (mk_map__ref a8) a10))
(assert (= j8 j6))
(assert (= a9 a7))
(assert (not (= (bool_eq a8 1 1000 (temp_____aggregate_def_589 a first last 0) 1 1000) true)))
(check-sat)
(exit)
