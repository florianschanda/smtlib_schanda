(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort slot 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (slot slot) Bool)
(declare-const dummy1 slot)
(declare-datatypes () ((slot__ref (mk_slot__ref (slot__content slot)))))
(define-fun slot__ref___projection ((a slot__ref)) slot (slot__content a))
(declare-fun to_rep1 (slot) Int)
(declare-fun of_rep1 (Int) slot)
(assert (forall ((x slot)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x slot)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int slot))))))
(declare-fun slide ((Array Int slot) Int Int) (Array Int slot))
(assert (forall ((a (Array Int slot))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int slot))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int slot)) (a__first Int) (a__last Int) (b (Array Int slot)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep1 (select a temp___idx_173)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_173))))))) true false))
(assert (forall ((a (Array Int slot)) (b (Array Int slot))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_173 Int)) (=> (and (<= a__first temp___idx_173) (<= temp___idx_173 a__last)) (= (to_rep1 (select a temp___idx_173)) (to_rep1 (select b (+ (- b__first a__first) temp___idx_173)))))))))))
(declare-const dummy2 (Array Int slot))
(declare-const value__size Int)
(declare-fun object__size ((Array Int slot)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int slot)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int slot)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int slot))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int slot))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int slot))) (<= 0 (object__alignment a))))
(declare-fun user_eq2 ((Array Int slot) (Array Int slot)) Bool)
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int (Array Int slot)))))))
(declare-fun slide1 ((Array Int (Array Int slot)) Int Int) (Array Int (Array Int slot)))
(assert (forall ((a (Array Int (Array Int slot)))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int (Array Int slot)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int (Array Int slot))) (a__first Int) (a__last Int) (b (Array Int (Array Int slot))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_174 Int)) (=> (and (<= a__first temp___idx_174) (<= temp___idx_174 a__last)) (= (bool_eq (select a temp___idx_174) 1 3 (select b (+ (- b__first a__first) temp___idx_174)) 1 3) true)))) true false))
(assert (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_174 Int)) (=> (and (<= a__first temp___idx_174) (<= temp___idx_174 a__last)) (= (bool_eq (select a temp___idx_174) 1 3 (select b (+ (- b__first a__first) temp___idx_174)) 1 3) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun num_free_slots ((Array Int (Array Int slot))) Int)
(declare-fun num_free_slots__function_guard (Int (Array Int (Array Int slot))) Bool)
(declare-sort natural 0)
(declare-fun naturalqtint (natural) Int)
(assert (forall ((i natural)) (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (natural natural) Bool)
(declare-const dummy3 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool) (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool) (temp___do_typ_inv_38 Bool)) Bool (=> (or (= temp___is_init_35 true) (<= 0 2147483647)) (in_range3 temp___expr_39)))
(declare-fun count_free_slots (Int Int (Array Int (Array Int slot))) Int)
(declare-fun count_free_slots__function_guard (Int Int Int (Array Int (Array Int slot))) Bool)
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (dynamic_invariant1 (num_free_slots tictactoe__my_board) true false true true) :pattern ((num_free_slots tictactoe__my_board)))))
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (= (num_free_slots tictactoe__my_board) (count_free_slots 3 3 tictactoe__my_board)) :pattern ((num_free_slots tictactoe__my_board)))))
(declare-fun is_full ((Array Int (Array Int slot))) Bool)
(declare-fun is_full__function_guard (Bool (Array Int (Array Int slot))) Bool)
(assert true)
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (= (= (is_full tictactoe__my_board) true) (= (num_free_slots tictactoe__my_board) 0)) :pattern ((is_full tictactoe__my_board)))))
(declare-sort pos 0)
(declare-fun posqtint (pos) Int)
(assert (forall ((i pos)) (and (<= 1 (posqtint i)) (<= (posqtint i) 3))))
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (pos pos) Bool)
(declare-const dummy4 pos)
(declare-datatypes () ((pos__ref (mk_pos__ref (pos__content pos)))))
(define-fun pos__ref___projection ((a pos__ref)) pos (pos__content a))
(define-fun to_rep2 ((x pos)) Int (posqtint x))
(declare-fun of_rep2 (Int) pos)
(assert (forall ((x pos)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x pos)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__tictactoe__position__x pos) (rec__tictactoe__position__y pos)))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) pos (rec__tictactoe__position__x a))
(define-fun us_split_fields_Y__projection ((a us_split_fields)) pos (rec__tictactoe__position__y a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep2 (rec__tictactoe__position__x (us_split_fields1 a))) (to_rep2 (rec__tictactoe__position__x (us_split_fields1 b)))) (= (to_rep2 (rec__tictactoe__position__y (us_split_fields1 a))) (to_rep2 (rec__tictactoe__position__y (us_split_fields1 b))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const tictactoe__position__x__first__bit Int)
(declare-const tictactoe__position__x__last__bit Int)
(declare-const tictactoe__position__x__position Int)
(assert (<= 0 tictactoe__position__x__first__bit))
(assert (< tictactoe__position__x__first__bit tictactoe__position__x__last__bit))
(assert (<= 0 tictactoe__position__x__position))
(declare-const tictactoe__position__y__first__bit Int)
(declare-const tictactoe__position__y__last__bit Int)
(declare-const tictactoe__position__y__position Int)
(assert (<= 0 tictactoe__position__y__first__bit))
(assert (< tictactoe__position__y__first__bit tictactoe__position__y__last__bit))
(assert (<= 0 tictactoe__position__y__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((position__ref (mk_position__ref (position__content us_rep)))))
(define-fun position__ref___projection ((a position__ref)) us_rep (position__content a))
(declare-datatypes () ((map__ref2 (mk_map__ref2 (map__content2 (Array Int us_rep))))))
(declare-fun slide2 ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide2 a first first) a) :pattern ((slide2 a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide2 a old_first new_first) i))))))))
(define-fun bool_eq3 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_175 Int)) (=> (and (<= a__first temp___idx_175) (<= temp___idx_175 a__last)) (= (bool_eq2 (select a temp___idx_175) (select b (+ (- b__first a__first) temp___idx_175))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq3 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_175 Int)) (=> (and (<= a__first temp___idx_175) (<= temp___idx_175 a__last)) (= (bool_eq2 (select a temp___idx_175) (select b (+ (- b__first a__first) temp___idx_175))) true))))))))
(declare-const dummy6 (Array Int us_rep))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int us_rep)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int us_rep)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int us_rep)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int us_rep))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq6 ((Array Int us_rep) (Array Int us_rep)) Bool)
(declare-datatypes () ((map__ref3 (mk_map__ref3 (map__content3 (Array Int (Array Int us_rep)))))))
(declare-fun slide3 ((Array Int (Array Int us_rep)) Int Int) (Array Int (Array Int us_rep)))
(assert (forall ((a (Array Int (Array Int us_rep)))) (forall ((first Int)) (! (= (slide3 a first first) a) :pattern ((slide3 a first first))))))
(assert (forall ((a (Array Int (Array Int us_rep)))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide3 a old_first new_first) i))))))))
(define-fun bool_eq4 ((a (Array Int (Array Int us_rep))) (a__first Int) (a__last Int) (b (Array Int (Array Int us_rep))) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_176 Int)) (=> (and (<= a__first temp___idx_176) (<= temp___idx_176 a__last)) (= (bool_eq3 (select a temp___idx_176) 1 3 (select b (+ (- b__first a__first) temp___idx_176)) 1 3) true)))) true false))
(assert (forall ((a (Array Int (Array Int us_rep))) (b (Array Int (Array Int us_rep)))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq4 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_176 Int)) (=> (and (<= a__first temp___idx_176) (<= temp___idx_176 a__last)) (= (bool_eq3 (select a temp___idx_176) 1 3 (select b (+ (- b__first a__first) temp___idx_176)) 1 3) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun won ((Array Int (Array Int slot)) (Array Int (Array Int us_rep))) Int)
(declare-fun won__function_guard (Int (Array Int (Array Int slot)) (Array Int (Array Int us_rep))) Bool)
(define-fun dynamic_invariant2 ((temp___expr_577 Int) (temp___is_init_573 Bool) (temp___skip_constant_574 Bool) (temp___do_toplevel_575 Bool) (temp___do_typ_inv_576 Bool)) Bool (=> (or (= temp___is_init_573 true) (<= 0 2)) (in_range2 temp___expr_577)))
(assert (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (forall ((tictactoe__all_solutions (Array Int (Array Int us_rep)))) (! (dynamic_invariant2 (won tictactoe__my_board tictactoe__all_solutions) true false true true) :pattern ((won tictactoe__my_board tictactoe__all_solutions))))))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-datatypes () ((map__ref4 (mk_map__ref4 (map__content4 (Array Int integer))))))
(declare-fun slide4 ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide4 a first first) a) :pattern ((slide4 a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide4 a old_first new_first) i))))))))
(define-fun bool_eq5 ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_177 Int)) (=> (and (<= a__first temp___idx_177) (<= temp___idx_177 a__last)) (= (to_rep (select a temp___idx_177)) (to_rep (select b (+ (- b__first a__first) temp___idx_177))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq5 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_177 Int)) (=> (and (<= a__first temp___idx_177) (<= temp___idx_177 a__last)) (= (to_rep (select a temp___idx_177)) (to_rep (select b (+ (- b__first a__first) temp___idx_177)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-const attr__ATTRIBUTE_ADDRESS11 Int)
(declare-fun tictactoe__computer_play__target_scores__aggregate_def (Int Int) (Array Int integer))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 2))
(declare-const rliteral1 integer)
(assert (= (integerqtint rliteral1) 20))
(assert (forall ((temp___860 Int) (temp___861 Int)) (let ((temp___859 (tictactoe__computer_play__target_scores__aggregate_def temp___860 temp___861))) (=> (and (dynamic_invariant temp___860 true true true true) (dynamic_invariant temp___861 true true true true)) (and (= (select temp___859 1) rliteral) (= (select temp___859 2) rliteral1))))))
(define-fun dynamic_invariant3 ((temp___expr_584 Int) (temp___is_init_580 Bool) (temp___skip_constant_581 Bool) (temp___do_toplevel_582 Bool) (temp___do_typ_inv_583 Bool)) Bool (=> (or (= temp___is_init_580 true) (<= 1 3)) (in_range4 temp___expr_584)))
(declare-fun one_free_slot (Int Int (Array Int (Array Int slot))) Int)
(declare-fun one_free_slot__function_guard (Int Int Int (Array Int (Array Int slot))) Bool)
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y true true true true)) (dynamic_invariant (one_free_slot x y tictactoe__my_board) true false true true)) :pattern ((one_free_slot x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y true true true true)) (= (one_free_slot x y tictactoe__my_board) (ite (= (to_rep1 (let ((temp___615 (select tictactoe__my_board x))) (select temp___615 y))) 0) 1 0))) :pattern ((one_free_slot x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y true true true true)) (dynamic_invariant (count_free_slots x y tictactoe__my_board) true false true true)) :pattern ((count_free_slots x y tictactoe__my_board))))))
(assert (forall ((x Int) (y Int)) (forall ((tictactoe__my_board (Array Int (Array Int slot)))) (! (=> (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y true true true true)) (= (count_free_slots x y tictactoe__my_board) (+ (+ (+ (+ (one_free_slot 1 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 1 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 1 3 tictactoe__my_board) 0)) (ite (<= 2 x) (+ (+ (one_free_slot 2 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 2 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 2 3 tictactoe__my_board) 0)) 0)) (ite (<= 3 x) (+ (+ (one_free_slot 3 1 tictactoe__my_board) (ite (<= 2 y) (one_free_slot 3 2 tictactoe__my_board) 0)) (ite (<= 3 y) (one_free_slot 3 3 tictactoe__my_board) 0)) 0)))) :pattern ((count_free_slots x y tictactoe__my_board))))))
(declare-const rliteral2 pos)
(assert (= (posqtint rliteral2) 1))
(declare-const my_board (Array Int (Array Int slot)))
(declare-const all_solutions (Array Int (Array Int us_rep)))
(declare-const score Int)
(declare-const target_scores (Array Int integer))
(declare-const p__split_fields pos)
(declare-const p__split_fields1 pos)
(declare-const found Bool)
(declare-const target_score Int)
(declare-const c38b Int)
(declare-const i Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const result map__ref4)
(declare-const target_scores1 (Array Int integer))
(declare-const result1 us_split_fields__ref)
(declare-const p__split_fields2 us_split_fields)
(declare-const result2 bool__ref)
(declare-const found1 Bool)
(declare-const result3 int__ref)
(declare-const target_score1 Int)
(declare-const result4 int__ref)
(declare-const c38b1 Int)
(declare-const result5 int__ref)
(declare-const score1 Int)
(declare-const result6 int__ref)
(declare-const i1 Int)
(declare-const result7 us_split_fields__ref)
(declare-const p__split_fields3 us_split_fields)
(declare-const result8 int__ref)
(declare-const score2 Int)
(declare-const result9 int__ref)
(declare-const score3 Int)
(declare-const result10 int__ref)
(declare-const i2 Int)
(declare-const result11 us_split_fields__ref)
(declare-const p__split_fields4 us_split_fields)
(assert (and (not (= (is_full my_board) true)) (= (won my_board all_solutions) 0)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 score)))
(assert (= result (mk_map__ref4 target_scores)))
(assert (= target_scores1 (tictactoe__computer_play__target_scores__aggregate_def 2 20)))
(assert (= result1 (mk___split_fields__ref (mk___split_fields p__split_fields p__split_fields1))))
(assert (= p__split_fields2 (mk___split_fields rliteral2 rliteral2)))
(assert (= result2 (mk_bool__ref found)))
(assert (= found1 (distinct 0 0)))
(assert (= result3 (mk_int__ref target_score)))
(assert (= target_score1 1))
(assert (= result4 (mk_int__ref c38b)))
(assert (= c38b1 1))
(assert (= result5 (mk_int__ref score)))
(assert (= score1 0))
(assert (= result6 (mk_int__ref i)))
(assert (= i1 1))
(assert (= result7 (mk___split_fields__ref p__split_fields2)))
(assert (= p__split_fields3 (us_split_fields1 (select (select all_solutions c38b1) i1))))
(assert (=> (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 2) (and (= o (+ score1 1)) (in_range1 (+ score1 1)))))
(assert (=> (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 2) (= result8 (mk_int__ref score1))))
(assert (=> (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 2) (= score2 o)))
(assert (=> (not (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 2)) (=> (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 1) (and (= o1 (+ score1 10)) (in_range1 (+ score1 10))))))
(assert (=> (not (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 2)) (=> (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 1) (= result9 (mk_int__ref score1)))))
(assert (=> (not (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 2)) (=> (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 1) (= score3 o1))))
(assert (=> (not (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 2)) (=> (not (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 1)) (= score3 score1))))
(assert (=> (not (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields3))) (to_rep2 (rec__tictactoe__position__y p__split_fields3)))) 2)) (= score2 score3)))
(assert (= result10 (mk_int__ref i1)))
(assert (= i2 2))
(assert (= result11 (mk___split_fields__ref p__split_fields3)))
(assert (= p__split_fields4 (us_split_fields1 (select (select all_solutions c38b1) i2))))
(assert (= (to_rep1 (select (select my_board (to_rep2 (rec__tictactoe__position__x p__split_fields4))) (to_rep2 (rec__tictactoe__position__y p__split_fields4)))) 2))
(assert (not (in_range1 (+ score2 1))))
(check-sat)
(exit)
