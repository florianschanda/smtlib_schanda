(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(declare-fun integerqtint (integer) Int)
(assert (forall ((i integer)) (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun to_rep ((x integer)) Int (integerqtint x))
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort positive 0)
(declare-fun positiveqtint (positive) Int)
(assert (forall ((i positive)) (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))
(define-fun of_array ((a (Array Int integer)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((t_arr__ref (mk_t_arr__ref (t_arr__content us_t)))))
(define-fun t_arr__ref___projection ((a t_arr__ref)) us_t (t_arr__content a))
(declare-fun equal_subrange (us_t Int us_t) Bool)
(declare-fun equal_subrange__function_guard (Bool us_t Int us_t) Bool)
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(define-fun dynamic_invariant1 ((temp___expr_159 us_t) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (not (= temp___skip_constant_156 true)) (dynamic_property 1 2147483647 (first1 temp___expr_159) (last1 temp___expr_159))))
(define-fun dynamic_property1 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (integer integer) Bool)
(declare-const dummy3 integer)
(declare-datatypes () ((t17s__ref (mk_t17s__ref (t17s__content integer)))))
(define-fun t17s__ref___projection ((a t17s__ref)) integer (t17s__content a))
(declare-sort t1 0)
(declare-fun first2 (t1) integer)
(declare-fun last2 (t1) integer)
(declare-fun mk1 (Int Int) t1)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)))))
(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property1 range_first range_last low) (dynamic_property1 range_first range_last high))))))
(declare-datatypes () ((us_t1 (mk___t1 (elts1 (Array Int integer)) (rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))
(define-fun of_array1 ((a (Array Int integer)) (f Int) (l Int)) us_t1 (mk___t1 a (mk1 f l)))
(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))
(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))
(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a)) (+ (- (last3 a) (first3 a)) 1) 0))
(declare-const value__size1 Int)
(declare-fun object__size1 ((Array Int integer)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int integer)) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 ((Array Int integer)) Int)
(assert (<= 0 value__size1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size1 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment1 a))))
(define-fun bool_eq2 ((x us_t1) (y us_t1)) Bool (bool_eq (elts1 x) (to_rep (first2 (rt1 x))) (to_rep (last2 (rt1 x))) (elts1 y) (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))
(declare-fun user_eq4 (us_t1 us_t1) Bool)
(declare-const dummy4 us_t1)
(declare-datatypes () ((t18s__ref (mk_t18s__ref (t18s__content us_t1)))))
(define-fun t18s__ref___projection ((a t18s__ref)) us_t1 (t18s__content a))
(assert true)
(assert (forall ((a us_t) (b us_t)) (forall ((j Int)) (! (= (= (equal_subrange a j b) true) (= (let ((temp___177 (let ((temp___176 (+ (- j 1) (length b)))) (of_array1 (to_array a) j temp___176)))) (bool_eq (to_array1 temp___177) (first3 temp___177) (last3 temp___177) (to_array b) (first1 b) (last1 b))) true)) :pattern ((equal_subrange a j b))))))
(declare-fun has_sub_range_in_prefix (us_t Int us_t) Bool)
(declare-fun has_sub_range_in_prefix__function_guard (Bool us_t Int us_t) Bool)
(assert true)
(assert (forall ((a us_t) (b us_t)) (forall ((last4 Int)) (! (= (= (has_sub_range_in_prefix a last4 b) true) (exists ((j Int)) (and (and (<= (first1 a) j) (<= j last4)) (= (equal_subrange a j b) true)))) :pattern ((has_sub_range_in_prefix a last4 b))))))
(declare-fun has_sub_range (us_t us_t) Bool)
(declare-fun has_sub_range__function_guard (Bool us_t us_t) Bool)
(assert true)
(assert (forall ((a us_t) (b us_t)) (! (= (= (has_sub_range a b) true) (= (has_sub_range_in_prefix a (- (+ (last1 a) 1) (length b)) b) true)) :pattern ((has_sub_range a b)))))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__types__option__exists Bool) (rec__types__option__value integer)))))
(define-fun us_split_fields_Exists__projection ((a us_split_fields)) Bool (rec__types__option__exists a))
(define-fun us_split_fields_Value__projection ((a us_split_fields)) integer (rec__types__option__value a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq3 ((a us_rep) (b us_rep)) Bool (ite (and (= (rec__types__option__exists (us_split_fields1 a)) (rec__types__option__exists (us_split_fields1 b))) (= (to_rep (rec__types__option__value (us_split_fields1 a))) (to_rep (rec__types__option__value (us_split_fields1 b))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep)) (<= 0 (object__alignment2 a))))
(declare-const types__option__exists__first__bit Int)
(declare-const types__option__exists__last__bit Int)
(declare-const types__option__exists__position Int)
(assert (<= 0 types__option__exists__first__bit))
(assert (< types__option__exists__first__bit types__option__exists__last__bit))
(assert (<= 0 types__option__exists__position))
(declare-const types__option__value__first__bit Int)
(declare-const types__option__value__last__bit Int)
(declare-const types__option__value__position Int)
(assert (<= 0 types__option__value__first__bit))
(assert (< types__option__value__first__bit types__option__value__last__bit))
(assert (<= 0 types__option__value__position))
(declare-fun user_eq5 (us_rep us_rep) Bool)
(declare-const dummy5 us_rep)
(declare-datatypes () ((option__ref (mk_option__ref (option__content us_rep)))))
(define-fun option__ref___projection ((a option__ref)) us_rep (option__content a))
(declare-const a us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(define-fun dynamic_property3 ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq6 (integer integer) Bool)
(declare-const dummy6 integer)
(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content integer)))))
(define-fun t4b__ref___projection ((a1 t4b__ref)) integer (t4b__content a1))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool) (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool) (temp___do_typ_inv_45 Bool)) Bool (=> (or (= temp___is_init_42 true) (<= 1 2147483647)) (in_range2 temp___expr_46)))
(declare-const rliteral integer)
(assert (= (integerqtint rliteral) 1))
(declare-const result____split_fields Bool)
(declare-const result____split_fields1 integer)
(declare-const i Int)
(declare-const search_ter_p__search__result Bool)
(declare-const search_ter_p__search__result1 integer)
(declare-const temp___222 Int)
(declare-const o Int)
(declare-const o1 Int)
(declare-const o2 Int)
(declare-const temp___223 Int)
(declare-const temp___229 Bool)
(declare-const temp___2291 integer)
(declare-const temp___228 Int)
(declare-const temp___230 Int)
(declare-const o3 integer)
(declare-const o4 Bool)
(declare-const o5 integer)
(declare-const temp___227 Bool)
(declare-const temp___2271 integer)
(declare-const o6 integer)
(declare-const o7 Bool)
(declare-const o8 integer)
(declare-const temp___2272 Bool)
(declare-const temp___2273 integer)
(declare-const i1 Int)
(declare-const search_ter_p__search__result2 Bool)
(declare-const search_ter_p__search__result3 integer)
(declare-const result Bool)
(declare-const result1 integer)
(declare-const result____split_fields2 Bool)
(declare-const result____split_fields3 integer)
(declare-const result2 Bool)
(declare-const result3 Bool)
(declare-const result4 integer)
(declare-const search_ter_p__search__result4 us_rep)
(declare-const result5 int__ref)
(declare-const i2 Int)
(declare-const temp___2301 Int)
(declare-const result6 Bool)
(declare-const result7 us_split_fields__ref)
(declare-const result____split_fields4 us_split_fields)
(declare-const result8 us_split_fields__ref)
(declare-const result____split_fields5 us_split_fields)
(declare-const result9 option__ref)
(declare-const search_ter_p__search__result5 us_rep)
(declare-const result____split_fields6 us_split_fields)
(declare-const i3 Int)
(declare-const search_ter_p__search__result6 us_rep)
(declare-const temp___2302 Int)
(declare-const result10 int__ref)
(declare-const temp___2303 Int)
(declare-const result11 int__ref)
(declare-const i4 Int)
(declare-const result12 Bool)
(declare-const result13 us_split_fields__ref)
(declare-const result____split_fields7 us_split_fields)
(declare-const result14 us_split_fields__ref)
(declare-const result____split_fields8 us_split_fields)
(declare-const result15 option__ref)
(declare-const search_ter_p__search__result7 us_rep)
(declare-const result____split_fields9 us_split_fields__ref)
(declare-const i5 int__ref)
(declare-const search_ter_p__search__result8 option__ref)
(declare-const temp___2304 int__ref)
(declare-const result____split_fields10 us_split_fields)
(declare-const i6 Int)
(declare-const search_ter_p__search__result9 us_rep)
(declare-const temp___2305 Int)
(declare-const result____split_fields11 us_split_fields__ref)
(declare-const i7 int__ref)
(declare-const search_ter_p__search__result10 option__ref)
(declare-const result____split_fields12 us_split_fields)
(declare-const i8 Int)
(declare-const search_ter_p__search__result11 us_rep)
(declare-const result____split_fields13 us_split_fields__ref)
(declare-const i9 int__ref)
(declare-const search_ter_p__search__result12 option__ref)
(declare-const result____split_fields14 us_split_fields)
(declare-const i10 Int)
(declare-const search_ter_p__search__result13 us_rep)
(declare-const result16 option__ref)
(declare-const search_ter_p__search__result14 us_rep)
(declare-const search_ter_p__search__result15 option__ref)
(declare-const search_ter_p__search__result16 us_rep)
(declare-const result____split_fields15 us_split_fields__ref)
(declare-const i11 int__ref)
(declare-const search_ter_p__search__result17 option__ref)
(declare-const result____split_fields16 us_split_fields)
(declare-const i12 Int)
(declare-const search_ter_p__search__result18 us_rep)
(declare-const result____split_fields17 us_split_fields__ref)
(declare-const i13 int__ref)
(declare-const search_ter_p__search__result19 option__ref)
(declare-const result____split_fields18 us_split_fields)
(declare-const i14 Int)
(declare-const search_ter_p__search__result20 us_rep)
(declare-const result____split_fields19 us_split_fields__ref)
(declare-const i15 int__ref)
(declare-const search_ter_p__search__result21 option__ref)
(declare-const result____split_fields20 us_split_fields)
(declare-const i16 Int)
(declare-const search_ter_p__search__result22 us_rep)
(define-fun result____split_fields21 () us_split_fields (mk___split_fields result____split_fields2 result____split_fields3))
(define-fun i17 () int__ref (mk_int__ref i))
(assert (dynamic_invariant1 a true false true true))
(assert (dynamic_invariant1 b true false true true))
(assert (and (< (to_rep (last (rt a))) 2147483647) (<= (to_rep (first (rt b))) (to_rep (last (rt b))))))
(assert (= (mk___split_fields__ref (mk___split_fields result result1)) (mk___split_fields__ref (mk___split_fields result____split_fields result____split_fields1))))
(assert (= (distinct 0 0) result____split_fields2))
(assert (= rliteral result____split_fields3))
(assert (or (and (and (and (= search_ter_p__search__result19 (mk_option__ref search_ter_p__search__result4)) (and (= i13 i17) (= result____split_fields17 (mk___split_fields__ref result____split_fields21)))) (and (= search_ter_p__search__result20 search_ter_p__search__result4) (and (= i14 i1) (= result____split_fields18 result____split_fields21)))) (and (ite (< (length a) (length b)) (= result2 true) (= result2 (ite (= (length b) 0) true false))) (and (= result2 true) (and (and (= result3 search_ter_p__search__result) (= result4 search_ter_p__search__result1)) (= search_ter_p__search__result4 (mk___rep result____split_fields21)))))) (and (and (ite (< (length a) (length b)) (= result2 true) (= result2 (ite (= (length b) 0) true false))) (and (not (= result2 true)) (and (= search_ter_p__search__result4 (mk___rep (mk___split_fields search_ter_p__search__result search_ter_p__search__result1))) (= search_ter_p__search__result4 (mk___rep (mk___split_fields search_ter_p__search__result2 search_ter_p__search__result3)))))) (and (and (and (= search_ter_p__search__result19 search_ter_p__search__result17) (and (= i13 i11) (= result____split_fields17 result____split_fields15))) (and (= search_ter_p__search__result20 search_ter_p__search__result18) (and (= i14 i12) (= result____split_fields18 result____split_fields16)))) (or (and (and (and (= search_ter_p__search__result17 search_ter_p__search__result8) (and (= i11 i5) (= result____split_fields15 result____split_fields9))) (and (= search_ter_p__search__result18 search_ter_p__search__result9) (and (= i12 i6) (= result____split_fields16 result____split_fields10)))) (and (= temp___222 (to_rep (first (rt a)))) (and (and (and (and (= o (length b)) (in_range1 (length b))) (and (and (= o1 (+ (to_rep (last (rt a))) 1)) (in_range1 (+ (to_rep (last (rt a))) 1))) (= o2 (- o1 o)))) (and (= temp___223 o2) (in_range1 o2))) (and (and (= result5 i17) (= i2 temp___222)) (and (and (<= temp___222 i2) (<= i2 temp___223)) (and (and (= temp___229 result____split_fields2) (= temp___2291 result____split_fields3)) (and (= temp___228 i2) (and (= 0 temp___230) (or (and (and (and (= temp___2304 (mk_int__ref temp___230)) (and (= search_ter_p__search__result8 (mk_option__ref search_ter_p__search__result5)) (and (= i5 (mk_int__ref i2)) (= result____split_fields9 (mk___split_fields__ref result____split_fields5))))) (and (= temp___2305 temp___2301) (and (= search_ter_p__search__result9 search_ter_p__search__result5) (and (= i6 i2) (= result____split_fields10 result____split_fields5))))) (and (and (= result6 (equal_subrange a i2 b)) (= (= result6 true) (= (bool_eq (elts a) (to_rep (first2 (mk1 i2 (+ (- i2 1) (length b))))) (to_rep (last2 (mk1 i2 (+ (- i2 1) (length b))))) (elts b) (to_rep (first (rt b))) (to_rep (last (rt b)))) true))) (and (= result6 true) (and (and (= result7 (mk___split_fields__ref result____split_fields21)) (= result____split_fields4 (mk___split_fields (distinct 1 0) result____split_fields3))) (and (and (and (and (= (to_rep o3) i2) (and (= (rec__types__option__exists result____split_fields4) o4) (= o3 o5))) (and (= temp___227 o4) (= temp___2271 o5))) (and (= result8 (mk___split_fields__ref result____split_fields4)) (= result____split_fields5 (mk___split_fields temp___227 temp___2271)))) (and (= result9 (mk_option__ref search_ter_p__search__result4)) (= search_ter_p__search__result5 (mk___rep result____split_fields5)))))))) (and (and (and (= result6 (equal_subrange a i2 b)) (= (= result6 true) (= (bool_eq (elts a) (to_rep (first2 (mk1 i2 (+ (- i2 1) (length b))))) (to_rep (last2 (mk1 i2 (+ (- i2 1) (length b))))) (elts b) (to_rep (first (rt b))) (to_rep (last (rt b)))) true))) (and (not (= result6 true)) (and (= search_ter_p__search__result5 search_ter_p__search__result4) (= result____split_fields5 result____split_fields21)))) (and (and (and (= temp___2304 (mk_int__ref temp___2303)) (and (= search_ter_p__search__result8 (mk_option__ref search_ter_p__search__result7)) (and (= i5 (mk_int__ref i4)) (= result____split_fields9 (mk___split_fields__ref result____split_fields8))))) (and (= temp___2305 temp___2303) (and (= search_ter_p__search__result9 search_ter_p__search__result7) (and (= i6 i4) (= result____split_fields10 result____split_fields8))))) (and (and (not (= (has_sub_range_in_prefix a i3 b) true)) (not (= (rec__types__option__exists result____split_fields6) true))) (and (and (=> (<= (to_rep (first (rt a))) (- (+ (to_rep (last (rt a))) 1) (length b))) (dynamic_property3 (to_rep (first (rt a))) (- (+ (to_rep (last (rt a))) 1) (length b)) i3)) (and (<= (to_rep (first (rt a))) i3) (<= i3 (- (+ (to_rep (last (rt a))) 1) (length b))))) (and (and (= result10 (mk_int__ref temp___2302)) (= temp___2303 i3)) (and (not (= i3 temp___223)) (and (and (= result11 (mk_int__ref i3)) (= i4 (+ i3 1))) (and (and (= result12 (equal_subrange a i4 b)) (= (= result12 true) (= (bool_eq (elts a) (to_rep (first2 (mk1 i4 (+ (- i4 1) (length b))))) (to_rep (last2 (mk1 i4 (+ (- i4 1) (length b))))) (elts b) (to_rep (first (rt b))) (to_rep (last (rt b)))) true))) (and (= result12 true) (and (and (= result13 (mk___split_fields__ref result____split_fields6)) (= result____split_fields7 (mk___split_fields (distinct 1 0) (rec__types__option__value result____split_fields6)))) (and (and (and (and (= (to_rep o6) i4) (and (= (rec__types__option__exists result____split_fields7) o7) (= o6 o8))) (and (= temp___2272 o7) (= temp___2273 o8))) (and (= result14 (mk___split_fields__ref result____split_fields7)) (= result____split_fields8 (mk___split_fields temp___2272 temp___2273)))) (and (= result15 (mk_option__ref search_ter_p__search__result6)) (= search_ter_p__search__result7 (mk___rep result____split_fields8))))))))))))))))))))))) (and (and (and (and (and (= o (length b)) (in_range1 (length b))) (and (and (= o1 (+ (to_rep (last (rt a))) 1)) (in_range1 (+ (to_rep (last (rt a))) 1))) (= o2 (- o1 o)))) (and (= temp___223 o2) (in_range1 o2))) (and (and (= result5 i17) (= i2 (to_rep (first (rt a))))) (ite (and (<= (to_rep (first (rt a))) i2) (<= i2 temp___223)) (and (and (and (and (= temp___229 result____split_fields2) (= temp___2291 result____split_fields3)) (and (= temp___228 i2) (and (= 0 temp___230) (and (and (and (= result6 (equal_subrange a i2 b)) (= (= result6 true) (= (bool_eq (elts a) (to_rep (first2 (mk1 i2 (+ (- i2 1) (length b))))) (to_rep (last2 (mk1 i2 (+ (- i2 1) (length b))))) (elts b) (to_rep (first (rt b))) (to_rep (last (rt b)))) true))) (and (not (= result6 true)) (and (= search_ter_p__search__result5 search_ter_p__search__result4) (= result____split_fields5 result____split_fields21)))) (and (and (not (= (has_sub_range_in_prefix a i3 b) true)) (not (= (rec__types__option__exists result____split_fields6) true))) (and (and (=> (<= (to_rep (first (rt a))) (- (+ (to_rep (last (rt a))) 1) (length b))) (dynamic_property3 (to_rep (first (rt a))) (- (+ (to_rep (last (rt a))) 1) (length b)) i3)) (and (<= (to_rep (first (rt a))) i3) (<= i3 (- (+ (to_rep (last (rt a))) 1) (length b))))) (and (and (= result10 (mk_int__ref temp___2302)) (= temp___2303 i3)) (= i3 temp___223)))))))) (and (and (= search_ter_p__search__result10 (mk_option__ref search_ter_p__search__result6)) (and (= i7 (mk_int__ref i3)) (= result____split_fields11 (mk___split_fields__ref result____split_fields6)))) (and (= search_ter_p__search__result11 search_ter_p__search__result6) (and (= i8 i3) (= result____split_fields12 result____split_fields6))))) (and (and (= search_ter_p__search__result12 search_ter_p__search__result10) (and (= i9 i7) (= result____split_fields13 result____split_fields11))) (and (= search_ter_p__search__result13 search_ter_p__search__result11) (and (= i10 i8) (= result____split_fields14 result____split_fields12))))) (and (and (= search_ter_p__search__result12 (mk_option__ref search_ter_p__search__result4)) (and (= i9 (mk_int__ref i2)) (= result____split_fields13 (mk___split_fields__ref result____split_fields21)))) (and (= search_ter_p__search__result13 search_ter_p__search__result4) (and (= i10 i2) (= result____split_fields14 result____split_fields21))))))) (and (and (and (= search_ter_p__search__result17 search_ter_p__search__result15) (and (= i11 i9) (= result____split_fields15 result____split_fields13))) (and (= search_ter_p__search__result18 search_ter_p__search__result16) (and (= i12 i10) (= result____split_fields16 result____split_fields14)))) (and (and (= search_ter_p__search__result15 (mk_option__ref search_ter_p__search__result14)) (= search_ter_p__search__result16 search_ter_p__search__result14)) (and (= result16 search_ter_p__search__result12) (= search_ter_p__search__result14 (mk___rep (us_split_fields__content result____split_fields13))))))))))))
(assert (= search_ter_p__search__result21 search_ter_p__search__result19))
(assert (= i15 i13))
(assert (= result____split_fields19 result____split_fields17))
(assert (= search_ter_p__search__result22 search_ter_p__search__result20))
(assert (= i16 i14))
(assert (= result____split_fields20 result____split_fields18))
(assert (=> (= (= (length b) 0) true) (not (= (rec__types__option__exists (us_split_fields1 (option__content search_ter_p__search__result21))) true))))
(assert (=> (= (< (length a) (length b)) true) (not (= (rec__types__option__exists (us_split_fields1 (option__content search_ter_p__search__result21))) true))))
(assert (= (ite (= (>= (length a) (length b)) true) (has_sub_range a b) false) true))
(assert (not (= (equal_subrange a (to_rep (rec__types__option__value (us_split_fields1 (option__content search_ter_p__search__result21)))) b) true)))
(check-sat)
(exit)
