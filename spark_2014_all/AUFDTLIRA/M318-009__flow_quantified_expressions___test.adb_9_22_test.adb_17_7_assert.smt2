(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const table (Array Int integer))
(declare-const i Int)
(declare-const temp_table (Array Int integer))
(declare-const i1 Int)
(declare-const o integer)
(declare-const o1 (Array Int integer))
(declare-const o2 integer)
(declare-const o3 (Array Int integer))
(declare-const o4 integer)
(declare-const o5 (Array Int integer))
(declare-const o6 integer)
(declare-const o7 (Array Int integer))
(declare-const o8 integer)
(declare-const o9 (Array Int integer))
(declare-const o10 integer)
(declare-const o11 (Array Int integer))
(declare-const o12 integer)
(declare-const o13 (Array Int integer))
(declare-const o14 integer)
(declare-const o15 (Array Int integer))
(declare-const o16 integer)
(declare-const o17 (Array Int integer))
(declare-const o18 integer)
(declare-const o19 (Array Int integer))
(declare-const o20 integer)
(declare-const o21 (Array Int integer))
(declare-const o22 integer)
(declare-const o23 (Array Int integer))
(declare-const o24 integer)
(declare-const o25 (Array Int integer))
(declare-const o26 integer)
(declare-const o27 (Array Int integer))
(declare-const o28 integer)
(declare-const o29 (Array Int integer))
(declare-const o30 integer)
(declare-const o31 (Array Int integer))
(declare-const o32 integer)
(declare-const o33 (Array Int integer))
(declare-const o34 integer)
(declare-const o35 (Array Int integer))
(declare-const o36 integer)
(declare-const o37 (Array Int integer))
(declare-const result Int)
(declare-const i2 Int)
(declare-const result1 (Array Int integer))
(declare-const table1 (Array Int integer))
(declare-const result2 Int)
(declare-const i3 Int)
(declare-const result3 (Array Int integer))
(declare-const table2 (Array Int integer))
(declare-const result4 Int)
(declare-const i4 Int)
(declare-const result5 (Array Int integer))
(declare-const table3 (Array Int integer))
(declare-const result6 Int)
(declare-const i5 Int)
(declare-const result7 (Array Int integer))
(declare-const table4 (Array Int integer))
(declare-const result8 Int)
(declare-const i6 Int)
(declare-const result9 (Array Int integer))
(declare-const table5 (Array Int integer))
(declare-const result10 Int)
(declare-const i7 Int)
(declare-const result11 (Array Int integer))
(declare-const table6 (Array Int integer))
(declare-const result12 Int)
(declare-const i8 Int)
(declare-const result13 (Array Int integer))
(declare-const table7 (Array Int integer))
(declare-const result14 Int)
(declare-const i9 Int)
(declare-const result15 (Array Int integer))
(declare-const table8 (Array Int integer))
(declare-const result16 Int)
(declare-const i10 Int)
(declare-const result17 map__ref)
(declare-const table9 (Array Int integer))
(declare-const result18 Bool)
(declare-const result19 map__ref)
(declare-const table10 (Array Int integer))
(declare-const result20 int__ref)
(declare-const i11 Int)
(declare-const result21 map__ref)
(declare-const temp_table1 (Array Int integer))
(declare-const result22 int__ref)
(declare-const i12 Int)
(declare-const result23 map__ref)
(declare-const temp_table2 (Array Int integer))
(declare-const result24 int__ref)
(declare-const i13 Int)
(declare-const result25 map__ref)
(declare-const temp_table3 (Array Int integer))
(declare-const result26 int__ref)
(declare-const i14 Int)
(declare-const result27 map__ref)
(declare-const temp_table4 (Array Int integer))
(declare-const result28 int__ref)
(declare-const i15 Int)
(declare-const result29 map__ref)
(declare-const temp_table5 (Array Int integer))
(declare-const result30 int__ref)
(declare-const i16 Int)
(declare-const result31 map__ref)
(declare-const temp_table6 (Array Int integer))
(declare-const result32 int__ref)
(declare-const i17 Int)
(declare-const result33 map__ref)
(declare-const temp_table7 (Array Int integer))
(declare-const result34 int__ref)
(declare-const i18 Int)
(declare-const result35 map__ref)
(declare-const temp_table8 (Array Int integer))
(declare-const result36 int__ref)
(declare-const i19 Int)
(declare-const result37 map__ref)
(declare-const temp_table9 (Array Int integer))
(assert (= (mk_int__ref result) (mk_int__ref i)))
(assert (= i2 9))
(assert (= (to_rep o) i2))
(assert (= o1 (store table (- 10 i2) o)))
(assert (= (mk_map__ref result1) (mk_map__ref table)))
(assert (= table1 o1))
(assert (= i2 result2))
(assert (= i3 8))
(assert (= (to_rep o2) i3))
(assert (= o3 (store table1 (- 10 i3) o2)))
(assert (= table1 result3))
(assert (= table2 o3))
(assert (= i3 result4))
(assert (= i4 7))
(assert (= (to_rep o4) i4))
(assert (= o5 (store table2 (- 10 i4) o4)))
(assert (= table2 result5))
(assert (= table3 o5))
(assert (= i4 result6))
(assert (= i5 6))
(assert (= (to_rep o6) i5))
(assert (= o7 (store table3 (- 10 i5) o6)))
(assert (= table3 result7))
(assert (= table4 o7))
(assert (= i5 result8))
(assert (= i6 5))
(assert (= (to_rep o8) i6))
(assert (= o9 (store table4 (- 10 i6) o8)))
(assert (= table4 result9))
(assert (= table5 o9))
(assert (= i6 result10))
(assert (= i7 4))
(assert (= (to_rep o10) i7))
(assert (= o11 (store table5 (- 10 i7) o10)))
(assert (= table5 result11))
(assert (= table6 o11))
(assert (= i7 result12))
(assert (= i8 3))
(assert (= (to_rep o12) i8))
(assert (= o13 (store table6 (- 10 i8) o12)))
(assert (= table6 result13))
(assert (= table7 o13))
(assert (= i8 result14))
(assert (= i9 2))
(assert (= (to_rep o14) i9))
(assert (= o15 (store table7 (- 10 i9) o14)))
(assert (= table7 result15))
(assert (= table8 o15))
(assert (= i9 result16))
(assert (= i10 1))
(assert (= (to_rep o16) i10))
(assert (= o17 (store table8 (- 10 i10) o16)))
(assert (= result17 (mk_map__ref table8)))
(assert (= table9 o17))
(assert (not (exists ((x Int)) (and (and (<= 1 x) (<= x 9)) (= x (to_rep (select table9 x)))))))
(check-sat)
(exit)
