(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic us_compatible_tags : int, int -> prop

axiom us_compatible_tags_refl :
  (forall tag:int. us_compatible_tags(tag, tag))

type integer

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq1 : int, int -> bool

axiom bool_eq_def :
  (forall x:int. forall y:int [bool_eq1(x, y)]. (((x = y) -> (bool_eq1(x,
  y) = true)) and ((not (x = y)) -> (bool_eq1(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref___projection(a: integer__ref) : integer =
  (a).integer__content

logic to_rep : integer -> int

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref___projection(a: positive__ref) : positive =
  (a).positive__content

type natural

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep1 : natural -> int

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : natural, int -> (int,natural) farray

axiom singleton_def :
  (forall v:natural.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic bool_eq4 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) ->
  (to_rep1((a[temp___idx_132])) = to_rep1((b[((b__first - a__first) + temp___idx_132)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq4(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep1((a[(i + 1)])) <  to_rep1((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep1((b[(i + 1)])) <  to_rep1((a[(j + 1)]))))))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first(mk(f, l))) = f) and (to_rep(last(mk(f, l))) = l)))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

logic length : us_t -> int

axiom length_def :
  (forall a:us_t [length(a)]. (((first1(a) <= last1(a)) ->
  (length(a) = ((last1(a) - first1(a)) + 1))) and
  ((not (first1(a) <= last1(a))) -> (length(a) = 0))))

logic value__size : int

logic object__size : (int,natural) farray -> int

logic value__component__size : int

logic object__component__size : (int,natural) farray -> int

logic value__alignment : int

logic object__alignment : (int,natural) farray -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__size(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,natural) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:(int,natural) farray. (0 <= object__alignment(a)))

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : (int,natural) farray

logic dummy4 : t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref___projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

type us_split_discrs = { rec__dispatch__mut_rec__d : bool
}

function us_split_discrs___projection(a: us_split_discrs) : bool =
  (a).rec__dispatch__mut_rec__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__dispatch__mut_rec__i : integer
}

function us_split_fields_I__projection(a: us_split_fields) : integer =
  (a).rec__dispatch__mut_rec__i

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__constrained : bool
}

function us_rep___projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep___3__projection(a: us_rep) : bool = (a).attr__constrained

logic bool_eq6 : us_rep, us_rep -> bool

axiom bool_eq_def4 :
  (forall a:us_rep. forall b:us_rep [bool_eq6(a, b)].
  ((((((a).us_split_discrs1).rec__dispatch__mut_rec__d = ((b).us_split_discrs1).rec__dispatch__mut_rec__d) and
  (to_rep(((a).us_split_fields1).rec__dispatch__mut_rec__i) = to_rep(((b).us_split_fields1).rec__dispatch__mut_rec__i))) ->
  (bool_eq6(a, b) = true)) and
  ((not ((((a).us_split_discrs1).rec__dispatch__mut_rec__d = ((b).us_split_discrs1).rec__dispatch__mut_rec__d) and
  (to_rep(((a).us_split_fields1).rec__dispatch__mut_rec__i) = to_rep(((b).us_split_fields1).rec__dispatch__mut_rec__i)))) ->
  (bool_eq6(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:bool. forall a1:integer. forall a2:bool. (0 <= object__size1({
  us_split_discrs1 = { rec__dispatch__mut_rec__d = a }; us_split_fields1 = {
  rec__dispatch__mut_rec__i = a1 }; attr__constrained = a2 })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:bool. forall a1:integer. forall a2:bool.
  (0 <= object__alignment1({ us_split_discrs1 = { rec__dispatch__mut_rec__d =
  a }; us_split_fields1 = { rec__dispatch__mut_rec__i = a1 };
  attr__constrained = a2 })))

logic dispatch__mut_rec__d__first__bit : int

logic dispatch__mut_rec__d__last__bit : int

logic dispatch__mut_rec__d__position : int

axiom dispatch__mut_rec__d__first__bit_axiom :
  (0 <= dispatch__mut_rec__d__first__bit)

axiom dispatch__mut_rec__d__last__bit_axiom :
  (dispatch__mut_rec__d__first__bit <  dispatch__mut_rec__d__last__bit)

axiom dispatch__mut_rec__d__position_axiom :
  (0 <= dispatch__mut_rec__d__position)

logic dispatch__mut_rec__i__first__bit : int

logic dispatch__mut_rec__i__last__bit : int

logic dispatch__mut_rec__i__position : int

axiom dispatch__mut_rec__i__first__bit_axiom :
  (0 <= dispatch__mut_rec__i__first__bit)

axiom dispatch__mut_rec__i__last__bit_axiom :
  (dispatch__mut_rec__i__first__bit <  dispatch__mut_rec__i__last__bit)

axiom dispatch__mut_rec__i__position_axiom :
  (0 <= dispatch__mut_rec__i__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy5 : bool

logic dummy6 : integer

logic dummy7 : bool

type mut_rec__ref = { mut_rec__content : us_rep
}

function mut_rec__ref___projection(a: mut_rec__ref) : us_rep =
  (a).mut_rec__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq7 : bool, bool -> bool

axiom bool_eq_def5 :
  (forall x:bool. forall y:bool [bool_eq7(x, y)]. (((x = y) -> (bool_eq7(x,
  y) = true)) and ((not (x = y)) -> (bool_eq7(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range3(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

logic init : int -> int

logic init__function_guard : int, int -> prop

axiom init__post_axiom :
  (forall x:int [init(x)]. (in_range(x) -> in_range(init(x))))

logic init__2 : us_t -> us_t

logic init__2__function_guard : us_t, us_t -> prop

axiom init__2__post_axiom :
  (forall x:(int,natural) farray. forall x1:t [init__2({ elts = x; rt = x1
  })]. dynamic_property(1, 2147483647, to_rep(first((init__2({ elts = x; rt =
  x1 })).rt)), to_rep(last((init__2({ elts = x; rt = x1 })).rt))))

logic init__3 : us_rep -> us_rep

logic init__3__function_guard : us_rep, us_rep -> prop

axiom init__3__post_axiom : true

logic id : int -> int

logic id__function_guard : int, int -> prop

logic b_max : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy8 : integer

type tTa1SP1__ref = { tTa1SP1__content : integer
}

function tTa1SP1__ref___projection(a: tTa1SP1__ref) : integer =
  (a).tTa1SP1__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def1 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first2(mk1(f, l))) = f) and (to_rep(last2(mk1(f, l))) = l)))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property1(range_first, range_last, low) and
  dynamic_property1(range_first, range_last, high)))))

type us_t1 = { elts1 : (int,natural) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,natural) farray = (a).elts1

function of_array1(a: (int,natural) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

logic length1 : us_t1 -> int

axiom length_def1 :
  (forall a:us_t1 [length1(a)]. (((first3(a) <= last3(a)) ->
  (length1(a) = ((last3(a) - first3(a)) + 1))) and
  ((not (first3(a) <= last3(a))) -> (length1(a) = 0))))

logic value__size2 : int

logic object__size2 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment2 : int

logic object__alignment2 : (int,natural) farray -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__size2(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__alignment2(a)))

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq4((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq6 : us_t1, us_t1 -> bool

logic dummy9 : (int,natural) farray

logic dummy10 : t1

type ta1S__ref = { ta1S__content : us_t1
}

function ta1S__ref___projection(a: ta1S__ref) : us_t1 = (a).ta1S__content

logic a1__first : integer

logic a1__last : integer

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy11 : integer

type tTa2SP1__ref = { tTa2SP1__content : integer
}

function tTa2SP1__ref___projection(a: tTa2SP1__ref) : integer =
  (a).tTa2SP1__content

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first4(mk2(f, l))) = f) and (to_rep(last4(mk2(f, l))) = l)))))

predicate dynamic_property4(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property3(range_first, range_last, low) and
  dynamic_property3(range_first, range_last, high)))))

type us_t2 = { elts2 : (int,natural) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,natural) farray = (a).elts2

function of_array2(a: (int,natural) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep(first4((a).rt2))

function last5(a: us_t2) : int = to_rep(last4((a).rt2))

logic length2 : us_t2 -> int

axiom length_def2 :
  (forall a:us_t2 [length2(a)]. (((first5(a) <= last5(a)) ->
  (length2(a) = ((last5(a) - first5(a)) + 1))) and
  ((not (first5(a) <= last5(a))) -> (length2(a) = 0))))

logic value__size3 : int

logic object__size3 : (int,natural) farray -> int

logic value__component__size2 : int

logic object__component__size2 : (int,natural) farray -> int

logic value__alignment3 : int

logic object__alignment3 : (int,natural) farray -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__size3(a)))

axiom value__component__size_axiom2 : (0 <= value__component__size2)

axiom object__component__size_axiom2 :
  (forall a:(int,natural) farray. (0 <= object__component__size2(a)))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__alignment3(a)))

function bool_eq11(x: us_t2, y: us_t2) : bool = bool_eq4((x).elts2,
  to_rep(first4((x).rt2)), to_rep(last4((x).rt2)), (y).elts2,
  to_rep(first4((y).rt2)), to_rep(last4((y).rt2)))

logic user_eq8 : us_t2, us_t2 -> bool

logic dummy12 : (int,natural) farray

logic dummy13 : t2

type ta2S__ref = { ta2S__content : us_t2
}

function ta2S__ref___projection(a: ta2S__ref) : us_t2 = (a).ta2S__content

logic a2__first : integer

logic a2__last : integer

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_property5(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

logic bool_eq12 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq12(x, y)]. (((x = y) -> (bool_eq12(x,
  y) = true)) and ((not (x = y)) -> (bool_eq12(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy14 : integer

type tTa3SP1__ref = { tTa3SP1__content : integer
}

function tTa3SP1__ref___projection(a: tTa3SP1__ref) : integer =
  (a).tTa3SP1__content

type t3

logic first6 : t3 -> integer

logic last6 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def3 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range(f) -> (in_range(l) ->
  ((to_rep(first6(mk3(f, l))) = f) and (to_rep(last6(mk3(f, l))) = l)))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property5(range_first, range_last, low) and
  dynamic_property5(range_first, range_last, high)))))

type us_t3 = { elts3 : (int,natural) farray; rt3 : t3
}

function to_array3(a: us_t3) : (int,natural) farray = (a).elts3

function of_array3(a: (int,natural) farray, f: int, l: int) : us_t3 = {
  elts3 = a; rt3 = mk3(f, l) }

function first7(a: us_t3) : int = to_rep(first6((a).rt3))

function last7(a: us_t3) : int = to_rep(last6((a).rt3))

logic length3 : us_t3 -> int

axiom length_def3 :
  (forall a:us_t3 [length3(a)]. (((first7(a) <= last7(a)) ->
  (length3(a) = ((last7(a) - first7(a)) + 1))) and
  ((not (first7(a) <= last7(a))) -> (length3(a) = 0))))

logic value__size4 : int

logic object__size4 : (int,natural) farray -> int

logic value__component__size3 : int

logic object__component__size3 : (int,natural) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,natural) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,natural) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom3 : (0 <= value__component__size3)

axiom object__component__size_axiom3 :
  (forall a:(int,natural) farray. (0 <= object__component__size3(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,natural) farray. (0 <= object__alignment4(a)))

function bool_eq13(x: us_t3, y: us_t3) : bool = bool_eq4((x).elts3,
  to_rep(first6((x).rt3)), to_rep(last6((x).rt3)), (y).elts3,
  to_rep(first6((y).rt3)), to_rep(last6((y).rt3)))

logic user_eq10 : us_t3, us_t3 -> bool

logic dummy15 : (int,natural) farray

logic dummy16 : t3

type ta3S__ref = { ta3S__content : us_t3
}

function ta3S__ref___projection(a: ta3S__ref) : us_t3 = (a).ta3S__content

logic a3__first : integer

logic a3__last : integer

logic attr__ATTRIBUTE_ADDRESS6 : int

logic r1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS7 : int

logic r2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r3__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS9 : int

type us_split_fields2 = { rec__dispatch__root__i : integer; rec__ext__ :
us_private
}

function us_split_fields_I__2__projection(a: us_split_fields2) : integer =
  (a).rec__dispatch__root__i

function us_split_fields___projection(a: us_split_fields2) : us_private =
  (a).rec__ext__

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag : int
}

function us_rep___4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep___5__projection(a: us_rep1) : int = (a).attr__tag

logic bool_eq14 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq14(a, b)].
  (((to_rep(((a).us_split_fields3).rec__dispatch__root__i) = to_rep(((b).us_split_fields3).rec__dispatch__root__i)) ->
  (bool_eq14(a, b) = true)) and
  ((not (to_rep(((a).us_split_fields3).rec__dispatch__root__i) = to_rep(((b).us_split_fields3).rec__dispatch__root__i))) ->
  (bool_eq14(a, b) = false))))

logic us_dispatch_eq : us_rep1, us_rep1 -> bool

logic us_tag : int

logic value__size5 : int

logic object__size5 : us_rep1 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep1 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__size5({ us_split_fields3 = { rec__dispatch__root__i = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:integer. forall a1:us_private. forall a2:int.
  (0 <= object__alignment5({ us_split_fields3 = { rec__dispatch__root__i = a;
  rec__ext__ = a1 }; attr__tag = a2 })))

logic dispatch__root__i__first__bit : int

logic dispatch__root__i__last__bit : int

logic dispatch__root__i__position : int

axiom dispatch__root__i__first__bit_axiom :
  (0 <= dispatch__root__i__first__bit)

axiom dispatch__root__i__last__bit_axiom :
  (dispatch__root__i__first__bit <  dispatch__root__i__last__bit)

axiom dispatch__root__i__position_axiom : (0 <= dispatch__root__i__position)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy17 : integer

logic dummy18 : us_private

logic dummy19 : int

type root__ref = { root__content : us_rep1
}

function root__ref___projection(a: root__ref) : us_rep1 = (a).root__content

type us_split_fields4 = { rec__dispatch__child__j : integer;
rec__dispatch__root__i1 : integer; rec__ext__1 : us_private
}

function us_split_fields_J__projection(a: us_split_fields4) : integer =
  (a).rec__dispatch__child__j

function us_split_fields_I__3__projection(a: us_split_fields4) : integer =
  (a).rec__dispatch__root__i1

function us_split_fields___2__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag1 : int
}

function us_rep___6__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep___7__projection(a: us_rep2) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__j : us_private -> integer

axiom extract__j__conv :
  (forall j:integer.
  (forall rec__ext__2:us_private. (extract__j(hide_ext__(j,
  rec__ext__2)) = j)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep2) : us_rep1 = { us_split_fields3 = {
  rec__dispatch__root__i = ((a).us_split_fields5).rec__dispatch__root__i1;
  rec__ext__ = hide_ext__(((a).us_split_fields5).rec__dispatch__child__j,
  ((a).us_split_fields5).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep1) : us_rep2 = { us_split_fields5 = {
  rec__dispatch__child__j = extract__j(((r).us_split_fields3).rec__ext__);
  rec__dispatch__root__i1 = ((r).us_split_fields3).rec__dispatch__root__i;
  rec__ext__1 = extract__ext__(((r).us_split_fields3).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic bool_eq15 : us_rep2, us_rep2 -> bool

axiom bool_eq_def10 :
  (forall a:us_rep2. forall b:us_rep2 [bool_eq15(a, b)].
  ((((to_rep(((a).us_split_fields5).rec__dispatch__child__j) = to_rep(((b).us_split_fields5).rec__dispatch__child__j)) and
  (to_rep(((a).us_split_fields5).rec__dispatch__root__i1) = to_rep(((b).us_split_fields5).rec__dispatch__root__i1))) ->
  (bool_eq15(a, b) = true)) and
  ((not ((to_rep(((a).us_split_fields5).rec__dispatch__child__j) = to_rep(((b).us_split_fields5).rec__dispatch__child__j)) and
  (to_rep(((a).us_split_fields5).rec__dispatch__root__i1) = to_rep(((b).us_split_fields5).rec__dispatch__root__i1)))) ->
  (bool_eq15(a, b) = false))))

logic us_tag1 : int

logic value__size6 : int

logic object__size6 : us_rep2 -> int

logic value__alignment6 : int

logic object__alignment6 : us_rep2 -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__size6({ us_split_fields5 = { rec__dispatch__child__j = a;
  rec__dispatch__root__i1 = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:integer. forall a1:integer. forall a2:us_private. forall a3:int.
  (0 <= object__alignment6({ us_split_fields5 = { rec__dispatch__child__j =
  a; rec__dispatch__root__i1 = a1; rec__ext__1 = a2 }; attr__tag1 = a3 })))

logic dispatch__child__j__first__bit : int

logic dispatch__child__j__last__bit : int

logic dispatch__child__j__position : int

axiom dispatch__child__j__first__bit_axiom :
  (0 <= dispatch__child__j__first__bit)

axiom dispatch__child__j__last__bit_axiom :
  (dispatch__child__j__first__bit <  dispatch__child__j__last__bit)

axiom dispatch__child__j__position_axiom :
  (0 <= dispatch__child__j__position)

logic dispatch__root__i__first__bit1 : int

logic dispatch__root__i__last__bit1 : int

logic dispatch__root__i__position1 : int

axiom dispatch__root__i__first__bit_axiom1 :
  (0 <= dispatch__root__i__first__bit1)

axiom dispatch__root__i__last__bit_axiom1 :
  (dispatch__root__i__first__bit1 <  dispatch__root__i__last__bit1)

axiom dispatch__root__i__position_axiom1 :
  (0 <= dispatch__root__i__position1)

logic user_eq12 : us_rep2, us_rep2 -> bool

logic dummy20 : integer

logic dummy21 : integer

logic dummy22 : us_private

logic dummy23 : int

type child__ref = { child__content : us_rep2
}

function child__ref___projection(a: child__ref) : us_rep2 =
  (a).child__content

logic p__specific_post : int, us_rep1, us_split_fields2, int,
  us_split_fields2, int, int, int, int, us_t, (int,natural) farray, integer,
  integer, (int,natural) farray, integer, integer, us_rep, us_split_fields,
  us_split_discrs, bool, us_split_fields, us_split_discrs, bool, int, int,
  (int,natural) farray, (int,natural) farray, us_split_fields,
  us_split_discrs, us_split_fields, us_split_discrs, int,
  (int,natural) farray, us_split_fields, us_split_discrs, us_split_fields2,
  us_split_fields2, int, int, (int,natural) farray, (int,natural) farray,
  us_split_fields, us_split_discrs, us_split_fields, us_split_discrs, int,
  int, (int,natural) farray, (int,natural) farray, us_split_fields,
  us_split_discrs, us_split_fields, us_split_discrs, int,
  (int,natural) farray, us_split_fields, us_split_discrs -> prop

axiom dispatch__root__compat_axiom :
  (forall x1:integer. forall x11:us_private. forall x12:int.
  (forall dispatch__p__x2__fields:integer.
  forall dispatch__p__x2__fields1:us_private.
  forall dispatch__p__x3__fields:integer.
  forall dispatch__p__x3__fields1:us_private.
  forall dispatch__p__x2__old__fields:integer.
  forall dispatch__p__x2__old__fields1:us_private.
  forall dispatch__p__x3__old__fields:integer.
  forall dispatch__p__x3__old__fields1:us_private.
  (forall x2__attr__tag:int. forall x3__attr__tag:int. forall y1:int.
  forall dispatch__p__y2:int. forall dispatch__p__y3:int.
  forall dispatch__c1:int. forall dispatch__c3:int. forall dispatch__c2:int.
  forall dispatch__p__y2__old:int. forall dispatch__p__y3__old:int.
  forall dispatch__c1__old:int. forall dispatch__c3__old:int.
  forall dispatch__c2__old:int.
  (forall z1:(int,natural) farray. forall z11:t.
  (forall dispatch__p__z2:(int,natural) farray.
  forall dispatch__p__z3:(int,natural) farray.
  forall dispatch__a1:(int,natural) farray.
  forall dispatch__a3:(int,natural) farray.
  forall dispatch__a2:(int,natural) farray.
  forall dispatch__p__z2__old:(int,natural) farray.
  forall dispatch__p__z3__old:(int,natural) farray.
  forall dispatch__a1__old:(int,natural) farray.
  forall dispatch__a3__old:(int,natural) farray.
  forall dispatch__a2__old:(int,natural) farray.
  (forall z2__first:integer. forall z2__last:integer.
  forall z3__first:integer. forall z3__last:integer.
  (forall w1:bool. forall w11:integer. forall w12:bool.
  (forall dispatch__p__w2__fields:integer.
  forall dispatch__p__w3__fields:integer.
  forall dispatch__r1__fields:integer. forall dispatch__r3__fields:integer.
  forall dispatch__r2__fields:integer.
  forall dispatch__p__w2__old__fields:integer.
  forall dispatch__p__w3__old__fields:integer.
  forall dispatch__r1__old__fields:integer.
  forall dispatch__r3__old__fields:integer.
  forall dispatch__r2__old__fields:integer.
  (forall dispatch__p__w2__discrs:bool. forall dispatch__p__w3__discrs:bool.
  forall dispatch__r1__discrs:bool. forall dispatch__r3__discrs:bool.
  forall dispatch__r2__discrs:bool. forall dispatch__p__w2__old__discrs:bool.
  forall dispatch__p__w3__old__discrs:bool.
  forall dispatch__r1__old__discrs:bool.
  forall dispatch__r3__old__discrs:bool.
  forall dispatch__r2__old__discrs:bool.
  (forall w2__attr__constrained:bool. forall w3__attr__constrained:bool
  [p__specific_post(us_tag, { us_split_fields3 = { rec__dispatch__root__i =
  x1; rec__ext__ = x11 }; attr__tag = x12 }, { rec__dispatch__root__i =
  dispatch__p__x2__fields; rec__ext__ = dispatch__p__x2__fields1 },
  x2__attr__tag, { rec__dispatch__root__i = dispatch__p__x3__fields;
  rec__ext__ = dispatch__p__x3__fields1 }, x3__attr__tag, y1,
  dispatch__p__y2, dispatch__p__y3, { elts = z1; rt = z11 }, dispatch__p__z2,
  z2__first, z2__last, dispatch__p__z3, z3__first, z3__last, {
  us_split_discrs1 = { rec__dispatch__mut_rec__d = w1 }; us_split_fields1 = {
  rec__dispatch__mut_rec__i = w11 }; attr__constrained = w12 }, {
  rec__dispatch__mut_rec__i = dispatch__p__w2__fields }, {
  rec__dispatch__mut_rec__d = dispatch__p__w2__discrs },
  w2__attr__constrained, { rec__dispatch__mut_rec__i =
  dispatch__p__w3__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w3__discrs }, w3__attr__constrained, dispatch__c1,
  dispatch__c3, dispatch__a1, dispatch__a3, { rec__dispatch__mut_rec__i =
  dispatch__r1__fields }, { rec__dispatch__mut_rec__d = dispatch__r1__discrs
  }, { rec__dispatch__mut_rec__i = dispatch__r3__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r3__discrs }, dispatch__c2,
  dispatch__a2, { rec__dispatch__mut_rec__i = dispatch__r2__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r2__discrs }, {
  rec__dispatch__root__i = dispatch__p__x2__old__fields; rec__ext__ =
  dispatch__p__x2__old__fields1 }, { rec__dispatch__root__i =
  dispatch__p__x3__old__fields; rec__ext__ = dispatch__p__x3__old__fields1 },
  dispatch__p__y2__old, dispatch__p__y3__old, dispatch__p__z2__old,
  dispatch__p__z3__old, { rec__dispatch__mut_rec__i =
  dispatch__p__w2__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w2__old__discrs }, { rec__dispatch__mut_rec__i =
  dispatch__p__w3__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w3__old__discrs }, dispatch__c1__old, dispatch__c3__old,
  dispatch__a1__old, dispatch__a3__old, { rec__dispatch__mut_rec__i =
  dispatch__r1__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__r1__old__discrs }, { rec__dispatch__mut_rec__i =
  dispatch__r3__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__r3__old__discrs }, dispatch__c2__old, dispatch__a2__old, {
  rec__dispatch__mut_rec__i = dispatch__r2__old__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r2__old__discrs })].
  (p__specific_post(us_tag, { us_split_fields3 = { rec__dispatch__root__i =
  x1; rec__ext__ = x11 }; attr__tag = x12 }, { rec__dispatch__root__i =
  dispatch__p__x2__fields; rec__ext__ = dispatch__p__x2__fields1 },
  x2__attr__tag, { rec__dispatch__root__i = dispatch__p__x3__fields;
  rec__ext__ = dispatch__p__x3__fields1 }, x3__attr__tag, y1,
  dispatch__p__y2, dispatch__p__y3, { elts = z1; rt = z11 }, dispatch__p__z2,
  z2__first, z2__last, dispatch__p__z3, z3__first, z3__last, {
  us_split_discrs1 = { rec__dispatch__mut_rec__d = w1 }; us_split_fields1 = {
  rec__dispatch__mut_rec__i = w11 }; attr__constrained = w12 }, {
  rec__dispatch__mut_rec__i = dispatch__p__w2__fields }, {
  rec__dispatch__mut_rec__d = dispatch__p__w2__discrs },
  w2__attr__constrained, { rec__dispatch__mut_rec__i =
  dispatch__p__w3__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w3__discrs }, w3__attr__constrained, dispatch__c1,
  dispatch__c3, dispatch__a1, dispatch__a3, { rec__dispatch__mut_rec__i =
  dispatch__r1__fields }, { rec__dispatch__mut_rec__d = dispatch__r1__discrs
  }, { rec__dispatch__mut_rec__i = dispatch__r3__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r3__discrs }, dispatch__c2,
  dispatch__a2, { rec__dispatch__mut_rec__i = dispatch__r2__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r2__discrs }, {
  rec__dispatch__root__i = dispatch__p__x2__old__fields; rec__ext__ =
  dispatch__p__x2__old__fields1 }, { rec__dispatch__root__i =
  dispatch__p__x3__old__fields; rec__ext__ = dispatch__p__x3__old__fields1 },
  dispatch__p__y2__old, dispatch__p__y3__old, dispatch__p__z2__old,
  dispatch__p__z3__old, { rec__dispatch__mut_rec__i =
  dispatch__p__w2__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w2__old__discrs }, { rec__dispatch__mut_rec__i =
  dispatch__p__w3__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w3__old__discrs }, dispatch__c1__old, dispatch__c3__old,
  dispatch__a1__old, dispatch__a3__old, { rec__dispatch__mut_rec__i =
  dispatch__r1__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__r1__old__discrs }, { rec__dispatch__mut_rec__i =
  dispatch__r3__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__r3__old__discrs }, dispatch__c2__old, dispatch__a2__old, {
  rec__dispatch__mut_rec__i = dispatch__r2__old__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r2__old__discrs }) ->
  ((((((((to_rep(dispatch__p__x2__fields) = to_rep(x1)) and
  (to_rep(dispatch__p__x3__fields) = to_rep(dispatch__p__x3__old__fields))) and
  (dispatch__p__y3 = dispatch__p__y3__old)) and (bool_eq4(dispatch__p__z3,
  to_rep(z3__first), to_rep(z3__last), dispatch__p__z3__old,
  to_rep(z3__first), to_rep(z3__last)) = true)) and (bool_eq6({
  us_split_discrs1 = { rec__dispatch__mut_rec__d = dispatch__p__w3__discrs };
  us_split_fields1 = { rec__dispatch__mut_rec__i = dispatch__p__w3__fields };
  attr__constrained = w3__attr__constrained }, { us_split_discrs1 = {
  rec__dispatch__mut_rec__d = dispatch__p__w3__old__discrs };
  us_split_fields1 = { rec__dispatch__mut_rec__i =
  dispatch__p__w3__old__fields }; attr__constrained = w3__attr__constrained
  }) = true)) and (dispatch__c3 = dispatch__c3__old)) and
  (bool_eq4(dispatch__a3, to_rep(a3__first), to_rep(a3__last),
  dispatch__a3__old, to_rep(a3__first), to_rep(a3__last)) = true)) and
  (bool_eq6({ us_split_discrs1 = { rec__dispatch__mut_rec__d =
  dispatch__r3__discrs }; us_split_fields1 = { rec__dispatch__mut_rec__i =
  dispatch__r3__fields }; attr__constrained = r3__attr__constrained }, {
  us_split_discrs1 = { rec__dispatch__mut_rec__d = dispatch__r3__old__discrs
  }; us_split_fields1 = { rec__dispatch__mut_rec__i =
  dispatch__r3__old__fields }; attr__constrained = r3__attr__constrained
  }) = true)))))))))))))

axiom dispatch__child__compat_axiom :
  (forall x1:integer. forall x11:us_private. forall x12:int.
  (forall dispatch__p__x2__fields:integer.
  forall dispatch__p__x2__fields1:us_private.
  forall dispatch__p__x3__fields:integer.
  forall dispatch__p__x3__fields1:us_private.
  forall dispatch__p__x2__old__fields:integer.
  forall dispatch__p__x2__old__fields1:us_private.
  forall dispatch__p__x3__old__fields:integer.
  forall dispatch__p__x3__old__fields1:us_private.
  (forall x2__attr__tag:int. forall x3__attr__tag:int. forall y1:int.
  forall dispatch__p__y2:int. forall dispatch__p__y3:int.
  forall dispatch__c1:int. forall dispatch__c3:int. forall dispatch__c2:int.
  forall dispatch__p__y2__old:int. forall dispatch__p__y3__old:int.
  forall dispatch__c1__old:int. forall dispatch__c3__old:int.
  forall dispatch__c2__old:int.
  (forall z1:(int,natural) farray. forall z11:t.
  (forall dispatch__p__z2:(int,natural) farray.
  forall dispatch__p__z3:(int,natural) farray.
  forall dispatch__a1:(int,natural) farray.
  forall dispatch__a3:(int,natural) farray.
  forall dispatch__a2:(int,natural) farray.
  forall dispatch__p__z2__old:(int,natural) farray.
  forall dispatch__p__z3__old:(int,natural) farray.
  forall dispatch__a1__old:(int,natural) farray.
  forall dispatch__a3__old:(int,natural) farray.
  forall dispatch__a2__old:(int,natural) farray.
  (forall z2__first:integer. forall z2__last:integer.
  forall z3__first:integer. forall z3__last:integer.
  (forall w1:bool. forall w11:integer. forall w12:bool.
  (forall dispatch__p__w2__fields:integer.
  forall dispatch__p__w3__fields:integer.
  forall dispatch__r1__fields:integer. forall dispatch__r3__fields:integer.
  forall dispatch__r2__fields:integer.
  forall dispatch__p__w2__old__fields:integer.
  forall dispatch__p__w3__old__fields:integer.
  forall dispatch__r1__old__fields:integer.
  forall dispatch__r3__old__fields:integer.
  forall dispatch__r2__old__fields:integer.
  (forall dispatch__p__w2__discrs:bool. forall dispatch__p__w3__discrs:bool.
  forall dispatch__r1__discrs:bool. forall dispatch__r3__discrs:bool.
  forall dispatch__r2__discrs:bool. forall dispatch__p__w2__old__discrs:bool.
  forall dispatch__p__w3__old__discrs:bool.
  forall dispatch__r1__old__discrs:bool.
  forall dispatch__r3__old__discrs:bool.
  forall dispatch__r2__old__discrs:bool.
  (forall w2__attr__constrained:bool. forall w3__attr__constrained:bool
  [p__specific_post(us_tag1, { us_split_fields3 = { rec__dispatch__root__i =
  x1; rec__ext__ = x11 }; attr__tag = x12 }, { rec__dispatch__root__i =
  dispatch__p__x2__fields; rec__ext__ = dispatch__p__x2__fields1 },
  x2__attr__tag, { rec__dispatch__root__i = dispatch__p__x3__fields;
  rec__ext__ = dispatch__p__x3__fields1 }, x3__attr__tag, y1,
  dispatch__p__y2, dispatch__p__y3, { elts = z1; rt = z11 }, dispatch__p__z2,
  z2__first, z2__last, dispatch__p__z3, z3__first, z3__last, {
  us_split_discrs1 = { rec__dispatch__mut_rec__d = w1 }; us_split_fields1 = {
  rec__dispatch__mut_rec__i = w11 }; attr__constrained = w12 }, {
  rec__dispatch__mut_rec__i = dispatch__p__w2__fields }, {
  rec__dispatch__mut_rec__d = dispatch__p__w2__discrs },
  w2__attr__constrained, { rec__dispatch__mut_rec__i =
  dispatch__p__w3__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w3__discrs }, w3__attr__constrained, dispatch__c1,
  dispatch__c3, dispatch__a1, dispatch__a3, { rec__dispatch__mut_rec__i =
  dispatch__r1__fields }, { rec__dispatch__mut_rec__d = dispatch__r1__discrs
  }, { rec__dispatch__mut_rec__i = dispatch__r3__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r3__discrs }, dispatch__c2,
  dispatch__a2, { rec__dispatch__mut_rec__i = dispatch__r2__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r2__discrs }, {
  rec__dispatch__root__i = dispatch__p__x2__old__fields; rec__ext__ =
  dispatch__p__x2__old__fields1 }, { rec__dispatch__root__i =
  dispatch__p__x3__old__fields; rec__ext__ = dispatch__p__x3__old__fields1 },
  dispatch__p__y2__old, dispatch__p__y3__old, dispatch__p__z2__old,
  dispatch__p__z3__old, { rec__dispatch__mut_rec__i =
  dispatch__p__w2__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w2__old__discrs }, { rec__dispatch__mut_rec__i =
  dispatch__p__w3__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w3__old__discrs }, dispatch__c1__old, dispatch__c3__old,
  dispatch__a1__old, dispatch__a3__old, { rec__dispatch__mut_rec__i =
  dispatch__r1__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__r1__old__discrs }, { rec__dispatch__mut_rec__i =
  dispatch__r3__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__r3__old__discrs }, dispatch__c2__old, dispatch__a2__old, {
  rec__dispatch__mut_rec__i = dispatch__r2__old__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r2__old__discrs })].
  (p__specific_post(us_tag1, { us_split_fields3 = { rec__dispatch__root__i =
  x1; rec__ext__ = x11 }; attr__tag = x12 }, { rec__dispatch__root__i =
  dispatch__p__x2__fields; rec__ext__ = dispatch__p__x2__fields1 },
  x2__attr__tag, { rec__dispatch__root__i = dispatch__p__x3__fields;
  rec__ext__ = dispatch__p__x3__fields1 }, x3__attr__tag, y1,
  dispatch__p__y2, dispatch__p__y3, { elts = z1; rt = z11 }, dispatch__p__z2,
  z2__first, z2__last, dispatch__p__z3, z3__first, z3__last, {
  us_split_discrs1 = { rec__dispatch__mut_rec__d = w1 }; us_split_fields1 = {
  rec__dispatch__mut_rec__i = w11 }; attr__constrained = w12 }, {
  rec__dispatch__mut_rec__i = dispatch__p__w2__fields }, {
  rec__dispatch__mut_rec__d = dispatch__p__w2__discrs },
  w2__attr__constrained, { rec__dispatch__mut_rec__i =
  dispatch__p__w3__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w3__discrs }, w3__attr__constrained, dispatch__c1,
  dispatch__c3, dispatch__a1, dispatch__a3, { rec__dispatch__mut_rec__i =
  dispatch__r1__fields }, { rec__dispatch__mut_rec__d = dispatch__r1__discrs
  }, { rec__dispatch__mut_rec__i = dispatch__r3__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r3__discrs }, dispatch__c2,
  dispatch__a2, { rec__dispatch__mut_rec__i = dispatch__r2__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r2__discrs }, {
  rec__dispatch__root__i = dispatch__p__x2__old__fields; rec__ext__ =
  dispatch__p__x2__old__fields1 }, { rec__dispatch__root__i =
  dispatch__p__x3__old__fields; rec__ext__ = dispatch__p__x3__old__fields1 },
  dispatch__p__y2__old, dispatch__p__y3__old, dispatch__p__z2__old,
  dispatch__p__z3__old, { rec__dispatch__mut_rec__i =
  dispatch__p__w2__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w2__old__discrs }, { rec__dispatch__mut_rec__i =
  dispatch__p__w3__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__p__w3__old__discrs }, dispatch__c1__old, dispatch__c3__old,
  dispatch__a1__old, dispatch__a3__old, { rec__dispatch__mut_rec__i =
  dispatch__r1__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__r1__old__discrs }, { rec__dispatch__mut_rec__i =
  dispatch__r3__old__fields }, { rec__dispatch__mut_rec__d =
  dispatch__r3__old__discrs }, dispatch__c2__old, dispatch__a2__old, {
  rec__dispatch__mut_rec__i = dispatch__r2__old__fields }, {
  rec__dispatch__mut_rec__d = dispatch__r2__old__discrs }) ->
  ((((((((((to_rep(((of_base({ us_split_fields3 = { rec__dispatch__root__i =
  dispatch__p__x2__fields; rec__ext__ = dispatch__p__x2__fields1 };
  attr__tag = x2__attr__tag
  })).us_split_fields5).rec__dispatch__child__j) <  0) and
  (to_rep(((of_base({ us_split_fields3 = { rec__dispatch__root__i =
  dispatch__p__x2__fields; rec__ext__ = dispatch__p__x2__fields1 };
  attr__tag = x2__attr__tag
  })).us_split_fields5).rec__dispatch__root__i1) = to_rep(((of_base({
  us_split_fields3 = { rec__dispatch__root__i = x1; rec__ext__ = x11 };
  attr__tag = x12 })).us_split_fields5).rec__dispatch__root__i1))) and
  (to_rep(((of_base({ us_split_fields3 = { rec__dispatch__root__i =
  dispatch__p__x3__fields; rec__ext__ = dispatch__p__x3__fields1 };
  attr__tag = x3__attr__tag
  })).us_split_fields5).rec__dispatch__root__i1) = to_rep(((of_base({
  us_split_fields3 = { rec__dispatch__root__i = dispatch__p__x3__old__fields;
  rec__ext__ = dispatch__p__x3__old__fields1 }; attr__tag = x3__attr__tag
  })).us_split_fields5).rec__dispatch__root__i1))) and (to_rep(((of_base({
  us_split_fields3 = { rec__dispatch__root__i = dispatch__p__x3__fields;
  rec__ext__ = dispatch__p__x3__fields1 }; attr__tag = x3__attr__tag
  })).us_split_fields5).rec__dispatch__child__j) = to_rep(((of_base({
  us_split_fields3 = { rec__dispatch__root__i = dispatch__p__x3__old__fields;
  rec__ext__ = dispatch__p__x3__old__fields1 }; attr__tag = x3__attr__tag
  })).us_split_fields5).rec__dispatch__child__j))) and
  (dispatch__p__y3 = dispatch__p__y3__old)) and (bool_eq4(dispatch__p__z3,
  to_rep(z3__first), to_rep(z3__last), dispatch__p__z3__old,
  to_rep(z3__first), to_rep(z3__last)) = true)) and (bool_eq6({
  us_split_discrs1 = { rec__dispatch__mut_rec__d = dispatch__p__w3__discrs };
  us_split_fields1 = { rec__dispatch__mut_rec__i = dispatch__p__w3__fields };
  attr__constrained = w3__attr__constrained }, { us_split_discrs1 = {
  rec__dispatch__mut_rec__d = dispatch__p__w3__old__discrs };
  us_split_fields1 = { rec__dispatch__mut_rec__i =
  dispatch__p__w3__old__fields }; attr__constrained = w3__attr__constrained
  }) = true)) and (dispatch__c3 = dispatch__c3__old)) and
  (bool_eq4(dispatch__a3, to_rep(a3__first), to_rep(a3__last),
  dispatch__a3__old, to_rep(a3__first), to_rep(a3__last)) = true)) and
  (bool_eq6({ us_split_discrs1 = { rec__dispatch__mut_rec__d =
  dispatch__r3__discrs }; us_split_fields1 = { rec__dispatch__mut_rec__i =
  dispatch__r3__fields }; attr__constrained = r3__attr__constrained }, {
  us_split_discrs1 = { rec__dispatch__mut_rec__d = dispatch__r3__old__discrs
  }; us_split_fields1 = { rec__dispatch__mut_rec__i =
  dispatch__r3__old__fields }; attr__constrained = r3__attr__constrained
  }) = true)))))))))))))

logic x1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic x2__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic x3__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic v1__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic v2__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic v3__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic z1__first : integer

logic z1__last : integer

logic attr__ATTRIBUTE_ADDRESS19 : int

logic z2__first : integer

logic z2__last : integer

logic attr__ATTRIBUTE_ADDRESS20 : int

logic z3__first : integer

logic z3__last : integer

logic attr__ATTRIBUTE_ADDRESS21 : int

logic w1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS22 : int

logic w2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS23 : int

logic w3__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS24 : int

axiom id__post_axiom :
  (forall x:int [id(x)]. (in_range1(x) -> in_range1(id(x))))

axiom id__def_axiom : (forall x:int [id(x)]. (in_range1(x) -> (id(x) = x)))

axiom b_max__def_axiom : (b_max = id(100))

logic c1 : int

logic c2 : int

logic c3 : int

logic a1 : (int,natural) farray

logic a2 : (int,natural) farray

logic a3 : (int,natural) farray

logic r1__split_fields : integer

logic r1__split_discrs : bool

logic r2__split_fields : integer

logic r2__split_discrs : bool

logic r3__split_fields : integer

logic r3__split_discrs : bool

logic x1__split_fields : integer

logic x1__split_fields1 : us_private

logic x2__split_fields : integer

logic x2__split_fields1 : us_private

logic x3__split_fields : integer

logic x3__split_fields1 : us_private

logic v1__split_fields : integer

logic v1__split_fields1 : us_private

logic v2__split_fields : integer

logic v2__split_fields1 : us_private

logic v3__split_fields : integer

logic v3__split_fields1 : us_private

logic y1 : int

logic y2 : int

logic y3 : int

logic z1 : (int,natural) farray

logic z2 : (int,natural) farray

logic z3 : (int,natural) farray

logic w1__split_fields : integer

logic w1__split_discrs : bool

logic w2__split_fields : integer

logic w2__split_discrs : bool

logic w3__split_fields : integer

logic w3__split_discrs : bool

logic o : integer

logic o1 : integer

logic o2 : us_private

logic call_dispatch__x1__assume : integer

logic call_dispatch__x1__assume1 : us_private

logic call_dispatch__x1__assume2 : int

logic o3 : integer

logic o4 : integer

logic o5 : us_private

logic call_dispatch__x2__assume : integer

logic call_dispatch__x2__assume1 : us_private

logic call_dispatch__x2__assume2 : int

logic o6 : integer

logic o7 : integer

logic o8 : us_private

logic call_dispatch__x3__assume : integer

logic call_dispatch__x3__assume1 : us_private

logic call_dispatch__x3__assume2 : int

logic o9 : integer

logic o10 : integer

logic o11 : integer

logic o12 : integer

logic o13 : us_private

logic o14 : integer

logic o15 : integer

logic o16 : us_private

logic o17 : int

logic call_dispatch__v1__assume : integer

logic call_dispatch__v1__assume1 : us_private

logic call_dispatch__v1__assume2 : int

logic o18 : integer

logic o19 : integer

logic o20 : integer

logic o21 : integer

logic o22 : us_private

logic o23 : integer

logic o24 : integer

logic o25 : us_private

logic o26 : int

logic call_dispatch__v2__assume : integer

logic call_dispatch__v2__assume1 : us_private

logic call_dispatch__v2__assume2 : int

logic o27 : integer

logic o28 : integer

logic o29 : integer

logic o30 : integer

logic o31 : us_private

logic o32 : integer

logic o33 : integer

logic o34 : us_private

logic o35 : int

logic call_dispatch__v3__assume : integer

logic call_dispatch__v3__assume1 : us_private

logic call_dispatch__v3__assume2 : int

logic o36 : int

logic o37 : int

logic call_dispatch__z1__assume : (int,natural) farray

logic call_dispatch__z1__assume1 : t

logic call_dispatch__z2__assume : (int,natural) farray

logic call_dispatch__z2__assume1 : t

logic call_dispatch__z3__assume : (int,natural) farray

logic call_dispatch__z3__assume1 : t

logic call_dispatch__w1__assume : bool

logic call_dispatch__w1__assume1 : integer

logic call_dispatch__w1__assume2 : bool

logic call_dispatch__w2__assume : bool

logic call_dispatch__w2__assume1 : integer

logic call_dispatch__w2__assume2 : bool

logic call_dispatch__w3__assume : bool

logic call_dispatch__w3__assume1 : integer

logic call_dispatch__w3__assume2 : bool

logic result : integer

logic result1 : us_private

logic x1__split_fields2 : integer

logic x1__split_fields3 : us_private

logic result2 : integer

logic result3 : us_private

logic x2__split_fields2 : integer

logic x2__split_fields3 : us_private

logic result4 : integer

logic result5 : us_private

logic x3__split_fields2 : integer

logic x3__split_fields3 : us_private

logic result6 : integer

logic result7 : us_private

logic v1__split_fields2 : integer

logic v1__split_fields3 : us_private

logic result8 : integer

logic result9 : us_private

logic v2__split_fields2 : integer

logic v2__split_fields3 : us_private

logic result10 : integer

logic result11 : us_private

logic v3__split_fields2 : integer

logic v3__split_fields3 : us_private

logic result12 : int

logic y11 : int

logic result13 : int

logic y31 : int

logic result14 : (int,natural) farray

logic z11 : (int,natural) farray

logic result15 : (int,natural) farray

logic z21 : (int,natural) farray

logic result16 : (int,natural) farray

logic z31 : (int,natural) farray

logic result17 : integer

logic w1__split_fields1 : integer

logic result18 : bool

logic w1__split_discrs1 : bool

logic result19 : integer

logic w2__split_fields1 : integer

logic result20 : bool

logic w2__split_discrs1 : bool

logic result21 : integer

logic w3__split_fields1 : integer

logic result22 : bool

logic w3__split_discrs1 : bool

logic c21 : int

logic c31 : int

logic a21 : (int,natural) farray

logic a31 : (int,natural) farray

logic r2__split_fields1 : integer

logic r2__split_discrs1 : bool

logic r3__split_fields1 : integer

logic r3__split_discrs1 : bool

logic x2__split_fields4 : integer

logic x2__split_fields5 : us_private

logic x3__split_fields4 : integer

logic x3__split_fields5 : us_private

logic y21 : int

logic y32 : int

logic z22 : (int,natural) farray

logic z32 : (int,natural) farray

logic w2__split_fields2 : integer

logic w2__split_discrs2 : bool

logic w3__split_fields2 : integer

logic w3__split_discrs2 : bool

logic c22 : int

logic c32 : int

logic a22 : (int,natural) farray

logic a32 : (int,natural) farray

logic r2__split_fields2 : integer

logic r2__split_discrs2 : bool

logic r3__split_fields2 : integer

logic r3__split_discrs2 : bool

logic v2__split_fields4 : integer

logic v2__split_fields5 : us_private

logic v3__split_fields4 : integer

logic v3__split_fields5 : us_private

logic y22 : int

logic y33 : int

logic z23 : (int,natural) farray

logic z33 : (int,natural) farray

logic w2__split_fields3 : integer

logic w2__split_discrs3 : bool

logic w3__split_fields3 : integer

logic w3__split_discrs3 : bool

axiom H : in_range1(b_max)

axiom H1 : (id(100) = b_max)

axiom H2 : in_range1(b_max)

axiom H3 : (id(100) = b_max)

axiom H4 : in_range(c1)

axiom H5 : (((- 2147483648) <= 2147483647) -> in_range(c2))

axiom H6 : in_range(c3)

axiom H7 : (dynamic_property2(1, b_max, to_rep(a1__first),
  to_rep(a1__last)) and ((to_rep(a1__first) = 1) and
  (to_rep(a1__last) = b_max)))

axiom H8 : (dynamic_property4(1, b_max, to_rep(a2__first),
  to_rep(a2__last)) and ((to_rep(a2__first) = 1) and
  (to_rep(a2__last) = b_max)))

axiom H9 : (dynamic_property6(1, b_max, to_rep(a3__first),
  to_rep(a3__last)) and ((to_rep(a3__first) = 1) and
  (to_rep(a3__last) = b_max)))

axiom H10 : (r1__attr__constrained = false)

axiom H11 : (r2__attr__constrained = false)

axiom H12 : (r3__attr__constrained = false)

axiom H13 : (to_rep(o) = 1)

axiom H14 : ((o1 = o) and (o2 = us_null_ext__))

axiom H15 : (((call_dispatch__x1__assume = o1) and
  (call_dispatch__x1__assume1 = o2)) and
  (call_dispatch__x1__assume2 = us_tag))

axiom H16 : ((result = x1__split_fields) and (result1 = x1__split_fields1))

axiom H17 : ((x1__split_fields2 = call_dispatch__x1__assume) and
  (x1__split_fields3 = call_dispatch__x1__assume1))

axiom H18 : (x1__attr__tag = call_dispatch__x1__assume2)

axiom H19 : (to_rep(o3) = 2)

axiom H20 : ((o4 = o3) and (o5 = us_null_ext__))

axiom H21 : (((call_dispatch__x2__assume = o4) and
  (call_dispatch__x2__assume1 = o5)) and
  (call_dispatch__x2__assume2 = us_tag))

axiom H22 : ((result2 = x2__split_fields) and (result3 = x2__split_fields1))

axiom H23 : ((x2__split_fields2 = call_dispatch__x2__assume) and
  (x2__split_fields3 = call_dispatch__x2__assume1))

axiom H24 : (x2__attr__tag = call_dispatch__x2__assume2)

axiom H25 : (to_rep(o6) = 3)

axiom H26 : ((o7 = o6) and (o8 = us_null_ext__))

axiom H27 : (((call_dispatch__x3__assume = o7) and
  (call_dispatch__x3__assume1 = o8)) and
  (call_dispatch__x3__assume2 = us_tag))

axiom H28 : ((result4 = x3__split_fields) and (result5 = x3__split_fields1))

axiom H29 : ((x3__split_fields2 = call_dispatch__x3__assume) and
  (x3__split_fields3 = call_dispatch__x3__assume1))

axiom H30 : (x3__attr__tag = call_dispatch__x3__assume2)

axiom H31 : (to_rep(o9) = 1)

axiom H32 : (to_rep(o10) = 1)

axiom H33 : ((o11 = o10) and ((o12 = o9) and (o13 = us_null_ext__)))

axiom H34 : (((o14 = o11) and ((o15 = o12) and (o16 = o13))) and
  (o17 = us_tag1))

axiom H35 : (((call_dispatch__v1__assume = o15) and
  (call_dispatch__v1__assume1 = hide_ext__(o14, o16))) and
  (call_dispatch__v1__assume2 = o17))

axiom H36 : ((result6 = v1__split_fields) and (result7 = v1__split_fields1))

axiom H37 : ((v1__split_fields2 = call_dispatch__v1__assume) and
  (v1__split_fields3 = call_dispatch__v1__assume1))

axiom H38 : (v1__attr__tag = call_dispatch__v1__assume2)

axiom H39 : (to_rep(o18) = 2)

axiom H40 : (to_rep(o19) = 2)

axiom H41 : ((o20 = o19) and ((o21 = o18) and (o22 = us_null_ext__)))

axiom H42 : (((o23 = o20) and ((o24 = o21) and (o25 = o22))) and
  (o26 = us_tag1))

axiom H43 : (((call_dispatch__v2__assume = o24) and
  (call_dispatch__v2__assume1 = hide_ext__(o23, o25))) and
  (call_dispatch__v2__assume2 = o26))

axiom H44 : ((result8 = v2__split_fields) and (result9 = v2__split_fields1))

axiom H45 : ((v2__split_fields2 = call_dispatch__v2__assume) and
  (v2__split_fields3 = call_dispatch__v2__assume1))

axiom H46 : (v2__attr__tag = call_dispatch__v2__assume2)

axiom H47 : (to_rep(o27) = 3)

axiom H48 : (to_rep(o28) = 3)

axiom H49 : ((o29 = o28) and ((o30 = o27) and (o31 = us_null_ext__)))

axiom H50 : (((o32 = o29) and ((o33 = o30) and (o34 = o31))) and
  (o35 = us_tag1))

axiom H51 : (((call_dispatch__v3__assume = o33) and
  (call_dispatch__v3__assume1 = hide_ext__(o32, o34))) and
  (call_dispatch__v3__assume2 = o35))

axiom H52 : ((result10 = v3__split_fields) and
  (result11 = v3__split_fields1))

axiom H53 : ((v3__split_fields2 = call_dispatch__v3__assume) and
  (v3__split_fields3 = call_dispatch__v3__assume1))

axiom H54 : (v3__attr__tag = call_dispatch__v3__assume2)

axiom H55 : ((o36 = init(c1)) and in_range(o36))

axiom H56 : (result12 = y1)

axiom H57 : (y11 = o36)

axiom H58 : in_range(y11)

axiom H59 : (((- 2147483648) <= 2147483647) -> in_range(y2))

axiom H60 : ((o37 = init(c3)) and in_range(o37))

axiom H61 : (result13 = y3)

axiom H62 : (y31 = o37)

axiom H63 : in_range(y31)

axiom H64 : (({ elts = call_dispatch__z1__assume; rt =
  call_dispatch__z1__assume1 } = init__2({ elts = a1; rt =
  mk(to_rep(a1__first), to_rep(a1__last)) })) and dynamic_property(1,
  2147483647, to_rep(first(call_dispatch__z1__assume1)),
  to_rep(last(call_dispatch__z1__assume1))))

axiom H65 : (result14 = z1)

axiom H66 : (z11 = call_dispatch__z1__assume)

axiom H67 : (to_rep(z1__first) = to_rep(first(call_dispatch__z1__assume1)))

axiom H68 : (to_rep(z1__last) = to_rep(last(call_dispatch__z1__assume1)))

axiom H69 : dynamic_property(1, 2147483647, to_rep(z1__first),
  to_rep(z1__last))

axiom H70 : (({ elts = call_dispatch__z2__assume; rt =
  call_dispatch__z2__assume1 } = init__2({ elts = a2; rt =
  mk(to_rep(a2__first), to_rep(a2__last)) })) and dynamic_property(1,
  2147483647, to_rep(first(call_dispatch__z2__assume1)),
  to_rep(last(call_dispatch__z2__assume1))))

axiom H71 : (result15 = z2)

axiom H72 : (z21 = call_dispatch__z2__assume)

axiom H73 : (to_rep(z2__first) = to_rep(first(call_dispatch__z2__assume1)))

axiom H74 : (to_rep(z2__last) = to_rep(last(call_dispatch__z2__assume1)))

axiom H75 : dynamic_property(1, 2147483647, to_rep(z2__first),
  to_rep(z2__last))

axiom H76 : (({ elts = call_dispatch__z3__assume; rt =
  call_dispatch__z3__assume1 } = init__2({ elts = a3; rt =
  mk(to_rep(a3__first), to_rep(a3__last)) })) and dynamic_property(1,
  2147483647, to_rep(first(call_dispatch__z3__assume1)),
  to_rep(last(call_dispatch__z3__assume1))))

axiom H77 : (result16 = z3)

axiom H78 : (z31 = call_dispatch__z3__assume)

axiom H79 : (to_rep(z3__first) = to_rep(first(call_dispatch__z3__assume1)))

axiom H80 : (to_rep(z3__last) = to_rep(last(call_dispatch__z3__assume1)))

axiom H81 : dynamic_property(1, 2147483647, to_rep(z3__first),
  to_rep(z3__last))

axiom H82 : ({ us_split_discrs1 = { rec__dispatch__mut_rec__d =
  call_dispatch__w1__assume }; us_split_fields1 = {
  rec__dispatch__mut_rec__i = call_dispatch__w1__assume1 };
  attr__constrained = call_dispatch__w1__assume2 } = init__3({
  us_split_discrs1 = { rec__dispatch__mut_rec__d = r1__split_discrs };
  us_split_fields1 = { rec__dispatch__mut_rec__i = r1__split_fields };
  attr__constrained = r1__attr__constrained }))

axiom H83 : (result17 = w1__split_fields)

axiom H84 : (w1__split_fields1 = call_dispatch__w1__assume1)

axiom H85 : (result18 = w1__split_discrs)

axiom H86 : (w1__split_discrs1 = call_dispatch__w1__assume)

axiom H87 : (w1__attr__constrained = false)

axiom H88 : ({ us_split_discrs1 = { rec__dispatch__mut_rec__d =
  call_dispatch__w2__assume }; us_split_fields1 = {
  rec__dispatch__mut_rec__i = call_dispatch__w2__assume1 };
  attr__constrained = call_dispatch__w2__assume2 } = init__3({
  us_split_discrs1 = { rec__dispatch__mut_rec__d = r2__split_discrs };
  us_split_fields1 = { rec__dispatch__mut_rec__i = r2__split_fields };
  attr__constrained = r2__attr__constrained }))

axiom H89 : (result19 = w2__split_fields)

axiom H90 : (w2__split_fields1 = call_dispatch__w2__assume1)

axiom H91 : (result20 = w2__split_discrs)

axiom H92 : (w2__split_discrs1 = call_dispatch__w2__assume)

axiom H93 : (w2__attr__constrained = false)

axiom H94 : ({ us_split_discrs1 = { rec__dispatch__mut_rec__d =
  call_dispatch__w3__assume }; us_split_fields1 = {
  rec__dispatch__mut_rec__i = call_dispatch__w3__assume1 };
  attr__constrained = call_dispatch__w3__assume2 } = init__3({
  us_split_discrs1 = { rec__dispatch__mut_rec__d = r3__split_discrs };
  us_split_fields1 = { rec__dispatch__mut_rec__i = r3__split_fields };
  attr__constrained = r3__attr__constrained }))

axiom H95 : (result21 = w3__split_fields)

axiom H96 : (w3__split_fields1 = call_dispatch__w3__assume1)

axiom H97 : (result22 = w3__split_discrs)

axiom H98 : (w3__split_discrs1 = call_dispatch__w3__assume)

axiom H99 : (w3__attr__constrained = false)

axiom H100 : ((x1__attr__tag = x2__attr__tag) and
  (x1__attr__tag = x3__attr__tag))

axiom H101 : ((((in_range(y21) and in_range(y32)) and in_range(c21)) and
  in_range(c31)) and p__specific_post(x1__attr__tag, { us_split_fields3 = {
  rec__dispatch__root__i = x1__split_fields2; rec__ext__ = x1__split_fields3
  }; attr__tag = x1__attr__tag }, { rec__dispatch__root__i =
  x2__split_fields4; rec__ext__ = x2__split_fields5 }, x2__attr__tag, {
  rec__dispatch__root__i = x3__split_fields4; rec__ext__ = x3__split_fields5
  }, x3__attr__tag, y11, y21, y32, { elts = z11; rt = mk(to_rep(z1__first),
  to_rep(z1__last)) }, z22, z2__first, z2__last, z32, z3__first, z3__last, {
  us_split_discrs1 = { rec__dispatch__mut_rec__d = w1__split_discrs1 };
  us_split_fields1 = { rec__dispatch__mut_rec__i = w1__split_fields1 };
  attr__constrained = w1__attr__constrained }, { rec__dispatch__mut_rec__i =
  w2__split_fields2 }, { rec__dispatch__mut_rec__d = w2__split_discrs2 },
  w2__attr__constrained, { rec__dispatch__mut_rec__i = w3__split_fields2 }, {
  rec__dispatch__mut_rec__d = w3__split_discrs2 }, w3__attr__constrained, c1,
  c31, a1, a31, { rec__dispatch__mut_rec__i = r1__split_fields }, {
  rec__dispatch__mut_rec__d = r1__split_discrs }, {
  rec__dispatch__mut_rec__i = r3__split_fields1 }, {
  rec__dispatch__mut_rec__d = r3__split_discrs1 }, c21, a21, {
  rec__dispatch__mut_rec__i = r2__split_fields1 }, {
  rec__dispatch__mut_rec__d = r2__split_discrs1 }, { rec__dispatch__root__i =
  x2__split_fields2; rec__ext__ = x2__split_fields3 }, {
  rec__dispatch__root__i = x3__split_fields2; rec__ext__ = x3__split_fields3
  }, y2, y31, z21, z31, { rec__dispatch__mut_rec__i = w2__split_fields1 }, {
  rec__dispatch__mut_rec__d = w2__split_discrs1 }, {
  rec__dispatch__mut_rec__i = w3__split_fields1 }, {
  rec__dispatch__mut_rec__d = w3__split_discrs1 }, c1, c3, a1, a3, {
  rec__dispatch__mut_rec__i = r1__split_fields }, {
  rec__dispatch__mut_rec__d = r1__split_discrs }, {
  rec__dispatch__mut_rec__i = r3__split_fields }, {
  rec__dispatch__mut_rec__d = r3__split_discrs }, c2, a2, {
  rec__dispatch__mut_rec__i = r2__split_fields }, {
  rec__dispatch__mut_rec__d = r2__split_discrs }))

axiom H102 : (to_rep(x2__split_fields4) = to_rep(x1__split_fields2))

axiom H103 : (to_rep(x3__split_fields4) = 3)

axiom H104 : ((v1__attr__tag = v2__attr__tag) and
  (v1__attr__tag = v3__attr__tag))

axiom H105 : ((((in_range(y22) and in_range(y33)) and in_range(c22)) and
  in_range(c32)) and p__specific_post(v1__attr__tag, { us_split_fields3 = {
  rec__dispatch__root__i = v1__split_fields2; rec__ext__ = v1__split_fields3
  }; attr__tag = v1__attr__tag }, { rec__dispatch__root__i =
  v2__split_fields4; rec__ext__ = v2__split_fields5 }, v2__attr__tag, {
  rec__dispatch__root__i = v3__split_fields4; rec__ext__ = v3__split_fields5
  }, v3__attr__tag, y11, y22, y33, { elts = z11; rt = mk(to_rep(z1__first),
  to_rep(z1__last)) }, z23, z2__first, z2__last, z33, z3__first, z3__last, {
  us_split_discrs1 = { rec__dispatch__mut_rec__d = w1__split_discrs1 };
  us_split_fields1 = { rec__dispatch__mut_rec__i = w1__split_fields1 };
  attr__constrained = w1__attr__constrained }, { rec__dispatch__mut_rec__i =
  w2__split_fields3 }, { rec__dispatch__mut_rec__d = w2__split_discrs3 },
  w2__attr__constrained, { rec__dispatch__mut_rec__i = w3__split_fields3 }, {
  rec__dispatch__mut_rec__d = w3__split_discrs3 }, w3__attr__constrained, c1,
  c32, a1, a32, { rec__dispatch__mut_rec__i = r1__split_fields }, {
  rec__dispatch__mut_rec__d = r1__split_discrs }, {
  rec__dispatch__mut_rec__i = r3__split_fields2 }, {
  rec__dispatch__mut_rec__d = r3__split_discrs2 }, c22, a22, {
  rec__dispatch__mut_rec__i = r2__split_fields2 }, {
  rec__dispatch__mut_rec__d = r2__split_discrs2 }, { rec__dispatch__root__i =
  v2__split_fields2; rec__ext__ = v2__split_fields3 }, {
  rec__dispatch__root__i = v3__split_fields2; rec__ext__ = v3__split_fields3
  }, y21, y32, z22, z32, { rec__dispatch__mut_rec__i = w2__split_fields2 }, {
  rec__dispatch__mut_rec__d = w2__split_discrs2 }, {
  rec__dispatch__mut_rec__i = w3__split_fields2 }, {
  rec__dispatch__mut_rec__d = w3__split_discrs2 }, c1, c31, a1, a31, {
  rec__dispatch__mut_rec__i = r1__split_fields }, {
  rec__dispatch__mut_rec__d = r1__split_discrs }, {
  rec__dispatch__mut_rec__i = r3__split_fields1 }, {
  rec__dispatch__mut_rec__d = r3__split_discrs1 }, c21, a21, {
  rec__dispatch__mut_rec__i = r2__split_fields1 }, {
  rec__dispatch__mut_rec__d = r2__split_discrs1 }))

axiom H106 : (to_rep(v2__split_fields4) = to_rep(v1__split_fields2))

axiom H107 : (to_rep(v3__split_fields4) = 3)

axiom H108 : (to_rep(((of_base({ us_split_fields3 = {
  rec__dispatch__root__i = v2__split_fields4; rec__ext__ = v2__split_fields5
  }; attr__tag = v2__attr__tag
  })).us_split_fields5).rec__dispatch__child__j) <  0)

 (* File "dispatch.ads", line 24, characters 0-0 *)
goal WP_parameter_def : (to_rep(((of_base({ us_split_fields3 = {
  rec__dispatch__root__i = v3__split_fields4; rec__ext__ = v3__split_fields5
  }; attr__tag = v3__attr__tag
  })).us_split_fields5).rec__dispatch__child__j) = 3)
