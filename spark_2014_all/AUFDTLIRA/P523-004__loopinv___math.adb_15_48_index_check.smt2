(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort value 0)
(declare-fun valueqtint (value) Int)
(assert (forall ((i value)) (and (<= 0 (valueqtint i)) (<= (valueqtint i) 10000))))
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (value value) Bool)
(declare-const dummy value)
(declare-datatypes () ((value__ref (mk_value__ref (value__content value)))))
(define-fun value__ref___projection ((a value__ref)) value (value__content a))
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 10000)) (in_range1 temp___expr_159)))
(define-fun to_rep ((x value)) Int (valueqtint x))
(declare-fun of_rep (Int) value)
(assert (forall ((x value)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x value)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort index 0)
(declare-fun indexqtint (index) Int)
(assert (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 100))))
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 100)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (index index) Bool)
(declare-const dummy1 index)
(declare-datatypes () ((index__ref (mk_index__ref (index__content index)))))
(define-fun index__ref___projection ((a index__ref)) index (index__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int value))))))
(declare-fun slide ((Array Int value) Int Int) (Array Int value))
(assert (forall ((a (Array Int value))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int value))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int value)) (a__first Int) (a__last Int) (b (Array Int value)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int value)) (b (Array Int value))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-fun sorted ((Array Int value)) Bool)
(declare-fun sorted__function_guard (Bool (Array Int value)) Bool)
(define-fun dynamic_invariant1 ((temp___expr_185 (Array Int value)) (temp___is_init_181 Bool) (temp___skip_constant_182 Bool) (temp___do_toplevel_183 Bool) (temp___do_typ_inv_184 Bool)) Bool (=> (= temp___do_toplevel_183 true) (=> (= temp___is_init_181 true) (= (sorted temp___expr_185) true))))
(define-fun dynamic_predicate ((temp___192 (Array Int value))) Bool (= (sorted temp___192) true))
(declare-const i5s (Array Int value))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(define-fun dynamic_invariant2 ((temp___expr_166 Int) (temp___is_init_162 Bool) (temp___skip_constant_163 Bool) (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool (=> (or (= temp___is_init_162 true) (<= 1 100)) (in_range2 temp___expr_166)))
(assert true)
(assert (forall ((v (Array Int value))) (! (= (= (sorted v) true) (forall ((j Int)) (=> (and (<= 1 j) (<= j 99)) (<= (to_rep (select v j)) (to_rep (select v (+ j 1))))))) :pattern ((sorted v)))))
(declare-const v (Array Int value))
(declare-const prev_value Int)
(declare-const tmp_value Int)
(declare-const j Int)
(declare-const o value)
(declare-const temp___206 (Array Int value))
(declare-const o1 (Array Int value))
(declare-const k Int)
(declare-const o2 Int)
(declare-const o3 value)
(declare-const o4 Int)
(declare-const result Int)
(declare-const prev_value1 Int)
(declare-const result1 Int)
(declare-const j1 Int)
(declare-const result2 Int)
(declare-const tmp_value1 Int)
(declare-const result3 Int)
(declare-const prev_value2 Int)
(declare-const result4 (Array Int value))
(declare-const v1 (Array Int value))
(declare-const v2 (Array Int value))
(declare-const prev_value3 Int)
(declare-const tmp_value2 Int)
(declare-const j2 Int)
(assert (= (sorted i5s) true))
(assert (= (sorted v) true))
(assert (= result prev_value))
(assert (= prev_value1 (to_rep (select v 1))))
(assert (in_range1 prev_value1))
(assert (=> (<= 0 10000) (in_range1 tmp_value)))
(assert (= result1 j))
(assert (= j1 1))
(assert (<= 1 j1))
(assert (<= j1 100))
(assert (= result2 tmp_value))
(assert (= tmp_value1 prev_value1))
(assert (= result3 prev_value1))
(assert (= prev_value2 (to_rep (select v j1))))
(assert (= (to_rep o) tmp_value1))
(assert (= temp___206 (store v j1 o)))
(assert (dynamic_predicate temp___206))
(assert (= o1 temp___206))
(assert (= result4 v))
(assert (= v1 o1))
(assert (= prev_value3 (to_rep (select v j2))))
(assert (forall ((k1 Int)) (=> (and (<= 1 k1) (<= k1 j2)) (= (to_rep (select v2 k1)) (to_rep (select v (ite (< 1 (- k1 1)) (- k1 1) 1)))))))
(assert (forall ((k1 Int)) (=> (and (<= (+ j2 1) k1) (<= k1 100)) (= (to_rep (select v2 k1)) (to_rep (select v k1))))))
(assert (and (and (and (and (and (=> (<= 0 10000) (in_range1 prev_value3)) (= (sorted v2) true)) (forall ((temp___209 Int)) (=> (and (<= 1 temp___209) (<= temp___209 100)) (=> (or (< 100 temp___209) (or (< temp___209 1) (< j2 temp___209))) (= (select v2 temp___209) (select v temp___209)))))) (=> (<= 0 10000) (in_range1 tmp_value2))) (=> (<= 1 100) (in_range2 j2))) (and (<= 1 j2) (<= j2 100))))
(assert (<= 1 k))
(assert (<= k j2))
(assert (and (<= 1 (ite (< 1 (- k 1)) (- k 1) 1)) (<= (ite (< 1 (- k 1)) (- k 1) 1) 100)))
(assert (= o2 (ite (< 1 (- k 1)) (- k 1) 1)))
(assert (= o3 (select v o2)))
(assert (= o4 (to_rep o3)))
(assert (not (<= k 100)))
(check-sat)
(exit)
