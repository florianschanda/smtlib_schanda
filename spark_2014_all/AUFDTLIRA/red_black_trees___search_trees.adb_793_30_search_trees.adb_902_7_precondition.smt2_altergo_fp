(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref___projection(a: natural__ref) : natural =
  (a).natural__content

logic to_rep : natural -> int

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type tcount_typeB

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tcount_typeB, tcount_typeB -> bool

logic dummy1 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref___projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type index_type

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

logic bool_eq4 : int, int -> bool

axiom bool_eq_def3 :
  (forall x:int. forall y:int [bool_eq4(x, y)]. (((x = y) -> (bool_eq4(x,
  y) = true)) and ((not (x = y)) -> (bool_eq4(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_type, index_type -> bool

logic dummy2 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref___projection(a: index_type__ref) : index_type =
  (a).index_type__content

type extended_index_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 100))

logic bool_eq5 : int, int -> bool

axiom bool_eq_def4 :
  (forall x:int. forall y:int [bool_eq5(x, y)]. (((x = y) -> (bool_eq5(x,
  y) = true)) and ((not (x = y)) -> (bool_eq5(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : extended_index_type, extended_index_type -> bool

logic dummy3 : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref___projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

logic to_rep1 : extended_index_type -> int

logic of_rep1 : int -> extended_index_type

axiom inversion_axiom1 :
  (forall x:extended_index_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:extended_index_type [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type direction

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq6 : int, int -> bool

axiom bool_eq_def5 :
  (forall x:int. forall y:int [bool_eq6(x, y)]. (((x = y) -> (bool_eq6(x,
  y) = true)) and ((not (x = y)) -> (bool_eq6(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : direction, direction -> bool

logic dummy4 : direction

type direction__ref = { direction__content : direction
}

function direction__ref___projection(a: direction__ref) : direction =
  (a).direction__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq7 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : us_rep -> int

logic value__alignment : int

logic object__alignment : us_rep -> int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (forall a:us_rep. (0 <= object__size(a)))

axiom value__alignment_axiom : (0 <= value__alignment)

axiom object__alignment_axiom :
  (forall a:us_rep. (0 <= object__alignment(a)))

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref___projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq8 : int, int -> bool

axiom bool_eq_def6 :
  (forall x:int. forall y:int [bool_eq8(x, y)]. (((x = y) -> (bool_eq8(x,
  y) = true)) and ((not (x = y)) -> (bool_eq8(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : count_type, count_type -> bool

logic dummy6 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref___projection(a: count_type__ref) : count_type =
  (a).count_type__content

logic last__function_guard : int, us_rep -> prop

logic get : us_rep, int -> int

logic get__function_guard : int, us_rep, int -> prop

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq5(a, b)].
  (((forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
    n) = get(b, n)))) ->
  (user_eq5(a, b) = match_bool(bool_eq1(length(a), length(b)), true,
  false))) and
  ((not (forall n:int. (((1 <= n) and (n <= (0 + length(a)))) -> (get(a,
        n) = get(b, n))))) ->
  (user_eq5(a, b) = match_bool(bool_eq1(length(a), length(b)), false,
  false)))))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (((0 + length(container)) <= 2147483647) and in_range6(length(container))))

type element_type

predicate in_range7(x: int) = ((0 <= x) and (x <= 1))

logic bool_eq9 : int, int -> bool

axiom bool_eq_def7 :
  (forall x:int. forall y:int [bool_eq9(x, y)]. (((x = y) -> (bool_eq9(x,
  y) = true)) and ((not (x = y)) -> (bool_eq9(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : element_type, element_type -> bool

logic dummy7 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref___projection(a: element_type__ref) : element_type =
  (a).element_type__content

type extended_index

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq10 : int, int -> bool

axiom bool_eq_def8 :
  (forall x:int. forall y:int [bool_eq10(x, y)]. (((x = y) -> (bool_eq10(x,
  y) = true)) and ((not (x = y)) -> (bool_eq10(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : extended_index, extended_index -> bool

logic dummy8 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref___projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position:int [get(container, position)]. ((in_range8(position) and
  ((1 <= position) and (position <= (0 + length(container))))) ->
  in_range7(get(container, position)))))

logic olt__function_guard : bool, us_rep, us_rep -> prop

type us_split_fields = { rec__tree_model__path_type__a : us_rep;
rec__tree_model__path_type__k : bool
}

function us_split_fields_A__projection(a: us_split_fields) : us_rep =
  (a).rec__tree_model__path_type__a

function us_split_fields_K__projection(a: us_split_fields) : bool =
  (a).rec__tree_model__path_type__k

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic bool_eq11 : us_rep1, us_rep1 -> bool

axiom bool_eq_def9 :
  (forall a:us_rep1. forall b:us_rep1 [bool_eq11(a, b)].
  ((((user_eq5(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k)) ->
  (bool_eq11(a, b) = true)) and
  ((not ((user_eq5(((a).us_split_fields1).rec__tree_model__path_type__a,
  ((b).us_split_fields1).rec__tree_model__path_type__a) = true) and
  (((a).us_split_fields1).rec__tree_model__path_type__k = ((b).us_split_fields1).rec__tree_model__path_type__k))) ->
  (bool_eq11(a, b) = false))))

logic value__size1 : int

logic object__size1 : us_rep1 -> int

logic value__alignment1 : int

logic object__alignment1 : us_rep1 -> int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__size1({ us_split_fields1 =
  { rec__tree_model__path_type__a = a; rec__tree_model__path_type__k = a1 }
  })))

axiom value__alignment_axiom1 : (0 <= value__alignment1)

axiom object__alignment_axiom1 :
  (forall a:us_rep. forall a1:bool. (0 <= object__alignment1({
  us_split_fields1 = { rec__tree_model__path_type__a = a;
  rec__tree_model__path_type__k = a1 } })))

logic tree_model__path_type__a__first__bit : int

logic tree_model__path_type__a__last__bit : int

logic tree_model__path_type__a__position : int

axiom tree_model__path_type__a__first__bit_axiom :
  (0 <= tree_model__path_type__a__first__bit)

axiom tree_model__path_type__a__last__bit_axiom :
  (tree_model__path_type__a__first__bit <  tree_model__path_type__a__last__bit)

axiom tree_model__path_type__a__position_axiom :
  (0 <= tree_model__path_type__a__position)

logic tree_model__path_type__k__first__bit : int

logic tree_model__path_type__k__last__bit : int

logic tree_model__path_type__k__position : int

axiom tree_model__path_type__k__first__bit_axiom :
  (0 <= tree_model__path_type__k__first__bit)

axiom tree_model__path_type__k__last__bit_axiom :
  (tree_model__path_type__k__first__bit <  tree_model__path_type__k__last__bit)

axiom tree_model__path_type__k__position_axiom :
  (0 <= tree_model__path_type__k__position)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy9 : us_rep

logic dummy10 : bool

type path_type__ref = { path_type__content : us_rep1
}

function path_type__ref___projection(a: path_type__ref) : us_rep1 =
  (a).path_type__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> (int,us_rep1) farray

axiom concat_def :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton : us_rep1, int -> (int,us_rep1) farray

axiom singleton_def :
  (forall v:us_rep. forall v1:bool.
  (forall i:int [(singleton({ us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } },
  i)[i])]. ((singleton({ us_split_fields1 = { rec__tree_model__path_type__a =
  v; rec__tree_model__path_type__k = v1 } }, i)[i]) = { us_split_fields1 = {
  rec__tree_model__path_type__a = v; rec__tree_model__path_type__k = v1 } })))

logic bool_eq12 : (int,us_rep1) farray, int, int, (int,us_rep1) farray, int,
  int -> bool

axiom bool_eq_def10 :
  (forall a:(int,us_rep1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep1) farray. forall b__first:int. forall b__last:int
  [bool_eq12(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_132:int. ((((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) and (bool_eq11((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)) or
  (not ((a__first <= temp___idx_132) and (temp___idx_132 <= a__last)))))) ->
  (bool_eq12(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq11((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true))))) -> (bool_eq12(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_132:int. (((a__first <= temp___idx_132) and
  (temp___idx_132 <= a__last)) -> (bool_eq11((a[temp___idx_132]),
  (b[((b__first - a__first) + temp___idx_132)])) = true)))))))

logic oeq : (int,us_rep1) farray, (int,us_rep1) farray -> bool

logic oeq__function_guard1 : bool, (int,us_rep1) farray,
  (int,us_rep1) farray -> prop

axiom oeq__post_axiom : true

axiom oeq__def_axiom :
  (forall m1:(int,us_rep1) farray. forall m2:(int,us_rep1) farray [oeq(m1,
  m2)]. (((oeq(m1, m2) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((((bool_eq1(length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((m2[i])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
  (forall n:int. (((1 <= n) and
  (n <= (0 + length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((m1[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((m2[i])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
  (not (bool_eq1(length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((m2[i])).us_split_fields1).rec__tree_model__path_type__a)) = false))) and
  (((((m1[i])).us_split_fields1).rec__tree_model__path_type__k = true) <->
  ((((m2[i])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) ->
   (((bool_eq1(length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a),
   length((((m2[i])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and
   (n <= (0 + length((((m1[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((m1[i])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((m2[i])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (((((m1[i])).us_split_fields1).rec__tree_model__path_type__k = true) <->
   ((((m2[i])).us_split_fields1).rec__tree_model__path_type__k = true))))) ->
  (oeq(m1, m2) = true))))

logic is_add : us_rep, int, us_rep -> bool

logic is_add__function_guard : bool, us_rep, int, us_rep -> prop

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq13 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : us_rep2 -> int

logic value__alignment2 : int

logic object__alignment2 : us_rep2 -> int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (forall a:us_rep2. (0 <= object__size2(a)))

axiom value__alignment_axiom2 : (0 <= value__alignment2)

axiom object__alignment_axiom2 :
  (forall a:us_rep2. (0 <= object__alignment2(a)))

logic user_eq10 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep2

type set__ref = { set__content : us_rep2
}

function set__ref___projection(a: set__ref) : us_rep2 = (a).set__content

logic oeq1 : us_rep2, us_rep2 -> bool

logic oeq__function_guard2 : bool, us_rep2, us_rep2 -> prop

logic is_empty : us_rep2 -> bool

logic is_empty__function_guard : bool, us_rep2 -> prop

logic ole : us_rep2, us_rep2 -> bool

logic ole__function_guard : bool, us_rep2, us_rep2 -> prop

axiom oeq__post_axiom1 :
  (forall left:us_rep2. forall right:us_rep2 [oeq1(left, right)].
  ((oeq1(left, right) = true) <-> ((ole(left, right) = true) and (ole(right,
  left) = true))))

type value_set__ref = { value_set__content : us_rep2
}

function value_set__ref___projection(a: value_set__ref) : us_rep2 =
  (a).value_set__content

type position_type

predicate in_range9(x: int) = ((0 <= x) and (x <= 2))

logic bool_eq14 : int, int -> bool

axiom bool_eq_def11 :
  (forall x:int. forall y:int [bool_eq14(x, y)]. (((x = y) -> (bool_eq14(x,
  y) = true)) and ((not (x = y)) -> (bool_eq14(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : position_type, position_type -> bool

logic dummy12 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref___projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep2 : position_type -> int

logic of_rep2 : int -> position_type

axiom inversion_axiom2 :
  (forall x:position_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:position_type [to_rep2(x)]. in_range9(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range9(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields2 = { rec__binary_trees__cell__left :
extended_index_type; rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_Left__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_Right__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_Parent__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_Position__projection(a: us_split_fields2) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep3 = { us_split_fields3 : us_split_fields2
}

function us_rep___2__projection(a: us_rep3) : us_split_fields2 =
  (a).us_split_fields3

logic bool_eq15 : us_rep3, us_rep3 -> bool

axiom bool_eq_def12 :
  (forall a:us_rep3. forall b:us_rep3 [bool_eq15(a, b)].
  ((((((to_rep1(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep2(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep2(((b).us_split_fields3).rec__binary_trees__cell__position))) ->
  (bool_eq15(a, b) = true)) and
  ((not ((((to_rep1(((a).us_split_fields3).rec__binary_trees__cell__left) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__left)) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__right) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__right))) and
  (to_rep1(((a).us_split_fields3).rec__binary_trees__cell__parent) = to_rep1(((b).us_split_fields3).rec__binary_trees__cell__parent))) and
  (to_rep2(((a).us_split_fields3).rec__binary_trees__cell__position) = to_rep2(((b).us_split_fields3).rec__binary_trees__cell__position)))) ->
  (bool_eq15(a, b) = false))))

logic value__size3 : int

logic object__size3 : us_rep3 -> int

logic value__alignment3 : int

logic object__alignment3 : us_rep3 -> int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__size3({ us_split_fields3 = { rec__binary_trees__cell__left =
  a; rec__binary_trees__cell__right = a1; rec__binary_trees__cell__parent =
  a2; rec__binary_trees__cell__position = a3 } })))

axiom value__alignment_axiom3 : (0 <= value__alignment3)

axiom object__alignment_axiom3 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:extended_index_type. forall a3:position_type.
  (0 <= object__alignment3({ us_split_fields3 = {
  rec__binary_trees__cell__left = a; rec__binary_trees__cell__right = a1;
  rec__binary_trees__cell__parent = a2; rec__binary_trees__cell__position =
  a3 } })))

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq12 : us_rep3, us_rep3 -> bool

logic dummy13 : extended_index_type

logic dummy14 : extended_index_type

logic dummy15 : extended_index_type

logic dummy16 : position_type

type cell__ref = { cell__content : us_rep3
}

function cell__ref___projection(a: cell__ref) : us_rep3 = (a).cell__content

type map__ref1 = { map__content1 : (int,us_rep3) farray
}

logic slide1 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq1 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat1 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> (int,us_rep3) farray

axiom concat_def1 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat1(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat1(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat1(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton1 : us_rep3, int -> (int,us_rep3) farray

axiom singleton_def1 :
  (forall v:extended_index_type. forall v1:extended_index_type.
  forall v2:extended_index_type. forall v3:position_type.
  (forall i:int [(singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i])]. ((singleton1({ us_split_fields3 = {
  rec__binary_trees__cell__left = v; rec__binary_trees__cell__right = v1;
  rec__binary_trees__cell__parent = v2; rec__binary_trees__cell__position =
  v3 } }, i)[i]) = { us_split_fields3 = { rec__binary_trees__cell__left = v;
  rec__binary_trees__cell__right = v1; rec__binary_trees__cell__parent = v2;
  rec__binary_trees__cell__position = v3 } })))

logic bool_eq16 : (int,us_rep3) farray, int, int, (int,us_rep3) farray, int,
  int -> bool

axiom bool_eq_def13 :
  (forall a:(int,us_rep3) farray. forall a__first:int. forall a__last:int.
  forall b:(int,us_rep3) farray. forall b__first:int. forall b__last:int
  [bool_eq16(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_133:int. ((((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) and (bool_eq15((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)) or
  (not ((a__first <= temp___idx_133) and (temp___idx_133 <= a__last)))))) ->
  (bool_eq16(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq15((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true))))) -> (bool_eq16(a,
  a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq16(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_133:int. (((a__first <= temp___idx_133) and
  (temp___idx_133 <= a__last)) -> (bool_eq15((a[temp___idx_133]),
  (b[((b__first - a__first) + temp___idx_133)])) = true)))))))

logic dummy17 : (int,us_rep3) farray

logic value__size4 : int

logic object__size4 : (int,us_rep3) farray -> int

logic value__component__size : int

logic object__component__size : (int,us_rep3) farray -> int

logic value__alignment4 : int

logic object__alignment4 : (int,us_rep3) farray -> int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 :
  (forall a:(int,us_rep3) farray. (0 <= object__size4(a)))

axiom value__component__size_axiom : (0 <= value__component__size)

axiom object__component__size_axiom :
  (forall a:(int,us_rep3) farray. (0 <= object__component__size(a)))

axiom value__alignment_axiom4 : (0 <= value__alignment4)

axiom object__alignment_axiom4 :
  (forall a:(int,us_rep3) farray. (0 <= object__alignment4(a)))

logic user_eq13 : (int,us_rep3) farray, (int,us_rep3) farray -> bool

type us_split_fields4 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep3) farray
}

function us_split_fields_S__projection(a: us_split_fields4) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_C__projection(a: us_split_fields4) : (int,us_rep3) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep4 = { us_split_fields5 : us_split_fields4
}

function us_rep___3__projection(a: us_rep4) : us_split_fields4 =
  (a).us_split_fields5

logic bool_eq17 : us_rep4, us_rep4 -> bool

axiom bool_eq_def14 :
  (forall a:us_rep4. forall b:us_rep4 [bool_eq17(a, b)].
  ((((to_rep1(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep1(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq16(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true)) ->
  (bool_eq17(a, b) = true)) and
  ((not ((to_rep1(((a).us_split_fields5).rec__binary_trees__forest__s) = to_rep1(((b).us_split_fields5).rec__binary_trees__forest__s)) and
  (bool_eq16(((a).us_split_fields5).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields5).rec__binary_trees__forest__c, 1, 100) = true))) ->
  (bool_eq17(a, b) = false))))

logic value__size5 : int

logic object__size5 : us_rep4 -> int

logic value__alignment5 : int

logic object__alignment5 : us_rep4 -> int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 :
  (forall a:extended_index_type. forall a1:(int,us_rep3) farray.
  (0 <= object__size5({ us_split_fields5 = { rec__binary_trees__forest__s =
  a; rec__binary_trees__forest__c = a1 } })))

axiom value__alignment_axiom5 : (0 <= value__alignment5)

axiom object__alignment_axiom5 :
  (forall a:extended_index_type. forall a1:(int,us_rep3) farray.
  (0 <= object__alignment5({ us_split_fields5 = {
  rec__binary_trees__forest__s = a; rec__binary_trees__forest__c = a1 } })))

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq14 : us_rep4, us_rep4 -> bool

logic dummy18 : extended_index_type

logic dummy19 : (int,us_rep3) farray

type forest__ref = { forest__content : us_rep4
}

function forest__ref___projection(a: forest__ref) : us_rep4 =
  (a).forest__content

logic size : us_rep4 -> int

logic size__function_guard : int, us_rep4 -> prop

logic tree_structure : us_rep4 -> bool

logic tree_structure__function_guard : bool, us_rep4 -> prop

logic valid_root : us_rep4, int -> bool

logic valid_root__function_guard : bool, us_rep4, int -> prop

logic parent : us_rep4, int -> int

logic parent__function_guard : int, us_rep4, int -> prop

axiom parent__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i:int [parent({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } }, i)]. (((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) and in_range3(i)) ->
  ((((valid_root({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = true) -> (parent({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = 0) -> (parent({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) and in_range4(parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i))))))

logic position : us_rep4, int -> int

logic position__function_guard : int, us_rep4, int -> prop

axiom position__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i:int [position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range3(i)) and (not (parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i) = 0))) -> in_range5(position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i)))))

logic model__ : us_rep4, int -> (int,us_rep1) farray

logic model____function_guard : (int,us_rep1) farray, us_rep4, int -> prop

axiom model____post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall root:int [model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range3(root)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root) = true)) -> ((((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[root])).us_split_fields1).rec__tree_model__path_type__a) = 0) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> ((not (i = root)) ->
   ((((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } }, i) = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, root)[parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
   (not ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true))))))) and
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root))) -> (is_add((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[parent({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   i)])).us_split_fields1).rec__tree_model__path_type__a, position({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } }, i), (((model__({ us_split_fields5 =
   { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = true)) and
   ((not (((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
   (not (i = root)))) -> (length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root)[i])).us_split_fields1).rec__tree_model__path_type__a) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_eq1(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[i])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (j = i))))))))))) and
  (forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root)[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))))

logic peek : us_rep4, int, int -> int

logic peek__function_guard : int, us_rep4, int, int -> prop

logic ole__function_guard1 : bool, us_rep, us_rep -> prop

logic is_concat : us_rep, us_rep, us_rep -> bool

logic is_concat__function_guard : bool, us_rep, us_rep, us_rep -> prop

type map__ref2 = { map__content2 : (int,natural) farray
}

logic slide2 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq2 :
  (forall a:(int,natural) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic concat2 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> (int,natural) farray

axiom concat_def2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat2(a, a_first, a_last, b, b_first, b_last)[i])].
  ((((a_first <= i) and (i <= a_last)) -> ((concat2(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))) and ((a_last <  i) -> ((concat2(a, a_first,
  a_last, b, b_first, b_last)[i]) = (b[((i - a_last) + (b_first - 1))])))))))

logic singleton2 : natural, int -> (int,natural) farray

axiom singleton_def2 :
  (forall v:natural.
  (forall i:int [(singleton2(v, i)[i])]. ((singleton2(v, i)[i]) = v)))

logic bool_eq18 : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> bool

axiom bool_eq_def15 :
  (forall a:(int,natural) farray. forall a__first:int. forall a__last:int.
  forall b:(int,natural) farray. forall b__first:int. forall b__last:int
  [bool_eq18(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_134:int. ((((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) and
  (to_rep((a[temp___idx_134])) = to_rep((b[((b__first - a__first) + temp___idx_134)])))) or
  (not ((a__first <= temp___idx_134) and (temp___idx_134 <= a__last)))))) ->
  (bool_eq18(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep((a[temp___idx_134])) = to_rep((b[((b__first - a__first) + temp___idx_134)]))))))) ->
  (bool_eq18(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq18(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_134:int. (((a__first <= temp___idx_134) and
  (temp___idx_134 <= a__last)) ->
  (to_rep((a[temp___idx_134])) = to_rep((b[((b__first - a__first) + temp___idx_134)])))))))))

logic compare : (int,natural) farray, int, int, (int,natural) farray, int,
  int -> int

axiom compare_def_eq :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) <-> (bool_eq18(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_lt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) <->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq18(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep((a[(i + 1)])) <  to_rep((b[(j + 1)]))))))))))))

axiom compare_def_gt :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) <->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq18(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep((b[(i + 1)])) <  to_rep((a[(j + 1)]))))))))))))

logic dummy20 : (int,natural) farray

logic value__size6 : int

logic object__size6 : (int,natural) farray -> int

logic value__component__size1 : int

logic object__component__size1 : (int,natural) farray -> int

logic value__alignment6 : int

logic object__alignment6 : (int,natural) farray -> int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 :
  (forall a:(int,natural) farray. (0 <= object__size6(a)))

axiom value__component__size_axiom1 : (0 <= value__component__size1)

axiom object__component__size_axiom1 :
  (forall a:(int,natural) farray. (0 <= object__component__size1(a)))

axiom value__alignment_axiom6 : (0 <= value__alignment6)

axiom object__alignment_axiom6 :
  (forall a:(int,natural) farray. (0 <= object__alignment6(a)))

logic user_eq15 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields6 = { rec__search_trees__search_tree__root :
extended_index_type; rec__search_trees__search_tree__struct : us_rep4;
rec__search_trees__search_tree__values : (int,natural) farray
}

function us_split_fields_Root__projection(a: us_split_fields6) : extended_index_type =
  (a).rec__search_trees__search_tree__root

function us_split_fields_Struct__projection(a: us_split_fields6) : us_rep4 =
  (a).rec__search_trees__search_tree__struct

function us_split_fields_Values__projection(a: us_split_fields6) : (int,natural) farray =
  (a).rec__search_trees__search_tree__values

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep5 = { us_split_fields7 : us_split_fields6
}

function us_rep___4__projection(a: us_rep5) : us_split_fields6 =
  (a).us_split_fields7

logic bool_eq19 : us_rep5, us_rep5 -> bool

axiom bool_eq_def16 :
  (forall a:us_rep5. forall b:us_rep5 [bool_eq19(a, b)].
  (((((to_rep1(((a).us_split_fields7).rec__search_trees__search_tree__root) = to_rep1(((b).us_split_fields7).rec__search_trees__search_tree__root)) and
  (bool_eq17(((a).us_split_fields7).rec__search_trees__search_tree__struct,
  ((b).us_split_fields7).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq18(((a).us_split_fields7).rec__search_trees__search_tree__values,
  1, 100, ((b).us_split_fields7).rec__search_trees__search_tree__values, 1,
  100) = true)) -> (bool_eq19(a, b) = true)) and
  ((not (((to_rep1(((a).us_split_fields7).rec__search_trees__search_tree__root) = to_rep1(((b).us_split_fields7).rec__search_trees__search_tree__root)) and
  (bool_eq17(((a).us_split_fields7).rec__search_trees__search_tree__struct,
  ((b).us_split_fields7).rec__search_trees__search_tree__struct) = true)) and
  (bool_eq18(((a).us_split_fields7).rec__search_trees__search_tree__values,
  1, 100, ((b).us_split_fields7).rec__search_trees__search_tree__values, 1,
  100) = true))) -> (bool_eq19(a, b) = false))))

logic value__size7 : int

logic object__size7 : us_rep5 -> int

logic value__alignment7 : int

logic object__alignment7 : us_rep5 -> int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep3) farray. forall a3:(int,natural) farray.
  (0 <= object__size7({ us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

axiom value__alignment_axiom7 : (0 <= value__alignment7)

axiom object__alignment_axiom7 :
  (forall a:extended_index_type. forall a1:extended_index_type.
  forall a2:(int,us_rep3) farray. forall a3:(int,natural) farray.
  (0 <= object__alignment7({ us_split_fields7 = {
  rec__search_trees__search_tree__root = a;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = a1; rec__binary_trees__forest__c = a2 } };
  rec__search_trees__search_tree__values = a3 } })))

logic search_trees__search_tree__root__first__bit : int

logic search_trees__search_tree__root__last__bit : int

logic search_trees__search_tree__root__position : int

axiom search_trees__search_tree__root__first__bit_axiom :
  (0 <= search_trees__search_tree__root__first__bit)

axiom search_trees__search_tree__root__last__bit_axiom :
  (search_trees__search_tree__root__first__bit <  search_trees__search_tree__root__last__bit)

axiom search_trees__search_tree__root__position_axiom :
  (0 <= search_trees__search_tree__root__position)

logic search_trees__search_tree__struct__first__bit : int

logic search_trees__search_tree__struct__last__bit : int

logic search_trees__search_tree__struct__position : int

axiom search_trees__search_tree__struct__first__bit_axiom :
  (0 <= search_trees__search_tree__struct__first__bit)

axiom search_trees__search_tree__struct__last__bit_axiom :
  (search_trees__search_tree__struct__first__bit <  search_trees__search_tree__struct__last__bit)

axiom search_trees__search_tree__struct__position_axiom :
  (0 <= search_trees__search_tree__struct__position)

logic search_trees__search_tree__values__first__bit : int

logic search_trees__search_tree__values__last__bit : int

logic search_trees__search_tree__values__position : int

axiom search_trees__search_tree__values__first__bit_axiom :
  (0 <= search_trees__search_tree__values__first__bit)

axiom search_trees__search_tree__values__last__bit_axiom :
  (search_trees__search_tree__values__first__bit <  search_trees__search_tree__values__last__bit)

axiom search_trees__search_tree__values__position_axiom :
  (0 <= search_trees__search_tree__values__position)

logic user_eq16 : us_rep5, us_rep5 -> bool

logic dummy21 : extended_index_type

logic dummy22 : extended_index_type

logic dummy23 : (int,us_rep3) farray

logic dummy24 : (int,natural) farray

type search_tree__ref = { search_tree__content : us_rep5
}

function search_tree__ref___projection(a: search_tree__ref) : us_rep5 =
  (a).search_tree__content

logic size1 : us_rep5 -> int

logic size__function_guard1 : int, us_rep5 -> prop

logic ordered_leafs : us_rep4, int, (int,natural) farray -> bool

logic ordered_leafs__function_guard : bool, us_rep4, int,
  (int,natural) farray -> prop

logic temp___387 : int -> (int,natural) farray

axiom def_axiom :
  (forall temp___389:int.
  (forall temp___390:int.
  ((temp___387(temp___389)[temp___390]) = of_rep(temp___389))))

axiom size__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [size1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and (((size({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep1(t) = 0)) or
  ((not (size({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep1(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t), t3) = true))))) -> in_range4(size1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

axiom size__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [size1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) -> (size1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = size({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }))))

logic root : us_rep5 -> int

logic root__function_guard : int, us_rep5 -> prop

axiom root__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [root({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. ((((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and (((size({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep1(t) = 0)) or
  ((not (size({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep1(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t), t3) = true))))) and (not (size1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0))) -> in_range3(root({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }))))

axiom root__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [root({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) -> (root({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = to_rep1(t))))

logic parent1 : us_rep5, int -> int

logic parent__function_guard1 : int, us_rep5, int -> prop

axiom parent__post_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [parent1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. ((((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and in_range3(i)) and
  (((size({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep1(t) = 0)) or
  ((not (size({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep1(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t), t3) = true))))) -> (((size1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0) -> (parent1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = 0)) and
  in_range4(parent1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i))))))

axiom parent__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [parent1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. (((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and in_range3(i)) ->
  (parent1({ us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = parent({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i)))))

logic position1 : us_rep5, int -> int

logic position__function_guard1 : int, us_rep5, int -> prop

axiom position__post_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. (((((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and in_range3(i)) and
  (((size({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep1(t) = 0)) or
  ((not (size({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep1(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t), t3) = true))))) and (not (parent1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = 0))) ->
  in_range5(position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)))))

axiom position__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int [position1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i)]. (((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and in_range3(i)) ->
  (position1({ us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i) = position({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i)))))

logic model__1 : us_rep5 -> (int,us_rep1) farray

logic model____function_guard1 : (int,us_rep1) farray, us_rep5 -> prop

axiom model____post_axiom1 :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [model__1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. ((((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and (((size({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep1(t) = 0)) or
  ((not (size({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep1(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t), t3) = true))))) and (not (size1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0))) ->
  (forall temp___217:int. (((1 <= temp___217) and (temp___217 <= 100)) ->
  (length((((model__1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[temp___217])).us_split_fields1).rec__tree_model__path_type__a) <  100)))))

axiom model____def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [model__1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) -> (model__1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, to_rep1(t)))))

logic peek1 : us_rep5, int, int -> int

logic peek__function_guard1 : int, us_rep5, int, int -> prop

axiom peek__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int. forall d:int [peek1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)].
  ((((((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  t1; rec__binary_trees__forest__c = t2 } }) = true) and in_range3(i)) and
  in_range5(d)) and (((size({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = 0) and (to_rep1(t) = 0)) or ((not (size({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = 0)) and (((not (to_rep1(t) = 0)) and (valid_root({ us_split_fields5 =
  { rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t), t3) = true))))) and ((not (size1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0)) and ((((model__1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true))) ->
  in_range4(peek1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)))))

axiom peek__def_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray.
  (forall i:int. forall d:int [peek1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d)].
  ((((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  t1; rec__binary_trees__forest__c = t2 } }) = true) and in_range3(i)) and
  in_range5(d)) -> (peek1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }, i, d) = peek({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }, i, d)))))

logic values : us_rep5 -> us_rep2

logic values__function_guard : us_rep2, us_rep5 -> prop

logic values1 : us_rep5 -> us_rep2

logic values__function_guard1 : us_rep2, us_rep5 -> prop

logic contains : us_rep2, int -> bool

logic contains__function_guard : bool, us_rep2, int -> prop

axiom values__post_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [values({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and (((size({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep1(t) = 0)) or
  ((not (size({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep1(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t), t3) = true))))) -> ((size1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }) = 0) -> (is_empty(values({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })) = true))))

axiom values__post_refine_axiom :
  (forall t:extended_index_type. forall t1:extended_index_type.
  forall t2:(int,us_rep3) farray. forall t3:(int,natural) farray [values1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })]. (((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = true) and (((size({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0) and (to_rep1(t) = 0)) or
  ((not (size({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) and
  (((not (to_rep1(t) = 0)) and (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t)) = true)) and (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } },
  to_rep1(t), t3) = true))))) -> (((size({ us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 }
  }) = 0) -> (is_empty(values1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } })) = true)) and
  ((not (size({ us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } }) = 0)) ->
  ((forall i:int. (((1 <= i) and (i <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t1;
   rec__binary_trees__forest__c = t2 } },
   to_rep1(t))[i])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (contains(values1({ us_split_fields7 = {
   rec__search_trees__search_tree__root = t;
   rec__search_trees__search_tree__struct = { us_split_fields5 = {
   rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
   rec__search_trees__search_tree__values = t3 } }),
   to_rep((t3[i]))) = true)))) and
  (forall v:int. (((0 <= v) and (v <= 2147483647)) -> ((contains(values1({
  us_split_fields7 = { rec__search_trees__search_tree__root = t;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t1; rec__binary_trees__forest__c = t2 } };
  rec__search_trees__search_tree__values = t3 } }), v) = true) ->
  (exists i:int. (((1 <= i) and (i <= 100)) and (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t1;
  rec__binary_trees__forest__c = t2 } },
  to_rep1(t))[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (to_rep((t3[i])) = v))))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom ordered_leafs__post_axiom : true

axiom ordered_leafs__def_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall root1:int.
  (forall values2:(int,natural) farray [ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1, values2)]. (((ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1, values2) = true) ->
  (forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i1])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__k = true)) and
  ((bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  root1)[i1])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i1])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i1])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i1])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
  (to_rep((values2[j])) <  to_rep((values2[i1])))) and
  ((not (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f; rec__binary_trees__forest__c = f1 } },
  root1)[j])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } },
  root1)[i1])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (to_rep((values2[i1])) <  to_rep((values2[j]))))))))))) and
  ((forall i1:int. (((1 <= i1) and (i1 <= 100)) ->
   (forall j:int. (((1 <= j) and (j <= 100)) -> (((((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i1])).us_split_fields1).rec__tree_model__path_type__k = true) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[j])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   (((bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root1)[i1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[j])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i1])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[i1])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root1)[j])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_lt(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root1)[i1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[j])).us_split_fields1).rec__tree_model__path_type__a)) = false)))) ->
   (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s = f;
   rec__binary_trees__forest__c = f1 } },
   root1)[j])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root1)[i1])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) and
   (to_rep((values2[j])) <  to_rep((values2[i1])))) or
   ((not (get((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
   root1)[j])).us_split_fields1).rec__tree_model__path_type__a,
   (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   f; rec__binary_trees__forest__c = f1 } },
   root1)[i1])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) and
   (to_rep((values2[i1])) <  to_rep((values2[j])))))))))) ->
  (ordered_leafs({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, root1, values2) = true))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic is_root : bool

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

axiom is_concat__post_axiom : true

axiom is_concat__def_axiom :
  (forall q:us_rep. forall v:us_rep. forall p:us_rep [is_concat(q, v, p)].
  ((is_concat(q, v, p) = true) <->
  (((((length(p) - length(v)) = length(q)) and
  (forall i1:int. (((1 <= i1) and (i1 <= length(q))) -> (get(p, i1) = get(q,
  i1))))) and
  (forall i1:int. (((1 <= i1) and (i1 <= length(v))) -> (get(p,
  (i1 + length(q))) = get(v, i1))))) and
  (forall i1:int. ((((length(q) + 1) <= i1) and (i1 <= length(p))) -> (get(v,
  (i1 - length(q))) = get(p, i1)))))))

axiom is_add__post_axiom : true

axiom is_add__def_axiom :
  (forall s1:us_rep. forall s2:us_rep.
  (forall d:int [is_add(s1, d, s2)]. (((is_add(s1, d, s2) = true) ->
  ((((length(s2) - 1) = length(s1)) and (((bool_lt(length(s1),
  length(s2)) = true) ->
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n))))) and (not (bool_lt(length(s1),
  length(s2)) = false)))) and (get(s2, length(s2)) = d))) and
  (((((length(s2) - 1) = length(s1)) and ((bool_lt(length(s1),
  length(s2)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length(s1)))) -> (get(s1,
  n) = get(s2, n)))))) and (get(s2, length(s2)) = d)) -> (is_add(s1, d,
  s2) = true)))))

axiom size__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray [size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } })]. ((tree_structure({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }) = true) -> in_range4(size({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }))))

axiom valid_root__post_axiom :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i1:int [valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i1)]. (((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range3(i1)) -> ((size({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) <  i1) -> (not (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i1) = true))))))

axiom peek__post_axiom1 :
  (forall f:extended_index_type. forall f1:(int,us_rep3) farray.
  (forall i1:int. forall d:int [peek({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i1, d)]. ((((tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 }
  }) = true) and in_range3(i1)) and in_range5(d)) -> (((((not (peek({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i1, d) = 0)) -> ((position({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, peek({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  i1, d)) = d) and (parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  peek({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i1, d)) = i1))) and ((peek({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i1, d) = 0) ->
  (forall j:int. (((1 <= j) and (j <= 100)) -> ((parent({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = i1) -> (not (position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = d))))))) and
  (forall j:int. (((1 <= j) and (j <= 100)) -> (((parent({ us_split_fields5 =
  { rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = i1) and (position({ us_split_fields5 = {
  rec__binary_trees__forest__s = f; rec__binary_trees__forest__c = f1 } },
  j) = d)) -> (peek({ us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i1, d) = j))))) and in_range4(peek({
  us_split_fields5 = { rec__binary_trees__forest__s = f;
  rec__binary_trees__forest__c = f1 } }, i1, d))))))

axiom tree_structure__post_axiom : true

type element_type1

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

logic bool_eq20 : int, int -> bool

axiom bool_eq_def17 :
  (forall x:int. forall y:int [bool_eq20(x, y)]. (((x = y) -> (bool_eq20(x,
  y) = true)) and ((not (x = y)) -> (bool_eq20(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq17 : element_type1, element_type1 -> bool

logic dummy25 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref___2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

axiom contains__post_axiom :
  (forall container:us_rep2.
  (forall item:int [contains(container, item)]. (in_range10(item) ->
  ((of_int(1) = true) ->
  ((exists e:int. ((in_range10(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

axiom length__post_axiom1 :
  (forall container:us_rep2 [length1(container)].
  in_range6(length1(container)))

axiom ole__post_axiom :
  (forall left:us_rep2. forall right:us_rep2 [ole(left, right)]. ((ole(left,
  right) = true) <->
  (forall item:int. ((in_range10(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom is_empty__post_axiom :
  (forall container:us_rep2 [is_empty(container)].
  (((is_empty(container) = true) <->
  (forall item:int. (not (in_range10(item) and (contains(container,
  item) = true))))) and ((is_empty(container) = true) <->
  (length1(container) = 0))))

logic t__split_fields : extended_index_type

logic t__split_fields1 : extended_index_type

logic t__split_fields2 : (int,us_rep3) farray

logic t__split_fields3 : (int,natural) farray

logic x : int

logic y : int

logic yl : int

logic j : int

logic d : int

logic t_old__split_fields : extended_index_type

logic t_old__split_fields1 : extended_index_type

logic t_old__split_fields2 : (int,us_rep3) farray

logic t_old__split_fields3 : (int,natural) farray

logic f_old__split_fields : extended_index_type

logic f_old__split_fields1 : (int,us_rep3) farray

logic f_1__split_fields : extended_index_type

logic f_1__split_fields1 : (int,us_rep3) farray

logic f_2__split_fields : extended_index_type

logic f_2__split_fields1 : (int,us_rep3) farray

logic f_3__split_fields : extended_index_type

logic f_3__split_fields1 : (int,us_rep3) farray

logic f_4__split_fields : extended_index_type

logic f_4__split_fields1 : (int,us_rep3) farray

logic f_5__split_fields : extended_index_type

logic f_5__split_fields1 : (int,us_rep3) farray

logic temp___1014 : (int,us_rep1) farray

logic o : us_rep

logic o1 : bool

logic o2 : us_rep

logic o3 : bool

logic o4 : int

logic o5 : int

logic o6 : int

logic o7 : int

logic o8 : int

logic o9 : int

logic o10 : int

logic o11 : int

logic o12 : int

logic temp___810 : (int,us_rep1) farray

logic o13 : us_rep

logic o14 : bool

logic o15 : us_rep

logic o16 : bool

logic o17 : us_rep

logic o18 : int

logic o19 : int

logic o20 : int

logic temp___819 : (int,us_rep1) farray

logic o21 : int

logic o22 : us_rep

logic o23 : bool

logic o24 : us_rep

logic o25 : bool

logic o26 : us_rep

logic o27 : int

logic o28 : int

logic temp___824 : (int,us_rep1) farray

logic o29 : int

logic o30 : us_rep

logic o31 : bool

logic o32 : us_rep

logic o33 : bool

logic o34 : us_rep

logic o35 : int

logic j1 : int

logic temp___828 : (int,us_rep1) farray

logic us : bool

logic o36 : int

logic us1 : bool

logic o37 : int

logic o38 : int

logic temp___838 : (int,us_rep1) farray

logic o39 : us_rep

logic o40 : bool

logic o41 : us_rep

logic o42 : bool

logic o43 : us_rep

logic o44 : int

logic j2 : int

logic temp___842 : (int,us_rep1) farray

logic j3 : int

logic temp___851 : (int,us_rep1) farray

logic us2 : bool

logic us3 : bool

logic o45 : int

logic o46 : extended_index_type

logic o47 : extended_index_type

logic o48 : extended_index_type

logic o49 : (int,us_rep3) farray

logic o50 : (int,natural) farray

logic temp___950 : extended_index_type

logic temp___9501 : extended_index_type

logic temp___9502 : (int,us_rep3) farray

logic temp___9503 : (int,natural) farray

logic o51 : int

logic o52 : int

logic o53 : (int,us_rep1) farray

logic o54 : int

logic o55 : (int,us_rep1) farray

logic o56 : int

logic temp___861 : (int,us_rep1) farray

logic o57 : us_rep

logic o58 : bool

logic o59 : us_rep

logic o60 : bool

logic o61 : us_rep

logic o62 : int

logic temp___862 : (int,us_rep1) farray

logic o63 : us_rep

logic o64 : bool

logic o65 : us_rep

logic o66 : bool

logic o67 : us_rep

logic o68 : int

logic temp___863 : (int,us_rep1) farray

logic o69 : us_rep

logic o70 : bool

logic o71 : us_rep

logic o72 : bool

logic o73 : us_rep

logic o74 : int

logic temp___864 : (int,us_rep1) farray

logic o75 : us_rep

logic o76 : bool

logic o77 : us_rep

logic o78 : bool

logic o79 : us_rep

logic i1 : int

logic temp___866 : (int,us_rep1) farray

logic o80 : us_rep

logic o81 : bool

logic o82 : us_rep

logic o83 : bool

logic temp___865 : (int,us_rep1) farray

logic i2 : int

logic o84 : int

logic temp___874 : (int,us_rep1) farray

logic o85 : us_rep

logic o86 : bool

logic o87 : us_rep

logic o88 : bool

logic o89 : int

logic temp___875 : (int,us_rep1) farray

logic o90 : us_rep

logic o91 : bool

logic o92 : us_rep

logic o93 : bool

logic o94 : us_rep

logic o95 : int

logic temp___876 : (int,us_rep1) farray

logic o96 : us_rep

logic o97 : bool

logic o98 : us_rep

logic o99 : bool

logic o100 : us_rep

logic o101 : bool

logic o102 : bool

logic o103 : int

logic temp___871 : (int,us_rep1) farray

logic o104 : int

logic temp___872 : (int,us_rep1) farray

logic o105 : us_rep

logic o106 : bool

logic o107 : us_rep

logic o108 : bool

logic o109 : us_rep

logic o110 : int

logic temp___873 : (int,us_rep1) farray

logic o111 : us_rep

logic o112 : bool

logic o113 : us_rep

logic o114 : bool

logic o115 : us_rep

logic o116 : bool

logic i3 : int

logic o117 : int

logic temp___893 : (int,us_rep1) farray

logic o118 : us_rep

logic o119 : bool

logic o120 : us_rep

logic o121 : bool

logic o122 : int

logic temp___894 : (int,us_rep1) farray

logic o123 : us_rep

logic o124 : bool

logic o125 : us_rep

logic o126 : bool

logic o127 : us_rep

logic o128 : int

logic temp___895 : (int,us_rep1) farray

logic o129 : us_rep

logic o130 : bool

logic o131 : us_rep

logic o132 : bool

logic o133 : us_rep

logic o134 : bool

logic o135 : bool

logic o136 : int

logic temp___889 : (int,us_rep1) farray

logic o137 : us_rep

logic o138 : bool

logic o139 : us_rep

logic o140 : bool

logic o141 : us_rep

logic o142 : int

logic temp___890 : (int,us_rep1) farray

logic o143 : us_rep

logic o144 : bool

logic o145 : us_rep

logic o146 : bool

logic o147 : us_rep

logic o148 : int

logic o149 : int

logic o150 : int

logic o151 : int

logic temp___891 : (int,us_rep1) farray

logic o152 : us_rep

logic o153 : bool

logic o154 : us_rep

logic o155 : bool

logic o156 : us_rep

logic o157 : int

logic temp___892 : (int,us_rep1) farray

logic o158 : us_rep

logic o159 : bool

logic o160 : us_rep

logic o161 : bool

logic o162 : us_rep

logic o163 : int

logic o164 : int

logic o165 : int

logic o166 : int

logic o167 : int

logic i4 : int

logic o168 : int

logic temp___924 : (int,us_rep1) farray

logic o169 : us_rep

logic o170 : bool

logic o171 : us_rep

logic o172 : bool

logic o173 : int

logic temp___925 : (int,us_rep1) farray

logic o174 : us_rep

logic o175 : bool

logic o176 : us_rep

logic o177 : bool

logic o178 : us_rep

logic o179 : int

logic temp___926 : (int,us_rep1) farray

logic o180 : us_rep

logic o181 : bool

logic o182 : us_rep

logic o183 : bool

logic o184 : us_rep

logic o185 : bool

logic o186 : bool

logic o187 : int

logic temp___922 : (int,us_rep1) farray

logic o188 : us_rep

logic o189 : bool

logic o190 : us_rep

logic o191 : bool

logic o192 : us_rep

logic o193 : int

logic temp___923 : (int,us_rep1) farray

logic o194 : us_rep

logic o195 : bool

logic o196 : us_rep

logic o197 : bool

logic o198 : us_rep

logic o199 : int

logic o200 : int

logic o201 : int

logic o202 : int

logic j4 : int

logic temp___912 : (int,us_rep1) farray

logic j5 : int

logic temp___918 : (int,us_rep1) farray

logic o203 : int

logic j6 : int

logic d1 : int

logic o204 : int

logic o205 : bool

logic o206 : int

logic o207 : bool

logic o208 : bool

logic o209 : int

logic o210 : bool

logic o211 : bool

logic o212 : bool

logic o213 : bool

logic temp___957 : (int,us_rep1) farray

logic o214 : us_rep

logic o215 : bool

logic o216 : us_rep

logic o217 : bool

logic o218 : bool

logic o219 : bool

logic o220 : int

logic o221 : int

logic o222 : int

logic o223 : int

logic o224 : int

logic o225 : int

logic o226 : int

logic o227 : bool

logic o228 : int

logic o229 : int

logic o230 : int

logic o231 : int

logic o232 : int

logic o233 : int

logic o234 : int

logic o235 : int

logic o236 : int

logic o237 : int

logic o238 : int

logic o239 : int

logic o240 : int

logic o241 : int

logic o242 : us_rep2

logic o243 : us_rep2

logic j7 : int

logic temp___970 : (int,us_rep1) farray

logic o244 : us_rep

logic o245 : bool

logic o246 : us_rep

logic o247 : bool

logic j8 : int

logic temp___975 : (int,us_rep1) farray

logic o248 : us_rep

logic o249 : bool

logic o250 : us_rep

logic o251 : bool

logic j9 : int

logic o252 : int

logic o253 : int

logic o254 : int

logic o255 : int

logic o256 : int

logic o257 : int

logic o258 : int

logic o259 : int

logic o260 : int

logic o261 : int

logic o262 : int

logic o263 : bool

logic o264 : int

logic o265 : int

logic o266 : bool

logic o267 : int

logic o268 : bool

logic o269 : int

logic j10 : int

logic o270 : int

logic o271 : int

logic o272 : int

logic o273 : int

logic o274 : int

logic o275 : int

logic o276 : int

logic o277 : int

logic o278 : int

logic o279 : int

logic o280 : int

logic o281 : bool

logic o282 : int

logic o283 : int

logic o284 : int

logic o285 : bool

logic o286 : int

logic o287 : int

logic o288 : int

logic o289 : int

logic o290 : int

logic o291 : int

logic o292 : bool

logic o293 : int

logic o294 : int

logic o295 : int

logic o296 : int

logic o297 : int

logic o298 : int

logic o299 : int

logic o300 : int

logic o301 : int

logic o302 : int

logic o303 : int

logic o304 : int

logic o305 : int

logic o306 : int

logic o307 : int

logic o308 : int

logic o309 : int

logic o310 : int

logic o311 : int

logic o312 : int

logic o313 : int

logic o314 : int

logic o315 : int

logic o316 : int

logic o317 : int

logic o318 : int

logic o319 : int

logic o320 : int

logic o321 : int

logic o322 : int

logic o323 : int

logic o324 : int

logic o325 : int

logic o326 : int

logic o327 : int

logic o328 : int

logic o329 : int

logic o330 : int

logic o331 : int

logic o332 : int

logic o333 : int

logic o334 : int

logic o335 : int

logic o336 : int

logic o337 : int

logic t__split_fields4 : extended_index_type

logic t__split_fields5 : extended_index_type

logic t__split_fields6 : (int,us_rep3) farray

logic t__split_fields7 : (int,natural) farray

logic result : bool

logic result1 : bool

logic result2 : int

logic j11 : int

logic result3 : int

logic d2 : int

logic result4 : extended_index_type

logic result5 : extended_index_type

logic result6 : (int,us_rep3) farray

logic result7 : (int,natural) farray

logic t_old__split_fields4 : extended_index_type

logic t_old__split_fields5 : extended_index_type

logic t_old__split_fields6 : (int,us_rep3) farray

logic t_old__split_fields7 : (int,natural) farray

logic result8 : extended_index_type

logic result9 : (int,us_rep3) farray

logic f_old__split_fields2 : extended_index_type

logic f_old__split_fields3 : (int,us_rep3) farray

logic result10 : extended_index_type

logic result11 : (int,us_rep3) farray

logic f_1__split_fields2 : extended_index_type

logic f_1__split_fields3 : (int,us_rep3) farray

logic result12 : extended_index_type

logic result13 : (int,us_rep3) farray

logic f_2__split_fields2 : extended_index_type

logic f_2__split_fields3 : (int,us_rep3) farray

logic result14 : extended_index_type

logic result15 : (int,us_rep3) farray

logic f_3__split_fields2 : extended_index_type

logic f_3__split_fields3 : (int,us_rep3) farray

logic result16 : extended_index_type

logic result17 : (int,us_rep3) farray

logic f_4__split_fields2 : extended_index_type

logic f_4__split_fields3 : (int,us_rep3) farray

logic result18 : extended_index_type

logic result19 : (int,us_rep3) farray

logic f_5__split_fields2 : extended_index_type

logic f_5__split_fields3 : (int,us_rep3) farray

logic result20 : int

logic x1 : int

logic result21 : int

logic j12 : int

logic result22 : int

logic d3 : int

logic binary_trees__extract__v : int

logic binary_trees__extract__f__fields : extended_index_type

logic binary_trees__extract__f__fields1 : (int,us_rep3) farray

logic result23 : extended_index_type

logic result24 : extended_index_type

logic result25 : (int,us_rep3) farray

logic result26 : (int,natural) farray

logic t__split_fields8 : extended_index_type

logic t__split_fields9 : extended_index_type

logic t__split_fields10 : (int,us_rep3) farray

logic t__split_fields11 : (int,natural) farray

logic result27 : int

logic x2 : int

logic result28 : extended_index_type

logic result29 : (int,us_rep3) farray

logic f_1__split_fields4 : extended_index_type

logic f_1__split_fields5 : (int,us_rep3) farray

logic binary_trees__extract__v1 : int

logic binary_trees__extract__f__fields2 : extended_index_type

logic binary_trees__extract__f__fields3 : (int,us_rep3) farray

logic result30 : extended_index_type

logic result31 : extended_index_type

logic result32 : (int,us_rep3) farray

logic result33 : (int,natural) farray

logic t__split_fields12 : extended_index_type

logic t__split_fields13 : extended_index_type

logic t__split_fields14 : (int,us_rep3) farray

logic t__split_fields15 : (int,natural) farray

logic result34 : int

logic y1 : int

logic result35 : extended_index_type

logic result36 : (int,us_rep3) farray

logic f_2__split_fields4 : extended_index_type

logic f_2__split_fields5 : (int,us_rep3) farray

logic yl1 : int

logic binary_trees__extract__f__fields4 : extended_index_type

logic binary_trees__extract__f__fields5 : (int,us_rep3) farray

logic result37 : extended_index_type

logic result38 : extended_index_type

logic result39 : (int,us_rep3) farray

logic result40 : (int,natural) farray

logic t__split_fields16 : extended_index_type

logic t__split_fields17 : extended_index_type

logic t__split_fields18 : (int,us_rep3) farray

logic t__split_fields19 : (int,natural) farray

logic result41 : extended_index_type

logic result42 : (int,us_rep3) farray

logic f_3__split_fields4 : extended_index_type

logic f_3__split_fields5 : (int,us_rep3) farray

logic binary_trees__plug__f__fields : extended_index_type

logic binary_trees__plug__f__fields1 : (int,us_rep3) farray

logic result43 : extended_index_type

logic result44 : extended_index_type

logic result45 : (int,us_rep3) farray

logic result46 : (int,natural) farray

logic t__split_fields20 : extended_index_type

logic t__split_fields21 : extended_index_type

logic t__split_fields22 : (int,us_rep3) farray

logic t__split_fields23 : (int,natural) farray

logic result47 : extended_index_type

logic result48 : (int,us_rep3) farray

logic f_4__split_fields4 : extended_index_type

logic f_4__split_fields5 : (int,us_rep3) farray

logic binary_trees__plug__f__fields2 : extended_index_type

logic binary_trees__plug__f__fields3 : (int,us_rep3) farray

logic result49 : extended_index_type

logic result50 : extended_index_type

logic result51 : (int,us_rep3) farray

logic result52 : (int,natural) farray

logic t__split_fields24 : extended_index_type

logic t__split_fields25 : extended_index_type

logic t__split_fields26 : (int,us_rep3) farray

logic t__split_fields27 : (int,natural) farray

logic result53 : extended_index_type

logic result54 : (int,us_rep3) farray

logic f_5__split_fields4 : extended_index_type

logic f_5__split_fields5 : (int,us_rep3) farray

logic result55 : extended_index_type

logic result56 : extended_index_type

logic result57 : (int,us_rep3) farray

logic result58 : (int,natural) farray

logic t__split_fields28 : extended_index_type

logic t__split_fields29 : extended_index_type

logic t__split_fields30 : (int,us_rep3) farray

logic t__split_fields31 : (int,natural) farray

logic binary_trees__plug__f__fields4 : extended_index_type

logic binary_trees__plug__f__fields5 : (int,us_rep3) farray

logic result59 : extended_index_type

logic result60 : extended_index_type

logic result61 : (int,us_rep3) farray

logic result62 : (int,natural) farray

logic t__split_fields32 : extended_index_type

logic t__split_fields33 : extended_index_type

logic t__split_fields34 : (int,us_rep3) farray

logic t__split_fields35 : (int,natural) farray

logic result63 : bool

logic result64 : bool

logic result65 : bool

logic result66 : bool

logic result67 : bool

logic t__split_fields36 : extended_index_type

logic t__split_fields37 : extended_index_type

logic t__split_fields38 : (int,us_rep3) farray

logic t__split_fields39 : (int,natural) farray

logic x3 : int

logic y2 : int

logic yl2 : int

logic j13 : int

logic d4 : int

logic t_old__split_fields8 : extended_index_type

logic t_old__split_fields9 : extended_index_type

logic t_old__split_fields10 : (int,us_rep3) farray

logic t_old__split_fields11 : (int,natural) farray

logic f_old__split_fields4 : extended_index_type

logic f_old__split_fields5 : (int,us_rep3) farray

logic f_1__split_fields6 : extended_index_type

logic f_1__split_fields7 : (int,us_rep3) farray

logic f_2__split_fields6 : extended_index_type

logic f_2__split_fields7 : (int,us_rep3) farray

logic f_3__split_fields6 : extended_index_type

logic f_3__split_fields7 : (int,us_rep3) farray

logic f_4__split_fields6 : extended_index_type

logic f_4__split_fields7 : (int,us_rep3) farray

logic f_5__split_fields6 : extended_index_type

logic f_5__split_fields7 : (int,us_rep3) farray

logic t__split_fields40 : extended_index_type

logic t__split_fields41 : extended_index_type

logic t__split_fields42 : (int,us_rep3) farray

logic t__split_fields43 : (int,natural) farray

logic x4 : int

logic y3 : int

logic yl3 : int

logic j14 : int

logic d5 : int

logic t_old__split_fields12 : extended_index_type

logic t_old__split_fields13 : extended_index_type

logic t_old__split_fields14 : (int,us_rep3) farray

logic t_old__split_fields15 : (int,natural) farray

logic f_old__split_fields6 : extended_index_type

logic f_old__split_fields7 : (int,us_rep3) farray

logic f_1__split_fields8 : extended_index_type

logic f_1__split_fields9 : (int,us_rep3) farray

logic f_2__split_fields8 : extended_index_type

logic f_2__split_fields9 : (int,us_rep3) farray

logic f_3__split_fields8 : extended_index_type

logic f_3__split_fields9 : (int,us_rep3) farray

logic f_4__split_fields8 : extended_index_type

logic f_4__split_fields9 : (int,us_rep3) farray

logic f_5__split_fields8 : extended_index_type

logic f_5__split_fields9 : (int,us_rep3) farray

logic result68 : bool

logic result69 : bool

logic result70 : bool

logic result71 : bool

logic result72 : bool

logic result73 : bool

logic result74 : bool

logic result75 : bool

logic result76 : bool

logic result77 : bool

logic result78 : bool

logic result79 : bool

logic result80 : bool

logic result81 : bool

logic result82 : bool

logic result83 : bool

logic result84 : bool

logic result85 : bool

logic result86 : bool

logic result87 : bool

logic result88 : bool

logic result89 : bool

logic result90 : bool

logic result91 : bool

logic result92 : bool

logic result93 : bool

logic result94 : bool

logic result95 : bool

logic result96 : bool

logic result97 : bool

logic result98 : bool

logic result99 : bool

logic result100 : bool

logic result101 : bool

axiom H : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }) = true)

axiom H1 : in_range3(i)

axiom H2 : (((size({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 }
  }) = 0) -> (to_rep1(t__split_fields) = 0)) and ((not (size({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }) = 0)) ->
  (((not (to_rep1(t__split_fields) = 0)) and (valid_root({ us_split_fields5 =
  { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } },
  to_rep1(t__split_fields)) = true)) and (ordered_leafs({ us_split_fields5 =
  { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } },
  to_rep1(t__split_fields), t__split_fields3) = true))))

axiom H3 : ((0 <  size1({ us_split_fields7 = {
  rec__search_trees__search_tree__root = t__split_fields;
  rec__search_trees__search_tree__struct = { us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } })) and
  (((((model__1({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 }
  })[i])).us_split_fields1).rec__tree_model__path_type__k = true) and
  (not (peek1({ us_split_fields7 = { rec__search_trees__search_tree__root =
  t__split_fields; rec__search_trees__search_tree__struct = {
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } };
  rec__search_trees__search_tree__values = t__split_fields3 } }, i,
  1) = 0))))

axiom H4 : ((1 <= 100) -> in_range3(x))

axiom H5 : ((1 <= 100) -> in_range3(y))

axiom H6 : ((0 <= 100) -> in_range4(yl))

axiom H7 : (((i = to_rep1(t__split_fields)) -> (true = is_root)) and
  ((not (i = to_rep1(t__split_fields))) -> (false = is_root)))

axiom H8 : (result2 = j)

axiom H9 : (j11 = 1)

axiom H10 : in_range3(j11)

axiom H11 : (result3 = d)

axiom H12 : (d2 = 0)

axiom H13 : in_range5(d2)

axiom H14 : ((result4 = t_old__split_fields) and
  (((result5 = t_old__split_fields1) and
  (result6 = t_old__split_fields2)) and (result7 = t_old__split_fields3)))

axiom H15 : ((t_old__split_fields4 = t__split_fields) and
  (((t_old__split_fields5 = t__split_fields1) and
  (t_old__split_fields6 = t__split_fields2)) and
  (t_old__split_fields7 = t__split_fields3)))

axiom H16 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = t_old__split_fields5;
  rec__binary_trees__forest__c = t_old__split_fields6 } }) = true)

axiom H17 : ((result8 = f_old__split_fields) and
  (result9 = f_old__split_fields1))

axiom H18 : ((f_old__split_fields2 = t__split_fields1) and
  (f_old__split_fields3 = t__split_fields2))

axiom H19 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_old__split_fields2;
  rec__binary_trees__forest__c = f_old__split_fields3 } }) = true)

axiom H20 : ((result10 = f_1__split_fields) and
  (result11 = f_1__split_fields1))

axiom H21 : ((f_1__split_fields2 = t__split_fields1) and
  (f_1__split_fields3 = t__split_fields2))

axiom H22 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_1__split_fields2;
  rec__binary_trees__forest__c = f_1__split_fields3 } }) = true)

axiom H23 : ((result12 = f_2__split_fields) and
  (result13 = f_2__split_fields1))

axiom H24 : ((f_2__split_fields2 = t__split_fields1) and
  (f_2__split_fields3 = t__split_fields2))

axiom H25 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_2__split_fields2;
  rec__binary_trees__forest__c = f_2__split_fields3 } }) = true)

axiom H26 : ((result14 = f_3__split_fields) and
  (result15 = f_3__split_fields1))

axiom H27 : ((f_3__split_fields2 = t__split_fields1) and
  (f_3__split_fields3 = t__split_fields2))

axiom H28 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_3__split_fields2;
  rec__binary_trees__forest__c = f_3__split_fields3 } }) = true)

axiom H29 : ((result16 = f_4__split_fields) and
  (result17 = f_4__split_fields1))

axiom H30 : ((f_4__split_fields2 = t__split_fields1) and
  (f_4__split_fields3 = t__split_fields2))

axiom H31 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_4__split_fields2;
  rec__binary_trees__forest__c = f_4__split_fields3 } }) = true)

axiom H32 : ((result18 = f_5__split_fields) and
  (result19 = f_5__split_fields1))

axiom H33 : ((f_5__split_fields2 = t__split_fields1) and
  (f_5__split_fields3 = t__split_fields2))

axiom H34 : (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_5__split_fields2;
  rec__binary_trees__forest__c = f_5__split_fields3 } }) = true)

axiom H35 : ((is_root = true) -> ((o5 = to_rep1(t__split_fields)) and
  in_range3(to_rep1(t__split_fields))))

axiom H36 : ((is_root = true) -> (result20 = x))

axiom H37 : ((is_root = true) -> (x1 = o5))

axiom H38 : ((is_root = true) -> (d3 = d2))

axiom H39 : ((is_root = true) -> (j12 = j11))

axiom H40 : ((is_root = true) -> ((t__split_fields8 = t__split_fields) and
  (((t__split_fields9 = t__split_fields1) and
  (t__split_fields10 = t__split_fields2)) and
  (t__split_fields11 = t__split_fields3))))

axiom H41 : ((is_root = true) -> (d3 = d2))

axiom H42 : ((is_root = true) -> (j12 = j11))

axiom H43 : ((is_root = true) -> ((t__split_fields8 = t__split_fields4) and
  (((t__split_fields9 = t__split_fields5) and
  (t__split_fields10 = t__split_fields6)) and
  (t__split_fields11 = t__split_fields7))))

axiom H44 : ((not (is_root = true)) -> ((o6 = parent({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }, i)) and
  (in_range4(o6) and (((valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }, i) = true) ->
  (o6 = 0)) and ((size({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 }
  }) = 0) -> (o6 = 0))))))

axiom H45 : ((not (is_root = true)) -> ((o7 = o6) and in_range3(o6)))

axiom H46 : ((not (is_root = true)) -> (result21 = j11))

axiom H47 : ((not (is_root = true)) -> (j12 = o7))

axiom H48 : ((not (is_root = true)) -> ((o8 = position({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }, i)) and
  in_range5(o8)))

axiom H49 : ((not (is_root = true)) -> (result22 = d2))

axiom H50 : ((not (is_root = true)) -> (d3 = o8))

axiom H51 : ((not (is_root = true)) -> ((o9 = to_rep1(t__split_fields)) and
  in_range3(to_rep1(t__split_fields))))

axiom H52 : ((not (is_root = true)) -> (((size({ us_split_fields5 = {
  rec__binary_trees__forest__s = binary_trees__extract__f__fields;
  rec__binary_trees__forest__c = binary_trees__extract__f__fields1 }
  }) = size({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } })) and
  ((valid_root({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields1 } }, o9) = true) and
  ((binary_trees__extract__v = peek({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields1;
  rec__binary_trees__forest__c = t__split_fields2 } }, j12, d3)) and ((peek({
  us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields1 } }, j12, d3) = 0) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) ->
   ((not (j15 = binary_trees__extract__v)) -> (parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields1 } },
   j15) = parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   j15))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) ->
   (((not (j15 = binary_trees__extract__v)) and (not (parent({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } }, j15) = 0))) -> (position({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } }, j15) = position({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
   rec__binary_trees__forest__c = t__split_fields2 } }, j15))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) ->
   (forall e:int. (((0 <= e) and (e <= 1)) -> (((not (j15 = j12)) or
   (not (e = d3))) -> (peek({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields1 } }, j15,
   e) = peek({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   j15, e))))))) and
  ((forall t:int. (((1 <= t) and (t <= 100)) -> ((((valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
   rec__binary_trees__forest__c = t__split_fields2 } }, t) = true) and
   (not (j12 = t))) and (not (binary_trees__extract__v = t))) ->
   (valid_root({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } }, t) = true)))) and
  ((forall t:int. (((1 <= t) and (t <= 100)) -> ((((valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
   rec__binary_trees__forest__c = t__split_fields2 } }, t) = true) and
   (not (o9 = t))) and (not (binary_trees__extract__v = t))) ->
   (oeq(model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } }, t), model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields1;
   rec__binary_trees__forest__c = t__split_fields2 } }, t)) = true)))) and
  (((not (binary_trees__extract__v = 0)) -> (valid_root({ us_split_fields5 =
  { rec__binary_trees__forest__s = binary_trees__extract__f__fields;
  rec__binary_trees__forest__c = binary_trees__extract__f__fields1 } },
  binary_trees__extract__v) = true)) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
   rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((not (binary_trees__extract__v = 0)) and ((bool_le(length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
   rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[binary_trees__extract__v])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
   rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[binary_trees__extract__v])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[binary_trees__extract__v])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } },
   binary_trees__extract__v)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (binary_trees__extract__v = 0)) and
   (((bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields1;
   rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[binary_trees__extract__v])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields1;
   rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[binary_trees__extract__v])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[binary_trees__extract__v])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields1;
   rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[binary_trees__extract__v])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = false))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) ->
   (((not (binary_trees__extract__v = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } },
   binary_trees__extract__v)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (((bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields1 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields1 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields1 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
   o9)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = false)))))) and
  (forall i5:int. (((1 <= i5) and (i5 <= 100)) ->
  (((not (binary_trees__extract__v = 0)) and ((((model__({ us_split_fields5 =
  { rec__binary_trees__forest__s = binary_trees__extract__f__fields;
  rec__binary_trees__forest__c = binary_trees__extract__f__fields1 } },
  binary_trees__extract__v)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
  (is_concat((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
  o9)[binary_trees__extract__v])).us_split_fields1).rec__tree_model__path_type__a,
  (((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields1 } },
  binary_trees__extract__v)[i5])).us_split_fields1).rec__tree_model__path_type__a,
  (((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields1; rec__binary_trees__forest__c = t__split_fields2 } },
  o9)[i5])).us_split_fields1).rec__tree_model__path_type__a) = true)))))))))))))))))) and
  ((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields1 } }) = true) and
  in_range4(binary_trees__extract__v))))

axiom H53 : ((not (is_root = true)) -> ((result23 = t__split_fields) and
  (((result24 = t__split_fields1) and (result25 = t__split_fields2)) and
  (result26 = t__split_fields3))))

axiom H54 : ((not (is_root = true)) ->
  ((t__split_fields8 = t__split_fields) and
  (((t__split_fields9 = binary_trees__extract__f__fields) and
  (t__split_fields10 = binary_trees__extract__f__fields1)) and
  (t__split_fields11 = t__split_fields3))))

axiom H55 : ((not (is_root = true)) -> ((o10 = binary_trees__extract__v) and
  in_range3(binary_trees__extract__v)))

axiom H56 : ((not (is_root = true)) -> (result27 = x))

axiom H57 : ((not (is_root = true)) -> (x2 = o10))

axiom H58 : ((not (is_root = true)) -> (x1 = x2))

axiom H59 : ((not (is_root = true)) -> ((o11 = to_rep1(t__split_fields8)) and
  in_range3(to_rep1(t__split_fields8))))

axiom H60 : ((not (is_root = true)) -> ((ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields9;
  rec__binary_trees__forest__c = t__split_fields10 } }, o11,
  t__split_fields11) = true) and ((ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields9;
  rec__binary_trees__forest__c = t__split_fields10 } }, x1,
  t__split_fields11) = true) and
  (forall i5:int. (((1 <= i5) and (i5 <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
  rec__binary_trees__forest__c = t__split_fields10 } },
  o11)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields9;
  rec__binary_trees__forest__c = t__split_fields10 } },
  o11)[i5])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields2; rec__binary_trees__forest__c = f_old__split_fields3 }
  }, o11)[x1])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
  rec__binary_trees__forest__c = t__split_fields10 } },
  o11)[i5])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
  o11)[i5])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields2; rec__binary_trees__forest__c = f_old__split_fields3 }
  }, o11)[x1])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields2; rec__binary_trees__forest__c = f_old__split_fields3 }
  }, o11)[x1])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
  o11)[i5])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
  (forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
  rec__binary_trees__forest__c = t__split_fields10 } },
  x1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (to_rep((t__split_fields11[j15])) <  to_rep((t__split_fields11[i5]))))))) and
  ((not (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_old__split_fields2; rec__binary_trees__forest__c = f_old__split_fields3 }
  }, o11)[x1])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
  o11)[i5])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
  rec__binary_trees__forest__c = t__split_fields10 } },
  x1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (to_rep((t__split_fields11[i5])) <  to_rep((t__split_fields11[j15]))))))))))))))

axiom H61 : ((result28 = f_1__split_fields2) and
  (result29 = f_1__split_fields3))

axiom H62 : ((f_1__split_fields4 = t__split_fields9) and
  (f_1__split_fields5 = t__split_fields10))

axiom H63 : (((size({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields3 } }) = size({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields9;
  rec__binary_trees__forest__c = t__split_fields10 } })) and ((valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields3 } }, x1) = true) and
  ((binary_trees__extract__v1 = peek({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields9;
  rec__binary_trees__forest__c = t__split_fields10 } }, x1, 1)) and ((peek({
  us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields3 } }, x1, 1) = 0) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) ->
   ((not (j15 = binary_trees__extract__v1)) -> (parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields2;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields3 } },
   j15) = parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   j15))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) ->
   (((not (j15 = binary_trees__extract__v1)) and (not (parent({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } }, j15) = 0))) -> (position({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } }, j15) = position({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
   rec__binary_trees__forest__c = t__split_fields10 } }, j15))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) ->
   (forall e:int. (((0 <= e) and (e <= 1)) -> (((not (j15 = x1)) or
   (not (e = 1))) -> (peek({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields2;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields3 } }, j15,
   e) = peek({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   j15, e))))))) and
  ((forall t:int. (((1 <= t) and (t <= 100)) -> ((((valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
   rec__binary_trees__forest__c = t__split_fields10 } }, t) = true) and
   (not (x1 = t))) and (not (binary_trees__extract__v1 = t))) ->
   (valid_root({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } }, t) = true)))) and
  ((forall t:int. (((1 <= t) and (t <= 100)) -> ((((valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
   rec__binary_trees__forest__c = t__split_fields10 } }, t) = true) and
   (not (x1 = t))) and (not (binary_trees__extract__v1 = t))) ->
   (oeq(model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } }, t), model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields9;
   rec__binary_trees__forest__c = t__split_fields10 } }, t)) = true)))) and
  (((not (binary_trees__extract__v1 = 0)) -> (valid_root({ us_split_fields5 =
  { rec__binary_trees__forest__s = binary_trees__extract__f__fields2;
  rec__binary_trees__forest__c = binary_trees__extract__f__fields3 } },
  binary_trees__extract__v1) = true)) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
   rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((not (binary_trees__extract__v1 = 0)) and ((bool_le(length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
   rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[binary_trees__extract__v1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
   rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[binary_trees__extract__v1])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[binary_trees__extract__v1])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } },
   binary_trees__extract__v1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (binary_trees__extract__v1 = 0)) and
   (((bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields9;
   rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[binary_trees__extract__v1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields9;
   rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[binary_trees__extract__v1])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[binary_trees__extract__v1])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields9;
   rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[binary_trees__extract__v1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = false))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) ->
   (((not (binary_trees__extract__v1 = 0)) and ((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } },
   binary_trees__extract__v1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (((bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields2;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields3 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields3 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields2;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields3 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = false)))))) and
  (forall i5:int. (((1 <= i5) and (i5 <= 100)) ->
  (((not (binary_trees__extract__v1 = 0)) and ((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields3 } },
  binary_trees__extract__v1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
  (is_concat((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
  x1)[binary_trees__extract__v1])).us_split_fields1).rec__tree_model__path_type__a,
  (((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields3 } },
  binary_trees__extract__v1)[i5])).us_split_fields1).rec__tree_model__path_type__a,
  (((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields9; rec__binary_trees__forest__c = t__split_fields10 } },
  x1)[i5])).us_split_fields1).rec__tree_model__path_type__a) = true)))))))))))))))))) and
  ((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields2; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields3 } }) = true) and
  in_range4(binary_trees__extract__v1)))

axiom H64 : ((result30 = t__split_fields8) and
  (((result31 = t__split_fields9) and (result32 = t__split_fields10)) and
  (result33 = t__split_fields11)))

axiom H65 : ((t__split_fields12 = t__split_fields8) and
  (((t__split_fields13 = binary_trees__extract__f__fields2) and
  (t__split_fields14 = binary_trees__extract__f__fields3)) and
  (t__split_fields15 = t__split_fields11)))

axiom H66 : ((o12 = binary_trees__extract__v1) and
  in_range3(binary_trees__extract__v1))

axiom H67 : (result34 = y)

axiom H68 : (y1 = o12)

axiom H69 : ((ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } }, x1,
  t__split_fields15) = true) and ((ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } }, y1,
  t__split_fields15) = true) and
  (forall i5:int. (((1 <= i5) and (i5 <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } },
  x1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } },
  x1)[i5])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_1__split_fields4; rec__binary_trees__forest__c = f_1__split_fields5 } },
  x1)[y1])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } },
  x1)[i5])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
  x1)[i5])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_1__split_fields4; rec__binary_trees__forest__c = f_1__split_fields5 } },
  x1)[y1])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_1__split_fields4; rec__binary_trees__forest__c = f_1__split_fields5 } },
  x1)[y1])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
  x1)[i5])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
  (forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } },
  y1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (to_rep((t__split_fields15[j15])) <  to_rep((t__split_fields15[i5]))))))) and
  ((not (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_1__split_fields4; rec__binary_trees__forest__c = f_1__split_fields5 } },
  x1)[y1])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
  x1)[i5])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } },
  y1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (to_rep((t__split_fields15[i5])) <  to_rep((t__split_fields15[j15])))))))))))))

axiom H70 : (get((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_1__split_fields4;
  rec__binary_trees__forest__c = f_1__split_fields5 } },
  x1)[y1])).us_split_fields1).rec__tree_model__path_type__a, 1) = 1)

axiom H71 :
  (to_rep((t__split_fields15[x1])) <  to_rep((t__split_fields15[y1])))

axiom H72 : ((not (is_root = true)) ->
  ((o19 = to_rep1(t__split_fields12)) and
  in_range3(to_rep1(t__split_fields12))))

axiom H73 : ((not (is_root = true)) -> (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } }, o19,
  t__split_fields15) = true))

axiom H74 : ((result35 = f_2__split_fields2) and
  (result36 = f_2__split_fields3))

axiom H75 : ((f_2__split_fields4 = t__split_fields13) and
  (f_2__split_fields5 = t__split_fields14))

axiom H76 : (((size({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields5 } }) = size({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } })) and ((valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields5 } }, y1) = true) and ((yl1 = peek({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } }, y1, 0)) and ((peek({
  us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields5 } }, y1, 0) = 0) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> ((not (j15 = yl1)) ->
   (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields5 } }, j15) = parent({ us_split_fields5 =
   { rec__binary_trees__forest__s = t__split_fields13;
   rec__binary_trees__forest__c = t__split_fields14 } }, j15))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((not (j15 = yl1)) and
   (not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields5 } }, j15) = 0))) -> (position({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields5 } }, j15) = position({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
   rec__binary_trees__forest__c = t__split_fields14 } }, j15))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) ->
   (forall e:int. (((0 <= e) and (e <= 1)) -> (((not (j15 = y1)) or
   (not (e = 0))) -> (peek({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields4;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields5 } }, j15,
   e) = peek({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   j15, e))))))) and
  ((forall t:int. (((1 <= t) and (t <= 100)) -> ((((valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
   rec__binary_trees__forest__c = t__split_fields14 } }, t) = true) and
   (not (y1 = t))) and (not (yl1 = t))) -> (valid_root({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields4;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields5 } },
   t) = true)))) and
  ((forall t:int. (((1 <= t) and (t <= 100)) -> ((((valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
   rec__binary_trees__forest__c = t__split_fields14 } }, t) = true) and
   (not (y1 = t))) and (not (yl1 = t))) -> (oeq(model__({ us_split_fields5 =
   { rec__binary_trees__forest__s = binary_trees__extract__f__fields4;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields5 } }, t),
   model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   t)) = true)))) and (((not (yl1 = 0)) -> (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = binary_trees__extract__f__fields4;
  rec__binary_trees__forest__c = binary_trees__extract__f__fields5 } },
  yl1) = true)) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
   rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((not (yl1 = 0)) and ((bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields13;
   rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[yl1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
   rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[yl1])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[yl1])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields5 } },
   yl1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (yl1 = 0)) and (((bool_le(length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
   rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[yl1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
   rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[yl1])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[yl1])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields13;
   rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[yl1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = false))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields5 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields5 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((not (yl1 = 0)) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields5 } },
   yl1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields5 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (((bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields4;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields5 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields5 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
   binary_trees__extract__f__fields5 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__extract__f__fields4;
   rec__binary_trees__forest__c = binary_trees__extract__f__fields5 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = false)))))) and
  (forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((not (yl1 = 0)) and
  ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields5 } },
  yl1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
  (is_concat((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields13; rec__binary_trees__forest__c = t__split_fields14 } },
  y1)[yl1])).us_split_fields1).rec__tree_model__path_type__a, (((model__({
  us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields5 } },
  yl1)[i5])).us_split_fields1).rec__tree_model__path_type__a, (((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields13;
  rec__binary_trees__forest__c = t__split_fields14 } },
  y1)[i5])).us_split_fields1).rec__tree_model__path_type__a) = true)))))))))))))))))) and
  ((tree_structure({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__extract__f__fields4; rec__binary_trees__forest__c =
  binary_trees__extract__f__fields5 } }) = true) and in_range4(yl1)))

axiom H77 : ((result37 = t__split_fields12) and
  (((result38 = t__split_fields13) and (result39 = t__split_fields14)) and
  (result40 = t__split_fields15)))

axiom H78 : ((t__split_fields16 = t__split_fields12) and
  (((t__split_fields17 = binary_trees__extract__f__fields4) and
  (t__split_fields18 = binary_trees__extract__f__fields5)) and
  (t__split_fields19 = t__split_fields15)))

axiom H79 : ((not (yl1 = 0)) -> ((o20 = yl1) and in_range3(yl1)))

axiom H80 : ((not (yl1 = 0)) -> ((ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } }, y1,
  t__split_fields19) = true) and ((ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } }, o20,
  t__split_fields19) = true) and
  (forall i5:int. (((1 <= i5) and (i5 <= 100)) -> ((((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } },
  y1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) and
  ((bool_lt(length((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } },
  y1)[i5])).us_split_fields1).rec__tree_model__path_type__a),
  length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_2__split_fields4; rec__binary_trees__forest__c = f_2__split_fields5 } },
  y1)[o20])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
  (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } },
  y1)[i5])).us_split_fields1).rec__tree_model__path_type__a)))) ->
  (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
  y1)[i5])).us_split_fields1).rec__tree_model__path_type__a,
  n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_2__split_fields4; rec__binary_trees__forest__c = f_2__split_fields5 } },
  y1)[o20])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
  (((get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_2__split_fields4; rec__binary_trees__forest__c = f_2__split_fields5 } },
  y1)[o20])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
  y1)[i5])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0) ->
  (forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } },
  o20)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (to_rep((t__split_fields19[j15])) <  to_rep((t__split_fields19[i5]))))))) and
  ((not (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  f_2__split_fields4; rec__binary_trees__forest__c = f_2__split_fields5 } },
  y1)[o20])).us_split_fields1).rec__tree_model__path_type__a,
  (length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
  y1)[i5])).us_split_fields1).rec__tree_model__path_type__a) + 1)) = 0)) ->
  (forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } },
  o20)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (to_rep((t__split_fields19[i5])) <  to_rep((t__split_fields19[j15]))))))))))))))

axiom H81 : ((not (yl1 = 0)) -> (get((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_2__split_fields4;
  rec__binary_trees__forest__c = f_2__split_fields5 } },
  y1)[yl1])).us_split_fields1).rec__tree_model__path_type__a, 1) = 0))

axiom H82 : ((yl1 = 0) -> (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } }, y1,
  t__split_fields19) = true))

axiom H83 : (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } }, x1,
  t__split_fields19) = true)

axiom H84 : ((not (is_root = true)) ->
  ((o28 = to_rep1(t__split_fields16)) and
  in_range3(to_rep1(t__split_fields16))))

axiom H85 : ((not (is_root = true)) -> (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } }, o28,
  t__split_fields19) = true))

axiom H86 : ((result41 = f_3__split_fields2) and
  (result42 = f_3__split_fields3))

axiom H87 : ((f_3__split_fields4 = t__split_fields17) and
  (f_3__split_fields5 = t__split_fields18))

axiom H88 : (((size({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__plug__f__fields; rec__binary_trees__forest__c =
  binary_trees__plug__f__fields1 } }) = size({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } })) and ((yl1 = peek({
  us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__plug__f__fields; rec__binary_trees__forest__c =
  binary_trees__plug__f__fields1 } }, x1, 1)) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields17;
   rec__binary_trees__forest__c = t__split_fields18 } }, j15) = true) and
   (not (j15 = yl1))) -> (valid_root({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields1 } },
   j15) = true)))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> ((valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } }, j15) = true) -> (valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields17;
   rec__binary_trees__forest__c = t__split_fields18 } }, j15) = true)))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> ((not (j15 = yl1)) ->
   (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } }, j15) = parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields17;
   rec__binary_trees__forest__c = t__split_fields18 } }, j15))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((not (j15 = yl1)) and
   (not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } }, j15) = 0))) -> (position({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } }, j15) = position({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields17;
   rec__binary_trees__forest__c = t__split_fields18 } }, j15))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) ->
   (forall e:int. (((0 <= e) and (e <= 1)) -> (((not (j15 = x1)) or
   (not (e = 1))) -> (peek({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields1 } }, j15,
   e) = peek({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
   j15, e))))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields17;
   rec__binary_trees__forest__c = t__split_fields18 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((not (yl1 = 0)) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
   yl1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((not (yl1 = 0)) and ((bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields1 } },
   x1)[yl1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[yl1])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[yl1])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
   yl1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (yl1 = 0)) and (((bool_le(length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[yl1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[yl1])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[yl1])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields1 } },
   x1)[yl1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = false))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields17;
   rec__binary_trees__forest__c = t__split_fields18 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (((bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields1 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields1 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__a)) = false)))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((not (yl1 = 0)) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
   yl1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   (is_concat((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields1 } },
   x1)[peek({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } }, x1,
   1)])).us_split_fields1).rec__tree_model__path_type__a, (((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields17;
   rec__binary_trees__forest__c = t__split_fields18 } },
   yl1)[j15])).us_split_fields1).rec__tree_model__path_type__a, (((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields1 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__a) = true)))) and
  (forall t:int. (((1 <= t) and (t <= 100)) -> ((((valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields17;
  rec__binary_trees__forest__c = t__split_fields18 } }, t) = true) and
  (not (x1 = t))) and (not (yl1 = t))) -> (oeq(model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = binary_trees__plug__f__fields;
  rec__binary_trees__forest__c = binary_trees__plug__f__fields1 } }, t),
  model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields17; rec__binary_trees__forest__c = t__split_fields18 } },
  t)) = true)))))))))))))))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = binary_trees__plug__f__fields;
  rec__binary_trees__forest__c = binary_trees__plug__f__fields1 } }) = true))

axiom H89 : ((result43 = t__split_fields16) and
  (((result44 = t__split_fields17) and (result45 = t__split_fields18)) and
  (result46 = t__split_fields19)))

axiom H90 : ((t__split_fields20 = t__split_fields16) and
  (((t__split_fields21 = binary_trees__plug__f__fields) and
  (t__split_fields22 = binary_trees__plug__f__fields1)) and
  (t__split_fields23 = t__split_fields19)))

axiom H91 : ((not (yl1 = 0)) -> (get((((model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields21;
  rec__binary_trees__forest__c = t__split_fields22 } },
  x1)[yl1])).us_split_fields1).rec__tree_model__path_type__a, 1) = 1))

axiom H92 : ((not (yl1 = 0)) ->
  (forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
  us_split_fields5 = { rec__binary_trees__forest__s = f_3__split_fields4;
  rec__binary_trees__forest__c = f_3__split_fields5 } },
  y1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
  (to_rep((t__split_fields23[x1])) <  to_rep((t__split_fields23[j15])))))))

axiom H93 : ((not (yl1 = 0)) -> (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_3__split_fields4;
  rec__binary_trees__forest__c = f_3__split_fields5 } }, x1,
  t__split_fields23) = true))

axiom H94 : ((not (yl1 = 0)) -> (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = f_3__split_fields4;
  rec__binary_trees__forest__c = f_3__split_fields5 } }, yl1,
  t__split_fields23) = true))

axiom H95 : ((not (yl1 = 0)) -> ((o37 = yl1) and in_range3(yl1)))

axiom H96 : ((not (yl1 = 0)) -> (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields21;
  rec__binary_trees__forest__c = t__split_fields22 } }, x1,
  t__split_fields23) = true))

axiom H97 : ((yl1 = 0) -> (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields21;
  rec__binary_trees__forest__c = t__split_fields22 } }, x1,
  t__split_fields23) = true))

axiom H98 : (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields21;
  rec__binary_trees__forest__c = t__split_fields22 } }, y1,
  t__split_fields23) = true)

axiom H99 : ((not (is_root = true)) ->
  ((o38 = to_rep1(t__split_fields20)) and
  in_range3(to_rep1(t__split_fields20))))

axiom H100 : ((not (is_root = true)) -> (ordered_leafs({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields21;
  rec__binary_trees__forest__c = t__split_fields22 } }, o38,
  t__split_fields23) = true))

axiom H101 : ((result47 = f_4__split_fields2) and
  (result48 = f_4__split_fields3))

axiom H102 : ((f_4__split_fields4 = t__split_fields21) and
  (f_4__split_fields5 = t__split_fields22))

axiom H103 : (((size({ us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
  binary_trees__plug__f__fields3 } }) = size({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields21;
  rec__binary_trees__forest__c = t__split_fields22 } })) and ((x1 = peek({
  us_split_fields5 = { rec__binary_trees__forest__s =
  binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
  binary_trees__plug__f__fields3 } }, y1, 0)) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields21;
   rec__binary_trees__forest__c = t__split_fields22 } }, j15) = true) and
   (not (j15 = x1))) -> (valid_root({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields2;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields3 } },
   j15) = true)))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> ((valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } }, j15) = true) -> (valid_root({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields21;
   rec__binary_trees__forest__c = t__split_fields22 } }, j15) = true)))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> ((not (j15 = x1)) ->
   (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } }, j15) = parent({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields21;
   rec__binary_trees__forest__c = t__split_fields22 } }, j15))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((not (j15 = x1)) and
   (not (parent({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } }, j15) = 0))) -> (position({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } }, j15) = position({ us_split_fields5 = {
   rec__binary_trees__forest__s = t__split_fields21;
   rec__binary_trees__forest__c = t__split_fields22 } }, j15))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) ->
   (forall e:int. (((0 <= e) and (e <= 1)) -> (((not (j15 = y1)) or
   (not (e = 0))) -> (peek({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields2;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields3 } }, j15,
   e) = peek({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields21; rec__binary_trees__forest__c = t__split_fields22 } },
   j15, e))))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields21;
   rec__binary_trees__forest__c = t__split_fields22 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((not (x1 = 0)) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields21; rec__binary_trees__forest__c = t__split_fields22 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true)))) and
  ((forall i5:int. (((1 <= i5) and (i5 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   ((((not (x1 = 0)) and ((bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields2;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields3 } },
   y1)[x1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) and
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[x1])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[x1])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a, n)))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields21; rec__binary_trees__forest__c = t__split_fields22 } },
   x1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)) and
   ((not ((not (x1 = 0)) and (((bool_le(length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[x1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[x1])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[x1])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_le(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields2;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields3 } },
   y1)[x1])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__a)) = false))))) ->
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields21; rec__binary_trees__forest__c = t__split_fields22 } },
   y1)[i5])).us_split_fields1).rec__tree_model__path_type__k = true)))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields21;
   rec__binary_trees__forest__c = t__split_fields22 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true) ->
   (((bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields2;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields3 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields21; rec__binary_trees__forest__c = t__split_fields22 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__a)) = true) ->
   (forall n:int. (((1 <= n) and (n <= (0 + length((((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__a)))) ->
   (get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__a,
   n) = get((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields21; rec__binary_trees__forest__c = t__split_fields22 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__a, n))))) and
   (not (bool_eq1(length((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields2;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields3 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__a),
   length((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields21; rec__binary_trees__forest__c = t__split_fields22 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__a)) = false)))))) and
  ((forall j15:int. (((1 <= j15) and (j15 <= 100)) -> (((not (x1 = 0)) and
   ((((model__({ us_split_fields5 = { rec__binary_trees__forest__s =
   t__split_fields21; rec__binary_trees__forest__c = t__split_fields22 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__k = true)) ->
   (is_concat((((model__({ us_split_fields5 = {
   rec__binary_trees__forest__s = binary_trees__plug__f__fields2;
   rec__binary_trees__forest__c = binary_trees__plug__f__fields3 } },
   y1)[peek({ us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } }, y1,
   0)])).us_split_fields1).rec__tree_model__path_type__a, (((model__({
   us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields21;
   rec__binary_trees__forest__c = t__split_fields22 } },
   x1)[j15])).us_split_fields1).rec__tree_model__path_type__a, (((model__({
   us_split_fields5 = { rec__binary_trees__forest__s =
   binary_trees__plug__f__fields2; rec__binary_trees__forest__c =
   binary_trees__plug__f__fields3 } },
   y1)[j15])).us_split_fields1).rec__tree_model__path_type__a) = true)))) and
  (forall t:int. (((1 <= t) and (t <= 100)) -> ((((valid_root({
  us_split_fields5 = { rec__binary_trees__forest__s = t__split_fields21;
  rec__binary_trees__forest__c = t__split_fields22 } }, t) = true) and
  (not (y1 = t))) and (not (x1 = t))) -> (oeq(model__({ us_split_fields5 = {
  rec__binary_trees__forest__s = binary_trees__plug__f__fields2;
  rec__binary_trees__forest__c = binary_trees__plug__f__fields3 } }, t),
  model__({ us_split_fields5 = { rec__binary_trees__forest__s =
  t__split_fields21; rec__binary_trees__forest__c = t__split_fields22 } },
  t)) = true)))))))))))))))) and (tree_structure({ us_split_fields5 = {
  rec__binary_trees__forest__s = binary_trees__plug__f__fields2;
  rec__binary_trees__forest__c = binary_trees__plug__f__fields3 } }) = true))

axiom H104 : ((result49 = t__split_fields20) and
  (((result50 = t__split_fields21) and (result51 = t__split_fields22)) and
  (result52 = t__split_fields23)))

axiom H105 : ((t__split_fields24 = t__split_fields20) and
  (((t__split_fields25 = binary_trees__plug__f__fields2) and
  (t__split_fields26 = binary_trees__plug__f__fields3)) and
  (t__split_fields27 = t__split_fields23)))

 (* File "system.ads", line 1, characters 0-0 *)
goal WP_parameter_def : (valid_root({ us_split_fields5 = {
  rec__binary_trees__forest__s = t__split_fields25;
  rec__binary_trees__forest__c = t__split_fields26 } }, y1) = true)
