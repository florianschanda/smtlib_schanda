(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort natural 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (natural natural) Bool)
(declare-const dummy1 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(define-fun dynamic_invariant ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range2 temp___expr_33)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int Bool))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (Bool Int) (Array Int Bool))
(assert (forall ((v Bool)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int) (b (Array Int Bool)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134)))))) true false))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_134 Int)) (=> (and (<= a__first temp___idx_134) (<= temp___idx_134 a__last)) (= (select a temp___idx_134) (select b (+ (- b__first a__first) temp___idx_134))))))))))
(declare-fun compare ((Array Int Bool) Int Int (Array Int Bool) Int Int) Int)
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_int1 (select a (+ i 1))) (to_int1 (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_int1 (select b (+ i 1))) (to_int1 (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun xorb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun andb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun orb ((Array Int Bool) Int Int (Array Int Bool) Int Int) (Array Int Bool))
(declare-fun notb ((Array Int Bool) Int Int) (Array Int Bool))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (orb a a_first a_last b b_first b_last) i) (or (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (orb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (andb a a_first a_last b b_first b_last) i) (and (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (andb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool)) (b (Array Int Bool))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (xorb a a_first a_last b b_first b_last) i) (xor (select a i) (select b (+ (- i a_first) b_first))))) :pattern ((select (xorb a a_first a_last b b_first b_last) i)))))))
(assert (forall ((a (Array Int Bool))) (forall ((a_first Int) (a_last Int)) (forall ((i Int)) (! (=> (and (<= a_first i) (<= i a_last)) (= (select (notb a a_first a_last) i) (not (select a i)))) :pattern ((select (notb a a_first a_last) i)))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int Bool)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int Bool) (elts a))
(define-fun of_array ((a (Array Int Bool)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int Bool)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int Bool)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int Bool)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int Bool))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((a1__ref (mk_a1__ref (a1__content us_t)))))
(define-fun a1__ref___projection ((a a1__ref)) us_t (a1__content a))
(declare-sort tTxSP1 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq3 (tTxSP1 tTxSP1) Bool)
(declare-const dummy3 tTxSP1)
(declare-datatypes () ((tTxSP1__ref (mk_tTxSP1__ref (tTxSP1__content tTxSP1)))))
(define-fun tTxSP1__ref___projection ((a tTxSP1__ref)) tTxSP1 (tTxSP1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-sort tTySP1 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq4 (tTySP1 tTySP1) Bool)
(declare-const dummy4 tTySP1)
(declare-datatypes () ((tTySP1__ref (mk_tTySP1__ref (tTySP1__content tTySP1)))))
(define-fun tTySP1__ref___projection ((a tTySP1__ref)) tTySP1 (tTySP1__content a))
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-sort tTxSP11 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq5 (tTxSP11 tTxSP11) Bool)
(declare-const dummy5 tTxSP11)
(declare-datatypes () ((tTxSP1__ref1 (mk_tTxSP1__ref1 (tTxSP1__content1 tTxSP11)))))
(define-fun tTxSP1__ref___2__projection ((a tTxSP1__ref1)) tTxSP11 (tTxSP1__content1 a))
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-sort tTySP11 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 11)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq6 (tTySP11 tTySP11) Bool)
(declare-const dummy6 tTySP11)
(declare-datatypes () ((tTySP1__ref1 (mk_tTySP1__ref1 (tTySP1__content1 tTySP11)))))
(define-fun tTySP1__ref___2__projection ((a tTySP1__ref1)) tTySP11 (tTySP1__content1 a))
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-sort tTxSP12 0)
(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)
(declare-fun user_eq7 (tTxSP12 tTxSP12) Bool)
(declare-const dummy7 tTxSP12)
(declare-datatypes () ((tTxSP1__ref2 (mk_tTxSP1__ref2 (tTxSP1__content2 tTxSP12)))))
(define-fun tTxSP1__ref___3__projection ((a tTxSP1__ref2)) tTxSP12 (tTxSP1__content2 a))
(declare-const attr__ATTRIBUTE_ADDRESS5 Int)
(declare-const attr__ATTRIBUTE_ADDRESS6 Int)
(declare-sort tTxSP13 0)
(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 11)))
(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)
(declare-fun user_eq8 (tTxSP13 tTxSP13) Bool)
(declare-const dummy8 tTxSP13)
(declare-datatypes () ((tTxSP1__ref3 (mk_tTxSP1__ref3 (tTxSP1__content3 tTxSP13)))))
(define-fun tTxSP1__ref___4__projection ((a tTxSP1__ref3)) tTxSP13 (tTxSP1__content3 a))
(declare-const attr__ATTRIBUTE_ADDRESS7 Int)
(declare-const attr__ATTRIBUTE_ADDRESS8 Int)
(declare-sort tTxSP14 0)
(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 10)))
(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)
(declare-fun user_eq9 (tTxSP14 tTxSP14) Bool)
(declare-const dummy9 tTxSP14)
(declare-datatypes () ((tTxSP1__ref4 (mk_tTxSP1__ref4 (tTxSP1__content4 tTxSP14)))))
(define-fun tTxSP1__ref___5__projection ((a tTxSP1__ref4)) tTxSP14 (tTxSP1__content4 a))
(declare-const attr__ATTRIBUTE_ADDRESS9 Int)
(declare-sort tTxSP15 0)
(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 11)))
(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)
(declare-fun user_eq10 (tTxSP15 tTxSP15) Bool)
(declare-const dummy10 tTxSP15)
(declare-datatypes () ((tTxSP1__ref5 (mk_tTxSP1__ref5 (tTxSP1__content5 tTxSP15)))))
(define-fun tTxSP1__ref___6__projection ((a tTxSP1__ref5)) tTxSP15 (tTxSP1__content5 a))
(declare-const attr__ATTRIBUTE_ADDRESS10 Int)
(declare-fun do_checks__do_length_check__B_19__y__aggregate_def (Bool) (Array Int Bool))
(assert (forall ((temp___807 Bool)) (forall ((temp___808 Int)) (= (select (do_checks__do_length_check__B_19__y__aggregate_def temp___807) temp___808) temp___807))))
(declare-fun do_checks__do_length_check__B_19__x__aggregate_def (Bool) (Array Int Bool))
(assert (forall ((temp___810 Bool)) (forall ((temp___811 Int)) (= (select (do_checks__do_length_check__B_19__x__aggregate_def temp___810) temp___811) temp___810))))
(declare-fun do_checks__do_length_check__B_20__y__aggregate_def (Bool) (Array Int Bool))
(assert (forall ((temp___815 Bool)) (forall ((temp___816 Int)) (= (select (do_checks__do_length_check__B_20__y__aggregate_def temp___815) temp___816) temp___815))))
(declare-fun do_checks__do_length_check__B_20__x__aggregate_def (Bool) (Array Int Bool))
(assert (forall ((temp___818 Bool)) (forall ((temp___819 Int)) (= (select (do_checks__do_length_check__B_20__x__aggregate_def temp___818) temp___819) temp___818))))
(declare-fun do_checks__do_length_check__B_21__x__aggregate_def (Bool) (Array Int Bool))
(assert (forall ((temp___821 Bool)) (forall ((temp___822 Int)) (= (select (do_checks__do_length_check__B_21__x__aggregate_def temp___821) temp___822) temp___821))))
(declare-fun do_checks__do_length_check__B_22__x__aggregate_def (Bool) (Array Int Bool))
(assert (forall ((temp___824 Bool)) (forall ((temp___825 Int)) (= (select (do_checks__do_length_check__B_22__x__aggregate_def temp___824) temp___825) temp___824))))
(declare-fun do_checks__do_length_check__B_23__x__aggregate_def (Bool) (Array Int Bool))
(assert (forall ((temp___828 Bool)) (forall ((temp___829 Int)) (= (select (do_checks__do_length_check__B_23__x__aggregate_def temp___828) temp___829) temp___828))))
(declare-fun do_checks__do_length_check__B_24__x__aggregate_def (Bool) (Array Int Bool))
(assert (forall ((temp___832 Bool)) (forall ((temp___833 Int)) (= (select (do_checks__do_length_check__B_24__x__aggregate_def temp___832) temp___833) temp___832))))
(define-fun dynamic_invariant1 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(define-fun dynamic_invariant2 ((temp___expr_320 us_t) (temp___is_init_317 Bool) (temp___skip_constant_318 Bool) (temp___do_toplevel_319 Bool)) Bool (=> (not (= temp___skip_constant_318 true)) (dynamic_property 0 2147483647 (first1 temp___expr_320) (last1 temp___expr_320))))
(declare-const branch Int)
(declare-const x (Array Int Bool))
(declare-const result (Array Int Bool))
(declare-const x1 (Array Int Bool))
(assert (in_range2 branch))
(assert (not (= branch 100)))
(assert (not (= branch 101)))
(assert (not (= branch 102)))
(assert (= branch 103))
(assert (= result x))
(assert (= x1 (do_checks__do_length_check__B_22__x__aggregate_def (of_int 0))))
(assert (not (= (to_rep (first (mk 1 11))) 1)))
(check-sat)
(exit)
