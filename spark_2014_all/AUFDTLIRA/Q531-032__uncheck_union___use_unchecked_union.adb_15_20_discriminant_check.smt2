(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (integer Int) (Array Int integer))
(assert (forall ((v integer)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int) (b (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132))))))) true false))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_132 Int)) (=> (and (<= a__first temp___idx_132) (<= temp___idx_132 a__last)) (= (to_rep (select a temp___idx_132)) (to_rep (select b (+ (- b__first a__first) temp___idx_132)))))))))))
(declare-fun compare ((Array Int integer) Int Int (Array Int integer) Int Int) Int)
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int integer)) (b (Array Int integer))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-const dummy1 (Array Int integer))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment a))))
(declare-fun user_eq1 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__use_unchecked_union__small_record__field1 integer) (rec__use_unchecked_union__small_record__field2 (Array Int integer))))))
(define-fun us_split_fields_field1__projection ((a us_split_fields)) integer (rec__use_unchecked_union__small_record__field1 a))
(define-fun us_split_fields_field2__projection ((a us_split_fields)) (Array Int integer) (rec__use_unchecked_union__small_record__field2 a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__use_unchecked_union__small_record__field1 (us_split_fields1 a))) (to_rep (rec__use_unchecked_union__small_record__field1 (us_split_fields1 b)))) (= (bool_eq (rec__use_unchecked_union__small_record__field2 (us_split_fields1 a)) 0 2 (rec__use_unchecked_union__small_record__field2 (us_split_fields1 b)) 0 2) true)) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const use_unchecked_union__small_record__field1__first__bit Int)
(declare-const use_unchecked_union__small_record__field1__last__bit Int)
(declare-const use_unchecked_union__small_record__field1__position Int)
(assert (<= 0 use_unchecked_union__small_record__field1__first__bit))
(assert (< use_unchecked_union__small_record__field1__first__bit use_unchecked_union__small_record__field1__last__bit))
(assert (<= 0 use_unchecked_union__small_record__field1__position))
(declare-const use_unchecked_union__small_record__field2__first__bit Int)
(declare-const use_unchecked_union__small_record__field2__last__bit Int)
(declare-const use_unchecked_union__small_record__field2__position Int)
(assert (<= 0 use_unchecked_union__small_record__field2__first__bit))
(assert (< use_unchecked_union__small_record__field2__first__bit use_unchecked_union__small_record__field2__last__bit))
(assert (<= 0 use_unchecked_union__small_record__field2__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((small_record__ref (mk_small_record__ref (small_record__content us_rep)))))
(define-fun small_record__ref___projection ((a small_record__ref)) us_rep (small_record__content a))
(declare-const dummy3 (Array Int integer))
(declare-const value__size2 Int)
(declare-fun object__size2 ((Array Int integer)) Int)
(declare-const value__component__size1 Int)
(declare-fun object__component__size1 ((Array Int integer)) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 ((Array Int integer)) Int)
(assert (<= 0 value__size2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__size2 a))))
(assert (<= 0 value__component__size1))
(assert (forall ((a (Array Int integer))) (<= 0 (object__component__size1 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a (Array Int integer))) (<= 0 (object__alignment2 a))))
(declare-fun user_eq3 ((Array Int integer) (Array Int integer)) Bool)
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__use_unchecked_union__big_record__field1 integer) (rec__use_unchecked_union__big_record__field2 (Array Int integer))))))
(define-fun us_split_fields_field1__2__projection ((a us_split_fields2)) integer (rec__use_unchecked_union__big_record__field1 a))
(define-fun us_split_fields_field2__2__projection ((a us_split_fields2)) (Array Int integer) (rec__use_unchecked_union__big_record__field2 a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___2__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun bool_eq2 ((a us_rep1) (b us_rep1)) Bool (ite (and (= (to_rep (rec__use_unchecked_union__big_record__field1 (us_split_fields3 a))) (to_rep (rec__use_unchecked_union__big_record__field1 (us_split_fields3 b)))) (= (bool_eq (rec__use_unchecked_union__big_record__field2 (us_split_fields3 a)) 0 3 (rec__use_unchecked_union__big_record__field2 (us_split_fields3 b)) 0 3) true)) true false))
(declare-const value__size3 Int)
(declare-fun object__size3 (us_rep1) Int)
(declare-const value__alignment3 Int)
(declare-fun object__alignment3 (us_rep1) Int)
(assert (<= 0 value__size3))
(assert (forall ((a us_rep1)) (<= 0 (object__size3 a))))
(assert (<= 0 value__alignment3))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment3 a))))
(declare-const use_unchecked_union__big_record__field1__first__bit Int)
(declare-const use_unchecked_union__big_record__field1__last__bit Int)
(declare-const use_unchecked_union__big_record__field1__position Int)
(assert (<= 0 use_unchecked_union__big_record__field1__first__bit))
(assert (< use_unchecked_union__big_record__field1__first__bit use_unchecked_union__big_record__field1__last__bit))
(assert (<= 0 use_unchecked_union__big_record__field1__position))
(declare-const use_unchecked_union__big_record__field2__first__bit Int)
(declare-const use_unchecked_union__big_record__field2__last__bit Int)
(declare-const use_unchecked_union__big_record__field2__position Int)
(assert (<= 0 use_unchecked_union__big_record__field2__first__bit))
(assert (< use_unchecked_union__big_record__field2__first__bit use_unchecked_union__big_record__field2__last__bit))
(assert (<= 0 use_unchecked_union__big_record__field2__position))
(declare-fun user_eq4 (us_rep1 us_rep1) Bool)
(declare-const dummy4 us_rep1)
(declare-datatypes () ((big_record__ref (mk_big_record__ref (big_record__content us_rep1)))))
(define-fun big_record__ref___projection ((a big_record__ref)) us_rep1 (big_record__content a))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__use_unchecked_union__myunion__discr integer)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) integer (rec__use_unchecked_union__myunion__discr a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields4 (mk___split_fields2 (rec__use_unchecked_union__myunion__record1 us_rep) (rec__use_unchecked_union__myunion__record2 us_rep1)))))
(define-fun us_split_fields_record1__projection ((a us_split_fields4)) us_rep (rec__use_unchecked_union__myunion__record1 a))
(define-fun us_split_fields_record2__projection ((a us_split_fields4)) us_rep1 (rec__use_unchecked_union__myunion__record2 a))
(declare-datatypes () ((us_split_fields__ref2 (mk___split_fields__ref2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___3__projection ((a us_split_fields__ref2)) us_split_fields4 (us_split_fields__content2 a))
(declare-datatypes () ((us_rep2 (mk___rep2 (us_split_discrs1 us_split_discrs) (us_split_fields5 us_split_fields4) (attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep2)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep2)) us_split_fields4 (us_split_fields5 a))
(define-fun us_rep___5__projection ((a us_rep2)) Bool (attr__constrained a))
(define-fun use_unchecked_union__myunion__record1__pred ((a us_rep2)) Bool (= (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a))) 0))
(define-fun use_unchecked_union__myunion__record2__pred ((a us_rep2)) Bool (not (= (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a))) 0)))
(define-fun bool_eq3 ((a us_rep2) (b us_rep2)) Bool (ite (and (= (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a))) (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 b)))) (and (=> (use_unchecked_union__myunion__record1__pred a) (= (bool_eq1 (rec__use_unchecked_union__myunion__record1 (us_split_fields5 a)) (rec__use_unchecked_union__myunion__record1 (us_split_fields5 b))) true)) (=> (use_unchecked_union__myunion__record2__pred a) (= (bool_eq2 (rec__use_unchecked_union__myunion__record2 (us_split_fields5 a)) (rec__use_unchecked_union__myunion__record2 (us_split_fields5 b))) true)))) true false))
(declare-const value__size4 Int)
(declare-fun object__size4 (us_rep2) Int)
(declare-const value__alignment4 Int)
(declare-fun object__alignment4 (us_rep2) Int)
(assert (<= 0 value__size4))
(assert (forall ((a us_rep2)) (<= 0 (object__size4 a))))
(assert (<= 0 value__alignment4))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment4 a))))
(declare-const use_unchecked_union__myunion__discr__first__bit Int)
(declare-const use_unchecked_union__myunion__discr__last__bit Int)
(declare-const use_unchecked_union__myunion__discr__position Int)
(assert (<= 0 use_unchecked_union__myunion__discr__first__bit))
(assert (< use_unchecked_union__myunion__discr__first__bit use_unchecked_union__myunion__discr__last__bit))
(assert (<= 0 use_unchecked_union__myunion__discr__position))
(declare-const use_unchecked_union__myunion__record1__first__bit Int)
(declare-const use_unchecked_union__myunion__record1__last__bit Int)
(declare-const use_unchecked_union__myunion__record1__position Int)
(assert (<= 0 use_unchecked_union__myunion__record1__first__bit))
(assert (< use_unchecked_union__myunion__record1__first__bit use_unchecked_union__myunion__record1__last__bit))
(assert (<= 0 use_unchecked_union__myunion__record1__position))
(declare-const use_unchecked_union__myunion__record2__first__bit Int)
(declare-const use_unchecked_union__myunion__record2__last__bit Int)
(declare-const use_unchecked_union__myunion__record2__position Int)
(assert (<= 0 use_unchecked_union__myunion__record2__first__bit))
(assert (< use_unchecked_union__myunion__record2__first__bit use_unchecked_union__myunion__record2__last__bit))
(assert (<= 0 use_unchecked_union__myunion__record2__position))
(declare-fun user_eq5 (us_rep2 us_rep2) Bool)
(declare-const dummy5 us_rep2)
(declare-datatypes () ((myunion__ref (mk_myunion__ref (myunion__content us_rep2)))))
(define-fun myunion__ref___projection ((a myunion__ref)) us_rep2 (myunion__content a))
(declare-fun temp___158 (Int Int Int) (Array Int integer))
(assert (forall ((temp___160 Int) (temp___161 Int) (temp___162 Int)) (let ((temp___159 (temp___158 temp___160 temp___161 temp___162))) (and (and (= (select temp___159 0) (of_rep temp___160)) (= (select temp___159 1) (of_rep temp___161))) (= (select temp___159 2) (of_rep temp___162))))))
(declare-fun temp___171 (Int Int Int Int) (Array Int integer))
(assert (forall ((temp___173 Int) (temp___174 Int) (temp___175 Int) (temp___176 Int)) (let ((temp___172 (temp___171 temp___173 temp___174 temp___175 temp___176))) (and (and (and (= (select temp___172 0) (of_rep temp___173)) (= (select temp___172 1) (of_rep temp___174))) (= (select temp___172 2) (of_rep temp___175))) (= (select temp___172 3) (of_rep temp___176))))))
(define-fun default_initial_assumption ((temp___expr_185 us_rep2) (temp___skip_top_level_186 Bool)) Bool (and (= (attr__constrained temp___expr_185) false) (and (and (= (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 temp___expr_185))) 0) (=> (use_unchecked_union__myunion__record1__pred temp___expr_185) (and (= (to_rep (rec__use_unchecked_union__small_record__field1 (us_split_fields1 (rec__use_unchecked_union__myunion__record1 (us_split_fields5 temp___expr_185))))) 0) (= (rec__use_unchecked_union__small_record__field2 (us_split_fields1 (rec__use_unchecked_union__myunion__record1 (us_split_fields5 temp___expr_185)))) (temp___158 0 0 0))))) (=> (use_unchecked_union__myunion__record2__pred temp___expr_185) (and (= (to_rep (rec__use_unchecked_union__big_record__field1 (us_split_fields3 (rec__use_unchecked_union__myunion__record2 (us_split_fields5 temp___expr_185))))) 0) (= (rec__use_unchecked_union__big_record__field2 (us_split_fields3 (rec__use_unchecked_union__myunion__record2 (us_split_fields5 temp___expr_185)))) (temp___171 0 0 0 0)))))))
(declare-const output__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const num Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(define-fun in_range1 ((rec__use_unchecked_union__myunion__discr1 Int) (a us_rep2)) Bool (= rec__use_unchecked_union__myunion__discr1 (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a)))))
(declare-const value__size5 Int)
(declare-fun object__size5 (us_rep2) Int)
(declare-const value__alignment5 Int)
(declare-fun object__alignment5 (us_rep2) Int)
(assert (<= 0 value__size5))
(assert (forall ((a us_rep2)) (<= 0 (object__size5 a))))
(assert (<= 0 value__alignment5))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment5 a))))
(declare-const use_unchecked_union__myunion__discr__first__bit1 Int)
(declare-const use_unchecked_union__myunion__discr__last__bit1 Int)
(declare-const use_unchecked_union__myunion__discr__position1 Int)
(assert (<= 0 use_unchecked_union__myunion__discr__first__bit1))
(assert (< use_unchecked_union__myunion__discr__first__bit1 use_unchecked_union__myunion__discr__last__bit1))
(assert (<= 0 use_unchecked_union__myunion__discr__position1))
(declare-const use_unchecked_union__myunion__record2__first__bit1 Int)
(declare-const use_unchecked_union__myunion__record2__last__bit1 Int)
(declare-const use_unchecked_union__myunion__record2__position1 Int)
(assert (<= 0 use_unchecked_union__myunion__record2__first__bit1))
(assert (< use_unchecked_union__myunion__record2__first__bit1 use_unchecked_union__myunion__record2__last__bit1))
(assert (<= 0 use_unchecked_union__myunion__record2__position1))
(declare-const use_unchecked_union__myunion__record1__first__bit1 Int)
(declare-const use_unchecked_union__myunion__record1__last__bit1 Int)
(declare-const use_unchecked_union__myunion__record1__position1 Int)
(assert (<= 0 use_unchecked_union__myunion__record1__first__bit1))
(assert (< use_unchecked_union__myunion__record1__first__bit1 use_unchecked_union__myunion__record1__last__bit1))
(assert (<= 0 use_unchecked_union__myunion__record1__position1))
(declare-fun user_eq6 (us_rep2 us_rep2) Bool)
(declare-const dummy6 us_rep2)
(declare-datatypes () ((t1b__ref (mk_t1b__ref (t1b__content us_rep2)))))
(define-fun t1b__ref___projection ((a t1b__ref)) us_rep2 (t1b__content a))
(define-fun in_range2 ((rec__use_unchecked_union__myunion__discr1 Int) (a us_rep2)) Bool (= rec__use_unchecked_union__myunion__discr1 (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a)))))
(declare-const value__size6 Int)
(declare-fun object__size6 (us_rep2) Int)
(declare-const value__alignment6 Int)
(declare-fun object__alignment6 (us_rep2) Int)
(assert (<= 0 value__size6))
(assert (forall ((a us_rep2)) (<= 0 (object__size6 a))))
(assert (<= 0 value__alignment6))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment6 a))))
(declare-const use_unchecked_union__myunion__discr__first__bit2 Int)
(declare-const use_unchecked_union__myunion__discr__last__bit2 Int)
(declare-const use_unchecked_union__myunion__discr__position2 Int)
(assert (<= 0 use_unchecked_union__myunion__discr__first__bit2))
(assert (< use_unchecked_union__myunion__discr__first__bit2 use_unchecked_union__myunion__discr__last__bit2))
(assert (<= 0 use_unchecked_union__myunion__discr__position2))
(declare-const use_unchecked_union__myunion__record1__first__bit2 Int)
(declare-const use_unchecked_union__myunion__record1__last__bit2 Int)
(declare-const use_unchecked_union__myunion__record1__position2 Int)
(assert (<= 0 use_unchecked_union__myunion__record1__first__bit2))
(assert (< use_unchecked_union__myunion__record1__first__bit2 use_unchecked_union__myunion__record1__last__bit2))
(assert (<= 0 use_unchecked_union__myunion__record1__position2))
(declare-const use_unchecked_union__myunion__record2__first__bit2 Int)
(declare-const use_unchecked_union__myunion__record2__last__bit2 Int)
(declare-const use_unchecked_union__myunion__record2__position2 Int)
(assert (<= 0 use_unchecked_union__myunion__record2__first__bit2))
(assert (< use_unchecked_union__myunion__record2__first__bit2 use_unchecked_union__myunion__record2__last__bit2))
(assert (<= 0 use_unchecked_union__myunion__record2__position2))
(declare-fun user_eq7 (us_rep2 us_rep2) Bool)
(declare-const dummy7 us_rep2)
(declare-datatypes () ((t4b__ref (mk_t4b__ref (t4b__content us_rep2)))))
(define-fun t4b__ref___projection ((a t4b__ref)) us_rep2 (t4b__content a))
(define-fun in_range3 ((rec__use_unchecked_union__myunion__discr1 Int) (a us_rep2)) Bool (= rec__use_unchecked_union__myunion__discr1 (to_rep (rec__use_unchecked_union__myunion__discr (us_split_discrs1 a)))))
(declare-const value__size7 Int)
(declare-fun object__size7 (us_rep2) Int)
(declare-const value__alignment7 Int)
(declare-fun object__alignment7 (us_rep2) Int)
(assert (<= 0 value__size7))
(assert (forall ((a us_rep2)) (<= 0 (object__size7 a))))
(assert (<= 0 value__alignment7))
(assert (forall ((a us_rep2)) (<= 0 (object__alignment7 a))))
(declare-const use_unchecked_union__myunion__discr__first__bit3 Int)
(declare-const use_unchecked_union__myunion__discr__last__bit3 Int)
(declare-const use_unchecked_union__myunion__discr__position3 Int)
(assert (<= 0 use_unchecked_union__myunion__discr__first__bit3))
(assert (< use_unchecked_union__myunion__discr__first__bit3 use_unchecked_union__myunion__discr__last__bit3))
(assert (<= 0 use_unchecked_union__myunion__discr__position3))
(declare-const use_unchecked_union__myunion__record1__first__bit3 Int)
(declare-const use_unchecked_union__myunion__record1__last__bit3 Int)
(declare-const use_unchecked_union__myunion__record1__position3 Int)
(assert (<= 0 use_unchecked_union__myunion__record1__first__bit3))
(assert (< use_unchecked_union__myunion__record1__first__bit3 use_unchecked_union__myunion__record1__last__bit3))
(assert (<= 0 use_unchecked_union__myunion__record1__position3))
(declare-const use_unchecked_union__myunion__record2__first__bit3 Int)
(declare-const use_unchecked_union__myunion__record2__last__bit3 Int)
(declare-const use_unchecked_union__myunion__record2__position3 Int)
(assert (<= 0 use_unchecked_union__myunion__record2__first__bit3))
(assert (< use_unchecked_union__myunion__record2__first__bit3 use_unchecked_union__myunion__record2__last__bit3))
(assert (<= 0 use_unchecked_union__myunion__record2__position3))
(declare-fun user_eq8 (us_rep2 us_rep2) Bool)
(declare-const dummy8 us_rep2)
(declare-datatypes () ((t7b__ref (mk_t7b__ref (t7b__content us_rep2)))))
(define-fun t7b__ref___projection ((a t7b__ref)) us_rep2 (t7b__content a))
(declare-fun temp___197 (Int Int Int) (Array Int integer))
(assert (forall ((temp___199 Int) (temp___200 Int) (temp___201 Int)) (let ((temp___198 (temp___197 temp___199 temp___200 temp___201))) (and (and (= (select temp___198 0) (of_rep temp___199)) (= (select temp___198 1) (of_rep temp___200))) (= (select temp___198 2) (of_rep temp___201))))))
(declare-fun temp___206 (Int Int Int Int) (Array Int integer))
(assert (forall ((temp___208 Int) (temp___209 Int) (temp___210 Int) (temp___211 Int)) (let ((temp___207 (temp___206 temp___208 temp___209 temp___210 temp___211))) (and (and (and (= (select temp___207 0) (of_rep temp___208)) (= (select temp___207 1) (of_rep temp___209))) (= (select temp___207 2) (of_rep temp___210))) (= (select temp___207 3) (of_rep temp___211))))))
(declare-fun temp___216 (Int Int Int Int) (Array Int integer))
(assert (forall ((temp___218 Int) (temp___219 Int) (temp___220 Int) (temp___221 Int)) (let ((temp___217 (temp___216 temp___218 temp___219 temp___220 temp___221))) (and (and (and (= (select temp___217 0) (of_rep temp___218)) (= (select temp___217 1) (of_rep temp___219))) (= (select temp___217 2) (of_rep temp___220))) (= (select temp___217 3) (of_rep temp___221))))))
(define-fun default_initial_assumption1 ((temp___expr_156 us_rep) (temp___skip_top_level_157 Bool)) Bool (and (= (to_rep (rec__use_unchecked_union__small_record__field1 (us_split_fields1 temp___expr_156))) 0) (= (rec__use_unchecked_union__small_record__field2 (us_split_fields1 temp___expr_156)) (temp___158 0 0 0))))
(define-fun default_initial_assumption2 ((temp___expr_169 us_rep1) (temp___skip_top_level_170 Bool)) Bool (and (= (to_rep (rec__use_unchecked_union__big_record__field1 (us_split_fields3 temp___expr_169))) 0) (= (rec__use_unchecked_union__big_record__field2 (us_split_fields3 temp___expr_169)) (temp___171 0 0 0 0))))
(declare-const output__split_discrs integer)
(declare-const o integer)
(declare-const o1 integer)
(declare-const o2 integer)
(declare-const o3 (Array Int integer))
(declare-const o4 integer)
(declare-const o5 (Array Int integer))
(declare-const o6 integer)
(declare-const o7 (Array Int integer))
(declare-const o8 integer)
(declare-const o9 (Array Int integer))
(declare-const o10 integer)
(declare-const temp___203 integer)
(declare-const temp___2031 integer)
(declare-const temp___2032 (Array Int integer))
(declare-const temp___2033 integer)
(declare-const temp___2034 (Array Int integer))
(declare-const temp___2035 Bool)
(declare-const o11 integer)
(declare-const o12 integer)
(declare-const o13 us_split_fields2)
(declare-const o14 us_rep1)
(declare-const o15 us_split_fields4)
(declare-const o16 us_split_discrs)
(declare-const temp___213 us_rep2)
(declare-const o17 integer)
(declare-const o18 integer)
(declare-const o19 us_split_fields2)
(declare-const o20 us_rep1)
(declare-const o21 us_split_fields4)
(declare-const o22 us_split_discrs)
(declare-const temp___223 us_rep2)
(assert (in_range num))
(assert (not (= output__attr__constrained true)))
(assert (= num 0))
(assert (= (to_rep o1) 1))
(assert (= o1 o2))
(assert (= (temp___197 1 2 3) o3))
(assert (= o4 o2))
(assert (= o5 o3))
(assert (= o6 o4))
(assert (= o7 o5))
(assert (= dummy4 (mk___rep1 (mk___split_fields1 o8 o9))))
(assert (= (to_rep o) 0))
(assert (= o o10))
(assert (= temp___203 o10))
(assert (= temp___2031 o6))
(assert (= temp___2032 o7))
(assert (= temp___2033 o8))
(assert (= temp___2034 o9))
(assert (= true temp___2035))
(assert (= output__attr__constrained true))
(assert (not (= temp___203 output__split_discrs)))
(check-sat)
(exit)
