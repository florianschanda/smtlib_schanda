(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort byte 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (byte byte) Bool)
(declare-const dummy byte)
(declare-datatypes () ((byte__ref (mk_byte__ref (byte__content byte)))))
(define-fun byte__ref___projection ((a byte__ref)) byte (byte__content a))
(declare-fun to_rep (byte) Int)
(declare-fun of_rep (Int) byte)
(assert (forall ((x byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x byte)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int byte))))))
(declare-fun slide ((Array Int byte) Int Int) (Array Int byte))
(assert (forall ((a (Array Int byte))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int byte))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq ((a (Array Int byte)) (a__first Int) (a__last Int) (b (Array Int byte)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a (Array Int byte)) (b (Array Int byte))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a temp___idx_154)) (to_rep (select b (+ (- b__first a__first) temp___idx_154)))))))))))
(declare-const dummy1 (Array Int byte))
(declare-const value__size Int)
(declare-fun object__size ((Array Int byte)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int byte)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int byte)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int byte))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int byte))) (<= 0 (object__alignment a))))
(declare-fun user_eq1 ((Array Int byte) (Array Int byte)) Bool)
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__equality__sf_record_t__x (Array Int byte))))))
(define-fun us_split_fields_X__projection ((a us_split_fields)) (Array Int byte) (rec__equality__sf_record_t__x a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_fields1 us_split_fields)))))
(define-fun us_rep___projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun bool_eq1 ((a us_rep) (b us_rep)) Bool (ite (= (bool_eq (rec__equality__sf_record_t__x (us_split_fields1 a)) 0 255 (rec__equality__sf_record_t__x (us_split_fields1 b)) 0 255) true) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const equality__sf_record_t__x__first__bit Int)
(declare-const equality__sf_record_t__x__last__bit Int)
(declare-const equality__sf_record_t__x__position Int)
(assert (<= 0 equality__sf_record_t__x__first__bit))
(assert (< equality__sf_record_t__x__first__bit equality__sf_record_t__x__last__bit))
(assert (<= 0 equality__sf_record_t__x__position))
(declare-fun user_eq2 (us_rep us_rep) Bool)
(declare-const dummy2 us_rep)
(declare-datatypes () ((sf_record_t__ref (mk_sf_record_t__ref (sf_record_t__content us_rep)))))
(define-fun sf_record_t__ref___projection ((a sf_record_t__ref)) us_rep (sf_record_t__content a))
(declare-const a us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const c us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const d us_rep)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant ((temp___expr_159 Int) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (or (= temp___is_init_155 true) (<= 0 255)) (in_range1 temp___expr_159)))
(declare-const equality__l611_019_reduced_testcase__result Bool)
(declare-const result Bool)
(declare-const equality__l611_019_reduced_testcase__result1 Bool)
(declare-const equality__l611_019_reduced_testcase__result2 Bool)
(declare-const equality__l611_019_reduced_testcase__result3 Bool)
(declare-const equality__l611_019_reduced_testcase__result4 Bool)
(declare-const equality__l611_019_reduced_testcase__result5 Bool)
(declare-const result1 Bool)
(assert (and (and (= (bool_eq (rec__equality__sf_record_t__x (us_split_fields1 a)) 0 255 (rec__equality__sf_record_t__x (us_split_fields1 b)) 0 255) true) (= (bool_eq (rec__equality__sf_record_t__x (us_split_fields1 b)) 0 255 (rec__equality__sf_record_t__x (us_split_fields1 c)) 0 255) true)) (= (bool_eq (rec__equality__sf_record_t__x (us_split_fields1 c)) 0 255 (rec__equality__sf_record_t__x (us_split_fields1 d)) 0 255) true)))
(assert (= equality__l611_019_reduced_testcase__result1 equality__l611_019_reduced_testcase__result2))
(assert (= equality__l611_019_reduced_testcase__result3 equality__l611_019_reduced_testcase__result1))
(assert (= result equality__l611_019_reduced_testcase__result))
(assert (= equality__l611_019_reduced_testcase__result1 (distinct 1 0)))
(assert (= (mk_bool__ref equality__l611_019_reduced_testcase__result4) (mk_bool__ref equality__l611_019_reduced_testcase__result2)))
(assert (= equality__l611_019_reduced_testcase__result5 equality__l611_019_reduced_testcase__result3))
(assert (= result1 equality__l611_019_reduced_testcase__result4))
(assert (= equality__l611_019_reduced_testcase__result4 true))
(assert (not (= (bool_eq (rec__equality__sf_record_t__x (us_split_fields1 a)) 0 255 (rec__equality__sf_record_t__x (us_split_fields1 d)) 0 255) true)))
(check-sat)
(exit)
