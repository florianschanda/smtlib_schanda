(* this is the prelude for Alt-Ergo, version >= 0.95.2 *)
(* this is a prelude for Alt-Ergo integer arithmetic *)
logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

logic to_int : bool -> int

axiom to_int_def :
  (forall b:bool [to_int(b)]. (((b = true) -> (to_int(b) = 1)) and
  ((not (b = true)) -> (to_int(b) = 0))))

logic of_int : int -> bool

axiom of_int_def :
  (forall i:int [of_int(i)]. (((i = 0) -> (of_int(i) = false)) and
  ((not (i = 0)) -> (of_int(i) = true))))

logic bool_eq : bool, bool -> bool

axiom bool_eq_def :
  (forall x:bool. forall y:bool [bool_eq(x, y)]. (((x = y) -> (bool_eq(x,
  y) = true)) and ((not (x = y)) -> (bool_eq(x, y) = false))))

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type it1

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

logic bool_eq1 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq1(x, y) = true) <-> (x = y))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) <-> (not (x = y)))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) <-> (x <  y))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) <-> (x <= y))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) <-> (y <  x))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) <-> (y <= x))))

logic bool_eq2 : int, int -> bool

axiom bool_eq_def1 :
  (forall x:int. forall y:int [bool_eq2(x, y)]. (((x = y) -> (bool_eq2(x,
  y) = true)) and ((not (x = y)) -> (bool_eq2(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : it1, it1 -> bool

logic dummy : it1

type it1__ref = { it1__content : it1
}

function it1__ref___projection(a: it1__ref) : it1 = (a).it1__content

type et1

predicate in_range2(x: int) = ((0 <= x) and (x <= 99))

logic bool_eq3 : int, int -> bool

axiom bool_eq_def2 :
  (forall x:int. forall y:int [bool_eq3(x, y)]. (((x = y) -> (bool_eq3(x,
  y) = true)) and ((not (x = y)) -> (bool_eq3(x, y) = false))))

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : et1, et1 -> bool

logic dummy1 : et1

type et1__ref = { et1__content : et1
}

function et1__ref___projection(a: et1__ref) : et1 = (a).et1__content

logic to_rep : et1 -> int

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

logic bool_eq4 : (int,et1) farray, int, int, (int,et1) farray, int,
  int -> bool

axiom bool_eq_def3 :
  (forall a:(int,et1) farray. forall a__first:int. forall a__last:int.
  forall b:(int,et1) farray. forall b__first:int. forall b__last:int
  [bool_eq4(a, a__first, a__last, b, b__first, b__last)].
  ((((((a__first <= a__last) and ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) or
  ((not (a__first <= a__last)) and (b__last <  b__first))) and
  (forall temp___idx_154:int. ((((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) and
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))) or
  (not ((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = true)) and
  ((not ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))) ->
  (bool_eq4(a, a__first, a__last, b, b__first, b__last) = false))))

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((((a__first <= a__last) -> ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first)))) and
  ((not (a__first <= a__last)) -> (b__last <  b__first))) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic temp___740 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___749 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___758 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___767 : (int,et1) farray, int, int, int, int -> (int,et1) farray

logic temp___4460 : (int,et1) farray, int, int -> (int,et1) farray

axiom def_axiom :
  (forall temp___4462:(int,et1) farray.
  (forall temp___4463:int. forall temp___4464:int.
  ((in_range1(temp___4463) and in_range2(temp___4464)) ->
  (forall temp___4465:int. (((temp___4465 = temp___4463) ->
  (to_rep((temp___4460(temp___4462, temp___4463,
  temp___4464)[temp___4465])) = temp___4464)) and
  ((not (temp___4465 = temp___4463)) -> ((temp___4460(temp___4462,
  temp___4463, temp___4464)[temp___4465]) = (temp___4462[temp___4465]))))))))

axiom def_axiom1 :
  (forall temp___742:(int,et1) farray.
  (forall temp___743:int. forall temp___744:int. forall temp___745:int.
  forall temp___746:int. ((((in_range1(temp___743) and
  in_range2(temp___744)) and in_range1(temp___745)) and
  in_range2(temp___746)) ->
  (forall temp___747:int. (((temp___747 = temp___745) ->
  (to_rep((temp___740(temp___742, temp___743, temp___744, temp___745,
  temp___746)[temp___747])) = temp___746)) and
  ((not (temp___747 = temp___745)) -> (((temp___747 = temp___743) ->
  (to_rep((temp___740(temp___742, temp___743, temp___744, temp___745,
  temp___746)[temp___747])) = temp___744)) and
  ((not (temp___747 = temp___743)) -> ((temp___740(temp___742, temp___743,
  temp___744, temp___745,
  temp___746)[temp___747]) = (temp___742[temp___747]))))))))))

axiom def_axiom2 :
  (forall temp___751:(int,et1) farray.
  (forall temp___752:int. forall temp___753:int. forall temp___754:int.
  forall temp___755:int. ((((in_range1(temp___752) and
  in_range2(temp___753)) and in_range1(temp___754)) and
  in_range2(temp___755)) ->
  (forall temp___756:int. (((temp___756 = temp___754) ->
  (to_rep((temp___749(temp___751, temp___752, temp___753, temp___754,
  temp___755)[temp___756])) = temp___755)) and
  ((not (temp___756 = temp___754)) -> (((temp___756 = temp___752) ->
  (to_rep((temp___749(temp___751, temp___752, temp___753, temp___754,
  temp___755)[temp___756])) = temp___753)) and
  ((not (temp___756 = temp___752)) -> ((temp___749(temp___751, temp___752,
  temp___753, temp___754,
  temp___755)[temp___756]) = (temp___751[temp___756]))))))))))

axiom def_axiom3 :
  (forall temp___760:(int,et1) farray.
  (forall temp___761:int. forall temp___762:int. forall temp___763:int.
  forall temp___764:int. ((((in_range1(temp___761) and
  in_range2(temp___762)) and in_range1(temp___763)) and
  in_range2(temp___764)) ->
  (forall temp___765:int. (((temp___765 = temp___763) ->
  (to_rep((temp___758(temp___760, temp___761, temp___762, temp___763,
  temp___764)[temp___765])) = temp___764)) and
  ((not (temp___765 = temp___763)) -> (((temp___765 = temp___761) ->
  (to_rep((temp___758(temp___760, temp___761, temp___762, temp___763,
  temp___764)[temp___765])) = temp___762)) and
  ((not (temp___765 = temp___761)) -> ((temp___758(temp___760, temp___761,
  temp___762, temp___763,
  temp___764)[temp___765]) = (temp___760[temp___765]))))))))))

axiom def_axiom4 :
  (forall temp___769:(int,et1) farray.
  (forall temp___770:int. forall temp___771:int. forall temp___772:int.
  forall temp___773:int. ((((in_range1(temp___770) and
  in_range2(temp___771)) and in_range1(temp___772)) and
  in_range2(temp___773)) ->
  (forall temp___774:int. (((temp___774 = temp___772) ->
  (to_rep((temp___767(temp___769, temp___770, temp___771, temp___772,
  temp___773)[temp___774])) = temp___773)) and
  ((not (temp___774 = temp___772)) -> (((temp___774 = temp___770) ->
  (to_rep((temp___767(temp___769, temp___770, temp___771, temp___772,
  temp___773)[temp___774])) = temp___771)) and
  ((not (temp___774 = temp___770)) -> ((temp___767(temp___769, temp___770,
  temp___771, temp___772,
  temp___773)[temp___774]) = (temp___769[temp___774]))))))))))

 (* File "ar.adb", line 174, characters 0-0 *)
goal WP_parameter_def :
  (forall a:(int,et1) farray. forall j:int. forall f:int. forall o:int.
  forall o1:et1. forall o2:(int,et1) farray. forall o3:int. forall o4:int.
  forall temp___4472:(int,et1) farray. forall t:(int,et1) farray.
  forall a1:(int,et1) farray. forall j1:int. forall result:int.
  forall f1:int. forall result1:int. forall f2:int.
  forall result2:(int,et1) farray. forall a2:(int,et1) farray.
  forall a3:(int,et1) farray. forall j2:int. forall f3:int.
  forall t1:(int,et1) farray. forall a4:(int,et1) farray. forall j3:int.
  forall f4:int. forall t2:(int,et1) farray. forall result3:bool.
  (in_range1(i) -> (in_range2(e) -> (((((1 <= 10) -> in_range1(j)) and
  (((0 <= 99) -> in_range2(f)) and ((((bool_eq4(a1, 1, 10, temp___4460(t, i,
  e), 1, 10) = true) and (((i = 10) and (j1 = 1)) or ((i <  10) and
  (j1 = (i + 1))))) and in_range1(j1)) and (((1 <= 10) -> in_range1(j1)) and
  ((((e = 0) and (({ int__content = result } = { int__content = f }) and
  (f1 = 99))) or ((not (e = 0)) and ((((o = (e - 1)) and
  in_range2((e - 1))) and (({ int__content = result1 } = { int__content = f
  }) and (f2 = o))) and (f1 = f2)))) and (((to_rep(o1) = f1) and
  (o2 = (a1[j1 <- o1]))) and ((a1 = result2) and (a2 = o2)))))))) and
  (((t = t1) and ((f1 = f3) and ((j1 = j2) and (a2 = a3)))) and ((t2 = t) and
  ((f4 = f1) and ((j3 = j1) and (a4 = a2)))))) -> ((i <  10) ->
  ((((0 <  e) and ((((o3 = (e - 1)) and in_range2((e - 1))) and
  (((o4 = (i + 1)) and in_range1((i + 1))) and (temp___4472 = temp___740(a,
  i, e, o4, o3)))) and (result3 = bool_eq4(a3, 1, 10, temp___4472, 1,
  10)))) or ((not (0 <  e)) and (result3 = false))) ->
  ((not (result3 = true)) -> ((e = 0) -> in_range1((i + 1))))))))))
