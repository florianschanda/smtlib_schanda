(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun to_int1 ((b Bool)) Int (ite (= b true) 1 0))
(define-fun of_int ((i Int)) Bool (ite (= i 0) false true))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (in_range2 low) (in_range2 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range2 temp___expr_39)))
(define-fun dynamic_invariant1 ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(declare-const c us_t)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const s us_t)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(define-fun dynamic_invariant2 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range3 temp___expr_63)))
(define-fun dynamic_invariant3 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_15)))
(declare-const courant Int)
(declare-const possible Int)
(declare-const indexbis__result Int)
(declare-const o Int)
(declare-const temp___153 Int)
(declare-const i Int)
(declare-const j Int)
(declare-const o1 Int)
(declare-const o2 character)
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const temp___152 Int)
(declare-const j1 Int)
(declare-const o5 Int)
(declare-const o6 character)
(declare-const o7 Int)
(declare-const i1 Int)
(declare-const j2 Int)
(declare-const o8 Int)
(declare-const o9 character)
(declare-const o10 Int)
(declare-const o11 Bool)
(declare-const o12 Int)
(declare-const o13 character)
(declare-const o14 Int)
(declare-const o15 character)
(declare-const o16 Int)
(declare-const o17 Int)
(declare-const o18 Int)
(declare-const o19 Int)
(declare-const o20 Int)
(declare-const o21 Int)
(declare-const o22 Int)
(declare-const o23 Int)
(declare-const i2 Int)
(declare-const j3 Int)
(declare-const o24 Int)
(declare-const o25 character)
(declare-const o26 Int)
(declare-const j4 Int)
(declare-const o27 Int)
(declare-const o28 character)
(declare-const o29 Int)
(declare-const i3 Int)
(declare-const j5 Int)
(declare-const o30 Int)
(declare-const o31 character)
(declare-const o32 Int)
(declare-const o33 Bool)
(declare-const courant1 Int)
(declare-const possible1 Int)
(declare-const result Bool)
(declare-const result1 Int)
(declare-const indexbis__result1 Int)
(declare-const result2 Int)
(declare-const courant2 Int)
(declare-const courant3 Int)
(declare-const possible2 Int)
(declare-const indexbis__result2 Int)
(declare-const result3 Int)
(declare-const possible3 Int)
(declare-const possible4 Int)
(declare-const indexbis__result3 Int)
(declare-const result4 Bool)
(declare-const result5 Bool)
(declare-const result6 Bool)
(declare-const result7 Int)
(declare-const indexbis__result4 Int)
(declare-const result8 Int)
(declare-const possible5 Int)
(declare-const possible6 Int)
(declare-const indexbis__result5 Int)
(declare-const possible7 Int)
(declare-const indexbis__result6 Int)
(declare-const possible8 Int)
(declare-const indexbis__result7 Int)
(declare-const possible9 Int)
(declare-const indexbis__result8 Int)
(declare-const possible10 Int)
(declare-const indexbis__result9 Int)
(declare-const possible11 Int)
(declare-const indexbis__result10 Int)
(declare-const possible12 Int)
(declare-const indexbis__result11 Int)
(declare-const possible13 Int)
(declare-const indexbis__result12 Int)
(declare-const result9 Int)
(declare-const courant4 Int)
(declare-const result10 Int)
(declare-const indexbis__result13 Int)
(declare-const courant5 Int)
(declare-const indexbis__result14 Int)
(declare-const courant6 Int)
(declare-const indexbis__result15 Int)
(declare-const possible14 Int)
(declare-const indexbis__result16 int__ref)
(declare-const possible15 Int)
(declare-const indexbis__result17 Int)
(declare-const courant7 int__ref)
(declare-const possible16 int__ref)
(declare-const indexbis__result18 int__ref)
(declare-const courant8 Int)
(declare-const possible17 Int)
(declare-const indexbis__result19 Int)
(declare-const courant9 int__ref)
(declare-const possible18 int__ref)
(declare-const indexbis__result20 int__ref)
(declare-const courant10 Int)
(declare-const possible19 Int)
(declare-const indexbis__result21 Int)
(declare-const courant11 int__ref)
(declare-const possible20 int__ref)
(declare-const indexbis__result22 int__ref)
(declare-const courant12 Int)
(declare-const possible21 Int)
(declare-const indexbis__result23 Int)
(declare-const courant13 int__ref)
(declare-const possible22 int__ref)
(declare-const indexbis__result24 int__ref)
(declare-const courant14 Int)
(declare-const possible23 Int)
(declare-const indexbis__result25 Int)
(declare-const courant15 int__ref)
(declare-const possible24 int__ref)
(declare-const indexbis__result26 int__ref)
(declare-const courant16 Int)
(declare-const possible25 Int)
(declare-const indexbis__result27 Int)
(declare-const courant17 int__ref)
(declare-const possible26 int__ref)
(declare-const indexbis__result28 int__ref)
(declare-const courant18 Int)
(declare-const possible27 Int)
(declare-const indexbis__result29 Int)
(declare-const courant19 int__ref)
(declare-const possible28 int__ref)
(declare-const indexbis__result30 int__ref)
(declare-const courant20 Int)
(declare-const possible29 Int)
(declare-const indexbis__result31 Int)
(declare-const courant21 int__ref)
(declare-const possible30 int__ref)
(declare-const indexbis__result32 int__ref)
(declare-const courant22 Int)
(declare-const possible31 Int)
(declare-const indexbis__result33 Int)
(declare-const result11 Bool)
(assert (dynamic_invariant1 c true false true))
(assert (dynamic_invariant1 s true false true))
(assert (=> (= (length s) 0) (= result true)))
(assert (=> (not (= (length s) 0)) (= result (ite (= (length c) 0) true false))))
(assert (not (= result true)))
(assert (and (= o (to_rep1 (first (rt s)))) (in_range2 (to_rep1 (first (rt s))))))
(assert (= (mk_int__ref result2) (mk_int__ref courant)))
(assert (= courant2 o))
(assert (in_range2 courant2))
(assert (and (and (<= (to_rep1 (first (rt s))) courant3) (<= courant3 (to_rep1 (last (rt s))))) (not (exists ((i4 Int)) (and (and (<= (to_rep1 (first (rt s))) i4) (<= i4 (- courant3 1))) (exists ((j6 Int)) (and (and (<= (to_rep1 (first (rt c))) j6) (<= j6 (to_rep1 (last (rt c))))) (= (to_rep (select (elts s) i4)) (to_rep (select (elts c) j6))))))))))
(assert (=> (<= 1 2147483647) (in_range2 courant3)))
(assert (and (= o4 (to_rep1 (first (rt c)))) (in_range2 (to_rep1 (first (rt c))))))
(assert (= possible2 result3))
(assert (= possible3 o4))
(assert (in_range2 possible3))
(assert (and (and (= temp___152 possible3) (and (and (and (and (and (<= (to_rep1 (first (rt s))) courant3) (<= courant3 (to_rep1 (last (rt s))))) (not (exists ((i4 Int)) (and (and (<= (to_rep1 (first (rt s))) i4) (<= i4 (- courant3 1))) (exists ((j6 Int)) (and (and (<= (to_rep1 (first (rt c))) j6) (<= j6 (to_rep1 (last (rt c))))) (= (to_rep (select (elts s) i4)) (to_rep (select (elts c) j6))))))))) (and (<= (to_rep1 (first (rt c))) possible4) (<= possible4 (to_rep1 (last (rt c)))))) (not (exists ((j6 Int)) (and (and (<= (to_rep1 (first (rt c))) j6) (<= j6 (- possible4 1))) (= (to_rep (select (elts s) courant3)) (to_rep (select (elts c) j6))))))) (and (=> (<= 1 2147483647) (in_range2 possible4)) (and (and (and (= indexbis__result3 indexbis__result5) (= possible4 possible6)) (and (= indexbis__result6 indexbis__result3) (= possible7 possible4))) (and (and (and (and (and (and (<= (to_rep1 (first (rt c))) possible4) (<= possible4 (to_rep1 (last (rt c))))) (= o14 possible4)) (= o15 (select (elts c) o14))) (= o16 (to_rep o15))) (and (and (and (and (and (<= (to_rep1 (first (rt s))) courant3) (<= courant3 (to_rep1 (last (rt s))))) (= o12 courant3)) (= o13 (select (elts s) o12))) (= o17 (to_rep o13))) (= result6 (ite (= o17 o16) true false)))) (and (not (= result6 true)) (not (< possible4 (to_rep1 (last (rt c))))))))))) (and (and (= (mk_int__ref indexbis__result9) (mk_int__ref indexbis__result5)) (= (mk_int__ref possible10) (mk_int__ref possible6))) (and (= indexbis__result10 indexbis__result6) (= possible11 possible7)))))
(assert (= (mk_int__ref indexbis__result11) (mk_int__ref indexbis__result9)))
(assert (= (mk_int__ref possible12) (mk_int__ref possible10)))
(assert (= indexbis__result12 indexbis__result10))
(assert (= possible13 possible11))
(assert (< courant3 (to_rep1 (last (rt s)))))
(assert (and (= o21 courant3) (not (= courant3 2147483647))))
(assert (= o22 (+ o21 1)))
(assert (and (= o23 o22) (in_range2 o22)))
(assert (= courant3 result9))
(assert (= courant4 o23))
(assert (= (mk_int__ref indexbis__result14) (mk_int__ref indexbis__result11)))
(assert (= courant4 courant5))
(assert (= indexbis__result15 indexbis__result12))
(assert (= courant6 courant4))
(assert (= indexbis__result18 (mk_int__ref indexbis__result14)))
(assert (= possible16 (mk_int__ref possible12)))
(assert (= courant7 (mk_int__ref courant5)))
(assert (= indexbis__result19 indexbis__result15))
(assert (= possible17 possible13))
(assert (= courant8 courant6))
(assert (not (<= (to_rep1 (first (rt s))) (int__content courant7))))
(check-sat)
(exit)
