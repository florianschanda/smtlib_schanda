(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-fun t_not (Int) Int)
(declare-fun t_not__function_guard (Int Int) Bool)
(declare-sort tristate 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (tristate tristate) Bool)
(declare-const dummy tristate)
(declare-datatypes () ((tristate__ref (mk_tristate__ref (tristate__content tristate)))))
(define-fun tristate__ref___projection ((a tristate__ref)) tristate (tristate__content a))
(define-fun dynamic_invariant ((temp___expr_160 Int) (temp___is_init_156 Bool) (temp___skip_constant_157 Bool) (temp___do_toplevel_158 Bool) (temp___do_typ_inv_159 Bool)) Bool (=> (or (= temp___is_init_156 true) (<= 0 2)) (in_range1 temp___expr_160)))
(assert (forall ((op Int)) (! (=> (dynamic_invariant op true true true true) (dynamic_invariant (t_not op) true false true true)) :pattern ((t_not op)))))
(assert (forall ((op Int)) (! (=> (dynamic_invariant op true true true true) (= (t_not op) (ite (= op 0) 1 0))) :pattern ((t_not op)))))
(declare-fun t_or (Int Int) Int)
(declare-fun t_or__function_guard (Int Int Int) Bool)
(assert (forall ((left Int) (right Int)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (dynamic_invariant (t_or left right) true false true true)) :pattern ((t_or left right)))))
(assert (forall ((left Int) (right Int)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (= (t_or left right) (ite (= left 0) 0 (ite (= left 1) right 2)))) :pattern ((t_or left right)))))
(declare-fun t_and (Int Int) Int)
(declare-fun t_and__function_guard (Int Int Int) Bool)
(assert (forall ((left Int) (right Int)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (dynamic_invariant (t_and left right) true false true true)) :pattern ((t_and left right)))))
(assert (forall ((left Int) (right Int)) (! (=> (and (dynamic_invariant left true true true true) (dynamic_invariant right true true true true)) (= (t_and left right) (ite (= left 1) 1 (ite (= left 0) right 2)))) :pattern ((t_and left right)))))
(declare-sort decision_kind 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (decision_kind decision_kind) Bool)
(declare-const dummy1 decision_kind)
(declare-datatypes () ((decision_kind__ref (mk_decision_kind__ref (decision_kind__content decision_kind)))))
(define-fun decision_kind__ref___projection ((a decision_kind__ref)) decision_kind (decision_kind__content a))
(declare-fun to_rep (decision_kind) Int)
(declare-fun of_rep (Int) decision_kind)
(assert (forall ((x decision_kind)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x decision_kind)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-sort node_id 0)
(declare-fun node_idqtint (node_id) Int)
(assert (forall ((i node_id)) (and (<= 1 (node_idqtint i)) (<= (node_idqtint i) 1000))))
(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq2 (node_id node_id) Bool)
(declare-const dummy2 node_id)
(declare-datatypes () ((node_id__ref (mk_node_id__ref (node_id__content node_id)))))
(define-fun node_id__ref___projection ((a node_id__ref)) node_id (node_id__content a))
(define-fun to_rep1 ((x node_id)) Int (node_idqtint x))
(declare-fun of_rep1 (Int) node_id)
(assert (forall ((x node_id)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x node_id)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__var__decision__kind decision_kind)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) decision_kind (rec__var__decision__kind a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__var__decision__id node_id) (rec__var__decision__operand node_id) (rec__var__decision__left node_id) (rec__var__decision__right node_id)))))
(define-fun us_split_fields_Id__projection ((a us_split_fields)) node_id (rec__var__decision__id a))
(define-fun us_split_fields_Operand__projection ((a us_split_fields)) node_id (rec__var__decision__operand a))
(define-fun us_split_fields_Left__projection ((a us_split_fields)) node_id (rec__var__decision__left a))
(define-fun us_split_fields_Right__projection ((a us_split_fields)) node_id (rec__var__decision__right a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___2__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___3__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun var__decision__operand__pred ((a us_rep)) Bool (= (to_rep (rec__var__decision__kind (us_split_discrs1 a))) 1))
(define-fun var__decision__left__pred ((a us_rep)) Bool (or (= (to_rep (rec__var__decision__kind (us_split_discrs1 a))) 2) (= (to_rep (rec__var__decision__kind (us_split_discrs1 a))) 3)))
(define-fun var__decision__right__pred ((a us_rep)) Bool (or (= (to_rep (rec__var__decision__kind (us_split_discrs1 a))) 2) (= (to_rep (rec__var__decision__kind (us_split_discrs1 a))) 3)))
(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep (rec__var__decision__kind (us_split_discrs1 a))) (to_rep (rec__var__decision__kind (us_split_discrs1 b)))) (and (and (and (= (to_rep1 (rec__var__decision__id (us_split_fields1 a))) (to_rep1 (rec__var__decision__id (us_split_fields1 b)))) (=> (var__decision__operand__pred a) (= (to_rep1 (rec__var__decision__operand (us_split_fields1 a))) (to_rep1 (rec__var__decision__operand (us_split_fields1 b)))))) (=> (var__decision__left__pred a) (= (to_rep1 (rec__var__decision__left (us_split_fields1 a))) (to_rep1 (rec__var__decision__left (us_split_fields1 b)))))) (=> (var__decision__right__pred a) (= (to_rep1 (rec__var__decision__right (us_split_fields1 a))) (to_rep1 (rec__var__decision__right (us_split_fields1 b))))))) true false))
(declare-const value__size Int)
(declare-fun object__size (us_rep) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment (us_rep) Int)
(assert (<= 0 value__size))
(assert (forall ((a us_rep)) (<= 0 (object__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a us_rep)) (<= 0 (object__alignment a))))
(declare-const var__decision__kind__first__bit Int)
(declare-const var__decision__kind__last__bit Int)
(declare-const var__decision__kind__position Int)
(assert (<= 0 var__decision__kind__first__bit))
(assert (< var__decision__kind__first__bit var__decision__kind__last__bit))
(assert (<= 0 var__decision__kind__position))
(declare-const var__decision__id__first__bit Int)
(declare-const var__decision__id__last__bit Int)
(declare-const var__decision__id__position Int)
(assert (<= 0 var__decision__id__first__bit))
(assert (< var__decision__id__first__bit var__decision__id__last__bit))
(assert (<= 0 var__decision__id__position))
(declare-const var__decision__operand__first__bit Int)
(declare-const var__decision__operand__last__bit Int)
(declare-const var__decision__operand__position Int)
(assert (<= 0 var__decision__operand__first__bit))
(assert (< var__decision__operand__first__bit var__decision__operand__last__bit))
(assert (<= 0 var__decision__operand__position))
(declare-const var__decision__left__first__bit Int)
(declare-const var__decision__left__last__bit Int)
(declare-const var__decision__left__position Int)
(assert (<= 0 var__decision__left__first__bit))
(assert (< var__decision__left__first__bit var__decision__left__last__bit))
(assert (<= 0 var__decision__left__position))
(declare-const var__decision__right__first__bit Int)
(declare-const var__decision__right__last__bit Int)
(declare-const var__decision__right__position Int)
(assert (<= 0 var__decision__right__first__bit))
(assert (< var__decision__right__first__bit var__decision__right__last__bit))
(assert (<= 0 var__decision__right__position))
(declare-fun user_eq3 (us_rep us_rep) Bool)
(declare-const dummy3 us_rep)
(declare-datatypes () ((decision__ref (mk_decision__ref (decision__content us_rep)))))
(define-fun decision__ref___projection ((a decision__ref)) us_rep (decision__content a))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))
(assert (forall ((a (Array Int us_rep))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int us_rep))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int) (b (Array Int us_rep)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true)))) true false))
(assert (forall ((a (Array Int us_rep)) (b (Array Int us_rep))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq1 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (bool_eq (select a temp___idx_154) (select b (+ (- b__first a__first) temp___idx_154))) true))))))))
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-fun to_rep2 (tristate) Int)
(declare-fun of_rep2 (Int) tristate)
(assert (forall ((x tristate)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x tristate)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(declare-datatypes () ((map__ref1 (mk_map__ref1 (map__content1 (Array Int tristate))))))
(declare-fun slide1 ((Array Int tristate) Int Int) (Array Int tristate))
(assert (forall ((a (Array Int tristate))) (forall ((first Int)) (! (= (slide1 a first first) a) :pattern ((slide1 a first first))))))
(assert (forall ((a (Array Int tristate))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide1 a old_first new_first) i))))))))
(define-fun bool_eq2 ((a (Array Int tristate)) (a__first Int) (a__last Int) (b (Array Int tristate)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep2 (select a temp___idx_155)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_155))))))) true false))
(assert (forall ((a (Array Int tristate)) (b (Array Int tristate))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq2 b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_155 Int)) (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last)) (= (to_rep2 (select a temp___idx_155)) (to_rep2 (select b (+ (- b__first a__first) temp___idx_155)))))))))))
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-fun decision_eval (Int (Array Int us_rep) (Array Int tristate)) Int)
(declare-fun decision_eval__function_guard (Int Int (Array Int us_rep) (Array Int tristate)) Bool)
(define-fun dynamic_invariant1 ((temp___expr_167 Int) (temp___is_init_163 Bool) (temp___skip_constant_164 Bool) (temp___do_toplevel_165 Bool) (temp___do_typ_inv_166 Bool)) Bool (=> (or (= temp___is_init_163 true) (<= 0 3)) (in_range2 temp___expr_167)))
(define-fun dynamic_invariant2 ((temp___expr_174 Int) (temp___is_init_170 Bool) (temp___skip_constant_171 Bool) (temp___do_toplevel_172 Bool) (temp___do_typ_inv_173 Bool)) Bool (=> (or (= temp___is_init_170 true) (<= 1 1000)) (in_range3 temp___expr_174)))
(define-fun default_initial_assumption ((temp___expr_183 us_rep) (temp___skip_top_level_184 Bool)) Bool (and (= (attr__constrained temp___expr_183) false) (= (to_rep (rec__var__decision__kind (us_split_discrs1 temp___expr_183))) 0)))
(declare-const root_id Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const d__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const decision_table (Array Int us_rep))
(declare-const condition_values (Array Int tristate))
(declare-const d__split_fields node_id)
(declare-const d__split_fields1 node_id)
(declare-const d__split_fields2 node_id)
(declare-const d__split_fields3 node_id)
(declare-const d__split_discrs decision_kind)
(declare-const kind Int)
(declare-const result node_id)
(declare-const result1 node_id)
(declare-const result2 node_id)
(declare-const result3 node_id)
(declare-const d__split_fields4 node_id)
(declare-const d__split_fields5 node_id)
(declare-const d__split_fields6 node_id)
(declare-const d__split_fields7 node_id)
(declare-const result4 decision_kind)
(declare-const d__split_discrs1 decision_kind)
(declare-const result5 Int)
(declare-const kind1 Int)
(assert (forall ((temp___201 Int)) (=> (and (<= 1 temp___201) (<= temp___201 1000)) (= (attr__constrained (select decision_table temp___201)) false))))
(assert (in_range3 root_id))
(assert (forall ((x Int)) (=> (and (<= 1 x) (<= x 1000)) (not (= (to_rep2 (select condition_values x)) 2)))))
(assert (= (mk___split_fields__ref (mk___split_fields result result1 result2 result3)) (mk___split_fields__ref (mk___split_fields d__split_fields d__split_fields1 d__split_fields2 d__split_fields3))))
(assert (= (mk___split_fields d__split_fields4 d__split_fields5 d__split_fields6 d__split_fields7) (us_split_fields1 (select decision_table root_id))))
(assert (= (mk___split_discrs__ref (mk___split_discrs result4)) (mk___split_discrs__ref (mk___split_discrs d__split_discrs))))
(assert (= (mk___split_discrs d__split_discrs1) (us_split_discrs1 (select decision_table root_id))))
(assert (= d__attr__constrained false))
(assert (= (mk_int__ref result5) (mk_int__ref kind)))
(assert (= kind1 (to_rep d__split_discrs1)))
(assert (in_range2 kind1))
(assert (not (= kind1 0)))
(assert (not (= kind1 1)))
(assert (not (= kind1 2)))
(declare-const x Int)
(assert (<= 1 x))
(assert (<= x 1000))
(assert (not (not (= (to_rep2 (select condition_values x)) 2))))
(check-sat)
(exit)
