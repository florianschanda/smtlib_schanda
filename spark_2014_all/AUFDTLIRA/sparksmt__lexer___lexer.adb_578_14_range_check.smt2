(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(declare-sort integer 0)
(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(declare-sort positive 0)
(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq1 (positive positive) Bool)
(declare-const dummy1 positive)
(declare-datatypes () ((positive__ref (mk_positive__ref (positive__content positive)))))
(define-fun positive__ref___projection ((a positive__ref)) positive (positive__content a))
(declare-sort character 0)
(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq2 (character character) Bool)
(declare-const dummy2 character)
(declare-datatypes () ((character__ref (mk_character__ref (character__content character)))))
(define-fun character__ref___projection ((a character__ref)) character (character__content a))
(declare-fun to_rep (character) Int)
(declare-fun of_rep (Int) character)
(assert (forall ((x character)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character))) (forall ((first Int)) (! (= (slide a first first) a) :pattern ((slide a first first))))))
(assert (forall ((a (Array Int character))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select (slide a old_first new_first) i))))))))
(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int Int) (Array Int character))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (forall ((i Int)) (! (and (=> (and (<= a_first i) (<= i a_last)) (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i))) (=> (< a_last i) (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select (concat1 a a_first a_last b b_first b_last) i)))))))
(declare-fun singleton1 (character Int) (Array Int character))
(assert (forall ((v character)) (forall ((i Int)) (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i))))))
(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int) (b (Array Int character)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78))))))) true false))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b b__first b__last a a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_78 Int)) (=> (and (<= a__first temp___idx_78) (<= temp___idx_78 a__last)) (= (to_rep (select a temp___idx_78)) (to_rep (select b (+ (- b__first a__first) temp___idx_78)))))))))))
(declare-fun compare ((Array Int character) Int Int (Array Int character) Int Int) Int)
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (= (compare a a_first a_last b b_first b_last) 0) (= (bool_eq a a_first a_last b b_first b_last) true)) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< (compare a a_first a_last b b_first b_last) 0) (exists ((i Int) (j Int)) (and (<= i a_last) (and (< j b_last) (and (= (bool_eq a a_first i b b_first j) true) (or (= i a_last) (and (< i a_last) (< (to_rep (select a (+ i 1))) (to_rep (select b (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(assert (forall ((a (Array Int character)) (b (Array Int character))) (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int)) (! (= (< 0 (compare a a_first a_last b b_first b_last)) (exists ((i Int) (j Int)) (and (<= i b_last) (and (< j a_last) (and (= (bool_eq a a_first j b b_first i) true) (or (= i b_last) (and (< i b_last) (< (to_rep (select b (+ i 1))) (to_rep (select a (+ j 1))))))))))) :pattern ((compare a a_first a_last b b_first b_last))))))
(declare-fun to_rep1 (integer) Int)
(declare-fun of_rep1 (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)))))
(assert (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)))))
(assert (forall ((x Int)) (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1 (of_rep1 x))))))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range f) (=> (in_range l) (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range low) (and (in_range high) (=> (<= low high) (and (in_range1 low) (in_range1 high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int character)) (rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))
(define-fun of_array ((a (Array Int character)) (f Int) (l Int)) us_t (mk___t a (mk f l)))
(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))
(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))
(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a)) (+ (- (last1 a) (first1 a)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int character)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int character)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int character)) Int)
(assert (<= 0 value__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__size a))))
(assert (<= 0 value__component__size))
(assert (forall ((a (Array Int character))) (<= 0 (object__component__size a))))
(assert (<= 0 value__alignment))
(assert (forall ((a (Array Int character))) (<= 0 (object__alignment a))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x))) (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y))) (to_rep1 (last (rt y)))))
(declare-fun user_eq3 (us_t us_t) Bool)
(declare-const dummy3 us_t)
(declare-fun to_string (us_image) us_t)
(declare-fun from_string (us_t) us_image)
(declare-datatypes () ((string__ref (mk_string__ref (string__content us_t)))))
(define-fun string__ref___projection ((a string__ref)) us_t (string__content a))
(declare-sort natural 0)
(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)
(declare-fun user_eq4 (natural natural) Bool)
(declare-const dummy4 natural)
(declare-datatypes () ((natural__ref (mk_natural__ref (natural__content natural)))))
(define-fun natural__ref___projection ((a natural__ref)) natural (natural__content a))
(declare-fun to_rep2 (natural) Int)
(declare-fun of_rep2 (Int) natural)
(assert (forall ((x natural)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)))))
(assert (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)))))
(assert (forall ((x Int)) (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2 (of_rep2 x))))))
(define-fun dynamic_invariant ((temp___expr_82 us_t) (temp___is_init_79 Bool) (temp___skip_constant_80 Bool) (temp___do_toplevel_81 Bool)) Bool (=> (not (= temp___skip_constant_80 true)) (dynamic_property 1 2147483647 (first1 temp___expr_82) (last1 temp___expr_82))))
(declare-sort read_status 0)
(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))
(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)
(declare-fun user_eq5 (read_status read_status) Bool)
(declare-const dummy5 read_status)
(declare-datatypes () ((read_status__ref (mk_read_status__ref (read_status__content read_status)))))
(define-fun read_status__ref___projection ((a read_status__ref)) read_status (read_status__content a))
(declare-fun to_rep3 (read_status) Int)
(declare-fun of_rep3 (Int) read_status)
(assert (forall ((x read_status)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)))))
(assert (forall ((x read_status)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)))))
(assert (forall ((x Int)) (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3 (of_rep3 x))))))
(declare-datatypes () ((us_split_discrs (mk___split_discrs (rec__file_io__read_result__status read_status)))))
(define-fun us_split_discrs___projection ((a us_split_discrs)) read_status (rec__file_io__read_result__status a))
(declare-datatypes () ((us_split_discrs__ref (mk___split_discrs__ref (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___projection ((a us_split_discrs__ref)) us_split_discrs (us_split_discrs__content a))
(declare-datatypes () ((us_split_fields (mk___split_fields (rec__file_io__read_result__c character)))))
(define-fun us_split_fields_C__projection ((a us_split_fields)) character (rec__file_io__read_result__c a))
(declare-datatypes () ((us_split_fields__ref (mk___split_fields__ref (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___2__projection ((a us_split_fields__ref)) us_split_fields (us_split_fields__content a))
(declare-datatypes () ((us_rep (mk___rep (us_split_discrs1 us_split_discrs) (us_split_fields1 us_split_fields) (attr__constrained Bool)))))
(define-fun us_rep___3__projection ((a us_rep)) us_split_discrs (us_split_discrs1 a))
(define-fun us_rep___4__projection ((a us_rep)) us_split_fields (us_split_fields1 a))
(define-fun us_rep___5__projection ((a us_rep)) Bool (attr__constrained a))
(define-fun file_io__read_result__c__pred ((a us_rep)) Bool (= (to_rep3 (rec__file_io__read_result__status (us_split_discrs1 a))) 0))
(define-fun bool_eq2 ((a us_rep) (b us_rep)) Bool (ite (and (= (to_rep3 (rec__file_io__read_result__status (us_split_discrs1 a))) (to_rep3 (rec__file_io__read_result__status (us_split_discrs1 b)))) (=> (file_io__read_result__c__pred a) (= (to_rep (rec__file_io__read_result__c (us_split_fields1 a))) (to_rep (rec__file_io__read_result__c (us_split_fields1 b)))))) true false))
(declare-const value__size1 Int)
(declare-fun object__size1 (us_rep) Int)
(declare-const value__alignment1 Int)
(declare-fun object__alignment1 (us_rep) Int)
(assert (<= 0 value__size1))
(assert (forall ((a us_rep)) (<= 0 (object__size1 a))))
(assert (<= 0 value__alignment1))
(assert (forall ((a us_rep)) (<= 0 (object__alignment1 a))))
(declare-const file_io__read_result__status__first__bit Int)
(declare-const file_io__read_result__status__last__bit Int)
(declare-const file_io__read_result__status__position Int)
(assert (<= 0 file_io__read_result__status__first__bit))
(assert (< file_io__read_result__status__first__bit file_io__read_result__status__last__bit))
(assert (<= 0 file_io__read_result__status__position))
(declare-const file_io__read_result__c__first__bit Int)
(declare-const file_io__read_result__c__last__bit Int)
(declare-const file_io__read_result__c__position Int)
(assert (<= 0 file_io__read_result__c__first__bit))
(assert (< file_io__read_result__c__first__bit file_io__read_result__c__last__bit))
(assert (<= 0 file_io__read_result__c__position))
(declare-fun user_eq6 (us_rep us_rep) Bool)
(declare-const dummy6 us_rep)
(declare-datatypes () ((read_result__ref (mk_read_result__ref (read_result__content us_rep)))))
(define-fun read_result__ref___projection ((a read_result__ref)) us_rep (read_result__content a))
(define-fun default_initial_assumption ((temp___expr_469 us_rep) (temp___skip_top_level_470 Bool)) Bool (and (= (attr__constrained temp___expr_469) false) (= (to_rep3 (rec__file_io__read_result__status (us_split_discrs1 temp___expr_469))) 2)))
(declare-sort name_id 0)
(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)
(declare-fun user_eq7 (name_id name_id) Bool)
(declare-const dummy7 name_id)
(declare-datatypes () ((name_id__ref (mk_name_id__ref (name_id__content name_id)))))
(define-fun name_id__ref___projection ((a name_id__ref)) name_id (name_id__content a))
(define-fun dynamic_invariant1 ((temp___expr_651 Int) (temp___is_init_648 Bool) (temp___skip_constant_649 Bool) (temp___do_toplevel_650 Bool)) Bool (=> (or (= temp___is_init_648 true) (<= 0 2147483647)) (in_range5 temp___expr_651)))
(declare-fun invariant__ (us_private) Bool)
(declare-fun invariant____function_guard (Bool us_private) Bool)
(assert true)
(declare-fun to_string1 (Int us_private) us_t)
(declare-fun to_string__function_guard (us_t Int us_private) Bool)
(assert (forall ((n Int)) (forall ((names__name_table us_private)) (! (=> (and (dynamic_invariant1 n true true true) (= (invariant__ names__name_table) true)) (dynamic_invariant (to_string1 n names__name_table) true false true)) :pattern ((to_string1 n names__name_table))))))
(declare-sort token_kind 0)
(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 8)))
(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)
(declare-fun user_eq8 (token_kind token_kind) Bool)
(declare-const dummy8 token_kind)
(declare-datatypes () ((token_kind__ref (mk_token_kind__ref (token_kind__content token_kind)))))
(define-fun token_kind__ref___projection ((a token_kind__ref)) token_kind (token_kind__content a))
(declare-fun to_rep4 (token_kind) Int)
(declare-fun of_rep4 (Int) token_kind)
(assert (forall ((x token_kind)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)))))
(assert (forall ((x token_kind)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)))))
(assert (forall ((x Int)) (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4 (of_rep4 x))))))
(declare-fun to_rep5 (name_id) Int)
(declare-fun of_rep5 (Int) name_id)
(assert (forall ((x name_id)) (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)))))
(assert (forall ((x name_id)) (! (in_range5 (to_rep5 x)) :pattern ((to_rep5 x)))))
(assert (forall ((x Int)) (! (=> (in_range5 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5 (of_rep5 x))))))
(declare-datatypes () ((us_split_discrs2 (mk___split_discrs1 (rec__lexer__token__kind token_kind)))))
(define-fun us_split_discrs___3__projection ((a us_split_discrs2)) token_kind (rec__lexer__token__kind a))
(declare-datatypes () ((us_split_discrs__ref1 (mk___split_discrs__ref1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___3__projection ((a us_split_discrs__ref1)) us_split_discrs2 (us_split_discrs__content1 a))
(declare-datatypes () ((us_split_fields2 (mk___split_fields1 (rec__lexer__token__line natural) (rec__lexer__token__col natural) (rec__lexer__token__length natural) (rec__lexer__token__value name_id)))))
(define-fun us_split_fields_Line__projection ((a us_split_fields2)) natural (rec__lexer__token__line a))
(define-fun us_split_fields_Col__projection ((a us_split_fields2)) natural (rec__lexer__token__col a))
(define-fun us_split_fields_Length__projection ((a us_split_fields2)) natural (rec__lexer__token__length a))
(define-fun us_split_fields_Value__projection ((a us_split_fields2)) name_id (rec__lexer__token__value a))
(declare-datatypes () ((us_split_fields__ref1 (mk___split_fields__ref1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___4__projection ((a us_split_fields__ref1)) us_split_fields2 (us_split_fields__content1 a))
(declare-datatypes () ((us_rep1 (mk___rep1 (us_split_discrs3 us_split_discrs2) (us_split_fields3 us_split_fields2) (attr__constrained1 Bool)))))
(define-fun us_rep___8__projection ((a us_rep1)) us_split_discrs2 (us_split_discrs3 a))
(define-fun us_rep___9__projection ((a us_rep1)) us_split_fields2 (us_split_fields3 a))
(define-fun us_rep___10__projection ((a us_rep1)) Bool (attr__constrained1 a))
(define-fun lexer__token__value__pred ((a us_rep1)) Bool (and (<= 3 (to_rep4 (rec__lexer__token__kind (us_split_discrs3 a)))) (<= (to_rep4 (rec__lexer__token__kind (us_split_discrs3 a))) 8)))
(define-fun bool_eq3 ((a us_rep1) (b us_rep1)) Bool (ite (and (and (and (and (= (to_rep4 (rec__lexer__token__kind (us_split_discrs3 a))) (to_rep4 (rec__lexer__token__kind (us_split_discrs3 b)))) (= (to_rep2 (rec__lexer__token__line (us_split_fields3 a))) (to_rep2 (rec__lexer__token__line (us_split_fields3 b))))) (= (to_rep2 (rec__lexer__token__col (us_split_fields3 a))) (to_rep2 (rec__lexer__token__col (us_split_fields3 b))))) (= (to_rep2 (rec__lexer__token__length (us_split_fields3 a))) (to_rep2 (rec__lexer__token__length (us_split_fields3 b))))) (=> (lexer__token__value__pred a) (= (to_rep5 (rec__lexer__token__value (us_split_fields3 a))) (to_rep5 (rec__lexer__token__value (us_split_fields3 b)))))) true false))
(declare-const value__size2 Int)
(declare-fun object__size2 (us_rep1) Int)
(declare-const value__alignment2 Int)
(declare-fun object__alignment2 (us_rep1) Int)
(assert (<= 0 value__size2))
(assert (forall ((a us_rep1)) (<= 0 (object__size2 a))))
(assert (<= 0 value__alignment2))
(assert (forall ((a us_rep1)) (<= 0 (object__alignment2 a))))
(declare-const lexer__token__kind__first__bit Int)
(declare-const lexer__token__kind__last__bit Int)
(declare-const lexer__token__kind__position Int)
(assert (<= 0 lexer__token__kind__first__bit))
(assert (< lexer__token__kind__first__bit lexer__token__kind__last__bit))
(assert (<= 0 lexer__token__kind__position))
(declare-const lexer__token__line__first__bit Int)
(declare-const lexer__token__line__last__bit Int)
(declare-const lexer__token__line__position Int)
(assert (<= 0 lexer__token__line__first__bit))
(assert (< lexer__token__line__first__bit lexer__token__line__last__bit))
(assert (<= 0 lexer__token__line__position))
(declare-const lexer__token__col__first__bit Int)
(declare-const lexer__token__col__last__bit Int)
(declare-const lexer__token__col__position Int)
(assert (<= 0 lexer__token__col__first__bit))
(assert (< lexer__token__col__first__bit lexer__token__col__last__bit))
(assert (<= 0 lexer__token__col__position))
(declare-const lexer__token__length__first__bit Int)
(declare-const lexer__token__length__last__bit Int)
(declare-const lexer__token__length__position Int)
(assert (<= 0 lexer__token__length__first__bit))
(assert (< lexer__token__length__first__bit lexer__token__length__last__bit))
(assert (<= 0 lexer__token__length__position))
(declare-const lexer__token__value__first__bit Int)
(declare-const lexer__token__value__last__bit Int)
(declare-const lexer__token__value__position Int)
(assert (<= 0 lexer__token__value__first__bit))
(assert (< lexer__token__value__first__bit lexer__token__value__last__bit))
(assert (<= 0 lexer__token__value__position))
(declare-fun user_eq9 (us_rep1 us_rep1) Bool)
(declare-const dummy9 us_rep1)
(declare-datatypes () ((token__ref (mk_token__ref (token__content us_rep1)))))
(define-fun token__ref___projection ((a token__ref)) us_rep1 (token__content a))
(define-fun default_initial_assumption1 ((temp___expr_674 us_rep1) (temp___skip_top_level_675 Bool)) Bool (and (= (attr__constrained1 temp___expr_674) false) (= (to_rep4 (rec__lexer__token__kind (us_split_discrs3 temp___expr_674))) 0)))
(declare-const current_read__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const next_read__attr__constrained Bool)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const t1 us_rep1)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const msg us_t)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-fun temp___String_Literal_891 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (= (to_rep (select (temp___String_Literal_891 us_void_param) 1)) 58) :pattern ((temp___String_Literal_891 us_void_param)))))
(declare-fun temp___String_Literal_892 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (= (to_rep (select (temp___String_Literal_892 us_void_param) 1)) 58) :pattern ((temp___String_Literal_892 us_void_param)))))
(declare-fun temp___String_Literal_893 (tuple0) (Array Int character))
(assert (forall ((us_void_param tuple0)) (! (and (= (to_rep (select (temp___String_Literal_893 us_void_param) 1)) 58) (= (to_rep (select (temp___String_Literal_893 us_void_param) 2)) 32)) :pattern ((temp___String_Literal_893 us_void_param)))))
(define-fun dynamic_invariant2 ((temp___expr_33 Int) (temp___is_init_30 Bool) (temp___skip_constant_31 Bool) (temp___do_toplevel_32 Bool)) Bool (=> (or (= temp___is_init_30 true) (<= 0 2147483647)) (in_range3 temp___expr_33)))
(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_36 Bool) (temp___skip_constant_37 Bool) (temp___do_toplevel_38 Bool)) Bool (=> (or (= temp___is_init_36 true) (<= 1 2147483647)) (in_range1 temp___expr_39)))
(define-fun dynamic_invariant4 ((temp___expr_63 Int) (temp___is_init_60 Bool) (temp___skip_constant_61 Bool) (temp___do_toplevel_62 Bool)) Bool (=> (or (= temp___is_init_60 true) (<= 0 255)) (in_range2 temp___expr_63)))
(define-fun dynamic_invariant5 ((temp___expr_15 Int) (temp___is_init_12 Bool) (temp___skip_constant_13 Bool) (temp___do_toplevel_14 Bool)) Bool (=> (or (= temp___is_init_12 true) (<= (- 2147483648) 2147483647)) (in_range temp___expr_15)))
(define-fun dynamic_invariant6 ((temp___expr_660 Int) (temp___is_init_657 Bool) (temp___skip_constant_658 Bool) (temp___do_toplevel_659 Bool)) Bool (=> (or (= temp___is_init_657 true) (<= 0 8)) (in_range6 temp___expr_660)))
(define-fun dynamic_invariant7 ((temp___expr_461 Int) (temp___is_init_458 Bool) (temp___skip_constant_459 Bool) (temp___do_toplevel_460 Bool)) Bool (=> (or (= temp___is_init_458 true) (<= 0 2)) (in_range4 temp___expr_461)))
(declare-const the_filename Int)
(declare-const name_table us_private)
(assert (in_range5 the_filename))
(assert (= current_read__attr__constrained false))
(assert (= next_read__attr__constrained false))
(assert (dynamic_invariant msg true false true))
(assert (= (invariant__ name_table) true))
(assert (not (in_range6 (to_rep4 (rec__lexer__token__kind (us_split_discrs3 t1))))))
(check-sat)
(exit)
