(set-info :smt-lib-version 2.5)
(set-info :license |https://www.gnu.org/licenses/gpl-3.0.html|)
(set-logic AUFDTLIRA)
(set-info :source |Benchmarks generated by Florian Schanda from the public SPARK 2014 testsuite and post-processed with a script to set more precise logics.|)
(set-info :category industrial)
(set-info :status unknown)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)
(declare-fun private__bool_eq (us_private us_private) Bool)
(declare-const us_null_ext__ us_private)
(declare-sort us_type_of_heap 0)
(declare-datatypes () ((us_type_of_heap__ref (mk___type_of_heap__ref (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)
(declare-datatypes () ((int__ref (mk_int__ref (int__content Int)))))
(declare-datatypes () ((bool__ref (mk_bool__ref (bool__content Bool)))))
(declare-datatypes () ((real__ref (mk_real__ref (real__content Real)))))
(declare-datatypes () ((us_private__ref (mk___private__ref (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))
(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))
(define-fun real__ref___projection ((a real__ref)) Real (real__content a))
(define-fun us_private__ref___projection ((a us_private__ref)) us_private (us_private__content a))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))
(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)
(declare-sort integer 0)
(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x) (<= x 2147483647)))
(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)
(declare-fun user_eq (integer integer) Bool)
(declare-const dummy integer)
(declare-datatypes () ((integer__ref (mk_integer__ref (integer__content integer)))))
(define-fun integer__ref___projection ((a integer__ref)) integer (integer__content a))
(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool) (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool) (temp___do_typ_inv_17 Bool)) Bool (=> (or (= temp___is_init_14 true) (<= (- 2147483648) 2147483647)) (in_range1 temp___expr_18)))
(declare-fun to_rep (integer) Int)
(declare-fun of_rep (Int) integer)
(assert (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)))))
(assert (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)))))
(assert (forall ((x Int)) (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep (of_rep x))))))
(declare-const a Int)
(declare-const attr__ATTRIBUTE_ADDRESS Int)
(declare-const b Int)
(declare-const attr__ATTRIBUTE_ADDRESS1 Int)
(declare-datatypes () ((map__ref (mk_map__ref (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))
(assert (forall ((a1 (Array Int integer))) (forall ((first Int)) (! (= (slide a1 first first) a1) :pattern ((slide a1 first first))))))
(assert (forall ((a1 (Array Int integer))) (forall ((old_first Int)) (forall ((new_first Int)) (forall ((i Int)) (! (= (select (slide a1 old_first new_first) i) (select a1 (- i (- new_first old_first)))) :pattern ((select (slide a1 old_first new_first) i))))))))
(define-fun bool_eq ((a1 (Array Int integer)) (a__first Int) (a__last Int) (b1 (Array Int integer)) (b__first Int) (b__last Int)) Bool (ite (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a1 temp___idx_154)) (to_rep (select b1 (+ (- b__first a__first) temp___idx_154))))))) true false))
(assert (forall ((a1 (Array Int integer)) (b1 (Array Int integer))) (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int)) (=> (= (bool_eq b1 b__first b__last a1 a__first a__last) true) (and (ite (<= a__first a__last) (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first))) (< b__last b__first)) (forall ((temp___idx_154 Int)) (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last)) (= (to_rep (select a1 temp___idx_154)) (to_rep (select b1 (+ (- b__first a__first) temp___idx_154)))))))))))
(define-fun dynamic_property ((first_int Int) (last_int Int) (x Int)) Bool (and (<= first_int x) (<= x last_int)))
(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)
(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)
(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)
(declare-fun user_eq1 (integer integer) Bool)
(declare-const dummy1 integer)
(declare-datatypes () ((ttD1__ref (mk_ttD1__ref (ttD1__content integer)))))
(define-fun ttD1__ref___projection ((a1 ttD1__ref)) integer (ttD1__content a1))
(declare-sort t 0)
(declare-fun first (t) integer)
(declare-fun last (t) integer)
(declare-fun mk (Int Int) t)
(assert (forall ((f Int) (l Int)) (! (=> (in_range1 f) (=> (in_range1 l) (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern ((mk f l)))))
(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int) (high Int)) Bool (and (in_range1 low) (and (in_range1 high) (=> (<= low high) (and (dynamic_property range_first range_last low) (dynamic_property range_first range_last high))))))
(declare-datatypes () ((us_t (mk___t (elts (Array Int integer)) (rt t)))))
(define-fun to_array ((a1 us_t)) (Array Int integer) (elts a1))
(define-fun of_array ((a1 (Array Int integer)) (f Int) (l Int)) us_t (mk___t a1 (mk f l)))
(define-fun first1 ((a1 us_t)) Int (to_rep (first (rt a1))))
(define-fun last1 ((a1 us_t)) Int (to_rep (last (rt a1))))
(define-fun length ((a1 us_t)) Int (ite (<= (first1 a1) (last1 a1)) (+ (- (last1 a1) (first1 a1)) 1) 0))
(declare-const value__size Int)
(declare-fun object__size ((Array Int integer)) Int)
(declare-const value__component__size Int)
(declare-fun object__component__size ((Array Int integer)) Int)
(declare-const value__alignment Int)
(declare-fun object__alignment ((Array Int integer)) Int)
(assert (<= 0 value__size))
(assert (forall ((a1 (Array Int integer))) (<= 0 (object__size a1))))
(assert (<= 0 value__component__size))
(assert (forall ((a1 (Array Int integer))) (<= 0 (object__component__size a1))))
(assert (<= 0 value__alignment))
(assert (forall ((a1 (Array Int integer))) (<= 0 (object__alignment a1))))
(define-fun bool_eq1 ((x us_t) (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x))) (to_rep (last (rt x))) (elts y) (to_rep (first (rt y))) (to_rep (last (rt y)))))
(declare-fun user_eq2 (us_t us_t) Bool)
(declare-const dummy2 us_t)
(declare-datatypes () ((t__ref (mk_t__ref (t__content us_t)))))
(define-fun t__ref___projection ((a1 t__ref)) us_t (t__content a1))
(define-fun dynamic_invariant1 ((temp___expr_159 us_t) (temp___is_init_155 Bool) (temp___skip_constant_156 Bool) (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool (=> (not (= temp___skip_constant_156 true)) (and (dynamic_property1 a b (first1 temp___expr_159) (last1 temp___expr_159)) (and (= (first1 temp___expr_159) a) (= (last1 temp___expr_159) b)))))
(declare-const tab__first integer)
(declare-const tab__last integer)
(declare-const attr__ATTRIBUTE_ADDRESS2 Int)
(declare-const attr__ATTRIBUTE_ADDRESS3 Int)
(declare-const attr__ATTRIBUTE_ADDRESS4 Int)
(declare-const tab (Array Int integer))
(declare-const j Int)
(declare-const k Int)
(declare-const temp___170 Int)
(declare-const temp___168 (Array Int integer))
(declare-const temp___171 Int)
(declare-const o integer)
(declare-const o1 Int)
(declare-const o2 (Array Int integer))
(declare-const o3 Int)
(declare-const o4 Int)
(declare-const temp___172 Int)
(declare-const o5 integer)
(declare-const o6 Int)
(declare-const o7 (Array Int integer))
(declare-const o8 Int)
(declare-const o9 Int)
(declare-const o10 Int)
(declare-const o11 Bool)
(declare-const temp___1721 Int)
(declare-const o12 integer)
(declare-const o13 Int)
(declare-const o14 (Array Int integer))
(declare-const o15 Int)
(declare-const o16 Int)
(declare-const tab1 (Array Int integer))
(declare-const result Int)
(declare-const j1 Int)
(declare-const result1 (Array Int integer))
(declare-const tab2 (Array Int integer))
(declare-const result2 Int)
(declare-const j2 Int)
(declare-const tab3 (Array Int integer))
(declare-const j3 Int)
(declare-const temp___1711 Int)
(declare-const result3 Int)
(declare-const temp___1712 Int)
(declare-const tab4 map__ref)
(declare-const j4 int__ref)
(declare-const tab5 (Array Int integer))
(declare-const j5 Int)
(declare-const tab6 map__ref)
(declare-const j6 int__ref)
(declare-const tab7 (Array Int integer))
(declare-const j7 Int)
(declare-const result4 int__ref)
(declare-const j8 Int)
(declare-const result5 int__ref)
(declare-const k1 Int)
(declare-const result6 Bool)
(declare-const result7 map__ref)
(declare-const tab8 (Array Int integer))
(declare-const result8 int__ref)
(declare-const j9 Int)
(declare-const result9 int__ref)
(declare-const k2 Int)
(declare-const j10 int__ref)
(declare-const k3 int__ref)
(declare-const j11 Int)
(declare-const k4 Int)
(declare-const tab9 (Array Int integer))
(declare-const j12 Int)
(declare-const k5 Int)
(declare-const temp___179 Int)
(declare-const temp___178 Int)
(declare-const result10 int__ref)
(declare-const temp___1791 Int)
(declare-const result11 int__ref)
(declare-const temp___1781 Int)
(declare-const result12 Bool)
(declare-const result13 map__ref)
(declare-const tab10 (Array Int integer))
(declare-const result14 int__ref)
(declare-const j13 Int)
(declare-const result15 int__ref)
(declare-const k6 Int)
(declare-const j14 int__ref)
(declare-const k7 int__ref)
(declare-const j15 Int)
(declare-const k8 Int)
(define-fun tab11 () map__ref (mk_map__ref tab))
(assert (in_range1 a))
(assert (in_range1 b))
(assert (and (dynamic_property1 a b (to_rep tab__first) (to_rep tab__last)) (and (= (to_rep tab__first) a) (= (to_rep tab__last) b))))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 j)))
(assert (=> (<= (- 2147483648) 2147483647) (in_range1 k)))
(assert (= result j))
(assert (= j1 a))
(assert (=> (<= j1 b) (= temp___170 j1)))
(assert (=> (<= j1 b) (= temp___168 tab)))
(assert (=> (<= j1 b) (= 0 temp___171)))
(assert (=> (<= j1 b) (= (to_rep o) j1)))
(assert (=> (<= j1 b) (and (<= (to_rep tab__first) j1) (<= j1 (to_rep tab__last)))))
(assert (=> (<= j1 b) (= o1 j1)))
(assert (=> (<= j1 b) (= o2 (store tab o1 o))))
(assert (=> (<= j1 b) (= (mk_map__ref result1) tab11)))
(assert (=> (<= j1 b) (= tab2 o2)))
(assert (=> (<= j1 b) (and (= o3 (+ j1 1)) (in_range1 (+ j1 1)))))
(assert (=> (<= j1 b) (= j1 result2)))
(assert (=> (<= j1 b) (= j2 o3)))
(assert (=> (<= j1 b) (=> (<= (- 2147483648) 2147483647) (in_range1 j3))))
(assert (=> (<= j1 b) (= temp___1711 result3)))
(assert (=> (<= j1 b) (= temp___1712 j3)))
(assert (=> (<= j1 b) (not (<= j3 b))))
(assert (=> (<= j1 b) (= j4 (mk_int__ref j3))))
(assert (=> (<= j1 b) (= tab4 (mk_map__ref tab3))))
(assert (=> (<= j1 b) (= j5 j3)))
(assert (=> (<= j1 b) (= tab5 tab3)))
(assert (=> (<= j1 b) (= j6 j4)))
(assert (=> (<= j1 b) (= tab6 tab4)))
(assert (=> (<= j1 b) (= j7 j5)))
(assert (=> (<= j1 b) (= tab7 tab5)))
(assert (=> (not (<= j1 b)) (= j6 (mk_int__ref j1))))
(assert (=> (not (<= j1 b)) (= tab6 tab11)))
(assert (=> (not (<= j1 b)) (= j7 j1)))
(assert (=> (not (<= j1 b)) (= tab7 tab1)))
(assert (= result4 j6))
(assert (= j8 a))
(assert (= result5 (mk_int__ref k)))
(assert (= k1 0))
(assert (and (= o4 (+ j8 k1)) (in_range1 (+ j8 k1))))
(assert (= result6 (ite (<= o4 b) true false)))
(assert (= result6 true))
(assert (= (to_rep o5) 0))
(assert (and (= temp___172 (+ j8 k1)) (in_range1 (+ j8 k1))))
(assert (and (<= (to_rep tab__first) temp___172) (<= temp___172 (to_rep tab__last))))
(assert (= o6 temp___172))
(assert (= o7 (store (map__content tab6) o6 o5)))
(assert (= result7 tab6))
(assert (= tab8 o7))
(assert (=> (< j8 100) (and (= o8 (+ j8 1)) (in_range1 (+ j8 1)))))
(assert (=> (< j8 100) (= result8 (mk_int__ref j8))))
(assert (=> (< j8 100) (= j9 o8)))
(assert (=> (< j8 100) (= k3 (mk_int__ref k1))))
(assert (=> (< j8 100) (= j10 (mk_int__ref j9))))
(assert (=> (< j8 100) (= k4 k1)))
(assert (=> (< j8 100) (= j11 j9)))
(assert (=> (not (< j8 100)) (and (= o9 (+ k1 1)) (in_range1 (+ k1 1)))))
(assert (=> (not (< j8 100)) (= result9 (mk_int__ref k1))))
(assert (=> (not (< j8 100)) (= k2 o9)))
(assert (=> (not (< j8 100)) (= k3 (mk_int__ref k2))))
(assert (=> (not (< j8 100)) (= j10 (mk_int__ref j8))))
(assert (=> (not (< j8 100)) (= k4 k2)))
(assert (=> (not (< j8 100)) (= j11 j8)))
(assert (and (=> (<= (- 2147483648) 2147483647) (in_range1 j12)) (=> (<= (- 2147483648) 2147483647) (in_range1 k5))))
(assert (= result10 (mk_int__ref temp___179)))
(assert (= temp___1791 j12))
(assert (= result11 (mk_int__ref temp___178)))
(assert (= temp___1781 k5))
(assert (and (= o10 (+ j12 k5)) (in_range1 (+ j12 k5))))
(assert (= o11 (ite (<= o10 b) true false)))
(assert (= result12 (ite (not (= o11 true)) true false)))
(assert (not (= result12 true)))
(assert (= (to_rep o12) 0))
(assert (and (= temp___1721 (+ j12 k5)) (in_range1 (+ j12 k5))))
(assert (and (<= (to_rep tab__first) temp___1721) (<= temp___1721 (to_rep tab__last))))
(assert (= o13 temp___1721))
(assert (= o14 (store tab9 o13 o12)))
(assert (= result13 (mk_map__ref tab9)))
(assert (= tab10 o14))
(assert (=> (< j12 100) (and (= o15 (+ j12 1)) (in_range1 (+ j12 1)))))
(assert (=> (< j12 100) (= result14 (mk_int__ref j12))))
(assert (=> (< j12 100) (= j13 o15)))
(assert (=> (< j12 100) (= k7 (mk_int__ref k5))))
(assert (=> (< j12 100) (= j14 (mk_int__ref j13))))
(assert (=> (< j12 100) (= k8 k5)))
(assert (=> (< j12 100) (= j15 j13)))
(assert (=> (not (< j12 100)) (and (= o16 (+ k5 1)) (in_range1 (+ k5 1)))))
(assert (=> (not (< j12 100)) (= result15 (mk_int__ref k5))))
(assert (=> (not (< j12 100)) (= k6 o16)))
(assert (=> (not (< j12 100)) (= k7 (mk_int__ref k6))))
(assert (=> (not (< j12 100)) (= j14 (mk_int__ref j12))))
(assert (=> (not (< j12 100)) (= k8 k6)))
(assert (=> (not (< j12 100)) (= j15 j12)))
(assert (not (or (< temp___1791 (int__content j14)) (and (= (int__content j14) temp___1791) (< temp___1781 (int__content k7))))))
(check-sat)
(exit)
